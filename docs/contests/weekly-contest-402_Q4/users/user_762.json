{
    "username": "maheshwariparth234",
    "submission": "class Solution {\npublic:\n    int arr[100001];\n    int tree[400004];    \n    \n    void build(int node, int left, int right) {\n        if (left == right) {\n            tree[node] = arr[left];\n            return;\n        }\n\n        int mid = (left + right)/2;\n        build(2*node, left, mid);\n        build(2*node + 1, mid+1, right);\n        // Operation\n        tree[node] = tree[2*node] + tree[2*node + 1];\n    }\n    int query(int node, int left, int right, int start, int end) {\n        // Out of range\n        if (left > end || right < start) return 0;\n        // Inside range\n        if (left >= start && right <= end) return tree[node];\n\n        // Partial\n        int mid = (left + right)/2;\n        int leftRes = query(2*node, left, mid, start, end);\n        int rightRes = query(2*node+1, mid+1, right, start, end);\n        // Operation\n        return (leftRes + rightRes);\n    }\n    void pointUpdate(int node, int left, int right, int index, int value) {\n        if (left == right) {\n            tree[node] = value;\n            return;\n        }\n\n        int mid = (left + right)/2;\n        if (index <= mid)\n            pointUpdate(2*node, left, mid, index, value);\n        else\n            pointUpdate(2*node+1, mid+1, right, index, value);\n\n        // Operation\n        tree[node] = tree[2*node] + tree[2*node + 1];\n    }\n    vector<int> countOfPeaks(vector<int>& nums, vector<vector<int>>& queries) {\n        int n = nums.size();\n        for (int i=1; i<n-1; i++) {\n            if (nums[i] > nums[i-1] && nums[i] > nums[i+1]) arr[i] = 1;\n        }\n        vector<int> ans;\n        build(1, 0, n-1);\n        for (auto q : queries) {\n            if (q[0] == 1) {\n                int sum = query(1, 0, n-1, q[1]+1, q[2]-1);\n                ans.push_back(sum);\n            }else {\n                int ind = q[1];\n                int val = q[2];\n                nums[ind] = val;\n                if (ind-1 > 0) {\n                    int temp = arr[ind-1];\n                    if (nums[ind-1] > nums[ind-2] && nums[ind-1] > nums[ind]) arr[ind-1] = 1;\n                    else arr[ind-1] = 0;\n                    if (temp != arr[ind-1]) {\n                        pointUpdate(1, 0, n-1, ind-1, arr[ind-1]);        \n                    }\n                }\n                if (ind+1 < n-1) {\n                    int temp = arr[ind+1];\n                    if (nums[ind+1] > nums[ind] && nums[ind+1] > nums[ind+2]) arr[ind+1] = 1;\n                    else arr[ind+1] = 0;\n                    if (temp != arr[ind+1])\n                        pointUpdate(1, 0, n-1, ind+1, arr[ind+1]);\n                }\n                if (ind == 0 || ind == n-1) continue;\n                int temp = arr[ind];\n                if (nums[ind] > nums[ind-1] && nums[ind] > nums[ind+1]) arr[ind] = 1;\n                else arr[ind] = 0;\n                if (temp != arr[ind])\n                    pointUpdate(1, 0, n-1, ind, arr[ind]);\n            }\n        }\n        return ans;\n    }\n};",
    "submit_ts": "1718508407",
    "subm_id": "1289680376"
}