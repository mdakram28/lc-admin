{
    "username": "hashmap_",
    "submission": "\n\nclass Solution {\n    public int minimumCost(String target, String[] words, int[] costs) {\n        int n = target.length();\n        int[] dp = new int[n + 1];\n        \n        \n        HashMap<String, Integer> wordCostMap = new HashMap<>();\n        for (int i = 0; i < words.length; i++) {\n            String word = words[i];\n            int cost = costs[i];\n            if (!wordCostMap.containsKey(word) || cost < wordCostMap.get(word)) {\n                wordCostMap.put(word, cost);\n            }\n        }\n        \n      \n        String[] uniqueWords = new String[wordCostMap.size()];\n        int[] uniqueCosts = new int[wordCostMap.size()];\n        int index = 0;\n        for (Map.Entry<String, Integer> entry : wordCostMap.entrySet()) {\n            uniqueWords[index] = entry.getKey();\n            uniqueCosts[index] = entry.getValue();\n            index++;\n        }\n\n        Trie trie = new Trie();\n        for (int i = 0; i < uniqueWords.length; i++) {\n            trie.insert(uniqueWords[i], i);\n        }\n\n        PriorityQueue<int[]> pq = new PriorityQueue<>((a, b) -> a[0] - b[0]);\n        pq.offer(new int[]{0, 0});\n        Arrays.fill(dp, Integer.MAX_VALUE);\n        dp[0] = 0;\n        \n        while (!pq.isEmpty()) {\n            int[] current = pq.poll();\n            int currentCost = current[0];\n            int currentIndex = current[1];\n\n            if (currentIndex == n) {\n                return currentCost;\n            }\n\n            if (currentCost > dp[currentIndex]) continue;\n\n            for (int idx : trie.search(target, currentIndex)) {\n                int len = uniqueWords[idx].length();\n                int ni = currentIndex + len;\n                int ncc = currentCost + uniqueCosts[idx];\n                if (ni <= n && ncc < dp[ni] && target.substring(currentIndex, ni).equals(uniqueWords[idx])) {\n                    dp[ni] = ncc;\n                    pq.offer(new int[]{ncc, ni});\n                }\n            }\n        }\n\n        return dp[n] == Integer.MAX_VALUE ? -1 : dp[n];\n    }\n}\n\nclass TrieNode {\n    TrieNode[] children;\n    int index;\n\n    TrieNode() {\n        children = new TrieNode[26];\n        index = -1;\n    }\n}\n\nclass Trie {\n    TrieNode root;\n\n    Trie() {\n        root = new TrieNode();\n    }\n\n    void insert(String word, int index) {\n        TrieNode node = root;\n        for (char c : word.toCharArray()) {\n            if (node.children[c - 'a'] == null) {\n                node.children[c - 'a'] = new TrieNode();\n            }\n            node = node.children[c - 'a'];\n        }\n        node.index = index;\n    }\n\n    List<Integer> search(String s, int start) {\n        List<Integer> result = new ArrayList<>();\n        TrieNode node = root;\n        for (int i = start; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (node.children[c - 'a'] == null) break;\n            node = node.children[c - 'a'];\n            if (node.index != -1) {\n                result.add(node.index);\n            }\n        }\n        return result;\n    }\n}\n\nclass Main {\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        String target = \"r\";\n        String[] words = {\"r\", \"r\", \"r\"};\n        int[] costs = {1, 10, 100};\n        System.out.println(solution.minimumCost(target, words, costs)); // Output: 1\n    }\n}\n",
    "submit_ts": "1720322774",
    "subm_id": "1312358756"
}