{
    "username": "jtcheng26",
    "submission": "class Solution {\npublic:\n    int numWith(int x, const string& s) {\n        int l = 0;\n        deque<int> zeroes;\n        int ans = 0;\n        int need = max(x * x + x, 1);\n        int n = s.length();\n        for (int r=0;r<n;r++) {\n            if (s[r] == '0') {\n                if (zeroes.size() == x) {\n                    if (x == 0) {\n                        ans += (r - l + 1) * (r - l) / 2;\n                        l = r+1;\n                        continue;\n                    }\n                    int len = r - l;\n                    if (len >= need) {\n                        int canLose = len - need;\n                        int onLeft = zeroes.front() - l;\n                        int onRight = r - zeroes.back() - 1;\n                        for (int j=l;j<=zeroes.front();j++) {\n                            if (need + j - 1 < r) ans += r - max(zeroes.back(), (need + j - 1));\n                        }\n                        // ans += 1 + ((len - need + 1) + 1) * (len - need + 1) / 2;\n                    }\n                    l = zeroes.front() + 1;\n                    zeroes.pop_front();\n                }\n                zeroes.push_back(r);\n            }\n        }\n        \n        int len = n - l;\n        if (len >= need && zeroes.size() == x) {\n            if (x == 0) ans += (len + 1) * (len) / 2;\n            else\n                for (int j=l;j<=zeroes.front();j++) {\n                    if (need + j - 1 < n) ans += n - max(zeroes.back(), (need + j - 1));\n                }\n            // ans += ((len - need + 1) + 1) * (len - need + 1) / 2;\n        }\n        \n        return ans;\n    }\n    int numberOfSubstrings(string s) {\n        int n = s.length();\n        int ans = 0;\n        for (int i=0;i*i+i<=n;i++) {\n            int k = numWith(i, s);\n            ans += k;\n            // cout << i << \" \" << k << \"\\n\";\n        }\n        \n        return ans;\n    }\n};",
    "submit_ts": "1722137892",
    "subm_id": "1335776589"
}