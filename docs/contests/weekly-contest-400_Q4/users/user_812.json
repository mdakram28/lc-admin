{
    "username": "sanjibkd",
    "submission": "class SegmentTree {\npublic:\n    vector<int> tree;\n    int n;\n\n    SegmentTree(vector<int>& nums) {\n        n = nums.size();\n        tree.resize(4 * n);\n        build(nums, 0, 0, n - 1);\n    }\n\n    void build(vector<int>& nums, int node, int start, int end) {\n        if (start == end) tree[node] = nums[start];\n        else {\n            int mid = start + (end - start) / 2;\n            build(nums, 2 * node + 1, start, mid);\n            build(nums, 2 * node + 2, mid + 1, end);\n            tree[node] = tree[2 * node + 1] & tree[2 * node + 2];\n        }\n    }\n\n    int query(int l, int r) {\n        return query(0, 0, n - 1, l, r);\n    }\n\n    int query(int node, int start, int end, int l, int r) {\n        if (r < start || end < l) return INT_MAX;\n        if (l <= start && end <= r) return tree[node];\n        int mid = start + (end - start) / 2;\n        int p1 = query(2 * node + 1, start, mid, l, r);\n        int p2 = query(2 * node + 2, mid + 1, end, l, r);\n        return p1 & p2;\n    }\n};\n\nclass Solution {\npublic:\n    int minimumDifference(vector<int>& nums, int k) {\n        int n = nums.size();\n        SegmentTree st(nums);\n        int res = INT_MAX;\n        for (int i = 0; i < n; i++) {\n            int l = i - 1, r = n - 1, mid;\n\n            // binary search implementation\n            while (r - l > 1) {\n                mid = (l + r) / 2;\n                if (st.query(i, mid) >= k)\n                    l = mid;\n                else\n                    r = mid;\n            }\n            if (l != i - 1)\n                res = min(res, abs(st.query(i, l) - k));\n            res = min(res, abs(k - st.query(i, r)));\n        }\n        return res;\n    }\n};",
    "submit_ts": 1717299716.0
}