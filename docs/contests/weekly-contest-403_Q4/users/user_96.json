{
    "username": "ocavue",
    "submission": "from typing import List\nfrom functools import cache\n\n\ndef count(nums):\n    i = 0\n\n    while i < len(nums) and nums[i] == 0:\n        i += 1\n\n    j = len(nums) - 1\n\n    while j >= 0 and nums[j] == 0:\n        j -= 1\n\n    return j - i + 1\n\n\nclass Solution:\n    def minimumSum(self, grid: List[List[int]]) -> int:\n        def calc3(r1, r2, c1, c2):\n            best = (r2 - r1) * (c2 - c1)\n\n            for rx in range(r1 + 1, r2):\n                best = min(best, calc2(r1, rx, c1, c2) + calc1(rx, r2, c1, c2))\n                best = min(best, calc1(r1, rx, c1, c2) + calc2(rx, r2, c1, c2))\n            for cx in range(c1 + 1, c2):\n                best = min(best, calc2(r1, r2, c1, cx) + calc1(r1, r2, cx, c2))\n                best = min(best, calc1(r1, r2, c1, cx) + calc2(r1, r2, cx, c2))\n            return best\n\n        @cache\n        def calc2(r1, r2, c1, c2):\n            best = (r2 - r1) * (c2 - c1)\n\n            for rx in range(r1 + 1, r2):\n                best = min(best, calc1(r1, rx, c1, c2) + calc1(rx, r2, c1, c2))\n            for cx in range(c1 + 1, c2):\n                best = min(best, calc1(r1, r2, c1, cx) + calc1(r1, r2, cx, c2))\n            return best\n\n        @cache\n        def calc1(r1, r2, c1, c2):\n            m = r2 - r1\n            n = c2 - c1\n\n            if m <= 0 or n <= 0:\n                return 0\n\n            rows = [0] * m\n            cols = [0] * n\n\n            for r in range(r1, r2):\n                for c in range(c1, c2):\n                    rows[r - r1] += grid[r][c]\n                    cols[c - c1] += grid[r][c]\n\n            return count(rows) * count(cols)\n\n        return calc3(0, len(grid), 0, len(grid[0]))\n\n ",
    "submit_ts": "1719112206",
    "subm_id": "1297293765"
}