{
    "username": "nsk_91",
    "submission": "import java.util.*;\n\nclass Solution {\n    \n    public boolean func_1(List<List<Integer>> var_1, int var_2, int var_3, int var_4, int var_5) {\n        Queue<Integer> var_6 = new LinkedList<>();\n        boolean[] var_7 = new boolean[var_5 + 4];\n        var_6.add(var_2);\n        var_7[var_2] = true;\n\n        for (int i = 0; !var_6.isEmpty(); i++) {\n            int var_8 = var_6.poll();\n            for (int var_9 : var_1.get(var_8)) {\n                if (!var_7[var_9]) {\n                    var_6.add(var_9);\n                    var_7[var_9] = true;\n                }\n            }\n        }\n        return var_7[var_3] || var_7[var_4];\n    }\n\n    public boolean canReachCorner(int X, int Y, int[][] circles) {\n        List<int[]> circleList = new ArrayList<>(Arrays.asList(circles));\n        List<List<Integer>> adjacencyList = new ArrayList<>();\n        int circleCount = circles.length;\n\n        for (int i = 0; i < circleCount + 4; i++) {\n            adjacencyList.add(new ArrayList<>());\n        }\n\n        for (int i = 0; i < circleCount; i++) {\n            int[] circle = circleList.get(i);\n            int cx = circle[0];\n            int cy = circle[1];\n            int r = circle[2];\n\n            switch (0) { // changing ifs to switch\n                case 0:\n                    if (cx <= r) {\n                        adjacencyList.get(circleCount).add(i);\n                        adjacencyList.get(i).add(circleCount);\n                    }\n                case 1:\n                    if (X - cx <= r) {\n                        adjacencyList.get(circleCount + 2).add(i);\n                        adjacencyList.get(i).add(circleCount + 2);\n                    }\n                case 2:\n                    if (cy <= r) {\n                        adjacencyList.get(circleCount + 1).add(i);\n                        adjacencyList.get(i).add(circleCount + 1);\n                    }\n                case 3:\n                    if (Y - cy <= r) {\n                        adjacencyList.get(circleCount + 3).add(i);\n                        adjacencyList.get(i).add(circleCount + 3);\n                    }\n            }\n            for (int j = i + 1; j < circleList.size(); j++) {\n                int[] otherCircle = circleList.get(j);\n                double distance = Math.sqrt(Math.pow(cx - otherCircle[0], 2) + Math.pow(cy - otherCircle[1], 2));\n                int combinedRadius = r + otherCircle[2];\n                if (combinedRadius >= distance) {\n                    adjacencyList.get(i).add(j);\n                    adjacencyList.get(j).add(i);\n                }\n            }\n        }\n\n        boolean result = false;\n        result = result || func_1(adjacencyList, circleCount, circleCount + 1, circleCount + 2, circleCount + 4);\n        result = result || func_1(adjacencyList, circleCount + 3, circleCount + 2, circleCount + 1, circleCount + 4);\n\n        return !result;\n    }\n\n    public int func_3(int var_24, int var_25) {\n        int var_26 = var_24 + var_25;\n        return var_26;\n    }\n\n    public int func_4(int var_27, int var_28) {\n        int var_29 = (int) Math.abs(var_27 - var_28);\n        return var_29;\n    }\n\n    public int func_5(int var_30, int var_31) {\n        int var_32 = var_30 * var_31;\n        return var_32;\n    }\n\n    public int func_6(int var_33, int var_34) {\n        int var_35 = (int) Math.pow(var_33, var_34);\n        return var_35;\n    }\n\n    public void func_7(int[] var_36, int var_37, int var_38, int var_39) {\n        int var_40, var_41, var_42;\n        int var_43 = var_38 - var_37 + 1;\n        int var_44 = var_39 - var_38;\n        int[] var_45 = new int[var_43];\n        int[] var_46 = new int[var_44];\n        for (var_40 = 0; var_40 < var_43; var_40++)\n            var_45[var_40] = var_36[var_37 + var_40];\n        for (var_41 = 0; var_41 < var_44; var_41++)\n            var_46[var_41] = var_36[var_38 + 1 + var_41];\n        var_40 = 0;\n        var_41 = 0;\n        var_42 = var_37;\n        for (; var_40 < var_43 && var_41 < var_44; var_42++) { // changed while to for\n            if (var_45[var_40] <= var_46[var_41]) {\n                var_36[var_42] = var_45[var_40];\n                var_40++;\n            } else {\n                var_36[var_42] = var_46[var_41];\n                var_41++;\n            }\n        }\n        for (; var_40 < var_43; var_42++) { // changed while to for\n            var_36[var_42] = var_45[var_40];\n            var_40++;\n        }\n        for (; var_41 < var_44; var_42++) { // changed while to for\n            var_36[var_42] = var_46[var_41];\n            var_41++;\n        }\n    }\n\n    public void func_8(int[] var_47, int var_48, int var_49) {\n        while (var_48 < var_49) { // changed if to while\n            int var_50 = var_48 + (var_49 - var_48) / 2;\n            func_8(var_47, var_48, var_50);\n            func_8(var_47, var_50 + 1, var_49);\n            func_7(var_47, var_48, var_50, var_49);\n            break;\n        }\n    }\n\n    public void func_9(int[] var_51, int var_52) {\n        int i = 0;\n        while (i < var_52) { // changed for to while\n            System.out.print(var_51[i] + \" \");\n            i++;\n        }\n        System.out.println();\n    }\n}\n",
    "submit_ts": "1722138349",
    "subm_id": "1335788501"
}