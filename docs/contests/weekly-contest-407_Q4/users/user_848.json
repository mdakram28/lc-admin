{
    "username": "killer-whale",
    "submission": "def nge(arr):\n    n = len(arr)\n    result = [n] * n\n    stack = []\n    for i in range(n):\n        while stack and arr[stack[-1]] < arr[i]:\n            result[stack.pop()] = i\n        stack.append(i)\n    return result\nclass Solution:\n    def minimumOperations(self, nums: List[int], target: List[int]) -> int:\n        diff = []\n        for a,b in zip(nums, target):\n            diff.append(b-a)\n        res = 0\n        for k, v in groupby(diff, key=lambda x:x==0):\n            if not k: \n                vals = list(v)\n                for k, v in groupby(vals, key=lambda x:x>0):\n                    v = [abs(val) for val in v]\n                    # [3, 1, 5, 3, 4, 2]\n                    # 2 0 4 2 3 1  + 1\n                    # 0 0 4 2 3 1  + 2\n                    #     3 1 2 0  + 1\n                    #     2 0 1  + 2\n                    #     0 0 1  + 1\n                    #     0 0 0  + 1\n                    st = ST([Node(i, val) for i, val in enumerate(v)], init=1, default=Node(inf, inf))\n                    def f(l, r, acc):\n                        if l >= r:\n                            return 0\n                        mi = st[l:r]\n                        # print(mi.val, acc, mi.val-acc)\n                        return mi.val - acc + f(l, mi.idx, mi.val) + f(mi.idx + 1, r, mi.val)\n                    #print('vals',v)\n                    x = f(0, len(st), 0)\n                    #print('test', x)\n                    res += x\n                    \n        return res\n\nclass Node:\n    def __init__(self, idx, val):\n        self.idx = idx\n        self.val = val\n\n    def __add__(self, other):\n        if self.val < other.val:\n            return self\n        else:\n            return other\n\nclass ST:\n    def __init__(self, data, default=0, func=lambda x, y: x + y, offset=0, init=False):\n        self._default = default\n        self._func = func\n        self._len = len(data)\n        self._size = _size = 1 << (self._len - 1).bit_length()\n        self._offset = offset\n\n        self.data = [default] * (2 * _size)\n        self.data[_size:_size + self._len] = data\n        if init:\n            for i in reversed(range(_size)):\n                self.data[i] = func(self.data[i + i], self.data[i + i + 1])\n\n    def __delitem__(self, idx):\n        self[idx] = self._default\n\n    def __getitem__(self, key):\n        if isinstance(key, slice):\n            start = key.start if key.start is not None else -self._offset\n            stop = key.stop if key.stop is not None else -self._offset + self._len\n            return self.query(start, stop)\n        else:\n            return self.data[key + self._size + self._offset]\n\n    def __setitem__(self, idx, value):\n        idx += self._size + self._offset\n        self.data[idx] = value\n        idx >>= 1\n        while idx:\n            self.data[idx] = self._func(self.data[2 * idx], self.data[2 * idx + 1])\n            idx >>= 1\n\n    def __len__(self):\n        return self._len\n\n    def query(self, start, stop):\n        \"\"\"func of data[start, stop)\"\"\"\n        start = max(start, -self._offset) + self._offset\n        stop = min(stop, -self._offset + self._len) + self._offset\n        start += self._size\n        stop += self._size\n\n        res_left = res_right = self._default\n        while start < stop:\n            if start & 1:\n                res_left = self._func(res_left, self.data[start])\n                start += 1\n            if stop & 1:\n                stop -= 1\n                res_right = self._func(self.data[stop], res_right)\n            start >>= 1\n            stop >>= 1\n\n        return self._func(res_left, res_right)\n    \n    def query_wraparound(self, start, end):\n        res = 0\n        if start < -self._offset:\n            diff = self._offset - start\n            q, r = divmod(diff, self._len)\n            res += self.data[1] * q + self[self._len - r:]\n        if end > -self._offset + self._len:\n            diff = end - (self._len - self._offset)\n            q, r = divmod(diff, self._len)\n            res += self.data[1] * q + self[:r - self._offset]\n        return res + self[start:end]\n\n    def find_k(self, k):\n        \"\"\"find the maximum idx where func of data[:idx] <= k\"\"\"\n        return BS.findmax(\n            -self._offset,\n            -self._offset + self._len,\n            lambda idx: self.query(-self._offset, idx) <= k\n        )\n\n    def query_all(self):\n        \"\"\"func of data[:]\"\"\"\n        return self.data[1]\n\n    def __repr__(self):\n        return \"ST({0})\".format(self.data[self._size:self._size + self._len])\n\nclass BS:\n    @staticmethod\n    def findmin(low: int, high: int, check) -> int:\n        \"\"\"find the minimum int x which make check true\"\"\"\n        while low < high - 1:\n            mid = low + (high - low) // 2\n            if check(mid):\n                high = mid\n            else:\n                low = mid\n        return low if check(low) else high\n\n    @staticmethod\n    def findmax(low: int, high: int, check) -> int:\n        \"\"\"find the maximum int x which make check true\"\"\"\n        while low < high - 1:\n            mid = low + (high - low) // 2\n            if check(mid):\n                low = mid\n            else:\n                high = mid\n        return high if check(high) else low\n\n    @staticmethod\n    def find_float_left(low: float, high: float, check, error=1e-6) -> float:\n        \"\"\"find the minimum float x which make check true\"\"\"\n        while low < high - error:\n            mid = low + (high - low) / 2\n            if check(mid):\n                high = mid\n            else:\n                low = mid\n        return low if check(low) else high\n\n    @staticmethod\n    def find_float_right(low: float, high: float, check, error=1e-6) -> float:\n        \"\"\"find the maximum float x which make check true\"\"\"\n        while low < high - error:\n            mid = low + (high - low) / 2\n            if check(mid):\n                low = mid\n            else:\n                high = mid\n        return high if check(high) else low\n",
    "submit_ts": "1721531666",
    "subm_id": "1327966789"
}