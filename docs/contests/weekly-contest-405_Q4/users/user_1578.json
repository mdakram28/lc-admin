{
    "username": "LastToAC",
    "submission": "#include \"bits/stdc++.h\"\nusing namespace std;\n\nstruct TrieNode {\n    unordered_map<char, TrieNode*> children;\n    vector<pair<int, int>> index_cost;\n};\n\nstruct Trie {\n    TrieNode* root;\n\n    Trie() { root = new TrieNode(); }\n\n    void add(const string& word, int index, int cost) {\n        TrieNode* node = root;\n        for (char c : word) {\n            if (node->children.find(c) == node->children.end()) {\n                node->children[c] = new TrieNode();\n            }\n            node = node->children[c];\n        }\n        node->index_cost.push_back({index, cost});\n    }\n};\n\nclass Solution {\n   public:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int n = target.size();\n        vector<int> dp(n + 1, INT_MAX);\n        dp[0] = 0;\n        Trie trie;\n        for (int i = 0; i < words.size(); i++) {\n            trie.add(words[i], i, costs[i]);\n        }\n        for (int i = 0; i < n; i++) {\n            if (dp[i] == INT_MAX) {\n                continue;\n            }\n            TrieNode* node = trie.root;\n            for (int j = i; j < n; j++) {\n                if (node->children.find(target[j]) == node->children.end()) {\n                    break;\n                }\n                node = node->children[target[j]];\n                for (auto [index, cost] : node->index_cost) {\n                    int word_len = words[index].size();\n                    if (i + word_len <= n) {\n                        dp[i + word_len] = min(dp[i + word_len], dp[i] + cost);\n                    }\n                }\n            }\n        }\n        return dp[n] == INT_MAX ? -1 : dp[n];\n    }\n};\n",
    "submit_ts": "1720324498",
    "subm_id": "1312400989"
}