{
    "username": "981377660LMT",
    "submission": "from typing import List, Tuple, Optional\nfrom collections import defaultdict, Counter\nfrom sortedcontainers import SortedList\n\n\nMOD = int(1e9 + 7)\nINF = int(1e20)\nfrom typing import Callable, Generic, List, TypeVar\n\nT = TypeVar(\"T\")\n\n\nclass Rerooting(Generic[T]):\n    __slots__ = (\"adjList\", \"_n\", \"_decrement\")\n\n    def __init__(self, n: int, decrement: int = 0):\n        self.adjList = [[] for _ in range(n)]\n        self._n = n\n        self._decrement = decrement\n\n    def addEdge(self, u: int, v: int) -> None:\n        u -= self._decrement\n        v -= self._decrement\n        self.adjList[u].append(v)\n        self.adjList[v].append(u)\n\n    def rerooting(\n        self,\n        e: Callable[[int], T],\n        op: Callable[[T, T], T],\n        composition: Callable[[T, int, int, int], T],\n        root=0,\n    ) -> List[\"T\"]:\n        root -= self._decrement\n        assert 0 <= root < self._n\n        parents = [-1] * self._n\n        order = [root]\n        stack = [root]\n        while stack:\n            cur = stack.pop()\n            for next in self.adjList[cur]:\n                if next == parents[cur]:\n                    continue\n                parents[next] = cur\n                order.append(next)\n                stack.append(next)\n\n        dp1 = [e(i) for i in range(self._n)]\n        dp2 = [e(i) for i in range(self._n)]\n        for cur in order[::-1]:\n            res = e(cur)\n            for next in self.adjList[cur]:\n                if parents[cur] == next:\n                    continue\n                dp2[next] = res\n                res = op(res, composition(dp1[next], cur, next, 0))\n            res = e(cur)\n            for next in self.adjList[cur][::-1]:\n                if parents[cur] == next:\n                    continue\n                dp2[next] = op(res, dp2[next])\n                res = op(res, composition(dp1[next], cur, next, 0))\n            dp1[cur] = res\n\n        for newRoot in order[1:]:\n            parent = parents[newRoot]\n            dp2[newRoot] = composition(op(dp2[newRoot], dp2[parent]), parent, newRoot, 1)\n            dp1[newRoot] = op(dp1[newRoot], dp2[newRoot])\n        return dp1\n\n\n# \u7ed9\u4f60\u4e00\u68f5 \u65e0\u5411 \u6811\uff0c\u6811\u4e2d\u8282\u70b9\u4ece 0 \u5230 n - 1 \u7f16\u53f7\u3002\u540c\u65f6\u7ed9\u4f60\u4e00\u4e2a\u957f\u5ea6\u4e3a n - 1 \u7684\u4e8c\u7ef4\u6574\u6570\u6570\u7ec4 edges \uff0c\u5176\u4e2d edges[i] = [ui, vi] \u8868\u793a\u8282\u70b9 ui \u548c vi \u5728\u6811\u4e2d\u6709\u4e00\u6761\u8fb9\u3002\n\n# \u4e00\u5f00\u59cb\uff0c\u6240\u6709 \u8282\u70b9\u90fd \u672a\u6807\u8bb0 \u3002\u5bf9\u4e8e\u8282\u70b9 i \uff1a\n\n# \u5f53 i \u662f\u5947\u6570\u65f6\uff0c\u5982\u679c\u65f6\u523b x - 1 \u8be5\u8282\u70b9\u6709 \u81f3\u5c11 \u4e00\u4e2a\u76f8\u90bb\u8282\u70b9\u5df2\u7ecf\u88ab\u6807\u8bb0\u4e86\uff0c\u90a3\u4e48\u8282\u70b9 i \u4f1a\u5728\u65f6\u523b x \u88ab\u6807\u8bb0\u3002\n# \u5f53 i \u662f\u5076\u6570\u65f6\uff0c\u5982\u679c\u65f6\u523b x - 2 \u8be5\u8282\u70b9\u6709 \u81f3\u5c11 \u4e00\u4e2a\u76f8\u90bb\u8282\u70b9\u5df2\u7ecf\u88ab\u6807\u8bb0\u4e86\uff0c\u90a3\u4e48\u8282\u70b9 i \u4f1a\u5728\u65f6\u523b x \u88ab\u6807\u8bb0\u3002\n# \u8bf7\u4f60\u8fd4\u56de\u4e00\u4e2a\u6570\u7ec4 times \uff0c\u8868\u793a\u5982\u679c\u4f60\u5728\u65f6\u523b t = 0 \u6807\u8bb0\u8282\u70b9 i \uff0c\u90a3\u4e48\u65f6\u523b times[i] \u65f6\uff0c\u6811\u4e2d\u6240\u6709\u8282\u70b9\u90fd\u4f1a\u88ab\u6807\u8bb0\u3002\n\n\n# \u8bf7\u6ce8\u610f\uff0c\u6bcf\u4e2a times[i] \u7684\u7b54\u6848\u90fd\u662f\u72ec\u7acb\u7684\uff0c\u5373\u5f53\u4f60\u6807\u8bb0\u8282\u70b9 i \u65f6\uff0c\u6240\u6709\u5176\u4ed6\u8282\u70b9\u90fd\u672a\u6807\u8bb0\u3002\n\n\ndef max2(a: int, b: int) -> int:\n    return a if a > b else b\n\n\nclass Solution:\n    def timeTaken(self, edges: List[List[int]]) -> List[int]:\n        def e(root: int) -> int:\n            return 0\n\n        def op(childRes1: int, childRes2: int) -> int:\n            return max2(childRes1, childRes2)\n\n        def composition(fromRes: int, parent: int, cur: int, direction: int) -> int:\n            \"\"\"direction: 0: cur -> parent, 1: parent -> cur\"\"\"\n            if direction == 0:  # cur -> parent\n                return fromRes + 1 if cur % 2 == 1 else fromRes + 2\n            return fromRes + 1 if parent % 2 == 1 else fromRes + 2\n\n        n = len(edges) + 1\n        R = Rerooting(n)\n        for u, v in edges:\n            R.addEdge(u, v)\n        dp = R.rerooting(e=e, op=op, composition=composition, root=0)\n        return dp\n",
    "submit_ts": "1722696087",
    "subm_id": "552258844"
}