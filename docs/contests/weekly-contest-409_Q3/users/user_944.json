{
    "username": "livingpool",
    "submission": "class Solution {\npublic:\n    vector<int> shortestDistanceAfterQueries(int n, vector<vector<int>>& queries) {\n        vector<pair<int, int>> adj(n + 1); // dest, src\n        unordered_set<int> visited;\n        for (int i = 0; i < n; i++) {\n            adj[i].first = i + 1;\n            adj[i + 1].second = i;\n        }    \n\n        vector<int> res;\n        int dist = n - 1;\n        for (auto q : queries) {\n            if (adj[q[0]].first < q[1] && adj[q[1]].second > q[0] && !visited.count(q[0]) && !visited.count(q[1])) {\n                int prev_dist = 0, node = q[0];\n                while (node != q[1]) {\n                    node = adj[node].first;\n                    if (node != q[1]) visited.insert(node);\n                    prev_dist++;\n                }\n                dist -= prev_dist - 1;\n                adj[q[0]].first = q[1];\n                adj[q[1]].second = q[0];\n            }\n            res.push_back(dist);\n        }\n        return res;\n    }\n};",
    "submit_ts": "1722742720",
    "subm_id": "1343775599"
}