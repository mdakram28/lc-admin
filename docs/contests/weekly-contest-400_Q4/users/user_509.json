{
    "username": "gdstw",
    "submission": "class SegmentTree {\nprivate:\n    vector<int> nums;\n    vector<int> tree;\npublic:\n    SegmentTree(vector<int>& nums) {\n        int n = nums.size();\n        this->nums = vector<int>(n + 1, 0);\n        for (int i = 1; i <= n; i++) this->nums[i] = nums[i - 1]; // 1-indexed\n        this->tree = vector<int>(4 * n, 0);\n        build(1, 1, n);\n    }\n\n    void build(int o, int left, int right) {\n        if (left == right) {\n            tree[o] = nums[left];\n            return;\n        }\n        int mid = (left + right) / 2;\n        build(2 * o, left, mid);\n        build(2 * o + 1, mid + 1, right);\n        tree[o] = merge(2 * o, 2 * o + 1);\n    }\n\n    int merge(int left_child, int right_child) {\n        return tree[left_child] & tree[right_child];\n    }\n\n    int query(int o, int left, int right, int l, int r) {\n        if (l <= left && right <= r) return tree[o];\n        int mid = (left + right) / 2;\n        int ans = (1 << 30) - 1;\n        if (l <= mid) ans &= query(2 * o, left, mid, l, r);\n        if (r > mid) ans &= query(2 * o + 1, mid + 1, right, l, r);\n        return ans;\n    }\n};\n\nclass Solution {\npublic:\n    int minimumDifference(vector<int>& nums, int k) {\n        int n = nums.size();\n        SegmentTree seg(nums);\n        int ans = (1 << 30) - 1;\n        for (int i = 1; i <= n; i++) {\n            int left = i, right = n;\n            while (left <= right) {\n                int mid = (left + right) / 2;\n                if (seg.query(1, 1, n, i, mid) >= k) left = mid + 1;\n                else right = mid - 1;\n            }\n            ans = min(ans, abs(seg.query(1, 1, n, i, left) - k));\n            if (right != 0) ans = min(ans, abs(k - seg.query(1, 1, n, i, right)));\n        }\n        return ans;\n    }\n};",
    "submit_ts": 1717298383.0
}