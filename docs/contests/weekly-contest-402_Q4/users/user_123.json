{
    "username": "mastoori1234",
    "submission": "# include <bits/stdc++.h>\n# include <ext/pb_ds/assoc_container.hpp>\n# include <ext/pb_ds/tree_policy.hpp>\n\nusing namespace std;\nusing namespace __gnu_pbds;\n\ntypedef tree<int, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update> ordered_set;\n\nclass Solution {\npublic:\n    vector<int> countOfPeaks(vector<int>& arr, vector<vector<int>>& queries) {\n        \n        ordered_set ms;\n        \n        int n = arr.size();\n        vector<int> res;\n        \n        auto evaluatePeak = [&]( int pos)->void {\n            if((pos<=0) || (pos>=n-1)) {\n                return;\n            }\n            if(arr[pos]>max(arr[pos-1], arr[pos+1])) {\n                ms.insert(pos);\n            }\n        };\n        \n        for( int i=0; i<n; i++) {\n            evaluatePeak(i);\n        }\n        \n        for( auto query: queries) {\n            if(query[0]==1) {\n                int l = query[1];\n                int r = query[2];\n                l = l + 1;\n                r = r - 1;\n                if(l>r) {\n                    res.push_back(0);\n                    continue;\n                }\n                int val = ms.order_of_key(r+1) - ms.order_of_key(l);\n                res.push_back(val);\n            } else {\n                int pos = query[1];\n                int val = query[2];\n                ms.erase(pos);\n                ms.erase(pos-1);\n                ms.erase(pos+1);\n                arr[pos] = val;\n                evaluatePeak(pos);\n                evaluatePeak(pos-1);\n                evaluatePeak(pos+1);\n            }\n        }\n        \n        \n        return res;\n    }\n};",
    "submit_ts": 1718505678.0
}