{
    "username": "_masterak",
    "submission": "class TrieNode {\npublic:\n    unordered_map<char, TrieNode*> children;\n    vector<int> costs;\n};\n\nclass Trie {\npublic:\n    TrieNode* root;\n    \n    Trie() {\n        root = new TrieNode();\n    }\n    \n    void insert(string word, int cost) {\n        TrieNode* node = root;\n        for (char c : word) {\n            if (!node->children.count(c)) {\n                node->children[c] = new TrieNode();\n            }\n            node = node->children[c];\n        }\n        node->costs.push_back(cost);\n    }\n};\n\nclass Solution {\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int n = target.size();\n        Trie t;\n        for (int i = 0; i < words.size(); ++i) {\n            t.insert(words[i], costs[i]);\n        }\n        vector<int> dp(n + 1, 1e9);\n        dp[0] = 0;\n        for (int i = 0; i < n; i++) {\n            if (dp[i] == 1e9) continue;\n            TrieNode* node = t.root;\n            for (int j = i; j < n; j++) {\n                if (node->children.find(target[j])==node->children.end()) break;\n                node = node->children[target[j]];\n                for (int cost : node->costs) {\n                    dp[j + 1] = min(dp[j + 1], dp[i] + cost);\n                }\n            }\n        }\n        \n        if(dp[n] == 1e9) return -1 ;\n        return dp[n];\n    }\n};",
    "submit_ts": "1720321878",
    "subm_id": "1312334714"
}