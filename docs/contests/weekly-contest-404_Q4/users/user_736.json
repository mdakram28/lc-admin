{
    "username": "kasinathansj",
    "submission": "class Solution {\n    int max = 0;\n    int ans = 0;\n    public int minimumDiameterAfterMerge(int[][] edges1, int[][] edges2) {\n        ans = Math.max(maxDistance(edges1)+maxDistance(edges2)+1,ans);\n        return ans;\n    }\n    private int maxDistance(int[][] edges){\n        this.max = 0;\n        if(edges.length<=1)return edges.length;\n        int ind[] = new int[edges.length+1];\n        ArrayList<ArrayList<Integer>> adj = new ArrayList<>();\n        for(int i = 0 ; i < edges.length+1 ; i++)adj.add(new ArrayList<>());\n        for(int e[] : edges){\n            adj.get(e[0]).add(e[1]);\n            adj.get(e[1]).add(e[0]);\n            ind[e[0]]++;\n            ind[e[1]]++;\n        }\n        Queue<Integer> qu = new LinkedList<>();\n        for(int i = 0 ; i < ind.length ; i++)\n            if(ind[i]==1){\n                qu.add(i);\n            }\n        int v = -1;\n        int s = 0;\n        int a = 0;\n        while(!qu.isEmpty()){\n            int size = qu.size();\n            s = size;\n            while(size-->0){\n                int cur = qu.remove();\n                v = cur;\n                for(int e : adj.get(cur)){\n                    ind[e]--;\n                    if(ind[e]==1){\n                        qu.add(e);\n                    }\n                }\n            }\n            a++;\n        }\n        dfs(v,-1,adj);\n        // System.out.println(max);\n        ans = Math.max(ans , max);\n        // System.out.println(ans);\n        if(max%2==0)return max/2;\n        return max/2+1;\n    }\n    private int dfs(int node , int par ,ArrayList<ArrayList<Integer>> adj){\n        int m1 = 0;\n        int m2 = 0;\n        for(int ed : adj.get(node)){\n            if(ed!=par){\n                int an = dfs(ed,node,adj)+1;\n                if(an>m1){\n                    m2 = m1;\n                    m1 = an;\n                }else if(an > m2){\n                    m2 = an;\n                }\n            }\n        }\n        max = Math.max(max , m1+m2);\n        return m1;\n    }\n}",
    "submit_ts": 1719719106.0
}