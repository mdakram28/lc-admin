{
    "username": "wisdompeak",
    "submission": "using LL = long long;\nclass Solution {\n    vector<pair<LL,int>>row[501];\n    set<pair<LL,int>>bottom[501];\npublic:\n    long long maximumValueSum(vector<vector<int>>& board) \n    {\n        int m = board.size(), n = board[0].size();\n        for (int i=0; i<m; i++)\n        {\n            for (int j=0; j<n; j++)\n                row[i].push_back({board[i][j], j});\n            sort(row[i].rbegin(), row[i].rend());\n        }\n        \n        vector<int>vals(n, INT_MIN);        \n        \n        for (int i=m-1; i>=0; i--)\n        {       \n            for (int j=0; j<n; j++)\n                vals[j] = max(vals[j], board[i][j]);            \n            set<pair<LL,int>>Set;\n            for (int j=0; j<n; j++)\n                Set.insert({vals[j], j});\n            bottom[i] = Set;            \n        }\n        \n        // for (auto [k,v]:bottom[m-1])\n        // {\n        //     cout<<k<<\" \"<<v<<\"; \";\n        // }\n        // cout<<endl;\n        // cout<<\"OK\"<<endl;\n        \n        \n        LL ret = LLONG_MIN;\n        for (int a=0; a<m; a++)\n        {\n            \n//             for (auto [k,v]: Set)\n//                 cout<<k<<\" \"<<v<<\"; \";\n//             cout<<endl;\n            \n//             auto iter = Set.end();\n//             for (int j=0; j<4; j++)\n//             {\n//                 iter = prev(iter);\n//                 cout<<iter->first<<endl;\n//                 cout<<iter->second<<endl;\n//             }\n//             cout<<\"ok\"<<endl;\n            \n        \n            for (int b=m-2; b>a; b--)            \n            {                \n                for (int state=0; state<27; state++)\n                {\n                    int i = state%3;\n                    int j = state/3%3;\n                    int k = state/9%3;\n                    \n                    auto iter = bottom[b+1].end();                    \n                    for (int tt=0; tt<=k; tt++)\n                    {\n                        iter = prev(iter);\n                    }\n                    \n                                                                    \n                    if (row[a][i].second == row[b][j].second) continue;\n                    if (row[a][i].second == iter->second) continue;\n                    if (row[b][j].second == iter->second) continue;\n                    // cout<<row[a][i].second<<\" \"<<row[b][j].second<<\" \"<<iter->second<<\":\"<<row[a][i].first+row[b][j].first+iter->first<<endl; \n                    \n                    \n                    ret = max(ret, row[a][i].first+row[b][j].first+iter->first);                                            \n                }\n                \n                // for (int k=0; k<3; k++)\n                // {\n                //     LL val = row[b][k].first;\n                //     LL col = row[b][k].second;\n                //     LL old_val = Map[col];\n                //     Set.erase({old_val, col});\n                //     Set.insert({max(val, old_val), col});\n                //     Map[col] = val;\n                // }\n            }\n        }        \n        \n        return ret;        \n    }\n};",
    "submit_ts": "1723910032",
    "subm_id": "556339203"
}