{
    "username": "qb_2008",
    "submission": "class Solution {\npublic:\n    int waysToReachStair(int k) {\n        if (k == 0) {\n            return 2;\n        }\n        // we need at least up 1 time\n        // say up m times, total 2^m - 1\n        // say down n times, total -n\n        // 2^m - n = k, n <= m + 1\n        // enumerate m, calculate n\n        int res = 0;\n        for (int m = 0; m <= 32; m++) {\n            uint64_t a = (1ULL << m);\n            uint64_t n = a - k;\n            if (n > m + 1) {\n                continue;\n            }\n            // C(m+1)(n), select n pos from m + 1 pos.\n            uint64_t tmp = select_count(m + 1, n);\n            //printf(\"m = %d, n = %d, 2^m = %lu, select_count(%d, %d) = %lu\\n\", m, n, a, m + 1, n, tmp);\n            res += tmp;\n            //printf(\"res = %lu\\n\", res);\n        }\n        return res;\n    }\n    \n    uint64_t select_count(int a, int b) {\n        // select b pos in a pos\n        // a * (a - 1) * ... (b + 1) / (a - b) / (a - b - 1) / ... 2\n        vector<int> v;\n        for (int i = b + 1; i <= a; i++) {\n            v.push_back(i);\n        }\n        for (int i = 2; i <= a - b; i++) {\n            gcd(i, v);\n        }\n        uint64_t res = 1;\n        for (int n : v) {\n            res *= n;\n        }\n        return res;\n    }\n    \n    void gcd(int n, vector<int>& v) {\n        for (int i = 0; i < v.size(); i++) {\n            if (v[i] != 1) {\n                int factor = gcd(n, v[i]);\n                n /= factor;\n                v[i] /= factor;\n            }\n        }\n    }\n    \n    int gcd(int a, int b) {\n        if (a < b) {\n            swap(a, b);\n        }\n        while (a % b != 0) {\n            int c = a % b;\n            a = b;\n            b = c;\n        }\n        return b;\n    }\n};",
    "submit_ts": "1716088633",
    "subm_id": "1261819614"
}