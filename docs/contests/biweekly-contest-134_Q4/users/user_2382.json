{
    "username": "harshS301",
    "submission": "class Solution {\npublic:\n    long long countSubarrays(vector<int>& nums, int target) {\n        int n = nums.size();\n        long long count = 0; // Initialize count of subarrays that match the target AND value\n        unordered_map<long long, long long> previousResults; // Map to store previous AND results and their frequencies\n        \n        for (int i = 0; i < n; ++i) {\n            unordered_map<long long, long long> currentResults; // Map to store current AND results and their frequencies\n            \n            // Check if the current element itself is equal to the target\n            if (nums[i] == target) {\n                ++count; // Increment count if the element itself matches the target\n            }\n            \n            // Initialize current results with the current element\n            currentResults[nums[i]] = 1;\n            \n            // Iterate through previous results to compute new results\n            for (auto& [prevAnd, freq] : previousResults) {\n                long long newAndResult = prevAnd & nums[i]; // Compute the new AND result\n                \n                // If the new AND result matches the target, update count\n                if (newAndResult == target) {\n                    count += freq;\n                }\n                \n                // Update current results with the new AND result and its frequency\n                currentResults[newAndResult] += freq;\n            }\n            \n            // Update previous results to current results for the next iteration\n            previousResults = currentResults;\n        }\n        \n        return count;\n    }\n};",
    "submit_ts": "1720281589",
    "subm_id": "1311831243"
}