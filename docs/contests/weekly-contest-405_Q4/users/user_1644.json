{
    "username": "hyungzin",
    "submission": "import 'dart:math';\nfinal MAX = 1000000000;\nclass Solution {\n  int minimumCost(String target, List<String> words, List<int> costs) {\n    final trie = Trie();\n    final dp = List.filled(target.length, MAX);\n    for (int i = 0; i < words.length; i++){\n      trie.insert(0, words[i], costs[i]);\n      //print('word: ${words[i]}, cost: ${trie.search(0, words[i])}');\n    }\n    for (int i = 0; i < target.length; i++){\n      if (i > 0 && dp[i - 1] == MAX) continue;\n      final arr = trie.search(i, target);\n      for (final (add, cost) in arr){\n        dp[i + add] = min(dp[i + add], cost + (i > 0 ? dp[i - 1]: 0));\n      }\n    }\n    if (dp.last == MAX) return -1;\n    return dp.last;\n  }\n}\nclass TrieNode {\n  final children = <String, TrieNode>{};\n  int? cost;\n}\n\nclass Trie {\n  final root = TrieNode();\n  \n  void insert(int start, String word, int cost) {\n    var current = root;\n    for (int i = start; i < word.length; i++) {\n      final char = word[i];\n      current.children.putIfAbsent(char, () => TrieNode());\n      current = current.children[char]!;\n    }\n    current.cost = min(cost, current.cost ?? MAX);\n  }\n\n  List<(int, int)> search(int start, String word) {\n    final res = <(int, int)>[];\n    var current = root;\n    for (int i = start; i < word.length; i++) {\n      final char = word[i];\n      if (!current.children.containsKey(char)) {\n        break;\n      }\n      current = current.children[char]!;\n      if (current.cost != null){\n        res.add((i - start, current.cost!));\n      }\n    }\n    return res;\n  }\n}\n\n",
    "submit_ts": "1720324381",
    "subm_id": "1312398150"
}