{
    "username": "sveng101",
    "submission": "class Solution:\n    def largestPalindrome(self, n: int, k: int) -> str:\n        \n        ten_md_k = 10 % k\n        md_lst = [1]\n        for _ in range(n - 1):\n            md_lst.append((md_lst[-1] * ten_md_k) % k)\n        #print(md_lst)\n        #print(md_lst[0] + md_lst[~0])\n        #md_lst2 = []\n        md_lst2 = [(md_lst[i] + md_lst[~i]) % k for i in range(n >> 1)]\n        if n & 1:\n            md_lst2.append(md_lst[(n >> 1)])\n        #print(md_lst2)\n\n        poss_md = [{} for _ in range(len(md_lst2))]\n        for d in range(10):\n            num = (md_lst2[-1] * d) % k\n            poss_md[-1][num] = d\n        #poss_md[-1] = {(md_lst2[-1] * d) % k for d in range(10)}\n        for i in reversed(range(len(md_lst2) - 1)):\n            for d in range(10):\n                for md1 in poss_md[i + 1].keys():\n                    num = (md1 + md_lst2[i] * d) % k\n                    poss_md[i][num] = d\n        #print(poss_md)\n\n        res = []\n        target = 0\n        for md, md_dict in zip(md_lst2, poss_md):\n            d = md_dict[target]\n            res.append(str(d))\n            target = (target - d * md) % k\n        for i in reversed(range(n >> 1)):\n            res.append(res[i])\n        #print(\"\".join(res))\n        return \"\".join(res)\n\n        \"\"\"\n        curr = [9] * len(md_lst2)\n        memo = set()\n        def backtrack(i: int=0, md_sum: int=0) -> bool:\n            if i == len(md_lst2) - 1:\n                for d in reversed(range(10)):\n                    if not (md_sum + d * md_lst2[i]) % k:\n                        curr[i] = d\n                        return True\n                return False\n            args = (i, md_sum)\n            if args in memo: return False\n            for d in reversed(range(10)):\n                curr[i] = d\n                if backtrack(i + 1, (md_sum + d * md_lst2[i]) % k):\n                    return True\n                elif not md_lst2[i]: return False\n            return False\n\n        backtrack()\n        #print(curr)\n        res = [str(d) for d in curr]\n        for i in reversed(range(n >> 1)):\n            res.append(res[i])\n        print(\"\".join(res))\n        return \"\"\n        \"\"\"",
    "submit_ts": "1723951719",
    "subm_id": "1359778427"
}