{
    "username": "aayuushh15",
    "submission": "class SegmentTree {\npublic:\n    SegmentTree(const vector<int>& nums) : n(nums.size()) {\n        data.resize(4 * n);\n        build(nums, 0, 0, n - 1);\n    }\n\n    int query(int l, int r) {\n        return query(0, 0, n - 1, l, r);\n    }\n\n    void update(int idx, int val, const vector<int>& nums) {\n        update(0, 0, n - 1, idx, val, nums);\n    }\n\nprivate:\n    vector<int> data;\n    int n;\n\n    bool isPeak(const vector<int>& nums, int i) {\n        if (i <= 0 || i >= nums.size() - 1) return false;\n        return nums[i] > nums[i - 1] && nums[i] > nums[i + 1];\n    }\n\n    void build(const vector<int>& nums, int node, int start, int end) {\n        if (start == end) {\n            data[node] = isPeak(nums, start) ? 1 : 0;\n        } else {\n            int mid = (start + end) / 2;\n            build(nums, 2 * node + 1, start, mid);\n            build(nums, 2 * node + 2, mid + 1, end);\n            data[node] = data[2 * node + 1] + data[2 * node + 2];\n        }\n    }\n\n    int query(int node, int start, int end, int l, int r) {\n        if (r < start || end < l) {\n            return 0;\n        }\n        if (l <= start && end <= r) {\n            return data[node];\n        }\n        int mid = (start + end) / 2;\n        int leftQuery = query(2 * node + 1, start, mid, l, r);\n        int rightQuery = query(2 * node + 2, mid + 1, end, l, r);\n        return leftQuery + rightQuery;\n    }\n\n    void update(int node, int start, int end, int idx, int val, const vector<int>& nums) {\n        if (start == end) {\n            data[node] = isPeak(nums, idx) ? 1 : 0;\n        } else {\n            int mid = (start + end) / 2;\n            if (start <= idx && idx <= mid) {\n                update(2 * node + 1, start, mid, idx, val, nums);\n            } else {\n                update(2 * node + 2, mid + 1, end, idx, val, nums);\n            }\n            data[node] = data[2 * node + 1] + data[2 * node + 2];\n        }\n    }\n};\n\nclass Solution {\npublic:\n    vector<int> countOfPeaks(vector<int>& nums, vector<vector<int>>& queries) {\n        SegmentTree segTree(nums);\n        vector<int> result;\n\n        for (const auto& query : queries) {\n            if (query[0] == 1) {\n                int l = query[1], r = query[2];\n                if (l == r) {\n                    result.push_back(0);\n                } else {\n                    result.push_back(segTree.query(l + 1, r - 1));\n                }\n            } else if (query[0] == 2) {\n                int idx = query[1], val = query[2];\n                nums[idx] = val;\n                if (idx > 0) segTree.update(idx - 1, nums[idx - 1], nums);\n                segTree.update(idx, nums[idx], nums);\n                if (idx < nums.size() - 1) segTree.update(idx + 1, nums[idx + 1], nums);\n            }\n        }\n\n        return result;\n    }\n};\n\n",
    "submit_ts": 1718508016.0
}