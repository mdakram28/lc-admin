{
    "username": "akshat757",
    "submission": "const int MOD = 1e9 + 7;\n\nclass Solution {\npublic:\n    int numberOfPermutations(int n, vector<vector<int>>& requirements) {\n        sort(requirements.begin(), requirements.end());\n        vector<vector<int>> dp(n + 1, vector<int>(401, 0));\n        dp[0][0] = 1;\n        for (int len = 1; len <= n; ++len) {\n            for (int inv = 0; inv <= 400; ++inv) {\n                if (dp[len - 1][inv] > 0) {\n                    for (int pos = 0; pos < len; ++pos) {\n                        int newInv = inv + pos;\n                        if (newInv <= 400) {\n                            dp[len][newInv] = (dp[len][newInv] + dp[len - 1][inv]) % MOD;\n                        }\n                    }\n                }\n            }\n        }\n        vector<int> required(n, -1);\n        for (const auto& req : requirements) {\n            required[req[0]] = req[1];\n        }\n\n        vector<vector<int>> validDp(n + 1, vector<int>(401, 0));\n        validDp[0][0] = 1;\n\n        for (int len = 1; len <= n; ++len) {\n            for (int inv = 0; inv <= 400; ++inv) {\n                if (validDp[len - 1][inv] > 0) {\n                    for (int pos = 0; pos < len; ++pos) {\n                        int newInv = inv + pos;\n                        if (newInv <= 400) {\n                            validDp[len][newInv] = (validDp[len][newInv] + validDp[len - 1][inv]) % MOD;\n                        }\n                    }\n                }\n            }\n            if (required[len - 1] != -1) {\n                for (int j = 0; j <= 400; ++j) {\n                    if (j != required[len - 1]) {\n                        validDp[len][j] = 0;\n                    }\n                }\n            }\n        }\n\n        int result = 0;\n        for (int inv = 0; inv <= 400; ++inv) {\n            result = (result + validDp[n][inv]) % MOD;\n        }\n\n        return result;\n    }\n};",
    "submit_ts": 1719069948.0
}