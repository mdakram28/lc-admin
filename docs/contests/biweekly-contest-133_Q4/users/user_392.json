{
    "username": "iamaryankr",
    "submission": "#include<bits/stdc++.h>\nusing namespace std;\n\n#define pb push_back\n#define pob pop_back\n#define sq(x) x*x\n#define cube(x) x*x*x\n#define all(x) (x).begin(), (x).end()\n\n\ntypedef long double ld;\ntypedef long long ll;\ntypedef vector<long long> vll;\ntypedef pair<int,int> pii;\ntypedef pair<long long, long long> pll;\ntypedef vector<pair<long long, long long>> vpll;\ntypedef vector<pair<int,int>> vpii;\ntypedef vector<int> vi;\n\n\nint gcd(int a, int b){return (b ? gcd(b, a % b) : a);}\nint lcm (int a, int b){return (a*b/gcd(a,b));}\n\nconst int maxN = 1e6;\nconst int MOD = 1e9+7;\nconst int N = 100;\nconst int maxCnt = 400;\n\nclass Solution {\npublic:\n    \n    int numberOfPermutations(int n, vector<vector<int>>& requirements) {\n        vector<int> inv(n + 1, -1);\n        for (auto &req : requirements) {\n            inv[req[0] + 1] = req[1];\n        }\n\n        vector<vector<ll>> dp(n + 1, vector<ll>(maxCnt + 1, 0));\n        dp[0][0] = 1;\n\n        for (int len = 1; len <= n; ++len) {\n            for (int inv = 0; inv <= maxCnt; ++inv) {\n                for (int newPos = 0; newPos < len; ++newPos) {\n                    int prevInv = inv - newPos;\n                    if (prevInv >= 0) {\n                        dp[len][inv] = (dp[len][inv] + dp[len - 1][prevInv]) % MOD;\n                    }\n                }\n            }\n\n            if (inv[len] != -1) {\n                int targetInv = inv[len];\n                for (int inv = 0; inv <= maxCnt; ++inv) {\n                    if (inv != targetInv) {\n                        dp[len][inv] = 0;\n                    }\n                }\n            }\n        }\n\n        // Sum up all valid permutations of length `n`\n        ll result = 0;\n        for (ll count : dp[n]) {\n            result = (result + count) % MOD;\n        }\n        return result;\n    }\n};",
    "submit_ts": "1719070408",
    "subm_id": "1296822289"
}