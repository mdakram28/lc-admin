{
    "username": "dixit_code",
    "submission": "/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number}\n */\n\nfunction binarySearch(arr, target) {\n    let left = 0;\n    let right = arr.length;\n\n    while (left < right) {\n        const mid = Math.floor((left + right) / 2);\n        if (arr[mid] < target) {\n            left = mid + 1;\n        } else {\n            right = mid;\n        }\n    }\n\n    return left;\n}\n\n\nvar minChanges = function(nums, k) {\n    const n = nums.length;\n    const dixit = new Map();\n    const maxi = [];\n\n    // Process pairs and populate the map and array\n    for (let i = 0; i < n / 2; i++) {\n        const left = nums[i];\n        const right = nums[n - i - 1];\n        const diffi = Math.abs(left - right);\n\n        const maxValue = Math.max(left, right, k - left, k - right);\n        \n        if (!dixit.has(diffi)) {\n            dixit.set(diffi, []);\n        }\n        dixit.get(diffi).push(maxValue);\n        maxi.push(maxValue);\n    }\n\n    let changess = n;\n    maxi.sort((a, b) => a - b);\n\n    // Calculate minimum changes for each unique difference\n    for (const [diffi, values] of dixit.entries()) {\n        const index = binarySearch(maxi, diffi);\n        let changesRequired = index * 2 + (n / 2 - index);\n\n        for (const value of values) {\n            if (value < diffi) {\n                changesRequired -= 2;\n            } else {\n                changesRequired -= 1;\n            }\n        }\n\n        changess = Math.min(changess, changesRequired);\n    }\n\n    return changess;\n}\n\n\n\n\n",
    "submit_ts": "1721489901",
    "subm_id": "1327467147"
}