{
    "username": "dream_boy",
    "submission": "const long long INF = 1e18;\n\nclass TrieNode {\npublic:\n    vector<TrieNode*> children;\n    long long cost;\n    \n    TrieNode() {\n        children.resize(26, nullptr);\n        cost = INF;\n    }\n};\n\nclass Solution {\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int n = target.size();\n        \n        TrieNode* root = new TrieNode();\n        for (int i = 0; i < words.size(); i++) {\n            TrieNode* node = root;\n            for (char c : words[i]) {\n                if (node->children[c - 'a'] == nullptr)\n                    node->children[c - 'a'] = new TrieNode();\n                node = node->children[c - 'a'];\n            }\n            node->cost = min(node->cost, (long long)costs[i]);\n        }\n        \n        vector<long long> dp(n + 1, INF);\n        dp[0] = 0;\n        \n        for (int i = 0; i < n; i++) {\n            TrieNode* node = root;\n            for (int j = i; j < n; j++) {\n                if (node->children[target[j] - 'a'] == nullptr)\n                    break;\n                node = node->children[target[j] - 'a'];\n                if (node->cost < INF && dp[i] < INF)\n                    dp[j + 1] = min(dp[j + 1], dp[i] + node->cost);\n            }\n        }\n        \n        return dp[n] == INF ? -1 : dp[n];\n    }\n};",
    "submit_ts": "1720322795",
    "subm_id": "1312359291"
}