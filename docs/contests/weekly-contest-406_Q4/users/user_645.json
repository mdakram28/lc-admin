{
    "username": "NeekxzZ",
    "submission": "class Solution:\n    def minimumCost(self, m: int, n: int, horizontalCut: List[int], verticalCut: List[int]) -> int:\n        # Sort the cuts in descending order\n        horizontalCut.sort(reverse=True)\n        verticalCut.sort(reverse=True)\n        \n        # Initialize the number of pieces in each dimension\n        h_pieces = 1\n        v_pieces = 1\n        \n        # Initialize the total cost\n        total_cost = 0\n        \n        # Initialize pointers for horizontal and vertical cuts\n        h = 0\n        v = 0\n        \n        # Process cuts until we've made all cuts\n        while h < len(horizontalCut) or v < len(verticalCut):\n            # If we've exhausted vertical cuts or the next horizontal cut is more expensive\n            if v == len(verticalCut) or (h < len(horizontalCut) and horizontalCut[h] > verticalCut[v]):\n                total_cost += horizontalCut[h] * v_pieces\n                h_pieces += 1\n                h += 1\n            # Otherwise, make a vertical cut\n            else:\n                total_cost += verticalCut[v] * h_pieces\n                v_pieces += 1\n                v += 1\n        \n        return total_cost\n        ",
    "submit_ts": "1720925418",
    "subm_id": "1320254080"
}