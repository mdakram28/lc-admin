{
    "username": "gjp4_",
    "submission": "class Solution {\npublic:\n    bool canReachCorner(int X, int Y, vector<vector<int>>& circles) {\n        int n = circles.size();\n        vector<int> f(n+2);\n        for(int i=0;i<n+2;i++)f[i] = i;\n        auto merge = [&](int x, int y){\n            f[x] = y;\n            return;\n        };\n        auto find = [&](auto && find, int x){\n            if(f[x] == x)return x;\n            return f[x] = find(find, f[x]);\n        };\n        swap(X, Y);\n        for(int i=0;i<n;i++){\n            vector<int> c = circles[i];\n            int cx = c[1], cy = c[0], cr = c[2];\n            if(cx - cr <=0 || cy + cr >= Y){\n                int a = find(find, i),  b = find(find, n+1);\n                merge(a, b);\n            }\n            if(cy - cr <=0 || cx + cr >= X){\n                int a = find(find, i),  b = find(find, n);\n                merge(a, b);\n            }\n        }\n        for(int i=0;i<n;i++){\n            for(int k=0;k<n;k++){\n                if(i == k)continue;\n                long long dx = circles[i][0] - circles[k][0], dy = circles[i][1] - circles[k][1];\n                if(sqrtl(dx * dx + dy*dy) <= circles[k][2] + circles[i][2]){\n                    int a = find(find, i), b = find(find, k);\n                    if(a!=b)merge(a, b);\n                }\n            }\n        }\n        int a = find(find, n);\n        int b= find(find, n+1);\n        return !(a == b);\n    }\n};",
    "submit_ts": "1722136905",
    "subm_id": "1335748416"
}