{
    "username": "Maruzensky",
    "submission": "from functools import lru_cache\n\nclass Solution:\n    def minimumSum(self, grid: List[List[int]]) -> int:\n        m, n = len(grid), len(grid[0])\n        \n        answer = m * n\n        \n        @lru_cache(None)\n        def part(up, down, left, right):\n            if up == down or left == right:\n                return 0\n            \n            min_x, max_x, min_y, max_y = down, up, right, left\n            for i in range(up, down):\n                for j in range(left, right):\n                    if grid[i][j] == 1:\n                        min_x = min(min_x, i)\n                        max_x = max(max_x, i)\n                        min_y = min(min_y, j)\n                        max_y = max(max_y, j)\n                        \n            return (max_x - min_x + 1) * (max_y - min_y + 1)\n        \n        for x in range(m + 1):\n            for y in range(n + 1):\n                answer = min(answer, part(0, x, 0, n) + part(x, m, 0, y) + part(x, m, y, n))\n        for x in range(m + 1):\n            for y in range(n + 1):\n                answer = min(answer, part(0, x, 0, y) + part(0, x, y, n) + part(x, m, 0, n))\n        for x in range(m + 1):\n            for y in range(n + 1):\n                answer = min(answer, part(0, m, 0, y) + part(0, x, y, n) + part(x, m, y, n))\n        for x in range(m + 1):\n            for y in range(n + 1):\n                answer = min(answer, part(0, x, 0, y) + part(x, m, 0, y) + part(0, m, y, n))\n                \n        for x in range(m + 1):\n            for xx in range(x, m + 1):\n                answer = min(answer, part(0, x, 0, n) + part(x, xx, 0, n) + part(xx, m, 0, n))\n        for y in range(n + 1):\n            for yy in range(y, n + 1):\n                answer = min(answer, part(0, m, 0, y) + part(0, m, y, yy) + part(0, m, yy, n))\n                \n        return answer\n        ",
    "submit_ts": 1719111215.0
}