{
    "username": "drexdelta",
    "submission": "class Solution {\npublic:\n    int buildSegTree(vector<int> &st, vector<int> &a,int i, int l , int r) {\n        if(l==r) {\n            st[i] = a[l]; return st[i];\n        }\n        int m = (l + r) >> 1;\n        int x = buildSegTree(st, a, (i<<1) + 1, l, m);\n        int y = buildSegTree(st, a, (i<<1) + 2, m+1, r);\n        st[i] = x&y;\n        return st[i];\n    }\n    int getRangeAnd(vector<int> &st,int i, int l, int r, int L, int R) {\n        // cout << \"getRangeAND\" << \" i \" << i << \" l \" << l << \" r \" << r << \" L \" << L << \" R \" << R << endl;\n        if(L <= l && r <= R) {\n            return st[i];\n        }\n        if(R < l || r < L) {\n            return (1LL<<40) - 1LL;\n        }\n        \n        int m = (l+r) >> 1;\n        int v1 = getRangeAnd(st, (i<<1) + 1, l , m , L , R);\n        int v2 = getRangeAnd(st, (i<<1) + 2 , m+1, r, L , R);\n        // cout << \" l \" << l << \" r \" << r << \" L \" << L << \" R \" << R << \" returning \" << (v1 & v2) << endl;\n        return (v1 & v2);\n    }\n    \n    bool hasAllBitsSet(long long x , long long target) { // has all required bits set\n        for(int i = 0 ; i < 40 ; i++) {\n            if((target & (1LL<<i)) > 0 && (x & (1LL<<i)) == 0 ) {\n                // cout << \" for x \" << x << \" target \" << target << \" returning false for index \" << i << endl;\n                return false;\n            }\n        }\n        // cout << \" returning true for x \" << x << \" target \" << target << endl;\n        return true;\n    }\n    \n    int getMaxRange(vector<int> &st, vector<int> & a, int id, int n, int target) {\n        int l = id, r = n-1;\n        \n        while(l < r) {\n            int m = (l+r+1) >> 1;\n            // cout << \" going to get sum \" << endl;\n            int x = getRangeAnd(st,0,0,n-1,id,m);\n            // cout << \" l \" << l << \" r \" << r << \" m \" << m << \" current range and between these \" << x << endl;\n            // cout << \" x \" << x << \" target \" << target << endl;\n            if(target == x) {\n                l = m;\n            } else if(hasAllBitsSet(x,target)) { // has all required bits set\n                l = m;\n            } else {\n                // cout << \" missed target, so going left \" << endl;\n                r = m-1;\n            }\n            // cout << endl << endl << endl;\n        }\n        \n        // cout << \" got right bound \" << l << endl;\n        \n        if(id == l) {\n            if(a[id] == target) return 1;\n            else return 0;\n        }\n        \n        int x = getRangeAnd(st, 0, 0 , n-1, id, l);\n        if (x != target) {\n            return 0;\n        }\n        \n        int rightGoodPos = l;\n        l = id, r = rightGoodPos;\n        while(l < r) {\n            int m = (l+r) >> 1;\n            int x = getRangeAnd(st, 0, 0 , n-1, id, m);\n            // cout << \" l \" << l << \" r \" << r << \" m \" << m << \" current range and between these \" << x << endl;\n            if(target == x) {\n                r = m;\n            } else {\n                l = m+1;\n            }\n        }\n        \n        // cout << \" got left bound \" << l << endl;\n        \n        int leftGoodPos = l;\n        return rightGoodPos - leftGoodPos + 1;\n    }\n    \n    long long countSubarrays(vector<int>& nums, int k) {\n        int n = nums.size();\n        vector<int> st((n<<2) + 1,0);\n        int unused = buildSegTree(st, nums, 0, 0,n-1);\n        // // cout << \" build success \" << endl;\n        long long ans = 0;\n        for(int i = 0 ; i < n ; i++) {\n            int t = getMaxRange(st, nums, i, n, k);\n            // cout << \" for int i \" << i << \" returned \" << t << endl;\n            ans += t;\n        }\n        return ans;\n    }\n};",
    "submit_ts": "1720280263",
    "subm_id": "1311782805"
}