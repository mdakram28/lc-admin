{
    "username": "Ying Liu",
    "submission": "const int N = 100010;\nbool st[N][10];\nint ss[N];\n\nclass Solution {\npublic:\n    string largestPalindrome(int n, int k) {\n        string ans = \"\";\n        memset(st, 0, sizeof(st));\n        memset(ss, 0, sizeof(ss));\n        for(int i = n, s = 1; i >= 1; i--) {\n            int pos = i;\n            if(i + i > n) pos = n + 1 - i;\n            ss[pos] = (ss[pos] + s) % k;\n            s = s * 10 % k;\n        }\n        int end = (n + 1)/2 + 1;\n        st[end][0] = true;\n        for(int i = end - 1; i >= 1; i--) {\n            for(int a = 0; a < k; a++) {\n                for(int b = 0; b < 10; b++) {\n                    st[i][(a + b*ss[i]) % k] |= st[i + 1][a];\n                }\n            }\n        }\n        for(int i = 1, cur = 0; i < end; i++) {\n            for(int a = 9; a >= 0; a--) {\n                bool ok = false;\n                for(int b = 0; b < k; b++) {\n                    if((cur + a*ss[i] + b) % k == 0 && st[i + 1][b]) {\n                        cur = (cur + a*ss[i]) % k;\n                        ans += a + '0';\n                        ok = true;\n                        break;\n                    }\n                }\n                if(ok) break;\n            }\n        }\n        string suf = ans;\n        if(n&1) suf.pop_back();\n        reverse(suf.begin(), suf.end());\n        ans += suf;\n        return ans;\n    }\n};",
    "submit_ts": "1723951048",
    "subm_id": "1359761920"
}