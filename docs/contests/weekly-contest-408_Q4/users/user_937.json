{
    "username": "anvith06",
    "submission": "class Solution {\npublic:\n    int par[1000],rank[1000];\n    int find_parent(int i){\n        if(par[i]!=i)return par[i]=find_parent(par[i]);\n        return i;\n    }\n    \n    void set_union(int i,int j){\n        i = find_parent(i);\n        j = find_parent(j);\n        if(i!=j){\n            if(rank[i]<rank[j])swap(i,j);\n            par[j]=i;\n            if(rank[i]==rank[j])rank[i]++;\n        }\n    }\n    \n    bool intersect(vector<int>&a,vector<int>&b){\n        long long x = ((long long)a[0]-(long long)b[0])*((long long)a[0]-(long long)b[0]);\n        long long y = ((long long)a[1]-(long long)b[1])*((long long)a[1]-(long long)b[1]);\n        long long r = ((long long)a[2]+(long long)b[2])*((long long)a[2]+(long long)b[2]);\n        return x+y<=r;\n    }\n    bool bounded(int minx,int maxx,int miny,int maxy,int x,int y){\n        cout<<minx<<\" \"<<maxx<<\" \"<<miny<<\" \"<<maxy<<endl;\n        if(minx<=0 and maxx>=x)return true;\n        if(miny<=0 and maxy>=y)return true;\n        if(minx<=0 and miny<=0)return true;\n        if(maxx>=x and maxy>=y)return true;\n        return false;\n    }\n    bool canReachCorner(int X, int Y, vector<vector<int>>& circle) {\n        int n = circle.size();\n        for(int i=0;i<n;i++){\n            par[i]=i;\n            rank[i]=1;\n        }\n        for(int i=0;i<n;i++){\n            for(int j=i+1;j<n;j++){\n                if(intersect(circle[i],circle[j]))set_union(i,j);\n            }\n        }\n        // for(int i=0;i<n;i++){\n        //     cout<<find_parent(i)<<\" \";\n        // }\n        // cout<<endl;\n        set<int>st;\n        for(int i=0;i<n;i++){\n            int j = find_parent(i);\n            //cout<<j<<endl;\n            if(st.find(j)!=st.end())continue;\n            st.insert(j);\n            int minx=INT_MAX,maxx = -1,miny=minx,maxy=maxx;\n            for(int k=0;k<n;k++){\n                if(find_parent(k)!=j)continue;\n                int r = circle[k][2];\n                minx = min(minx,circle[k][0]-r);\n                maxx = max(maxx,circle[k][0]+r);\n                maxy = max(maxy,circle[k][1]+r);\n                miny = min(miny,circle[k][1]-r);\n            }\n            if(bounded(minx,maxx,miny,maxy,X,Y))return false;\n        }\n        return true;\n        \n    }\n};",
    "submit_ts": "1722138111",
    "subm_id": "1335782386"
}