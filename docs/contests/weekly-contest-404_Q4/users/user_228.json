{
    "username": "klahsiv",
    "submission": "class Solution {\npublic:\n    \n    vector <int> bfs(vector<vector<int>>& adj, int root){\n        int n = adj.size();\n        vector <int> dist(n, 1e9);\n        dist[root] = 0;\n        \n        queue <int> q;\n        q.push(root);\n        \n        while(!q.empty()){\n            \n            int node = q.front();\n            q.pop();\n            \n            for(auto x: adj[node]){\n                if(dist[x] > dist[node] + 1){\n                    dist[x] = dist[node] + 1;\n                    q.push(x);\n                }\n            }\n        }\n        \n        int maxi = -1, idx = 0;\n        \n        for(int i = 0; i < n; i++){\n            if(dist[i] > maxi){\n                maxi = dist[i];\n                idx = i;\n            }\n        }\n        \n        return {idx, maxi};\n    }\n    \n    int findDiameter(vector<vector<int>>& edges){\n        \n        int n = edges.size() + 1;\n        vector <vector<int>> adj(n);\n        \n        for(auto x: edges){\n            adj[ x[0] ].push_back( x[1] );\n            adj[ x[1] ].push_back( x[0] );\n        }\n        \n        vector <int> firstIter = bfs(adj, 0);\n        vector <int> secondIter = bfs(adj, firstIter[0]);\n        \n        return (secondIter[1]);\n        \n    }\n    \n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n        \n        int d1 = findDiameter(edges1);\n        int d2 = findDiameter(edges2);\n        \n        // cout<<d1<<\" \"<<d2<<\" || \";\n        \n        int ans = 1 + (d1 + 1) / 2 + (d2 + 1) / 2;\n        ans = max(ans, d1);\n        ans = max(ans, d2);\n        \n        return ans;\n    }\n};",
    "submit_ts": 1719717902.0
}