{
    "username": "MvKaio",
    "submission": "class Solution {\npublic:\n    string largestPalindrome(int n, int k) {\n        vector res(n, 0);\n        res[0] = 1;\n        for (int i = 1; i < n; i++)\n            res[i] = res[i - 1] * 10 % k;\n        \n        auto get = [&] (int x) {\n            x %= k;\n            if (x < 0) x += k;\n            return x;\n        };\n                \n        \n        string ans(n, '.');\n        \n        vector dp(n + 1, vector(k, 0));\n        dp[(n+1)/2][0] = 1;\n        \n        //for (int dig = (n >= 2 ? 0 : 1); dig <= 9; dig++) {\n        //    int i = (n - 1) / 2;\n        //    int add = res[i];\n        //    if (i != n - i - 1) add = (add + res[n - i - 1]) % k;\n        //    dp[i][get(add * dig)] = true;\n        //}\n        \n        for (int i = (n-1)/2; i >= 0; --i) {\n            for (int p = 0; p < k; p++) {\n                int add = res[i];\n                if (i != n - i - 1) add = (add + res[n - i - 1]) % k;\n\n                for (int dig = 9; dig >= !i; dig--) {\n                    //dp[i + 1][get(p + add * dig)] |= dp[i][p];\n                    dp[i][p] |= dp[i + 1][get(p + add * dig)];\n                }\n            }\n        }\n        \n        int at = 0;\n        for (int i = 0; i <= n - i - 1; i++) {\n            int add = res[i];\n            if (i != n - i - 1) add = (add + res[n - i - 1]) % k;\n            for (int dig = 9; dig >= !i; dig--) {\n                if (dp[i + 1][get(at + dig * add)]) {\n                    at = get(at + dig * add);\n                    ans[i] = ans[n - i - 1] = '0' + dig;\n                    break;\n                }\n            }\n        }\n        \n        cout << dp[0][0] << endl;\n\n        \n        return ans;\n    }\n};",
    "submit_ts": "1723949809",
    "subm_id": "1359729451"
}