{
    "username": "darktrojan",
    "submission": "class Solution:\n    def canReachCorner(self, X: int, Y: int, circles: List[List[int]]) -> bool:\n        n = len(circles)\n        sz = [1 for _ in range(n)]\n        par = [i for i in range(n)]\n        c1 = [False for _ in range(n)]\n        c2 = [False for _ in range(n)]\n\n        def root(i):\n            if par[i] != i:\n                par[i] = root(par[i])\n            \n            return par[i]\n        \n        def merge(x, y):\n            px, py = root(x), root(y)\n            if px == py:\n                return\n            if sz[px] < sz[py]:\n                x, y = y, x\n                px, py = py, px\n            \n            par[py] = px\n            sz[px] += sz[py]\n            c1[px] = c1[px] or c1[py]\n            c2[px] = c2[px] or c2[py]\n        \n        def check(i, j):\n            xi, yi, ri = circles[i]\n            xj, yj, rj = circles[j]\n\n            dist = (yi - yj) ** 2 + (xi - xj) ** 2\n            return math.sqrt(dist) <= (ri + rj)\n        \n        for i in range(n):\n            xi, yi, ri = circles[i]\n            if xi + ri >= X or yi - ri <= 0:\n                c1[i] = True\n            if xi - ri <= 0 or yi + ri >= Y:\n                c2[i] = True\n            \n            for j in range(i):\n                pi = root(i)\n                pj = root(j)\n                if pi == pj:\n                    continue\n                if check(i, j):\n                    merge(i, j)\n        \n        ans = True\n        for i in range(n):\n            pi = root(i)\n            if pi != i:\n                continue\n            \n            # print(pi, c1[pi], c2[pi], sz[pi])\n            if c1[pi] and c2[pi]:\n                ans = False\n                break\n\n        return ans\n",
    "submit_ts": "1722137366",
    "subm_id": "1335761732"
}