{
    "username": "hongrock",
    "submission": "const int N = 5e4 + 10;\nconst int M = 250;\nint a[N], g[N], lft[M], rgt[M];\nint cnt[M][M], ans[M][M], in[M], out[M], len[M];\nvoid init(int id){\n    for(int i=0; i<=len[id]; ++i)  ans[id][i] = cnt[id][i] = 0;\n    int cur = 1, pre = 0;\n    in[id] = out[id] = 0;\n    for(int i=lft[id]+1; i<=rgt[id]; ++i){\n        if(a[i] != a[i-1]){\n            ++cur;\n        } else {\n            if(pre == 0){\n                in[id] = cur;\n            } else {\n                ++cnt[id][cur];\n                ++ans[id][cur];\n            }\n            pre = 1;\n            cur = 1;\n        }\n    }\n    if(!pre)    in[id] = cur;\n    out[id] = cur;\n    for(int i=len[id]-1; i>=0; --i){\n        ans[id][i] += ans[id][i+1] + cnt[id][i+1];\n        cnt[id][i] += cnt[id][i+1];\n    }\n}\n\nint calc(int len, int k){\n    if(len >= k)    return len - k + 1;\n    return 0;\n}\n\nint query(int n, int m, int k){\n    int pre = 0, cur = 0;\n    bool flag = 0;\n    int lst = a[0] ^ 1;\n    int ret = 0;\n    for(int id=0; id<=m; ++id){\n        if(a[lft[id]] == lst){\n            if(!flag){\n                pre = cur;\n                flag = 1;\n            } else {\n                ret += calc(cur, k);\n            }\n            if(out[id] != len[id]){\n                ret += calc(in[id], k);\n                if(k <= len[id]){\n                    ret += ans[id][k];\n                }\n            }\n\n            cur = out[id];\n        } else {\n            cur += in[id];\n            if(in[id] != len[id]){\n                if(!flag){\n                    pre = cur;\n                    flag = 1;\n                } else {\n                    ret += calc(cur, k);\n                }\n                if(k <= len[id]){\n                    ret += ans[id][k];\n                }\n                cur = out[id];\n            }\n        }\n\n        lst = a[rgt[id]];\n    }\n    if(!flag){\n        if(a[n-1] != a[0])  return n;\n        return calc(n, k);\n    }\n    if(a[n-1] == a[0]){\n        return ret + calc(pre, k) + calc(cur, k);\n    }\n    return ret + calc(pre + cur, k);\n}\nclass Solution {\npublic:\n    vector<int> numberOfAlternatingGroups(vector<int>& colors, vector<vector<int>>& queries) {\n        int n = colors.size();\n        int s = (int)sqrt(n * 1.0);\n        int m = (n - 1) / s;\n        for(int i=0; i<=m; ++i) lft[i] = n;\n        for(int i=0; i<n; ++i){\n            a[i] = colors[i];\n            g[i] = i / s;\n            lft[g[i]] = min(lft[g[i]], i);\n            rgt[g[i]] = i;\n        }\n        for(int i=0; i<=m; ++i){\n            len[i] = rgt[i] - lft[i] + 1;\n            init(i);\n        }\n        vector<int> ret;\n        for(auto &vec: queries){\n            if(vec[0] == 1){\n                ret.push_back(query(n, m, vec[1]));\n            } else {\n                if(a[vec[1]] != vec[2]){\n                    a[vec[1]] = vec[2];\n                    init(g[vec[1]]);\n                }\n            }\n        }\n        return ret;\n    }\n};",
    "submit_ts": "1722742076",
    "subm_id": "552342323"
}