{
    "username": "Rycix",
    "submission": "class Solution:\n    def canReachCorner(self, X: int, Y: int, circles: List[List[int]]) -> bool:\n        def circles_intersect(c1, c2):\n            x1, y1, r1 = c1\n            x2, y2, r2 = c2\n            dist = (x1-x2)**2 + (y1-y2)**2\n            return dist <= (r1+r2)**2\n        \n        def solve_x(c, y=0):\n            cx, cy, r = c\n            delta_sq = r**2 - (y-cy)**2\n            if delta_sq < 0:\n                return\n            delta = delta_sq**0.5\n            return cx + delta, cx - delta\n        \n        def solve_y(c, x=0):\n            cx, cy, r = c\n            delta_sq = r**2 - (x-cx)**2\n            if delta_sq < 0:\n                return\n            delta = delta_sq**0.5\n            return cy + delta, cy - delta\n        \n        lt = set()\n        br = set()\n        \n        for i, c in enumerate(circles):\n            # left-top segments\n            if solve_y(c) or solve_x(c, Y):\n                lt.add(i)\n            # bot-right segments\n            if solve_x(c) or solve_y(c, X):\n                br.add(i)\n        \n            # print('bot', solve_x(c))\n            # print('left', solve_y(c))\n            # print('top', solve_x(c, Y))\n            # print('right', solve_y(c, X))\n            \n        graph = collections.defaultdict(list)\n        N = len(circles)\n        for i in range(N):\n            for j in range(i+1, N):\n                c1, c2 = circles[i], circles[j]\n                # print(c1, c2)\n                # print(circles_intersect(c1,c2))\n                if (circles_intersect(c1, c2)):\n                    graph[i].append(j)\n                    graph[j].append(i)\n        \n        bags = set(range(N))\n        \n        while bags:\n            mark_lt, mark_br = False, False\n            c = bags.pop()\n            \n            visited = set([c])\n            frontier = collections.deque([c])\n            while frontier:\n                n = frontier.popleft()\n                if n in lt:\n                    mark_lt = True\n                if n in br:\n                    mark_br = True\n                if mark_lt and mark_br:\n                    return False\n                for nn in graph[n]:\n                    if nn not in visited:\n                        visited.add(nn)\n                        bags.remove(nn)\n                        frontier.append(nn)\n        \n        \n        return True",
    "submit_ts": "1722138336",
    "subm_id": "1335788126"
}