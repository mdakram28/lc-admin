{
    "username": "ys-y",
    "submission": "int fun(vector<vector<int>>& points, int index, int n) {\n    vector<vector<int>> p(4, vector<int>(n - 1));\n    for(int i = 0; i < n;i++) {\n        if(i == index) {\n            continue;\n        }\n        if(i < index) {\n            p[0][i] = points[i][0] + points[i][1];\n            p[1][i] = -points[i][0] + points[i][1];\n            p[2][i] = points[i][0] - points[i][1];\n            p[3][i]= -points[i][0] - points[i][1];\n        }\n        else {\n            p[0][i - 1] = points[i][0] + points[i][1];\n            p[1][i - 1] = -points[i][0] + points[i][1];\n            p[2][i - 1] = points[i][0] - points[i][1];\n            p[3][i - 1] = -points[i][0] - points[i][1];\n        }  \n    }\n    for(int i = 0; i < 4;i++) {\n        sort(p[i].begin(), p[i].end());\n    }\n    int mx = 0;\n    for(int i = 0; i < 4;i++) {\n        mx = max(mx, p[i][n - 2] - p[i][0]);\n    }\n    return mx;\n}\n\npair<int,int> fun2(vector<vector<int>>& points, int n) {\n    vector<vector<pair<int,int>>> p(4, vector<pair<int,int>>(n));\n    for(int i = 0; i < n;i++) {\n        p[0][i].first = points[i][0] + points[i][1];\n        p[1][i].first = -points[i][0] + points[i][1];\n        p[2][i].first = points[i][0] - points[i][1];\n        p[3][i].first = -points[i][0] - points[i][1];\n        p[0][i].second = i;\n        p[1][i].second = i;\n        p[2][i].second = i;\n        p[3][i].second = i;\n    }\n    for(int i = 0; i < 4;i++) {\n        sort(p[i].begin(), p[i].end());\n    }\n    int mx = -1;\n    int id1 = -1, id2 = -1;\n    for(int i = 0; i < 4;i++) {\n        if(mx < p[i][n - 1].first - p[i][0].first) {\n            mx = p[i][n - 1].first - p[i][0].first;\n            id1 = p[i][0].second;\n            id2 = p[i][n - 1].second;\n        }\n    }\n    return {id1, id2};\n}\n\n\nclass Solution {\npublic:\n    int minimumDistance(vector<vector<int>>& points) {\n        int n = points.size();\n        auto x = fun2(points, n);\n        cout << x.first << \" \" << x.second << endl;\n        int dis1 = fun(points, x.first, n);\n        int dis2 = fun(points, x.second, n);\n        int mx = min(dis1, dis2);\n        return mx;\n        \n    }\n};"
}