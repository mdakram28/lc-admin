{
    "username": "xymabinogi",
    "submission": "using i64 = long long;\nclass Solution {\npublic:\n    long long countSubarrays(vector<int>& nums, int k) {\n        int n = nums.size();\n        vector<vector<int>> state(n + 1, vector<int>(30, 0));\n        for (int i = 0; i < n; i++){\n            for (int j = 0; j < 30; j++){\n                state[i + 1][j] = state[i][j] + (1 & (nums[i] >> j));\n            }\n        }\n        auto check = [&](int l, int r) -> int {\n            int cur = 0;\n            for (int i = 0; i < 30; i++){\n                if (state[r + 1][i] - state[l][i] == r - l + 1) cur |= (1 << i);\n            }\n            return cur;\n        };\n        \n        i64 res = 0;\n        for (int i = 0; i < n; i++){\n            //rightmost\n            int l = i, r = n - 1;\n            while(l < r){\n                int mid = (l + r + 1) / 2;\n                if (check(i, mid) < k){\n                    r = mid - 1;\n                }\n                else {\n                    l = mid;\n                }\n            }\n            if (check(i, l) != k) continue;\n            \n            int RIGHTMOST = l;\n            //left most\n            l = i, r = RIGHTMOST;\n            while(l < r){\n                int mid = (l + r) / 2;\n                if (check(i, mid) <= k){\n                    r = mid;\n                }\n                else {\n                    l = mid + 1;\n                }\n            }\n            res += (RIGHTMOST - l + 1);\n            \n            \n            \n            \n        }\n        return res;\n        \n        \n        \n    }\n};",
    "submit_ts": "1720277669",
    "subm_id": "1311674493"
}