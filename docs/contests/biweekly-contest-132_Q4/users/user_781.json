{
    "username": "_Anumish",
    "submission": "class Solution {\n    vector<vector<int>> tree;\n\n    void update(int index, int k, int val,int l2,int r2,int ci=0) {\n        if(l2==r2) {\n            tree[k][ci]=val;\n            return ;\n        }\n        int mid=(l2+r2)/2;\n        if(index<=mid) {\n            update(index, k, val,l2,mid,2*ci+1);\n        }\n        else {\n            update(index, k, val,mid+1,r2,2*ci+2);\n        }\n        tree[k][ci]=max(tree[k][2*ci+1],tree[k][2*ci+2]);\n    }\n    \n    int query(int l1,int r1, int k, int l2,int r2,int ci=0) {\n        if(l2>=l1&&r2<=r1) {\n            return tree[k][ci];\n        }\n        if(l2>r1||r2<l1) {\n            return 0;\n        }\n        int mid=(l2+r2)/2;\n        return max(query(l1,r1, k, l2,mid,2*ci+1),query(l1,r1, k, mid+1,r2,2*ci+2));\n    }\n    \npublic:\n    int maximumLength(vector<int>& a, int k) {\n        int n=a.size();\n        tree=vector<vector<int>> (k+1, vector<int> (10*n+1));\n        vector<vector<int>> dp(n,vector<int> (k+1));\n        for(int i=0;i<n;i++) {\n            dp[i][0]=1;\n        }\n        int count=0;\n        map<int,int> mapka;\n        for(int i=0;i<n;i++) {\n            mapka[a[i]]=count;\n            count++;\n        }\n        for(int i=0;i<n;i++) {\n            int index=mapka[a[i]];\n            for(int x=0;x<=k;x++) {\n                // if(a[i]!=a[j]) {\n                //     if(x+1<=k) {\n                //         dp[i][x+1]=max(dp[i][x+1], dp[j][x]+1);\n                //     }\n                // } else {\n                //     dp[i][x]=max(dp[i][x], dp[j][x]+1);\n                // }\n                int first=0;\n                int second=0;\n                if(index) {\n                    first=query(0, index-1, x, 0, n-1);\n                }\n                if(index<n-1) {\n                    second=query(index+1, n-1, x, 0, n-1);\n                }\n                if(x+1<=k) {\n                    dp[i][x+1]=max(dp[i][x+1], max(first,second)+1);\n                }\n                dp[i][x]=max(dp[i][x], query(index,index, x, 0, n-1)+1);\n            }\n            for(int j=0;j<=k;j++) {\n                update(index, j, dp[i][j], 0, n-1);\n            }\n        }\n        int ans=0;\n        for(int i=0;i<n;i++) {\n            for(int j=0;j<=k;j++) {\n                ans=max(ans,dp[i][j]);\n            }\n        }\n        return ans;\n    }\n};",
    "submit_ts": 1717862307.0
}