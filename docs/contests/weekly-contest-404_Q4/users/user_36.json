{
    "username": "dd2307",
    "submission": "class Solution:\n    def minimumDiameterAfterMerge(self, edges1: List[List[int]], edges2: List[List[int]]) -> int:\n        graph1 = defaultdict(list)\n        graph2 = defaultdict(list)\n        for u, v in edges1:\n            graph1[u].append(v)\n            graph1[v].append(u)\n        for u, v in edges2:\n            graph2[u].append(v)\n            graph2[v].append(u)\n        \n        n, m = len(edges1) + 1, len(edges2) + 1\n        d1, c1, m1 = self.find(graph1)\n        d2, c2, m2 = self.find(graph2)\n        \n        return max(d1, d2, m1 + m2 + 1)\n    \n    def find(self, graph):\n        f, _ = self.bfs(0, graph)\n        o, d = self.bfs(f, graph)\n        \n        dists = {}\n        queue = deque([(f, 0)])\n        visited = {f}\n        \n        while queue:\n            curr, dist = queue.popleft()\n            dists[curr] = dist\n            for neighbor in graph[curr]:\n                if neighbor not in visited:\n                    visited.add(neighbor)\n                    queue.append((neighbor, dist + 1))\n        \n        max_dist = max(dists.values())\n        centroids = [node for node, dist in dists.items() if dist == max_dist // 2]\n        if max_dist % 2 == 0:\n            max_dist_from_centroid = max_dist // 2\n        else:\n            centroids.append([node for node, dist in dists.items() if dist == (max_dist // 2) + 1][0])\n            max_dist_from_centroid = (max_dist // 2) + 1\n        \n        return d, centroids, max_dist_from_centroid\n    \n    def bfs(self, node, graph):\n        visited = {node}\n        queue = deque([(node, 0)])\n        farthest, max_dist = node, 0\n        \n        while queue:\n            curr, dist = queue.popleft()\n            \n            if dist > max_dist:\n                farthest, max_dist = curr, dist\n            \n            for neighbor in graph[curr]:\n                if neighbor not in visited:\n                    visited.add(neighbor)\n                    queue.append((neighbor, dist + 1))\n        \n        return farthest, max_dist",
    "submit_ts": 1719716539.0
}