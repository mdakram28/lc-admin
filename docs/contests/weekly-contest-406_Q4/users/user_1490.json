{
    "username": "AbhayLodhi24",
    "submission": "class Solution {\npublic:\n    long long minimumCost(int m, int n, vector<int>& horizontalCut, vector<int>& verticalCut) {\n         priority_queue<int> horizontalCuts, verticalCuts;\n    for (int cost : horizontalCut) {\n        horizontalCuts.push(cost);\n    }\n    for (int cost : verticalCut) {\n        verticalCuts.push(cost);\n    }\n\n    int horizontalPieces = 1; // Number of horizontal pieces formed\n    int verticalPieces = 1;   // Number of vertical pieces formed\n    long long totalCost = 0;\n\n    // Continue until there are no more cuts left in either direction\n    while (!horizontalCuts.empty() || !verticalCuts.empty()) {\n        // Choose the larger cost cut from the two heaps\n        if (!horizontalCuts.empty() && (verticalCuts.empty() || horizontalCuts.top() >= verticalCuts.top())) {\n            // Take the highest horizontal cut\n            totalCost += horizontalCuts.top() * verticalPieces;\n            horizontalCuts.pop();\n            horizontalPieces++;\n        } else {\n            // Take the highest vertical cut\n            totalCost += verticalCuts.top() * horizontalPieces;\n            verticalCuts.pop();\n            verticalPieces++;\n        }\n    }\n\n    return totalCost;\n    }\n};",
    "submit_ts": "1720926292",
    "subm_id": "1320281832"
}