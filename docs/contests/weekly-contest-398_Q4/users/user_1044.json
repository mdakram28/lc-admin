{
    "username": "shivacharan27",
    "submission": "import java.util.HashMap;\nimport java.util.Map;\n\npublic class Solution {\n    // A map to store the DP state\n    private Map<Integer, int[][]> dp;\n\n    // Constructor to initialize the DP map\n    public Solution() {\n        dp = new HashMap<>();\n    }\n\n    private int solve(int k, int i, int jump, boolean can) {\n        if (i > k + 5) return 0;\n        if (jump > 31) return 0;\n\n        // If dp[i][jump][can] is already computed, return the stored value\n        if (dp.containsKey(i) && dp.get(i)[jump][can ? 1 : 0] != -1) {\n            return dp.get(i)[jump][can ? 1 : 0];\n        }\n\n        int ans = (i == k) ? 1 : 0;\n        if (can) ans += solve(k, i - 1, jump, false);\n        if (i + (1 << jump) <= k + 1) ans += solve(k, i + (1 << jump), jump + 1, true);\n\n        // Ensure the dp array is initialized\n        dp.putIfAbsent(i, new int[32][2]);\n        for (int j = 0; j < 32; j++) {\n            dp.get(i)[j][0] = -1;\n            dp.get(i)[j][1] = -1;\n        }\n\n        // Store the computed value in the dp array\n        dp.get(i)[jump][can ? 1 : 0] = ans;\n        return ans;\n    }\n\n    public int waysToReachStair(int k) {\n        return solve(k, 1, 0, true);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        int k = 10; // Example input\n        System.out.println(solution.waysToReachStair(k)); // Example usage\n    }\n}\n",
    "submit_ts": 1716090429.0
}