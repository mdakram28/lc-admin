{
    "username": "lovish_Monga",
    "submission": "#include <unordered_map>\n#include <vector>\n#include <string>\n#include <climits>\n#include <algorithm>\n\nusing namespace std;\n\nclass TrieNode {\npublic:\n    unordered_map<char, TrieNode*> children;\n    int minCost;\n    \n    TrieNode() : minCost(INT_MAX) {}\n};\n\nclass Trie {\npublic:\n    TrieNode* root;\n    \n    Trie() {\n        root = new TrieNode();\n    }\n    \n    void insert(const string& word, int cost) {\n        TrieNode* currentNode = root;\n        for (char c : word) {\n            if (!currentNode->children.count(c)) {\n                currentNode->children[c] = new TrieNode();\n            }\n            currentNode = currentNode->children[c];\n        }\n        currentNode->minCost = min(currentNode->minCost, cost);\n    }\n};\n\nclass Solution {\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int targetLength = target.size();\n        Trie trie;\n        for (int i = 0; i < words.size(); ++i) {\n            trie.insert(words[i], costs[i]);\n        }\n        \n        vector<int> minCosts(targetLength + 1, INT_MAX);\n        minCosts[0] = 0;\n        \n        for (int i = 0; i < targetLength; ++i) {\n            if (minCosts[i] == INT_MAX) continue;\n            TrieNode* currentNode = trie.root;\n            for (int j = i; j < targetLength; ++j) {\n                if (!currentNode->children.count(target[j])) break;\n                currentNode = currentNode->children[target[j]];\n                if (currentNode->minCost != INT_MAX) {\n                    minCosts[j + 1] = min(minCosts[j + 1], minCosts[i] + currentNode->minCost);\n                }\n            }\n        }\n        \n        return minCosts[targetLength] == INT_MAX ? -1 : minCosts[targetLength];\n    }\n};\n",
    "submit_ts": "1720323052",
    "subm_id": "1312366112"
}