{
    "username": "tusharbazaz",
    "submission": "class Solution {\npublic:\n    int minimumDiameterAfterMerge(vector<vector<int>>& e1, vector<vector<int>>& e2) {\n        int n1 = e1.size() + 1,n2 = e2.size() + 1;\n        vector<vector<int>> adj1(n1), adj2(n2);\n\n        buildAdj(e1, adj1);\n        buildAdj(e2, adj2);\n\n        int fn1 = 0;\n        int d1 = getDiameter(adj1, fn1);\n\n        int fn2 = 0;\n        int d2 = getDiameter(adj2, fn2);\n\n        int minDiam = max(d1, d2);\n        int half1 = (d1 + 1) / 2;\n        int half2 = (d2 + 1) / 2;\n        minDiam = max(minDiam, half1 + half2 + 1);\n\n        return minDiam;\n    }\n\nprivate:\n    void buildAdj(const vector<vector<int>>& edges, vector<vector<int>>& adj) {\n        // Yeh function edges se adj making\n        for (const auto& edge : edges) {\n            adj[edge[0]].push_back(edge[1]);\n            adj[edge[1]].push_back(edge[0]);\n        }\n    }\n\n    int findFarNode(const vector<vector<int>>& adj, int start, int& farNode) {\n        int n = adj.size();\n        vector<int> dist(n, -1);\n        function<void(int, int)> dfs = [&](int node, int d) {\n            dist[node] = d;\n            if (d > dist[farNode]) {\n                farNode = node;\n            }\n            for (int neighbor : adj[node]) {\n                if (dist[neighbor] == -1) {\n                    dfs(neighbor, d + 1);\n                }\n            }\n        };\n        farNode = start;\n        dfs(start, 0);\n        return dist[farNode];\n    }\n\n    int getDiameter(const vector<vector<int>>& adj, int& farNode) {\n        // Yeh function trees d\n        int start = 0;\n        findFarNode(adj, start, farNode);\n        return findFarNode(adj, farNode, farNode);\n    }\n};",
    "submit_ts": 1719718394.0
}