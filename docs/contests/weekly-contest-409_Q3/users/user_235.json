{
    "username": "profchi",
    "submission": "class Solution {\n    public int[] shortestDistanceAfterQueries(int n, int[][] queries) {\n        \n        TreeMap<Integer, Integer> map = new TreeMap<>();\n        \n        \n        int [] result = new int [queries.length];\n        \n        int idx = 0;\n        \n        int u, v;\n        \n        Integer key;\n        \n        int dist = n - 1;\n        \n        int end, savings;\n        \n        for (int [] query : queries) {\n            u = query[0];\n            v = query[1];\n            \n            key = map.floorKey(u);\n            \n            if (key != null && map.get(key) >= v) {\n                result[idx++] = dist;\n                continue;\n            }\n            \n            key = map.ceilingKey(u);\n            \n            while (key != null && key < v) {\n                end = map.get(key);\n                savings = end - key - 1;\n                \n                v = Math.max(v, end);\n                \n                dist += savings;\n                map.remove(key);\n                key = map.ceilingKey(u);\n            }\n            savings = v - u - 1;\n            dist -= savings;\n            map.put(u, v);\n            \n            result[idx++] = dist;\n        }\n        \n        return result;\n    }\n}",
    "submit_ts": "1722740232",
    "subm_id": "1343714583"
}