{
    "username": "humbl_pi",
    "submission": "class Solution:\n    def overs(self, x1, y1, r1, x2, y2, r2):\n        d1 = x1 - x2\n        d2 = y1 - y2\n        d = math.sqrt(d1**2+d2**2)\n\n        if(d <= r1 - r2):\n            ## B in A\n            return True\n        elif(d <= r2 - r1):\n            ## A in B\n            return True\n        elif(d <= r1 + r2):\n            ## intersect / touch\n            return True\n        else:\n            return False\n\n    def canReachCorner(self, X: int, Y: int, circles: List[List[int]]) -> bool:\n        n = len(circles)\n        touchBot = [False]*n\n        touchTop = [False]*n\n        touchLeft = [False]*n\n        touchRight = [False]*n\n        \n        par = list(range(n))\n        rnk = [0] * n\n        touches = [[] for _ in range(n)]\n\n        ## find the leader of node x\n        def find(x):\n            if par[x] != x:\n                ## when traversing, update through backtracking\n                par[x] = find(par[x])\n            return par[x]\n\n        ## join the sets of node x, y together\n        def union(x, y):\n            ## get roots of respective sets\n            xr, yr = find(x), find(y)\n            for condn in [touchBot, touchTop, touchLeft, touchRight]:\n                if condn[x] or condn[y]:\n                    condn[xr] = True\n                    condn[yr] = True\n\n            ## already part of same set!\n            if xr == yr:\n                return\n\n            ## shallower tree gets assimilated\n            elif rnk[xr] < rnk[yr]:\n                par[xr] = yr\n            elif rnk[xr] > rnk[yr]:\n                par[yr] = xr\n            else: ## same rank\n                par[yr] = xr\n                rnk[xr] += 1\n            return\n\n        for i in range(n):\n            ## touch bounds?\n            xi, yi, ri = circles[i]\n            touchBot[i] = yi-ri <= 0\n            touchLeft[i] = xi-ri <= 0\n            touchTop[i] = yi+ri >= Y\n            touchRight[i] = xi+ri >= X\n        # print(touchBot, touchTop, touchLeft, touchRight)\n\n        for i in range(n):\n            for j in range(i+1, n):\n                ## each pair of circles: intersect?\n                if self.overs(*circles[i],*circles[j]):\n                    # print(i,j)\n                    union(i,j)\n        \n        # print(touchBot, touchTop, touchLeft, touchRight)\n\n        ## circle \n        for i in range(n):\n            # pass\n            if touchBot[i] and touchLeft[i]:\n                return False\n            elif touchTop[i] and touchRight[i]:\n                return False\n            elif touchLeft[i] and touchRight[i]:\n                return False\n            elif touchTop[i] and touchBot[i]:\n                return False\n        return True",
    "submit_ts": "1722139116",
    "subm_id": "1335808292"
}