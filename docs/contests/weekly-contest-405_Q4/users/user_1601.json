{
    "username": "samyak_cool",
    "submission": "from typing import List\nfrom collections import defaultdict\n\nclass Solution:\n    def minimumCost(self, target: str, words: List[str], costs: List[int]) -> int:\n        word_costs = defaultdict(lambda: float('inf'))\n        for word, cost in zip(words, costs):\n            word_costs[word] = min(word_costs[word], cost)\n        \n        dp = [float('inf')] * (len(target) + 1)\n        dp[0] = 0\n        \n        for i in range(1, len(target) + 1):\n            for word in word_costs:\n                if i >= len(word) and target[i-len(word):i] == word:\n                    dp[i] = min(dp[i], dp[i-len(word)] + word_costs[word])\n        \n        return dp[-1] if dp[-1] < float('inf') else -1\n\n    def build_target(self, target: str, words: List[str], costs: List[int]) -> List[str]:\n        min_cost = self.minimumCost(target, words, costs)\n        if min_cost == -1:\n            return []\n        \n        word_costs = {w: c for w, c in zip(words, costs)}\n        result = []\n        i = len(target)\n        \n        while i > 0:\n            for word in words:\n                if i >= len(word) and target[i-len(word):i] == word:\n                    if self.minimumCost(target[:i-len(word)], words, costs) + word_costs[word] == min_cost:\n                        result.append(word)\n                        i -= len(word)\n                        min_cost -= word_costs[word]\n                        break\n        \n        return result[::-1]",
    "submit_ts": "1720323354",
    "subm_id": "1312373511"
}