{
    "username": "y-c",
    "submission": "class SegmentTree {\nprivate:\n    std::vector<int> tree;\n    int n;\n\n    void build(const std::vector<int>& nums, int node, int start, int end) {\n        if (start == end) {\n            tree[node] = nums[start];\n        } else {\n            int mid = (start + end) / 2;\n            build(nums, 2 * node + 1, start, mid);\n            build(nums, 2 * node + 2, mid + 1, end);\n            tree[node] = tree[2 * node + 1] & tree[2 * node + 2];\n        }\n    }\n\n    int query(int node, int start, int end, int L, int R) {\n        if (R < start || L > end) {\n            return INT_MAX;\n        }\n        if (L <= start && end <= R) {\n            return tree[node];\n        }\n        int mid = (start + end) / 2;\n        int left_query = query(2 * node + 1, start, mid, L, R);\n        int right_query = query(2 * node + 2, mid + 1, end, L, R);\n        return left_query & right_query;\n    }\n\npublic:\n    SegmentTree(const std::vector<int>& nums) {\n        n = nums.size();\n        tree.resize(4 * n);\n        build(nums, 0, 0, n - 1);\n    }\n\n    int query(int L, int R) {\n        return query(0, 0, n - 1, L, R);\n    }\n};\n\nclass Solution {\npublic:\n    int minimumDifference(vector<int>& nums, int k) {\n        int n = nums.size();\n        SegmentTree segTree(nums);\n        int min_diff = INT_MAX;\n\n        for (int i = 0; i < n; ++i) {\n            int left = i, right = n - 1, best = INT_MAX;\n            while (left <= right) {\n                int mid = (left + right) / 2;\n                int current_and = segTree.query(i, mid);\n                int current_diff = std::abs(k - current_and);\n                if (current_diff < min_diff) {\n                    min_diff = current_diff;\n                    //cout << \"left = \" << left << \", right = \" << right << endl;\n                    //cout << \"cur_and = \" << current_and << endl;\n                    best = current_and;\n                }\n                if (current_and > k) {\n                    left = mid + 1;\n                } else {\n                    right = mid - 1;\n                }\n            }\n        }\n\n        return min_diff;\n    }\n};\n",
    "submit_ts": 1717298280.0
}