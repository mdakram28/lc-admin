{
    "username": "cgcdivyanshu",
    "submission": "class Solution {\n      class TrieNode {\n        Map<Character, TrieNode> children;\n        List<Integer> wordIndices;\n\n        TrieNode() {\n            children = new HashMap<>();\n            wordIndices = new ArrayList<>();\n        }\n    }\n\n    class Trie {\n        TrieNode root;\n\n        Trie() {\n            root = new TrieNode();\n        }\n\n        void insert(String word, int index) {\n            TrieNode node = root;\n            for (char c : word.toCharArray()) {\n                node.children.putIfAbsent(c, new TrieNode());\n                node = node.children.get(c);\n            }\n            node.wordIndices.add(index);\n        }\n\n        TrieNode getRoot() {\n            return root;\n        }\n    }\n\n    public int minimumCost(String target, String[] words, int[] costs) {\n        int n = target.length();\n        int[] dp = new int[n + 1];\n        Arrays.fill(dp, Integer.MAX_VALUE);\n        dp[0] = 0;\n\n        // Create a Trie and insert all words with their respective costs\n        Trie trie = new Trie();\n        for (int i = 0; i < words.length; i++) {\n            trie.insert(words[i], i);\n        }\n\n        // Iterate through each position in the target\n        for (int i = 0; i < n; i++) {\n            if (dp[i] == Integer.MAX_VALUE) continue;\n\n            // Use Trie to find all valid words starting from position i\n            TrieNode node = trie.getRoot();\n            for (int j = i; j < n; j++) {\n                char c = target.charAt(j);\n                if (!node.children.containsKey(c)) break;\n                node = node.children.get(c);\n                for (int wordIndex : node.wordIndices) {\n                    dp[j + 1] = Math.min(dp[j + 1], dp[i] + costs[wordIndex]);\n                }\n            }\n        }\n\n        return dp[n] == Integer.MAX_VALUE ? -1 : dp[n];\n    \n    }\n}",
    "submit_ts": "1720320707",
    "subm_id": "1312302345"
}