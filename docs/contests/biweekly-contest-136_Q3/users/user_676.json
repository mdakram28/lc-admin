{
    "username": "jpz",
    "submission": "class Solution:\n    def minFlips(self, grid: List[List[int]]) -> int:\n        R = len(grid)\n        C = len(grid[0])\n\n        flip = 0\n        for r in range(R//2):\n            for c in range(C//2):\n                total = (\n                    grid[r][c] + grid[r][C-1-c] + \n                    grid[R-r-1][c] + grid[R-r-1][C-1-c])\n                if total == 3:\n                    grid[r][c] = grid[r][C-1-c] = grid[R-r-1][c] = grid[R-r-1][C-1-c] = 1\n                    flip += 1\n                if total == 1:\n                    grid[r][c] = grid[r][C-1-c] = grid[R-r-1][c] = grid[R-r-1][C-1-c] = 0\n                    flip += 1\n                if total == 2:\n                    grid[r][c] = grid[r][C-1-c] = grid[R-r-1][c] = grid[R-r-1][C-1-c] = 0\n                    flip += 2\n\n        if R % 2 == 1 and C % 2 == 1 and grid[R//2][C//2] == 1:\n            grid[R//2][C//2] = 0\n            flip += 1\n\n        colflip = 0\n        colcount = 0\n        if R % 2 == 1:\n            for c in range(C//2):\n                if grid[R//2][c] != grid[R//2][C-1-c]:\n                    colflip += 1\n                colcount += grid[R//2][c] + grid[R//2][C-1-c]\n        rowflip = 0\n        rowcount = 0\n        if C % 2 == 1:\n            for r in range(R//2):\n                if grid[r][C//2] != grid[R-1-r][C//2]:\n                    rowflip += 1\n                rowcount += grid[r][C//2] + grid[R-1-r][C//2]\n        \n        min_achievable = colcount - colflip + rowcount - rowflip\n        max_achievable = colflip + colcount + rowflip + rowcount\n        deduct = (min_achievable // 4) * 4\n        min_achievable -= deduct\n        max_achievable -= deduct\n\n        if min_achievable == 0 or min_achievable <= 4 <= max_achievable:\n            return flip + rowflip + colflip\n        else:\n            return flip + rowflip + colflip + 2\n        \n",
    "submit_ts": "1722697540",
    "subm_id": "1343150224"
}