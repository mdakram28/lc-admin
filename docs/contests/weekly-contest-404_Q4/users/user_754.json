{
    "username": "beta-blue",
    "submission": "class Solution {\npublic:\n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n        auto [h1, d1]  = find(edges1);\n        auto [h2, d2] = find(edges2);\n        return max(h1 + h2 + 1, max(d1, d2));\n    }\n    \n    pair<int, int> find(vector<vector<int>>& edges) {\n        int n = edges.size() + 1;\n        vector<vector<int>> outs(n);\n        vector<int> ins(n, 0);\n        \n        for (auto& edge: edges) {\n            outs[edge[0]].push_back(edge[1]);\n            outs[edge[1]].push_back(edge[0]);\n            ins[edge[0]]++;\n            ins[edge[1]]++;\n        }\n        \n        queue<int> q;\n        for (int i=0; i<n; ++i) {\n            if (ins[i] == 1) {\n                ins[i]--;\n                q.push(i);\n            }\n        }\n        \n        int res = 0;\n        bool one = false;\n        int root = -1;\n        \n        while (!q.empty()) {\n            one = q.size() == 1;\n            root = q.front();\n            res++;\n            for (int i=q.size(); i>0; --i) {\n                int node = q.front();\n                // cout << res << \": \" << node << \" -> \";\n                q.pop();\n                \n                auto& out = outs[node];\n                for (auto& o: out) {\n                    // cout << \"(\" << o << \",\" << ins[o] << \") \";\n                    if (--ins[o] == 1)\n                    {\n                        q.push(o);\n                    }\n                }\n                // cout << endl;\n            }\n        }\n        // cout << endl;\n        // cout << res << \" \" << one << endl;\n        \n        int h = one ? res - 1 : res;\n        int d = one ? h * 2 : (h * 2 - 1);\n        return {h, d};\n    }\n};",
    "submit_ts": "1719718774",
    "subm_id": "1304425743"
}