{
    "username": "KHAN HAARISH",
    "submission": "class Solution:\n    def maximumValueSum(self, board: List[List[int]]) -> int:\n        m, n = len(board), len(board[0])\n    \n        # Collect max values from each row, along with their column indices\n        max_values = []\n        for i in range(m):\n            max_values.append(sorted([(board[i][j], j) for j in range(n)], reverse=True))\n        \n        max_sum = float('-inf')\n        \n        # Try all combinations of rows, but only consider the top 3 max values in each row\n        for r1 in range(m):\n            for r2 in range(r1 + 1, m):\n                for r3 in range(r2 + 1, m):\n                    # Choose the best non-overlapping columns\n                    for c1 in range(3):\n                        for c2 in range(3):\n                            if max_values[r1][c1][1] == max_values[r2][c2][1]:\n                                continue\n                            for c3 in range(3):\n                                if max_values[r1][c1][1] == max_values[r3][c3][1] or max_values[r2][c2][1] == max_values[r3][c3][1]:\n                                    continue\n                                current_sum = max_values[r1][c1][0] + max_values[r2][c2][0] + max_values[r3][c3][0]\n                                max_sum = max(max_sum, current_sum)\n        \n        return max_sum",
    "submit_ts": "1723907416",
    "subm_id": "1359106542"
}