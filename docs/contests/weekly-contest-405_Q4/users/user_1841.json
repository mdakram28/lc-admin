{
    "username": "share_leetcode",
    "submission": "class Solution {\n    private final Trie trie = new Trie();\n    private Map<Integer, Integer> memo = new HashMap<>();\n\n    public int minimumCost(String target, String[] words, int[] costs) {\n        // trie\n        \n        List<Integer> result=new ArrayList<>();\n        for (int i = 0; i < words.length; i++) {\n            trie.insert(words[i], costs[i]);\n        }\n\n        int total_cost = dfs(target, 0);\n        return total_cost == Integer.MAX_VALUE ? -1 : total_cost;\n        \n    }\n\n    private int dfs(String target, int index) {\n        if (index == target.length()) {\n            return 0;\n        }\n        if (memo.containsKey(index)) {\n            return memo.get(index);\n        }\n\n        Trie.TrieNode curr = trie.root;\n        int minCost = Integer.MAX_VALUE;\n\n        for (int i = index; i < target.length(); i++) {\n            char ch = target.charAt(i);\n            if (curr.children[ch - 'a'] == null) {\n                break;\n            }\n\n            curr = curr.children[ch - 'a'];\n            if (curr.endOfWord) {\n                int nextCost = dfs(target, i + 1);\n                if (nextCost != Integer.MAX_VALUE) {\n                    int cost = curr.cost + nextCost;\n                    minCost = Math.min(minCost, cost);\n                }\n            }\n        }\n\n        memo.put(index, minCost);\n        return minCost;\n    }\n\n    class Trie {\n        private class TrieNode {\n            TrieNode[] children;\n            boolean endOfWord;\n            int cost;\n\n            public TrieNode() {\n                this.children = new TrieNode[26]; // Assuming only lowercase letters\n                this.endOfWord = false;\n                this.cost = Integer.MAX_VALUE;\n            }\n        }\n\n        private TrieNode root;\n\n        public Trie() {\n            root = new TrieNode();\n        }\n\n        public void insert(String word, int cost) {\n            TrieNode curr = root;\n            for (int i = 0; i < word.length(); i++) {\n                char ch = word.charAt(i);\n                int index = ch - 'a'; // 'a' maps to index 0\n                if (curr.children[index] == null) {\n                    curr.children[index] = new TrieNode();\n                }\n                curr = curr.children[index];\n            }\n            curr.endOfWord = true;\n            curr.cost = Math.min(curr.cost, cost);\n        }\n    }\n\n}",
    "submit_ts": "1720324737",
    "subm_id": "1312406830"
}