{
    "username": "Luyim25",
    "submission": "class Solution {\n    struct V {\n      int longestPath = 0;\n      int secondLongestPath = 0;\n      int longestPathId = -1;\n      int secondLongestPathId = -1;\n    };\n    V vs1[100000], vs2[100000];\n    vector<int> adj1[100000];\n    vector<int> adj2[100000];\npublic:\n    \n    int dfs1a(int x, int p) {\n        for(int& c: adj1[x]) {\n            if(c != p) {\n                int checkLength = dfs1a(c, x);\n                if(checkLength > vs1[x].longestPath) {\n                    vs1[x].secondLongestPath = vs1[x].longestPath;\n                    vs1[x].secondLongestPathId = vs1[x].longestPathId;\n                    vs1[x].longestPath = checkLength;\n                    vs1[x].longestPathId = c;\n                } else if(checkLength > vs1[x].secondLongestPath) {\n                    vs1[x].secondLongestPath = checkLength;\n                    vs1[x].secondLongestPathId = c;\n                }\n            }\n        }\n        return vs1[x].longestPath+1;\n    }\n    \n    void dfs1b(int x, int p, int path) {\n        if(path > vs1[x].longestPath) {\n            vs1[x].secondLongestPath = vs1[x].longestPath;\n            vs1[x].secondLongestPathId = vs1[x].longestPathId;\n            vs1[x].longestPath = path;\n            vs1[x].longestPathId = p;\n        } else if(path > vs1[x].secondLongestPath) {\n            vs1[x].secondLongestPath = path;\n            vs1[x].secondLongestPathId = p;\n        }\n        for(int& c: adj1[x]) {\n            if(c != p) {\n                if(vs1[x].longestPathId == c) {\n                    if(vs1[x].secondLongestPathId != -1)\n                        dfs1b(c, x, vs1[x].secondLongestPath+1);\n                    else\n                        dfs1b(c, x, 1);\n                } else if(vs1[x].longestPathId != -1){\n                    dfs1b(c, x, vs1[x].longestPath+1);\n                }\n            }\n        }\n    }\n    \n    int dfs2a(int x, int p) {\n        for(int& c: adj2[x]) {\n            if(c != p) {\n                int checkLength = dfs2a(c, x);\n                if(checkLength > vs2[x].longestPath) {\n                    vs2[x].secondLongestPath = vs2[x].longestPath;\n                    vs2[x].secondLongestPathId = vs2[x].longestPathId;\n                    vs2[x].longestPath = checkLength;\n                    vs2[x].longestPathId = c;\n                } else if(checkLength > vs2[x].secondLongestPath) {\n                    vs2[x].secondLongestPath = checkLength;\n                    vs2[x].secondLongestPathId = c;\n                }\n            }\n        }\n        return vs2[x].longestPath+1;\n    }\n    \n    void dfs2b(int x, int p, int path) {\n        if(path > vs2[x].longestPath) {\n            vs2[x].secondLongestPath = vs2[x].longestPath;\n            vs2[x].secondLongestPathId = vs2[x].longestPathId;\n            vs2[x].longestPath = path;\n            vs2[x].longestPathId = p;\n        } else if(path > vs2[x].secondLongestPath) {\n            vs2[x].secondLongestPath = path;\n            vs2[x].secondLongestPathId = p;\n        }\n        for(int& c: adj2[x]) {\n            if(c != p) {\n                if(vs2[x].longestPathId == c) {\n                    if(vs2[x].secondLongestPathId != -1)\n                        dfs2b(c, x, vs2[x].secondLongestPath+1);\n                    else\n                        dfs2b(c, x, 1);\n                } else if(vs2[x].longestPathId != -1){\n                    dfs2b(c, x, vs2[x].longestPath+1);\n                }\n            }\n        }\n    }\n    \n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n        for(int i = 0; i < edges1.size(); i++) {\n            adj1[edges1[i][0]].push_back(edges1[i][1]);\n            adj1[edges1[i][1]].push_back(edges1[i][0]);\n        }\n        for(int i = 0; i < edges2.size(); i++) {\n            adj2[edges2[i][0]].push_back(edges2[i][1]);\n            adj2[edges2[i][1]].push_back(edges2[i][0]);\n        }\n        dfs1a(0, -1);\n        dfs1b(0, -1, 0);\n        dfs2a(0, -1);\n        dfs2b(0, -1, 0);\n        \n        int diam1 = 0;\n        int minPath1 = edges1.size();\n        for(int i = 0; i < edges1.size()+1; i++) {\n            diam1 = max(diam1, vs1[i].longestPath + vs1[i].secondLongestPath);\n            minPath1 = min(minPath1, vs1[i].longestPath);\n        }\n        \n        int diam2 = 0;\n        int minPath2 = edges2.size();\n        for(int i = 0; i < edges2.size()+1; i++) {\n            diam2 = max(diam2, vs2[i].longestPath + vs2[i].secondLongestPath);\n            minPath2 = min(minPath2, vs2[i].longestPath);\n        }\n        \n        return max(minPath1+minPath2+1, max(diam1, diam2));\n    }\n};",
    "submit_ts": 1719719055.0
}