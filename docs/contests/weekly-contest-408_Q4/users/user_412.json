{
    "username": "chang-ch",
    "submission": "\nclass UnionFind:\n    def __init__(self):\n        self.parent = None\n        self.left = False\n        self.right = False\n    \n    def find(self):\n        if self.parent != None:\n            self.parent = self.parent.find()\n            return self.parent\n        return self\n    \n    def union(self, other):\n        rootX = self.find()\n        rootY = other.find()\n        \n        if rootX == rootY:\n            rootX.left = self.left or other.left or rootX.left\n            rootX.right = self.right or other.right or rootX.right\n        else:\n            rootX.parent = rootY\n            rootY.left = self.left or other.left or rootY.left\n            rootY.right = self.right or other.right or rootY.right\n\ndef isIntersect(circle1, circle2):\n    x = circle1[0] - circle2[0]\n    y = circle1[1] - circle2[1]\n    return (x * x + y * y) <= (circle1[2] + circle2[2]) ** 2\n\ndef intersectsLeft(circle, X, Y):\n    intersecctLeft = False\n    intersectRight = False\n    # inersects left edge\n    if (circle[1] + circle[2]) > 0 and (circle[1] - circle[2]) < Y and ((circle[0] + circle[2]) >= 0 and (circle[0] - circle[2]) <= 0):\n        intersecctLeft = True\n    \n    # intersects right edge\n    if (circle[1] + circle[2]) > 0 and (circle[1] - circle[2]) < Y and ((circle[0] + circle[2]) >= X and (circle[0] - circle[2]) <= X):\n        intersectRight = True\n    \n    # intersects top edge\n    if (circle[0] + circle[2]) > 0 and (circle[0] - circle[2]) < X and ((circle[1] + circle[2]) >= Y and (circle[1] - circle[2]) <= Y):\n        intersecctLeft = True\n    \n    # intersects bottom edge\n    if (circle[0] + circle[2]) > 0 and (circle[0] - circle[2]) < X and ((circle[1] + circle[2]) >= 0 and (circle[1] - circle[2]) <= 0):\n        intersectRight = True\n    \n    return intersecctLeft, intersectRight\n    \n\nclass Solution:\n    def canReachCorner(self, X: int, Y: int, circles) -> bool:\n        ufArr = []\n        for circle in circles:\n            ufArr.append(UnionFind())\n            l, r = intersectsLeft(circle, X, Y)\n            ufArr[-1].left = l\n            ufArr[-1].right = r\n            \n        for circle_idx1, circle1 in enumerate(circles):\n            for circle_idx2, circle2 in enumerate(circles):\n                if circle1 == circle2:\n                    continue\n                if isIntersect(circle1, circle2):\n                    ufArr[circle_idx1].union(ufArr[circle_idx2])\n        \n        for uf in ufArr:\n            if uf.left and uf.right:\n                return False\n        \n        return True",
    "submit_ts": "1722137052",
    "subm_id": "1335752756"
}