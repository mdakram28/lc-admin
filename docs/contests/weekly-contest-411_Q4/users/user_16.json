{
    "username": "Ma Lin",
    "submission": "struct Ttree{\n    long long st, ed, len, jia, sum;\n}tree[270000];\n\nclass Solution {\npublic:\n    int r[100005], a[100005], n, K;\n    long long ans;\n    vector<int> ev[100005];\n\n    void init_tree(int p, int st, int ed){\n        tree[p].st = st;\n        tree[p].ed = ed;\n        tree[p].len = ed - st + 1;\n        tree[p].jia = tree[p].sum = 0;\n\n        if (st < ed){\n            int mid = (st + ed) / 2;\n            init_tree(p * 2, st, mid);\n            init_tree(p * 2 + 1, mid + 1, ed);\n        }\n    }\n\n    void down(int p){\n        int l = p * 2, r = p * 2 + 1;\n        tree[l].jia += tree[p].jia;\n        tree[r].jia += tree[p].jia;\n        tree[l].sum = (tree[l].sum + 1LL * tree[l].len * tree[p].jia);\n        tree[r].sum = (tree[r].sum + 1LL * tree[r].len * tree[p].jia);\n        tree[p].jia = 0;\n    }\n\n    void ins_tree(int p, int st, int ed, int d){\n        if (st <= tree[p].st && ed >= tree[p].ed){\n            tree[p].jia += d;\n            tree[p].sum = (tree[p].sum + d * tree[p].len);\n            return;\n        }\n\n        down(p);\n        int mid = (tree[p].st + tree[p].ed) / 2;\n        if (st <= mid) ins_tree(p * 2, st, ed, d);\n        if (ed > mid) ins_tree(p * 2 + 1, st, ed, d);\n        tree[p].sum = (tree[p * 2].sum + tree[p * 2 + 1].sum);\n    }\n\n    void ask_tree(int p, int st, int ed){\n        if (st <= tree[p].st && ed >= tree[p].ed){\n            ans += tree[p].sum;\n            return;\n        }\n\n        down(p);\n        int mid = (tree[p].st + tree[p].ed) / 2;\n        if (st <= mid) ask_tree(p * 2, st, ed);\n        if (ed > mid) ask_tree(p * 2 + 1, st, ed);\n        tree[p].sum = (tree[p * 2].sum + tree[p * 2 + 1].sum);\n    }\n    \n    void calc_r(){\n        int i, j = 0, g[2];\n        g[0] = g[1] = 0;\n        for (i = 1; i <= n; ++i){\n            if (i > 1) --g[a[i - 1]];\n            while (j + 1 <= n){\n                ++j;\n                ++g[a[j]];\n                if (g[0] > K && g[1] > K){\n                    --g[a[j]];\n                    --j;\n                    break;\n                }\n            }\n            \n            r[i] = j;\n        }\n    }\n    \n    vector<long long> countKConstraintSubstrings(string s, int KK, vector<vector<int>>& Q) {\n        int i, k;\n        n = s.size();\n        for (i = 1; i <= n; ++i) a[i] = s[i - 1] - '0';\n        K = KK;\n        calc_r();\n        init_tree(1, 1, n);\n        for (i = 1; i <= n; ++i) ev[i].clear();\n        for (i = 0; i < Q.size(); ++i){\n            ++Q[i][0];\n            ++Q[i][1];\n            ev[Q[i][0]].push_back(i);\n        }\n        vector<long long> res(Q.size(), 0);\n        init_tree(1, 1, n);\n        for (i = 1; i <= n; ++i) ins_tree(1, i, r[i], 1);\n        for (i = 1; i <= n; ++i){\n            if (i > 1) ins_tree(1, i - 1, r[i - 1], -1);\n            for (auto j : ev[i]){\n                k = Q[j][1];\n                ans = 0;\n                ask_tree(1, i, k); \n                res[j] = ans;\n            }\n        }\n        \n        return res;\n    }\n};",
    "submit_ts": "1723950635",
    "subm_id": "1359751121"
}