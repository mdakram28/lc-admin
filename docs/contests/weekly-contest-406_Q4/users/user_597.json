{
    "username": "johnwang0726",
    "submission": "class Solution {\n    public long minimumCost(int m, int n, int[] horizontalCut, int[] verticalCut) {\n        Integer[] a = Arrays.stream(horizontalCut).boxed().toArray(Integer[]::new);\n        Integer[] b = Arrays.stream(verticalCut).boxed().toArray(Integer[]::new);\n        \n        Arrays.sort(a, Collections.reverseOrder());\n        Arrays.sort(b, Collections.reverseOrder());\n        \n        long totalCost = 0;\n        int horizontalPieces = 1;\n        int verticalPieces = 1;\n        int i = 0, j = 0;\n\n        while (i < a.length && j < b.length) {\n            if (a[i] >= b[j]) {\n                totalCost += (long) a[i] * verticalPieces;\n                horizontalPieces++;\n                i++;\n            } else {\n                totalCost += (long) b[j] * horizontalPieces;\n                verticalPieces++;\n                j++;\n            }\n        }\n\n        while (i < a.length) {\n            totalCost += (long) a[i] * verticalPieces;\n            horizontalPieces++;\n            i++;\n        }\n\n        while (j < b.length) {\n            totalCost += (long) b[j] * horizontalPieces;\n            verticalPieces++;\n            j++;\n        }\n\n        return totalCost;\n    }\n}",
    "submit_ts": "1720925681",
    "subm_id": "1320262701"
}