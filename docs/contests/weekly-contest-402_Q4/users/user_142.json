{
    "username": "vmadhu99",
    "submission": "#define pb push_back\n#define f first\n#define s second\n\ntemplate <class T>\nstruct segtree {\n    vector<T> elems;\n    vector<T> mn, sum, lzy;\n    vector<pair<int, int>> seg;\n    void init(vector<T>& elems){\n        this -> elems = elems;\n        int n = elems.size();\n        mn.resize(n * 4);\n        sum.resize(n * 4);\n        lzy.resize(n * 4);\n        seg.resize(n * 4);\n        build(1, 0, n - 1);\n    }\n    void refresh(int i){\n        mn[i] = min(mn[i * 2], mn[i * 2 + 1]);\n        sum[i] = sum[i * 2] + sum[i * 2 + 1];\n    }\n    void build(int i, int l, int r){\n        lzy[i] = 0;\n        seg[i] = {l, r};\n        if(l == r){\n            mn[i] = sum[i] = elems[l];\n        } else {\n            build(i * 2, l, (l + r)/2);\n            build(i * 2 + 1, (l + r)/2 + 1, r);\n            refresh(i);\n        }\n    }\n    void chk_lzy(int i){\n        if(lzy[i] != 0){\n            mn[i] += lzy[i];\n            sum[i] += (lzy[i] * (seg[i].s - seg[i].f + 1));\n            if(2 * i < lzy.size()){\n                lzy[2 * i] += lzy[i];\n            }\n            if(2 * i + 1 < lzy.size()){\n                lzy[2 * i + 1] += lzy[i];\n            }\n            lzy[i] = 0;\n        }\n    }\n    void upd_rng(int l, int r, T inc, int i = 1){\n        if(i >= seg.size()){\n        return;\n        }\n        chk_lzy(i);\n        if(l <= seg[i].f && r >= seg[i].s){\n            lzy[i] = inc;\n            chk_lzy(i);\n        } else if (r < seg[i].f || l > seg[i].s){\n            return;\n        } else {\n            upd_rng(l, r, inc, i * 2);\n            upd_rng(l, r, inc, i * 2 + 1);\n            refresh(i);\n        }\n    }\n    T rsq(int l, int r, int i = 1){\n        if(i >= seg.size()){\n            return 0;\n        }\n        chk_lzy(i);\n        if(l <= seg[i].f && r >= seg[i].s){\n            return sum[i];\n        } else if (r < seg[i].f || l > seg[i].s){\n            return 0;\n        } else {\n            return rsq(l, r, 2 * i) + rsq(l, r, 2 * i + 1);\n        }\n    }\n};\n\nclass Solution {\npublic:\n    vector<int> countOfPeaks(vector<int>& nums, vector<vector<int>>& queries) {\n        vector<int> ans;\n        int n = nums.size();\n        segtree<int> st;\n        vector<int> arr(n);\n        for(int i = 1; i < n - 1; i++){\n            if(nums[i] > nums[i - 1] && nums[i] > nums[i + 1]){\n                arr[i] = 1;\n            }\n        }\n        st.init(arr);\n        for(int i = 0; i < queries.size(); i++){\n            int typ = queries[i][0];\n            if(typ == 1){\n                int l, r;\n                l = queries[i][1], r = queries[i][2];\n                int now = st.rsq(l, r);\n                now -= arr[l];\n                if(l != r){\n                    now -= arr[r];\n                }\n                ans.push_back(now);\n            } else {\n                int x, to;\n                x = queries[i][1], to = queries[i][2];\n                nums[x] = to;\n                for(int i = max(1, x - 1); i < min(n - 1, x + 2); i++){\n                    if(nums[i] > nums[i - 1] && nums[i] > nums[i + 1]){\n                        if(arr[i] == 0){\n                            st.upd_rng(i, i, 1);\n                        }\n                        arr[i] = 1;\n                    } else {\n                        if(arr[i] == 1){\n                            st.upd_rng(i, i, -1);\n                        }\n                        arr[i] = 0;\n                    }\n                }\n            }\n        }\n        return ans;\n    }\n};",
    "submit_ts": "1718506529",
    "subm_id": "1289622203"
}