{
    "username": "lihaicoder",
    "submission": "class Solution:\n    def minimumDiameterAfterMerge(self, edges1: List[List[int]], edges2: List[List[int]]) -> int:\n        n1 = len(edges1) + 1\n        n2 = len(edges2) + 1\n        tolist1 = [[] for _ in range(n1)]\n        tolist2 = [[] for _ in range(n2)]\n        for s, t in edges1:\n            tolist1[s].append(t)\n            tolist1[t].append(s)\n        for s, t in edges2:\n            tolist2[s].append(t)\n            tolist2[t].append(s)\n            \n        def getfurthestpoints(tolist, n, q):\n            visited = [False]*n\n            for cur in q:\n                visited[cur] = True\n            newq = q\n            dist = 0\n            while newq:\n                q = newq\n                newq = []\n                for cur in q:\n                    for to in tolist[cur]:\n                        if not visited[to]:\n                            newq.append(to)\n                            visited[to] = True\n                dist += 1\n            return dist, q\n\n        \n        # def getcenterdist(tolist, n):\n        #     # print(\"starting\", \"getcenterdist\")\n        #     if n == 1:\n        #         return 0\n        #     leaves = [i for i in range(n) if len(tolist[i]) == 1]\n        #     dists = [0]*n\n        #     for l in leaves:\n        #         dists[tolist[l][0]] = 1\n        #     q = [(l, tolist[l][0]) for l in leaves]\n        #     dist = 1\n        #     while q:\n        #         # print(q)\n        #         # print(dists)\n        #         dist += 1\n        #         newq = []\n        #         for prev, cur in q:\n        #             # print(\"cur\", cur, \"prev\", prev)\n        #             for to in tolist[cur]:\n        #                 if to == prev:\n        #                     continue\n        #                 # print(\"to\", to)\n        #                 if (cur, to) not in visited:\n        #                     # print(\"actually go\")\n        #                 dists[to] = max(dists[to], dist)\n        #                 newq.append((cur, to))\n        #                     # visited.add((cur, to))\n        #         q = newq\n        #     # print(dists)\n        #     return min(dists)\n            \n        def getdiameter(tolist, n):\n            d1, q1 = getfurthestpoints(tolist, n, [0])\n            d2, q2 = getfurthestpoints(tolist, n, [q1[0]])\n            return d2 - 1\n        \n        # print(\"problem\")\n        # print(getdiameter(tolist1, n1))\n        # print(getdiameter(tolist2, n2))\n        # print(getcenterdist(tolist1, n1))\n        # print(getcenterdist(tolist2, n2))\n        # return max(getdiameter(tolist1, n1), getdiameter(tolist2, n2), getcenterdist(tolist1, n1) +getcenterdist(tolist2, n2) + 1)\n        d1, d2 = getdiameter(tolist1, n1), getdiameter(tolist2, n2)\n        return max(d1, d2, (d1 + 1) // 2 + (d2 + 1) // 2 + 1)\n            ",
    "submit_ts": "1719719129",
    "subm_id": "1304434417"
}