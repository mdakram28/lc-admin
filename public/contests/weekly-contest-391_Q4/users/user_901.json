{
    "username": "2vhs6qJfWa",
    "submission": "class Solution {\n    public int minimumDistance(int[][] points) {\n       int n = points.length;\n        Pair<Integer, Integer>[] nums1 = new Pair[n], nums2 =  new Pair[n];\n        Map<Pair<Integer, Integer>, Integer> map1 = new HashMap<>(), map2 = new HashMap<>();\n        for (int i = 0; i < n; i++) {\n            nums1[i] = new Pair<>(points[i][0] + points[i][1], i);\n            nums2[i] = new Pair<>(points[i][0] - points[i][1], i);\n            map1.put(nums1[i], i);\n            map2.put(nums2[i], i);\n        }\n        Arrays.sort(nums1, (a, b) -> a.getKey() - b.getKey());\n        Arrays.sort(nums2, (a, b) -> a.getKey() - b.getKey());\n        int idx = -1;\n        int n1, n2;\n        //1 1\n        int ans1 = Integer.MAX_VALUE;\n        idx = map1.get(nums1[0]);\n        n1 = nums1[n - 1].getKey() - nums1[1].getKey();\n        if (idx == nums2[n - 1].getValue()) {\n            n2 = nums2[n - 2].getKey() - nums2[0].getKey();\n        } else if (idx == nums2[0].getValue()) {\n            n2 = nums2[n - 1].getKey() - nums2[1].getKey();\n        } else {\n            n2 = nums2[n - 1].getKey() - nums2[0].getKey();\n        }\n        ans1 = Math.max(n1, n2);\n        //1 n\n        int ans2 = Integer.MAX_VALUE;\n        idx = map1.get(nums1[n - 1]);\n        n1 = nums1[n - 2].getKey() - nums1[0].getKey();\n        if (idx == nums2[n - 1].getValue()) {\n            n2 = nums2[n - 2].getKey() - nums2[0].getKey();\n        } else if (idx == nums2[0].getValue()) {\n            n2 = nums2[n - 1].getKey() - nums2[1].getKey();\n        } else {\n            n2 = nums2[n - 1].getKey() - nums2[0].getKey();\n        }\n        ans2 = Math.max(n1, n2);\n        //2 1\n        int ans3 = Integer.MAX_VALUE;\n        idx = map2.get(nums2[0]);\n        n1 = nums2[n - 1].getKey() - nums2[1].getKey();\n        if (idx == nums1[n - 1].getValue()) {\n            n2 = nums1[n - 2].getKey() - nums1[0].getKey();\n        } else if (idx == nums1[0].getValue()) {\n            n2 = nums1[n - 1].getKey() - nums1[1].getKey();\n        } else {\n            n2 = nums1[n - 1].getKey() - nums1[0].getKey();\n        }\n        ans3 = Math.max(n1, n2);\n        //2 n\n        int ans4 = Integer.MAX_VALUE;\n        idx = map2.get(nums2[n - 1]);\n        n1 = nums2[n - 2].getKey() - nums2[0].getKey();\n        if (idx == nums1[n - 1].getValue()) {\n            n2 = nums1[n - 2].getKey() - nums1[0].getKey();\n        } else if (idx == nums1[0].getValue()) {\n            n2 = nums1[n - 1].getKey() - nums1[1].getKey();\n        } else {\n            n2 = nums1[n - 1].getKey() - nums1[0].getKey();\n        }\n        ans4 = Math.max(n1, n2);\n        return Math.min(Math.min(ans1, ans2), Math.min(ans3, ans4));\n    }\n}"
}