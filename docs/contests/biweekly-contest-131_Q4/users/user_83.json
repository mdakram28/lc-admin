{
    "username": "one_percent_better",
    "submission": "\n#include <bits/stdc++.h>\nusing namespace std;\n#define iset indexed_set\n#define ll long long\n#define mod 1000000007\n#define ff first\n#define ss second\n#define mk make_pair\n#define pb push_back\n#define rep(i, start, end) for (int i = start; i < end; i++)\n#define ld long double\n#define fast ios_base::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr);\nusing ii = pair<int, int>;\nconst static int mx = 2e5 + 100;class Solution {\npublic:\n    struct ok\n{\n    ll se, pref, suf, sum;\n};\nstruct segtree\n{\n    ll size;\n    vector<ok> values;\n\n    ok neutral = {0, 0, 0, 0};\n\n    ok merge(ok a, ok b)\n    {\n        return {max({a.se, b.se, a.suf + b.pref}),\n                max(a.pref, a.sum + b.pref),\n                max(b.suf, a.suf + b.sum),\n                a.sum + b.sum};\n    }\n\n    ok single(ll v)\n    {\n        if (v > 0)\n        {\n            return {v, v, v, v};\n        }\n        else\n            return {0, 0, 0, v};\n    }\n\n    void init(ll n)\n    {\n        size = 1;\n        while (size < n)\n            size *= 2;\n        values.resize(2 * size);\n    }\n\n    void build(vector<ll> &a, ll x, ll lx, ll rx)\n    {\n        if (rx - lx == 1)\n        {\n            if (lx < (ll)a.size())\n            {\n                values[x] = single(a[lx]);\n            }\n            return;\n        }\n        ll m = (rx + lx) / 2;\n        build(a, 2 * x + 1, lx, m);\n        build(a, 2 * x + 2, m, rx);\n        values[x] = merge(values[2 * x + 1], values[2 * x + 2]);\n    }\n\n    void build(vector<ll> &a)\n    {\n        build(a, 0, 0, size);\n    }\n\n    void update(ll i, ll v, ll x, ll lx, ll rx)\n    {\n        if (rx - lx == 1)\n        {\n            values[x] = single(v);\n            return;\n        }\n        int m = (rx + lx) / 2;\n        if (i < m)\n        {\n            update(i, v, 2 * x + 1, lx, m);\n        }\n        else\n        {\n            update(i, v, 2 * x + 2, m, rx);\n        }\n        values[x] = merge(values[2 * x + 1], values[2 * x + 2]);\n    }\n\n    void update(ll i, ll v)\n    {\n        update(i, v, 0, 0, size);\n    }\n\n    ok query(ll l, ll r, ll x, ll lx, ll rx)\n    {\n        if (lx >= r || l >= rx)\n            return neutral;\n        if (lx >= l && rx <= r)\n            return values[x];\n        int m = (rx + lx) / 2;\n        ok s1 = query(l, r, 2 * x + 1, lx, m);\n        ok s2 = query(l, r, 2 * x + 2, m, rx);\n        return merge(s1, s2);\n    }\n\n    ok query(ll l, ll r)\n    {\n        return query(l, r, 0, 0, size);\n    }\n};\n// ll bit[60001];\n// void update(ll ind, ll d)\n// {\n//     for (; ind <= cnt; ind += ind & -ind)\n//     {\n//         bit[ind] += d;\n//     }\n// }\n// int qr(int ind)\n// {\n//     int sum = 0;\n//     for (; ind > 0; ind -= ind & -ind)\n//     {\n//         sum += bit[ind];\n//     }\n//     return sum;\n// }\n    vector<bool> getResults(vector<vector<int>>& queries) {\n        int mx1=60000;\n        int pp=(int)queries.size();\n        mx1=min(50010,pp*3+10);\n        segtree seg;\n        seg.init(mx1);\n        vector<ll> arr(mx1);\n        arr[0]=-1e10;\n        rep(i,1,mx1)\n        {\n            arr[i]=1;\n        }\n        \n        seg.build(arr);\n        vector<bool>ans;\n        for(auto e:queries)\n        {\n            if(e[0]==1)\n            {\n                int x=e[1];\n                seg.update(x,-1e10);\n                arr[x]=-1e10;\n            }\n            else\n            {\n                int x=e[1],sze=e[2];\n                int flag=0;\n                if(arr[x]!=(-1e10))\n                {\n                    flag=1;\n                    seg.update(x,-1e10);\n                    arr[x]=-1e10;\n                }\n                ll val=seg.query(0,x+1).se;\n                //cout<<val<<\"\\n\";\n                if(val>=(sze-1))\n                {\n                    ans.pb(true);\n                }\n                else\n                {\n                    ans.pb(false);\n                }\n                if(flag)\n                {\n                    seg.update(x,1);\n                    arr[x]=1;\n                }\n            }\n        }\n        return ans;\n\n    }\n};",
    "submit_ts": "1716649835",
    "subm_id": "1267598999"
}