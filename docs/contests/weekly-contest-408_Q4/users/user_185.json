{
    "username": "nemokwy",
    "submission": "class UnionFind:\n    def __init__(self, n):\n        self.UF = {i:i for i in range(n)}\n        self.ds = defaultdict(set)\n\n    def find(self, x):\n        if self.UF[x] != x:\n            self.UF[x] = self.find(self.UF[x])\n        return self.UF[x]\n\n    def union(self, x,y):\n        self.UF[self.find(x)] = self.find(y)\n    \n    def update(self):\n        for k,v in self.UF.items():\n            self.ds[self.find(k)].add(k)\n    \n    def get_set_len(self):\n        return len(self.ds)\n\n    def get_x_set_len(self,x):\n        return len(self.ds[self.find(x)])\n\n\nclass Solution:\n    def canReachCorner(self, X: int, Y: int, circles: List[List[int]]) -> bool:\n        for x,y,r in circles:\n            if r * r >= x*x + y * y:\n                return False\n        for x,y,r in circles:\n            if r * r >= pow(X-x,2)+pow(Y-y,2):\n                return False\n        \n        \n        n = len(circles)\n        uf = UnionFind(n)\n        for i in range(n):\n            for j in range(i+1, n):\n                d = pow(circles[i][0] - circles[j][0],2) + pow(circles[i][1] - circles[j][1],2)\n                if d <= pow(circles[i][2] + circles[j][2], 2):\n                    uf.union(j, i)\n                    \n        def ov(a,b,c,d):\n            if max(a,c) <= min(b,d):\n                return True\n            else:\n                return False\n        \n        \n        d = {}\n        for i in range(n):\n            f = uf.find(i)\n            if f not in d:\n                d[f] = set()\n            x,y,r = circles[i]\n            if ov(0,0,y-r,y+r) and ov(0,X,x-r,x+r):\n                d[f].add(0)\n            if ov(0,X,x-r,x+r) and ov(Y,Y,y-r,y+r):\n                d[f].add(2)\n            if ov(0,0,x-r,x+r) and ov(0,Y,y-r,y+r):\n                d[f].add(1)\n            if ov(X,X,x-r,x+r) and ov(0,Y,y-r,y+r):\n                d[f].add(3)\n        \n        # print(d)\n        \n        for k,v in d.items():\n            if 0 in v and (1 in v or 2 in v):\n                return False\n            if 1 in v and 3 in v:\n                return False\n            if 2 in v and 3 in v:\n                return False\n        return True",
    "submit_ts": "1722136011",
    "subm_id": "1335720910"
}