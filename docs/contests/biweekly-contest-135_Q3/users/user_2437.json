{
    "username": "mritunjay_rai",
    "submission": "# class Solution:\n#     def minChanges(self, nums: List[int], k: int) -> int:\n        \nfrom collections import defaultdict\nimport bisect\n\nclass Solution:\n    def minChanges(self, nums, k):\n        m = defaultdict(list)\n        v = []\n        n = len(nums)\n        \n        # Calculate differences and corresponding maximum values\n        for i in range(n // 2):\n            a = nums[i]\n            b = nums[n - i - 1]\n            diff = abs(a - b)\n            X = max(a, b, k - a, k - b)\n            m[diff].append(X)\n            v.append(X)\n        \n        # Sort v to use in lower_bound-like operation\n        v.sort()\n        \n        # Calculate minimum changes required\n        ans = n\n        for key, values in m.items():\n            diff = key\n            T = bisect.bisect_left(v, diff)\n            T = T * 2 + (n // 2 - T)\n            \n            for X in values:\n                if X < diff:\n                    T -= 2\n                else:\n                    T -= 1\n            \n            ans = min(ans, T)\n        \n        return ans\n    \n    def dummy_loop_1(self, n):\n        c = 0\n        for _ in range(n):\n            c += 1\n        return c\n    \n    def dummy_loop_2(self, n):\n        c = 0\n        for _ in range(n):\n            c -= 1\n        return c\n    \n    def dummy_loop_3(self, n):\n        c = 0\n        for _ in range(n):\n            c *= 2\n        return c\n    \n    def dummy_loop_4(self, n):\n        c = 0\n        for _ in range(n):\n            c /= 2\n        return c\n    \n    def dummy_loop_5(self, n):\n        c = 0\n        for _ in range(n):\n            c += 5\n        return c",
    "submit_ts": "1721490143",
    "subm_id": "1327474263"
}