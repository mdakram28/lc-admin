{
    "username": "akramshafeek",
    "submission": "class Solution {\npublic:    \n    int minimumDistance(vector<vector<int>>& points) {\n        int n = points.size();\n            \n        vector<pair<int,int>> sum(n);\n        vector<pair<int,int>> diff(n);\n        \n        for(int i = 0 ; i < points.size() ; i++) {\n            sum[i] = {points[i][0] + points[i][1], i};\n            diff[i] = {points[i][0] - points[i][1], i};\n        }\n        \n        sort(sum.begin(), sum.end());\n        sort(diff.begin(), diff.end());\n        \n        // for(auto i: sum)\n        //     cout << i.first << \":\" << i.second << \" \";\n        // cout << endl;\n        // for(auto i: diff)\n        //     cout << i.first << \":\" << i.second << \" \";\n        // cout << endl;\n        // cout << \"MAX dist: \" << max(sum[n - 1].first - sum[0].first, diff[n - 1].first - diff[0].first) << endl;\n        \n        // int ans1 = max(sum[n - 1].first - sum[1].first, diff[n - 1].first - diff[1].first);\n        // int ans2 = max(sum[n - 2].first - sum[0].first, diff[n - 2].first - diff[0].first);\n        int ans = INT_MAX;\n        \n        for(int i = 0 ; i < n ; i++) {\n            \n            int left = 0;\n            int right = n - 1;\n            \n            while(sum[left].second == i) left++;\n            while(sum[right].second == i) right--;\n            \n            int sumVal = sum[right].first - sum[left].first;\n            \n            left = 0;\n            right = n - 1;\n            \n            while(diff[left].second == i) left++;\n            while(diff[right].second == i) right--;\n            \n            int diffVal = diff[right].first - diff[left].first;\n            \n            ans = min(ans, max(sumVal, diffVal));\n        }\n                \n        return ans;\n    }\n};"
}