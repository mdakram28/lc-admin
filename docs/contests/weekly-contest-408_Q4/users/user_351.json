{
    "username": "craggy",
    "submission": "class Solution:\n    def canReachCorner(self, X: int, Y: int, circles: List[List[int]]) -> bool:\n        def point_to_segment_distance(px, py, x1, y1, x2, y2):\n            # Calculate the length of the line segment\n            segment_length = math.hypot(x2 - x1, y2 - y1)\n            \n            if segment_length == 0:\n                # The segment is just a point\n                return math.hypot(px - x1, py - y1)\n            \n            # Project point onto the line (parameterized as t)\n            t = max(0, min(1, ((px - x1) * (x2 - x1) + (py - y1) * (y2 - y1)) / (segment_length ** 2)))\n            projection_x = x1 + t * (x2 - x1)\n            projection_y = y1 + t * (y2 - y1)\n            \n            # Calculate distance from the point to the projection\n            return math.hypot(px - projection_x, py - projection_y)\n\n        def does_circle_cross_segment(cx, cy, r, x1, y1, x2, y2):\n            # Find the shortest distance from the center of the circle to the line segment\n            distance = point_to_segment_distance(cx, cy, x1, y1, x2, y2)\n            \n            # Check if the distance is less than or equal to the radius\n            return distance <= r\n\n        def do_circles_intersect(x1, y1, r1, x2, y2, r2):\n            # Calculate the distance between the centers of the circles\n            distance = math.hypot(x2 - x1, y2 - y1)\n            \n            if distance > r1 + r2:\n                return False\n            elif distance < abs(r1 - r2):\n                return False\n            elif distance == r1 + r2 or distance == abs(r1 - r2):\n                return True\n            else:\n                return True\n        \n        def dfs(n, f, d, v):\n            v[n] = 1\n            if n == d: return True\n            for i in edges[n]:\n                if i in v: continue\n                if i == f: continue\n                if (dfs(i, n, d, v)): return True\n            return False\n\n        edges = []\n        \n        for i in range(4):\n            edges.append([])\n\n        s0 = 0, Y, X, Y\n        s2 = 0, 0, X, 0\n        s1 = X, 0, X, Y\n        s3 = 0, 0, 0, Y\n\n        for i, c in enumerate(circles):\n            edges.append([])\n            if does_circle_cross_segment(*c, *s0):\n                edges[0].append(i+4)\n                edges[i+4].append(0)\n            if does_circle_cross_segment(*c, *s1):\n                edges[1].append(i+4)\n                edges[i+4].append(1)\n            if does_circle_cross_segment(*c, *s2):\n                edges[2].append(i+4)\n                edges[i+4].append(2)\n            if does_circle_cross_segment(*c, *s3):\n                edges[3].append(i+4)\n                edges[i+4].append(3)\n            for j in range(4, i+4):\n                if do_circles_intersect(*c, *circles[j-4]):\n                    edges[i+4].append(j)\n                    edges[j].append(i+4)\n\n        if dfs(0, -1, 1, {}): return False\n        if dfs(0, -1, 2, {}): return False\n        if dfs(3, -1, 2, {}): return False\n        if dfs(3, -1, 1, {}): return False\n\n        return True\n\n            \n        ",
    "submit_ts": "1722137396",
    "subm_id": "1335762592"
}