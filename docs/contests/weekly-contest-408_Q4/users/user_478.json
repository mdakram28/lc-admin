{
    "username": "G00010100",
    "submission": "using ll = long long;\nclass Solution {\npublic:\n    bool circlesTouching(vector<int> &cir1, vector<int> &cir2) {\n        ll xdiff = abs(cir1[0] - cir2[0]);\n        ll ydiff = abs(cir1[1] - cir2[1]);\n        ll rad1 = cir1[2], rad2 = cir2[2];\n        double dist = sqrtl(xdiff * xdiff + ydiff * ydiff);\n        return dist <= rad1 + rad2;\n    }\n    int touchBound(int X, int Y, vector<int> &cir) {\n        ll xdiff = cir[0], ydiff = cir[1], rad = cir[2];\n        bool topleft = xdiff - rad <= 0 || ydiff + rad >= Y;\n        bool bottomRight = xdiff + rad >= X || ydiff - rad <= 0;\n        return topleft | (bottomRight<<1);\n    }\n    bool canReachCorner(int X, int Y, vector<vector<int>>& circles) {\n        int n = circles.size();\n        vector<vector<int>> touching(n);\n        for (int i = 0; i < n; i++) {\n            for (int j = i+1; j < n; j++) {\n                if (circlesTouching(circles[i], circles[j])) {\n                    touching[i].push_back(j);\n                    touching[j].push_back(i);\n                }\n            }\n        }\n        vector<bool> visited(n);\n        for (int i = 0; i < n; i++) {\n            if (!(touchBound(X, Y, circles[i]) & 1))\n                continue;\n            if (visited[i])\n                continue;\n            visited[i] = true;\n            queue<int> bfs;\n            bfs.push(i);\n            while (!bfs.empty()) {\n                int j = bfs.front(); bfs.pop();\n                if (touchBound(X, Y, circles[j]) & 2)\n                    return false;\n                for (int k : touching[j]) {\n                    if (visited[k])\n                        continue;\n                    visited[k] = true;\n                    bfs.push(k);\n                }\n            }\n        }\n        return true;\n    }\n};",
    "submit_ts": "1722137267",
    "subm_id": "1335758881"
}