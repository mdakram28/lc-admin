{
    "username": "Ja1_S1ngh",
    "submission": "#include <vector>\n#include <unordered_map>\nusing namespace std;\n\nclass Solution {\npublic:\n\n                //--------------------------------------------------------------//\n                typedef vector<int> vi;\n                typedef vector<vector<int>> vvi;\n                typedef vector<long long> vl;\n                typedef vector<vector<long long>> vvl;\n                typedef vector<vector<long>> vvvl;\n                typedef vector<bool> vb;\n                typedef vector<string> vs;\n                typedef vector<char> vc;\n                typedef unordered_map<int,int> umii;\n                typedef priority_queue<int> maxh;\n                typedef priority_queue<int,vi,greater<int>> minh;\n                typedef vector<vector<bool>> vvb;\n                typedef map<int, int> mii;\n                typedef map<long long, long long> mll;\n                typedef pair<int, int> pii;\n                typedef pair<long long, long long> pll;\n                typedef unsigned long long ull;\n                typedef long double ld;\n                \n                #define ll long long\n                #define amax(a, b)          a = max(a, b)\n                #define amin(a, b)          a = min(a, b)\n                #define mp(a,b)             make_pair(a,b)\n                #define pb(n)               push_back(n)\n                #define ff                  first\n                #define ss                  second\n                #define bn                  begin()\n                #define prt(v)              for(auto i:v) cout << i << \" \"; cout << \"\\n\";\n                #define en                  end()\n                #define nl                  (\"\\n\")\n                #define sp(n)               cout<<setprecision(n)<<fixed;\n                #define loop(i, a, b)       for (int i = a; i < b; i++)\n                #define loopr(i, a, b)      for (int i = a; i <= b; i++)\n                #define all(a)              a.begin(), a.end()\n                #define sz(x)               ((int)(x).size())\n                #define len(s) int32_t((s).size())\n                \n                // ----------------------------------------------------------------//\n                const long long MOD_VAL = 1000000007;\n                const int MAX_N = 500001;\n                const double PI = 3.14159265358979;\n                const int MAX_INVERSION_COUNT = 400;\n                const double INF=1e15;\n                \n                /*---------------------------------------------------------------------------*/ \n                bool revsort(ll a, ll b){return (a > b);}\n                void reverseStr(string&str){int n=str.length();for(int i=0;i<n/2;i++){swap(str[i],str[n-i-1]);}}\n                bool ispal(string x){int n=x.size();for(int i=0;i<n/2;i++){if(x[i]!=x[n-i-1])return 0;}return 1;}\n                void printall(vi v){for(auto ele:v)cout<<ele<<\" \";}\n                int modadd(int a, int b,int m){a%=m;b%=m;return (a+b)%m;}\n                int modmul(int a, int b,int m){a%=m;b%=m;return (a*b)%m;}\n                int modsub(int a, int b,int m){a%=m;b%=m;return (a-b)%m;}\n                int gcd(int a, int b){if(b==0)return a;return gcd(b,a%b);}\n                int expo(int a, int n,int m){int res=1;while(n){if(n&1){res=modmul(res,a,m);--n;}else{a=modmul(a,a,m);n>>=1;}}return res;}\n                int expo(int a, int n){int res=1;while(n){if(n&1){res=res*a;--n;}else{a=a*a;n>>=1;}}return res;}\n                /*---------------------------------------------------------------------------*/ \n            \n            \n\n    int numberOfPermutations(int elementCount, vvi& inversionConstraints) {\n        int ans = 0;\n        ll tempAns = 0;\n        umii constraintMap;\n        loop(i,0,inversionConstraints.size()){\n            vi& constraint = inversionConstraints[i];\n            constraintMap[constraint[0] + 1] = constraint[1];\n        }\n\n        vector<vector<ll>> dpArray(elementCount + 1, vector<ll>(MAX_INVERSION_COUNT + 1, 0));\n        dpArray[0][0] = 1;\n\n        loopr(currentLength,1,elementCount) {\n            loopr(currentInversions,0,MAX_INVERSION_COUNT) {\n                loop(newPosition,0,currentLength) {\n                    int previousInversionCount = currentInversions - newPosition;\n                    if (previousInversionCount >= 0) {\n                        dpArray[currentLength][currentInversions] = (dpArray[currentLength][currentInversions] + dpArray[currentLength - 1][previousInversionCount]) % MOD_VAL;\n                    }\n                }\n            }\n\n            if (constraintMap.find(currentLength) != constraintMap.end()) {\n                int requiredInversionCount = constraintMap[currentLength];\n                 loopr(inversionCount,0,MAX_INVERSION_COUNT){\n                    if (inversionCount != requiredInversionCount) {\n                        dpArray[currentLength][inversionCount] = 0;\n                    }\n                }\n            }\n        }\n\n        loopr(i,0,MAX_INVERSION_COUNT) {\n            tempAns = (tempAns + dpArray[elementCount][i]) % MOD_VAL;\n        }\n       \n        ans = tempAns;\n        return ans;\n        \n        \n    }\n};\n",
    "submit_ts": 1719071206.0
}