{
    "username": "akanchha_11",
    "submission": "class Solution {\npublic:\n    long long minimumCost(int m, int n, vector<int>& horizontalCut, vector<int>& verticalCut) {\n        // Combine all cuts into a single list of pairs (cost, type)\n        // type = 0 for horizontal, type = 1 for vertical\n        vector<pair<int, int>> cuts;\n        \n        for (int cost : horizontalCut) {\n            cuts.push_back({cost, 0});\n        }\n        for (int cost : verticalCut) {\n            cuts.push_back({cost, 1});\n        }\n        \n        // Sort cuts in descending order based on cost\n        sort(cuts.rbegin(), cuts.rend());\n        \n        int verticalSegments = 1;\n        int horizontalSegments = 1;\n        long long totalCost = 0;\n        \n        for (const auto& cut : cuts) {\n            int cost = cut.first;\n            int type = cut.second;\n            \n            if (type == 0) { // Horizontal cut\n                totalCost += cost * verticalSegments;\n                horizontalSegments++;\n            } else { // Vertical cut\n                totalCost += cost * horizontalSegments;\n                verticalSegments++;\n            }\n        }\n        \n        return totalCost;\n        \n    }\n};",
    "submit_ts": "1720926429",
    "subm_id": "1320286005"
}