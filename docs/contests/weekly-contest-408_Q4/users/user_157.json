{
    "username": "didwhddks",
    "submission": "using i64 = long long;\n\nclass Solution {\npublic:\n    bool canReachCorner(int X, int Y, vector<vector<int>>& c) {\n        const int n = c.size();\n        vector grid(n + 10, vector<int>());\n        for (int i = 0; i < n; ++i) {\n            if (c[i][0] <= c[i][2]) {\n                grid[n].push_back(i);\n                grid[i].push_back(n);\n            }\n            if (X - c[i][0] <= c[i][2]) {\n                grid[n + 2].push_back(i);\n                grid[i].push_back(n + 2);\n            }\n            if (c[i][1] <= c[i][2]) {\n                grid[n + 1].push_back(i);\n                grid[i].push_back(n + 1);\n            }\n            if (Y - c[i][1] <= c[i][2]) {\n                grid[n + 3].push_back(i);\n                grid[i].push_back(n + 3);\n            }\n            for (int j = i + 1; j < n; ++j) {\n                i64 dist = 1LL * (c[i][0] - c[j][0]) * (c[i][0] - c[j][0]) + 1LL * (c[i][1] - c[j][1]) * (c[i][1] - c[j][1]);\n                i64 x = 1LL * (c[i][2] + c[j][2]) * (c[i][2] + c[j][2]);\n                if (x >= dist) {\n                    grid[i].push_back(j);\n                    grid[j].push_back(i);\n                }\n            }\n        }\n        \n        auto bfs = [&](int a, int b, int c) -> bool {\n            queue<int> q;\n            q.push(a);\n            \n            vector<int> vis(n + 10);\n            vis[a] = 1;\n\n            while (q.size()) {\n                auto x = q.front();\n                q.pop();\n                for (int y : grid[x]) {\n                    if (vis[y]) {\n                        continue;\n                    }\n                    q.push(y);\n                    vis[y] = 1;\n                }\n            }\n            \n            return vis[b] || vis[c];\n        };\n        \n        bool ans = bfs(n, n + 1, n + 2) == false && bfs(n + 3, n + 2, n + 1) == false;\n        return ans;\n    }\n};",
    "submit_ts": "1722139160",
    "subm_id": "1335809544"
}