{
    "username": "martin0327",
    "submission": "\n#include <algorithm>\n#include <cassert>\n#include <vector>\n\n\n#ifdef _MSC_VER\n#include <intrin.h>\n#endif\n\nnamespace atcoder {\n\nnamespace internal {\n\nint ceil_pow2(int n) {\n    int x = 0;\n    while ((1U << x) < (unsigned int)(n)) x++;\n    return x;\n}\n\nint bsf(unsigned int n) {\n#ifdef _MSC_VER\n    unsigned long index;\n    _BitScanForward(&index, n);\n    return index;\n#else\n    return __builtin_ctz(n);\n#endif\n}\n\n}  // namespace internal\n\n}  // namespace atcoder\n\n\nnamespace atcoder {\n\ntemplate <class S, S (*op)(S, S), S (*e)()> struct segtree {\n  public:\n    segtree() : segtree(0) {}\n    segtree(int n) : segtree(std::vector<S>(n, e())) {}\n    segtree(const std::vector<S>& v) : _n(int(v.size())) {\n        log = internal::ceil_pow2(_n);\n        size = 1 << log;\n        d = std::vector<S>(2 * size, e());\n        for (int i = 0; i < _n; i++) d[size + i] = v[i];\n        for (int i = size - 1; i >= 1; i--) {\n            update(i);\n        }\n    }\n\n    void set(int p, S x) {\n        assert(0 <= p && p < _n);\n        p += size;\n        d[p] = x;\n        for (int i = 1; i <= log; i++) update(p >> i);\n    }\n\n    S get(int p) {\n        assert(0 <= p && p < _n);\n        return d[p + size];\n    }\n\n    S prod(int l, int r) {\n        assert(0 <= l && l <= r && r <= _n);\n        S sml = e(), smr = e();\n        l += size;\n        r += size;\n\n        while (l < r) {\n            if (l & 1) sml = op(sml, d[l++]);\n            if (r & 1) smr = op(d[--r], smr);\n            l >>= 1;\n            r >>= 1;\n        }\n        return op(sml, smr);\n    }\n\n    S all_prod() { return d[1]; }\n\n    template <bool (*f)(S)> int max_right(int l) {\n        return max_right(l, [](S x) { return f(x); });\n    }\n    template <class F> int max_right(int l, F f) {\n        assert(0 <= l && l <= _n);\n        assert(f(e()));\n        if (l == _n) return _n;\n        l += size;\n        S sm = e();\n        do {\n            while (l % 2 == 0) l >>= 1;\n            if (!f(op(sm, d[l]))) {\n                while (l < size) {\n                    l = (2 * l);\n                    if (f(op(sm, d[l]))) {\n                        sm = op(sm, d[l]);\n                        l++;\n                    }\n                }\n                return l - size;\n            }\n            sm = op(sm, d[l]);\n            l++;\n        } while ((l & -l) != l);\n        return _n;\n    }\n\n    template <bool (*f)(S)> int min_left(int r) {\n        return min_left(r, [](S x) { return f(x); });\n    }\n    template <class F> int min_left(int r, F f) {\n        assert(0 <= r && r <= _n);\n        assert(f(e()));\n        if (r == 0) return 0;\n        r += size;\n        S sm = e();\n        do {\n            r--;\n            while (r > 1 && (r % 2)) r >>= 1;\n            if (!f(op(d[r], sm))) {\n                while (r < size) {\n                    r = (2 * r + 1);\n                    if (f(op(d[r], sm))) {\n                        sm = op(d[r], sm);\n                        r--;\n                    }\n                }\n                return r + 1 - size;\n            }\n            sm = op(d[r], sm);\n        } while ((r & -r) != r);\n        return 0;\n    }\n\n  private:\n    int _n, size, log;\n    std::vector<S> d;\n\n    void update(int k) { d[k] = op(d[2 * k], d[2 * k + 1]); }\n};\n\n}  // namespace atcoder\n\nusing namespace atcoder;\n\n\ntemplate<typename T>\nvoid asort(vector<T> &a) {sort(a.begin(), a.end());}\n\ntemplate<typename T>\nvector<T> get_unique(vector<T> a) {\n    asort(a);\n    a.erase(unique(a.begin(), a.end()), a.end());\n    return a;\n}\n\nusing ll = long long;\nusing vi = vector<ll>;\nconst ll inf = 2e18;\nusing S = ll;\nS op(S x, S y) { return max(x,y); }\nS e() { return -inf; }\n\nclass Solution {\npublic:\n    int maximumLength(vector<int>& nums, int k) {\n        vi a(nums.begin(), nums.end());\n        vi comp = get_unique(a);\n        map<ll,ll> mp;\n        ll sz = comp.size();\n        for (int i=0; i<sz; i++) {\n            mp[comp[i]] = i;\n        }\n        for (auto &x : a) x = mp[x];\n\n        using segt = segtree<S,op,e>;\n        vector<segt> dp(k+1);\n        for (int i=0; i<=k; i++) {\n            dp[i] = segt(sz);\n        }\n\n        for (auto x : a) {\n            if (dp[0].get(x) == -inf) dp[0].set(x,1);\n            else {\n                for (int i=0; i<=k; i++) {\n                    ll v = dp[i].get(x);\n                    if (v != inf) dp[i].set(x,v+1);\n                }\n            }\n            for (int i=0; i<k; i++) {\n                ll v = dp[i].prod(0,x);\n                v = max(v, dp[i].prod(x+1,sz));\n                if (dp[i+1].get(x) <= v) dp[i+1].set(x,v+1);\n            }\n        }\n        ll ans = 0;\n        for (int i=0; i<=k; i++) {\n            ans = max(ans, dp[i].all_prod());\n        }\n        return ans;\n\n\n    }\n};",
    "submit_ts": 1717859017.0
}