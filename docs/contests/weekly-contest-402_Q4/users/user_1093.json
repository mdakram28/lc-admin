{
    "username": "fervent-satoshisir",
    "submission": "const int N = 1e5 + 5;\nstruct Tree {\n    int l, r;\n    int len;\n    int cnt;\n}tree[N << 3];\n\nint comb(vector<int>& a, Tree& l, Tree& r) {\n    int ans = 0;\n    if (l.len >= 2) {\n        if (a[l.r] > a[l.r - 1] && a[l.r] > a[r.l]) ans++;\n    }\n    if (r.len >= 2) {\n        if (a[r.l] > a[r.l + 1] && a[r.l] > a[l.r]) ans++;\n    }\n    return ans;\n}\n\nvoid build(vector<int>& a, int pos, int l, int r) {\n    if (l == r) {\n        tree[pos] = { l,l,1,0 };\n    }\n    else {\n        int mid = (l + r) >> 1;\n        build(a, 2 * pos, l, mid);\n        build(a, 2 * pos + 1, mid + 1, r);\n        tree[pos] = { l,r,r - l + 1,0 };\n        tree[pos].cnt = tree[pos * 2].cnt + tree[pos * 2 + 1].cnt;\n        tree[pos].cnt += comb(a,tree[pos * 2], tree[pos * 2 + 1]);\n    }\n}\nint query(vector<int>& a, int l, int r, int pos) {\n    Tree& t = tree[pos];\n    if (l >= t.r || r <= t.l) return 0;\n    else if (l <= t.l && r >= t.r) return t.cnt;\n    int ans = query(a, l, r, 2 * pos) + query(a, l, r, 2 * pos + 1);\n    int mid = (t.r + t.l) >> 1;//mid,mid+1\n    if (mid<r && mid>l && (mid > t.l)) ans += (a[mid] > a[mid - 1] && a[mid] > a[mid + 1]);\n    if (mid + 1 < r && mid + 1 > l && (mid + 1 < t.r)) ans += (a[mid + 1] > a[mid] && a[mid + 1] > a[mid + 2]);\n    return ans;\n}\nvoid update(vector<int>& a, int x, int k, int pos) {\n    Tree& t = tree[pos];\n    if (t.l > x || t.r < x) return;\n    else if (t.l == x && t.r == x) {\n        a[x] = k;\n    }\n    else {\n        update(a, x, k, 2 * pos);\n        update(a, x, k, 2 * pos + 1);\n        tree[pos].cnt = tree[pos * 2].cnt + tree[pos * 2 + 1].cnt;\n        tree[pos].cnt += comb(a,tree[pos * 2], tree[pos * 2 + 1]);\n    }\n}\nclass Solution {\npublic:\n    vector<int> countOfPeaks(vector<int>& nums, vector<vector<int>>& queries) {\n        int n = nums.size();\n        build(nums, 1, 0, n - 1);\n        vector<int> ans;\n        for (int i = 0; i < queries.size(); i++) {\n            if (queries[i][0] == 1) {\n                int l = queries[i][1], r = queries[i][2];\n                ans.push_back(query(nums, l, r,1));\n            }\n            else {\n                int x = queries[i][1], k = queries[i][2];\n                update(nums, x, k, 1);\n            }\n        }\n        return ans;\n    }\n};",
    "submit_ts": 1718509226.0
}