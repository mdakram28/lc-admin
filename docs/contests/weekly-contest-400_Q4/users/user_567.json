{
    "username": "faangPro",
    "submission": "#define INF INT32_MAX\n\nclass Solution {\npublic:\n    class SegmentTree {\n    public:\n        vector<int> tree;\n        int size;\n\n        // Constructor\n        SegmentTree(vector<int>& arr)\n        {\n            size = arr.size();\n            tree.resize(4 * size);\n            build(arr, 0, 0, size - 1);\n        }\n\n        // Function to build the Segment Tree\n        void build(vector<int>& arr, int nodeIndex, int segmentStart, int segmentEnd)\n        {\n            if (segmentStart == segmentEnd) {\n                tree[nodeIndex] = arr[segmentStart];\n            }\n            else {\n                int mid = (segmentStart + segmentEnd) / 2;\n                build(arr, 2 * nodeIndex + 1, segmentStart, mid);\n                build(arr, 2 * nodeIndex + 2, mid + 1, segmentEnd);\n\n                // Bitwise AND of the children nodes\n                tree[nodeIndex] = tree[2 * nodeIndex + 1] & tree[2 * nodeIndex + 2];\n            }\n        }\n\n        // Overloading query function to be used recursively\n        int query(int left, int right)\n        {\n            return query(0, 0, size - 1, left, right);\n        }\n\n        // Query function to get bitwise AND of the range\n        int query(int nodeIndex, int segmentStart, int segmentEnd, int left, int right)\n        {\n            if (right < segmentStart || segmentEnd < left) {\n                return INF;\n            }\n            if (left <= segmentStart && segmentEnd <= right) {\n                return tree[nodeIndex];\n            }\n            int mid = (segmentStart + segmentEnd) / 2;\n            int leftResult = query(2 * nodeIndex + 1, segmentStart, mid, left, right);\n            int rightResult = query(2 * nodeIndex + 2, mid + 1, segmentEnd, left, right);\n\n            // Bitwise AND operation result\n            return leftResult & rightResult;\n        }\n    };\n\n    int minimumDifference(vector<int>& arr, int k)\n    {\n        int arraySize = arr.size();\n        SegmentTree segmentTree(arr);\n        int minDifference = INF;\n        for (int i = 0; i < arraySize; i++) {\n            int left = i - 1, right = arraySize - 1, mid;\n\n            // Binary search implementation\n            while (right - left > 1) {\n                mid = (left + right) / 2;\n                if (segmentTree.query(i, mid) >= k)\n                    left = mid;\n                else\n                    right = mid;\n            }\n            if (left != i - 1)\n                minDifference = min(minDifference, abs(segmentTree.query(i, left) - k));\n            minDifference = min(minDifference, abs(k - segmentTree.query(i, right)));\n        }\n        return minDifference;\n    }\n};\n",
    "submit_ts": "1717299458",
    "subm_id": "1274813422"
}