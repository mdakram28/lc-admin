{
    "username": "fizhim",
    "submission": "impl Solution {\n    pub fn minimum_cost(target: String, words: Vec<String>, costs: Vec<i32>) -> i32 {\n        let mut t = Trie::new();\n        \n        for i in 0..words.len() {\n            t.ins(words[i].as_bytes(), costs[i]);\n        }\n        \n        let s = target.as_bytes();\n        let mut dp = vec![None; s.len() + 1];\n        let mut ans = f(&s, &t, &mut dp);\n        \n        if ans >= i32::MAX / 2 {\n            ans = -1;\n        }\n        \n        ans\n    }\n}\n\nfn f(s: &[u8], t: &Trie, dp: &mut [Option<i32>]) -> i32 {\n    if s.is_empty() {\n        return 0;\n    }\n    \n    if let Some(ans) = dp[s.len()] {\n        return ans;\n    }\n    \n    let mut ans = i32::MAX / 2;\n    let mut t_cur = t;\n    \n    for i in 0..s.len() {\n        let j = (s[i] - b'a') as usize;\n        \n        if let Some(t_next) = &t_cur.next[j] {\n            t_cur = t_next;\n            if let Some(c) = t_cur.cost {\n                ans = ans.min(f(&s[i + 1..], t, dp) + c);\n            }\n        } else {\n            break;\n        }\n    }\n    \n    dp[s.len()] = Some(ans);\n    ans\n}\n\n#[derive(Clone)]\nstruct Trie {\n    cost: Option<i32>,\n    next: Vec<Option<Trie>>,\n}\n\nimpl Trie {\n    fn new() -> Self {\n        Self {\n            cost: None,\n            next: vec![None; 26]\n        }\n    }\n\n    fn ins(&mut self, s: &[u8], cost: i32) {\n        if s.is_empty() {\n            if let Some(c) = &mut self.cost {\n                *c = cost.min(*c);\n            } else {\n                self.cost = Some(cost);\n            }\n            return;\n        }\n\n        let i = (s[0] - b'a') as usize;\n\n        if let Some(t) = &mut self.next[i] {\n            t.ins(&s[1..], cost);\n        } else {\n            let mut t = Trie::new();\n            t.ins(&s[1..], cost);\n            self.next[i] = Some(t);\n        }\n    }\n}\n",
    "submit_ts": "1720322891",
    "subm_id": "1312361817"
}