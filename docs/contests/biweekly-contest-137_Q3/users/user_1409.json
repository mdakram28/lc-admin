{
    "username": "gJBR8YhiFj",
    "submission": "#include <vector>\n#include <algorithm>\n#include <numeric>\n#include <climits>  // For LLONG_MIN\nusing namespace std;\n\nclass Solution {\npublic:\n    long long maximumValueSum(vector<vector<int>>& board) {\n        int m = board.size();\n        int n = board[0].size();\n        long long maxSum = LLONG_MIN;\n\n        // Vector to store the top 3 maximum values in each row and their column indices\n        vector<vector<pair<int, int>>> rowMax(m);\n        for (int i = 0; i < m; ++i) {\n            vector<pair<int, int>> candidates;\n            for (int j = 0; j < n; ++j) {\n                candidates.push_back({board[i][j], j});\n            }\n            sort(candidates.rbegin(), candidates.rend()); // Sort in descending order\n            rowMax[i] = vector<pair<int, int>>(candidates.begin(), candidates.begin() + min(5, n));\n        }\n\n        // Iterate over all combinations of 3 rows\n        for (int r1 = 0; r1 < m - 2; ++r1) {\n            for (int r2 = r1 + 1; r2 < m - 1; ++r2) {\n                for (int r3 = r2 + 1; r3 < m; ++r3) {\n                    // Check combinations of selected top candidates from each row\n                    for (auto &p1 : rowMax[r1]) {\n                        for (auto &p2 : rowMax[r2]) {\n                            for (auto &p3 : rowMax[r3]) {\n                                // Ensure the columns are distinct\n                                if (p1.second != p2.second && p2.second != p3.second && p1.second != p3.second) {\n                                    long long currentSum = static_cast<long long>(p1.first) + p2.first + p3.first;\n                                    maxSum = max(maxSum, currentSum);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        \n        return maxSum;\n    }\n};\n",
    "submit_ts": "1723908700",
    "subm_id": "1359163593"
}