{
    "username": "\u6731\u5f18\u519b",
    "submission": "\nclass Solution {\npublic:\n    long long maximumValueSum(vector<vector<int>>& board) {\n        const int m = board.size();\n        const int n = board.front().size();\n        vector<array<pair<int, int>, 3>> maxPerRow(m);\n        {\n            for (int r = 0; r < m; r++) {\n                const auto &row = board[r];\n                vector<pair<int, int>> sortedRow; sortedRow.reserve(n);\n                for (int c = 0; c < n; c++) {\n                    sortedRow.push_back(make_pair(row[c], c));\n                }\n                sort(sortedRow.begin(), sortedRow.end());\n                for (int i = 0; i < 3; i++) {\n                    maxPerRow[r][i] = sortedRow[n - 1 - i];\n                }\n            }\n        }\n        long long res = -1000000000000LL;\n        map<long long, unordered_set<int>> vecMap;//\u6700\u5927\u503c\u51fa\u73b0\u5728\u54ea\u4e9b\u5217\n        vector<long long> maxValueVec(n, -1000000000000LL);//\u6bcf\u4e00\u5217\u7684\u6700\u5927\u503c\u662f\u4ec0\u4e48\n        {\n            for (int c = 0; c < n; c++) {\n                vecMap[-1000000000000LL].insert(c);\n            }\n        }\n        for (int r2 = 1; r2 < m; r2++) {\n            int addedRow = r2 - 1;\n            {\n                for (int c = 0; c < n; c++) {\n                    auto oldMaxValue = maxValueVec[c];\n                    auto newMaxValue = max<long long>(oldMaxValue, board[addedRow][c]);\n                    if (oldMaxValue == newMaxValue) {\n                        continue;\n                    }\n                    vecMap[oldMaxValue].erase(c);\n                    vecMap[newMaxValue].insert(c);\n                    maxValueVec[c] = newMaxValue;\n                }\n            }\n            for (int r1 = r2 + 1; r1 < m; r1++) {\n                for (int p1 = 0; p1 < 3; p1++) {\n                    const int c1 = maxPerRow[r1][p1].second;\n                    const long long value1 = maxPerRow[r1][p1].first;\n                    for (int p2 = 0; p2 < 3; p2++) {\n                        const int c2 = maxPerRow[r2][p2].second;\n                        const long long value2 = maxPerRow[r2][p2].first;\n                        if (c1 == c2) {\n                            continue;\n                        }\n                        long long cur = value1 + value2 + getMaxValueExcept(vecMap, c1, c2);\n                        res = max(res, cur);\n                    }\n                }\n            }\n        }\n        return res;\n    }\n\nprivate:\n    long long getMaxValueExcept(const map<long long, unordered_set<int>> &vecMap, int c1, int c2) {\n        for (auto iter = vecMap.rbegin(); iter != vecMap.rend(); iter++) {\n            const auto &s = iter->second;\n            if (s.size() >= 3) {\n                return iter->first;\n            }\n            for (auto c : s) {\n                if (c != c1 && c != c2) {\n                    return iter->first;\n                }\n            }\n        }\n        return -1;\n    }\n};\n",
    "submit_ts": "1723909005",
    "subm_id": "556333993"
}