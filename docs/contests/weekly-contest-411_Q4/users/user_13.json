{
    "username": "Hongrock",
    "submission": "using ll = long long;\nconst int N = 1e5 + 10;\nint n;\nll S[N];\nint lowbit(int x){\n    return x & (-x);\n}\nvoid add(int x, int v){\n    for(; x<=n; x+=lowbit(x))   S[x] += v;\n}\nll sum(int x){\n    ll ret = 0;\n    for(; x>0; x-=lowbit(x))    ret += S[x];\n    return ret;\n}\nll sum(int L, int R){\n    return sum(R) - sum(L - 1);\n}\nclass Solution {\npublic:\n    vector<long long> countKConstraintSubstrings(string s, int k, vector<vector<int>>& queries) {\n        n = s.length();\n        for(int i=1; i<=n; ++i) S[i] = 0;\n        vector<int> cnt(2, 0);\n        map<int, int> st;\n        for(int i=1, j=1; i<=n; ++i){\n            ++cnt[s[i-1] - '0'];\n            while(cnt[0] > k && cnt[1] > k){\n                --cnt[s[j-1] - '0'];\n                ++j;\n            }\n            add(i, i - j + 1);\n            if(!st.count(j)){\n                st[j] = i;\n            }\n        }\n        vector<ll> ret;\n        for(auto &vec : queries){\n            int l = vec[0] + 1, r = vec[1] + 1;\n            auto it = st.lower_bound(l);\n            int p = r + 1;\n            if(it != st.end()){\n                p = min(r + 1, it->second);\n            }\n            ll ans = 1ll * (l + p - 1) * (p - l) / 2 - 1ll * (l - 1) * (p - l);\n            if(p <= r){\n                ans += sum(p, r);\n            }\n            ret.push_back(ans);\n        }\n        return ret;\n    }\n};",
    "submit_ts": "1723950601",
    "subm_id": "556400090"
}