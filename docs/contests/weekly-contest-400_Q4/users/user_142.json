{
    "username": "Kyouma007",
    "submission": "class Solution {\n    \n    class SegmentTree{\n        int n; \n        vector<int> tree; \n    public: \n        SegmentTree(int n, vector<int>& arr){\n            tree.resize(4*n);\n            this -> n = n; \n\n            build(0, n - 1, 0, arr);\n        }\n\n        void build(int low, int high, int ind, vector<int>&arr){\n            if (low == high){\n                tree[ind] = arr[low];\n                return; \n            }\n            int mid = (low + high) >> 1; \n            build(low, mid, ind * 2 + 1, arr);\n            build(mid + 1, high, ind * 2 + 2, arr);\n            tree[ind] = (tree[ind * 2 + 1] & tree[ind * 2 + 2]); \n        }\n\n        int query(int l, int r){\n            return query(0, n - 1, 0, l, r);\n        }\n\n        void update(int i, int val){\n            update(0, n - 1, 0, i, val);\n        }\n\n    private: \n        int query(int low, int high, int ind, int l, int r){\n            // no over lap\n            // [l r] low high , low high l r\n            if (low > r || l > high){\n                return -1; \n            }\n            // total overlap\n            // l low high r\n            if (low >= l && high <= r){\n                return tree[ind];\n            }\n            // partial overlap\n            // [ l ...low h  high]\n            int mid = (low + high) >> 1; \n            int left = query(low, mid, ind * 2 + 1, l, r);\n            int right = query(mid + 1, high, ind * 2 + 2, l, r);\n            return (left & right);\n        }\n\n        void update(int low, int high, int ind, int i, int val){\n            if (low == high){\n                tree[ind] = val ;\n                return; \n            }\n\n            int mid = (low + high) >> 1; \n            if (i <= mid){\n                update(low, mid, ind * 2 + 1, i, val);\n            }else{\n                update(mid + 1, high, ind * 2 + 2, i, val);\n            }\n            tree[ind] = (tree[ind * 2 + 1] & tree[ind * 2 + 2]);\n        }\n    };\n    \npublic:\n    int minimumDifference(vector<int>& nums, int k) {\n            \n        SegmentTree st(nums.size(), nums);\n        \n        int i = 0; \n        int mindiff = INT_MAX; \n        for (int j = 0; j < nums.size(); j++){\n            while (i < j && st.query(i, j) < k){\n                mindiff = min(abs(st.query(i, j) - k), mindiff);\n                i++; \n            }\n            mindiff = min(abs(st.query(i, j) - k), mindiff);\n        }\n        \n        return mindiff; \n    }\n};",
    "submit_ts": 1717297794.0
}