{
    "username": "5_Apm",
    "submission": "import heapq\nclass Solution:\n    def minimumDistance(self, points: List[List[int]]) -> int:\n        vi1, vi2, vi3, vi4 = self.get_vertex(points)\n        # print(points[vi1], points[vi2], points[vi3], points[vi4])\n        dis = self.get_max_dis(points, vi1, vi2, vi3, vi4)\n        for vi in (vi1, vi2, vi3, vi4):\n            p = points.pop(vi)\n            _vi1, _vi2, _vi3, _vi4 = self.get_vertex(points)\n            dis = min(dis, self.get_max_dis(points, _vi1, _vi2, _vi3, _vi4))\n            # print(points)\n            # print(vi, points[_vi1], points[_vi2], points[_vi3], points[_vi4], self.get_max_dis(points, _vi1, _vi2, _vi3, _vi4))\n            points.insert(vi, p)\n        return dis\n\n\n    def get_vertex(self, points):\n        q1, q2, q3, q4 = [], [], [], []\n        for i, (x, y) in enumerate(points):\n            heapq.heappush(q1, (- (x + y), i))\n            heapq.heappush(q2, (- (-x + y), i))\n            heapq.heappush(q3, (- (x - y), i))\n            heapq.heappush(q4, (- (-x - y), i))\n        _, i1 = q1[0]\n        _, i2 = q2[0]\n        _, i3 = q3[0]\n        _, i4 = q4[0]\n        return i1, i2, i3, i4\n\n    def get_max_dis(self, points, i1, i2, i3, i4):\n        ps = [points[i1], points[i2], points[i3], points[i4]]\n        dis = 0\n        for i in range(4):\n            for j in range(i + 1, 4):\n                dis = max(dis, abs(ps[i][0] - ps[j][0]) + abs(ps[i][1] - ps[j][1]))\n        return dis"
}