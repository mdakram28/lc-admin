{
    "username": "ap__singh",
    "submission": "#include <iostream>\n#include <vector>\n#include <set>\n#include <string>\n#include <climits>\nusing namespace std;\n\nstruct TrieNode {\n    TrieNode* childNode[26];\n    bool wordEnd;\n    set<int> st;\n\n    TrieNode() {\n        wordEnd = false;\n        for (int i = 0; i < 26; i++) {\n            childNode[i] = nullptr;\n        }\n    }\n\n    ~TrieNode() {\n        for (int i = 0; i < 26; i++) {\n            if (childNode[i]) {\n                delete childNode[i];\n            }\n        }\n    }\n};\n\nvoid insert_key(TrieNode* root, string& key, int val) {\n    TrieNode* currentNode = root;\n\n    for (char c : key) {\n        if (currentNode->childNode[c - 'a'] == nullptr) {\n            currentNode->childNode[c - 'a'] = new TrieNode();\n        }\n        currentNode = currentNode->childNode[c - 'a'];\n    }\n\n    currentNode->wordEnd = true;\n    currentNode->st.insert(val);\n}\n\nclass Solution {\npublic:\n    vector<int> dp;\n    int solver(int i, string& t, TrieNode* root) {\n        if (i >= t.size()) {\n            return 0;\n        }\n        if(dp[i]!=-1)\n            return dp[i];\n        int ans = INT32_MAX;\n        TrieNode* currentNode = root;\n\n        for (int j = i; j < t.size(); j++) {\n            if (currentNode->childNode[t[j] - 'a'] == nullptr) {\n                break;\n            }\n\n            currentNode = currentNode->childNode[t[j] - 'a'];\n            if (currentNode->wordEnd) {\n                int cost = *currentNode->st.begin();\n                    int nextCost = solver(j + 1, t, root);\n                    if (nextCost != INT32_MAX) {\n                        ans = min(ans, cost + nextCost);  \n                }\n            }\n        }\n\n        return dp[i]=ans;\n    }\n\n    int minimumCost(string t, vector<string>& w, vector<int>& c) {\n        TrieNode* root = new TrieNode();\n        dp.assign(t.size(),-1);\n        for (int i = 0; i < w.size(); i++) {\n            insert_key(root, w[i], c[i]);\n        }\n\n        int result = solver(0, t, root);\n        delete root;  // Free the allocated memory\n\n        return result == INT32_MAX ? -1 : result;\n    }\n};\n",
    "submit_ts": "1720323722",
    "subm_id": "1312382471"
}