{
    "username": "CompileErrorAutomaton",
    "submission": "class SegmentTree {\n    int[] tree;\n    int n;\n\n    // Constructor\n    public SegmentTree(int[] xs)\n    {\n        n = xs.length;\n        tree = new int[4 * n];\n        build(xs, 0, 0, n - 1);\n    }\n\n    // Function to build the Segment Tree\n    public void build(int[] arr, int node, int start,\n                      int end)\n    {\n        if (start == end) {\n            tree[node] = arr[start];\n            return;\n        }\n        int mid = (start + end) / 2;\n        build(arr, 2 * node + 1, start, mid);\n        build(arr, 2 * node + 2, mid + 1, end);\n        tree[node] = tree[2 * node + 1] & tree[2 * node + 2];\n    }\n\n    public int query(int l, int r)\n    {\n        return helper(0, 0, n - 1, l, r);\n    }\n    public int helper(int node, int start, int end, int l,\n                      int r)\n    {\n        if (r < start || end < l) {\n            return Integer.MAX_VALUE;\n        }\n        if (l <= start && end <= r) {\n            return tree[node];\n        }\n        int mid = (start + end) / 2;\n        return helper(2 * node + 1, start, mid, l, r)\n                & helper(2 * node + 2, mid + 1, end, l, r);\n    }\n}\n\nclass Solution {\n    public int minimumDifference(int[] nums, int k) {\n        int n = nums.length;\n        SegmentTree st = new SegmentTree(nums);\n        int res = Integer.MAX_VALUE;\n        for (int i = 0; i < n; i++) {\n            int l = i - 1, r = n - 1;\n            while (r - l > 1) {\n                int mid = (l + r) / 2;\n                if (st.query(i, mid) >= k)\n                    l = mid;\n                else\n                    r = mid;\n            }\n            if (l != i - 1)\n                res = Math.min(\n                        res, Math.abs(st.query(i, l) - k));\n            res = Math.min(res,\n                    Math.abs(k - st.query(i, r)));\n        }\n        return res;\n        \n    }\n}",
    "submit_ts": "1717298789",
    "subm_id": "1274791269"
}