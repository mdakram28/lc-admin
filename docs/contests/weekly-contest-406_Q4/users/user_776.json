{
    "username": "notabhi9",
    "submission": "class Solution {\npublic:\n    long long minimumCost(int m, int n, vector<int>& horizontalCut, vector<int>& verticalCut) {\n        long long ans = 0;\n        priority_queue<vector<int>> pq;\n        for(int i = 0; i < m - 1; i++){\n            pq.push({horizontalCut[i], -1});\n        }\n        for(int i = 0; i < n - 1; i++){\n            pq.push({verticalCut[i], +1});\n        }\n        long long horcount = 0, vercount = 0;\n        while(pq.size()){\n            auto val = pq.top();\n            pq.pop();\n            ans += (long long)(val[0])*(val[1] == -1? vercount + 1 : horcount + 1);\n            if(val[1] == -1){\n                horcount++;\n            }else{\n                vercount++;\n            }\n            // cout<<vercount<<\" \"<<horcount<<\" \"<<ans<<endl;\n        }\n        return ans;\n    }\n};",
    "submit_ts": "1720925192",
    "subm_id": "1320246167"
}