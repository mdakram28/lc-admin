{
    "username": "RB_Suhail",
    "submission": "class Solution {\npublic:\n    struct TrieNode {\n        unordered_map<char, TrieNode*> child;\n        vector<pair<int, int>> ends; \n    };\n\n    class Trie {\n    public:\n        TrieNode* root;\n        Trie() { root = new TrieNode(); }\n\n        void insert(string& word, int idx, int cost) {\n            TrieNode* node = root;\n            for (char c : word) {\n                if (!node->child.count(c))\n                    node->child[c] = new TrieNode();\n                node = node->child[c];\n            }\n            node->ends.push_back({idx, cost});\n        }\n    };\n\n    int minimumCost(string tgt, vector<string>& wrds, vector<int>& csts) {\n        int size = tgt.size();\n        vector<int> t(size + 1, INT_MAX);\n        t[0] = 0;\n\n        Trie trie;\n        for (int i = 0; i < wrds.size(); ++i) {\n            trie.insert(wrds[i], i, csts[i]);\n        }\n\n        for (int i = 0; i < size; ++i) {\n            if (t[i] == INT_MAX) continue;\n\n            TrieNode* node = trie.root;\n            for (int j = i; j < size; ++j) {\n                if (!node->child.count(tgt[j])) break;\n                node = node->child[tgt[j]];\n                for (auto& p : node->ends) {\n                    int idx = p.first;\n                    int cost = p.second;\n                    int len = wrds[idx].size();\n                    if (i + len <= size) {\n                        t[i + len] = min(t[i + len], t[i] + cost);\n                    }\n                }\n            }\n        }\n\n        return t[size] == INT_MAX ? -1 : t[size];\n    }\n};\n",
    "submit_ts": "1720322432",
    "subm_id": "1312349772"
}