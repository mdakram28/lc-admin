{
    "username": "Denish21",
    "submission": "class Solution:\n    def minimumCost(self, m: int, n: int, horizontalCut: List[int], verticalCut: List[int]) -> int:\n        horizontalCut.sort(reverse=True)\n        verticalCut.sort(reverse=True)\n    \n    # Initialize total cost and number of pieces in each dimension\n        total_cost = 0\n        horizontal_pieces = 1  # Initially, the entire cake is one horizontal piece\n        vertical_pieces = 1    # Initially, the entire cake is one vertical piece\n\n    # Indices for horizontal and vertical cuts\n        h_idx, v_idx = 0, 0\n\n    # Process the cuts until all cuts are made\n        while h_idx < len(horizontalCut) or v_idx < len(verticalCut):\n        # Choose the next cut based on the available cuts and their costs\n            if v_idx < len(verticalCut) and (h_idx >= len(horizontalCut) or verticalCut[v_idx] >= horizontalCut[h_idx]):\n            # Perform a vertical cut\n                total_cost += verticalCut[v_idx] * horizontal_pieces\n                vertical_pieces += 1\n                v_idx += 1\n            else:\n            # Perform a horizontal cut\n                total_cost += horizontalCut[h_idx] * vertical_pieces\n                horizontal_pieces += 1\n                h_idx += 1\n\n        return total_cost\n\n\n\n\n",
    "submit_ts": "1720924975",
    "subm_id": "1320238120"
}