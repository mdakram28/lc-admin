{
    "username": "sayakc",
    "submission": "class Solution:\n    def minimumCost(self, m: int, n: int, horizontalCut: List[int], verticalCut: List[int]) -> int:\n        # Sort the cuts based on costs (reverse order to maximize the impact of high-cost cuts early)\n        horizontalCut.sort(reverse=True)\n        verticalCut.sort(reverse=True)\n        \n        # Start with one piece vertically and horizontally\n        h_pieces = 1\n        v_pieces = 1\n        total_cost = 0\n        \n        # Merge the lists and sort by cost, keeping track of type\n        all_cuts = [(cost, 'h') for cost in horizontalCut] + [(cost, 'v') for cost in verticalCut]\n        all_cuts.sort(reverse=True, key=lambda x: x[0])\n        \n        # Process each cut\n        for cost, typ in all_cuts:\n            if typ == 'h':\n                total_cost += cost * v_pieces\n                h_pieces += 1\n            else:\n                total_cost += cost * h_pieces\n                v_pieces += 1\n        \n        return total_cost\n\n",
    "submit_ts": "1720924830",
    "subm_id": "1320232587"
}