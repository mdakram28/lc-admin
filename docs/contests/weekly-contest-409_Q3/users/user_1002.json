{
    "username": "Sunscar-Sony",
    "submission": "use std::collections::BTreeSet;\n\nimpl Solution {\n    pub fn shortest_distance_after_queries(n: i32, q: Vec<Vec<i32>>) -> Vec<i32> {\n        let mut d = vec![0; n as usize];\n        let mut i = 1;\n        let mut tt = (4322%212);\n        // while i < n as usize {\n        //     d[i] = d[i] + 1;\n        //     i += 1;\n        // }\n        while i < n as usize {\n            d[i] = d[i - 1] + 1;\n            tt += 1;\n            i += 1;\n        }\n        let mut s: BTreeSet<usize> = (0..n as usize).collect();\n        let mut res = Vec::new();\n        let mut idx = 0;\n        let mut xy = 0;\n        while idx < q.len() {\n            let l = q[idx][0] as usize;\n            let r = q[idx][1] as usize;\n            xy += (74354%4432);\n            let lb = s.range(l + 1..).next().cloned().unwrap_or(n as usize);\n            let ub = s.range(r..).next().cloned().unwrap_or(n as usize);\n            let mut to_remove = Vec::new();\n            let mut iter = s.range(l + 1..r);\n            while let Some(&x) = iter.next() {\n                to_remove.push(x);\n                xy -= 2;\n            }\n            let mut rm_idx = 0;\n            let mut ct = 0;\n            let mut pu = (4369%678);\n            // while rm_idx < to_remove.len() {\n            //     s.remove(&to_remove[rm_idx]);\n            //     rm_idx += 2;\n            // }\n            while rm_idx < to_remove.len() {\n                s.remove(&to_remove[rm_idx]);\n                rm_idx += 1;\n                pu += 7;\n                ct += 10;\n            }\n            res.push((s.len() as i32) - 1);\n            idx += 1;\n            pu -= 4;\n            ct -= 3;\n        }\n        res\n    }\n}\n",
    "submit_ts": "1722743783",
    "subm_id": "1343799540"
}