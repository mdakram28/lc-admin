{
    "username": "Vladislav-sys",
    "submission": "class Segtree {\n\n    int[][] tree;\n    int size;\n\n    public Segtree(int a) {\n        init(a);\n    }\n\n    private void init(int a) {\n        size = 1;\n        while (size < a)\n            size *= 2;\n        tree = new int[2 * size][3];\n        for (int i = 0; i < tree.length; i++) {\n            tree[i][0] = Integer.MIN_VALUE;\n            tree[i][1] = -1;\n            tree[i][2] = -1;\n        }\n        \n    }\n\n    private void set(int i, int x, int l, int r) {\n        if (r - l == 1) {\n            tree[x][0] = Integer.MIN_VALUE;\n            tree[x][1] = l;\n            tree[x][2] = l;\n            return;\n        }\n\n        int m = l + (r - l) / 2;\n\n        if (i < m) {\n            set(i, 2 * x + 1, l, m);\n        } else {\n            set(i, 2 * x + 2, m, r);\n        }\n        \n        \n        int left = tree[2 * x + 1][1];\n        if (left == -1) left = tree[2 * x + 2][1];\n        \n        int right = tree[2 * x + 2][2];\n        if (right == -1) right = tree[2 * x + 1][2];\n        \n        int val = Math.max(tree[2 * x + 1][0],tree[2 * x + 2][0]);\n        \n        if (tree[2 * x + 1][2] != -1 && tree[2 * x + 2][1] != -1) {\n            val = Math.max(val, tree[2 * x + 2][1] - tree[2 * x + 1][2]);\n        }\n        \n        tree[x][0] = val;\n        tree[x][1] = left;\n        tree[x][2] = right;\n    }\n\n    public void set(int i) {\n        set(i, 0, 0, size);\n    }\n\n    public int [] calc_d(int l1, int r1, int x, int l, int r) {\n        if (r1 <= l || l1 >= r)\n            return new int[]{Integer.MIN_VALUE, -1, -1};\n        if (l >= l1 && r <= r1)\n            return tree[x];\n\n        int m = l + (r - l) / 2;\n\n        int [] v1 = calc_d(l1, r1, 2 * x + 1, l, m);\n        int [] v2 = calc_d(l1, r1, 2 * x + 2, m, r);\n            \n        int left = v1[1];\n        if (left == -1) left = v2[1];\n        \n        int right = v2[2];\n        if (right == -1) right = v1[2];\n        \n        int val = Math.max(v1[0], v2[0]);            \n        \n        if (v1[2] != -1 && v2[1] != -1) {\n            val = Math.max(val, v2[1] - v1[2]);\n        }\n        \n        return new int[]{val, left, right};\n    }\n\n    public int [] calc_d(int l, int r) {\n        return calc_d(l, r, 0, 0, size);\n    }\n}\n\nclass Solution {\n    public List<Boolean> getResults(int[][] q) {\n        List<Boolean> ans = new ArrayList<>();\n        \n        int szz = Math.min(3 * q.length + 1, 5 * (int) 1e4 + 1);\n        // int [] arr = new int[sz];\n        \n        Segtree sg = new Segtree(szz); \n        sg.set(0);\n        \n        for (int i = 0; i < q.length; i++) {\n        \n            if (q[i][0] == 1) {\n                sg.set(q[i][1]);\n            } else {\n                \n                int [] sz = sg.calc_d(0, q[i][1] + 1);\n                \n                if (sz[0] == Integer.MIN_VALUE) {\n                    if (sz[1] == -1) {\n                        if (q[i][1] >= q[i][2]) {\n                            ans.add(true);\n                        } else {\n                            ans.add(false);\n                        }\n                    } else {\n                        if (q[i][1] - sz[2] >= q[i][2]) {\n                            ans.add(true);\n                        } else {\n                            ans.add(false);\n                        }\n                    }\n                } else {\n                    if (sz[0] >= q[i][2] || q[i][1] - sz[2] >= q[i][2]) {\n                        ans.add(true);\n                    } else {\n                        ans.add(false);\n                    }   \n                }\n                \n                 \n                \n            }\n        }\n        \n        \n        return ans;\n    }\n}",
    "submit_ts": "1716651488",
    "subm_id": "1267641546"
}