{
    "username": "anand_codes28",
    "submission": "\n\nlet INF = Int32.max\n\nclass SegmentTree {\n    var tree: [Int]\n    var n: Int\n\n    init(_ arr: [Int]) {\n        n = arr.count\n        tree = Array(repeating: 0, count: 4 * n)\n        build(arr, 0, 0, n - 1)\n    }\n\n    private func build(_ arr: [Int], _ node: Int, _ start: Int, _ end: Int) {\n        if start == end {\n            tree[node] = arr[start]\n        } else {\n            let mid = (start + end) / 2\n            build(arr, 2 * node + 1, start, mid)\n            build(arr, 2 * node + 2, mid + 1, end)\n            tree[node] = tree[2 * node + 1] & tree[2 * node + 2]\n        }\n    }\n\n    func query(_ l: Int, _ r: Int) -> Int {\n        return query(0, 0, n - 1, l, r)\n    }\n\n    private func query(_ node: Int, _ start: Int, _ end: Int, _ l: Int, _ r: Int) -> Int {\n        if r < start || end < l {\n            return Int(INF)\n        }\n        if l <= start && end <= r {\n            return tree[node]\n        }\n        let mid = (start + end) / 2\n        let p1 = query(2 * node + 1, start, mid, l, r)\n        let p2 = query(2 * node + 2, mid + 1, end, l, r)\n        return p1 & p2\n    }\n}\n\nclass Solution {\n    func minimumDifference(_ arr: [Int], _ k: Int) -> Int {\n        let n = arr.count\n        let st = SegmentTree(arr)\n        var ans = Int(INF)\n        for i in 0..<n {\n            var l = i - 1\n            var r = n - 1\n            var mid: Int\n            while r - l > 1 {\n                mid = (l + r) / 2\n                if st.query(i, mid) >= k {\n                    l = mid\n                } else {\n                    r = mid\n                }\n            }\n            if l != i - 1 {\n                ans = min(ans, abs(st.query(i, l) - k))\n            }\n            ans = min(ans, abs(k - st.query(i, r)))\n        }\n        return ans\n    }\n}",
    "submit_ts": 1717300759.0
}