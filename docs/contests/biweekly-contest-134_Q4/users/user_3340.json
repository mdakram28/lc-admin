{
    "username": "liweiyi36",
    "submission": "class Solution {\npublic:\n    struct Node {\n        int l, r, sum;\n    }tr[100005];\n    void build(int u, int l, int r, vector<int>& a) {\n        tr[u].l = l, tr[u].r = r;\n        if (l == r) {\n            tr[u].sum = a[l];\n            return;\n        }\n        int mid = tr[u].l + tr[u].r >> 1;\n        build(u << 1, l, mid, a);\n        build(u << 1 | 1, mid + 1, r, a);\n        tr[u].sum = tr[u << 1].sum & tr[u << 1 | 1].sum;\n    }\n    int query(int u, int l, int r) {\n        if (l <= tr[u].l && tr[u].r <= r) return tr[u].sum;\n        int mid = tr[u].l + tr[u].r >> 1;\n        if (l > mid) return query(u << 1 | 1, l, r);\n        else if (r <= mid) return query(u << 1, l, r);\n        else return query(u << 1 | 1, l, r) & query(u << 1, l, r); \n    }\n\n    vector<int> v[32][2];\n\n    long long countSubarrays(vector<int>& a, int k) {\n        int n = a.size();\n        a.insert(a.begin(), 0);\n        //build(1, 1, n, a);\n        for (int i = 1; i <= n; i++) {\n            for (int j = 31; j >= 0; j--) {\n                v[j][a[i] >> j & 1].push_back(i);\n            }\n        }\n        long long tot = 0;\n        for (int i = 1; i <= n; i++) {\n            int up = n, down = i;\n            for (int j = 31; j >= 0; j--) {\n                int u = (k >> j) & 1;\n                if (u) {\n                    auto p = lower_bound(v[j][0].begin(), v[j][0].end(), i);\n                    if (p != v[j][0].end()) {\n                        int t = p - v[j][0].begin();\n                        int q = v[j][0][t];\n                        up = min(up, q - 1);\n                    }\n                }\n                else {\n                    auto p = lower_bound(v[j][0].begin(), v[j][0].end(), i);\n                    if (p != v[j][0].end()) {\n                        int t = p - v[j][0].begin();\n                        int q = v[j][0][t];\n                        down = max(down, q);\n                    }\n                    else down = n + 1;\n                }\n            }\n            // if (up == down) {\n            //     if (a[i] == k) tot++;\n            //     continue;\n            // }\n            if (up >= down) tot += up - down + 1;\n        }\n        return tot;\n    }\n};",
    "submit_ts": "1720281422",
    "subm_id": "544575715"
}