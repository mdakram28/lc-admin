{
    "username": "user8670BY",
    "submission": "struct TrieNode {\n    unordered_map<char, TrieNode*> children;\n    vector<pair<int, int>> words;\n};\n\nclass Solution {\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        TrieNode* root = buildTrie(words, costs);\n        int n = target.size();\n        vector<int> dp(n + 1, INT_MAX);\n        dp[0] = 0;\n\n        for (int i = 0; i < n; ++i) {\n            if (dp[i] == INT_MAX) continue;\n\n            TrieNode* node = root;\n            for (int j = i; j < n; ++j) {\n                if (node->children.find(target[j]) == node->children.end()) break;\n                node = node->children[target[j]];\n\n                for (auto& word_info : node->words) {\n                    int word_idx = word_info.first;\n                    int word_len = word_info.second;\n                    if (i + word_len <= n) {\n                        dp[i + word_len] = min(dp[i + word_len], dp[i] + costs[word_idx]);\n                    }\n                }\n            }\n        }\n\n        return dp[n] == INT_MAX ? -1 : dp[n];\n    }\n\nprivate:\n    TrieNode* buildTrie(vector<string>& words, vector<int>& costs) {\n        TrieNode* root = new TrieNode();\n        for (int i = 0; i < words.size(); ++i) {\n            TrieNode* node = root;\n            for (char c : words[i]) {\n                if (node->children.find(c) == node->children.end()) {\n                    node->children[c] = new TrieNode();\n                }\n                node = node->children[c];\n            }\n            node->words.emplace_back(i, words[i].size());\n        }\n        return root;\n    }\n};\n",
    "submit_ts": "1720322788",
    "subm_id": "1312359119"
}