{
    "username": "Rushdeep_Dinda",
    "submission": "class Solution {\n    long long findKthLargest(vector<long long>& nums, int k) {\n        priority_queue<long long, vector<long long>, greater<long long>> pq;\n\n        for(long long i : nums){\n            if(pq.size() < k){\n                pq.push(i);\n            }else{\n                if(pq.top() < i){\n                    pq.pop();\n                    pq.push(i);\n                }\n            }\n        }\n\n        return pq.top();\n    }\n    long long helper(vector<vector<long long>> & a){\n        int n = a.size();\n        int m = a[0].size();\n        vector<pair<int, int>> aux(n);\n\n        for(int i = 0; i < n; i++){\n            int kth = findKthLargest(a[i], 3);\n            for(int j = 0; j < m; j++){\n                if(a[i][j] >= kth){\n                    aux.push_back({i, j});\n                }\n            }\n        }\n\n        vector<int> rowtaken(n);\n        vector<int> coltaken(m);\n\n        int len = aux.size();\n\n        long long ans = LLONG_MIN;\n\n        for(int i = 0; i < len; i++){\n            auto [x1, y1] = aux[i];\n            rowtaken[x1] = true;\n            coltaken[y1] = true;\n            for(int j = i + 1; j < len; j++){\n                auto [x2, y2] = aux[j];\n                if(rowtaken[x2] == false and coltaken[y2] == false){\n                    rowtaken[x2] = true;\n                    coltaken[y2] = true;\n                    for(int k = j + 1; k < len; k++){\n                        auto [x3, y3] = aux[k];\n                        if(rowtaken[x3] == false and coltaken[y3] == false){\n                            rowtaken[x3] = true;\n                            coltaken[y3] = true;\n                            \n                            ans = max(ans, a[x1][y1] + a[x2][y2] + a[x3][y3]);\n\n                            rowtaken[x3] = false;\n                            coltaken[y3] = false;\n                        }\n                    }\n                    rowtaken[x2] = false;\n                    coltaken[y2] = false;\n                }\n            }\n\n            rowtaken[x1] = false;\n            coltaken[y1] = false;\n        }\n\n        return ans;\n    }\npublic:\n    long long maximumValueSum(vector<vector<int>>& board) {\n        int n = board.size();\n        int m = board[0].size();\n\n        vector<vector<long long>> a(n, vector<long long>(m));\n        vector<vector<long long>> b(m, vector<long long>(n));\n        for(int i = 0; i < n; i++){\n            for(int j = 0; j < m; j++){\n                a[i][j] = board[i][j];\n                b[j][i] = board[i][j]; \n            }\n        }\n\n         \n\n        return min(helper(a), helper(b));\n    }\n};",
    "submit_ts": "1723910237",
    "subm_id": "1359222456"
}