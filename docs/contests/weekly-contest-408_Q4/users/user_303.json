{
    "username": "nishk2",
    "submission": "class Solution {\n    function bfs($graph, $start, $target1, $target2, $nodes) {\n        $q = new SplQueue();\n        $visited = array_fill(0, $nodes + 4, 0);\n        $q->enqueue($start);\n        $visited[$start] = 1;\n\n        while (!$q->isEmpty()) {\n            $u = $q->dequeue();\n            foreach ($graph[$u] as $v) {\n                if (!$visited[$v]) {\n                    $q->enqueue($v);\n                    $visited[$v] = 1;\n                }\n            }\n        }\n        return $visited[$target1] || $visited[$target2];\n    }\n\n    function canReachCorner($X, $Y, $circles2) {\n        $circles = array_fill(0, count($circles2), null);\n        $graph = array_fill(0, count($circles2) + 4, []); // Initialize as empty arrays\n        $num_circles = count($circles2);\n\n        for ($i = 0; $i < $num_circles; ++$i) {\n            $circles[$i] = [\n                'first' => ['first' => $circles2[$i][0], 'second' => $circles2[$i][1]],\n                'second' => $circles2[$i][2]\n            ];\n        }\n\n        for ($i = 0; $i < $num_circles; ++$i) {\n            if ($circles[$i]['first']['first'] <= $circles[$i]['second']) {\n                $graph[$num_circles][] = $i; \n                $graph[$i][] = $num_circles;\n            }\n            if ($X - $circles[$i]['first']['first'] <= $circles[$i]['second']) {\n                $graph[$num_circles + 2][] = $i;\n                $graph[$i][] = $num_circles + 2;\n            }\n            if ($circles[$i]['first']['second'] <= $circles[$i]['second']) {\n                $graph[$num_circles + 1][] = $i;\n                $graph[$i][] = $num_circles + 1;\n            }\n            if ($Y - $circles[$i]['first']['second'] <= $circles[$i]['second']) {\n                $graph[$num_circles + 3][] = $i;\n                $graph[$i][] = $num_circles + 3;\n            }\n            for ($j = $i + 1; $j < $num_circles; ++$j) {\n                $distance = sqrt(pow($circles[$i]['first']['first'] - $circles[$j]['first']['first'], 2) +\n                                 pow($circles[$i]['first']['second'] - $circles[$j]['first']['second'], 2));\n                $radius_sum = $circles[$i]['second'] + $circles[$j]['second'];\n                if ($radius_sum >= $distance) {\n                    $graph[$i][] = $j;\n                    $graph[$j][] = $i;\n                }\n            }\n        }\n\n        $is_blocked = 0;\n        $is_blocked = max($is_blocked, $this->bfs($graph, $num_circles, $num_circles + 1, $num_circles + 2, $num_circles + 4)); \n        $is_blocked = max($is_blocked, $this->bfs($graph, $num_circles + 3, $num_circles + 2, $num_circles + 1, $num_circles + 4)); \n        if ($is_blocked) {\n            return false;\n        }\n        return true;\n    }\n}",
    "submit_ts": "1722136848",
    "subm_id": "1335746753"
}