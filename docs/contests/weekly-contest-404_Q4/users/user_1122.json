{
    "username": "packkill",
    "submission": "class Solution:\n    def minimumDiameterAfterMerge(self, edges1: List[List[int]], edges2: List[List[int]]) -> int:\n        n = len(edges1) + 1\n        m = len(edges2) + 1\n        graph1 = [[]for _ in range(n + 1)]\n        graph2 = [[]for _ in range(m + 1)]\n        \n        for a, b in edges1:\n            graph1[a] += b,\n            graph1[b] += a,\n        \n        for a, b in edges2:\n            graph2[a] += b,\n            graph2[b] += a,\n        \n        def bfs(graph, st):\n            visited = [-1] * (len(graph) + 1)\n            visited[st] = 0\n            q = deque()\n            q += st,\n\n            while q:\n                now = q.popleft()\n                for nxt in graph[now]:\n                    if visited[nxt] == -1:\n                        q += nxt,\n                        visited[nxt] = visited[now] + 1\n            return visited\n        \n        def find_diameter(graph):\n            v1 = bfs(graph, 0)\n            idx = v1.index(max(v1))\n            v2 = bfs(graph, idx)\n            print('idx', idx)\n            print('v2', v2)\n            return max(v2)\n        g1 = find_diameter(graph1)\n        g2 = find_diameter(graph2)\n        print(g1, g2)\n        return max(g1, g2, (g1 + 1)// 2 + (g2 + 1)//2 + 1)\n            ",
    "submit_ts": 1719719083.0
}