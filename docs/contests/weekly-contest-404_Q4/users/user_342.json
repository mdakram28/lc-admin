{
    "username": "sanjay77",
    "submission": "int temp;\n\nvoid dia_dfs(int node,vector<vector<int>>& adj,int p,int *dep){\n    dep[node]=0;\n    vector<int> t1;\n    t1.push_back(0);t1.push_back(0);\n    for(int i=0;i<adj[node].size();i++)\n    {\n        int v=adj[node][i];\n        if(v!=p)\n        {\n            dia_dfs(v,adj,node,dep);\n            t1.push_back(1+dep[v]);\n        }\n    }\n    sort(t1.begin(),t1.end());\n    reverse(t1.begin(),t1.end());\n    dep[node]=t1[0];\n    temp=max(temp,t1[0]+t1[1]);\n}\n\nvoid prop_far(int node,vector<vector<int>>& adj,int p,int *dep,int prev){\n    \n    vector<int> t1;\n    t1.push_back(0);t1.push_back(0);\n    for(int i=0;i<adj[node].size();i++)\n    {\n        int v=adj[node][i];\n        if(v!=p)\n        {\n            t1.push_back(1+dep[v]);\n        }\n    }\n    sort(t1.begin(),t1.end());\n    reverse(t1.begin(),t1.end());\n    \n    for(int i=0;i<adj[node].size();i++)\n    {\n        int v=adj[node][i];\n        if(v!=p)\n        {\n            if(dep[v]+1==dep[node])\n            {\n                prop_far(v,adj,node,dep,max(1+prev,1+t1[1]));\n            }\n            else\n            {\n                prop_far(v,adj,node,dep,max(1+prev,1+t1[0]));\n            }\n        }\n    }\n    \n    dep[node]=max(dep[node],prev);\n    \n}\n\nclass Solution {\npublic:\n    int minimumDiameterAfterMerge(vector<vector<int>>& edg1, vector<vector<int>>& edg2) {\n        int n=edg1.size()+1;\n        vector<vector<int>> adj1(n+2);\n        for(int i=0;i<edg1.size();i++)\n        {\n            adj1[edg1[i][0]].push_back(edg1[i][1]);\n            adj1[edg1[i][1]].push_back(edg1[i][0]);\n        }\n        \n        int m=edg2.size()+1;\n        vector<vector<int>> adj2(m+2);\n        for(int i=0;i<edg2.size();i++)\n        {\n            adj2[edg2[i][0]].push_back(edg2[i][1]);\n            adj2[edg2[i][1]].push_back(edg2[i][0]);\n        }\n        int dep1[n+2]; // farthest one in 1\n        int dep2[m+2]; // farthest one in 2\n        int d1,d2;\n        temp=0;\n        dia_dfs(0,adj1,-1,dep1);\n        d1=temp;\n        temp=0;\n        dia_dfs(0,adj2,-1,dep2); \n        d2=temp;\n\n        prop_far(0,adj1,-1,dep1,0);\n        prop_far(0,adj2,-1,dep2,0);\n        \n        // for(int i=0;i<n;i++) cout<<i<<\" \"<<dep1[i]<<\" , \";\n        // cout<<\"\\n\";\n        // for(int i=0;i<n;i++) cout<<i<<\" \"<<dep2[i]<<\" , \";\n        // cout<<\"\\n\";\n        \n        int mini1=*(min_element(dep1,dep1+n));\n        int mini2=*(min_element(dep2,dep2+m));\n        \n        if(1+mini1+mini2<max(d1,d2)) return max(d1,d2);\n        return 1+mini1+mini2;\n        \n       \n        \n    }\n};",
    "submit_ts": 1719717758.0
}