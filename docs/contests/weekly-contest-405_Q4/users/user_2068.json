{
    "username": "harshalgondaliya",
    "submission": "class Solution :\n    def minimumCost(self, target: str, words: List[str], costs: List[int]) -> int:\n        n = len(target)\n        \n        # Dictionary to store words and their corresponding costs\n        word_cost = {}\n        for word, cost in zip(words, costs):\n            if word not in word_cost:\n                word_cost[word] = cost\n            else:\n                word_cost[word] = min(word_cost[word], cost)\n        \n        # Initialize the dp array with infinity\n        dp = [float('inf')] * (n + 1)\n        dp[0] = 0  # base case: cost to build an empty string is 0\n        \n        for i in range(n):\n            if dp[i] == float('inf'):\n                continue\n            # Try to extend the current substring with all possible words\n            for word, cost in word_cost.items():\n                if target.startswith(word, i):\n                    dp[i + len(word)] = min(dp[i + len(word)], dp[i] + cost)\n        \n        return dp[n] if dp[n] != float('inf') else -1",
    "submit_ts": "1720321238",
    "subm_id": "1312317351"
}