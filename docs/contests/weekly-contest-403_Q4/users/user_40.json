{
    "username": "fallleaves01",
    "submission": "class Solution {\npublic:\n    int calc(vector<vector<int>>& grid) {\n        int n = grid.size(), m = grid[0].size();\n        int lx = n, rx = -1, ly = m, ry = -1;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (grid[i][j] == 1) {\n                    lx = min(lx, i);\n                    rx = max(rx, i);\n                    ly = min(ly, j);\n                    ry = max(ry, j);\n                }\n            }\n        }\n        return (rx - lx + 1) * (ry - ly + 1);\n    }\n    int inf;\n    vector<vector<int>> subsqr(const vector<vector<int>> &grid, int lx, int rx, int ly, int ry) {\n        vector res(rx - lx + 1, vector(ry - ly + 1, 0));\n        for (int i = lx; i <= rx; i++) {\n            for (int j = ly; j <= ry; j++) {\n                res[i - lx][j - ly] = grid[i][j];\n            }\n        }\n        return res;\n    }\n    int solve(vector<vector<int>>& grid, int num) {\n        if (num == 1) {\n            return calc(grid);\n        }\n        int n = grid.size(), m = grid[0].size();\n        if (n * m < num) {\n            return inf;\n        }\n        int ans = inf;\n        for (int i = 0; i + 1 < n; i++) {\n            auto ls = subsqr(grid, 0, i, 0, m - 1);\n            auto rs = subsqr(grid, i + 1, n - 1, 0, m - 1);\n            for (int d = 1; d < num; d++) {\n                ans = min(ans, solve(ls, d) + solve(rs, num - d));\n            }\n        }\n        for (int i = 0; i + 1 < m; i++) {\n            auto ls = subsqr(grid, 0, n - 1, 0, i);\n            auto rs = subsqr(grid, 0, n - 1, i + 1, m - 1);\n            for (int d = 1; d < num; d++) {\n                ans = min(ans, solve(ls, d) + solve(rs, num - d));\n            }\n        }\n        return ans;\n    }\n    int minimumSum(vector<vector<int>>& grid) {\n        inf = grid.size() * grid[0].size() + 1;\n        return solve(grid, 3);\n    }\n};",
    "submit_ts": 1719111431.0
}