{
    "username": "Joshiiii",
    "submission": "\nconst int maxi = 1e9;\n\n\n// class TRIENode {\n// public:\n//     map<char, TRIENode*> child;\n//     TRIENode() MinCost = maxi;\n// };\n\nclass Node {\npublic:\n    unordered_map<char, Node*> child;\n    int MinCost;\n    Node(){\n\t\tMinCost = maxi;\n\t}\n};\n\nclass Trie {\npublic:\n    Node* root;\n    Trie() {\n        root = new Node();\n    }\n    void insertWordIntoTrie(string& word, int cost) {\n        Node* node = root;\n        for (char ch : word) {\n            if (!node->child.count(ch)) {\n                node->child[ch] = new Node();\n            }\n            node = node->child[ch];\n        }\n        node->MinCost = min(node->MinCost, cost);\n    }\n};\n\nclass Solution {\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int n = target.size();\n        int sz = words.size();\n        Trie trie;\n        for (int i = 0; i < sz; ++i) trie.insertWordIntoTrie(words[i], costs[i]);\n        vector<int> dp(n + 1, maxi);\n        dp[0] = 0;\n        for (int i = 0; i < n; ++i) {\n            if (dp[i] != maxi) {\n                Node* node = trie.root;\n                for (int j = i; j < n; j++) {\n                    if(node->child.count(target[j])) {\n                        node = node->child[target[j]];\n                        if (node->MinCost != maxi) dp[j + 1] = min(dp[i] + node->MinCost, dp[j + 1]);\n                    }\n                    else break;\n                }\n            }\n        }\n        return dp[n] == maxi ? -1 : dp[n];\n    }\n};",
    "submit_ts": "1720324478",
    "subm_id": "1312400497"
}