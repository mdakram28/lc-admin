{
    "username": "20240627.i_Wont_Fake_It",
    "submission": "from typing import List, Dict\n\nclass Solution:\n    def maximumLength(self, nums: List[int], k: int) -> int:\n        total_elements = len(nums)\n        dp_table = self.initialize_dp_table(total_elements, k)\n        max_lengths_at_k = [-1] * (k + 1)\n        num_to_len_map_at_k = self.initialize_num_to_len_map(k)\n        \n        longest_sequence = 1\n        for index in range(total_elements):\n            self.update_dp_table(index, k, dp_table, max_lengths_at_k, num_to_len_map_at_k, nums)\n            longest_sequence = self.update_max_lengths_and_longest_sequence(index, k, dp_table, max_lengths_at_k, num_to_len_map_at_k, nums, longest_sequence)\n        \n        return longest_sequence\n\n    def initialize_dp_table(self, total_elements: int, k: int) -> List[List[int]]:\n        return [[1] * (k + 1) for _ in range(total_elements)]\n\n    def initialize_num_to_len_map(self, k: int) -> List[Dict[int, int]]:\n        return [{} for _ in range(k + 1)]\n\n    def update_dp_table(self, index: int, k: int, dp_table: List[List[int]], max_lengths_at_k: List[int], num_to_len_map_at_k: List[Dict[int, int]], nums: List[int]):\n        for current_k in range(k + 1):\n            for previous_k in range(current_k):\n                dp_table[index][current_k] = max(dp_table[index][current_k], 1 + max_lengths_at_k[previous_k])\n            \n            if nums[index] in num_to_len_map_at_k[current_k]:\n                dp_table[index][current_k] = max(dp_table[index][current_k], 1 + num_to_len_map_at_k[current_k][nums[index]])\n\n    def update_max_lengths_and_longest_sequence(self, index: int, k: int, dp_table: List[List[int]], max_lengths_at_k: List[int], num_to_len_map_at_k: List[Dict[int, int]], nums: List[int], longest_sequence: int) -> int:\n        for current_k in range(k + 1):\n            max_lengths_at_k[current_k] = max(max_lengths_at_k[current_k], dp_table[index][current_k])\n            num_to_len_map_at_k[current_k][nums[index]] = max(num_to_len_map_at_k[current_k].get(nums[index], 0), dp_table[index][current_k])\n            longest_sequence = max(longest_sequence, dp_table[index][current_k])\n        return longest_sequence\n",
    "submit_ts": 1717862097.0
}