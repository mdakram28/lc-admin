{
    "username": "retyrn",
    "submission": "string to_string(string s) { return '\"' + s + '\"'; }\nstring to_string(const char *s) { return to_string((string) s); }\nstring to_string(bool b) { return (b ? \"true\" : \"false\"); }\ntemplate<typename A, typename B>\nstring to_string(pair<A, B> p) { return \"(\" + to_string(p.first) + \", \" + to_string(p.second) + \")\"; }\ntemplate<typename A>\nstring to_string(A v) { bool first = true; string res = \"{\"; for(const auto &x : v) { if(!first) { res += \", \"; } first = false; res += to_string(x);} res += \"}\"; return res; }\nvoid debug_out() { cout << endl; }\ntemplate<typename Head, typename... Tail> void debug_out(Head H, Tail... T) { cout << \" \" << to_string(H); debug_out(T...);}\n#define dbg(...) cout << \"[\" << #__VA_ARGS__ << \"]:\", debug_out(__VA_ARGS__)\n\nclass Solution {\npublic:\n    using ll = long long;\n    long long minimumOperations(vector<int>& nums, vector<int>& target) {\n        int n = nums.size();\n        for (int i = 0; i < n; i ++) {\n            nums[i] -= target[i];\n        }\n        vector<ll> d(n + 1);\n        d[0] = nums[0];\n        for (int i = 1; i < n; i ++) {\n            d[i] = nums[i] - nums[i - 1];\n        }\n        ll neg = 0, pos = 0;\n        for (auto x : d) {\n            if (x == 0) continue;\n            if (x > 0) pos += x;\n            else neg -= x;\n        }\n        \n        return max(neg, pos);\n        \n    }\n};",
    "submit_ts": "1721530613",
    "subm_id": "548379833"
}