{
    "username": "kanoon",
    "submission": "class Solution {\npublic:\n    int minimumDistance(vector<vector<int>>& points) {\n        int n = points.size();\n        \n        multiset<int> mst[4];\n        for (int op = 0; op < 4; op++) {\n            for (int i = 0; i < n; i++) {\n                if (op == 0) {\n                    mst[op].insert(points[i][0] + points[i][1]);\n                } else if (op == 1) {\n                    mst[op].insert(points[i][0] - points[i][1]);\n                } else if (op == 2) {\n                    mst[op].insert(-points[i][0] + points[i][1]);\n                } else if (op == 3) {\n                    mst[op].insert(-points[i][0] - points[i][1]);\n                }\n            }\n        }\n        \n        int res = INT_MAX;\n        \n        for (int i = 0; i < n; i++) {\n            for (int op = 0; op < 4; op++) {\n                if (op == 0) {\n                    mst[op].extract(points[i][0] + points[i][1]);\n                } else if (op == 1) {\n                    mst[op].extract(points[i][0] - points[i][1]);\n                } else if (op == 2) {\n                    mst[op].extract(-points[i][0] + points[i][1]);\n                } else if (op == 3) {\n                    mst[op].extract(-points[i][0] - points[i][1]);\n                }\n            }\n            int t = 0;\n            for (int op = 0; op < 4; op++) {\n                t = max(t, *mst[op].rbegin() - *mst[op].begin());\n            }\n            res = min(res, t);\n            for (int op = 0; op < 4; op++) {\n                if (op == 0) {\n                    mst[op].insert(points[i][0] + points[i][1]);\n                } else if (op == 1) {\n                    mst[op].insert(points[i][0] - points[i][1]);\n                } else if (op == 2) {\n                    mst[op].insert(-points[i][0] + points[i][1]);\n                } else if (op == 3) {\n                    mst[op].insert(-points[i][0] - points[i][1]);\n                }\n            }\n        }\n        \n        return res;\n    }\n};"
}