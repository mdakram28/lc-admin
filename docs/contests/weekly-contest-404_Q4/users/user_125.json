{
    "username": "mastoori1234",
    "submission": "struct Tree {\n    \n    int dia;\n        \n    vector< vector<int> > adj;\n    \n    vector<int> height;\n    \n    Tree(vector< vector<int> > & edges) {\n        dia = 0;\n        int n = edges.size()+1;\n        adj.resize(n, vector<int>());\n        height.resize(n, 0);\n        for( auto & edge: edges) {\n            int u = edge[0];\n            int v = edge[1];\n            adj[u].push_back(v);\n            adj[v].push_back(u);\n        }\n    }\n    \n    int dfs1( int id, int par) {\n        for( int nxt: adj[id]) {\n            if(nxt==par) {\n                continue;\n            }\n            height[id] = max( height[id], 1+dfs1(nxt, id));\n        }\n        return height[id];\n    }\n    \n    void dfs2( int id, int par, int parD) {\n        multiset<int> ms;     \n        int max1 = 0;\n        int max2 = 0;\n        for( int nxt: adj[id]) {\n            if(nxt==par) {\n                continue;\n            }\n            int val = 1+height[nxt];\n            ms.insert(val);\n            if(val>max1) {\n                max2 = max1;\n                max1 = val;\n            } else if(val>max2) {\n                max2 = val;\n            }\n        }\n        // cout << \" id: \" << id << \" parD: \" << parD << \" max1: \" << max1 << \" max2: \" << max2 << \"\\n\";\n        dia = max( dia, parD+max1);\n        dia = max( dia, max1+max2);\n        for( int nxt: adj[id]) {\n            if(nxt==par) {\n                continue;\n            }\n            int val = 1+height[nxt];\n            ms.erase(ms.find(val));\n            dfs2( nxt, id, 1+max( parD, ms.empty()?0:(*ms.rbegin())));\n            ms.insert(val);\n        }\n        height[id] = max( height[id], parD);   \n    }\n    \n    void compute() {\n        dfs1( 0, -1);\n        dfs2( 0, -1, 0);\n    }\n    \n    int getMinHeight() {\n        int res = height[0];\n        for( int i=0; i<height.size(); i++) {\n            res = min( res, height[i]);\n        }\n        return res;\n    }\n};\n\nclass Solution {\npublic:\n    \n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n        \n        Tree t1(edges1);\n        Tree t2(edges2);\n        \n        t1.compute();\n        t2.compute();\n        \n        int ans = 0;\n        \n        // cout << t1.dia << \"\\n\";\n        // cout << t2.dia << \"\\n\";\n        \n        ans = max( ans, t1.dia);\n        ans = max( ans, t2.dia);\n        ans = max( ans, 1+t1.getMinHeight()+t2.getMinHeight());   \n        \n        return ans;\n    }\n};",
    "submit_ts": "1719716258",
    "subm_id": "1304359455"
}