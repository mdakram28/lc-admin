{
    "username": "destryptor",
    "submission": "class Solution {\npublic:\n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n        int m = edges1.size() + 1;\n        int n = edges2.size() + 1;\n\n        int d1 = diameter(edges1, m);\n        int d2 = diameter(edges2, n);\n\n        return max({d1, d2, (d1 + 1) / 2 + (d2 + 1) / 2 + 1});\n    }\n\n    int diameter(vector<vector<int>>& edges, int n) {\n        vector<vector<int>> graph(n);\n        for (auto& e : edges) {\n            graph[e[0]].push_back(e[1]);\n            graph[e[1]].push_back(e[0]);\n        }\n\n        pair<int, int> p1 = bfs(graph, 0);\n        pair<int, int> p2 = bfs(graph, p1.first);\n        return p2.second;\n    }\n\n    pair<int, int> bfs(vector<vector<int>>& graph, int start) {\n        int n = graph.size();\n\n        queue<int> q;\n        q.push(start);\n\n        vector<int> dist(n, -1);\n        dist[start] = 0;\n\n        int farthestNode = start;\n        int maxDist = 0;\n\n        while (!q.empty()) {\n            int node = q.front();\n            q.pop();\n            for (int& nbr : graph[node]) {\n                if (dist[nbr] == -1) {\n                    dist[nbr] = dist[node] + 1;\n                    q.push(nbr);\n                    if (dist[nbr] > maxDist) {\n                        maxDist = dist[nbr];\n                        farthestNode = nbr;\n                    }\n                }\n            }\n        }\n\n        return {farthestNode, maxDist};\n    }\n};\n",
    "submit_ts": "1719717448",
    "subm_id": "1304391799"
}