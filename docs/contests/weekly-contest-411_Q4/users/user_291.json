{
    "username": "Jhyatt",
    "submission": "class Solution:\n    def countKConstraintSubstrings(self, s: str, k: int, queries: List[List[int]]) -> List[int]:\n\n        n = len(s)\n        q = len(queries)\n\n        num_zero, num_one = 0, 0\n        left_indices, right_indices = [], []\n        right_prefix_sums = [0]\n        left = 0\n        for right, ch in enumerate(s):\n            if ch == '0':\n                num_zero += 1\n            if ch == '1':\n                num_one += 1\n            \n            while num_zero > k and num_one > k:\n                left_indices.append(left)\n                right_indices.append(right)\n                if s[left] == '0':\n                    num_zero -= 1\n                if s[left] == '1':\n                    num_one -= 1\n                left += 1\n\n        \n        for r in right_indices:\n            right_prefix_sums.append(right_prefix_sums[-1] + r)\n\n\n\n        res = []\n        for l, r in queries:\n            l_idx = bisect_left(left_indices, l)\n            r_idx = bisect_right(right_indices, r)\n\n            num_indices = r_idx - l_idx\n\n            ans = (r + 1) * num_indices - (right_prefix_sums[r_idx] - right_prefix_sums[l_idx])\n\n            total = ((r - l + 1) * (r - l + 2)) // 2\n\n            res.append(total - ans) if l_idx <= r_idx else res.append(total)\n        return res\n",
    "submit_ts": "1723952597",
    "subm_id": "1359800009"
}