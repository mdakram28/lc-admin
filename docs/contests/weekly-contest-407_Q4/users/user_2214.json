{
    "username": "029_manik",
    "submission": "class Solution {\n    public long minimumOperations(int[] nums, int[] target) {\n        int n = nums.length;\n        List<Integer> t = new ArrayList<>(n);\n        for (int i = 0; i < n; i++) {\n            t.add(target[i] - nums[i]);\n        }\n\n        int pos = 0;\n        long m = 0, ans = 0;\n        ans = Math.abs(t.get(0));\n        m = ans;\n        if (t.get(0) >= 0)\n            pos = 1;\n\n        for (int i = 1; i < n; i++) {\n            if (t.get(i) < 0 && pos == 1) {\n                ans += Math.abs(t.get(i));\n                m = Math.abs(t.get(i));\n                pos = 0;\n                continue;\n            }\n            if (t.get(i) >= 0 && pos == 0) {\n                ans += Math.abs(t.get(i));\n                m = Math.abs(t.get(i));\n                pos = 1;\n                continue;\n            }\n            if (m >= Math.abs(t.get(i))) {\n                m = Math.abs(t.get(i));\n                continue;\n            } else {\n                ans += Math.abs(t.get(i)) - m;\n                m = Math.abs(t.get(i));\n            }\n        }\n\n        return ans;\n    }\n}",
    "submit_ts": "1721533512",
    "subm_id": "1328010635"
}