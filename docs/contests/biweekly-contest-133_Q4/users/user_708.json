{
    "username": "kushwaha_ranjeet",
    "submission": "#include <vector>\n#include <unordered_map>\n#include <iostream>\nusing namespace std;\nconst int MOD = 1'000'000'007;\nconst int MAX_INVERSIONS = 400;\n\nclass Solution {\npublic:\n    int numberOfPermutations(int n, vector<vector<int>>& requirements) {\n        // Nested class for handling DP logic\n        class DPHandler {\n        public:\n            DPHandler(int n, const unordered_map<int, int>& reqMap)\n                : dp(n + 1, vector<long>(MAX_INVERSIONS + 1, 0)), requirementMap(reqMap), length(n) {}\n\n            long solve() {\n                // Initialize the dp table\n                dp[0][0] = 1;\n\n                // Iterate over lengths from 1 to n\n                for (int len = 1; len <= length; ++len) {\n                    // Iterate over all possible inversion counts\n                    for (int inv = 0; inv <= MAX_INVERSIONS; ++inv) {\n                        // Update the dp table for current length and inversion count\n                        for (int newPos = 0; newPos < len; ++newPos) {\n                            int prevInv = inv - newPos;\n                            if (prevInv >= 0) {\n                                dp[len][inv] = (dp[len][inv] + dp[len - 1][prevInv]) % MOD;\n                            }\n                        }\n                    }\n\n                    // If there is a specific requirement for the current length\n                    if (requirementMap.find(len) != requirementMap.end()) {\n                        int requiredInversions = requirementMap.at(len);\n                        // Zero out all entries that do not match the required inversions\n                        for (int inv = 0; inv <= MAX_INVERSIONS; ++inv) {\n                            if (inv != requiredInversions) {\n                                dp[len][inv] = 0;\n                            }\n                        }\n                    }\n                }\n\n                // Sum up all valid permutations for length n\n                long result = 0;\n                for (const auto& count : dp[length]) {\n                    result = (result + count) % MOD;\n                }\n\n                return result;\n            }\n\n        private:\n            vector<vector<long>> dp;\n            unordered_map<int, int> requirementMap;\n            int length;\n        };\n\n        // Map to store end index and corresponding inversion count\n        unordered_map<int, int> reqMap;\n        for (const auto& req : requirements) {\n            reqMap[req[0] + 1] = req[1];\n        }\n\n        // Create an instance of nested DPHandler class\n        DPHandler handler(n, reqMap);\n        return handler.solve();\n    }\n};\n",
    "submit_ts": 1719071038.0
}