{
    "username": "ShyamSunder_11",
    "submission": "class Solution {\npublic:\n    using ll = long long int;\n    const int mod = 1e9+7;\n    ll binexp(ll x, ll y)\n{\n     ll res = 1;\n     x = x % mod;\n     while (y > 0)\n     {\n          if (y & 1)\n               res = (res * x) % mod;\n          y = y >> 1;\n          x = (x * x) % mod;\n     }\n     return res;\n}\n    unordered_map<string,ll>dp;\n\n    ll countWays(int curr, int jump, bool f, int target) {\n        if (curr == target) return 1;\n        if (curr > target) {\n            if (curr - 1 == target && !f) return 1;\n            return 0;\n        }\n        string key = to_string(curr) + \",\" + to_string(jump) + \",\" + to_string(f);\n        if (dp.find(key) != dp.end()) {\n            return dp[key];\n        }\n        ll cnt = 0;\n        if (!f && curr > 0) {\n            cnt += countWays(curr-1, jump, true, target);\n        }\n        cnt += countWays(curr + (1LL << jump),jump + 1, false, target);\n        return dp[key] = cnt;\n    }\n    int waysToReachStair(int k) {\n        if (k == 0) return 2;\n        if (k == 1 || k == 2) return 4;\n        return countWays(1,0,false,k);\n    }\n};",
    "submit_ts": "1716089698",
    "subm_id": "1261849044"
}