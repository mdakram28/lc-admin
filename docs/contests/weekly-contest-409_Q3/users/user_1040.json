{
    "username": "MOHITRAWAT061",
    "submission": "class Solution {\npublic:\n    void initializeDistances(int n, vector<int> &distances) {\n        for (int i = 0; i < n - 1; ++i) {\n            distances[i + 1] = distances[i] + 1;\n        }\n    }\n    void initializeNodeSet(int n, set<int> &nodeSet) {\n        for (int i = 0; i < n; ++i) {\n            nodeSet.insert(i);\n        }\n    }\n    pair<set<int>::iterator, set<int>::iterator> findBounds(int left, int right, set<int> &nodeSet) {\n        auto lowerBound = nodeSet.lower_bound(left + 1);\n        auto upperBound = nodeSet.lower_bound(right);\n        return {lowerBound, upperBound};\n    }\n    void eraseRange(set<int>::iterator lowerBound, set<int>::iterator upperBound, set<int> &nodeSet) {\n        nodeSet.erase(lowerBound, upperBound);\n    }\n    void processQuery(int left, int right, set<int> &nodeSet, vector<int> &result) {\n        auto [lowerBound, upperBound] = findBounds(left, right, nodeSet);\n        eraseRange(lowerBound, upperBound, nodeSet);\n        updateResult(nodeSet, result);\n    }\n    void updateResult(set<int> &nodeSet, vector<int> &result) {\n        result.push_back(nodeSet.size() - 1);\n    }\n    vector<int> shortestDistanceAfterQueries(int n, vector<vector<int>> &queries) {\n        vector<int> distances(n, 0);\n        initializeDistances(n, distances);\n        set<int> nodeSet;\n        initializeNodeSet(n, nodeSet);\n        vector<int> result;\n        for (const auto &query : queries) {\n            int left = query[0];\n            int right = query[1];\n            processQuery(left, right, nodeSet, result);\n        }\n        return result;\n    }\n};",
    "submit_ts": "1722743861",
    "subm_id": "1343801324"
}