{
    "username": "kevinlyk",
    "submission": "from typing import List, Dict\nimport sys\n# import heapq\n\n# class TrieNode:\n#     def __init__(self):\n#         self.children: Dict[str, TrieNode] = {}\n#         self.word_end: List[int] = []\n\n# class Trie:\n#     def __init__(self):\n#         self.root = TrieNode()\n    \n#     def insert(self, word: str, cost: int):\n#         node = self.root\n#         for char in word:\n#             if char not in node.children:\n#                 node.children[char] = TrieNode()\n#             node = node.children[char]\n#         node.word_end.append(cost)\n    \n#     def search_prefix(self, prefix: str) -> List[Tuple[int, int]]:\n#         node = self.root\n#         result = []\n#         length = 0\n#         for char in prefix:\n#             if char not in node.children:\n#                 break\n#             node = node.children[char]\n#             length += 1\n#             for cost in node.word_end:\n#                 result.append((length, cost))\n#         return result\n\nclass Solution:\n    def minimumCost(self, target: str, words: List[str], costs: List[int]) -> int:\n        n = len(target)\n        \n        # Create a dictionary to store the minimum cost for each word\n        word_cost_dict = {}\n        for word, cost in zip(words, costs):\n            if word in word_cost_dict:\n                word_cost_dict[word] = min(word_cost_dict[word], cost)\n            else:\n                word_cost_dict[word] = cost\n        \n        # Convert the dictionary to a list of tuples for easier processing\n        word_cost_pairs = list(word_cost_dict.items())\n        \n        # DP array initialized to infinity\n        dp = [sys.maxsize] * (n + 1)\n        dp[0] = 0  # Base case: no cost to construct an empty string\n        \n        # Fill the DP array\n        for i in range(n):\n            if dp[i] == sys.maxsize:\n                continue\n            for word, cost in word_cost_pairs:\n                word_len = len(word)\n                if i + word_len <= n and target[i:i + word_len] == word:\n                    dp[i + word_len] = min(dp[i + word_len], dp[i] + cost)\n        \n        return dp[n] if dp[n] != sys.maxsize else -1",
    "submit_ts": "1720323988",
    "subm_id": "1312388932"
}