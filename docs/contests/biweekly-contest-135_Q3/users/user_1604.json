{
    "username": "dalonghenin",
    "submission": "class Solution {\npublic:\n    int minChanges(vector<int>& nums, int k) {\n        int n = nums.size();\n        int record[n / 2];\n        map<int, int> count;\n        vector<int> vec;\n        cout.clear();\n        vec.clear();\n        for(int i = 0; i < nums.size() / 2; i++){\n            int a = nums[i];\n            int b = nums[n - i - 1];\n            int tmp = abs(a - b);\n            if(count.find(tmp) != count.end()){\n                count[tmp]++;\n            }else{\n                count[tmp] = 1;\n            }\n            //cout << tmp << \" \";\n            vec.push_back(max(max(a, b), k - min(a, b)));\n            //cout << k - min(a, b) << \" \" << nums[i] << endl;\n        }\n        //cout << endl;\n        sort(vec.begin(), vec.end());\n        for(int i = 0; i < vec.size(); i++){\n            cout << vec[i] << \" \";\n        }\n        cout << endl;\n        int res = -1;\n        for(auto &it : count){\n            auto index = lower_bound(vec.begin(), vec.end(), it.first);\n            int dist = distance(vec.begin(), index);\n            int less = dist;\n            int tmp = less * 2 + (n / 2 - it.second - less);\n            if(res == -1 || res > tmp){\n                res = tmp;\n            }\n        }\n        return res;\n    }\n};",
    "submit_ts": "1721489669",
    "subm_id": "548319746"
}