{
    "username": "wayNoway21",
    "submission": "class Solution {\npublic:\n    int binarySearch(const std::vector<int>& sortedList, int target) {\n        int left = 0;\n        int right = sortedList.size();\n        while (left < right) {\n            int mid = left + (right - left) / 2;\n            if (sortedList[mid] < target) {\n                left = mid + 1;\n            } else {\n                right = mid;\n            }\n        }\n        return left;\n    }\n\n    int minChanges(vector<int>& nums, int k) {\n        unordered_map<int, vector<int>> differenceMap;\n        vector<int> maxValues;\n\n        int n = nums.size();\n        for (int i = 0; i < n / 2; i++) {\n            int leftNum = nums[i];\n            int rightNum = nums[n - i - 1];\n            int difference = std::abs(leftNum - rightNum);\n            int maxVal =\n                std::max({leftNum, rightNum, k - leftNum, k - rightNum});\n\n            differenceMap[difference].push_back(maxVal);\n            maxValues.push_back(maxVal);\n        }\n\n        std::sort(maxValues.begin(), maxValues.end());\n        int minOperations = n;\n\n        for (const auto& entry : differenceMap) {\n            int difference = entry.first;\n            const auto& maxValList = entry.second;\n\n            int threshold = binarySearch(maxValues, difference) * 2 +\n                            (n / 2 - binarySearch(maxValues, difference));\n\n            for (int maxVal : maxValList) {\n                if (maxVal < difference) {\n                    threshold -= 2;\n                } else {\n                    threshold -= 1;\n                }\n            }\n\n            minOperations = std::min(minOperations, threshold);\n        }\n\n        return minOperations;\n    }\n};",
    "submit_ts": "1721489465",
    "subm_id": "1327454089"
}