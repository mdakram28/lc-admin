{
    "username": "ddiibboo",
    "submission": "class Solution {\n    public int minimumDiameterAfterMerge(int[][] edges1, int[][] edges2) {\n        int x = func(edges1);\n        int y = func(edges2);\n\n        return Math.max(x, Math.max(y, (x + 1) / 2 + (y + 1) / 2 + 1));\n    }\n\n    private int func(int[][] edges) {\n        if (edges.length == 0) return 0;\n        Map<Integer, List<Integer>> map = new HashMap<>();\n        for (int[] e : edges) {\n            map.computeIfAbsent(e[0], k -> new ArrayList<>()).add(e[1]);\n            map.computeIfAbsent(e[1], k -> new ArrayList<>()).add(e[0]);\n        }\n\n        int[] rc = new int[2];\n        rc[0] = rc[1] = -1;\n        dfs(map, rc, 0, -1, 0);\n\n        int[] rc2 = new int[2];\n        rc2[0] = rc2[1] = -1;\n        dfs(map, rc2, rc[1], -1, 0);\n        return rc2[0];\n    }\n\n    private void dfs(Map<Integer, List<Integer>> map, int[] rc, int u, int fa, int dep) {\n        if (rc[0] < dep) {\n            rc[0] = dep;\n            rc[1] = u;\n        }\n\n        for (int v : map.get(u)) {\n            if (v == fa) continue;\n            dfs(map, rc, v, u, dep + 1);\n        }\n    }\n}",
    "submit_ts": "1719717466",
    "subm_id": "1304392283"
}