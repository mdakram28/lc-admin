{
    "username": "tomarint",
    "submission": "const MOD: i64 = 1_000_000_007; // 10**9 + 7\n\n#[derive(Clone)]\nstruct FenwickTree {\n    n: usize,\n    data: Vec<i64>,\n}\nimpl FenwickTree {\n    fn new(n: usize) -> FenwickTree {\n        FenwickTree {\n            n: n,\n            data: vec![0; n + 1],\n        }\n    }\n    // --- sum ---\n    fn add(&mut self, i: usize, x: i64) {\n        let mut i = i + 1;\n        let x = x % MOD;\n        while i <= self.n {\n            self.data[i] += x;\n            self.data[i] %= MOD;\n            i += i & i.wrapping_neg();\n        }\n    }\n    fn sum(&self, i: usize) -> i64 {\n        let mut i = i + 1;\n        let mut s = 0;\n        while i > 0 {\n            s += self.data[i];\n            s %= MOD;\n            i -= i & i.wrapping_neg();\n        }\n        s\n    }\n}\n\nimpl Solution {\n    pub fn count_of_pairs(nums: Vec<i32>) -> i32 {\n        let n = nums.len();\n        let nums = nums.iter().map(|&x| x as usize).collect::<Vec<_>>();\n        let mut dp = vec![FenwickTree::new(1001); n];\n        // [0]\n        for a in 0..=nums[0] {\n            dp[0].add(a, 1);\n        }\n        for i in 1..n {\n            for a in 0..=nums[i] {\n                // println!(\"i={} a={}\", i, a);\n                if nums[i-1] >= nums[i] {\n                    let val = dp[i-1].sum(a);\n                    dp[i].add(a, val);\n                } else {\n                    let d = nums[i] - nums[i-1];\n                    if a >= d {\n                        let val = dp[i-1].sum(a-d);\n                        dp[i].add(a, val);\n                    }\n                }\n            }\n        }\n        let ans = dp[n - 1].sum(1000);\n        (ans % MOD) as i32\n    }\n}\n",
    "submit_ts": "1723347897",
    "subm_id": "1351607670"
}