{
    "username": "sharmaaarushi",
    "submission": "class Solution {\npublic:\n    int numberOfPermutations(int n, vector<vector<int>>& requirements) {\n        const int MOD = 1e9 + 7;\n        sort(requirements.begin(), requirements.end());\n\n        vector<vector<int>> dp(n + 1, vector<int>(401, 0));\n        dp[0][0] = 1; \n\n        for (int length = 1; length <= n; ++length) {\n            vector<vector<int>> new_dp(n + 1, vector<int>(401, 0));\n            for (int inversion_count = 0; inversion_count <= 400; ++inversion_count) {\n                if (dp[length-1][inversion_count] == 0) continue;\n\n                for (int position = 0; position < length; ++position) {\n                    int new_inversion_count = inversion_count + (length - 1 - position);\n                    if (new_inversion_count <= 400) {\n                        new_dp[length][new_inversion_count] = (new_dp[length][new_inversion_count] + dp[length-1][inversion_count]) % MOD;\n                    }\n                }\n            }\n            dp = new_dp;\n\n            for (const auto& requirement : requirements) {\n                if (requirement[0] + 1 == length) {\n                    int required_inversions = requirement[1];\n                    for (int inversion_count = 0; inversion_count <= 400; ++inversion_count) {\n                        if (inversion_count != required_inversions) {\n                            dp[length][inversion_count] = 0;\n                        }\n                    }\n                }\n            }\n        }\n\n        int result = 0;\n        for (int inversion_count = 0; inversion_count <= 400; ++inversion_count) {\n            result = (result + dp[n][inversion_count]) % MOD;\n        }\n\n        return result;\n    }\n};\n",
    "submit_ts": 1719067791.0
}