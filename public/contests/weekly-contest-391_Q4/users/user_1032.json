{
    "username": "taoz-kc",
    "submission": "from typing import List, Tuple, Optional\n\nfrom collections import defaultdict,deque\nfrom functools import cache\nimport heapq\nfrom heapq import heappop,heappush \nfrom sortedcontainers import SortedDict,SortedList\n\nimport math\nINF  = math.inf\n\n\n\n\ndef maxManhattan(ps):\n    ls = []\n    for i,(x,y) in enumerate(ps):\n        ls.append((x+y,x-y,y-x,-x-y,i))\n    mx =-1\n    ret =[]\n    for i in range(4):\n        ls.sort(key=lambda x:x[i])\n        #print(ls)\n        a,b = ls[0][4],ls[-1][4]\n        tmp = abs(ps[a][0] -ps[b][0]) + abs(ps[a][1] -ps[b][1])\n        if tmp>mx:\n            ret = [a,b]\n            mx = tmp \n    return (mx,ret)\n\nclass Solution:\n    def minimumDistance(self, points: List[List[int]]) -> int:\n        mx,ret = maxManhattan(points)\n        res = 10**10\n        a,b = ret \n        #print(a,b,mx)\n        ps1 = points[:a] + points[a+1:]\n        ps2 =points[:b] + points[b+1:]\n        for ps in ps1,ps2:\n            mx,ret = maxManhattan(ps)\n            if mx <res:\n                res =mx\n        return res"
}