{
    "username": "VbP8QTwOcu",
    "submission": "/**\n * @param {string} target\n * @param {string[]} words\n * @param {number[]} costs\n * @return {number}\n */\n\nclass TrieNode {\n    constructor() {\n        this.children = {};\n        this.wordEnds = [];\n    }\n}\n\nclass Trie {\n    constructor() {\n        this.root = new TrieNode(); \n    }\n\n    insert(word, index, cost) {\n        let node = this.root;\n        for (let c of word) {\n            if (!node.children[c]) {\n                node.children[c] = new TrieNode(); \n            }\n            node = node.children[c];\n        }\n        node.wordEnds.push([index, cost]);\n    }\n}\n\nconst minimumCost = function(target, words, costs) {\n    const n = target.length;\n    const dp = new Array(n + 1).fill(Infinity);\n    dp[0] = 0;\n\n    const trie = new Trie();\n    for (let i = 0; i < words.length; ++i) {\n        trie.insert(words[i], i, costs[i]); \n    }\n\n    for (let i = 0; i < n; ++i) {\n        if (dp[i] === Infinity) {\n            continue; \n        }\n\n        let node = trie.root;\n        for (let j = i; j < n; ++j) {\n            if (!node.children[target[j]]) {\n                break;  \n            }\n            node = node.children[target[j]];\n            for (let [wordIndex, cost] of node.wordEnds) {\n                const wordLen = words[wordIndex].length;\n                if (i + wordLen <= n) {\n                    dp[i + wordLen] = Math.min(dp[i + wordLen], dp[i] + cost);  \n                }\n            }\n        }\n    }\n\n    return dp[n] === Infinity ? -1 : dp[n];  \n};\n",
    "submit_ts": "1720323824",
    "subm_id": "1312384915"
}