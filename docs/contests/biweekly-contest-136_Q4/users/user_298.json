{
    "username": "yumiysong",
    "submission": "class Solution {\n    class Node {\n        Set<Node> children;\n        int val;\n        public Node(int val) {\n            this.val = val;\n            children = new HashSet<>();\n        }\n    }\n    public int[] timeTaken(int[][] edges) {\n        Node[] nodes = new Node[edges.length+1];\n        for (int i = 0; i < nodes.length; ++i) {\n            nodes[i] = new Node(i);\n        }\n        for (int[] edge : edges) {\n            nodes[edge[0]].children.add(nodes[edge[1]]);\n            nodes[edge[1]].children.add(nodes[edge[0]]);\n        }\n        int[] times = new int[nodes.length];\n        int[][] depths = new int[nodes.length][4]; // take note of the deepest and second deepest child\n        traverse(nodes[0], depths, -1);\n        findTimes(nodes[0], depths, times, -1, 0);\n        return times;\n    }\n    void findTimes(Node root, int[][] depths, int[] answer, int parent, int pdepth) {\n        answer[root.val] = Math.max(pdepth,Math.max(depths[root.val][0],depths[root.val][2]));\n        for (Node child : root.children) {\n            if (child.val == parent) {\n                continue;\n            }\n            if (child.val == depths[root.val][1]) {\n                findTimes(child, depths, answer, root.val, Math.max(pdepth,depths[root.val][2])+(root.val+1)%2+1);\n            } else {\n                findTimes(child, depths, answer, root.val, Math.max(pdepth,depths[root.val][0])+(root.val+1)%2+1);\n            }\n        }\n    }\n    void traverse(Node root, int[][] depths, int parent) {\n        for (Node child : root.children) {\n            if (child.val == parent) {\n                continue;\n            }\n            traverse(child, depths, root.val);\n        }\n        for (Node child : root.children) {\n            if (child.val == parent) {\n                continue;\n            }\n            if (depths[child.val][0] + (child.val+1)%2 + 1 > depths[root.val][0]) {\n                depths[root.val][2] = depths[root.val][0];\n                depths[root.val][3] = depths[root.val][1];\n                depths[root.val][0] = depths[child.val][0] + (child.val+1)%2 + 1;\n                depths[root.val][1] = child.val;\n            } else if (depths[child.val][0] + (child.val+1)%2 + 1 > depths[root.val][2]) {\n                depths[root.val][2] = depths[child.val][0] + (child.val+1)%2 + 1;\n                depths[root.val][3] = child.val;\n            }\n        }\n    }\n}",
    "submit_ts": "1722700009",
    "subm_id": "1343228972"
}