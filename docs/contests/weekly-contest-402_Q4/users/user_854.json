{
    "username": "hulot",
    "submission": "class Solution {\n    public List<Integer> countOfPeaks(int[] nums, int[][] queries) {\n        int n = nums.length;\n        BIT bit = new BIT(n);\n        for (int i = 1; i < n - 1; i++) {\n            if (nums[i] > nums[i-1] && nums[i] > nums[i+1]) bit.add(i, 1);\n        }\n        List<Integer> res = new ArrayList<>();\n        for (int[] query : queries) {\n            if (query[0] == 1) {\n                res.add(Math.max(0, bit.get(query[2]-1) - bit.get(query[1])));\n            } else {\n                int idx = query[1], val = query[2];\n                update(bit, nums, idx, -1);\n                update(bit, nums, idx-1, -1);\n                update(bit, nums, idx+1, -1);\n                nums[idx] = val;\n                update(bit, nums, idx, 1);\n                update(bit, nums, idx-1, 1);\n                update(bit, nums, idx+1, 1);\n            }\n        }\n        return res;\n    }\n    \n    private void update(BIT bit, int[] nums, int idx, int delta) {\n        int n = nums.length;\n        if (idx - 1 >= 0 && idx + 1 < n && nums[idx] > nums[idx-1] && nums[idx] > nums[idx+1]) {\n            bit.add(idx, delta);\n        }        \n    }\n    \n    private class BIT {\n        private int[] bit;\n        public BIT(int n) {\n            bit = new int[n+1];\n        }\n        \n        public void add(int val, int delta) {\n            if (val <= 0) return;\n            for (int i = val; i < bit.length; i += (i & -i)) bit[i] += delta;\n        }\n        \n        public int get(int val) {\n            int res = 0;\n            for (int i = val; i > 0; i -= (i & -i)) res += bit[i];\n            return res;\n        }\n    }\n}",
    "submit_ts": "1718508325",
    "subm_id": "1289678070"
}