{
    "username": "ekalavya_pc",
    "submission": "class Solution {\npublic:\n    int memo[5001][51][2][2];\n    int findMaxLength(int idx, int remaining, int isSelected, int isStart, vector<int>& numbers, vector<int>& nextIndex) {\n        // cout << idx << \" \" << remaining << \" \" << isSelected << \"    \";\n        if (idx == numbers.size()) return 0;\n        if (memo[idx][remaining][isSelected][isStart] != -1) return memo[idx][remaining][isSelected][isStart];\n\n        int result = 0;\n        if (isStart) {\n            result = max(result, findMaxLength(idx + 1, remaining, isSelected, isStart, numbers, nextIndex));\n        } else {\n            result = max(result, findMaxLength(idx + 1, remaining, 0, isStart, numbers, nextIndex));\n        }\n\n        if (isSelected) {\n            result = max(result, 1 + findMaxLength(nextIndex[idx], remaining, 1, 0, numbers, nextIndex));\n            result = max(result, 1 + findMaxLength(idx + 1, remaining, 0, 0, numbers, nextIndex));\n        } else if (remaining > 0) {\n            result = max(result, 1 + findMaxLength(idx + 1, remaining - 1, 0, 0, numbers, nextIndex));\n            result = max(result, 1 + findMaxLength(nextIndex[idx], remaining - 1, 1, 0, numbers, nextIndex));\n        }\n        return memo[idx][remaining][isSelected][isStart] = result;\n    }\n\n    int maximumLength(vector<int>& numbers, int k) {\n        int n = numbers.size();\n        vector<int> nextIndex(n, n);\n        unordered_map<int, int> lastPosition;\n\n        for (int i = 0; i < n; i++) {\n            if (lastPosition.find(numbers[i]) != lastPosition.end()) {\n                nextIndex[lastPosition[numbers[i]]] = i;\n            }\n            lastPosition[numbers[i]] = i;\n        }\n\n        memset(memo, -1, sizeof(memo));\n        return findMaxLength(0, k, 1, 1, numbers, nextIndex);\n    }\n};\n\n\n",
    "submit_ts": "1717862088",
    "subm_id": "1281811681"
}