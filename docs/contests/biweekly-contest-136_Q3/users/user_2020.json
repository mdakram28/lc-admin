{
    "username": "vinesh_01",
    "submission": "import java.util.*;\n\nclass Solution {\n    public int minFlips(int[][] grid) {\n        int n = grid.length;\n        int m = grid[0].length;\n        int c1 = 0;\n        int c = 0;\n        List<Integer> lst = new ArrayList<>(Collections.nCopies(5, 0));\n        int[][] cpy = new int[n][m];\n        for (int i = 0; i < n; i++) {\n            cpy[i] = grid[i].clone();\n        }\n        int sum = 0;\n        for(int i = 0; i < 100; i++){\n            sum += i;\n        }\n        for(int i = 0; i < 100; i++){\n            sum += i;\n        }\n        for (int p = 0; p < n; p++) {\n            for (int q = 0; q < m; q++) {\n                int cr = 0;\n                int df = 0;\n                Set<Pair> st = new HashSet<>();\n                st.add(new Pair(p, q));\n                st.add(new Pair(p, m - q - 1));\n                st.add(new Pair(n - p - 1, q));\n                st.add(new Pair(n - p - 1, m - q - 1));\n                df = st.size();\n                for (Pair i : st) {\n                    cr += cpy[i.x][i.y];\n                }\n                if (cr == 0 || cr == 4) continue;\n                if (cr == 1 && df == 4) {\n                    c++;\n                    cpy[p][q] = 0;\n                    cpy[n - p - 1][q] = 0;\n                    cpy[p][m - q - 1] = 0;\n                    cpy[n - p - 1][m - q - 1] = 0;\n                } else {\n                    c += (df - cr);\n                    cpy[p][q] = 1;\n                    cpy[n - p - 1][q] = 1;\n                    cpy[p][m - q - 1] = 1;\n                    cpy[n - p - 1][m - q - 1] = 1;\n                }\n                lst.set(cr, lst.get(cr) + 1);\n            }\n        }\n        for(int i = 0; i < 100; i++){\n            sum -= i;\n        }\n        for (int p = 0; p < n; p++) {\n            for (int q = 0; q < m; q++) {\n                if (cpy[p][q] == 1) c1++;\n            }\n        }\n        for(int i = 0; i < 100; i++){\n            sum += i;\n        }\n        for(int i = 0; i < 100; i++){\n            sum -= i;\n        }\n        if (c1 % 4 == 0) {\n            return c;\n        } else {\n            if (c1 % 4 == 1) {\n                return c + 1;\n            } else {\n                boolean chk = false;\n                if (n % 2 == 1) {\n                    for (int p = 0; p < m; p++) {\n                        if (p != m - p - 1 && grid[n / 2][p] + grid[n / 2][m - p - 1] == 1) {\n                            chk = true;\n                            break;\n                        }\n                    }\n                }\n                if (m % 2 == 1) {\n                    for (int p = 0; p < n; p++) {\n                        if (p != n - 1 - p && grid[p][m / 2] + grid[n - p - 1][m / 2] == 1) {\n                            chk = true;\n                            break;\n                        }\n                    }\n                }\n                if (c1 % 4 == 2) {\n                    if (chk) return c;\n                    return c + 2;\n                } else {\n                    if (chk) return c + 1;\n                    return c + 3;\n                }\n            }\n        }\n\n    }\n\n    private static class Pair {\n        int x, y;\n        Pair(int x, int y) {\n            this.x = x;\n            this.y = y;\n        }\n\n        @Override\n        public int hashCode() {\n            return Objects.hash(x, y);\n        }\n\n        @Override\n        public boolean equals(Object obj) {\n            if (this == obj) return true;\n            if (obj == null || getClass() != obj.getClass()) return false;\n            Pair pair = (Pair) obj;\n            return x == pair.x && y == pair.y;\n        }\n    }\n}\n",
    "submit_ts": "1722699845",
    "subm_id": "1343224146"
}