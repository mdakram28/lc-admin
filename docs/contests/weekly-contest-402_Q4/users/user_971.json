{
    "username": "AnDVT",
    "submission": "class Node:\n  def __init__(self, val=0):\n    self.val = val\n    self.left = None\n    self.right = None\n\nclass SegmentTree:\n  def __init__(self, arr):\n    self.n = len(arr)\n    self.root = self.build_tree(arr, 0, self.n - 1)\n\n  def build_tree(self, arr, start, end):\n    if start == end:\n      return Node(arr[start])\n    mid = (start + end) // 2\n    left_child = self.build_tree(arr, start, mid)\n    right_child = self.build_tree(arr, mid + 1, end)\n    node = Node(left_child.val + right_child.val)\n    node.left = left_child\n    node.right = right_child\n    return node\n\n  def query(self, node, q_start, q_end, start, end):\n    # No overlap\n    if q_end < start or q_start > end:\n      return 0\n    # Complete overlap\n    if q_start <= start and q_end >= end:\n      return node.val\n    # Partial overlap\n    mid = (start + end) // 2\n    left_sum = self.query(node.left, q_start, q_end, start, mid)\n    right_sum = self.query(node.right, q_start, q_end, mid + 1, end)\n    return left_sum + right_sum\n\n  def update(self, node, index, val, start, end):\n    if start == end:\n      node.val = val\n      return\n    mid = (start + end) // 2\n    if index <= mid:\n      self.update(node.left, index, val, start, mid)\n    else:\n      self.update(node.right, index, val, mid + 1, end)\n    # Update current node after updating children\n    node.val = node.left.val + node.right.val\n\nclass Solution:\n    def countOfPeaks(self, nums: List[int], queries: List[List[int]]) -> List[int]:\n        l = [0]*len(nums)\n        for i in range(1, len(nums)-1):\n            if nums[i] > nums[i-1] and nums[i] > nums[i+1]:\n                l[i] = 1\n        segment_tree = SegmentTree(l)\n        res = []\n        for i, query in enumerate(queries):\n            if query[0] == 1:\n               res.append(segment_tree.query(segment_tree.root, query[1]+1, query[2]-1, 0, len(nums)-1))\n            else:\n               _, index, val = query\n               nums[index] = val\n               for idx in range(max(1,index-1), min(index+2, len(nums)-1)):\n                    # print(i, idx)\n                    l_idx = 0\n                    if nums[idx] > nums[idx-1] and nums[idx] > nums[idx+1]:\n                        l_idx = 1\n                    if l_idx != l[idx]:\n                        l[idx] = l_idx\n                        segment_tree.update(segment_tree.root, idx, l_idx, 0, len(nums)-1)\n            # print(\"l\", l)\n        return res",
    "submit_ts": "1718508012",
    "subm_id": "1289669221"
}