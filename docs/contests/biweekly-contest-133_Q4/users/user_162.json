{
    "username": "Aman_Choudhari",
    "submission": "#include <vector>\n#include <algorithm>\n\nclass Solution {\npublic:\n    int numberOfPermutations(int n, std::vector<std::vector<int>>& requirements) {\n        const int MOD = 1e9 + 7;\n\n        // Sort requirements by endi to process in order\n        std::sort(requirements.begin(), requirements.end());\n\n        // dp[i][k] will represent the number of ways to arrange the first i numbers with k inversions\n        std::vector<std::vector<int>> dp(n + 1, std::vector<int>(400 + 1, 0));\n        dp[0][0] = 1; // base case: 1 way to arrange 0 elements with 0 inversions\n\n        for (int len = 1; len <= n; ++len) {\n            std::vector<std::vector<int>> new_dp(n + 1, std::vector<int>(400 + 1, 0));\n            for (int inv = 0; inv <= 400; ++inv) {\n                if (dp[len - 1][inv] == 0) continue;\n                for (int i = 0; i < len; ++i) {\n                    int new_inv = inv + (len - 1 - i);\n                    if (new_inv <= 400) {\n                        new_dp[len][new_inv] = (new_dp[len][new_inv] + dp[len - 1][inv]) % MOD;\n                    }\n                }\n            }\n            dp = new_dp;\n\n            // Apply constraints for the current length if any\n            for (auto& req : requirements) {\n                if (req[0] + 1 == len) {\n                    std::vector<int> constrained(400 + 1, 0);\n                    constrained[req[1]] = dp[len][req[1]];\n                    dp[len] = constrained;\n                }\n            }\n        }\n\n        return dp[n][requirements.back()[1]];\n    }\n};\n",
    "submit_ts": "1719068917",
    "subm_id": "1296780985"
}