{
    "username": "shivam_dangi",
    "submission": "from typing import List, Dict\n\nclass TrieNode:\n    def __init__(self):\n        self.children: Dict[str, TrieNode] = {}\n        self.min_cost = float('inf')\n\nclass Solution:\n    def minimumCost(self, target: str, words: List[str], costs: List[int]) -> int:\n        n = len(target)\n        dp = [float('inf')] * (n + 1)\n        dp[0] = 0\n        \n        # Build the Trie\n        root = TrieNode()\n        for word, cost in zip(words, costs):\n            node = root\n            for char in word:\n                if char not in node.children:\n                    node.children[char] = TrieNode()\n                node = node.children[char]\n            node.min_cost = min(node.min_cost, cost)\n        \n        # Dynamic Programming with Trie traversal\n        for i in range(n):\n            if dp[i] == float('inf'):\n                continue  # Skip if this position is not reachable\n\n            node = root\n            for j in range(i, n):\n                char = target[j]\n                if char in node.children:\n                    node = node.children[char]\n                    dp[j + 1] = min(dp[j + 1], dp[i] + node.min_cost)\n                else:\n                    break\n\n        return dp[n] if dp[n] != float('inf') else -1\n",
    "submit_ts": "1720320235",
    "subm_id": "1312287699"
}