{
    "username": "ryanlin118",
    "submission": "class Solution {\npublic:\n    int maximumLength(vector<int>& nums, int k) {\n        // nums.length <= 5000, k <= 50\n        // algo: n^2 k = 25,000,000 * 50 = 125,000,000 (no good)\n        // previously: nums.length <= 500, k <= 25\n        // algo: n^2 k = 250000 * 25 = 6,250,000\n        unordered_map<int, int> numToId;\n        for (int i = 0; i < nums.size(); i++) {\n            if (!numToId.count(nums[i])) {\n                numToId[nums[i]] = numToId.size();\n            }\n        }\n        // data structure: mx[i] = longest that uses i \"jumps\"\n        vector<int> mx(k + 1);\n        vector<vector<int>> dp(numToId.size(), vector<int>(k + 1));\n        for (int i = 0; i < nums.size(); i++) {\n            int idx = numToId[nums[i]];\n            dp[idx][0]++;\n            // every time you increase j you check all j-1s of others \n            for (int j = dp[idx].size() - 1; j > 0; j--) {\n                dp[idx][j] = max(dp[idx][j] + 1, mx[j-1] + 1);\n                \n                //dp[idx][j]++;\n                //if (j > 0) {\n                //    for (int l = 0; l < dp.size(); l++) {\n                //        if (l == idx) continue;\n                //        dp[idx][j] = max(dp[idx][j], dp[l][j-1]+1);\n                //    }\n                //}\n            }\n            for (int j = k; j >= 0; j--) {\n                mx[j] = max(mx[j], dp[idx][j]);\n            }\n        }\n        return mx[k];\n    }\n};",
    "submit_ts": 1717862105.0
}