{
    "username": "kind-agnesipe9",
    "submission": "class Solution {\n    public int[] timeTaken(int[][] edges) {\n        ArrayList<Integer>[] tree=new ArrayList[edges.length+1];\n        ArrayList<int[]>[] list=new ArrayList[edges.length+1];\n        for (int i = 0; i < tree.length; i++) {\n            tree[i] = new ArrayList<>();\n            list[i] = new ArrayList<>();\n            list[i].add(new int[]{-2,0});\n        }\n        for (int i = 0; i < edges.length; i++) {\n            tree[edges[i][0]].add(edges[i][1]);\n            tree[edges[i][1]].add(edges[i][0]);\n        }\n        int[] ans=new int[edges.length+1];\n        down(tree,0,-1,list);\n        dfs(tree,0,-1,list,0,ans);\n        return ans;\n    }\n    public void down(ArrayList<Integer>[] tree,int cur,int fu,ArrayList<int[]>[] list ){\n        for (int i = 0; i <tree[cur].size() ; i++) {\n            int child=tree[cur].get(i);\n            if(child!=fu){\n                down(tree,child,cur,list);\n                if(child%2==0){\n                    list[cur].add(new int[]{child,2+list[child].get(0)[1]});\n                }else {\n                    list[cur].add(new int[]{child,1+list[child].get(0)[1]});\n                }\n            }\n        }\n        Collections.sort(list[cur],(o1, o2) -> o2[1]-o1[1]);\n    }\n    public void dfs(ArrayList<Integer>[] tree,int cur,int fu,ArrayList<int[]>[] list,int up,int[] ans){\n        ans[cur]=Integer.max(list[cur].get(0)[1],up);\n        for (int i = 0; i <tree[cur].size() ; i++) {\n            int child=tree[cur].get(i);\n            if(child!=fu){\n                int sub=child==list[cur].get(0)[0]?list[cur].get(1)[1]:list[cur].get(0)[1];\n                int next=cur%2==0?2:1;\n                dfs(tree,child,cur,list,Integer.max(up,sub)+next,ans);\n            }\n        }\n    }\n}",
    "submit_ts": "1722700105",
    "subm_id": "552278426"
}