{
    "username": "sbiswas165",
    "submission": "class Solution {\n    \n    static long mod = (long) (1e9 + 9);\n    static long base = 1009;\n    \n    \n    public int minimumCost(String target, String[] words, int[] cost) {\n        int n= target.length();\n        char[] A = new char[n+1];\n        \n        for (int i = 1; i <= n; i++) {\n            A[i] = target.charAt(i-1);\n        }\n        \n        long[] powers = new long[n+1];\n        powers[0] = 1;\n        \n        for (int i = 1; i <= n; i++) {\n            powers[i] = powers[i-1] * base;\n            powers[i] %= mod;\n        }\n        \n        HashSet<Integer> distinctLengths = new HashSet<Integer>();\n        HashMap<Long, Integer> map = new HashMap<Long, Integer>();\n        \n        for (int i = 0; i < words.length; i++) {\n            distinctLengths.add(words[i].length());\n            \n            long hash = hash(words[i]);\n            \n            if (map.containsKey(hash)) {\n                map.put(hash, Math.min(cost[i], map.get(hash)));\n            } else {\n                map.put(hash, cost[i]);   \n            }\n            \n        }\n        \n        \n        ArrayList<Integer> lengths = new ArrayList<Integer>();\n        Iterator<Integer> it = distinctLengths.iterator();\n        while (it.hasNext()) {\n            lengths.add(it.next());\n        }\n        \n        \n        \n        \n        long[] hash = new long[n+1];\n        hash[1] = A[1] - '0' + 1;\n        for (int i = 2; i <= n; i++) {\n            long local = A[i] - '0' + 1;\n            hash[i] = base * hash[i-1];\n            hash[i] %= mod;\n            hash[i] += local;\n            hash[i] %= mod;\n        }\n        \n        // System.out.println(Arrays.toString(A));\n        // System.out.println(Arrays.toString(hash));\n        // System.out.println(map);\n        // System.out.println(lengths);\n        \n        \n        int[] dp = new int[n+1];\n        int inf = Integer.MAX_VALUE;\n        Arrays.fill(dp, inf);\n        dp[0] = 0;\n        \n        Collections.sort(lengths);\n        \n        for (int i = 1; i <= n; i++) {\n            for (int len : lengths) {\n                if (len > i) break;\n                if (dp[i-len] == inf) continue;\n                long loc = range(hash, powers, i-len+1, i);\n                if (map.containsKey(loc)) {\n                    dp[i] = Math.min(dp[i], dp[i-len] + map.get(loc));\n                } \n            }\n        }\n        \n        \n        if (dp[n] == inf) {\n            return -1;\n        } else {\n            return dp[n];\n        }\n    }\n    \n    static long range(long[] hash, long[] powers, int a, int b) {\n        long start = hash[b];\n        long end = hash[a-1] * powers[b-a+1];\n        end %= mod;\n        long result = start - end;\n        result %= mod;\n        if (result < 0) {\n            result = result + mod;\n        }\n        \n        return result;\n    }\n    \n    static long hash(String s) {\n        long a = 0;\n        a = s.charAt(0) - '0' + 1;\n        for (int i = 1; i < s.length(); i++) {\n            a *= base;\n            a %= mod;\n            long loc = s.charAt(i) - '0' + 1;\n            a += loc;\n            a %= mod;\n        }\n        return a;\n    }\n}",
    "submit_ts": "1720322810",
    "subm_id": "1312359672"
}