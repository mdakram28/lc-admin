{
    "username": "evanchun",
    "submission": "#[derive(Default, Debug)]\npub struct Trie {\n    children: [Option<Box<Trie>>; 26],\n    cost: Option<i32>,\n}\n\nimpl Solution {\npub fn minimum_cost(t: String, words: Vec<String>, costs: Vec<i32>) -> i32 {\n    use std::collections::HashMap;\n\n    let mut root = Trie::default();\n\n    for (i, word) in words.into_iter().enumerate() {\n        let mut curr = &mut root;\n\n        for c in word.chars() {\n            let c = c as usize - 'a' as usize;\n            curr = curr.children[c].get_or_insert_with(Default::default);\n        }\n\n        if let Some(cost) = curr.cost {\n            curr.cost = Some(costs[i].min(cost));\n        } else {\n            curr.cost = Some(costs[i]);\n        }\n    }\n\n    fn dfs(t: &Vec<usize>, root: &Trie, i: usize, dp: &mut Vec<i32>) -> Option<i32> {\n        if i == t.len() {\n            return Some(0);\n        }\n\n        if i > t.len() {\n            return None;\n        }\n\n        if dp[i] != -1 {\n            return Some(dp[i]);\n        }\n\n        let mut res = i32::MAX;\n        let mut curr = root;\n        let mut traversed = 0;\n\n        for j in i..t.len() {\n            let Some(next) = curr.children[t[j]].as_ref() else {\n                break;\n            };\n\n            traversed += 1;\n\n            if let Some(cost) = next.cost.as_ref() {\n                if let Some(total) = dfs(t, root, i + traversed, dp) {\n                    res = res.min(total + cost);\n                }\n            }\n\n            curr = next;\n        }\n\n        if res == i32::MAX {\n            return None;\n        }\n\n        dp[i] = res;\n        return Some(res);\n    }\n\n    let t: Vec<usize> = t.chars().map(|c| c as usize - 'a' as usize).collect();\n    let mut dp: Vec<i32> = vec![-1; t.len()];\n\n    dfs(&t, &root, 0, &mut dp).unwrap_or(-1)\n}\n}",
    "submit_ts": "1720324358",
    "subm_id": "1312397563"
}