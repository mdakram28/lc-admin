{
    "username": "evancui",
    "submission": "class Solution {\npublic:\n    struct node {\n        node* left;\n        node* right;\n        int l, r;\n        int maxlen, leftlen, rightlen;\n        \n        node(int l, int r) : left(0), right(0), l(l), r(r) {\n            maxlen = leftlen = rightlen = r - l;\n            \n        }\n        \n        void insert(int x) {\n            if (x < l || x > r) return;\n            if (l == r -1) {\n                if (x == l) {\n                    leftlen = 0;\n                } else {\n                    rightlen = 0;\n                }\n                return;\n            }\n            \n            if (l < r - 1 && (left == NULL ||right == NULL)) {\n                int m = (l + r) / 2;\n                \n                left = new node(l, m);\n                right = new node(m, r);\n            }\n            \n            left->insert(x); right->insert(x);\n            \n            maxlen = max(left->maxlen, right->maxlen);\n            maxlen = max(maxlen, left->rightlen + right->leftlen);\n            \n            leftlen = left->leftlen;\n            if (leftlen == left->r - left->l && left->leftlen == left->rightlen) {\n                leftlen += right->leftlen;\n            }\n            \n            rightlen = right->rightlen;\n            if (rightlen == right->r - right->l && right->rightlen == right->leftlen) {\n                rightlen += left->rightlen;\n            }\n        }\n        \n        pair<int, int> query(int x) {\n            pair<int, int> ans;\n            if (x >= r) {\n                ans = { leftlen, maxlen };\n            } else {\n                if (l == r - 1) {\n                    ans = { 0, 0 };\n                } else {\n                    int m = (l + r) / 2;\n                    if (!left || !right) {\n                        left = new node(l, m);\n                        right = new node(m, r);\n                    }\n                    if (x <= m) {\n                        ans = left->query(x);\n                    } else {\n                        auto [r_leftlen, r_maxlen ] = right->query(x);\n                        \n                        int ansmaxlen = max(left->maxlen, r_maxlen);\n                        ansmaxlen = max(ansmaxlen, left->rightlen + r_leftlen);\n                        \n                        int ansleftlen = left->leftlen;\n                        if (left->leftlen == left->rightlen && left->leftlen == left->r - left->l) {\n                            ansleftlen += r_leftlen;\n                        }\n\n                        ans = {ansleftlen, ansmaxlen };\n                    }\n                }\n            }\n            \n        //    cout << \"query\" << x << \" in \" << l << \" \" << r << \" ret \" << ans.first << \" \" <<ans.second << endl; \n            \n            return ans;\n        }\n    };\n    vector<bool> getResults(vector<vector<int>>& queries) {\n        int n = queries.size();\n        int maxlen = min(50000, n *3);\n        node tree(0, maxlen);\n        \n        vector<bool> ans;\n        for (auto &q : queries) {\n            int t = q[0], x = q[1];\n            int sz = 0;\n            if (t == 2) {\n                sz = q[2];\n                auto [leftlen, maxlen]= tree.query(x);\n            //    cout << x << \" \" << leftlen << \" \" << maxlen << \" \" << sz << endl;\n                ans.push_back(maxlen >= sz);\n            } else {\n                tree.insert(x);\n            }\n        }\n        \n        return ans;\n    }\n};",
    "submit_ts": "1716651272",
    "subm_id": "534774402"
}