{
    "username": "T_Adarsh_249",
    "submission": "\n\nclass Solution {\nprivate:\n    struct Node {\n        unordered_map<char, Node*> offspring;\n        vector<pair<int, int>> wordCosts;\n    };\n\n    class MyTrie {\n    public:\n        Node* root;\n        MyTrie() {\n            root = new Node();\n        }\n\n        void insert(const string& word, int idx, int cost) {\n            Node* currentNode = root;\n            for (char ch : word) {\n                if (!currentNode->offspring.count(ch)) {\n                    currentNode->offspring[ch] = new Node();\n                }\n                currentNode = currentNode->offspring[ch];\n            }\n            currentNode->wordCosts.push_back({idx, cost});\n        }\n    };\n\n    void populateTrie(MyTrie& trie, const vector<string>& words, const vector<int>& costs) {\n        for (int i = 0; i < words.size(); ++i) {\n            trie.insert(words[i], i, costs[i]);\n        }\n    }\n\n    void processSubstrings(MyTrie& trie, const string& target, const vector<string>& words, vector<int>& dp) {\n        int targetLen = target.size();\n        for (int start = 0; start < targetLen; ++start) {\n            if (dp[start] == INT_MAX) continue;\n\n            Node* node = trie.root;\n            for (int end = start; end < targetLen; ++end) {\n                if (!node->offspring.count(target[end])) break;\n\n                node = node->offspring[target[end]];\n                for (const auto& [wordIndex, cost] : node->wordCosts) {\n                    int wordLen = words[wordIndex].size();\n                    if (start + wordLen <= targetLen) {\n                        dp[start + wordLen] = min(dp[start + wordLen], dp[start] + cost);\n                    }\n                }\n            }\n        }\n    }\n\npublic:\n    vector<int> dp;\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int n = target.size();\n        dp.resize(n + 1, INT_MAX);\n        dp[0] = 0;\n\n        MyTrie trie;\n        populateTrie(trie, words, costs);\n        processSubstrings(trie, target, words, dp);\n\n        return dp[n] == INT_MAX ? -1 : dp[n];\n    }\n};",
    "submit_ts": "1720324320",
    "subm_id": "1312396692"
}