{
    "username": "Amandeep121",
    "submission": "class Solution {\n    private : \n    int solve(vector<int>&arr, int k) {\n    int cur = arr[0];\n    int diff = abs(cur - k);\n\n    unordered_map<int, int> hash;\n    for (int j = 0; j < 32; j++) { \n        if (arr[0] & (1 << j)) { \n            hash[j]++; \n        } \n    } \n\n    int left = 0, right = 0;\n    while (right < arr.size()) { \n        if (cur > k || left > right) { \n            right++;\n            if (right >= arr.size()) { \n                break; \n            } \n            for (int j = 0; j < 32; j++) { \n                if (arr[right] & (1 << j)) { \n                    hash[j]++; \n                } \n            } \n        } else { \n            for (int j = 0; j < 32; j++) { \n                if (arr[left] & (1 << j)) { \n                    hash[j]--; \n                } \n            } \n            left++;\n        } \n\n        cur = 0;\n        for (auto& entry : hash) { \n            if (entry.second == right - left + 1) { \n                cur |= (1 << entry.first);\n            } \n        } \n\n        if (left <= right) { \n            diff = min(diff, abs(cur - k)); \n        } \n    } \n\n    return diff; \n}\npublic:\n   int minimumDifference(vector<int>& nums, int k) {\n        return solve(nums,k);\n    }\n};",
    "submit_ts": "1717299768",
    "subm_id": "1274823278"
}