{
    "username": "\u694a\u5b97\u8afa",
    "submission": "using i64 = long long;\n\nconstexpr i64 inf = -4E18;\n\ntemplate <typename Info>\nstruct SegmentTree {\n    int n;\n    vector<Info> info;\n \n    SegmentTree(int n = 0) {\n        init(n);\n    }\n \n    void init(int n) {\n        this->n = n;\n        info.assign(4 * n, Info());\n    }\n \n    void pull(int i) {\n        info[i] = info[2 * i] + info[2 * i + 1];\n    }\n \n    void set(int idx, Info _info, int i, int L, int R) {\n        if (L == R) {\n            info[i] = info[i] + _info;\n            return;\n        }\n        int mid = (L + R) / 2;\n        if (idx <= mid) {\n            set(idx, _info, 2 * i, L, mid);\n        } else {\n            set(idx, _info, 2 * i + 1, mid + 1, R);\n        }\n        pull(i);\n    }\n\n    void set(int idx, Info _info) {\n        set(idx, _info, 1, 0, n - 1);\n    }\n \n    Info rangeQuery(int qL, int qR, int i, int L, int R) {\n        if (R < qL || qR < L) {\n            return Info();\n        }\n        if (qL <= L && R <= qR) {\n            return info[i];\n        }\n        int mid = (L + R) / 2;\n        Info a = rangeQuery(qL, qR, 2 * i, L, mid);\n        Info b = rangeQuery(qL, qR, 2 * i + 1, mid + 1, R);\n        return a + b;\n    }\n\n    Info rangeQuery(int qL, int qR) {\n        return rangeQuery(qL, qR, 1, 0, n - 1);\n    }\n};\n\nstruct Info {\n    i64 mx;\n    Info(i64 x = inf) {\n        mx = x;\n    }\n    Info operator+(const Info& b) {\n        Info c;\n        c.mx = max(mx, b.mx);\n        return c;\n    }\n};\n\nclass Solution {\npublic:\n    long long maximumValueSum(vector<vector<int>>& board) {\n        const int n = board.size();\n        const int m = board[0].size();\n        \n        vector seg(m + 1, SegmentTree<Info>(m + 1));\n        for (int i = 0; i < m; ++i) {\n            seg[0].set(i + 1, board[0][i]);\n        }\n\n        i64 ans = inf;\n        for (int i = 1; i < n; ++i) {\n            for (int j = 0; j < m; ++j) {\n                for (int k = 1; k <= m; ++k) {\n                    if (k == j + 1) {\n                        continue;\n                    }\n                    ans = max(ans, 0LL + max(seg[k].rangeQuery(0, j).mx, seg[k].rangeQuery(j + 2, m).mx) + board[i][j]);\n                }\n            }\n            for (int j = 0; j < m; ++j) {\n                for (int k = 1; k <= m; ++k) {\n                    if (k == j + 1) {\n                        continue;\n                    }\n                    seg[k].set(j + 1, 0LL + seg[0].rangeQuery(k, k).mx + board[i][j]);\n                }\n            }\n            for (int j = 0; j < m; ++j) {\n                seg[0].set(j + 1, board[i][j]);\n            }\n        }\n        return ans;\n    }\n};",
    "submit_ts": "1723908983",
    "subm_id": "1359174945"
}