{
    "username": "rishabh2511",
    "submission": "import java.util.*;\n\nclass Solution {\n    public boolean bfs(List<List<Integer>> graph, int start, int target1, int target2, int nodes) {\n        Queue<Integer> q = new LinkedList<>();\n        boolean[] visit = new boolean[nodes + 4];\n        q.add(start);\n        visit[start] = true;\n        \n        while (!q.isEmpty()) {\n            int u = q.poll();\n            for (int v : graph.get(u)) {\n                if (!visit[v]) {\n                    q.add(v);\n                    visit[v] = true;\n                }\n            }\n        }\n        return visit[target1] || visit[target2];\n    }\n\n    public boolean canReachCorner(int X, int Y, int[][] circles2) {\n        int numCircle = circles2.length;\n        List<int[]> circle = new ArrayList<>(numCircle);\n        List<List<Integer>> graph = new ArrayList<>(numCircle + 4);\n        \n        for (int i = 0; i < numCircle + 4; i++) {\n            graph.add(new ArrayList<>());\n        }\n\n        for (int[] c : circles2) {\n            circle.add(new int[]{c[0], c[1], c[2]});\n        }\n        // for (int[] circle : circles2) {\n        //     circles.add(new int[]{circle[0], circle[1], circle[2]});\n        // }\n\n        for (int i = 0; i < numCircle; ++i) {\n            int x = circle.get(i)[0];\n            int y = circle.get(i)[1];\n            int r = circle.get(i)[2];\n            \n            if (x <= r) {\n                graph.get(numCircle).add(i);\n                graph.get(i).add(numCircle);\n            }\n            if (X - x <= r) {\n                graph.get(numCircle + 2).add(i);\n                graph.get(i).add(numCircle + 2);\n            }\n            if (y <= r) {\n                graph.get(numCircle + 1).add(i);\n                graph.get(i).add(numCircle + 1);\n            }\n            if (Y - y <= r) {\n                graph.get(numCircle + 3).add(i);\n                graph.get(i).add(numCircle + 3);\n            }\n            for (int j = i + 1; j < numCircle; ++j) {\n                double dist = Math.sqrt(Math.pow(x - circle.get(j)[0], 2) + Math.pow(y - circle.get(j)[1], 2));\n                int radiusSum = r + circle.get(j)[2];\n                if (radiusSum >= dist) {\n                    graph.get(i).add(j);\n                    graph.get(j).add(i);\n                }\n            }\n        }\n\n        boolean isBlocked = false;\n        isBlocked |= bfs(graph, numCircle, numCircle + 1, numCircle + 2, numCircle + 4);\n        isBlocked |= bfs(graph, numCircle + 3, numCircle + 2, numCircle + 1, numCircle + 4);\n        \n        return !isBlocked;\n    }\n}\n",
    "submit_ts": "1722137476",
    "subm_id": "1335764908"
}