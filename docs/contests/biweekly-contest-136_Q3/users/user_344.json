{
    "username": "pku_erutan",
    "submission": "class Solution:\n    def minFlips(self, grid: List[List[int]]) -> int:\n        m, n = len(grid), len(grid[0])\n        to_ret = 0\n        for i in range(m // 2) :\n            for j in range(n // 2) :\n                sumt = grid[i][j] + grid[m-i-1][j] + grid[i][n-j-1] + grid[m-i-1][n-j-1]\n                to_ret += min(sumt, 4-sumt)\n        exist_sum = 0\n        can_change = 0\n        print(to_ret)\n        if m % 2 == 1 :\n            for j in range(n // 2) :\n                if not grid[m//2][j] == grid[m//2][n-j-1] :\n                    can_change += 1\n                    to_ret += 1\n                else :\n                    exist_sum += 2 * grid[m//2][j]\n        if n % 2 == 1 :\n            for i in range(m // 2) :\n                if not grid[i][n//2] == grid[m-i-1][n//2] :\n                    can_change += 1\n                    to_ret += 1\n                else :\n                    exist_sum += 2 * grid[i][n//2]\n        if n % 2 == 1 and m % 2 == 1 :\n            to_ret += grid[m//2][n//2]\n        if exist_sum % 4 == 2 :\n            if can_change >= 1 :\n                pass\n            else :\n                to_ret += 2\n        return to_ret\n            ",
    "submit_ts": "1722696210",
    "subm_id": "552259641"
}