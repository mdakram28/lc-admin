{
    "username": "mooncat2k4",
    "submission": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;\n\nclass Solution {\npublic:\n    static const int MOD = 1'000'000'007;\n    static const int MAX_INVERSIONS = 400;\n\n    int numberOfPermutations(int n, vector<vector<int>>& requirements) {\n        unordered_map<int, int> requirementsMap = createRequirementsMap(requirements);\n\n        vector<vector<long>> dpTable = initializeDPTable(n);\n\n        fillDPTable(dpTable, n, requirementsMap);\n\n        return calculateResult(dpTable, n);\n    }\n\nprivate:\n    unordered_map<int, int> createRequirementsMap(const vector<vector<int>>& requirements) {\n        unordered_map<int, int> requirementsMap;\n        for (const auto& req : requirements) {\n            requirementsMap[req[0] + 1] = req[1];\n        }\n        return requirementsMap;\n    }\n\n    vector<vector<long>> initializeDPTable(int n) {\n        vector<vector<long>> dpTable(n + 1, vector<long>(MAX_INVERSIONS + 1, 0));\n        dpTable[0][0] = 1;\n        return dpTable;\n    }\n\n    void fillDPTable(vector<vector<long>>& dpTable, int n, const unordered_map<int, int>& requirementsMap) {\n        for (int length = 1; length <= n; length++) {\n            for (int inv = 0; inv <= MAX_INVERSIONS; inv++) {\n                for (int newPos = 0; newPos < length; newPos++) {\n                    int prevInv = inv - newPos;\n                    if (prevInv >= 0) {\n                        dpTable[length][inv] = (dpTable[length][inv] + dpTable[length - 1][prevInv]) % MOD;\n                    }\n                }\n            }\n\n            if (requirementsMap.find(length) != requirementsMap.end()) {\n                int targetInversions = requirementsMap.at(length);\n                for (int inv = 0; inv <= MAX_INVERSIONS; inv++) {\n                    if (inv != targetInversions) {\n                        dpTable[length][inv] = 0;\n                    }\n                }\n            }\n        }\n    }\n\n    int calculateResult(const vector<vector<long>>& dpTable, int n) {\n        long result = 0;\n        for (long count : dpTable[n]) {\n            result = (result + count) % MOD;\n        }\n        return static_cast<int>(result);\n    }\n};",
    "submit_ts": "1719069972",
    "subm_id": "1296811247"
}