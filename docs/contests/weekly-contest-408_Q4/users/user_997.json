{
    "username": "parthDOOM",
    "submission": "class Solution {\npublic:\n    bool solve(int width, int height, vector<vector<int>>& circles) {\n        int numCircles = circles.size();\n        vector<vector<int>> mp(numCircles+4);\n        \n        for(int i = 0; i < numCircles; i++) {\n            if(circles[i][0] <= circles[i][2]) {\n                mp[numCircles].push_back(i);\n                mp[i].push_back(numCircles);\n            }\n            if(width - circles[i][0] <= circles[i][2]) {\n                mp[numCircles + 2].push_back(i);\n                mp[i].push_back(numCircles + 2);\n            }\n            if(circles[i][1] <= circles[i][2]) {\n                mp[numCircles + 1].push_back(i);\n                mp[i].push_back(numCircles + 1);\n            }\n            if(height - circles[i][1] <= circles[i][2]) {\n                mp[numCircles + 3].push_back(i);\n                mp[i].push_back(numCircles + 3);\n            }\n            for(int j = i + 1; j < numCircles; j++) {\n                double distance = sqrt(pow(circles[i][0] - circles[j][0], 2) + pow(circles[i][1] - circles[j][1], 2));\n                int radiusSum = circles[i][2] + circles[j][2];\n                if(radiusSum >= distance) {\n                    mp[i].push_back(j);\n                    mp[j].push_back(i);\n                }\n            }\n        }\n        \n        int isBlocked = 0;\n        isBlocked = max(isBlocked, bfs(mp, numCircles, numCircles + 1, numCircles + 2, numCircles + 4));\n        isBlocked = max(isBlocked, bfs(mp, numCircles + 3, numCircles + 2, numCircles + 1, numCircles + 4));\n        \n        return isBlocked == 0;\n    }\n    \n    int bfs(vector<vector<int>>& mp, int start, int target1, int target2, int totalNodes) {\n        queue<int> q;\n        unordered_set<int> visited;\n        \n        q.push(start);\n        visited.insert(start);\n        \n        while(!q.empty()) {\n            int node = q.front();\n            q.pop();\n            \n            for(int neighbor : mp[node]) {\n                if(visited.find(neighbor) == visited.end()) {\n                    q.push(neighbor);\n                    visited.insert(neighbor);\n                }\n            }\n        }\n        \n        return (visited.find(target1) != visited.end() || visited.find(target2) != visited.end() ? 1 : 0);\n    }\n    \n    bool canReachCorner(int width, int height, vector<vector<int>>& circles) {\n        return solve(width, height, circles);\n    }\n};",
    "submit_ts": "1722138951",
    "subm_id": "1335803940"
}