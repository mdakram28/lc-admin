{
    "username": "hellowold",
    "submission": "class Solution {\n    public int minChanges(int[] nums, int k) {\n        int n = nums.length - 1;\n        int[][] tt = new int[nums.length / 2][2];\n        Map<Integer, Integer> map = new HashMap<>();\n        for (int i = 0; i < nums.length / 2; i++) {\n            tt[i][0] = Math.max(nums[i], nums[n - i]);\n            tt[i][1] = Math.min(nums[i], nums[n - i]);\n            int x = Math.abs(nums[i] - nums[n - i]);\n            map.put(x, map.getOrDefault(x, 0) + 1);\n        }\n        Arrays.sort(tt, (o1, o2) -> {return o1[0] - o2[0];});\n        int res = Integer.MAX_VALUE;\n        int m = nums.length / 2;\n        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {\n            int num = entry.getValue();\n            int x = entry.getKey();\n            int j = low_bound(tt, x);\n            int tmp = m - j - num;\n            for (int i = 0; i < j; i++) {\n                tmp++;\n                if (tt[i][1] > k - x) {\n                    tmp++;\n                }\n            }\n            res = Math.min(res, tmp);\n        }\n        return res;\n    }\n\n    private int low_bound(int[][] nums, int n) {\n        int left = -1, right = nums.length;\n        while (left + 1 < right) {\n            int mid = left + right >> 1;\n            if (nums[mid][0] >= n) {\n                right = mid;\n            } else {\n                left = mid;\n            }\n        }\n        return right;\n\n    }\n}",
    "submit_ts": "1721488508",
    "subm_id": "548314781"
}