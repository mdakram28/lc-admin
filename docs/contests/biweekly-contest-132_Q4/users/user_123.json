{
    "username": "sgdfbahjbhbaisdufg",
    "submission": "class Solution {\npublic:\n    int maximumLength(vector<int>& nums, int k) {\n        int n = nums.size(), ans = 0;\n        vector<vector<int>> dp(n + 1, vector<int>(k + 1));\n        // vector<set<pair<int, int>>> vm(k + 1);\n        vector<int> lastjmax(k + 1);\n\n        unordered_map<int, int> last;\n        for (int i = n - 1; i >= 0; --i) {\n            for (int j = 0; j <= k; ++j) {\n                dp[i][j] = 1;\n\n                if (j > 0) {\n                    // auto it = vm[j - 1].rbegin();\n                    // if (it != vm[j - 1].rend()) {\n                    //     if (nums[it->second] == nums[i]) {\n                    //         ++it;\n                    //     }\n                    //     dp[i][j] = max(dp[i][j], 1 + it->first);\n                    // }\n\n                    dp[i][j] = max(dp[i][j], 1 + lastjmax[j - 1]);\n                }\n\n                if (last.count(nums[i])) {\n                    int lastnumsi = last[nums[i]];\n                    dp[i][j] = max(dp[i][j], 1 + dp[lastnumsi][j]);\n                }\n\n                                            // for (int t = i + 1; t < n; ++t) {\n                                            //     if (nums[i] == nums[t]) {\n                                            //         dp[i][j] = max(dp[i][j], 1 + dp[t][j]);\n                                            //     } else if (j > 0) {\n                                            //         dp[i][j] = max(dp[i][j], 1 + dp[t][j - 1]);\n                                            //     }\n                                            // }\n            }\n\n            // if (last.count(nums[i])) {\n            //     int lastnumsi = last[nums[i]];\n            //     for (int j = 0; j <= k; ++j) {\n            //         vm[j].erase({ dp[lastnumsi][j], lastnumsi });\n            //     }\n            // }\n            // last[nums[i]] = i;\n            // for (int j = 0; j <= k; ++j) {\n            //     vm[j].insert({ dp[i][j], i });\n            // }\n\n            last[nums[i]] = i;\n            for (int j = 0; j <= k; ++j) {\n                lastjmax[j] = max(lastjmax[j], dp[i][j]);\n            }\n\n            ans = max(ans, dp[i][k]);\n        }\n        return ans;\n    }\n};",
    "submit_ts": 1717860255.0
}