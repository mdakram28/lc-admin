{
    "username": "SD_leetcode",
    "submission": "class Solution {\npublic:\n    long long minimumCost(int m, int n, vector<int>& horizontalCut, vector<int>& verticalCut){\n    priority_queue<pair<int, bool>>pq;\n    for (auto it : verticalCut) {\n        pq.push({it, false});\n    }\n    for (auto it : horizontalCut) {\n        pq.push({it, true});\n    }\n        \n    int hh = 1,vv = 1;\n    long long int ans = 0;\n\n    while (!pq.empty()) {\n        auto cc = pq.top();\n        pq.pop();\n\n        int cost = cc.first;\n        bool isHorizontal = cc.second;\n\n        if (isHorizontal) {\n            ans += cost *1ll* vv;\n            hh++;\n        } else {\n            ans += cost *1ll* hh;\n            vv++;\n        }\n    }\n    return ans;\n    }\n};",
    "submit_ts": "1720926086",
    "subm_id": "1320275540"
}