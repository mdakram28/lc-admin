{
    "username": "user_db1",
    "submission": "class Solution {\npublic:\n    long long minimumCost(int m, int n, vector<int>& horizontalCut, vector<int>& verticalCut) {\n        vector<pair<int, int>> vect;\n        for (int i = 0; i < horizontalCut.size(); i++)\n        {\n            vect.push_back({horizontalCut[i], 0});\n        }\n        for (int i = 0; i < verticalCut.size(); i++)\n        {\n            vect.push_back({verticalCut[i], 1});\n        }\n\n        sort(vect.begin(), vect.end(), greater<>());\n\n        long long result = 0, horizontal = 1, vertical = 1;\n\n        for (auto pair : vect)\n        {\n            if (pair.second == 0)\n            { \n                result += static_cast<long long>(pair.first) * vertical;\n                ++horizontal;\n            }\n            else\n            { \n                result += static_cast<long long>(pair.first) * horizontal;\n                ++vertical;\n            }\n        }\n\n        return result;\n    }\n};",
    "submit_ts": "1720925960",
    "subm_id": "1320271654"
}