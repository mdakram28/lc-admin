{
    "username": "jgorton500",
    "submission": "class TrieNode:\n    def __init__(self):\n        self.cost = float('inf')\n        self.isEndOfWord = False\n        self.children = defaultdict(TrieNode)\n\n    def add(self, w, c):\n        if not w:\n            self.isEndOfWord = True\n            self.cost = min(self.cost, c)\n        else:\n            self.children[w[0]].add(w[1:], c)\n\nclass Solution:\n    def minimumCost(self, target: str, words: List[str], costs: List[int]) -> int:\n        trie = TrieNode()\n        for w, c in zip(words, costs):\n            trie.add(w, c)\n\n        @cache\n        def recur(index) -> int:\n            curr = trie\n            if index == len(target): return 0\n            res = float('inf')\n            for i in range(index, len(target)+1):\n                if curr.isEndOfWord:\n                    # print(f'choose word {target[index:i]}. Recur')\n                    res = min(res, curr.cost + recur(i))\n                if i == len(target) or target[i] not in curr.children:\n                    break\n                # print('before', list(curr.children.keys()))\n                # print(f'choose {target[i]}')\n                curr = curr.children[target[i]]\n                # print('after', list(curr.children.keys()))\n                # print()\n            return res\n\n        minCost = recur(0)\n        return -1 if minCost == float('inf') else minCost",
    "submit_ts": "1720321973",
    "subm_id": "1312337279"
}