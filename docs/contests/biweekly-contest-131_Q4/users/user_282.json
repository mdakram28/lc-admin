{
    "username": "legenD13",
    "submission": "typedef int ll;\nvoid construct_segment_tree(vector<int>& segtree,\n                            vector<int>& a, int n)\n{\n    // assign values to leaves of the segment tree\n    for (int i = 0; i < n; i++)\n        segtree[n + i] = a[i];\n \n    /* assign values to internal nodes\n    to compute maximum in a given range */\n    for (int i = n - 1; i >= 1; i--)\n        segtree[i] = max(segtree[2 * i],\n                         segtree[2 * i + 1]);\n}\n \nvoid update(vector<int>& segtree, int pos, int value,\n            int n)\n{\n    // change the index to leaf node first\n    pos += n;\n \n    // update the value at the leaf node\n    // at the exact index\n    segtree[pos] = value;\n \n    while (pos > 1) {\n \n        // move up one level at a time in the tree\n        pos >>= 1;\n \n        // update the values in the nodes in\n        // the next higher level\n        segtree[pos] = max(segtree[2 * pos],\n                           segtree[2 * pos + 1]);\n    }\n}\n \nint range_query(vector<int>& segtree, int left, int\n                                                    right,\n                int n)\n{\n    /* Basically the left and right indices will move\n        towards right and left respectively and with\n        every each next higher level and compute the \n        maximum at each height. */\n    // change the index to leaf node first\n    left += n;\n    right += n;\n \n    // initialize maximum to a very low value\n    int ma = INT_MIN;\n \n    while (left < right) {\n \n        // if left index in odd\n        if (left & 1) {\n            ma = max(ma, segtree[left]);\n \n            // make left index even\n            left++;\n        }\n \n        // if right index in odd\n        if (right & 1) {\n \n            // make right index even\n            right--;\n \n            ma = max(ma, segtree[right]);\n        }\n \n        // move to the next higher level\n        left /= 2;\n        right /= 2;\n    }\n    return ma;\n}\nclass Solution {\npublic:\n    vector<bool> getResults(vector<vector<int>>& qu) {\n         set<int> st;\n        int n=5e4+1;\n         st.insert(5e4);\n        vector<int> v(n,0);\n    v[n-1]=n-1;\n    vector<int> segtree(2 * n);\n    construct_segment_tree(segtree, v, n);\n   // debug(segtree);\n  //  cout<<range_query(segtree, 0, n+1, n)<<endl;;\n        st.insert(0);\n    vector<bool> ans;\n    for(ll i=0;i<qu.size();i++){\n        //debug(st);\n        ll x=qu[i][1];\n        if(qu[i][0]==1){\n            auto z2=st.upper_bound(x);\n            int z=-1;\n            if(z2==st.end()){\n                z=5e4;\n            }\n            else{\n                z=*z2;\n            }\n            ll val=range_query(segtree, z, z+1, n);\n            update(segtree, z, z-x, n);\n            update(segtree, x, (val-(z-x)), n);\n            st.insert(x);\n        }\n        else{\n            int left=0,right=x+1;\n            ll z=range_query(segtree, left,  right, n);\n         //   debug(z);\n\n            if(z>=qu[i][2]){\n                ans.push_back(true);\n            }\n            else{\n                auto z=st.upper_bound(x);\n                z--;\n                int val=*z;\n                if((x-val)>=qu[i][2]){\n                    ans.push_back(true);\n                }\n                else{\n                    ans.push_back(false);\n                }\n            }\n        }\n    }\n        return ans;\n    }\n};",
    "submit_ts": 1716651503.0
}