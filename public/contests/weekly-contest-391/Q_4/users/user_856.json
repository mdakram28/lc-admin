{
    "username": "fervent-gangulyq0q",
    "submission": "class Solution:\n    def minimumDistance(self, points: List[List[int]]) -> int:\n        n = len(points)\n        points.sort()\n        # a + b a - b\n        min1,max1,min1id,max1id = float('inf'),-float('inf'),-1,-1\n        min2,max2,min2id,max2id = float('inf'),-float('inf'),-1,-1\n        for i in range(n):\n            v1 = points[i][0] + points[i][1]\n            if v1 < min1:\n                min1 = v1\n                min1id = i\n            if v1 > max1:\n                max1 = v1\n                max1id = i\n            v2 = points[i][0] - points[i][1]\n            if v2 < min2:\n                min2 = v2\n                min2id = i\n            if v2 > max2:\n                max2 = v2\n                max2id = i\n        \n        def cal(id):\n            ans = 0\n            min1,max1,min2,max2 = float('inf'),-float('inf'),float('inf'),-float('inf')\n            for i in range(n):\n                if i == id:\n                    continue\n                d = max(points[i][0] + points[i][1] - min1,points[i][0] - points[i][1] - min2,-points[i][0] + points[i][1] + max2,-points[i][0] - points[i][1] + max1)\n                ans = max(ans,d)\n                min1 = min(min1,points[i][0] + points[i][1])\n                max1 = max(max1,points[i][0] + points[i][1])\n                min2 = min(min2,points[i][0] - points[i][1])\n                max2 = max(max2,points[i][0] - points[i][1])\n            return ans\n        return min(cal(min1id),cal(min2id),cal(max1id),cal(max2id))"
}