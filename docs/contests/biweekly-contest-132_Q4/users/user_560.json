{
    "username": "sethles",
    "submission": "class Solution {\n    public int maximumLength(int[] nums, int k) {\n        Integer[][] cache = new Integer[nums.length][k + 1];\n        Integer[] with = new Integer[k + 1];\n        Map<Integer, Integer> lastOcc = new HashMap<>();\n        for (int i = 0; i < nums.length; i++) {\n            // System.out.println(i+\": \"+Arrays.toString(with));\n            Integer last = lastOcc.get(nums[i]);\n            if (last == null) {\n                for (int nk = k; nk > 0; nk--) {\n                    cache[i][nk] = with[nk - 1];\n                    if (cache[i][nk] != null) {\n                        cache[i][nk]++;\n                        if (with[nk] == null || with[nk] < cache[i][nk]) with[nk] = cache[i][nk];\n                    }\n                }\n                cache[i][0] = 1;\n                if (with[0] == null || with[0] < 1) with[0] = 1;\n                lastOcc.put(nums[i], i);\n                continue;\n            }\n            Integer[] fromLast = cache[last];\n            for (int nk = k; nk > 0; nk--) {\n                cache[i][nk] = with[nk - 1];\n                if (cache[i][nk] == null) {\n                    cache[i][nk] = fromLast[nk];\n                    if (cache[i][nk] != null) {\n                        cache[i][nk]++;\n                        if (with[nk] == null || with[nk] < cache[i][nk]) with[nk] = cache[i][nk];\n                    }\n                } else {\n                    cache[i][nk]++;\n                    if (fromLast[nk] != null && fromLast[nk] + 1 > cache[i][nk]) {\n                        cache[i][nk] = fromLast[nk] + 1;\n                    }\n                    if (with[nk] == null || with[nk] < cache[i][nk]) with[nk] = cache[i][nk];\n                }\n            }\n            cache[i][0] = fromLast[0] + 1;\n            if (with[0] == null || with[0] < cache[i][0]) with[0] = cache[i][0];\n            lastOcc.put(nums[i], i);\n        }\n        // for (int i = 0; i < cache.length; i++) {\n        //     System.out.println(i+\": \"+Arrays.toString(cache[i]));\n        // }\n        int max = 0;\n        for (Integer[] ar : cache) {\n            for (Integer i : ar) {\n                if (i != null && i > max) max = i;\n            }\n        }\n        return max;\n    }\n    // private int get(int pos, int nk, int[] ar, Integer[][] cache) {\n    //     if (nk < 0) return -1;\n    //     if (cache[pos][nk] != null) return cache[pos][nk];\n    //     int max = 0;\n    //     for (int i = 0; i < pos; i++) {\n    //         if (ar[i] == ar[pos]) {\n    //             int from = get(i, nk, ar, cache);\n    //             if (from > max) max = from;\n    //         } else {\n    //             int from = get(i, nk - 1, ar, cache);\n    //             if (from > max) max = from;\n    //         }\n    //     }\n    //     max++;\n    //     return cache[pos][nk] = max;\n    // }\n}",
    "submit_ts": 1717862109.0
}