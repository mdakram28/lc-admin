{
    "username": "nwatx",
    "submission": "class Solution {\npublic:\n    long long minimumCost(int m, int n, vector<int>& horizontalCut, vector<int>& verticalCut) {\n        priority_queue<pair<int, int>> pq;\n        int nx = 1, ny = 1;\n        \n        for(int i = 0; i < horizontalCut.size(); i++) {\n            pq.push({horizontalCut[i], i + 1});\n        }\n\n        for(int i = 0; i < verticalCut.size(); i++) {\n            pq.push({verticalCut[i], -(i + 1)});\n        }\n\n        long long ret = 0;\n\n        while(pq.size()) {\n            auto top = pq.top(); pq.pop();\n            bool hoz = top.second > 0;\n\n            if(hoz) {\n                ++nx;\n                ret += ny * top.first;\n            } else {\n                ++ny;\n                ret += nx * top.first;\n            }\n        }\n\n        return ret;\n    }\n};",
    "submit_ts": "1720925479",
    "subm_id": "1320256080"
}