{
    "username": "b_venkatanath",
    "submission": " class Solution {\npublic:\n\n    string decrementPalindrome(string palindrome) {\n    int n = palindrome.size();\n    int i = (n - 1) / 2;  // Start decrementing from the middle\n\n    // Decrement digits symmetrically from the middle\n    while (i >= 0 && palindrome[i] == '0') {\n        palindrome[i] = palindrome[n - i - 1] = '9';  // Propagate changes symmetrically\n        i--;\n    }\n\n    if (i >= 0) {\n        palindrome[i] = palindrome[n - i - 1] = palindrome[i] - 1;  // Decrement the current digit symmetrically\n    }\n\n    return palindrome;\n}\n\n// Function to check if a string-represented number is divisible by 7\nbool isDivisibleBy7(const string &num) {\n    int remainder = 0;\n\n    // Perform the modulus operation using string digits\n    for (char c : num) {\n        remainder = (remainder * 10 + (c - '0')) % 7;\n    }\n\n    return remainder == 0;\n}\n\n// Function to find the greatest palindrome of length n divisible by 7\nstring findGreatestPalindromeDivisibleBy7(int n) {\n    // Generate the largest palindrome of length n (all 9s)\n    string palindrome(n, '9');\n\n    // Check divisibility and decrement until divisible by 7\n    while (!isDivisibleBy7(palindrome)) {\n        palindrome = decrementPalindrome(palindrome);\n    }\n\n    return palindrome;  // Return the palindrome as a string\n}\n    string largestPalindrome(int n, int k) {\n        if(k==1 || k==3 || k==9){\n            string res;\n            for(int i=0;i<n;i++)res.push_back('9');\n            return res;\n        }\n        if(k==2){\n            string res(n,' ');\n            int i=1;\n            int j=n-2;\n            res[0]='8';\n            res[n-1]='8';\n            while(i<=j){\n                res[i]='9';\n                res[j]='9';\n                i++;\n                j--;\n            }\n            return res;   \n        }\n        if(k==4){\n            if(n==1)return \"8\";\n            if(n==2)return \"88\";\n            string res(n,' ');\n            res[0]='8';\n            res[n-1]='8';\n            res[1]='8';\n            res[n-2]='8';\n            int i=2;\n            int j=n-3;\n            while(i<=j){\n                res[i]='9';\n                res[j]='9';\n                i++;\n                j--;\n            }\n            return res;\n        }\n        if(k==5){\n            string res(n,' ');\n            res[0]='5';\n            res[n-1]='5';\n            int i=1;\n            int j=n-2;\n            while(i<=j){\n                res[i]='9';\n                res[j]='9';\n                i++;\n                j--;\n            }\n            return res;\n        }\n        if(k==6){\n            if(n==1)return \"6\";\n            if(n==2)return \"66\";\n            if(n%2){\n                string res(n,' ');\n                res[0]='8';\n                res[n-1]='8';\n                res[n/2]='8';\n                int i=1;\n                int j=n-2;\n                while(i<j){\n                    res[i]='9';\n                    res[j]='9';\n                    i++;\n                    j--;\n                }\n                return res;\n            }\n            else{\n                string res(n,' ');\n                res[0]='8';\n                res[n-1]='8';\n                int p=n/2;\n                res[p]='7';\n                res[p-1]='7';\n                int i=1;\n                int j=n-2;\n                while(j>p && i<j){\n                    res[i]='9';\n                    res[j]='9';\n                    i++;\n                    j--;\n                }\n                return res;\n            }\n        }\n        if(k==8){\n            if(n==1)return \"8\";\n            if(n==2)return \"88\";\n            string res(n,' ');\n            res[0]='8';\n            res[1]='8';\n            res[2]='8';\n            res[n-1]='8';\n            res[n-2]='8';\n            res[n-3]='8';\n            int i=3;\n            int j=n-4;\n            while(i<=j){\n                res[i]='9';\n                res[j]='9';\n                i++;\n                j--;\n            }\n            return res;\n        }\n        return findGreatestPalindromeDivisibleBy7(n);\n        \n    }\n};",
    "submit_ts": "1723952796",
    "subm_id": "1359804849"
}