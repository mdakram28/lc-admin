{
    "username": "ting-ting-28",
    "submission": "class TreeArray:\n    def __init__(self, nums: List[int]):\n        self.nums = nums\n        self.tree = [0] * (len(nums) + 1)\n        for i, val in enumerate(nums, 1):\n            while i < len(self.tree):\n                self.tree[i] += val\n                i += i & -i\n\n    def update(self, idx: int, value: int) -> None:\n        i, val = idx+1, value - self.nums[idx]\n        self.nums[idx] = value\n        while i < len(self.tree):\n            self.tree[i] += val\n            i += i & -i        \n\n    def query(self, l: int, r: int) -> int:\n        r += 1\n        s = 0\n        while r:\n            s += self.tree[r]\n            r &= r - 1\n        while l:\n            s -= self.tree[l]\n            l &= l - 1\n        return s\n\nclass Solution:\n    def countOfPeaks(self, nums: List[int], queries: List[List[int]]) -> List[int]:\n        n = len(nums)\n        p = []\n        for i in range(1, n-1):\n            p.append(int(nums[i-1] < nums[i] and nums[i] > nums[i+1]))\n        m = TreeArray(p)\n        res = []\n        for i, j, k in queries:\n            if i == 2:\n                nums[j] = k\n                for a in range(j-2, j+2):\n                    if 1 <= a <= n-2:\n                        m.update(a-1, int(nums[a-1] < nums[a] and nums[a] > nums[a+1]))\n            else:\n                res.append(m.query(j, k-2) if j <= k-2 else 0)\n        return res",
    "submit_ts": 1718506570.0
}