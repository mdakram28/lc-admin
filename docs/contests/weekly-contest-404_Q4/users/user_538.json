{
    "username": "nguyenchicuong",
    "submission": "class Solution:\n    def minimumDiameterAfterMerge(self, edges1: List[List[int]], edges2: List[List[int]]) -> int:\n        def bfs_farthest_node(graph, start):\n            visited = {start}\n            queue = deque([(start, 0)])\n            farthest_node, max_distance = start, 0\n\n            while queue:\n                node, distance = queue.popleft()\n                if distance > max_distance:\n                    farthest_node, max_distance = node, distance\n\n                for neighbor in graph[node]:\n                    if neighbor not in visited:\n                        visited.add(neighbor)\n                        queue.append((neighbor, distance + 1))\n\n            return farthest_node, max_distance\n    \n#         def bfs_nearest_node(graph, start):\n#             visited = {start}\n#             queue = deque([(start, 0)])\n#             nearest_node, min_distance = start, 10**10\n\n#             while queue:\n#                 node, distance = queue.popleft()\n                \n#                 if distance + 1 < min_distance:\n#                     nearest_node, min_distance = node, distance + 1\n\n#                 for neighbor in graph[node]:\n#                     if neighbor not in visited:\n#                         visited.add(neighbor)\n#                         queue.append((neighbor, distance + 1))\n\n#             return farthest_node, max_distance\n    \n\n        def find_tree_height(edges):\n            if not edges:\n                return 0\n\n            graph = defaultdict(list)\n            \n            for u, v in edges:\n                graph[u].append(v)\n                graph[v].append(u)\n                \n            # B\u00e0i to\u00e1n kinh \u0111i\u1ec3n t\u00ecm b\u00e1n k\u00ednh c\u1ee7a c\u00e2y\n            start_node = edges[0][0]\n            farthest_node, _ = bfs_farthest_node(graph, start_node)\n            new_farthest_node, diameter = bfs_farthest_node(graph, farthest_node)\n            # print(farthest_node, new_farthest_node)\n            return diameter\n        d1 = find_tree_height(edges1) \n        d2 = find_tree_height(edges2)\n        return max(d1, d2, (d1 + 1)//2 + (d2 + 1)//2 + 1)\n\n\"\"\"\n[[0,1],[2,0],[3,2],[3,6],[8,7],[4,8],[5,4],[3,5],[3,9]]\n[[0,1],[0,2],[0,3]]\n\n7\n\"\"\"\n    ",
    "submit_ts": 1719719357.0
}