{
    "username": "agix",
    "submission": "class Solution {\npublic:\n    int getOnes(vector<vector<int>>& sums, int rt, int rb, int rl, int rr)\n    {\n        return sums[rt + 1][rr + 1] + sums[rb][rl] - sums[rt + 1][rl] - sums[rb][rr + 1];\n    }\n\n    int minRect(vector<vector<int>>& grid, vector<vector<int>>& sums, int rt, int rb, int rl, int rr)\n    {\n        int m = grid.size();\n        int n = grid[0].size();\n\n        int ones = getOnes(sums, rt, rb, rl, rr);\n\n        if (ones == 0)\n        {\n            return 0;\n        }\n\n        int t = -1;\n        int b = 10000;\n        int l = 10000;\n        int r = -1;\n\n        for (int i = rb; i <= rt; i++)\n        {\n            for (int j = rl; j <= rr; j++)\n            {\n                if (grid[i][j] == 1)\n                {\n                    t = max(t, i);\n                    b = min(b, i);\n                    l = min(l, j);\n                    r = max(r, j);\n                }\n            }\n        }\n\n        return (t - b + 1) * (r - l + 1);\n    }\n\n    int splitTwo(vector<vector<int>>& grid, vector<vector<int>>& sums, int rt, int rb, int rl, int rr)\n    {\n        int a = getOnes(sums, rt, rb, rl, rr);\n\n        if (a < 2)\n        {\n            return 0;\n        }\n\n        int ans = 1e9;\n\n        if (rl < rr)\n        {\n            for (int mid = rl; mid < rr; mid++)\n            {\n                int a1 = minRect(grid, sums, rt, rb, rl, mid);\n                int a2 = minRect(grid, sums, rt, rb, mid + 1, rr);\n\n                if (a1 == 0 || a2 == 0)\n                {\n                    continue;\n                }\n\n                ans = min(ans, a1 + a2);\n            }\n        }\n\n        if (rb < rt)\n        {\n            for (int mid = rb; mid < rt; mid++)\n            {\n                int a1 = minRect(grid, sums, mid, rb, rl, rr);\n                int a2 = minRect(grid, sums, rt, mid + 1, rl, rr);\n\n                if (a1 == 0 || a2 == 0)\n                {\n                    continue;\n                }\n\n                ans = min(ans, a1 + a2);\n            }\n        }\n\n        return ans;\n    }\n\n    int minimumSum(vector<vector<int>>& grid) {\n        int m = grid.size();\n        int n = grid[0].size();\n\n        int ans = 1e9;\n\n        vector<vector<int>> sums(m + 1, vector<int>(n + 1));\n\n        for (int i = 0; i < m; i++)\n        {\n            for (int j = 0; j < n; j++)\n            {\n                sums[i + 1][j + 1] = grid[i][j] + sums[i][j + 1] + sums[i + 1][j] - sums[i][j];\n            }\n        }\n\n        for (int mid1 = 0; mid1 < n - 1; mid1++)\n        {\n            int a1 = minRect(grid, sums, m - 1, 0, 0, mid1);\n            int a2 = splitTwo(grid, sums, m - 1, 0, mid1 + 1, n - 1);\n\n            if (a1 != 0 && a2 != 0)\n            {\n                ans = min(ans, a1 + a2);\n            }\n\n            a1 = splitTwo(grid, sums, m - 1, 0, 0, mid1);\n            a2 = minRect(grid, sums, m - 1, 0, mid1 + 1, n - 1);\n\n            if (a1 != 0 && a2 != 0)\n            {\n                ans = min(ans, a1 + a2);\n            }\n        }\n\n        for (int mid1 = 0; mid1 < m - 1; mid1++)\n        {\n            int a1 = minRect(grid, sums, mid1, 0, 0, n - 1);\n            int a2 = splitTwo(grid, sums, m - 1, mid1 + 1, 0, n - 1);\n\n            if (a1 != 0 && a2 != 0)\n            {\n                ans = min(ans, a1 + a2);\n            }\n\n            a1 = splitTwo(grid, sums, mid1, 0, 0, n - 1);\n            a2 = minRect(grid, sums, m - 1, mid1 + 1, 0, n - 1);\n\n            if (a1 != 0 && a2 != 0)\n            {\n                ans = min(ans, a1 + a2);\n            }\n        }\n\n        return ans;\n    }\n};",
    "submit_ts": "1719114738",
    "subm_id": "1297352917"
}