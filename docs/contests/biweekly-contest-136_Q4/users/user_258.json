{
    "username": "karanvaishnavcode",
    "submission": "// class Solution {\n// public:\n\n//     vector<int> timeTaken(vector<vector<int>>& edges) {\n        \n//     }\n// };\n\nclass Solution {\npublic:\n    vector<int>inDp, outDp;\n    int n;\n    vector<vector<int>>g;\n\n    void dfs1(int node, int par) {\n        inDp[node] = 0;\n        int ans = 0;\n        for (auto c : g[node]) {\n            if (c == par)continue;\n            int cnt = 0;\n            if (c & 1) {\n                cnt++;\n            }\n            else {\n                cnt += 2;\n            }\n            dfs1(c, node);\n            ans = max(ans, cnt + inDp[c]);\n        }\n        inDp[node] = ans;\n    }\n\n    void dfs2(int node, int par) {\n        multiset<int>st;\n        for (auto c : g[node]) {\n            if (c == par)continue;\n            int cnt = 0;\n            if (c & 1) {\n                cnt++;\n            }\n            else {\n                cnt += 2;\n            }\n            st.insert(cnt + inDp[c]);\n            if (st.size() == 3) {\n                st.erase(st.begin());\n            }\n        }\n\n        for (auto c : g[node]) {\n            if (c == par)continue;\n            int cnt1 = 0, cnt2 = 0;\n            if (node & 1) {\n                cnt1++;\n            }\n            else {\n                cnt1 += 2;\n            }\n            if (c & 1) {\n                cnt2 += 1;\n            }\n            else {\n                cnt2 += 2;\n            }\n            int cnt3 = 0;\n            // for(auto x: st){\n            //     cout << x << \" \";\n            // }\n            // cout << endl;\n            if (cnt2 + inDp[c] == *st.rbegin() && st.size() != 1) {\n                // cout << \"hi\";\n                cnt3 = *st.begin();\n            }\n            else if(st.size() != 1) {\n                cnt3 = *st.rbegin();\n            }\n            // cout << c << cnt1 << cnt2 << cnt3 << outDp[node] << endl;\n            outDp[c] = max({outDp[node] + cnt1, cnt1 + cnt3});\n            dfs2(c, node);\n        }\n    }\n\n    vector<int> timeTaken(vector<vector<int>>& edges) {\n        n = edges.size() + 1;\n        g.resize(n);\n        for (auto edge : edges) {\n            int u = edge[0];\n            int v = edge[1];\n            g[u].push_back(v);\n            g[v].push_back(u);\n        }\n        inDp.resize(n, 0);\n        outDp.resize(n, 0);\n        dfs1(0, -1);\n        dfs2(0, -1);\n        // for (auto x : inDp) {\n        //     cout << x << \" \";\n        // }\n        // cout << endl;\n\n        // for (auto x : outDp) {\n        //     cout << x << \" \";\n        // }\n        // cout << endl;\n        vector<int>ans(n, 0);\n        for (int i = 0; i < n; i++) {\n            ans[i] = max(inDp[i], outDp[i]);\n        }\n        return ans;\n    }\n};",
    "submit_ts": "1722698197",
    "subm_id": "1343172916"
}