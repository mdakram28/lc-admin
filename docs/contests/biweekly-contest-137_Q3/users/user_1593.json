{
    "username": "CodingGirl9122",
    "submission": "#include <vector>\n#include <algorithm>\n#include <climits>\n\nusing namespace std;\n\nclass Solution {\npublic:\n    long long maximumValueSum(vector<vector<int>>& board) {\n        int m = board.size();\n        int n = board[0].size();\n        vector<vector<pair<int, int>>> top3(m);\n\n        // Step 1: Find the top 3 values for each row\n        for (int i = 0; i < m; ++i) {\n            vector<pair<int, int>> rowValues; // Store pairs of (value, column index)\n            for (int j = 0; j < n; ++j) {\n                rowValues.push_back({board[i][j], j});\n            }\n            // Sort the row values to get the top 3 values\n            sort(rowValues.rbegin(), rowValues.rend());\n            for (int k = 0; k < min(3, n); ++k) {\n                top3[i].push_back(rowValues[k]);\n            }\n        }\n\n        // Step 2: Find the maximum sum by combining the top 3 from different rows\n        long long max_sum = LLONG_MIN;\n        for (int r1 = 0; r1 < m; ++r1) {\n            for (int r2 = r1 + 1; r2 < m; ++r2) {\n                for (int r3 = r2 + 1; r3 < m; ++r3) {\n                    // Try all valid combinations of columns\n                    for (auto &p1 : top3[r1]) {\n                        for (auto &p2 : top3[r2]) {\n                            if (p2.second == p1.second) continue;\n                            for (auto &p3 : top3[r3]) {\n                                if (p3.second == p1.second || p3.second == p2.second) continue;\n                                long long current_sum = static_cast<long long>(p1.first) + p2.first + p3.first;\n                                max_sum = max(max_sum, current_sum);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return max_sum;\n    }\n};\n",
    "submit_ts": "1723905598",
    "subm_id": "1359009335"
}