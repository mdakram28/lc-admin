{
    "username": "piyush_0902",
    "submission": "class Solution {\npublic:\n    pair<int, int> bfs(int start, const vector<vector<int>>& adj) {\n        int n = adj.size();\n        vector<int> distance(n, -1);\n        queue<int> q;\n        q.push(start);\n        distance[start] = 0;\n        int farthest_node = start;\n        int max_distance = 0;\n\n        while (!q.empty()) {\n            int node = q.front();\n            q.pop();\n            for (int neighbor : adj[node]) {\n                if (distance[neighbor] == -1) {\n                    distance[neighbor] = distance[node] + 1;\n                    q.push(neighbor);\n                    if (distance[neighbor] > max_distance) {\n                        max_distance = distance[neighbor];\n                        farthest_node = neighbor;\n                    }\n                }\n            }\n        }\n\n        return {farthest_node, max_distance};\n    }\n\n    // Function to calculate the diameter and height of a tree\n    pair<int, int> calculateDiameterAndHeight(const vector<vector<int>>& adj) {\n        pair<int, int> farthest = bfs(0, adj);\n        pair<int, int> farthest_from_farthest = bfs(farthest.first, adj);\n        int diameter = farthest_from_farthest.second;\n        int height = (diameter + 1) / 2;\n        return {diameter, height};\n    }\n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n        int n=edges1.size()+1, m=edges2.size()+1;\n        vector<vector<int>> adj1(n);\n        vector<vector<int>> adj2(m);\n\n        for (const auto& edge : edges1) {\n            adj1[edge[0]].push_back(edge[1]);\n            adj1[edge[1]].push_back(edge[0]);\n        }\n        for (const auto& edge : edges2) {\n            adj2[edge[0]].push_back(edge[1]);\n            adj2[edge[1]].push_back(edge[0]);\n        }\n\n        auto [D1, H1] = calculateDiameterAndHeight(adj1);\n        auto [D2, H2] = calculateDiameterAndHeight(adj2);\n\n        int new_diameter = max({D1, D2, H1 + H2 + 1});\n        return new_diameter;\n    }\n};",
    "submit_ts": 1719717655.0
}