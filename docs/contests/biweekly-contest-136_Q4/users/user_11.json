{
    "username": "rgb234rgb",
    "submission": "class Solution {\n    int max(int a,int b){\n        return a>b?a:b;\n    }\n    int dfs(int cur,int ct,List<List<Integer>> rea,int[] rt,int[] dt){\n        ct=ct+((cur%2==0)? 2:1);\n        rt[cur]=ct;\n        int cdt=ct;\n        for (int j:rea.get(cur)){\n            if (rt[j]==0){\n                cdt=max(cdt,dfs(j,ct,rea,rt,dt));\n            }\n        }\n        dt[cur]=cdt;\n        return cdt;\n    }\n    void getAns(int cur,int fat,int curAnoCos,List<List<Integer>> rea,int[] dt,int[] rt,int[] ans){\n        int ma1=0;int m1=0;int ma2=0;int m2=0;\n        for (int t:rea.get(cur)){\n            if (t!=fat){\n                int cost=dt[t]-rt[t]+(t%2==0?2:1);\n                //System.out.println(cur+\" \"+cost+\" \"+t+\" \"+dt[t]+\" \"+rt[t]);\n                if (cost>ma1){\n                    ma2=ma1;ma1=cost;m1=t;\n                } else if (cost>ma2){\n                    ma2=cost;\n                }\n            }\n        }\n        ans[cur]=max(ma1,curAnoCos);\n        for (int t:rea.get(cur)){\n            if (t!=fat){\n                int nc=max(((t==m1)? ma2:ma1),curAnoCos)+(cur%2==0?2:1);\n                getAns(t,cur,nc,rea,dt,rt,ans);\n            }\n        }\n    }\n    public int[] timeTaken(int[][] edges) {\n        int n=edges.length+1;\n        List<List<Integer>> rea=new ArrayList<>();\n        for (int i=0;i<n;i++){\n            rea.add(new ArrayList<>());\n        }\n        for (int i=0;i<n-1;i++){\n            int x=edges[i][0];int y=edges[i][1];\n            rea.get(x).add(y);rea.get(y).add(x);\n        }\n        int[] rt=new int[n];int[] dt=new int[n];\n        dfs(0,0,rea,rt,dt);\n        int[] ans=new int[n];\n        getAns(0,-1,0,rea,dt,rt,ans);\n        return ans;\n    }\n}",
    "submit_ts": "1722697025",
    "subm_id": "552264076"
}