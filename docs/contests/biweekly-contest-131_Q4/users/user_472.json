{
    "username": "Sandeep_P",
    "submission": "class SegmentTree:\n    def __init__(self, data, default=0, func=max):\n        \"\"\"initialize the segment tree with data\"\"\"\n        self._default = default\n        self._func = func\n        self._len = len(data)\n        self._size = _size = 1 << (self._len - 1).bit_length()\n\n        self.data = [default] * (2 * _size)\n        self.data[_size:_size + self._len] = data\n        for i in reversed(range(_size)):\n            self.data[i] = func(self.data[i + i], self.data[i + i + 1])\n\n    def __delitem__(self, idx):\n        self[idx] = self._default\n\n    def __getitem__(self, idx):\n        if isinstance(idx, slice): return self.query(idx.start,idx.stop)\n        return self.data[idx + self._size]\n\n    def __setitem__(self, idx, value):\n        idx += self._size\n        self.data[idx] = value\n        idx >>= 1\n        while idx:\n            self.data[idx] = self._func(self.data[2 * idx], self.data[2 * idx + 1])\n            idx >>= 1\n\n    def __len__(self):\n        return self._len\n\n    def query(self, start, stop):\n        \"\"\"func of data[start, stop)\"\"\"\n        start += self._size\n        stop += self._size\n\n        res_left = res_right = self._default\n        while start < stop:\n            if start & 1:\n                res_left = self._func(res_left, self.data[start])\n                start += 1\n            if stop & 1:\n                stop -= 1\n                res_right = self._func(self.data[stop], res_right)\n            start >>= 1\n            stop >>= 1\n\n        return self._func(res_left, res_right)\n\n    def __repr__(self):\n        return \"SegmentTree({0})\".format(self.data)\nfrom sortedcontainers import SortedList\nclass Solution:\n    def getResults(self, queries: List[List[int]]) -> List[bool]:\n        x = SortedList([0])\n        y = SegmentTree([0]*50000)\n        def add(val):\n            pos = x.bisect_left(val)\n            if pos < len(x):\n                next_value= x[pos]\n                y[next_value]=(x[pos]-x[pos-1])-(val-x[pos-1])\n            y[val]=val-x[pos-1]\n            x.add(val)\n\n        ans = []\n        for q in queries:\n            if q[0] == 1:   \n                add(q[1])\n            elif q[0] == 2:\n                _, pos, size = q\n                cur_dist=pos-x[x.bisect_left(pos)-1]\n                max_distance = max(cur_dist,y[0:pos+1])\n                ans.append(size<=pos and max_distance >= size)\n        return ans",
    "submit_ts": "1716652214",
    "subm_id": "1267658554"
}