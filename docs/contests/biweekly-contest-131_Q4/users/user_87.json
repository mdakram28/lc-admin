{
    "username": "urimaj",
    "submission": "class Solution {\npublic:\n    int tree[400010] = {0};\n\n    vector<bool> getResults(vector<vector<int>>& queries) {\n        set<int> s;\n        map<int,int> m;\n        const int MAX_VAL = 5 * (1e4) + 10;\n        vector<bool> ans;\n        s.insert(0);\n        for (auto& q : queries) {\n            if (q[0] == 1) {\n                int x = q[1];\n                auto it = s.lower_bound(x);\n                if (it != s.end()) {\n                    updateTree(0, 0, MAX_VAL, *it, *it - x);\n                }\n                \n                if (it != s.begin()) {\n                    it--;\n                    updateTree(0, 0, MAX_VAL, x, x - *it);\n                }\n                s.insert(x);\n            }\n            else {\n                int x = q[1];\n                int sz = q[2];\n                auto it = s.lower_bound(x);\n                if (s.size() == 1) {\n                    ans.push_back(x >= sz);\n                }\n                else {\n                    int maxval = query(0, 0, MAX_VAL, 0, x);\n                    \n                    if (it != s.begin()) {\n                        it--;\n                        maxval = max(maxval, x - *it);\n                    }\n                    ans.push_back(maxval >= sz);  \n                }\n            }\n        }\n        return ans;\n    }\n    \n    int query(int idx, int s, int e, int qs, int qe) {\n        // out of range\n        if (e < qs || s > qe) return 0;\n\n        // in range\n        if (s >= qs && e <= qe) return tree[idx];\n\n        int mid = (s + e) / 2;\n        return max(query(2 * idx + 1, s, mid, qs, qe), query(2 * idx + 2, mid + 1, e, qs, qe));\n    }\n    \n    void updateTree(int idx, int s, int e, int pos, int val) {\n        if (pos < s || pos > e) return;\n\n        if (s == e) {\n            if (e == pos) {\n                tree[idx] = val;\n            }\n            return;\n        }\n\n        int mid = (s + e) / 2;\n        updateTree(2 * idx + 1, s, mid, pos, val);\n        updateTree(2 * idx + 2, mid + 1, e, pos, val);\n        tree[idx] = max(tree[2 * idx + 1], tree[2 * idx + 2]);\n    }\n};",
    "submit_ts": 1716649558.0
}