{
    "username": "IumoInfinium",
    "submission": "class TrieNode{\npublic:\n    TrieNode* child[26];\n    int wordIdx;\n    \n    TrieNode(){\n        for(int i=0; i<26; i++) child[i] = NULL;\n        wordIdx = -1;\n    }\n};\nclass Solution {\npublic:\n// TLE\n//     int minimumCost(string t, vector<string>& words, vector<int>& costs) {\n//         int n = t.size();\n//         int m = words.size();\n        \n//         vector<int> dp(n+1, INT_MAX);\n//         dp[0] = 0;\n        \n//         for(int i=1; i<=n; i++){\n//             for(int j=0; j<m; j++){\n//                 int k = words[j].length();\n//                 if(i >= k && t.substr(i-k, k) == words[j]){\n//                     if(dp[i-k] != INT_MAX){\n//                         dp[i] = min(dp[i], dp[i-k] + costs[j]);\n//                     }\n//                 }\n//             }\n//         }\n//         return dp[n] == INT_MAX ? -1: dp[n];\n//     }\n    void buildTrie(TrieNode* root, vector<string>& words){\n        for(int i=0; i<words.size(); i++){\n            TrieNode* curr = root;\n            \n            for(int j=words[i].size()-1; j>=0; j--){\n                char c = words[i][j];\n                if(!curr->child[c-'a']) curr->child[c-'a'] = new TrieNode();\n                curr = curr->child[c-'a'];\n            }\n            if(curr->wordIdx == -1 || costs[i] < costs[curr->wordIdx]) \n                curr->wordIdx = i;\n        }\n    }\n    int minimumCost(string t, vector<string>& words, vector<int>& costs){\n        int n = t.size();\n        vector<long long> dp(n+1, LLONG_MAX);\n        dp[0] = 0;\n        \n        this->costs = costs;\n        \n        TrieNode *root = new TrieNode();\n        buildTrie(root, words);\n        \n        for(int i=1; i<=n; i++){\n            TrieNode *curr = root;\n            \n            for(int j=i-1; j>=0; j--){\n                char c = t[j];\n                if(!curr->child[c-'a']) break;\n                \n                curr = curr->child[c-'a'];\n                \n                if(curr->wordIdx != -1 && dp[j] != LLONG_MAX){\n                    dp[i] = min(dp[i], dp[j] + costs[curr->wordIdx]);\n                }\n            }\n        }\n        return dp[n] == LLONG_MAX ? -1: dp[n];\n    }\n    \nprivate:\n    vector<int> costs;\n};",
    "submit_ts": "1720323682",
    "subm_id": "1312381482"
}