{
    "username": "puspendra_09",
    "submission": "class Solution {\npublic:\n    void dfs(int u , int& node , int p , int len , int& maxi , vector<int> adj[]) {\n        if(len > maxi) {\n            maxi = len;\n            node = u;\n        }\n        for(auto v: adj[u]) {\n            if(v == p) continue;\n            dfs(v , node , u , len + 1 , maxi , adj);\n        }\n    }\n\n    int diameter(vector<vector<int>>& edges) {\n        int n = edges.size() + 1;\n        vector<int> adj[n];\n        for(int i = 0; i < n - 1; i++) {\n            int u = edges[i][0];\n            int v = edges[i][1];\n            adj[u].push_back(v);\n            adj[v].push_back(u);\n        }\n        int node = -1;\n        int maxi = -1;\n        dfs(0 , node , -1 , 0 , maxi , adj);\n        int dummyNode = -1;\n        maxi = -1;\n        dfs(node , dummyNode , -1 , 0 , maxi , adj);\n\n        return maxi;\n\n    }\n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n        int x = diameter(edges1);\n        int y = diameter(edges2);\n        \n        \n        // cout << x << ' ' << y << endl;\n        \n        int X = x , Y = y;\n        \n        x++; y++;\n        \n        x = (x + 2) / 2;\n        y = (y + 2) / 2;\n        \n        return max({X , x + y - 1 , Y });\n    }\n};",
    "submit_ts": "1719716392",
    "subm_id": "1304363226"
}