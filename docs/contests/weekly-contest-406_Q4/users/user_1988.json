{
    "username": "mrroy_hub",
    "submission": "class Solution {\npublic:\n    long long minimumCost(int m, int n, vector<int>& horizontalCut, vector<int>& verticalCut) {\n         sort(horizontalCut.begin(),horizontalCut.end(),greater<int>());\n        sort(verticalCut.begin(),verticalCut.end(),greater<int>());\n        int hori_piece=1;\n        int verti_piece=1;\n        \n        long long totCost=0;\n        int hori_index =0,verti_index =0;\n        \n  while(hori_index<horizontalCut.size() && verti_index<verticalCut.size())\n          {\n            if(horizontalCut[hori_index] >=verticalCut[verti_index]) \n             {\n                // create a hori cut\n                totCost +=static_cast<long long>(horizontalCut[hori_index]) * verti_piece;\n                hori_piece++;\n                hori_index++;\n            } else {\n                // create  a verti cut\n                totCost +=static_cast<long long>(verticalCut[verti_index]) * hori_piece;\n                verti_piece++;\n                verti_index++;\n             }\n  }\n        // jodi hori cut baki thaka then , \n        \n        while (hori_index <horizontalCut.size()) {\n            totCost +=static_cast<long long>(horizontalCut[hori_index]) * verti_piece;\n            hori_index++;\n         }\n           // jodi verti cut baki thaka \n        \n        while (verti_index <verticalCut.size()) {\n            totCost +=static_cast<long long>(verticalCut[verti_index]) * hori_piece;\n            verti_index++;\n        }\n\n        return totCost;\n    }\n};",
    "submit_ts": "1720926571",
    "subm_id": "1320290101"
}