{
    "username": "elated-hugleydp",
    "submission": "\ntype ptr struct {\n\tidx, val int\n}\n\nfunc minimumDistance(points [][]int) (ans int) {\n\n\td := make([][]ptr, 4)\n\tfor i := range d {\n\t\td[i] = make([]ptr, len(points))\n\t\tfor j, p := range points {\n\t\t\tswitch i {\n\t\t\tcase 0:\n\t\t\t\td[i][j] = ptr{j, p[0] - p[1]}\n\t\t\tcase 1:\n\t\t\t\td[i][j] = ptr{j, p[0] + p[1]}\n\t\t\tcase 2:\n\t\t\t\td[i][j] = ptr{j, -p[0] - p[1]}\n\t\t\tcase 3:\n\t\t\t\td[i][j] = ptr{j, p[1] - p[0]}\n\t\t\t}\n\t\t}\n\t}\n\tsort.Slice(d[0], func(i, j int) bool { return d[0][i].val < d[0][j].val })\n\tsort.Slice(d[1], func(i, j int) bool { return d[1][i].val < d[1][j].val })\n\tsort.Slice(d[2], func(i, j int) bool { return d[2][i].val < d[2][j].val })\n\tsort.Slice(d[3], func(i, j int) bool { return d[3][i].val < d[3][j].val })\n\n\t// \u79fb\u9664\u7684\u70b9\u53ea\u80fd\u662fd[i]\u7aef\u70b9\n\tans = 1e9 + 7\n\tn := len(points)\n\tfor _, rm := range []int{d[0][0].idx, d[0][n-1].idx, d[1][0].idx, d[1][n-1].idx, d[2][0].idx, d[2][n-1].idx, d[3][0].idx, d[3][n-1].idx} {\n\t\t// \u5982\u679c\u79fb\u9664\u4e86rm\uff0c\u6c42\u6700\u8fdc\u8ddd\u79bb\n\t\tans = min(ans, maxDis(rm, n, d[0], d[1], d[2], d[3]))\n\t}\n\treturn\n}\nfunc maxDis(rm int, size int, d0, d1, d2, d3 []ptr) int {\n\tret := 0\n\tif d0[size-1].idx == rm {\n\t\tret = max(ret, d0[size-2].val-d0[0].val)\n\t} else if d0[0].idx == rm {\n\t\tret = max(ret, d0[size-1].val-d0[1].val)\n    } else {\n        ret = max(ret, d0[size-1].val-d0[0].val)\n    }\n\tif d1[size-1].idx == rm {\n\t\tret = max(ret, d1[size-2].val-d1[0].val)\n\t} else if d1[0].idx == rm {\n\t\tret = max(ret, d1[size-1].val-d1[1].val)\n\t} else {\n        ret = max(ret, d1[size-1].val-d1[0].val)\n    }\n\tif d2[size-1].idx == rm {\n\t\tret = max(ret, d2[size-2].val-d2[0].val)\n\t} else if d2[0].idx == rm {\n\t\tret = max(ret, d2[size-1].val-d2[1].val)\n\t} else {\n        ret = max(ret, d2[size-1].val-d2[0].val)\n    }\n\tif d3[size-1].idx == rm {\n\t\tret = max(ret, d3[size-2].val-d3[0].val)\n\t} else if d3[0].idx == rm {\n\t\tret = max(ret, d3[size-1].val-d3[1].val)\n\t} else {\n        ret = max(ret, d3[size-1].val-d3[0].val)\n    }\n\treturn ret\n}"
}