{
    "username": "adarsh_dhakad",
    "submission": "class Solution {\n    fun minimumDifference(nums: IntArray, target: Int): Int {\n        fun getSetBits(x: Int): List<Int> {\n            val setBits = mutableListOf<Int>()\n            var index = 0\n            var temp = x\n            while (temp > 0) {\n                if (temp and 1 == 1) {\n                    setBits.add(index)\n                }\n                temp = temp shr 1\n                index++\n            }\n            return setBits\n        }\n\n        fun countsToBitwiseAnd(windowLength: Int, bitCounts: MutableMap<Int, Int>): Int {\n            var result = 0\n            for ((bit, count) in bitCounts) {\n                if (count == windowLength) {\n                    result = result or (1 shl bit)\n                }\n            }\n            return result\n        }\n\n        val n = nums.size\n        if (n == 0) return Math.abs(target)\n\n        var currentAndValue = nums[0]\n        var bestDiff = Math.abs(currentAndValue - target)\n        val windowBitCounts = mutableMapOf<Int, Int>()\n\n        getSetBits(nums[0]).forEach { bit ->\n            windowBitCounts[bit] = windowBitCounts.getOrDefault(bit, 0) + 1\n        }\n\n        var leftIdx = 0\n        var rightIdx = 0\n\n        while (rightIdx < n) {\n            if (currentAndValue > target || leftIdx > rightIdx) {\n                rightIdx++\n                if (rightIdx >= n) break\n                getSetBits(nums[rightIdx]).forEach { bit ->\n                    windowBitCounts[bit] = windowBitCounts.getOrDefault(bit, 0) + 1\n                }\n            }\n            else {\n                getSetBits(nums[leftIdx]).forEach { bit ->\n                    windowBitCounts[bit] = windowBitCounts.getOrDefault(bit, 0) - 1\n                    if (windowBitCounts[bit] == 0) {\n                        windowBitCounts.remove(bit)\n                    }\n                }\n                leftIdx++\n            }\n\n            if (rightIdx >= leftIdx) {\n                currentAndValue = countsToBitwiseAnd(rightIdx - leftIdx + 1, windowBitCounts)\n                bestDiff = minOf(bestDiff, Math.abs(currentAndValue - target))\n            }\n        }\n\n        return bestDiff\n    }\n}\n",
    "submit_ts": 1717300155.0
}