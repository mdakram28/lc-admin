{
    "username": "masteralphi",
    "submission": "from sortedcontainers import SortedList\n\nclass Solution:\n    def update(self, tr, p, val) -> None:\n        while p:\n            tr[p] = max(tr[p], val)\n            p >>= 1\n\n    def query(self, tr, l, r) -> int:\n        ans = 0\n        while 0 < l < r:\n            if l % 2 == 1:\n                ans = max(ans, tr[l])\n                l += 1\n            if r % 2 == 1:\n                r -= 1\n                ans = max(ans, tr[r])\n            l >>= 1\n            r >>= 1\n        return ans\n\n    def getResults(self, queries: List[List[int]]) -> List[bool]:\n        cnt = 0\n        mx = 0\n        for q in queries:\n            if q[0] == 2:\n                mx = max(mx, q[1])\n                cnt += 1\n        if cnt == len(queries):\n            res = []\n            for q in queries:\n                res.append(q[1] >= q[2])\n            return res\n        pos = []\n        for i, q in enumerate(queries):\n            if q[0] == 1:\n                pos.append([q[1], i])\n        pos.sort()\n        cur = 0\n        segm = []\n        for v, idx in pos:\n            segm.append([v, v-cur, idx])\n            cur = v\n        pos = {}\n        for idx, (v, _, _) in enumerate(segm):\n            pos[v] = idx\n        s = SortedList([[x,y] for x, y, _ in segm])\n        segm.append([mx, mx - cur, -1])\n\n        si = len(segm)\n        pw = 1\n        while pw < si:\n            pw <<= 1\n        tr = [0] * 2 * pw\n        for i in range(si):\n            tr[pw + i] = segm[i][1]\n        for i in range(pw-1, -1, -1):\n            tr[i] = max(tr[2*i], tr[2*i+1])\n\n        res = [False] * cnt\n        for i in range(len(queries)-1, -1, -1):\n            if queries[i][0] == 2:\n                x, sz = queries[i][1:]\n                if x < sz:\n                    cnt -= 1\n                    continue\n                if not s:\n                    res[cnt - 1] = True\n                    cnt -= 1\n                    continue\n                l, r = 0, len(s)-1\n                while l <= r:\n                    m = (l+r) // 2\n                    if s[m][0] <= x:\n                        l = m + 1\n                    else:\n                        r = m - 1\n                v = s[r][0]\n                u = max(x-v, self.query(tr,pw,pw+pos[v]+1))\n                res[cnt-1] = (u >= sz)\n                cnt -= 1\n            else:\n                x = queries[i][1]\n                # p = pos[i]\n                l, r = 0, len(s) - 1\n                while l <= r:\n                    m = (l + r) // 2\n                    if s[m][0] <= x:\n                        l = m + 1\n                    else:\n                        r = m - 1\n                if r != len(s)-1:\n                    s[r + 1][1] += s[r][1]\n                    v = s[r + 1][1]\n                    p = pos[s[r + 1][0]]\n                    self.update(tr, p+pw, v)\n                    self.update(tr, p + 1 + pw, v)\n                s.discard(s[r])\n\n        return res",
    "submit_ts": 1716652551.0
}