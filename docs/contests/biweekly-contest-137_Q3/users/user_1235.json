{
    "username": "Mohit Singh Rawat",
    "submission": "class Solution {\npublic:\n    long long maximumValueSum(std::vector<std::vector<int>>& board) {\n        int m = board.size();\n        int n = board[0].size();\n        auto [bestValues, bestColumns] = precomputeBestValues(board, m, n);\n        return findMaximumSum(bestValues, bestColumns, m);\n    }\n\nprivate:\n    std::pair<std::vector<std::vector<long long>>, std::vector<std::vector<int>>> \n    precomputeBestValues(const std::vector<std::vector<int>>& board, int m, int n) {\n        std::vector<std::vector<long long>> bestValues(m, std::vector<long long>(3, LLONG_MIN));\n        std::vector<std::vector<int>> bestColumns(m, std::vector<int>(3, -1));\n        \n        for (int i = 0; i < m; ++i) {\n            auto colValues = getColumnValues(board, i, n);\n            storeBestThreeValues(colValues, bestValues[i], bestColumns[i]);\n        }\n        \n        return {bestValues, bestColumns};\n    }\n    std::vector<std::pair<long long, int>> \n    getColumnValues(const std::vector<std::vector<int>>& board, int row, int n) {\n        std::vector<std::pair<long long, int>> colValues;\n        for (int j = 0; j < n; ++j) {\n            colValues.emplace_back(board[row][j], j);\n        }\n        std::sort(colValues.rbegin(), colValues.rend());\n        return colValues;\n    }\n    void storeBestThreeValues(const std::vector<std::pair<long long, int>>& colValues, \n                              std::vector<long long>& bestValues, \n                              std::vector<int>& bestColumns) {\n        for (int k = 0; k < 3 && k < colValues.size(); ++k) {\n            bestValues[k] = colValues[k].first;\n            bestColumns[k] = colValues[k].second;\n        }\n    }\n    long long findMaximumSum(const std::vector<std::vector<long long>>& bestValues, \n                             const std::vector<std::vector<int>>& bestColumns, \n                             int m) {\n        long long maxSum = LLONG_MIN;\n\n        for (int r1 = 0; r1 < m; ++r1) {\n            for (int r2 = r1 + 1; r2 < m; ++r2) {\n                for (int r3 = r2 + 1; r3 < m; ++r3) {\n                    maxSum = std::max(maxSum, calculateSumForRows(bestValues, bestColumns, r1, r2, r3));\n                }\n            }\n        }\n\n        return maxSum;\n    }\n    long long calculateSumForRows(const std::vector<std::vector<long long>>& bestValues, \n                                  const std::vector<std::vector<int>>& bestColumns, \n                                  int r1, int r2, int r3) {\n        long long maxSum = LLONG_MIN;\n\n        for (int i = 0; i < 3; ++i) {\n            for (int j = 0; j < 3; ++j) {\n                if (bestColumns[r2][j] == bestColumns[r1][i]) continue;\n                for (int k = 0; k < 3; ++k) {\n                    if (bestColumns[r3][k] == bestColumns[r1][i] || bestColumns[r3][k] == bestColumns[r2][j]) continue;\n                    \n                    long long currentSum = bestValues[r1][i] + bestValues[r2][j] + bestValues[r3][k];\n                    maxSum = std::max(maxSum, currentSum);\n                }\n            }\n        }\n        return maxSum;\n    }\n};\n",
    "submit_ts": "1723910344",
    "subm_id": "1359226710"
}