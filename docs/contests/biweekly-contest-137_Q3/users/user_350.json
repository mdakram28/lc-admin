{
    "username": "MM",
    "submission": "class Solution {\npublic:\n    long long maximumValueSum(vector<vector<int>>& mat) {\n        int m = mat.size(), n = mat[0].size();\n        using tr = std::tuple<int,int,int>;\n        std::priority_queue<tr, std::vector<tr>, std::greater<>> min_heap;\n        for (int i = 0; i < m; ++i)\n            for (int j = 0; j < n; ++j) {\n                if (min_heap.size() < 3 * (m + n)) {\n                    min_heap.emplace(mat[i][j], i, j);\n                    continue;\n                }\n                if (std::get<0>(min_heap.top()) < mat[i][j]) {\n                    min_heap.pop();\n                    min_heap.emplace(mat[i][j], i, j);\n                }\n            }\n        std::vector<tr> maxs;\n        while (!min_heap.empty()) {\n            maxs.push_back(min_heap.top());\n            min_heap.pop();\n        }\n        //for (auto& [val,i,j] : maxs)\n            //std::cout << val << \",\" << i << \",\" << j << \"\\n\";\n        long long ret = LLONG_MIN;\n        for (int i = 0; i < maxs.size(); ++i)\n            for (int j = i + 1; j < maxs.size(); ++j)\n                for (int k = j + 1; k < maxs.size(); ++k) {\n                    if (std::get<2>(maxs[i]) == std::get<2>(maxs[j]) ||\n                        std::get<2>(maxs[i]) == std::get<2>(maxs[k]) ||\n                        std::get<2>(maxs[j]) == std::get<2>(maxs[k]) ||\n                        \n                        std::get<1>(maxs[i]) == std::get<1>(maxs[j]) ||\n                        std::get<1>(maxs[i]) == std::get<1>(maxs[k]) ||\n                        std::get<1>(maxs[j]) == std::get<1>(maxs[k]))            \n                        continue;\n                    ret = std::max(ret, (long long)(std::get<0>(maxs[i])) + (long long)(std::get<0>(maxs[j])) + (long long)(std::get<0>(maxs[k])));\n                }\n        return ret;\n    }\n};",
    "submit_ts": "1723909553",
    "subm_id": "1359196918"
}