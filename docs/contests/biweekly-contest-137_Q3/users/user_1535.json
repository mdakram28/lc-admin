{
    "username": "jack_sparrow_23",
    "submission": "#include <vector>\n#include <algorithm>\n#include <climits>\n\nusing namespace std;\n\nclass Solution {\npublic:\n    long long maximumValueSum(vector<vector<int>>& board) {\n        int n = board.size(); \n        int m = board[0].size();\n        \n        // Early return if there are fewer than 3 columns\n        if (m < 3) {\n            return 0;\n        }\n\n        vector<vector<pair<int, int>>> grid(n, vector<pair<int, int>>(m));\n        \n        // Fill grid with values and column indices\n        for (int i = 0; i < n; ++i) {\n            for (int j = 0; j < m; ++j) {\n                grid[i][j] = {board[i][j], j};\n            }\n        }\n        \n        // Sort each row by value in descending order\n        for (int i = 0; i < n; ++i) {\n            sort(grid[i].rbegin(), grid[i].rend());\n        }\n        \n        long long maxi = LLONG_MIN;\n        \n        // Iterate over all combinations of 3 rows\n        for (int i = 0; i < n; ++i) {\n            for (int j = i + 1; j < n; ++j) {\n                for (int k = j + 1; k < n; ++k) {\n                    // Iterate over all combinations of 3 columns within the selected rows\n                    for (int i2 = 0; i2 < min(3, m); ++i2) {\n                        for (int j2 = 0; j2 < min(3, m); ++j2) {\n                            for (int k2 = 0; k2 < min(3, m); ++k2) {\n                                // Ensure no two rooks are in the same column\n                                if (grid[i][i2].second != grid[j][j2].second && \n                                    grid[j][j2].second != grid[k][k2].second && \n                                    grid[k][k2].second != grid[i][i2].second) {\n                                    // Calculate the sum of the current combination\n                                    long long currentSum = static_cast<long long>(grid[i][i2].first) + \n                                                           static_cast<long long>(grid[j][j2].first) + \n                                                           static_cast<long long>(grid[k][k2].first);\n                                    maxi = max(maxi, currentSum);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        \n        return maxi;\n    }\n};\n",
    "submit_ts": "1723909471",
    "subm_id": "1359193867"
}