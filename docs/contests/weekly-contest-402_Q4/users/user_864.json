{
    "username": "devmaan02",
    "submission": "class SegmentTree:\n    def __init__(self, nums):\n        self.n = len(nums)\n        self.nums = nums\n        self.tree = [0] * (4 * self.n)\n        self.build(0, 0, self.n - 1)\n    \n    def build(self, node, start, end):\n        if start == end:\n            if 0 < start < self.n - 1 and self.nums[start - 1] < self.nums[start] > self.nums[start + 1]:\n                self.tree[node] = 1\n        else:\n            mid = (start + end) // 2\n            left_child = 2 * node + 1\n            right_child = 2 * node + 2\n            self.build(left_child, start, mid)\n            self.build(right_child, mid + 1, end)\n            self.tree[node] = self.tree[left_child] + self.tree[right_child]\n    \n    def update(self, index, value, node, start, end):\n        if start == end:\n            self.nums[index] = value\n            if 0 < index < self.n - 1 and self.nums[index - 1] < self.nums[index] > self.nums[index + 1]:\n                self.tree[node] = 1\n            else:\n                self.tree[node] = 0\n        else:\n            mid = (start + end) // 2\n            left_child = 2 * node + 1\n            right_child = 2 * node + 2\n            if start <= index <= mid:\n                self.update(index, value, left_child, start, mid)\n            else:\n                self.update(index, value, right_child, mid + 1, end)\n            self.tree[node] = self.tree[left_child] + self.tree[right_child]\n    \n    def query(self, L, R, node, start, end):\n        if R < start or end < L:\n            return 0\n        if L <= start and end <= R:\n            return self.tree[node]\n        mid = (start + end) // 2\n        left_child = 2 * node + 1\n        right_child = 2 * node + 2\n        left_query = self.query(L, R, left_child, start, mid)\n        right_query = self.query(L, R, right_child, mid + 1, end)\n        return left_query + right_query\n    \n    \nclass Solution(object):\n    def countOfPeaks(self, nums, queries):\n        seg_tree = SegmentTree(nums)\n        results = []\n\n        for query in queries:\n            if query[0] == 1:\n                li, ri = query[1], query[2]\n                results.append(seg_tree.query(li + 1, ri - 1, 0, 0, seg_tree.n - 1))\n            elif query[0] == 2:\n                indexi, vali = query[1], query[2]\n                nums[indexi] = vali\n                for i in range(max(1, indexi - 1), min(seg_tree.n - 1, indexi + 1) + 1):\n                    seg_tree.update(i, nums[i], 0, 0, seg_tree.n - 1)\n\n        return results\n\n",
    "submit_ts": 1718507228.0
}