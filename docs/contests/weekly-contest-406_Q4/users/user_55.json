{
    "username": "21r01a04r8",
    "submission": "class Solution:\n    def minimumCost(self, m: int, n: int, horizontalCut: list[int], verticalCut: list[int]) -> int:\n        # Sort cuts in descending order\n        horizontalCut.sort(reverse=True)\n        verticalCut.sort(reverse=True)\n        \n        # Initialize the number of pieces\n        h_pieces = 1\n        v_pieces = 1\n        \n        total_cost = 0\n        i = 0\n        j = 0\n        \n        # Greedily choose the highest cost cut\n        while i < len(horizontalCut) and j < len(verticalCut):\n            if horizontalCut[i] >= verticalCut[j]:\n                total_cost += horizontalCut[i] * v_pieces\n                h_pieces += 1\n                i += 1\n            else:\n                total_cost += verticalCut[j] * h_pieces\n                v_pieces += 1\n                j += 1\n        \n        # Add the remaining horizontal cuts\n        while i < len(horizontalCut):\n            total_cost += horizontalCut[i] * v_pieces\n            i += 1\n        \n        # Add the remaining vertical cuts\n        while j < len(verticalCut):\n            total_cost += verticalCut[j] * h_pieces\n            j += 1\n        \n        return total_cost\n\n# Example usage\nsol = Solution()\nprint(sol.minimumCost(3, 2, [1, 3], [5]))  # Output: 13\nprint(sol.minimumCost(2, 2, [7], [4]))     # Output: 15",
    "submit_ts": "1720924856",
    "subm_id": "1320233649"
}