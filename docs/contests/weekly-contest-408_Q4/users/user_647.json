{
    "username": "_Gaurav_Singh_",
    "submission": "class Solution {\npublic:\n    bool canReachCorner(int X, int Y, vector<vector<int>>& circles) {  \n        return checkPath(X, Y, circles);\n    }\n\nprivate:\n      bool bfs(vector<vector<int>>& graph, int start, int target1, int target2, int n) {\n        queue<int> q;\n        vector<bool> visited(n + 4, false);\n        q.push(start);\n        visited[start] = true;\n        while (!q.empty()) {   \n            int node = q.front();\n            q.pop();\n            for (int neighbor : graph[node]) {\n                if (!visited[neighbor]) {\n                    q.push(neighbor);\n                    visited[neighbor] = true;\n                }\n            }\n        }  \n        return (visited[target1] || visited[target2]);\n    }\n    bool checkPath(int X, int Y, vector<vector<int>>& circles) {      \n        int n = circles.size();\n        vector<vector<int>> graph(n + 4);       \n        for (int i = 0; i < n; ++i) {  \n            if (circles[i][0] <= circles[i][2]) {               \n                graph[n].push_back(i);                \n                graph[i].push_back(n);\n            }\n            if (X - circles[i][0] <= circles[i][2]) {              \n                graph[n + 2].push_back(i);               \n                graph[i].push_back(n + 2);\n            }\n            if (circles[i][1] <= circles[i][2]) {   \n                graph[n + 1].push_back(i);\n                graph[i].push_back(n + 1);\n            }\n            if (Y - circles[i][1] <= circles[i][2]) {\n                graph[n + 3].push_back(i);   \n                graph[i].push_back(n + 3);\n            }\n            for (int j = i + 1; j < n; ++j) {       \n                double distance = sqrt(pow(circles[i][0] - circles[j][0], 2) + pow(circles[i][1] - circles[j][1], 2));\n                int combinedRadius = circles[i][2] + circles[j][2];\n                if (combinedRadius >= distance) { \n                    graph[i].push_back(j);\n                    graph[j].push_back(i);\n                }\n            }\n        }\n        bool isBlocked = false;\n        isBlocked |= bfs(graph, n, n + 1, n + 2, n + 4);\n        isBlocked |= bfs(graph, n + 3, n + 2, n + 1, n + 4); \n        return !isBlocked;\n    }  \n};\n",
    "submit_ts": "1722138468",
    "subm_id": "1335791547"
}