{
    "username": "kmjp",
    "submission": "#include <bits/stdc++.h>\nusing namespace std;\ntypedef signed long long ll;\n\n#undef _P\n#define _P(...) (void)printf(__VA_ARGS__)\n#define FOR(x,to) for(x=0;x<(to);x++)\n#define FORR(x,arr) for(auto& x:arr)\n#define FORR2(x,y,arr) for(auto& [x,y]:arr)\n#define ALL(a) (a.begin()),(a.end())\n#define ZERO(a) memset(a,0,sizeof(a))\n#define MINUS(a) memset(a,0xff,sizeof(a))\ntemplate<class T> bool chmax(T &a, const T &b) { if(a<b){a=b;return 1;}return 0;}\ntemplate<class T> bool chmin(T &a, const T &b) { if(a>b){a=b;return 1;}return 0;}\n//-------------------------------------------------------\n\n\nmultiset<int> XpY,XmY;\n\nclass Solution {\npublic:\n    int minimumDistance(vector<vector<int>>& points) {\n\t\tXpY.clear();\n\t\tXmY.clear();\n\t\tint i;\n\t\tint N=points.size();\n\t\tFOR(i,N) {\n\t\t\tXpY.insert(points[i][0]+points[i][1]);\n\t\t\tXmY.insert(points[i][0]-points[i][1]);\n\t\t}\n\t\tint ret=1<<30;\n\t\tFOR(i,N) {\n\t\t\tXpY.erase(XpY.find(points[i][0]+points[i][1]));\n\t\t\tXmY.erase(XmY.find(points[i][0]-points[i][1]));\n\t\t\tret=min(ret,max(*XpY.rbegin()-*XpY.begin(),*XmY.rbegin()-*XmY.begin()));\n\t\t\tXpY.insert(points[i][0]+points[i][1]);\n\t\t\tXmY.insert(points[i][0]-points[i][1]);\n\t\t}\n\t\treturn ret;\n\t\t\n\t\t\t\n        \n    }\n};\n"
}