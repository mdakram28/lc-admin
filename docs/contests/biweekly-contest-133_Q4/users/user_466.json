{
    "username": "YXSyPH5SD0",
    "submission": "class Solution {\npublic:\n    const int MOD = 1e9 + 7;\n    static const int MAX_INVERSIONS = 400;\n    \n    int numberOfPermutations(int n, vector<vector<int>>& requirements) {\n        unordered_map<int, int> endIdxToInversionCnt;\n   \n        for (auto& req : requirements) {\n            int endIdx = req[0];\n            int inversionCnt = req[1];\n            endIdxToInversionCnt[endIdx + 1] = inversionCnt; \n        }\n        \n     \n        vector<vector<long long>> dp(n + 1, vector<long long>(MAX_INVERSIONS + 1, 0));\n        dp[0][0] = 1;\n        \n      \n        for (int length = 1; length <= n; ++length) {\n            for (int currentInversions = 0; currentInversions <= MAX_INVERSIONS; ++currentInversions) {\n                dp[length][currentInversions] = 0;\n                \n               \n                for (int newPosition = 0; newPosition < length; ++newPosition) {\n                    int previousInversions = currentInversions - newPosition;\n                    if (previousInversions >= 0) {\n                        dp[length][currentInversions] = (dp[length][currentInversions] + dp[length - 1][previousInversions]) % MOD;\n                    }\n                }\n            }\n            \n            if (endIdxToInversionCnt.count(length) > 0) {\n                int requiredInversions = endIdxToInversionCnt[length];\n                for (int currentInversions = 0; currentInversions <= MAX_INVERSIONS; ++currentInversions) {\n                    if (currentInversions != requiredInversions) {\n                        dp[length][currentInversions] = 0;\n                    }\n                }\n            }\n        }\n        \n        int result = 0;\n        for (int currentInversions = 0; currentInversions <= MAX_INVERSIONS; ++currentInversions) {\n            result = (result + dp[n][currentInversions]) % MOD;\n        }\n        \n        return result;\n    }\n};\n",
    "submit_ts": 1719070516.0
}