{
    "username": "jam",
    "submission": "class Solution {\n    long ri, rj, ci, cj;\n    public long maximumValueSum(int[][] board) {\n        int r = board.length, c = board[0].length;\n        long[][][] rm = new long[r][3][2];\n        long[][][] cm = new long[c][3][2];\n        for(long[][] arr: rm)\n            for(long[] ar: arr)\n                Arrays.fill(ar, Long.MIN_VALUE);\n        for(long[][] arr: cm)\n            for(long[] ar: arr)\n                Arrays.fill(ar, Long.MIN_VALUE);\n        for(int i = 0; i < r; i++) {\n            for(int j = 0; j < c; j++) {\n                int pt = board[i][j];\n                if(pt > rm[i][0][0]) {\n                    rm[i][2] = rm[i][1];\n                    rm[i][1] = rm[i][0];\n                    rm[i][0] = new long[] { pt, j };\n                }\n                else if(pt > rm[i][1][0]) {\n                    rm[i][2] = rm[i][1];\n                    rm[i][1] = new long[] { pt, j };\n                }\n                else if(pt > rm[i][2][0]) {\n                    rm[i][2] = new long[] { pt, j };\n                }\n                if(pt > cm[j][0][0]) {\n                    cm[j][2] = cm[j][1];\n                    cm[j][1] = cm[j][0];\n                    cm[j][0] = new long[] { pt, i };\n                }\n                else if(pt > cm[j][1][0]) {\n                    cm[j][2] = cm[j][1];\n                    cm[j][1] = new long[] { pt, i };\n                }\n                else if(pt > cm[j][2][0]) {\n                    cm[j][2] = new long[] { pt, i };\n                }\n            }\n        }\n        long max = Long.MIN_VALUE;\n        for(int i = 0; i < r; i++) {\n            ri = i;\n            for(int j = 0; j < c; j++) {\n                cj = j;\n                for(long[] rk: rm[i]) {\n                    rj = rk[1];\n                    if(rj == cj)\n                        continue;\n                    for(long[] ck: cm[j]) {\n                        ci = ck[1];\n                        if(ci == ri)\n                            continue;\n                        // System.out.println(ri+\" \"+rj+\" \"+ci+\" \"+cj);\n                        max = Math.max(rk[0] + ck[0] + nt(rm, cm), max);\n                    }\n                    break;\n                }\n            }\n        }\n        return max;\n    }\n\n    public long nt(long[][][] rm, long[][][] cm) {\n        long max = Long.MIN_VALUE;\n        long[] cur;\n        for(int i = 0; i < rm.length; i++) {\n            if(i == ci || i == ri)\n                continue;\n            for(int j = 0; j < 3; j++) {\n                long tmp = rm[i][j][1];\n                if(tmp == cj || tmp == rj)\n                    continue;\n                max = Math.max(max, rm[i][j][0]);\n                break;\n            }\n        }\n        for(int i = 0; i < cm.length; i++) {\n            if(i == cj || i == rj)\n                continue;\n            for(int j = 0; j < 3; j++) {\n                long tmp = cm[i][j][1];\n                if(tmp == ci || tmp == ri)\n                    continue;\n                max = Math.max(max, cm[i][j][0]);\n                break;\n            }\n        }\n        return max;\n    }\n}",
    "submit_ts": "1723907395",
    "subm_id": "1359105465"
}