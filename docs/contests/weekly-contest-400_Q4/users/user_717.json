{
    "username": "Umesh2095",
    "submission": "import java.util.*;\n\nclass CustomSegmentTree {\n    private int[] tree;\n    private int size;\n\n    public void init(int[] arr) {\n        this.size = arr.length;\n        this.tree = new int[4 * this.size];\n        construct(arr, 0, 0, this.size - 1);\n    }\n\n    private void construct(int[] arr, int node, int start, int end) {\n        if (start == end) {\n            tree[node] = arr[start];\n        } else {\n            int mid = (start + end) / 2;\n            construct(arr, 2 * node + 1, start, mid);\n            construct(arr, 2 * node + 2, mid + 1, end);\n            tree[node] = tree[2 * node + 1] & tree[2 * node + 2];\n        }\n    }\n\n    public int query(int left, int right) {\n        return rangeAndQuery(0, 0, this.size - 1, left, right);\n    }\n\n    private int rangeAndQuery(int node, int start, int end, int left, int right) {\n        if (right < start || end < left) {\n            return (1 << 31) - 1;  // Equivalent to Integer.MAX_VALUE\n        }\n        if (left <= start && end <= right) {\n            return tree[node];\n        }\n        int mid = (start + end) / 2;\n        int leftResult = rangeAndQuery(2 * node + 1, start, mid, left, right);\n        int rightResult = rangeAndQuery(2 * node + 2, mid + 1, end, left, right);\n        return leftResult & rightResult;\n    }\n}\n\nclass Solution {\n    public int minimumDifference(int[] nums, int k) {\n        int size = nums.length;\n        CustomSegmentTree segmentTree = new CustomSegmentTree();\n        segmentTree.init(nums);\n        int minDifference = Integer.MAX_VALUE;\n\n        for (int i = 0; i < size; i++) {\n            int left = i - 1, right = size - 1;\n            while (right - left > 1) {\n                int mid = (left + right) / 2;\n                if (segmentTree.query(i, mid) >= k) {\n                    left = mid;\n                } else {\n                    right = mid;\n                }\n            }\n            if (left != i - 1) {\n                minDifference = Math.min(minDifference, customAbs(segmentTree.query(i, left), k));\n            }\n            minDifference = Math.min(minDifference, customAbs(k, segmentTree.query(i, right)));\n        }\n        return minDifference;\n    }\n\n    private int customAbs(int a, int b) {\n        return Math.abs(a - b);\n    }\n}\n",
    "submit_ts": 1717299714.0
}