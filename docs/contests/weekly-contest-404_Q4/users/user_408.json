{
    "username": "StrangeWh",
    "submission": "class Solution {\npublic:\n    void dp(int u, int f, vector<vector<int>> &g, vector<int> &ans, vector<int> &dist) { // ans[u]\u662f\u8fde\u4e24\u8fb9\uff0cdist[u]\u662f\u53ea\u8fde\u4e00\u8fb9\n        for (int v: g[u]) {\n            if (v != f) dp(v, u, g, ans, dist);\n        }\n        for (int v: g[u]) {\n            if (v != f) {\n                ans[u] = max({ans[u], dist[u] + dist[v] + 1,ans[v]});\n                dist[u] = max(dist[u], dist[v] + 1);\n            }\n        }\n    }\n\n    vector<vector<int>> g1, g2;\n    vector<int> ans1, ans2, dist1, dist2;\n    int n, m;\n\n    int minimumDiameterAfterMerge(vector<vector<int>> &edges1, vector<vector<int>> &edges2) {\n        n = edges1.size() + 1, m = edges2.size() + 1;\n        g1.resize(n), g2.resize(m);\n        ans1.resize(n), ans2.resize(m), dist1.resize(n), dist2.resize(m);\n        for (auto v: edges1) {\n            int a = v[0], b = v[1];\n            g1[a].emplace_back(b);\n            g1[b].emplace_back(a);\n        }\n        for (auto v: edges2) {\n            int a = v[0], b = v[1];\n            g2[a].emplace_back(b);\n            g2[b].emplace_back(a);\n        }\n        dp(0, -1, g1, ans1, dist1);\n        dp(0, -1, g2, ans2, dist2);\n        cout<<ans1[0]<<' '<<dist1[0]<<'\\n';\n        cout<<ans2[0]<<' '<<dist2[0]<<'\\n';\n        return max({(ans1[0] + 1) / 2 + (ans2[0] + 1) / 2 + 1,ans1[0],ans2[0]});\n    }\n};",
    "submit_ts": 1719717638.0
}