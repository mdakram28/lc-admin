{
    "username": "l00",
    "submission": "class Solution:\n    def maximumValueSum(self, board: List[List[int]]) -> int:\n        n, m = len(board), len(board[0])\n\n        @cache\n        def queue1(y: int):\n            if y == 0: return board[0].copy()\n            pre = queue1(y - 1)\n            return [max(a, b) for a, b in zip(pre, board[y])]\n        @cache\n        def dp1(y: int):\n            queue = queue1(y)\n            heap = [(-num, i) for i, num in enumerate(queue)]\n            heapq.heapify(heap)\n            return [heapq.heappop(heap), heapq.heappop(heap), heapq.heappop(heap)]\n\n        @cache\n        def queue2(y: int):\n            heap = [(-num, i) for i, num in enumerate(board[y])]\n            heapq.heapify(heap)\n            return [heapq.heappop(heap), heapq.heappop(heap), heapq.heappop(heap)]\n        @cache\n        def dp2(y: int, x: int):\n            if y == 0: return -inf\n            pre1 = dp1(y - 1)\n            queue = queue2(y)\n            best = -inf\n            for num1, index1 in pre1:\n                if index1 == x: continue\n                res = -num1\n                for num2, index2 in queue:\n                    if index2 == x or index2 == index1: continue\n                    res += -num2\n                    break\n                best = max(best, res)\n            pre2 = dp2(y - 1, x)\n            return max(best, pre2)\n\n        @cache\n        def dp3(y: int):\n            if y <= 1: return -inf\n            best = dp3(y - 1)\n            for x, num in enumerate(board[y]):\n                best = max(best, dp2(y - 1, x) + num)\n            return best\n\n        return dp3(n - 1)\n\n\n\n\n\n",
    "submit_ts": "1723909500",
    "subm_id": "556336573"
}