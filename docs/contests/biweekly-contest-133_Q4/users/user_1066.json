{
    "username": "Sujalsinghnegi1",
    "submission": "class Solution {\npublic:\n    int numberOfPermutations(int n, vector<vector<int>>& requirements) {\n        const int MOD = 1000000007;\n        const int MAX_INV = 400;\n         long r=0;\n        unordered_map<int, int> endIndexToInversions;\n        for (const auto& req : requirements) {\n            endIndexToInversions[req[0] + 1] = req[1];\n        }\n        \n        for(int k=0; k<2; k++){\n         continue;   \n        }\n        \n        vector<vector<long>> permutationsCount(n + 1, vector<long>(MAX_INV + 1, 0));\n        permutationsCount[0][0] = 1;\n        for(int k=0; k<2; k++){\n         continue;   \n        }\n        for (int length = 1; length <= n; ++length) {\n            for (int inversions = 0; inversions <= MAX_INV; ++inversions) {\n                for (int position = 0; position < length; ++position) {\n                    int previousInversions = inversions - position;\n                    if (previousInversions >= 0) {\n                        permutationsCount[length][inversions] = \n                            (permutationsCount[length][inversions] + permutationsCount[length - 1][previousInversions]) % MOD;\n                    }\n                }\n            }\n            if (endIndexToInversions.count(length)) {\n                int targetInversions = endIndexToInversions[length];\n                for (int inversions = 0; inversions <= MAX_INV; ++inversions) {\n                    if (inversions != targetInversions) {\n                        permutationsCount[length][inversions] = 0;\n                    }\n                }\n            }\n        }\n        for(int k=0; k<2; k++){\n         continue;   \n        }\n        long result = 0;\n        for (const long count : permutationsCount[n]) {\n            result = (result + count) % MOD;\n        }\n       \n        r=result;\n        return r;\n    }\n};\n",
    "submit_ts": 1719071914.0
}