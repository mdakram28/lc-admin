{
    "username": "wp2858",
    "submission": "class SegmentTree:\n    def __init__(self, data):\n        self.n = len(data)\n        self.tree = [float('inf')] * (4 * self.n)\n        self.lazy = [0] * (4 * self.n)\n        self.build(data, 0, 0, self.n - 1)\n\n    def build(self, data, node, start, end):\n        if start == end:\n            self.tree[node] = data[start]\n        else:\n            mid = (start + end) // 2\n            left_child = 2 * node + 1\n            right_child = 2 * node + 2\n            self.build(data, left_child, start, mid)\n            self.build(data, right_child, mid + 1, end)\n            self.tree[node] = min(self.tree[left_child], self.tree[right_child])\n\n    def update_range(self, l, r, value):\n        self._update_range(0, 0, self.n - 1, l, r, value)\n\n    def _update_range(self, node, start, end, l, r, value):\n        if self.lazy[node] != 0:\n            self.tree[node] += self.lazy[node]\n            if start != end:\n                self.lazy[2 * node + 1] += self.lazy[node]\n                self.lazy[2 * node + 2] += self.lazy[node]\n            self.lazy[node] = 0\n\n        if start > end or start > r or end < l:\n            return\n\n        if start >= l and end <= r:\n            self.tree[node] += value\n            if start != end:\n                self.lazy[2 * node + 1] += value\n                self.lazy[2 * node + 2] += value\n            return\n\n        mid = (start + end) // 2\n        self._update_range(2 * node + 1, start, mid, l, r, value)\n        self._update_range(2 * node + 2, mid + 1, end, l, r, value)\n        self.tree[node] = min(self.tree[2 * node + 1], self.tree[2 * node + 2])\n\n    def query_range(self, l, r):\n        return self._query_range(0, 0, self.n - 1, l, r)\n\n    def _query_range(self, node, start, end, l, r):\n        if start > end or start > r or end < l:\n            return float('inf')\n\n        if self.lazy[node] != 0:\n            self.tree[node] += self.lazy[node]\n            if start != end:\n                self.lazy[2 * node + 1] += self.lazy[node]\n                self.lazy[2 * node + 2] += self.lazy[node]\n            self.lazy[node] = 0\n\n        if start >= l and end <= r:\n            return self.tree[node]\n\n        mid = (start + end) // 2\n        left_child = 2 * node + 1\n        right_child = 2 * node + 2\n        left_min = self._query_range(left_child, start, mid, l, r)\n        right_min = self._query_range(right_child, mid + 1, end, l, r)\n        return min(left_min, right_min)\n\n\n\n\nclass Solution:\n    def minChanges(self, nums: List[int], k: int) -> int:\n        \n        \n        data = [len(nums)] * (k+1)\n        seg = SegmentTree(data)\n        \n        #seg.update_range(1, 3, 10)\n        #print(seg.query_range(0,4))        \n        \n        \"\"\"\n        if k == 0: \n            res = 0 \n            for i in range(n // 2):\n                if abs(nums[i] - nums[n - i - 1]) != 0: \n                    res += 1\n            return res \n        \"\"\"\n        \n        n = len(nums)\n        for i in range(n // 2):\n            delta = abs(nums[i] - nums[n - i - 1])            \n            lo = min(nums[i], nums[n - i - 1])\n            hi = max(nums[i], nums[n - i - 1])\n            reachable_in_one = max(k-lo, hi)\n            \n            seg.update_range(0, reachable_in_one, -1)\n            if delta <= reachable_in_one:\n                seg.update_range(delta, delta, -1)\n            else: \n                seg.update_range(delta, delta, -2)\n                \n        \n        return seg.query_range(0, k)\n            \n        \n            \n                \n                \n                \n            \n            \n            \n            \n                \n                \n        \n                \n            \n            \n        \n        \n        ",
    "submit_ts": "1721489799",
    "subm_id": "1327464151"
}