{
    "username": "octaneal",
    "submission": "class Solution:\n    def countOfPeaks(self, nums: List[int], queries: List[List[int]]) -> List[int]:\n        peaks = []\n        \n        n = len(nums)\n        \n        for i in range(1, n - 1):\n            if nums[i-1] < nums[i] > nums[i+1]:\n                peaks.append(i)\n        \n        ans = []\n        # print('-----')\n        for q in queries:\n            # print('query', q)\n            # print('peaks', peaks)\n            # print('nums', nums)\n            # print()\n            if q[0] == 1:\n                l, r = q[1], q[2]\n                \n                if (r - l + 1) >= 3:\n                    ans.append(bisect_right(peaks, r - 1) - bisect_left(peaks, l + 1))\n                else:\n                    ans.append(0)\n            else:\n                ind, val = q[1], q[2]\n                \n                if (ind > 0) and (ind < (n - 1)):\n                    before = nums[ind - 1] < nums[ind] > nums[ind + 1]\n                    after = nums[ind - 1] < val > nums[ind + 1]\n                    \n                    if (not before) and after:\n                        insort(peaks, ind)\n                    elif before and (not after):\n                        x = bisect_left(peaks, ind)\n                        peaks.pop(x)\n                    \n                if (ind + 2) < n:\n                    before = nums[ind] < nums[ind + 1] > nums[ind + 2]\n                    after = val < nums[ind + 1] > nums[ind + 2]\n\n                    if (not before) and after:\n                        insort(peaks, ind+1)\n                    elif before and (not after):\n                        x = bisect_left(peaks, ind+1)\n                        peaks.pop(x)\n                if (ind - 2) >= 0:\n                    before = nums[ind-2] < nums[ind - 1] > nums[ind]\n                    after = nums[ind-2] < nums[ind - 1] > val\n\n                    if (not before) and after:\n                        insort(peaks, ind-1)\n                    elif before and (not after):\n                        x = bisect_left(peaks, ind-1)\n                        peaks.pop(x)\n                \n                nums[ind] = val\n        return ans\n                ",
    "submit_ts": 1718506999.0
}