{
    "username": "DC2415",
    "submission": "class Solution {\n    public int minimumCost(String target, String[] words, int[] costs) {\n        // int[] dp=new int[target.length()];\n        // Arrays.fill(dp,-1);\n        // int ans= check(target,words,costs,0,dp);\n        // if(ans==Integer.MAX_VALUE){\n        //     return -1;\n        // }\n        // return ans;\n      Helper help = new Helper();\n        for (int i = 0; i < words.length; ++i) {\n            help.insert(words[i], costs[i]);\n        }\n\n        int n = target.length();\n        int[] dp = new int[n + 1];\n        Arrays.fill(dp, Integer.MAX_VALUE);\n        dp[0] = 0;\n        for (int i = 0; i < n; ++i) {\n            if (dp[i] == Integer.MAX_VALUE) continue;\n            Tri node = help.root;\n            for (int j = i; j < n; ++j) {\n                char c = target.charAt(j);\n                if (!node.child.containsKey(c)) break;\n                node = node.child.get(c);\n                if (node.minC != Integer.MAX_VALUE) {\n                    dp[j + 1] = Math.min(dp[j + 1], dp[i] + node.minC);\n                }\n            }\n        }\n\n    if (dp[n] == Integer.MAX_VALUE) {\n        return -1;\n         }\n    return dp[n];\n    }\n    private int check(String target, String[] words, int[] costs, int ind,int[] dp) {\n        int n = target.length();\n        if (ind == n) return 0;  \n        if (dp[ind] != -1) return dp[ind];  \n        \n        int mc = Integer.MAX_VALUE;\n        for (int i = 0; i < words.length; i++) {\n            String word = words[i];\n            int cost = costs[i];\n            int l = word.length();\n            if (ind + l <= n && target.substring(ind, ind + l).equals(word)) {\n                int cc = check(target, words, costs, ind + l,dp);\n                if (cc != Integer.MAX_VALUE) {\n                    mc = Math.min(mc, cc + cost);\n                }\n            }\n        }\n        return dp[ind]=mc;\n    }\n }\nclass Tri {\n    Map<Character, Tri> child;\n    int minC;\n\n    Tri() {\n        child = new HashMap<>();\n        minC = Integer.MAX_VALUE;\n    }\n}\n\nclass Helper {\n    Tri root;\n\n    Helper() {\n        root = new Tri();\n    }\n\n    void insert(String word, int cost) {\n        Tri node = root;\n        for (char c : word.toCharArray()) {\n            node.child.putIfAbsent(c, new Tri());\n            node = node.child.get(c);\n        }\n        node.minC = Math.min(node.minC, cost);\n    }\n}\n",
    "submit_ts": "1720323764",
    "subm_id": "1312383504"
}