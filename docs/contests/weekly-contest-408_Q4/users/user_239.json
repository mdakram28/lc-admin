{
    "username": "Tourist_ka_chachera_bhai",
    "submission": "#include<bits/stdc++.h>\n#include <cassert>\n#include <cmath>\n#include <cstdint>\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <algorithm>\n#include <bitset>\n#include <complex>\n#include <deque>\n#include <functional>\n#include <iostream>\n#include <map>\n#include <numeric>\n#include <queue>\n#include <set>\n#include <sstream>\n#include <string>\n#include <stdlib.h>\n#include <unordered_map>\n#include <unordered_set>\n#include <utility>\n#include <vector>\n#include<ext/pb_ds/tree_policy.hpp>\n#include<ext/pb_ds/assoc_container.hpp>\nusing namespace  __gnu_pbds;\nusing namespace std;\n\n#define ll long long int  \n#define For(n) for(ll i=0;i<n;i++)\n#define all(x) x.begin(),x.end()\n#define allr(x) x.rbegin(),x.rend()\n\ntypedef vector<int> VI;  \ntypedef vector<ll> VL; \ntypedef long double lld;\ntypedef unsigned long long ull;\n\nconst int MOD = 1e9 + 7;\n\n \n//--------------------------------- Trace Functions --------------------------------------\n \nvoid _print(ll t) {cerr << t;}\nvoid _print(int t) {cerr << t;}\nvoid _print(string t) {cerr << t;}\nvoid _print(char t) {cerr << t;}\nvoid _print(lld t) {cerr << t;}\nvoid _print(double t) {cerr << t;}\nvoid _print(ull t) {cerr << t;}\nvoid DBG() {\n\tcerr << \"]\" << endl;\n}\n\ntemplate<typename T1,typename T2>istream& operator>>(istream& in,pair<T1,T2> &a){in>>a.x>>a.y;return in;}\ntemplate<typename T1,typename T2>ostream& operator<<(ostream& out,pair<T1,T2> a){out<<a.x<<\" \"<<a.y;return out;}\ntemplate<typename T,typename T1>T maxs(T &a,T1 b){if(b>a)a=b;return a;}\ntemplate<typename T,typename T1>T mins(T &a,T1 b){if(b<a)a=b;return a;}\ntemplate<class H, class... T> void DBG(H h, T... t) {\n\tcerr << to_string(h);\n\tif (sizeof...(t))\n\t\tcerr << \", \";\n\tDBG(t...);\n}\n\n#define DEBUG(x...) { cout << \"(\" << #x << \")\" << \" = ( \"; Print(x); }\ntemplate <typename T1> void Print(T1 t1) { cout << t1 << \" )\" << endl; }\ntemplate <typename T1, typename... T2>\nvoid Print(T1 t1, T2... t2) { cout << t1 << \" , \"; Print(t2...); }\n\n// ----------------------------- Debuging -----------------------------------------------\n\nvoid __print(int x) {cerr << x;}\nvoid __print(long x) {cerr << x;}\nvoid __print(long long x) {cerr << x;}\nvoid __print(unsigned x) {cerr << x;}\nvoid __print(unsigned long x) {cerr << x;}\nvoid __print(unsigned long long x) {cerr << x;}\nvoid __print(float x) {cerr << x;}\nvoid __print(double x) {cerr << x;}\nvoid __print(long double x) {cerr << x;}\nvoid __print(char x) {cerr << '\\'' << x << '\\'';}\nvoid __print(const char *x) {cerr << '\\\"' << x << '\\\"';}\nvoid __print(const string &x) {cerr << '\\\"' << x << '\\\"';}\nvoid __print(bool x) {cerr << (x ? \"true\" : \"false\");}\n\ntemplate <class T, class V> void _print(pair <T, V> p);\ntemplate <class T> void _print(vector <T> v);\ntemplate <class T> void _print(set <T> v);\ntemplate <class T, class V> void _print(map <T, V> v);\ntemplate <class T> void _print(multiset <T> v);\ntemplate <class T, class V> void _print(pair <T, V> p) {cerr << \"{\"; _print(p.ff); cerr << \",\"; _print(p.ss); cerr << \"}\";}\ntemplate <class T> void _print(vector <T> v) {cerr << \"[ \"; for (T i : v) {_print(i); cerr << \" \";} cerr << \"]\";}\ntemplate <class T> void _print(set <T> v) {cerr << \"[ \"; for (T i : v) {_print(i); cerr << \" \";} cerr << \"]\";}\ntemplate <class T> void _print(multiset <T> v) {cerr << \"[ \"; for (T i : v) {_print(i); cerr << \" \";} cerr << \"]\";}\ntemplate <class T, class V> void _print(map <T, V> v) {cerr << \"[ \"; for (auto i : v) {_print(i); cerr << \" \";} cerr << \"]\";}\n\ntemplate<typename T, typename V>\nvoid __print(const pair<T, V> &x) {cerr << '{'; __print(x.first); cerr << ','; __print(x.second); cerr << '}';}\ntemplate<typename T>\nvoid __print(const T &x) {int f = 0; cerr << '{'; for (auto &i: x) cerr << (f++ ? \",\" : \"\"), __print(i); cerr << \"}\";}\nvoid _print() {cerr << \"]\\n\";}\ntemplate <typename T, typename... V>\nvoid _print(T t, V... v) {__print(t); if (sizeof...(v)) cerr << \", \"; _print(v...);}\n#ifndef ONLINE_JUDGE\n#define debug(x...) cerr << \"[\" << #x << \"] = [\"; _print(x) cerr << endl;\n#else\n#define debug(x...)\n#endif\n\n\n\nclass DSU {\n    vector<int> parent, rank;\n        DSU(int n) {\n        parent.resize(n);\n        rank.resize(n, 0);\n        iota(parent.begin(), parent.end(), 0);\n    }\n\n    int find(int x) {\n        if (parent[x] != x)\n            parent[x] = find(parent[x]);\n        return parent[x];\n    }\n\n    void unite(int x, int y) {\n        int rootX = find(x);\n        int rootY = find(y);\n        if (rootX != rootY) {\n            if (rank[rootX] > rank[rootY])\n                parent[rootY] = rootX;\n            else if (rank[rootX] < rank[rootY])\n                parent[rootX] = rootY;\n            else {\n                parent[rootY] = rootX;\n                rank[rootX]++;\n            }\n        }\n    }\n};\nclass Solution {\npublic:\n        vector<int> parent, rank;\n        int find(int x) {\n        if (parent[x] != x)\n            parent[x] = find(parent[x]);\n        return parent[x];\n    }\n\n    void unite(int x, int y) {\n        int rootX = find(x);\n        int rootY = find(y);\n        if (rootX != rootY) {\n            if (rank[rootX] > rank[rootY])\n                parent[rootY] = rootX;\n            else if (rank[rootX] < rank[rootY])\n                parent[rootX] = rootY;\n            else {\n                parent[rootY] = rootX;\n                rank[rootX]++;\n            }\n        }\n    }\n    int bfs(vector<vector<int>> &graph, int start, int target1, int target2, int nodes) {\n    queue<int> q;\n    vector<int> visited(nodes + 4, 0);\n    q.push(start);\n    visited[start] = 1;\n    \n    while (!q.empty()) {\n        int u = q.front();\n        q.pop();\n        for (int v : graph[u]) {\n            if (!visited[v]) {\n                q.push(v);\n                visited[v] = 1;\n            }\n        }\n    }\n    return visited[target1] || visited[target2];\n}\n    \n    bool canReachCorner(int X, int Y, vector<vector<int>>& circles2) {\n         ios_base::sync_with_stdio(false);\n       cin.tie(NULL);\n       cout.tie(NULL);\n         vector<pair<pair<int, int>, int>> circles(circles2.size());\n         vector<vector<int>> graph(circles2.size() + 4);\n        int num_circles=circles2.size();\n        \n        for (int i = 0; i < num_circles; ++i) {\n            circles[i].first.first=circles2[i][0];\n            circles[i].first.second=circles2[i][1];\n            circles[i].second=circles2[i][2];\n        }\n                \n         for (int i = 0; i < num_circles; ++i) {\n             \n            if (circles[i].first.first <= circles[i].second) {\n                graph[num_circles].push_back(i);\n                graph[i].push_back(num_circles);\n            }\n            if (X - circles[i].first.first <= circles[i].second) {\n                graph[num_circles + 2].push_back(i);\n                graph[i].push_back(num_circles + 2);\n            }\n            if (circles[i].first.second <= circles[i].second) {\n                graph[num_circles + 1].push_back(i);\n                graph[i].push_back(num_circles + 1);\n            }\n            if (Y - circles[i].first.second <= circles[i].second) {\n                graph[num_circles + 3].push_back(i);\n                graph[i].push_back(num_circles + 3);\n            }\n            for (int j = i + 1; j < num_circles; ++j) {\n                double distance = sqrt(pow(circles[i].first.first - circles[j].first.first, 2) +\n                                       pow(circles[i].first.second - circles[j].first.second, 2));\n                int radius_sum = circles[i].second + circles[j].second;\n                if (radius_sum >= distance) {\n                    graph[i].push_back(j);\n                    graph[j].push_back(i);\n                }\n            }\n        }\n        \n        int is_blocked = 0;\n\nis_blocked = max(is_blocked, bfs(graph, num_circles, num_circles + 1, num_circles + 2, num_circles + 4)); \n    is_blocked = max(is_blocked, bfs(graph, num_circles + 3, num_circles + 2, num_circles + 1, num_circles + 4)); \n        if (is_blocked){return false;}\n        return true;\n       \n        \n    }\n};",
    "submit_ts": "1722136774",
    "subm_id": "1335744612"
}