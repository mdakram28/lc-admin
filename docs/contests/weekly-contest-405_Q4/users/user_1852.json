{
    "username": "chinmaygnsut",
    "submission": "class TrieNode {\npublic:\n    unordered_map<char, TrieNode*> children;\n    long long cost;\n    TrieNode() : cost(LLONG_MAX) {}\n};\n\nclass Trie {\npublic:\n    TrieNode* root;\n    Trie() { root = new TrieNode(); }\n    \n    void insert(const string& word, long long cost) {\n        TrieNode* node = root;\n        for (char ch : word) {\n            if (!node->children.count(ch)) {\n                node->children[ch] = new TrieNode();\n            }\n            node = node->children[ch];\n        }\n        node->cost = min(node->cost, cost);\n    }\n    \n    TrieNode* getRoot() {\n        return root;\n    }\n};\n\nclass Solution {\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& cost) {\n        int n = target.length();\n        vector<long long> dp(n + 1, LLONG_MAX);\n        dp[0] = 0;\n\n        Trie trie;\n        for (int i = 0; i < words.size(); ++i) {\n            trie.insert(words[i], cost[i]);\n        }\n\n        TrieNode* root = trie.getRoot();\n        \n        for (int i = 0; i < n; ++i) {\n            if (dp[i] == LLONG_MAX) continue;\n            \n            TrieNode* node = root;\n            for (int j = i; j < n; ++j) {\n                if (!node->children.count(target[j])) break;\n                node = node->children[target[j]];\n                if (node->cost != LLONG_MAX) {\n                    dp[j + 1] = min(dp[j + 1], dp[i] + node->cost);\n                }\n            }\n        }\n\n        return dp[n] == LLONG_MAX ? -1 : dp[n];\n    }\n};",
    "submit_ts": "1720324167",
    "subm_id": "1312393119"
}