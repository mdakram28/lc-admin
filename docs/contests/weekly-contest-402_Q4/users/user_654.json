{
    "username": "dganguli1997",
    "submission": "class Solution {\n    private int[] st;\n    \n    int getMid(int s, int e) {\n        return s + (e - s) / 2;\n    }\n    \n    int getSumUtil(int ss, int se, int qs, int qe, int si) {\n        if (qs <= ss && qe >= se)\n            return st[si];\n        \n        if (se < qs || ss > qe)\n            return 0;\n        \n        int mid = getMid(ss, se);\n        return getSumUtil(ss, mid, qs, qe, 2 * si + 1) +\n                getSumUtil(mid + 1, se, qs, qe, 2 * si + 2);\n    }\n    \n    void updateValueUtil(int ss, int se, int i, int diff, int si) {\n        if (i < ss || i > se)\n            return;\n        st[si] = st[si] + diff;\n        if (se != ss) {\n            int mid = getMid(ss, se);\n            updateValueUtil(ss, mid, i, diff, 2 * si + 1);\n            updateValueUtil(mid + 1, se, i, diff, 2 * si + 2);\n        }\n    }\n \n    void updateValue(int arr[], int n, int i, int new_val) {\n        if (i < 0 || i > n - 1) {\n            return;\n        }\n \n        int diff = new_val - arr[i];\n \n        arr[i] = new_val;\n \n        updateValueUtil(0, n - 1, i, diff, 0);\n    }\n \n    int getSum(int n, int qs, int qe) {\n        if (qs < 0 || qe > n - 1 || qs > qe) {\n            return 0;\n        }\n        return getSumUtil(0, n - 1, qs, qe, 0);\n    }\n \n    int constructSTUtil(int arr[], int ss, int se, int si) {\n        if (ss == se) {\n            st[si] = arr[ss];\n            return arr[ss];\n        }\n \n        int mid = getMid(ss, se);\n        st[si] = constructSTUtil(arr, ss, mid, si * 2 + 1) +\n                 constructSTUtil(arr, mid + 1, se, si * 2 + 2);\n        return st[si];\n    }\n    \n    public List<Integer> countOfPeaks(int[] nums, int[][] queries) {\n        int n = nums.length, i, j;\n        st = new int[4*n + 1];\n        int[] peaks = new int[n];\n        for(i = 1; i < n - 1; i += 1) {\n            if(nums[i] > nums[i - 1] && nums[i] > nums[i + 1])\n                peaks[i] = 1;\n        }\n        constructSTUtil(peaks, 0, n - 1, 0);\n        List<Integer> result = new ArrayList<>();\n        for(i = 0; i < queries.length; i += 1) {\n            if(queries[i][0] == 1) {\n                result.add(getSum(n, queries[i][1] + 1, queries[i][2] - 1));\n                continue;\n            }\n            int index = queries[i][1];\n            nums[index] = queries[i][2];\n            for(j = Math.max(1, index - 1); j <= Math.min(index + 1, n - 2); j += 1) {\n                int newValue = 0;\n                if(nums[j] > nums[j - 1] && nums[j] > nums[j + 1])\n                    newValue = 1;\n                if(newValue != peaks[j]) {\n                    updateValue(peaks, n, j, newValue);\n                }\n            }\n        }\n        return result;\n    }\n}",
    "submit_ts": "1718507845",
    "subm_id": "1289664205"
}