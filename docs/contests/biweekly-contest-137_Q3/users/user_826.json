{
    "username": "SHANKAR LAL YADAV",
    "submission": "class Solution {\npublic:\n    #define ll long long\n    ll dpTable[101][102][102];\n    \n    vector<vector<int>> topThreeIndices;\n    \n    ll calculateMax(int rowIdx, int firstIdx, int secondIdx, vector<vector<int>> &grid) {\n        int rows = grid.size(), cols = grid[0].size();\n        ll maxValue = LLONG_MIN;\n        \n        if(rowIdx == rows - 1) {\n            if(firstIdx == -1 || secondIdx == -1) return -1e14;\n            for(int i = 0; i < 3; i++) {\n                if(firstIdx != topThreeIndices[rowIdx][i] && secondIdx != topThreeIndices[rowIdx][i]) {\n                    return dpTable[rowIdx][firstIdx + 1][secondIdx + 1] = grid[rowIdx][topThreeIndices[rowIdx][i]];\n                }\n            }\n        }\n        \n        if(dpTable[rowIdx][firstIdx + 1][secondIdx + 1] != 1e14) \n            return dpTable[rowIdx][firstIdx + 1][secondIdx + 1];\n        \n        if(firstIdx != -1 && secondIdx != -1) {\n            for(int i = 0; i < 3; i++) {\n                if(firstIdx != topThreeIndices[rowIdx][i] && secondIdx != topThreeIndices[rowIdx][i]) {\n                    maxValue = max(maxValue, 1LL * grid[rowIdx][topThreeIndices[rowIdx][i]]);\n                    break;\n                }\n            }\n            return dpTable[rowIdx][firstIdx + 1][secondIdx + 1] = max(maxValue, calculateMax(rowIdx + 1, firstIdx, secondIdx, grid));\n        }\n        else if(firstIdx != -1) {\n            for(int i = 0; i < 3; i++) {\n                if(firstIdx != topThreeIndices[rowIdx][i]) {\n                    maxValue = max(maxValue, grid[rowIdx][topThreeIndices[rowIdx][i]] + calculateMax(rowIdx + 1, firstIdx, topThreeIndices[rowIdx][i], grid));\n                }\n            }\n            maxValue = max(maxValue, calculateMax(rowIdx + 1, firstIdx, secondIdx, grid));\n            return dpTable[rowIdx][firstIdx + 1][secondIdx + 1] = maxValue;\n        }\n        \n        for(int i = 0; i < 3; i++) {\n            if(firstIdx != topThreeIndices[rowIdx][i]) {\n                maxValue = max(maxValue, grid[rowIdx][topThreeIndices[rowIdx][i]] + calculateMax(rowIdx + 1, topThreeIndices[rowIdx][i], secondIdx, grid));\n            }\n        }\n        maxValue = max(maxValue, calculateMax(rowIdx + 1, firstIdx, secondIdx, grid));\n        return dpTable[rowIdx][firstIdx + 1][secondIdx + 1] = maxValue;\n    }\n    \n    long long maximumValueSum(vector<vector<int>>& grid) {\n        int rows = grid.size(), cols = grid[0].size();\n        topThreeIndices.resize(rows, vector<int>(3));\n        \n        for(int i = 0; i < rows; i++) {\n            vector<pair<int, int>> sortedRow;\n            for(int j = 0; j < cols; j++) {\n                sortedRow.push_back({grid[i][j], j});\n            }\n            sort(sortedRow.rbegin(), sortedRow.rend());\n            topThreeIndices[i][0] = sortedRow[0].second;\n            topThreeIndices[i][1] = sortedRow[1].second;\n            topThreeIndices[i][2] = sortedRow[2].second;\n        }\n        \n        for(int i = 0; i < 101; i++) {\n            for(int j = 0; j < 102; j++) {\n                for(int k = 0; k < 102; k++) {\n                    dpTable[i][j][k] = 1e14;\n                }\n            }\n        }\n        \n        return calculateMax(0, -1, -1, grid);\n    }\n};",
    "submit_ts": "1723910087",
    "subm_id": "1359216887"
}