{
    "username": "snavneet561",
    "submission": "    typedef long long ll;\n\nvoid print(vector<int> &v){\n    for(int x: v){\n        cout << x << \" \";\n    }\n    cout << endl;\n}\n\nbool intersect(vector<int> &v1, vector<int> &v2){\n    ll x=(v1[0]-v2[0])*1LL*(v1[0]-v2[0])*1LL;\n    ll y=(v1[1]-v2[1])*1LL*(v1[1]-v2[1])*1LL;\n    long double d= sqrtl(x + y);\n    // print(v1);\n    // print(v2);\n    // cout << (v1[0]-v2[0])*(v1[0]-v2[0]) << endl;\n    // cout << d << endl;\n    return d<=(v1[2] + v2[2]);\n}\n\nbool dfs(ll node, vector<int> &vis, vector<set<ll>> &v, vector<ll> edges[]){\n    vis[node]=1;\n    if(v[node].find(2)!=v[node].end() || v[node].find(3)!=v[node].end())return true;\n    for(int adj: edges[node]){\n        if(!vis[adj]){\n            if(dfs(adj, vis, v, edges))return true;\n        }\n    }\n    return false;\n}\n\nclass Solution {\npublic:\n    bool canReachCorner(int X, int Y, vector<vector<int>>& c) {\n        int n=c.size();\n        vector<set<ll>> v(n);\n        for(int i=0; i<n; i++){\n            ll x=c[i][0], y=c[i][1], r=c[i][2];\n            if(y-r<=0)v[i].insert(0);\n            if(x+r>=X)v[i].insert(1);\n            if(y+r>=Y)v[i].insert(2);\n            if(x-r<=0)v[i].insert(3);\n        }\n        vector<ll> edges[n];\n        for(int i=0; i<n; i++){\n            for(int j=i+1; j<n; j++){\n                if(intersect(c[i], c[j])){\n                    edges[i].push_back(j);\n                    edges[j].push_back(i);\n                }\n            }\n        }\n        // cout << \"YYY\" << endl;\n        // for(int i=0; i<n; i++){\n        //     cout << i << \" : \";\n        //     for(int x: edges[i]){\n        //         cout << x << \" \";\n        //     }\n        //     cout << endl;\n        // }\n        // for(int i=0; i<n; i++){\n        //     cout << i << \" - \";\n        //     for(int x: v[i]){\n        //         cout << x << \" \";\n        //     }\n        //     cout << endl;\n        // }\n        vector<int> vis(n);\n        for(int i=0; i<n; i++){\n            if(!vis[i] && (v[i].find(0)!=v[i].end() || v[i].find(1)!=v[i].end())){\n                if(dfs(i, vis, v, edges))return false;\n            }\n        }\n        return true;\n    }\n};",
    "submit_ts": "1722136614",
    "subm_id": "1335739916"
}