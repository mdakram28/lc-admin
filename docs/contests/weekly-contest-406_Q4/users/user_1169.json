{
    "username": "currysung",
    "submission": "class Solution {\npublic:\n    long long minimumCost(int m, int n, vector<int>& horizontalCut, vector<int>& verticalCut) {\n        priority_queue<int> h(horizontalCut.begin(), horizontalCut.end());\n        priority_queue<int> v(verticalCut.begin(), verticalCut.end());\n        long long res = 0;\n        int h_cut = 1;\n        int v_cut = 1;\n        int ope = horizontalCut.size() + verticalCut.size();\n\n        while (ope > 0)\n        {\n            if (v.empty() || !h.empty() && h.top() >= v.top())\n            {\n                res += h.top() * v_cut; \n                h_cut++;\n                h.pop();\n            }\n            else\n            {\n                res += v.top() * h_cut; \n                v_cut++;\n                v.pop();\n            }\n\n            ope--;\n        }\n\n        return res;        \n    }\n};",
    "submit_ts": "1720926100",
    "subm_id": "1320275995"
}