{
    "username": "jacky3627",
    "submission": "class Solution {\npublic:\n    int minimumSum(vector<vector<int>>& grid) {\n        // use three split methods to obtain max result\n        // ||, --, |-\n        // remember to remove the invalid (0 area) result\n\n        int m = grid.size();\n        int n = grid.front().size();\n\n        int result = m * n;\n\n        // --\n        for (int i = 1; i < m; i++) {\n            for (int j = i+1; j < m; j++) {\n                int a1 = minArea(grid, 0, i, 0, n);\n                int a2 = minArea(grid, i, j, 0, n);\n                int a3 = minArea(grid, j, m, 0, n);\n                if (a1 == 0 || a2 == 0 || a3 == 0) continue;\n                result = min(result, a1 + a2 + a3);\n            }\n        }\n\n        // ||\n        for (int i = 1; i < n; i++) {\n            for (int j = i+1; j < n; j++) {\n                int a1 = minArea(grid, 0, m, 0, i);\n                int a2 = minArea(grid, 0, m, i, j);\n                int a3 = minArea(grid, 0, m, j, n);\n                if (a1 == 0 || a2 == 0 || a3 == 0) continue;\n                result = min(result, a1 + a2 + a3);\n            }\n        }\n\n        // |-, left whole column\n        for (int i = 1; i < m; i++) {\n            for (int j = 1; j < n; j++) {\n                int a1 = minArea(grid, 0, i, 0, j);\n                int a2 = minArea(grid, 0, i, j, n);\n                int a3 = minArea(grid, i, m, 0, j);\n                int a4 = minArea(grid, i, m, j, n);\n\n                if (countZero({a1, a2, a3, a4}) == 1) {\n                    result = min(result, a1 + a2 + a3 + a4);\n                }\n\n                int a5 = minArea(grid, 0, m, 0, j);\n                int a6 = minArea(grid, 0, m, j, n);\n                int a7 = minArea(grid, 0, i, 0, n);\n                int a8 = minArea(grid, i, m, 0, n);\n\n                if (countZero({a2, a4, a5}) == 0) {\n                    result = min(result, a2 + a4 + a5);\n                }\n\n                if (countZero({a1, a3, a6}) == 0) {\n                    result = min(result, a1 + a3 + a6);\n                }\n\n                if (countZero({a3, a4, a7}) == 0) {\n                    result = min(result, a3 + a4 + a7);\n                } \n\n                if (countZero({a1, a2, a8}) == 0) {\n                    result = min(result, a1 + a2 + a8);\n                }\n            }\n        }\n\n        return result;\n    }\n\nprivate:\n    int countZero(vector<int>&& arr) {\n        int result = 0;\n        for (int n : arr) {\n            if (n == 0) result++;\n        }\n        return result;\n    }\n    // search for [minC, maxC), [minR, maxC]\n    int minArea(vector<vector<int>>& grid, int minR, int maxR, int minC, int maxC) {\n        int left = minC;\n        int right = maxC-1;\n\n        int top = minR;\n        int down = maxR-1;\n\n        int found = false;\n        for (int r = minR; r < maxR; r++) {\n            for (int c = minC; c < maxC; c++) {\n                if (found) break;\n                if (grid[r][c] == 1) {\n                    found = true;\n                    top = r;\n                }\n            }\n        }\n        \n        found = false;\n        for (int r = maxR-1; r >= minR; r--) {\n            for (int c = minC; c < maxC; c++) {\n                if (found) break;\n                if (grid[r][c] == 1) {\n                    found = true;\n                    down = r;\n                }\n            }\n        }\n\n        found = false;\n        for (int c = minC; c < maxC; c++) {\n            for (int r = minR; r < maxR; r++) {\n                if (found) break;\n                if (grid[r][c] == 1) {\n                    found = true;\n                    left = c;\n                }\n            }\n        }\n        \n        found = false;\n        for (int c = maxC-1; c >= minC; c--) {\n            for (int r = minR; r < maxR; r++) {\n                if (found) break;\n                if (grid[r][c] == 1) {\n                    found = true;\n                    right = c;\n                }\n            }\n        }\n        if (!found) return 0;\n        return (right-left+1) * (down-top+1);\n    }\n};",
    "submit_ts": "1719114417",
    "subm_id": "1297346375"
}