{
    "username": "logic_creator03",
    "submission": "class Solution {\npublic:\n   struct TrieNode {\n    unordered_map<char, TrieNode*> children;\n    vector<int> costs;\n\n    TrieNode() {}\n};\n\nvoid insertTrie(TrieNode* root, const string& word, int cost) {\n    TrieNode* node = root;\n    for (char c : word) {\n        if (!node->children[c]) {\n            node->children[c] = new TrieNode();\n        }\n        node = node->children[c];\n    }\n    node->costs.push_back(cost);\n}\n\nint minimumCost(string target, vector<string>& words, vector<int>& costs) {\n    int n = target.size();\n    TrieNode* root = new TrieNode();\n\n    for (int i = 0; i < words.size(); ++i) {\n        insertTrie(root, words[i], costs[i]);\n    }\n\n    vector<long long> dp(n + 1, LLONG_MAX);\n    dp[0] = 0;\n\n    for (int i = 0; i < n; ++i) {\n        TrieNode* node = root;\n        for (int j = i; j < n; ++j) {\n            char c = target[j];\n            if (!node->children[c]) {\n                break;\n            }\n            node = node->children[c];\n            for (int cost : node->costs) {\n                if (i + 1 <= n && dp[i] != LLONG_MAX && dp[i] + cost <= LLONG_MAX) {\n                    dp[j + 1] = min(dp[j + 1], dp[i] + cost);\n                }\n            }\n        }\n    }\n\n    return dp[n] == LLONG_MAX ? -1 : dp[n];\n}\n};",
    "submit_ts": "1720324219",
    "subm_id": "1312394350"
}