{
    "username": "mikeac",
    "submission": "class Solution:\n    def timeTaken(self, edges: List[List[int]]) -> List[int]:\n        n = len(edges) + 1\n        g = [[] for _ in range(n)]\n        for u, v in edges:\n            g[u].append(v)\n            g[v].append(u)\n        \n        parent = [-1] * n\n        q = [0]\n        order = []\n        while q:\n            u = q.pop()\n            order.append(u)\n            for v in g[u]:\n                if v == parent[u]:\n                    continue\n                parent[v] = u\n                q.append(v)\n\n        fst = [0] * n\n        sec = [0] * n\n        for u in order[::-1]:\n            if (p := parent[u]) != -1:\n                cur = fst[u] + (1 if u & 1 else 2)\n                if cur >= fst[p]:\n                    fst[p], sec[p] = cur, fst[p]\n                elif cur > sec[p]:\n                    sec[p] = cur\n        \n        ans = [0] * n\n        q = [(0, 0)]\n        while q:\n            u, pt = q.pop()\n            ans[u] = max(pt, fst[u])\n            pt += 1 if u & 1 else 2\n            for v in g[u]:\n                if v == parent[u]:\n                    continue\n                vt = fst[v] + (1 if v & 1 else 2)\n                if vt == fst[u]:\n                    nt = sec[u] + (1 if u & 1 else 2)\n                else:\n                    nt = fst[u] + (1 if u & 1 else 2)\n                q.append((v, max(nt, pt)))\n        return ans",
    "submit_ts": "1722697664",
    "subm_id": "552267228"
}