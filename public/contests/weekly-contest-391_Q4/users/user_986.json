{
    "username": "shark_in_leetcode",
    "submission": "INF = float(\"inf\")\n\nclass Solution:\n    def minimumDistance(self, points) -> int:\n        n = len(points)\n        # cummulateive maximum of x + y for x, y in points\n        # i.e. cummax[i] = max(x + y for x, y in points[:i]) where 0 <= i <= len(points)\n        cummax = [-INF]\n        cummin = [INF]\n        for x, y in points:\n            cummax.append(max(cummax[-1], x + y))\n            cummin.append(min(cummin[-1], x + y))\n        # inverse cummulative maximum of x + y for x, y in points\n        # i.e. invcummax[i] = max(x + y for x, y in points[i:]) where 0 <= i <= len(points)\n        invcummax = [-INF]\n        invcummin = [INF]\n        for x, y in points[::-1]:\n            invcummax.append(max(invcummax[-1], x + y))\n            invcummin.append(min(invcummin[-1], x + y))\n        invcummax = invcummax[::-1]\n        invcummin = invcummin[::-1]\n\n        removed_maxs_plus = [max(cummax[i], invcummax[i + 1]) for i in range(n)]\n        removed_mins_plus = [min(cummin[i], invcummin[i + 1]) for i in range(n)]\n\n        removed_max_distance_plus = [\n            removed_maxs_plus[i] - removed_mins_plus[i] for i in range(n)\n        ]\n\n        # cummulateive maximum of x - y for x, y in points\n        # i.e. cummax[i] = max(x - y for x, y in points[:i]) where 0 <= i <= len(points)\n        cummax = [-INF]\n        cummin = [INF]\n        for x, y in points:\n            cummax.append(max(cummax[-1], x - y))\n            cummin.append(min(cummin[-1], x - y))\n        # inverse cummulative maximum of x - y for x, y in points\n        # i.e. invcummax[i] = max(x - y for x, y in points[i:]) where 0 <= i <= len(points)\n        invcummax = [-INF]\n        invcummin = [INF]\n        for x, y in points[::-1]:\n            invcummax.append(max(invcummax[-1], x - y))\n            invcummin.append(min(invcummin[-1], x - y))\n        invcummax = invcummax[::-1]\n        invcummin = invcummin[::-1]\n\n        removed_maxs_minus = [max(cummax[i], invcummax[i + 1]) for i in range(n)]\n        removed_mins_minus = [min(cummin[i], invcummin[i + 1]) for i in range(n)]\n\n        removed_max_distance_minus = [\n            removed_maxs_minus[i] - removed_mins_minus[i] for i in range(n)\n        ]\n\n        removed_max_distance = [\n            max(x, y)\n            for x, y in zip(removed_max_distance_plus, removed_max_distance_minus)\n        ]\n        return min(removed_max_distance)"
}