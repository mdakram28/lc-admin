{
    "username": "shivam_30",
    "submission": "class Solution {\npublic:\n    bool bfs(vector<vector<int>> &graph, int start, int target1, int target2, int n) {\n        queue<int> q;\n        vector<bool> vis(n + 4, false);\n        q.push(start);\n        vis[start] = 1;\n        \n        while (!q.empty()) {\n            int u = q.front();\n            q.pop();\n            for (int child : graph[u]) {\n                if (!vis[child]) {\n                    q.push(child);\n                    vis[child] = true;\n                }\n            }\n        }\n        return (vis[target1] || vis[target2]);\n    }\n    \n    bool canReachCorner(int X, int Y, vector<vector<int>>& circles) {\n        int totCir = circles.size();\n        vector<vector<int>> graph(totCir + 4);\n        \n        for (int i = 0; i < totCir; ++i) {\n            int x = circles[i][0];\n            int y = circles[i][1];\n            int r = circles[i][2];\n\n            if (x <= r) {\n                graph[totCir].push_back(i);\n                graph[i].push_back(totCir);\n            }\n            if (X - x <= r) {\n                graph[totCir + 2].push_back(i);\n                graph[i].push_back(totCir + 2);\n            }\n            if (y <= r) {\n                graph[totCir + 1].push_back(i); \n                graph[i].push_back(totCir + 1);\n            }\n            if (Y - y <= r) {\n                graph[totCir + 3].push_back(i); \n                graph[i].push_back(totCir + 3);\n            }\n            for (int j = i + 1; j < totCir; ++j) {\n                int x2 = circles[j][0];\n                int y2 = circles[j][1];\n                int r2 = circles[j][2];\n                double distance = sqrt(pow(x - x2, 2) + pow(y - y2, 2));\n                double radius_sum = r + r2;\n                if (radius_sum >= distance) {\n                    graph[i].push_back(j);\n                    graph[j].push_back(i);\n                }\n            }\n        }\n        \n        bool isBlock = false;\n        isBlock |= bfs(graph, totCir, totCir + 1, totCir + 2, totCir + 4);\n        isBlock |= bfs(graph, totCir + 3, totCir + 2, totCir + 1, totCir + 4);\n        \n        return !isBlock;\n    }\n};",
    "submit_ts": "1722137707",
    "subm_id": "1335771413"
}