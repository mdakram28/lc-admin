{
    "username": "Devanshi_Lawania_123",
    "submission": "class Solution {\n    public boolean canReachCorner(int X, int Y, int[][] circles) {\n        int nc = circles.length;\n        List<int[]> c = new ArrayList<>();\n        List<List<Integer>> g = new ArrayList<>(Collections.nCopies(nc + 4, null));\n        for (int i = 0; i < nc + 4; i++) {\n            g.set(i, new ArrayList<>());\n        }\n\n        for (int i = 0; i < nc; i++) {\n            c.add(new int[]{circles[i][0], circles[i][1], circles[i][2]});\n        }\n\n        for (int i = 0; i < nc; i++) {\n            if (c.get(i)[0] <= c.get(i)[2]) {\n                g.get(nc).add(i);\n                g.get(i).add(nc);\n            }\n            if (X - c.get(i)[0] <= c.get(i)[2]) {\n                g.get(i).add(nc + 2);\n                g.get(nc + 2).add(i);\n            }\n            if (c.get(i)[1] <= c.get(i)[2]) {\n                g.get(nc + 1).add(i);\n                g.get(i).add(nc + 1);\n            }\n            if (Y - c.get(i)[1] <= c.get(i)[2]) {\n                g.get(i).add(nc + 3);\n                g.get(nc + 3).add(i);\n            }\n            for (int j = i + 1; j < nc; j++) {\n                double d = Math.sqrt(Math.pow(c.get(i)[0] - c.get(j)[0], 2) + Math.pow(c.get(i)[1] - c.get(j)[1], 2));\n                if (c.get(i)[2] + c.get(j)[2] >= d) {\n                    g.get(i).add(j);\n                    g.get(j).add(i);\n                }\n            }\n        }\n\n        return !(bfs(g, nc, nc + 1, nc + 2, nc + 3) || bfs(g, nc + 3, nc + 2, nc + 1, nc + 3));\n\n        \n\n    }\n    private boolean bfs(List<List<Integer>> g, int s, int t1, int t2, int n) {\n        Queue<Integer> q = new LinkedList<>();\n        boolean[] vis = new boolean[n + 4];\n        q.add(s);\n        vis[s] = true;\n\n        while (!q.isEmpty()) {\n            int u = q.poll();\n            for (int v : g.get(u)) {\n                if (!vis[v]) {\n                    q.add(v);\n                    vis[v] = true;\n                }\n            }\n        }\n\n        return vis[t1] || vis[t2];\n    }\n\n}",
    "submit_ts": "1722138731",
    "subm_id": "1335798220"
}