{
    "username": "Kunalsinghrajpurohit",
    "submission": "class Solution {\n\npublic:\n    int bfs11(vector<vector<int>> &graph11, int start11, int target1, int target2, int nodes11) {\n    queue<int> q;\n    vector<int> visit(nodes11 + 4, 0);\n    q.push(start11);\n    visit[start11] = 1;\n    \n    while (!q.empty()) {\n        int u = q.front();\n        q.pop();\n        for (int v : graph11[u]) {\n            if (!visit[v]) {\n                q.push(v);\n                visit[v] = 1;\n            }\n        }\n    }\n    return visit[target1] || visit[target2];\n}\n    \n    bool canReachCorner(int X, int Y, vector<vector<int>>& circles22) {\n         vector<pair<pair<int, int>, int>> circles(circles22.size());\n         vector<vector<int>> graph11(circles22.size() + 4);\n        int num_circles=circles22.size();\n        \n        for (int i = 0; i < num_circles; ++i) {\n            circles[i].first.first=circles22[i][0];\n            circles[i].first.second=circles22[i][1];\n            circles[i].second=circles22[i][2];\n        }\n        \n        \n        \n         for (int i = 0; i < num_circles; ++i) {\n             \n            if (circles[i].first.first <= circles[i].second) {\n                graph11[num_circles].push_back(i);\n                graph11[i].push_back(num_circles);\n            }\n            if (X - circles[i].first.first <= circles[i].second) {\n                graph11[num_circles + 2].push_back(i);\n                graph11[i].push_back(num_circles + 2);\n            }\n            if (circles[i].first.second <= circles[i].second) {\n                graph11[num_circles + 1].push_back(i);\n                graph11[i].push_back(num_circles + 1);\n            }\n            if (Y - circles[i].first.second <= circles[i].second) {\n                graph11[num_circles + 3].push_back(i);\n                graph11[i].push_back(num_circles + 3);\n            }\n            for (int j = i + 1; j < num_circles; ++j) {\n                double distance11 = sqrt(pow(circles[i].first.first - circles[j].first.first, 2) +\n                                       pow(circles[i].first.second - circles[j].first.second, 2));\n                int radius_sum11 = circles[i].second + circles[j].second;\n                if (radius_sum11 >= distance11) {\n                    graph11[i].push_back(j);\n                    graph11[j].push_back(i);\n                }\n            }\n        }\n        \n        int is_blocked_11 = 0;\nis_blocked_11 = max(is_blocked_11, bfs11(graph11, num_circles, num_circles + 1, num_circles + 2, num_circles + 4)); // Check for bottom-left corner\n    is_blocked_11 = max(is_blocked_11, bfs11(graph11, num_circles + 3, num_circles + 2, num_circles + 1, num_circles + 4)); // Check for top-right corner\n        if (is_blocked_11){return false;}\n        return true;\n       \n        \n       \n    }\n};",
    "submit_ts": "1722137399",
    "subm_id": "1335762656"
}