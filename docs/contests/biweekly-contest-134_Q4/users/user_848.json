{
    "username": "chaitanyaarora30",
    "submission": "class Solution {\nprivate:\n    long long process(vector<int>& nums, int start, int end, int k) {\n        long long result = 0;\n        int andres = nums[start];\n        for (int i = start + 1; i <= end; ++i) {\n            andres &= nums[i];\n        }\n        if (andres == k) {\n            return 1;\n        }\n        return 0;\n    }\n\npublic:\n    long long countSubarrays(vector<int>& nums, int k) {\n        int n = nums.size();\n        long long ret = 0;\n        \n        vector<pair<int, long long>> prevResults;\n        for (int i = 0; i < n; ++i) {\n            vector<pair<int, long long>> curr_res;\n            ret += process(nums, i, i, k);  \n            long long num = 0;\n            curr_res.push_back({nums[i], 1}); \n            for (auto& p : prevResults) {\n                int andResult = p.first & nums[i];\n                long long count = p.second;\n                if (andResult == k) {\n                    ret += count;\n                }\n                num += process(nums, i, i, k); \n                auto it = find_if(curr_res.begin(), curr_res.end(), \n                                  [&](const pair<int, long long>& el) { return el.first == andResult; });\n                if (it != curr_res.end()) {\n                    it->second += count;\n                } else {\n                    curr_res.push_back({andResult, count});\n                }\n            }\n            prevResults = move(curr_res);\n        }\n        return ret;\n    }\n};\n",
    "submit_ts": "1720280671",
    "subm_id": "1311797917"
}