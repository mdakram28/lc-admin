{
    "username": "gauravchaurasia1704",
    "submission": "from collections import defaultdict\nclass SegmentTree:\n    def __init__(self, n):\n        self.n = n\n        self.tree = [0] * (4 * n)\n\n    def build(self, start, end, node, peaks):\n        if start == end:\n            self.tree[node] = peaks[start]\n        else:\n            mid = (start + end) // 2\n            self.build(start, mid, 2 * node + 1, peaks)\n            self.build(mid + 1, end, 2 * node + 2, peaks)\n            self.tree[node] = self.tree[2 * node + 1] + self.tree[2 * node + 2]\n\n    def update(self, start, end, idx, val, node):\n        if start == end:\n            self.tree[node] = val\n        else:\n            mid = (start + end) // 2\n            if start <= idx <= mid:\n                self.update(start, mid, idx, val, 2 * node + 1)\n            else:\n                self.update(mid + 1, end, idx, val, 2 * node + 2)\n            self.tree[node] = self.tree[2 * node + 1] + self.tree[2 * node + 2]\n\n    def query(self, start, end, l, r, node):\n        if r < start or end < l:\n            return 0\n        if l <= start and end <= r:\n            return self.tree[node]\n        mid = (start + end) // 2\n        left = self.query(start, mid, l, r, 2 * node + 1)\n        right = self.query(mid + 1, end, l, r, 2 * node + 2)\n        return left + right\nclass Solution:\n    def countOfPeaks(self, nums: List[int], queries: List[List[int]]) -> List[int]:\n        def is_peak(i):\n            if i <= 0 or i >= len(nums) - 1:\n                return False\n            return nums[i] > nums[i - 1] and nums[i] > nums[i + 1]\n\n        n = len(nums)\n        peaks = [0] * n\n        for i in range(1, n - 1):\n            if is_peak(i):\n                peaks[i] = 1\n\n        seg_tree = SegmentTree(n)\n        seg_tree.build(0, n - 1, 0, peaks)\n\n        results = []\n\n        for query in queries:\n            if query[0] == 1:\n                li, ri = query[1], query[2]\n                count = seg_tree.query(0, n - 1, li + 1, ri - 1, 0)\n                results.append(count)\n            elif query[0] == 2:\n                indexi, vali = query[1], query[2]\n                nums[indexi] = vali\n                for i in [indexi - 1, indexi, indexi + 1]:\n                    if 1 <= i < n - 1:\n                        if is_peak(i):\n                            seg_tree.update(0, n - 1, i, 1, 0)\n                        else:\n                            seg_tree.update(0, n - 1, i, 0, 0)\n\n        return results",
    "submit_ts": "1718508508",
    "subm_id": "1289683288"
}