{
    "username": "Utkarsh Singh",
    "submission": "class Solution {\npublic:\n    long long maximumValueSum(vector<vector<int>>& board) {\n        int rows = board.size();\n        int cols = board[0].size();\n        long long maxSum = LLONG_MIN;\n\n        // Create a vector to store the top 3 values and their columns for each row\n        vector<array<long long, 3>> topValues(rows);\n        vector<array<int, 3>> topCols(rows);\n\n        // Find top 3 values and their respective columns for each row\n        for (int i = 0; i < rows; ++i) {\n            vector<pair<int, int>> values;\n            for (int j = 0; j < cols; ++j) {\n                values.emplace_back(board[i][j], j);\n            }\n            sort(values.rbegin(), values.rend());\n\n            for (int k = 0; k < 3 && k < cols; ++k) {\n                topValues[i][k] = values[k].first;\n                topCols[i][k] = values[k].second;\n            }\n        }\n\n        // Iterate over all combinations of three distinct rows\n        for (int r1 = 0; r1 < rows; ++r1) {\n            for (int r2 = r1 + 1; r2 < rows; ++r2) {\n                for (int r3 = r2 + 1; r3 < rows; ++r3) {\n                    // Compare all combinations of columns for the selected rows\n                    for (int i = 0; i < 3; ++i) {\n                        for (int j = 0; j < 3; ++j) {\n                            if (topCols[r1][i] == topCols[r2][j]) continue;\n                            for (int k = 0; k < 3; ++k) {\n                                if (topCols[r1][i] == topCols[r3][k] || topCols[r2][j] == topCols[r3][k]) continue;\n\n                                long long currentSum = topValues[r1][i] + topValues[r2][j] + topValues[r3][k];\n                                maxSum = max(maxSum, currentSum);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return maxSum;\n    }\n};\n",
    "submit_ts": "1723910319",
    "subm_id": "1359225719"
}