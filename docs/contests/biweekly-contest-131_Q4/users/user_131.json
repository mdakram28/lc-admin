{
    "username": "yatin_kwatra",
    "submission": "#include <bits/stdc++.h>\n#include <ext/pb_ds/assoc_container.hpp>\n#include <ext/pb_ds/tree_policy.hpp>\n#pragma GCC optimize (\"Ofast\")\n//#pragma GCC optimize \"trapv\" // to detect overflow\n\n#define ll                      long long\n#define ar                      array\n// #define int                     ll\n#define sz(v)                   (int)(v.size())\n#define FIO                     ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);\n#define ld                      long double\n#define ull                     unsigned long long\n#define endl                    \"\\n\"\n#define fo(i,a,b)               for(int i = a; i<=b ; i++)\n#define rfo(i,a,b)              for(int i = a; i>=b ; i--)\n#define vii                     vector<int>\n#define pq                      priority_queue\n#define uomii                   unordered_map<int,int,best_hash>\n#define all(v)                  v.begin(),v.end()\n#define mp                      make_pair\n#define pb                      push_back\n#define pob                     pop_back\n#define ff                      first\n#define ss                      second\n#define pii                     pair<int,int>\n#define mii                     map<int,int>\n#define vvii                    vector<vii>\n#define mod                     1000000007\n#define inf                     5e18\n#define pi                      3.1415926535897932384626433832795\n#define cz(x)                   63 - __builtin_clzll(x)\n\n\n\nusing namespace std;\nusing namespace __gnu_pbds;\ntemplate<class T> using oset =  tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;\n\n\n// https://codeforces.com/blog/entry/68809\n\nvoid __print(int x) {cout << x;}\nvoid __print(long x) {cout << x;}\nvoid __print(unsigned x) {cout << x;}\nvoid __print(unsigned long x) {cout << x;}\nvoid __print(unsigned long long x) {cout << x;}\nvoid __print(float x) {cout << x;}\nvoid __print(double x) {cout << x;}\nvoid __print(long double x) {cout << x;}\nvoid __print(char x) {cout << '\\'' << x << '\\'';}\nvoid __print(const char *x) {cout << '\\\"' << x << '\\\"';}\nvoid __print(const string &x) {cout << '\\\"' << x << '\\\"';}\nvoid __print(bool x) {cout << (x ? \"true\" : \"false\");}\n\ntemplate<typename T, typename V>\nvoid __print(const pair<T, V> &x) {cout << '{'; __print(x.first); cout << ','; __print(x.second); cout << '}';}\ntemplate<typename T>\nvoid __print(const T &x) {int f = 0; cout << '{'; for (auto &i : x) cout << (f++ ? \",\" : \"\"), __print(i); cout << \"}\";}\nvoid _print() {cout << \"]\\n\";}\ntemplate <typename T, typename... V>\nvoid _print(T t, V... v) {__print(t); if (sizeof...(v)) cout << \", \"; _print(v...);}\n#ifndef ONLINE_JUDGE\n#define pr(x...) cout << \"[\" << #x << \"] = [\"; _print(x)\n#else\n#define pr(x...)\n#endif\n\n// https://codeforces.com/blog/entry/62393\n\nstruct best_hash {\n\tstatic uint64_t splitmix64(uint64_t x) {\n\n\t\tx += 0x9e3779b97f4a7c15;\n\t\tx = (x ^ (x >> 30)) * 0xbf58476d1ce4e5b9;\n\t\tx = (x ^ (x >> 27)) * 0x94d049bb133111eb;\n\t\treturn x ^ (x >> 31);\n\t}\n\n\tsize_t operator()(uint64_t x) const {\n\t\tstatic const uint64_t FIXED_RANDOM = chrono::steady_clock::now().time_since_epoch().count();\n\t\treturn splitmix64(x + FIXED_RANDOM);\n\t}\n};\n\n/* ------------------------------ Let The Game Begin ---------------------------- */\n\nconst int N = 50000 + 5;\nconst int MX = 50000;\nint v[4 * N];\nint x, y, z;\n\nvoid upd(int id, int cx, int cy) {\n\tif (x < cx or x > cy) return;\n\tif (cx == cy) {\n\t\tv[id] = z;\n\t\treturn;\n\t}\n\tint mid = (cx + cy) / 2;\n\tupd(2 * id, cx, mid);\n\tupd(2 * id + 1, mid + 1, cy);\n\n\tv[id] = max(v[2 * id], v[2 * id + 1]);\n}\n\nint qry(int id, int cx, int cy) {\n\tif (y<cx or x>cy) return 0;\n\tif (x <= cx and cy <= y) return v[id];\n\tint mid = (cx + cy) / 2;\n\treturn max(qry(2 * id, cx, mid), qry(2 * id + 1, mid + 1, cy));\n}\n\nclass Solution {\npublic:\n\tvector<bool> getResults(vector<vector<int>>& queries) {\n\t\tint n = sz(queries);\n\n\t\tset<int> s;\n\t\tunordered_set<int> accessed;\n\t\ts.insert(0);\n\n\t\tvector<bool> jawabs;\n\n\t\tfor (auto &ques : queries) {\n\t\t\tint type = ques[0];\n\n\t\t\tif (type == 1) {\n\t\t\t\tint pos = ques[1];\n\n\t\t\t\t// find just one after\n\t\t\t\tauto it = s.upper_bound(pos);\n\t\t\t\tif (it != s.end()) {\n\t\t\t\t\t// update its value\n\t\t\t\t\tx = *it;\n\t\t\t\t\tz = (*it) - pos;\n\t\t\t\t\tupd(1, 0, MX);\n\t\t\t\t\taccessed.insert(x);\n\t\t\t\t}\n\t\t\t\t// find just one smaller\n\t\t\t\tz = pos;\n\t\t\t\tif (it != s.begin()) {\n\t\t\t\t\tit--;\n\t\t\t\t\tz = pos - (*it);\n\t\t\t\t}\n\t\t\t\tx = pos;\n\t\t\t\tupd(1, 0, MX);\n\n\t\t\t\ts.insert(pos);\n\t\t\t\taccessed.insert(x);\n\t\t\t\tcontinue;\n\t\t\t}\n\n\n\t\t\tint pos = ques[1];\n\t\t\tint block = ques[2];\n\n\t\t\t// find just one smaller block\n\t\t\t// check with it and check for pos and that block\n\t\t\tauto it = s.upper_bound(pos);\n\t\t\tint curBlock = 0;\n\t\t\tif (it != s.begin()) {\n\t\t\t\tit--;\n\t\t\t\tcurBlock = pos - (*it);\n\t\t\t\tx = 0, y = (*it);\n\t\t\t}\n\t\t\tif (curBlock >= block) {\n\t\t\t\tjawabs.pb(true);\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tjawabs.pb(qry(1, 0, MX) >= block);\n\t\t}\n\t\tfor (auto &i : accessed) {\n\t\t\tx = i, z = 0;\n\t\t\tupd(1, 0, MX);\n\t\t}\n\t\treturn jawabs;\n\t}\n};\n\n\n\n\n\n\n\n",
    "submit_ts": 1716649743.0
}