{
    "username": "kudojp",
    "submission": "'''\nBuild bit array\n\nbuild cnts = {0: 1, 1: 2...}\nclosest_gap = k\n\nn = len(nums)\nleft = 0\nfor right in range(n):\n    cnts += cnts of nums[right]\n    and_val = ...\n    if and_val == k:\n        return k\n    update closest_gap\n    if k < and_val:\n        move left till it k <= and_val.\n            update cnts\n        and_val = ...\n        if and_val == k:\n            return k\n        update closest_gap\n\nreturn closest_gap\n        \n\n\n\n'''\n\n\nclass Solution:\n    def minimumDifference(self, nums: List[int], k: int) -> int:\n        # print(\"==================\")\n        n = len(nums)\n\n        bits = [0] * (math.floor(log(max(nums), 2)) + 1)\n        min_diff = abs(k - nums[0])\n        \n        left = 0\n        for right in range(n):\n            self.add_to_bits(bits, nums[right])\n            and_val = self.get_and_val(bits, right - left + 1)\n            # print(left, right, and_val, bits)\n            if and_val == k: return 0            \n            min_diff = min(min_diff, abs(k - and_val))\n            \n            if k < and_val:\n                continue\n                \n            # move left. It may increase and_val\n            while and_val < k and left + 1 <= right:\n                self.remove_from_bits(bits, nums[left])\n                left += 1\n                # print(left, right)\n                and_val = self.get_and_val(bits, right - left + 1)\n                # print(left, right, and_val, bits)\n                if and_val == k: return 0            \n                min_diff = min(min_diff, abs(k - and_val))\n                \n        return min_diff\n                \n\n    def add_to_bits(self, bits, n):\n        i = 0\n        while 0 < n:\n            bits[i] += n % 2\n            n = n // 2\n            i += 1\n    def remove_from_bits(self, bits, n):\n        i = 0\n        while 0 < n:\n            bits[i] -= n % 2\n            n = n // 2\n            i += 1            \n\n    def get_and_val(self, bits, cnt):\n        val = 0\n        for i, bit_cnt in enumerate(bits):\n            if bit_cnt == cnt:\n                val += 2 ** i\n        return val\n    \n    \n        \n        \n        ",
    "submit_ts": 1717300179.0
}