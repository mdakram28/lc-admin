{
    "username": "Harsh Mathur",
    "submission": "#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <climits>\n\nusing namespace std;\n\nstruct Element {\n    long long value;\n    int row;\n    int col;\n};\n\n// Function to get the top 3 elements from a vector of `Element`\nvector<Element> getTop3(const vector<Element>& elements) {\n    vector<Element> top3;\n    for (const auto& elem : elements) {\n        if (top3.size() < 3) {\n            top3.push_back(elem);\n            sort(top3.begin(), top3.end(), [](const Element& a, const Element& b) {\n                return a.value > b.value;\n            });\n        } else if (elem.value > top3.back().value) {\n            top3.back() = elem;\n            sort(top3.begin(), top3.end(), [](const Element& a, const Element& b) {\n                return a.value > b.value;\n            });\n        }\n    }\n    return top3;\n}\n\nclass Solution {\npublic:\n    long long maximumValueSum(vector<vector<int>>& board) {\n        int m = board.size();\n        int n = board[0].size();\n\n        vector<vector<Element>> rowTop3(m);\n        vector<vector<Element>> colTop3(n);\n\n        // Extract top 3 values from each row\n        for (int i = 0; i < m; ++i) {\n            vector<Element> rowElements;\n            for (int j = 0; j < n; ++j) {\n                rowElements.push_back({board[i][j], i, j});\n            }\n            rowTop3[i] = getTop3(rowElements);\n        }\n\n        // Extract top 3 values from each column\n        for (int j = 0; j < n; ++j) {\n            vector<Element> colElements;\n            for (int i = 0; i < m; ++i) {\n                colElements.push_back({board[i][j], i, j});\n            }\n            colTop3[j] = getTop3(colElements);\n        }\n\n        long long maxSum = LLONG_MIN;\n\n        // Brute force all combinations of top values from rows and columns\n        for (int r1 = 0; r1 < m; ++r1) {\n            for (const auto& elem1 : rowTop3[r1]) {\n                for (int r2 = 0; r2 < m; ++r2) {\n                    if (r2 == r1) continue;\n                    for (const auto& elem2 : rowTop3[r2]) {\n                        if (elem2.col == elem1.col) continue;\n                        for (int c1 = 0; c1 < n; ++c1) {\n                            if (c1 == elem1.col || c1 == elem2.col) continue;\n                            for (const auto& elem3 : colTop3[c1]) {\n                                if (elem3.row == r1 || elem3.row == r2) continue;\n                                maxSum = max(maxSum, elem1.value + elem2.value + elem3.value);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return maxSum;\n    }\n};\n\n// int main() {\n//     Solution s;\n//     // Test cases\n//     vector<vector<int>> board1 = {\n//         {12, 17, 82},\n//         {-81, 17, 96},\n//         {-58, -55, 35}\n//     };\n//     cout << s.maximumValueSum(board1) << endl;  // Expected: 64\n\n//     vector<vector<int>> board2 = {\n//         {-3, 1, 1, 1},\n//         {-3, 1, -3, 1},\n//         {-3, 2, 1, 1}\n//     };\n//     cout << s.maximumValueSum(board2) << endl;  // Expected: 4\n\n//     vector<vector<int>> board3 = {\n//         {1, 2, 3},\n//         {4, 5, 6},\n//         {7, 8, 9}\n//     };\n//     cout << s.maximumValueSum(board3) << endl;  // Expected: 15\n\n//     return 0;\n// }",
    "submit_ts": "1723909910",
    "subm_id": "1359210267"
}