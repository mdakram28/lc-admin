{
    "username": "Andrei",
    "submission": "class Solution:\n    def maximumValueSum(self, board: List[List[int]]) -> int:\n        m = len(board)\n        n = len(board[0])\n\n        # @cache\n        # def place(k, prev, i0, j0, i1, j1):\n        #     if k == 0:\n        #         return 0\n        #     prev = set(prev)\n        #     best = -math.inf\n        #     for i in range(i0, i1):\n        #         for j in range(j0, j1):\n        #             if (i, j) not in prev:\n        #                 prev.add((i, j))\n        #                 val = board[i][j] + max(\n        #                     # place(k - 1, frozenset(prev), i0, j0, i, j),\n        #                     place(k - 1, frozenset(prev), i0, j + 1, i, j1),\n        #                     place(k - 1, frozenset(prev), i + 1, j0, i1, j),\n        #                     place(k - 1, frozenset(prev), i + 1, j + 1, i1, j1),\n        #                 )\n        #                 prev.remove((i, j))\n        #                 best = max(best, val)\n        #     return best\n\n        # return place(3, frozenset(), 0, 0, m, n)\n\n        rows = [[] for _ in range(m)]\n\n        for i in range(m):\n            for j in range(n):\n                if len(rows[i]) == 3:\n                    heappushpop(rows[i], (board[i][j], j))\n                else:\n                    heappush(rows[i], (board[i][j], j))\n\n        for i in range(m):\n            rows[i].sort(reverse=True)\n        # print(rows)\n\n        best = -math.inf\n        for i1 in range(m):\n            for val1, j1 in rows[i1]:\n                # select 2\n                for i2 in range(i1 + 1, m):\n                    for val2, j2 in rows[i2]:\n                        if j1 != j2:\n                            # select 3\n                            for i3 in range(i2 + 1, m):\n                                for val3, j3 in rows[i3]:\n                                    if j2 != j3 and j3 != j1:\n                                        best = max(best, val1 + val2 + val3)\n\n        return best",
    "submit_ts": "1723910105",
    "subm_id": "1359217543"
}