{
    "username": "ljs7619480",
    "submission": "class BIT{\n    int lsb(int x){ return x & -x; }\n\npublic:\n    BIT(int sz): tree(sz+1, 0) {}\n    \n    void update(int idx, int delta){\n        for(int i=idx+1; i<tree.size(); i+=lsb(i)){\n            tree[i] += delta;\n        }\n    }\n    \n    int getSum(int idx){\n        int res = 0;\n        for(int i=idx+1; i>0; i-=lsb(i)){\n            res += tree[i];\n        }\n        return res;\n    }\n    \n    int getSum(int start, int stop){\n        if(stop < start){ return 0; }\n        return getSum(stop) - getSum(start-1);\n    }\n    \n    void dump(){\n        for(int i=0; i<tree.size()-1; i++){\n            cout << getSum(i) << \" \";\n        } cout << endl;\n    }\n\nprivate:\n    vector<int> tree;\n};\n\nclass Solution {\n    bool isPeak(const vector<int> &nums, int i){\n        int const n = nums.size();\n        return i > 0 && i < n-1 && nums[i-1] < nums[i] && nums[i] > nums[i+1];\n    }\n\npublic:\n    vector<int> countOfPeaks(vector<int>& nums, vector<vector<int>>& queries) {\n        BIT bit(nums.size());        \n        for(int i=1; i<nums.size()-1; i++){\n            if(isPeak(nums, i)){ bit.update(i, 1); }\n        }\n        // bit.dump();\n        \n        vector<int> ans;\n        for(const auto query: queries){\n            if(query[0] == 1){\n                ans.push_back(bit.getSum(query[1]+1, query[2]-1));\n            }\n            else{\n                int idx = query[1];\n                int val = query[2];\n                bool isPeak_prev_old = isPeak(nums, idx-1);\n                bool isPeak_curr_old = isPeak(nums, idx  );\n                bool isPeak_next_old = isPeak(nums, idx+1);\n                nums[idx] = val;\n                bool isPeak_prev_new = isPeak(nums, idx-1);\n                bool isPeak_curr_new = isPeak(nums, idx  );\n                bool isPeak_next_new = isPeak(nums, idx+1);\n                if(isPeak_prev_old != isPeak_prev_new){\n                    if(isPeak_prev_new){ bit.update(idx-1, 1); }\n                    else{ bit.update(idx-1, -1); }\n                }\n                if(isPeak_curr_old != isPeak_curr_new){\n                    if(isPeak_curr_new){ bit.update(idx, 1); }\n                    else{ bit.update(idx, -1); }\n                }\n                if(isPeak_next_old != isPeak_next_new){\n                    if(isPeak_next_new){ bit.update(idx+1, 1); }\n                    else{ bit.update(idx+1, -1); }\n                }\n            }\n            // bit.dump();\n        }\n\n        return ans;        \n    }\n};",
    "submit_ts": "1718508975",
    "subm_id": "1289696048"
}