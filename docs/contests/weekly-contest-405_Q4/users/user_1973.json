{
    "username": "bibeknoob",
    "submission": "class Solution {\nprivate:\n    unordered_map<string, int> m;\n    vector<pair<string, int>> sorted_words;\n    vector<int> dp;\n\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        // Clear global data structures\n        m.clear();\n        sorted_words.clear();\n        dp.clear();\n\n        int n = target.length();\n        \n        for (int i = 0; i < words.size(); i++) {\n            if (m.find(words[i]) == m.end() || costs[i] < m[words[i]]) {\n                m[words[i]] = costs[i];\n            }\n        }\n        \n        for (const auto& pair : m) {\n            sorted_words.push_back(pair);\n        }\n        \n        // Sort words by length\n        sort(sorted_words.begin(), sorted_words.end(), \n             [](const pair<string, int>& a, const pair<string, int>& b) {\n                 return a.first.length() < b.first.length();\n             });\n        \n        dp.resize(n + 1, 1e9);\n        dp[0] = 0;\n        \n        for (int i = 0; i < n; i++) {\n            for (const auto& pair : sorted_words) {\n                const string& word = pair.first;\n                int word_len = word.length();\n                \n                if (i + word_len > n) break;  // Break inner loop if word is too long\n                \n                if (target.compare(i, word_len, word) == 0) {\n                    dp[i + word_len] = min(dp[i + word_len], dp[i] + pair.second);\n                }\n            }\n        }\n        \n        return dp[n] == 1e9 ? -1 : dp[n];\n    }\n};",
    "submit_ts": "1720324114",
    "subm_id": "1312391914"
}