{
    "username": "an_akin",
    "submission": "class Solution {\npublic:\n   int bfs(vector<vector<int>> &graph, int st, int t1, int t2, int no) {\n       //check for neighbours\n    queue<int> qu;\n    vector<int> visit(no + 4, 0);\n    qu.push(st);\n    visit[st] = 1;\n    while (!qu.empty()) {\n        int u = qu.front();\n        qu.pop();\n        for (int v : graph[u]) {\n            if (!visit[v]) {\n                qu.push(v);\n                visit[v] = 1;\n            }\n        }\n    }\n    return visit[t1] || visit[t2];\n    }\n    bool canReachCorner(int X, int Y, vector<vector<int>>& circles) {\n        //make a grid\n         vector<pair<pair<int, int>, int>> tcircle(circles.size());\n         vector<vector<int>> graph(circles.size() + 4);\n        int n=circles.size();\n        for (int i = 0; i < n; ++i) {\n            tcircle[i].first.first=circles[i][0];\n            tcircle[i].first.second=circles[i][1];\n            tcircle[i].second=circles[i][2];\n        }\n         for (int i = 0; i < n; ++i) { \n            if (tcircle[i].first.first <= tcircle[i].second) {\n                graph[n].push_back(i);\n                graph[i].push_back(n);\n            }\n            if (X - tcircle[i].first.first <= tcircle[i].second) {\n                graph[n + 2].push_back(i);\n                graph[i].push_back(n + 2);\n            }\n            if (tcircle[i].first.second <= tcircle[i].second) {\n                graph[n + 1].push_back(i);\n                graph[i].push_back(n + 1);\n            }\n            if (Y - tcircle[i].first.second <= tcircle[i].second) {\n                graph[n + 3].push_back(i);\n                graph[i].push_back(n + 3);\n            }\n            for (int j = i + 1; j < n; ++j) {\n                double distance = sqrt(pow(tcircle[i].first.first - tcircle[j].first.first, 2) +\n                                       pow(tcircle[i].first.second - tcircle[j].first.second, 2));\n                int radius_sum = tcircle[i].second + tcircle[j].second;\n                if (radius_sum >= distance) {\n                    graph[i].push_back(j);\n                    graph[j].push_back(i);\n                }\n            }\n        }        \n        int b = 0;\n        b = max(b, bfs(graph, n, n + 1, n + 2, n + 4));\n        b = max(b, bfs(graph, n + 3, n + 2, n + 1, n + 4));\n        if (b){return false;}\n        return true;        \n    }\n};",
    "submit_ts": "1722138738",
    "subm_id": "1335798410"
}