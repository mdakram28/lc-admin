{
    "username": "bladechen",
    "submission": "#define EDGE_SIZE 40001\n#define LINT_MAX INT_MAX\n#define NODE_SIZE 501\nstruct edge\n{\n\tint u,v,next,f;\n    long long w;\n}e[EDGE_SIZE];\nlong long mincost;\nint p[NODE_SIZE];\nint head[NODE_SIZE];\nint num;\nint s,t;\nint max_flow;\nvoid add(int s,int t, long long w,int c)\n{\n\te[num].f=c;\n\te[num].next=head[s];\n\thead[s]=num;\n\te[num].u=s;\n\te[num].v=t;\n\te[num++].w=w;\n\treturn ;\n}\nvoid addedge(int s,int t, long long w,int c)\n{\n    //printf (\"insert [%d->%d], value: %d, capcity: %d\\n\", s, t, w, c);\n\tadd(s,t,w,c);\n\tadd(t,s,-w,0);\n\treturn ;\n}\nint Q[200000]/*\u5f00\u5927\u70b9*/,d[NODE_SIZE];\nbool spfa()\n{\n\tint i,j;\n\tint front=0,tail=0;\n\tbool ok[EDGE_SIZE]={0};//\u6ce8\u610f\u4e0d\n\tfor(i=0;i<=t;i++)//t\u4e00\u822c\u9700\u8981\u662f\u6700\u5927\u7684\u503c\uff0c\n\t{\n\t\td[i]=LINT_MAX;\n\t}\n\td[s]=0;\n\tok[s]=1;\n\tp[s]=-1;\n\tQ[++tail]=s;\n\twhile(tail!=front)\n\t{\n\t\ti=Q[++front];\n\t\tok[i]=0;\n\t\tfor(j=head[i];j!=-1;j=e[j].next)\n\t\t{\n\t\t\tif(e[j].f>0&&d[i]+e[j].w<d[e[j].v])\n\t\t\t{\n\t\t\t\td[e[j].v]=d[i]+e[j].w;\n\t\t\t\tp[e[j].v]=j;\n\t\t\t\tif(!ok[e[j].v])\n\t\t\t\t{\n\t\t\t\t\tQ[++tail]=e[j].v;\n\t\t\t\t\tok[e[j].v]=1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tif(d[t]<LINT_MAX)\n\t\treturn 1;\n\telse return 0;\n}\nint solve()\n{\n\tint i;\n\tlong long minflow = LINT_MAX;\n\tfor(i=p[t];i!=-1;i=p[e[i].u])\n\t{\n\t\tif(minflow > e[i].f)\n\t\t\tminflow = e[i].f;\n\t}\n\tfor (i=p[t];i!=-1;i=p[e[i].u])\n\t{\n\t\te[i].f-=minflow;\n\t\te[i^1].f+=minflow;\n\t\tmincost += e[i].w*minflow;\n\t}\n\tmax_flow+=minflow;\n\treturn 0;\n}\nvoid init(int max_n) {\n\tmemset(head,-1,sizeof(head));\n\tnum=0;\n\ts=0;\n\tt=max_n;\n\tmax_flow=0;\n\tmincost=0;\n\t//\u5982\u679c\u6709a->b\u7684\u8fb9\uff0c\u5bb9\u91cf\u4e3aw,\u5355\u4f4d\u8d39\u7528\u4e3ac\u5219\uff1a\n    //addedge(a,b,c,w);\n}\n\nvoid run() {\n\twhile(spfa())\n\t{\n\t\tsolve();\n    }\n}\n\t\nclass Solution {\npublic:\n    long long maximumValueSum(vector<vector<int>>& board) {\n        long long n =  board.size();\n        long long m = board[0].size();\n        init(n + m + 2 );\n        long long ss = n + m + 1;\n        addedge(s, ss, 0, 3);\n        for (long long i = 0 ;i < board.size(); ++ i) {\n            addedge(ss, i + 1, 0, 1);\n        }\n        for (long long j = 0; j < board[0].size(); ++ j) {\n            addedge(n + j + 1, t, 0, 1);\n        }\n        \n        for (long long i = 0 ;i < board.size(); ++ i) {\n            for (long long j = 0; j < board[0].size(); ++ j) {\n                addedge(i + 1, n + j + 1, -board[i][j],1);\n            }\n        }\n        printf (\"%lld %lld\\n\", s, t);\n        run();\n        return -mincost;\n\n        \n    }\n};",
    "submit_ts": "1723909981",
    "subm_id": "556338933"
}