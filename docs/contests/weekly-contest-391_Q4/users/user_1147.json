{
    "username": "coding_parrot",
    "submission": "class Solution:\n    def minimumDistance(self, points: List[List[int]]) -> int:\n        N = len(points)\n        su = [0 for i in range(N)]\n        diff = [0 for i in range(N)]\n\n        for i in range(N):\n            su[i] = (points[i][0] + points[i][1], i)\n            diff[i] = (points[i][0] - points[i][1], i)\n\n        su.sort(key=lambda x: x[0])\n        diff.sort(key = lambda x: x[0])\n\n        ans = float(\"inf\")\n        mapping = [[0, 0] for i in range(len(points))]\n        \n        for i in range(len(points)):\n            curr = i\n            if curr == 0:\n                d1 = su[-1][0] - su[i + 1][0]\n                mapping[su[i][1]][0] = d1\n                d2 = diff[-1][0] - diff[i + 1][0]\n                mapping[diff[i][1]][1] = d2\n            elif curr == len(points) - 1:\n                d1 = su[-2][0] - su[0][0]\n                mapping[su[-1][1]][0] = d1\n                d2 = diff[-2][0] - diff[0][0]\n                mapping[diff[-1][1]][1] = d2\n            else:\n                d1 = su[-1][0] - su[0][0]\n                mapping[su[i][1]][0] = d1\n                d2 = diff[-1][0] - diff[0][0]\n                mapping[diff[i][1]][1] = d2\n                \n        for i in range(len(points)):\n            ans = min(ans, max(mapping[i][0], mapping[i][1]))\n        \n        return ans\n                \n                \n                \n"
}