{
    "username": "jtsuited",
    "submission": "class Solution:\n    def shortestDistanceAfterQueries(self, n: int, queries: List[List[int]]) -> List[int]:\n        sq = [(lo, hi, i) for i, (lo, hi) in enumerate(queries)]\n        sq = sorted(sq, key=lambda x: (x[0], -x[1]))\n        # print(sq)\n        matters = [True] * len(queries)\n\n        agg = [0] * len(queries)\n        nq = []\n        stack = []\n        for lo, hi, i in sq:\n            # print(i, stack, agg)\n            while stack and lo >= stack[-1][1]:\n                stack.pop()\n            if not stack:\n                stack.append((lo, hi, i))\n                continue\n            # if lo == stack[-1][0]:\n            #     if i < stack[-1][2]:\n            #         matters[stack[-1][2]] = False\n            #         stack.pop()\n            #     else:\n            #         if len(stack) == 1:\n            #             stack.pop()\n            #         else:\n            #             plo, phi, pi = stack[-1]\n            #             agg[stack[-2][2]] -= phi-plo\n            #             stack.pop()\n            # if not stack:\n            #     stack.append((lo, hi, i))\n            #     continue            \n            if i > stack[-1][2]:\n                matters[i] = False\n                continue\n            else:\n                agg[stack[-1][2]] += hi-lo-1\n                stack.append((lo, hi, i))\n        # print(i, stack, agg)\n        # print(agg)\n        ans = []\n        cur = n-1\n        for i, (lo, hi) in enumerate(queries):\n            if matters[i]:\n                cur -= (hi-lo-1) - agg[i]\n            ans.append(cur)\n        return ans\n\n\n\n",
    "submit_ts": "1722743957",
    "subm_id": "1343803598"
}