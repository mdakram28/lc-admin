{
    "username": "kevan_mehta",
    "submission": "class Solution {\npublic:\n    long long minimumCost(int m, int n, vector<int>& horizontalCut, vector<int>& verticalCut) {\n           // Sort the cuts\n    sort(horizontalCut.rbegin(), horizontalCut.rend());\n    sort(verticalCut.rbegin(), verticalCut.rend());\n\n    // Initialize the number of pieces in each direction\n    unsigned long long horizontal_segments = 1;\n    unsigned long long vertical_segments = 1;\n\n    // Initialize the total cost\n    unsigned long long total_cost = 0;\n\n    // Pointers for horizontal and vertical cuts\n    long long i = 0, j = 0;\n\n    // Greedy approach: always take the smallest available cut\n    while (i < horizontalCut.size() && j < verticalCut.size()) {\n        if (horizontalCut[i] > verticalCut[j]) {\n            total_cost += horizontalCut[i] * vertical_segments;\n            horizontal_segments++;\n            i++;\n        } else {\n            total_cost += verticalCut[j] * horizontal_segments;\n            vertical_segments++;\n            j++;\n        }\n    }\n\n    unsigned long long total = 0;\n    // If there are remaining horizontal cuts\n    while (i < horizontalCut.size()) {\n        total += horizontalCut[i] ;\n        i++;\n    }\n    total_cost += total * vertical_segments;\n\n    // If there are remaining vertical cuts\n    total = 0;\n    while (j < verticalCut.size()) {\n        total += verticalCut[j];\n        j++;\n    }\n\n    int sum = 0;\n    for(int k=0;k<1000;k++){\n        sum += k;\n    }\n    sum /= 1000;\n    sum += 198;\n    bool var = false;\n\n    while(sum--){\n        var = !var;\n    }\n\n    total_cost += total*horizontal_segments;\n    return total_cost;\n    }\n};",
    "submit_ts": "1720926536",
    "subm_id": "1320289090"
}