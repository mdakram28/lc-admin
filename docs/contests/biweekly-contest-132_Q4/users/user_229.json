{
    "username": "huntersjm",
    "submission": "import java.util.*;\n\nclass Solution {\n\n    public static void main(String[] args) {\n        System.out.println(new Solution().maximumLength(new int[]{1,2,1}, 1));\n    }\n\n        public int maximumLength(int[] nums, int k) {\n            int[] next = new int[nums.length];\n            Map<Integer, Integer> map = new HashMap<>(nums.length);\n            for (int i = nums.length - 1; i >= 0; i--) {\n                if (map.containsKey(nums[i])) {\n                    next[i] = map.get(nums[i]);\n                }\n                map.put(nums[i], i);\n            }\n\n            int [][][]dp = new int[nums.length][k + 1][2];\n            int result = Math.max(maximumLength(dp, 0, k, 1, next), maximumLength(dp, 0, k, 0, next));\n            return result;\n        }\n        public int maximumLength(int[][][] dp, int x, int t, int use, int[] next) {\n            if (x >= dp.length || t < 0) {\n                return 0;\n            }\n            if (dp[x][t][use] != 0) {\n                return dp[x][t][use];\n            }\n\n\n            if (use == 1) {\n                if (next[x] == x + 1) {\n                    dp[x][t][1] = maximumLength(dp, x + 1, t, 1, next) + 1;\n                } else {\n                    dp[x][t][1] = Math.max(maximumLength(dp, x + 1, t - 1, 1, next), maximumLength(dp, x + 1, t - 1, 0, next)) + 1;\n                    if (next[x] != 0) {\n                        dp[x][t][1] = Math.max(dp[x][t][1], maximumLength(dp, next[x], t, 1, next) + 1);\n                    }\n                }\n            } else {\n                dp[x][t][0] = Math.max(maximumLength(dp, x + 1, t, 0, next), maximumLength(dp, x + 1, t, 1, next));\n            }\n\n            return dp[x][t][use];\n        }\n    }",
    "submit_ts": 1717860492.0
}