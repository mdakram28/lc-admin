{
    "username": "Samrach",
    "submission": "// long long maximumValueSum(int** board, int boardSize, int* boardColSize) {\n//     long long maxSum = LLONG_MIN;\n    \n//     for (int r1 = 0; r1 < boardSize; r1++) {\n//         for (int c1 = 0; c1 < boardColSize[0]; c1++) {\n//             for (int r2 = r1 + 1; r2 < boardSize; r2++) {\n//                 for (int c2 = 0; c2 < boardColSize[0]; c2++) {\n//                     if (c2 == c1) continue; // Skip if same column\n//                     for (int r3 = r2 + 1; r3 < boardSize; r3++) {\n//                         for (int c3 = 0; c3 < boardColSize[0]; c3++) {\n//                             if (c3 == c1 || c3 == c2) continue; // Skip if same column\n                            \n//                             long long currentSum = (long long)board[r1][c1] + (long long)board[r2][c2] + (long long)board[r3][c3];\n//                             if (currentSum > maxSum) {\n//                                 maxSum = currentSum;\n//                             }\n//                         }\n//                     }\n//                 }\n//             }\n//         }\n//     }\n    \n//     return maxSum;\n// }\n#define MAXN 100\n\ntypedef struct {\n    int value;\n    int col;\n} Cell;\n\nint cmp(const void* a, const void* b) {\n    return ((Cell*)b)->value - ((Cell*)a)->value;\n}\n\nlong long maximumValueSum(int** board, int boardSize, int* boardColSize) {\n    Cell rowMax[MAXN][3];  // Store top 3 max cells for each row\n    \n    // Preprocess rows to find the top 3 max values for each row\n    for (int r = 0; r < boardSize; r++) {\n        Cell cells[boardColSize[0]];\n        for (int c = 0; c < boardColSize[0]; c++) {\n            cells[c].value = board[r][c];\n            cells[c].col = c;\n        }\n        qsort(cells, boardColSize[0], sizeof(Cell), cmp);\n        for (int i = 0; i < 3; i++) {\n            rowMax[r][i] = cells[i];\n        }\n    }\n    \n    long long maxSum = LLONG_MIN;\n    \n    // Iterate over all pairs of rows\n    for (int r1 = 0; r1 < boardSize; r1++) {\n        for (int r2 = r1 + 1; r2 < boardSize; r2++) {\n            for (int r3 = r2 + 1; r3 < boardSize; r3++) {\n                // Try all combinations of columns using precomputed max values\n                for (int i = 0; i < 3; i++) {\n                    for (int j = 0; j < 3; j++) {\n                        if (rowMax[r1][i].col == rowMax[r2][j].col) continue;\n                        for (int k = 0; k < 3; k++) {\n                            if (rowMax[r1][i].col == rowMax[r3][k].col ||\n                                rowMax[r2][j].col == rowMax[r3][k].col) continue;\n                            \n                            long long currentSum = (long long)rowMax[r1][i].value +\n                                                   (long long)rowMax[r2][j].value +\n                                                   (long long)rowMax[r3][k].value;\n                            if (currentSum > maxSum) {\n                                maxSum = currentSum;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n    \n    return maxSum;\n}",
    "submit_ts": "1723908450",
    "subm_id": "1359153161"
}