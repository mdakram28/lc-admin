{
    "username": "Demo_KS153",
    "submission": "class Solution {\n    \n    unordered_map<std::string, int> dp;\npublic:\n    int solve(int currPosition, int jumpLevel, bool wasLastDecrement, int k) {\n        if (currPosition > k + 1 || (wasLastDecrement && currPosition >= k + 1)) {\n            return 0;\n        }\n\n        std::string key = std::to_string(currPosition) + \"_\" + std::to_string(jumpLevel) + \"_\" + (wasLastDecrement ? \"1\" : \"0\");\n        if (dp.find(key) != dp.end()) {\n            return dp[key];\n        }\n\n        int ways = 0;\n        if (currPosition == k) {\n            ways = 1;\n        }\n\n        int b = 0;\n        if (!wasLastDecrement) {\n            b = solve(currPosition - 1, jumpLevel, true, k);\n        }\n\n        int f = solve(currPosition + (1 << jumpLevel), jumpLevel + 1, false, k);\n\n        return dp[key] = ways + b + f;\n    }\n\n    int waysToReachStair(int k) {\n        return solve(1, 0, false, k);\n    }\n};",
    "submit_ts": 1716090447.0
}