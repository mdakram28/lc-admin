{
    "username": "Aditya_Chauhan_12",
    "submission": "import java.util.*;\n\npublic class Solution {\n    public int numberOfAlternatingGroups(int[] tileColors, int minLength) {\n        int totalTiles = tileColors.length;\n        int groupCount = 0;\n\n        if (minLength == 1) {\n            // Every single tile is an alternating group by itself\n            return totalTiles;\n        }\n\n        int currentAlternation = 1;\n        int tileIndex = 1;\n        while (tileIndex < totalTiles + minLength - 1) {\n            int currentIndex = tileIndex;\n            int previousIndex = tileIndex - 1;\n\n            // Handle circular indexing\n            if (currentIndex >= totalTiles) {\n                currentIndex -= totalTiles;\n            }\n            if (previousIndex >= totalTiles) {\n                previousIndex -= totalTiles;\n            }\n\n            if (tileColors[currentIndex] != tileColors[previousIndex]) {\n                ++currentAlternation;\n            } else {\n                currentAlternation = 1;\n            }\n\n            // Check if we have a valid alternating group of length minLength\n            if (currentAlternation >= minLength) {\n                ++groupCount;\n            }\n\n            ++tileIndex;\n        }\n\n        return groupCount;\n    }\n}",
    "submit_ts": "1720279503",
    "subm_id": "1311753827"
}