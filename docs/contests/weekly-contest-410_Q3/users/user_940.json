{
    "username": "bramar2",
    "submission": "#include <bits/stdc++.h>\n#include <cmath>\n#include <cstdio>\n#include <unordered_map>\nusing namespace std;\n#define all(x) x.begin(), x.end()\nusing ull = unsigned long long;\nusing ll = long long;\n\ninline int gcd(int a,int b) { if (b==0) return a; return gcd(b, a%b); }\ninline long long gcd(long long a,long long b) { if (b==0) return a; return gcd(b, a%b); }\ninline int lcm(int a,int b) { return a/gcd(a,b)*b; } \ninline long long lcm(long long a,long long b) { return a/gcd(a,b)*b; }\ninline long long nth_prime(long long a) { a++;if(a <= 6) return (vector<long long>{2,3,5,7,11,13,17})[a]; long double lg = log((long double) a); return (long long) floor(a * (lg + log(lg))); }\ninline long long mod_exp(long long base, long long exp, long long modd) { unsigned long long ans = 1; base %= modd; while(exp > 0) { if(exp%2==1) ans = (base*ans)%modd; exp /= 2; base = (base*base)%modd; } return ans; }\ninline string to_upper(string a) { for (int i=0;i<(int)a.size();++i) if (a[i]>='a' && a[i]<='z') a[i]-='a'-'A'; return a; }\ninline string to_lower(string a) { for (int i=0;i<(int)a.size();++i) if (a[i]>='A' && a[i]<='Z') a[i]+='a'-'A'; return a; }\n\n\nbool fIO() {\n    ios::sync_with_stdio(false);\n    ios_base::sync_with_stdio(false);\n    ios::sync_with_stdio(false);\n    cout.tie(nullptr);\n    cin.tie(nullptr);\n    return true;\n}\nbool y4555123 = fIO();\nconst ll MOD = 1e9 + 7;\n\nclass Solution {\npublic:\n    int countOfPairs(const vector<int>& nums) {\n        int n = (int) nums.size();\n        vector<unordered_map<ll,ll>> memo(n, unordered_map<ll, ll>());\n        function<ll(int,ll,ll)> calc = [&](int len, ll prevIncreasing, ll prevDecreasing) -> ll {\n            if(len >= n) {\n                return 1;\n            }\n            if(auto itr = memo[len].find((prevIncreasing << 10) | prevDecreasing); itr != memo[len].end()) {\n                return itr->second;\n            }\n            int target = nums[len];\n            ll incr = prevIncreasing;\n            ll decr = (target - incr);\n            while(decr >= 0 && !(incr >= prevIncreasing && (prevDecreasing == -1 || decr <= prevDecreasing))) {\n                incr++;\n                decr--;\n            }\n            ll ways = 0;\n            while(decr >= 0 && incr >= prevIncreasing && (prevDecreasing == -1 || decr <= prevDecreasing)) {\n                ways += calc(len+1, incr, decr);\n                ways %= MOD;\n\n                incr++;\n                decr--;\n            }\n            return memo[len][(prevIncreasing << 10) | prevDecreasing] = ways;\n        };\n        return calc(0, 0, -1) % MOD;\n    }\n};\n\n// void solve() {\n//     int n, s, m;\n//     cin >> n >> s >> m;\n// }\n// int main() {\n//     int t = 1;\n//     cin >> t;\n//     for(int i = 0; i < t; i ++)\n//         solve();\n//     return 0;\n// }",
    "submit_ts": "1723344902",
    "subm_id": "1351544477"
}