{
    "username": "shubhamykp2003",
    "submission": "class Solution {class TrieNode {\n        TrieNode[] children = new TrieNode[26];\n        List<Integer> wordIndices = new ArrayList<>();\n    }\n    \n    public int minimumCost(String target, String[] words, int[] costs) {\n        int n = target.length();\n        int[] dp = new int[n + 1];\n        Arrays.fill(dp, Integer.MAX_VALUE);\n        dp[0] = 0;\n        \n        TrieNode root = buildTrie(words);\n        \n        for (int i = 1; i <= n; i++) {\n            TrieNode node = root;\n            for (int j = i - 1; j >= 0 && node != null; j--) {\n                char c = target.charAt(j);\n                node = node.children[c - 'a'];\n                if (node != null && !node.wordIndices.isEmpty()) {\n                    for (int wordIndex : node.wordIndices) {\n                        if (dp[j] != Integer.MAX_VALUE) {\n                            dp[i] = Math.min(dp[i], dp[j] + costs[wordIndex]);\n                        }\n                    }\n                }\n            }\n        }\n        \n        return dp[n] == Integer.MAX_VALUE ? -1 : dp[n];\n    }\n    \n    private TrieNode buildTrie(String[] words) {\n        TrieNode root = new TrieNode();\n        for (int i = 0; i < words.length; i++) {\n            TrieNode node = root;\n            for (int j = words[i].length() - 1; j >= 0; j--) {\n                char c = words[i].charAt(j);\n                if (node.children[c - 'a'] == null) {\n                    node.children[c - 'a'] = new TrieNode();\n                }\n                node = node.children[c - 'a'];\n            }\n            node.wordIndices.add(i);\n        }\n        return root;\n    }\n}",
    "submit_ts": "1720320457",
    "subm_id": "1312294763"
}