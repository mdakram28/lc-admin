{
    "username": "lVLGuRyKq6",
    "submission": "#include <iostream>\n#include <utility>\n#include <set>\n\nclass PairSearchTree {\nprivate:\n    std::set<std::pair<int, int>> pairs;\n\npublic:\n    void insert(int x, int y) {\n        pairs.insert({x, y});\n    }\n\n    bool findInRange(int a, int b) {\n        auto it = pairs.lower_bound({a, INT_MIN}); // Find the first pair with x >= a\n        return (it != pairs.end() && it->second <= b); // Check if y <= b\n    }\n\n    void erase(int x, int y) {\n        auto it = pairs.find({x, y});\n        if (it != pairs.end()) {\n            pairs.erase(it);\n        }\n    }\n};\n\n\nclass Solution {\npublic:\n        vector<int> max;\n    \n    void modify(int o, int l, int r, int i, int val) {\n        if (l == r) {\n            max[o] = val;\n            return;\n        }\n        int m = (l + r) / 2;\n        if (i <= m) modify(o * 2, l, m, i, val);\n        else modify(o * 2 + 1, m + 1, r, i, val);\n        max[o] = std::max(max[o * 2], max[o * 2 + 1]);\n    }\n\n    // \u8fd4\u56de\u533a\u95f4 [L,R] \u5185\u7684\u6700\u5927\u503c\n    int query1(int o, int l, int r, int L, int R) { // L \u548c R \u5728\u6574\u4e2a\u9012\u5f52\u8fc7\u7a0b\u4e2d\u5747\u4e0d\u53d8\uff0c\u5c06\u5176\u5927\u5199\uff0c\u89c6\u4f5c\u5e38\u91cf\n        if (L <= l && r <= R) return max[o];\n        int res = 0;\n        int m = (l + r) / 2;\n        if (L <= m) res = query1(o * 2, l, m, L, R);\n        if (R > m) res = std::max(res, query1(o * 2 + 1, m + 1, r, L, R));\n        return res;\n    }\n\n    vector<bool> getResults(vector<vector<int>>& queries) {\n        int u = 50005;\n        max.resize(u * 4);\n        PairSearchTree tree;\n        tree.insert(50000, 0);\n        modify(1, 1, u, 1, 50000);\n        std::set<int> obstacles;\n        std::vector<bool> results;\n\n        for (const auto& query : queries) {\n            int type = query[0];\n            int x = query[1];\n\n            if (type == 1) {\n                //cout << x << \"\\n\";\n                obstacles.insert(x);\n                auto a = obstacles.upper_bound(x);\n                auto b = obstacles.lower_bound(x);\n                if(a == obstacles.end()){\n                    if(b == obstacles.begin()){\n\n                        tree.erase(50000,0);\n                        modify(1, 1, u,1, 0);\n                        //cout << ft.query(1);\n                        tree.insert(x,0);\n                        modify(1, 1, u,1, x);\n                        tree.insert(50000-x,x);\n                        modify(1, 1, u,x+1, 50000-x);\n                    }else{\n                        b = prev(b);\n                        tree.erase(50000-*b,*b);\n                        modify(1, 1, u,*b+1, 0);\n                        tree.insert(x-*b,*b);\n                        modify(1, 1, u,*b+1, x-*b);\n                        tree.insert(50000-x,x);\n                        modify(1, 1, u,x+1, 50000-x);\n                    }\n                }else{\n                    if(b == obstacles.begin()){\n                        tree.erase(*a,0);\n                        modify(1, 1, u,1, 0);\n                        tree.insert(x,0);\n                        modify(1, 1, u,1, x);\n                        tree.insert(*a-x,x);\n                        modify(1, 1, u,x+1, *a-x);\n                    }else{\n                         b = prev(b);\n                        tree.erase(*a-*b,*b);\n                        modify(1, 1, u,*b+1, 0);\n                        tree.insert(x-*b,*b);\n                        modify(1, 1, u,*b+1, x-*b);\n                        tree.insert(*a-x,x);\n                        modify(1, 1, u,x+1, *a-x);\n                    }\n                }\n\n            } else if (type == 2) {\n                if(query[1] < query[2]){\n                results.push_back(false);\n                    \n                }else{\n                int x = query1(1,1,u,1,query[1]-query[2]+1);\n                bool can =  (x >= query[2]);\n                results.push_back(can);\n                }\n            }\n        }\n        return results;\n    }\n};",
    "submit_ts": 1716652532.0
}