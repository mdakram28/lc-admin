{
    "username": "g129512",
    "submission": "\nimport java.util.*;\n\nclass FenwickTree {\n    long M = (long) (1e9+7);\n    //f[i]\u8868\u793a (i-(i&-i),i] \u533a\u95f4\u7684\u548c\n    long[] f;\n\n    //\u53ef\u7528\u4e0b\u6807\u4e3a [0,maxN]\n    public FenwickTree(int maxN) {\n        f=new long[maxN+2];\n    }\n\n    //\u53ef\u4ee5\u52a0\u4e0a\u53d6\u4f59\n    long trim(long x) {\n        return x%M;\n    }\n\n    //\u4e0b\u6807i\u589e\u52a0v\uff0c\u4e0b\u6807\u4ece0\u5f00\u59cb\n    public void add(int i, long v) {\n        for(i++;i<f.length;i+=i&-i) {\n            f[i]+=v;\n            f[i]%=M;\n        }\n    }\n\n    //\u67e5\u8be2\u95ed\u533a\u95f4[0,r]\u7684\u548c\n    public long query(int i) {\n        long sum=0;\n        for (i++; i > 0; i-=i&-i) {\n            sum=trim(sum+f[i]);\n        }\n        return sum;\n    }\n\n    //\u67e5\u8be2\u95ed\u533a\u95f4[l,r]\u7684\u548c\n    public long query(int l, int r) {\n        return (query(r)-query(l-1)+M)%M;\n    }\n\n}\n\nclass Solution {\n    public int countOfPairs(int[] nums) {\n        int n = nums.length;\n        FenwickTree dp = new FenwickTree(nums[0]);\n        for (int i = 0; i <= nums[0]; i++) {\n            dp.add(i,1);\n        }\n        for (int i = 1; i < n; i++) {\n            FenwickTree ndp = new FenwickTree(nums[i]);\n            for (int j = nums[i] - 1; j >=0 ; j--) {\n                int k = nums[i]-j;\n                if (nums[i-1]-k<0)break;\n                int s = Math.min(nums[i-1]-k, j);\n                int q = (int) dp.query(0,s);\n                if (q>0) {\n                    ndp.add(j,q);\n                }\n            }\n            int j = nums[i];\n            int k = nums[i]-j;\n            int s = Math.min(nums[i-1]-k, j);\n            int q = (int) dp.query(0,s);\n            if (q>0) {\n                ndp.add(j,q);\n            }\n            dp = ndp;\n        }\n        return (int) dp.query(0,nums[n-1]);\n    }\n}",
    "submit_ts": "1723345840",
    "subm_id": "1351564433"
}