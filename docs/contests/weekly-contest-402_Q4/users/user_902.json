{
    "username": "newhar",
    "submission": "typedef struct {\n    int le, ri, lle, rri;\n    int cnt;\n} val_t;\n\n///// \u6a21\u677f\u5e94\u7528\u793a\u4f8b\u53c2\u8003\uff1ahttps://leetcode.cn/submissions/detail/478325498/\ntemplate<int N> class SegTree {\n    ///////// \u53d8\u91cf\u5b9a\u4e49 /////////\n    val_t _tr[N<<2];\n    int _n;\n    //////////////////////////////////\n    \n    void push_up(int node, int l, int r) {\n        if(l != r) {\n            ///////// \u8282\u70b9\u503c\u4e0a\u4f20 ///////////\n            _tr[node].cnt = _tr[l].cnt + _tr[r].cnt;\n            if(_tr[l].rri != -1 && _tr[l].ri > _tr[l].rri && _tr[l].ri > _tr[r].le) {\n                _tr[node].cnt++;\n            }\n            if(_tr[r].lle != -1 && _tr[r].le > _tr[r].lle && _tr[r].le > _tr[l].ri) {\n                _tr[node].cnt++;\n            }\n            _tr[node].le = _tr[l].le;\n            _tr[node].ri = _tr[r].ri;\n            _tr[node].lle = _tr[l].lle;\n            _tr[node].rri = _tr[r].rri;\n            if(_tr[node].lle == -1) {\n                _tr[node].lle = _tr[r].le;\n            }\n            if(_tr[node].rri == -1) {\n                _tr[node].rri = _tr[l].ri;\n            }\n            // cout << _tr[node].le << ',' << _tr[node].lle << ',' << _tr[node].rri << ',' << _tr[node].ri << _tr[node].cnt << endl;\n            // cout << _tr[l].le << ',' << _tr[l].lle << ',' << _tr[l].rri << ','  << _tr[l].ri << _tr[l].cnt << endl;\n            // cout << _tr[r].le << ',' << _tr[r].lle << ',' << _tr[r].rri << ','  << _tr[r].ri << _tr[r].cnt << endl;\n            // cout << endl;\n            //////////////////////////////\n        }\n    } \n\n    void init(int node, int l, int r) {\n        if(l == r) {\n            ///////// \u8282\u70b9\u521d\u59cb\u5316 ///////////\n            _tr[node].le = _tr[node].ri = 0;\n            _tr[node].lle = _tr[node].rri = -1;\n            _tr[node].cnt = 0;\n            //////////////////////////////\n        } else {\n            int m = (l+r)>>1;\n            init(node<<1, l, m);\n            init(node<<1|1, m+1, r);\n            push_up(node, l, r);\n        }\n    }\n    \n    void add(int node, int l, int r, int x, int v) {\n        if(l == r) {\n            ///////// \u8282\u70b9\u521d\u59cb\u5316 ///////////\n            _tr[node].le = _tr[node].ri = v;\n            _tr[node].lle = _tr[node].rri = -1;\n            _tr[node].cnt = 0;\n            //////////////////////////////\n        } else {\n            int m = (l+r)>>1;\n            if(x <= m)\n                add(node<<1, l, m, x, v);\n            else\n                add(node<<1|1, m+1, r, x, v);\n            push_up(node, node<<1, node<<1|1);\n        }\n    }\n    \n    val_t query(int node, int l, int r, int x, int y) {\n        if(r < x || l > y) {\n            //////// \u8fd4\u56de\u51fa\u754c\u503c /////////\n            val_t v;\n            v.le = v.ri = v.lle = v.rri = 1e9;\n            v.cnt = 0;\n            return v;\n            ///////////////////////////\n        }\n        if(l >= x && r <= y) {\n            return _tr[node];\n        } else {\n            int m = (l+r)>>1;\n            val_t le = query(node<<1,l,m,x,y);\n            val_t ri = query(node<<1|1,m+1,r,x,y);\n            val_t ans;\n            ///////// \u5408\u5e76\u7ed3\u679c /////////\n            ans.cnt = le.cnt + ri.cnt;\n            if(le.rri != -1 && le.ri > le.rri && le.ri > ri.le) {\n                ans.cnt++;\n            }\n            if(ri.lle != -1 && ri.le > ri.lle && ri.le > le.ri) {\n                ans.cnt++;\n            }\n            ans.le = le.le;\n            ans.ri = ri.ri;\n            ans.lle = le.lle;\n            ans.rri = ri.rri;\n            if(ans.lle == -1) {\n                ans.lle = ri.le;\n            }\n            if(ans.rri == -1) {\n                ans.rri = le.ri;\n            }\n            return ans;\n        }\n    }\n\n    public:\n    \n    void init(int n) {\n        _n = n;\n        init(1, 0, _n);\n    }\n\n    void add(int x, long long v) {\n        add(1, 0, _n-1, x, v);\n    }\n\n    val_t query(int x, int y) {\n        return query(1, 0, _n-1, x, y);\n    }\n};\nSegTree<100005> tr;\n\nclass Solution {\npublic:\n    vector<int> countOfPeaks(vector<int>& nums, vector<vector<int>>& queries) {\n        int n = nums.size();\n        tr.init(n);\n        for(int i = 0; i < nums.size(); ++i) {\n            tr.add(i, nums[i]);\n        }\n        vector<int> res;\n        for(auto& q : queries) {\n            if(q[0] == 1) {\n                val_t cur = tr.query(q[1], q[2]);\n                res.push_back(cur.cnt);\n            } else {\n                tr.add(q[1], q[2]);\n            }\n        }\n        return res;\n    }\n};",
    "submit_ts": "1718508151",
    "subm_id": "539785685"
}