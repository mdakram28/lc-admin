{
    "username": "ravi_prakash29",
    "submission": "import java.util.*;\n\nclass Solution {\n    \n    public static Set<Character> closure(Set<Character> alpha, Map<String, Set<Character>> F) {\n        Set<Character> ans = new HashSet<>(alpha);\n        int prev = 0;\n        while (ans.size() != prev) {\n            prev = ans.size();\n            for (Map.Entry<String, Set<Character>> entry : F.entrySet()) {\n                int flag = 1;\n                for (int i = 0; i < entry.getKey().length(); i++) {\n                    if (!ans.contains(entry.getKey().charAt(i))) {\n                        flag = 0;\n                        break;\n                    }\n                }\n                if (flag == 1) {\n                    ans.addAll(entry.getValue());\n                }\n            }\n        }\n        return ans;\n    }\n    \n    private static final int MOD = 1_000_000_007;\n    private static final int MAX_INVERSIONS = 400;\n\n    public int numberOfPermutations(int n, int[][] requirements) {\n        Map<Integer, Integer> mp = new HashMap<>();\n        \n        for (int[] req : requirements) {\n            mp.put(req[0] + 1, req[1]);\n        }\n\n        long[][] ansFinal = new long[n + 1][MAX_INVERSIONS + 1];\n        ansFinal[0][0] = 1;\n\n        for (int length = 1; length <= n; length++) {\n            for (int inv = 0; inv <= MAX_INVERSIONS; inv++) {\n                for (int newPos = 0; newPos < length; newPos++) {\n                    int prevInv = inv - newPos;\n                    if (prevInv >= 0) {\n                        ansFinal[length][inv] = (ansFinal[length][inv] + ansFinal[length - 1][prevInv]) % MOD;\n                    }\n                }\n            }\n\n            if (mp.containsKey(length)) {\n                int targetInv = mp.get(length);\n                for (int inv = 0; inv <= MAX_INVERSIONS; inv++) {\n                    if (inv != targetInv) {\n                        ansFinal[length][inv] = 0;\n                    }\n                }\n            }\n        }\n\n        long result = 0;\n        for (long count : ansFinal[n]) {\n            result = (result + count) % MOD;\n        }\n\n        return (int) result;\n    }\n    \n    private long power(long base, long exp) {\n        long result = 1;\n        while (exp > 0) {\n            if (exp % 2 == 1) {\n                result = (result * base) % MOD;\n            }\n            base = (base * base) % MOD;\n            exp /= 2;\n        }\n        return result;\n    }\n}\n",
    "submit_ts": 1719071458.0
}