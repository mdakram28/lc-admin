{
    "username": "Pajju_0330",
    "submission": "class Solution {\npublic:\ntemplate <typename T>\nclass SGTree {\npublic:\n    using SizeType = std::size_t;\n\n    SizeType N;\n    std::vector<T> seg;\n\n    SGTree(SizeType _N) : N(_N), seg(_N * 4, T{}) {}\n\n    void build(SizeType idx, SizeType low, SizeType high, const std::vector<T> &nums) {\n        if (low == high) {\n            seg[idx] = nums[low];\n            return;\n        }\n        SizeType mid = (low + high) / 2;\n        build(2 * idx + 1, low, mid, nums);\n        build(2 * idx + 2, mid + 1, high, nums);\n        seg[idx] = seg[2 * idx + 1] + seg[2 * idx + 2];\n    }\n\n    T query(SizeType idx, SizeType low, SizeType high, SizeType l, SizeType r) {\n        if (low > r || high < l)\n            return T{};\n        if (low >= l && high <= r)\n            return seg[idx];\n        SizeType mid = (low + high) / 2;\n        T left = query(2 * idx + 1, low, mid, l, r);\n        T right = query(2 * idx + 2, mid + 1, high, l, r);\n        return left + right;\n    }\n\n    void update(SizeType idx, SizeType low, SizeType high, SizeType index, T val) {\n        if (low == high) {\n            seg[idx] = val;\n            return;\n        }\n        SizeType mid = low + (high - low) / 2;\n        if (index <= mid)\n            update(2 * idx + 1, low, mid, index, val);\n        else\n            update(2 * idx + 2, mid + 1, high, index, val);\n        seg[idx] = seg[2 * idx + 1] + seg[2 * idx + 2];\n    }\n\n    void sg_build(const std::vector<T> &nums) {\n        build(0, 0, N - 1, nums);\n    }\n\n    T sg_query(SizeType l, SizeType r) {\n        return query(0, 0, N - 1, l, r);\n    }\n\n    void sg_update(SizeType index, T val) {\n        update(0, 0, N - 1, index, val);\n    }\n};\n    vector<int> countOfPeaks(vector<int>& nums, vector<vector<int>>& queries) {\n        int n = nums.size();\n        vector<int>v(n,0);\n        for(int i = 1; i < n-1; ++i){\n            if(nums[i] > nums[i-1] and nums[i] > nums[i+1]) v[i] = 1;\n        }\n        SGTree<int>sg(n);\n        sg.sg_build(v);\n        vector<int>ans;\n        for(auto &q: queries){\n            if(q[0] == 1){\n                if(q[1] == q[2]){\n                    ans.push_back(0);\n                    continue;\n                }\n                ans.push_back(sg.sg_query(q[1] + 1,q[2] - 1));\n            }else{\n                int i = q[1], val = q[2];\n                nums[i] = val;\n                // cout << i << \" \" << val << \"\\n\";\n                // for(auto &i: nums) cout << i << \" \";\n                if(i > 0 and nums[i] > nums[i-1] and i < n-1 and nums[i] > nums[i+1]) sg.sg_update(i,1);\n                else sg.sg_update(i,0);\n                if(i - 1 > 0 and nums[i-1] > nums[i-2] and nums[i-1] > nums[i]) sg.sg_update(i-1,1);\n                else sg.sg_update(i-1,0);\n                if(i + 1 < n-1 and nums[i+1] > nums[i+2] and nums[i+1] > nums[i]) sg.sg_update(i+1,1);\n                else sg.sg_update(i+1,0);\n                \n            }\n        }\n        return ans;\n    }\n};",
    "submit_ts": "1718506888",
    "subm_id": "1289634251"
}