{
    "username": "Raju2004",
    "submission": "class segt {\nprivate:\n    vector<int> st;\n    vector<int> peaks;\n    vector<int> nums;\n    int n;\n\n    int l(int p) { return p << 1; }\n    int r(int p) { return (p << 1) + 1; }\n\n    void construct(int p, int L, int R) {\n        if (L == R) {\n            st[p] = peaks[L];\n        } else {\n            int m = (L + R) / 2;\n            construct(l(p), L, m);\n            construct(r(p), m + 1, R);\n            st[p] = st[l(p)] + st[r(p)];\n        }\n    }\n\n    void udt(int p, int L, int R, int idx) {\n        if (L == R) {\n            st[p] = peaks[idx];\n        } else {\n            int m = (L + R) / 2;\n            if (idx <= m)\n                udt(l(p), L, m, idx);\n            else\n                udt(r(p), m + 1, R, idx);\n            st[p] = st[l(p)] + st[r(p)];\n        }\n    }\n\n    int q(int p, int L, int R, int i, int j) {\n        if (i > R || j < L) return 0;\n        if (L >= i && R <= j) return st[p];\n\n        int m = (L + R) / 2;\n        int left_query = q(l(p), L, m, i, j);\n        int right_query = q(r(p), m + 1, R, i, j);\n        return left_query + right_query;\n    }\n\n    void compute(int idx) {\n        if (idx > 0 && idx < n - 1) {\n            peaks[idx] = (nums[idx] > nums[idx - 1] && nums[idx] > nums[idx + 1]) ? 1 : 0;\n        }\n    }\n\npublic:\n    segt(const vector<int>& initial_nums) {\n        n = initial_nums.size();\n        nums = initial_nums;\n        st.assign(4 * n, 0);\n        peaks.assign(n, 0);\n        for (int i = 1; i < n - 1; ++i) {\n            if (nums[i] > nums[i - 1] && nums[i] > nums[i + 1]) {\n                peaks[i] = 1;\n            }\n        }\n        \n        construct(1, 0, n - 1);\n    }\n\n    void udt(int idx, int val) {\n        nums[idx] = val;\n        if (idx > 0) compute(idx - 1);\n        compute(idx);\n        if (idx < n - 1) compute(idx + 1);\n\n        udt(1, 0, n - 1, idx);\n        if (idx > 0) udt(1, 0, n - 1, idx - 1);\n        if (idx < n - 1) udt(1, 0, n - 1, idx + 1);\n    }\n\n    int cnt(int l, int r) {\n        return q(1, 0, n - 1, l + 1, r - 1);\n    }\n};\n\nclass Solution {\npublic:\n    vector<int> countOfPeaks(vector<int>& nums, vector<vector<int>>& queries) {\n        segt segTree(nums);\n        vector<int> ans;\n\n        for (auto& q : queries) {\n            if (q[0] == 1) {\n                int c = segTree.cnt(q[1], q[2]);\n                ans.push_back(c);\n            } else if (q[0] == 2) {\n                int ind = q[1];\n                int present = q[2];\n                segTree.udt(ind, present);\n            }\n        }\n\n        return ans;\n    }\n};\n",
    "submit_ts": 1718507741.0
}