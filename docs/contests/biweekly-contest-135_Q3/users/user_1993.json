{
    "username": "SunritSingha",
    "submission": "#include <vector>\n#include <unordered_map>\n#include <algorithm>\n#include <cmath>\nusing namespace std;\n\nclass Solution {\npublic:\n    int minChanges(vector<int>& nums, int k) {\n        unordered_map<int, vector<int>> diffMap;\n        vector<int> changeCandidates;\n        int halfSize = nums.size() / 2;\n\n        // Populate the difference map and change candidates\n        for (int i = 0; i < halfSize; ++i) {\n            int left = nums[i];\n            int right = nums[nums.size() - i - 1];\n            int currentDiff = abs(left - right);\n            int maxVal = max({left, right, k - left, k - right});\n            \n            diffMap[currentDiff].push_back(maxVal);\n            changeCandidates.push_back(maxVal);\n        }\n\n        int minChangesRequired = nums.size();\n        sort(changeCandidates.begin(), changeCandidates.end());\n\n        // Evaluate the minimum changes needed for each difference\n        for (const auto& entry : diffMap) {\n            int currentDiff = entry.first;\n            int index = lower_bound(changeCandidates.begin(), changeCandidates.end(), currentDiff) - changeCandidates.begin();\n            int totalChanges = index * 2 + (halfSize - index);\n\n            for (int candidate : entry.second) {\n                if (candidate < currentDiff) {\n                    totalChanges -= 2;\n                } else {\n                    totalChanges -= 1;\n                }\n            }\n\n            minChangesRequired = min(minChangesRequired, totalChanges);\n        }\n\n        return minChangesRequired;\n    }\n};\n",
    "submit_ts": "1721490027",
    "subm_id": "1327470918"
}