{
    "username": "t747",
    "submission": "// code from https://www.geeksforgeeks.org/queries-for-bitwise-and-in-the-index-range-l-r-of-the-given-array/, published before contest \nclass and_range {\npublic:  \n    int prefix_count[32][100001];\n    void find(vector<int>& arr)\n    {\n        int n = arr.size();\n        // Loop for each bit\n        for (int i = 0; i < 32; i++) {\n\n            // Loop to find prefix count\n            prefix_count[i][0] = ((arr[0] >> i) & 1);\n            for (int j = 1; j < n; j++) {\n                prefix_count[i][j] = ((arr[j] >> i) & 1);\n                prefix_count[i][j] += prefix_count[i][j - 1];\n            }\n        }\n    }\n\n    // Function to answer query\n    int query(int l, int r)\n    {\n        // To store the answer\n        int ans = 0;\n\n        // Loop for each bit\n        for (int i = 0; i < 32; i++) {\n            // To store the number of variables\n            // with ith bit set\n            int x;\n            if (l == 0)\n                x = prefix_count[i][r];\n            else\n                x = prefix_count[i][r]\n                    - prefix_count[i][l - 1];\n\n            if (x == r - l + 1)\n                ans = (ans | (1 << i));\n        }\n        return ans;\n    }\n};\n\nclass Solution {\npublic:\n    long long countSubarrays(vector<int>& nums, int k) {\n        and_range ar;\n        long long ans = 0;\n        ar.find(nums);\n        // cout << ar.query(0, 0) << endl;\n        for (int i = 0; i < nums.size(); i++) {\n            if(nums[i] < k) continue;\n            int l = i, r = nums.size()-1;\n            int id = -1, id2 = -1;\n            while (l<=r) {\n                int mid = (l+r)/2;\n                int nd = ar.query(i, mid);\n                if (nd==k) id = mid;\n                if (nd > k) { // too big, continue\n                    l = mid+1;\n                } // too small, widen\n                else r=mid-1;\n            }\n            l = i, r = nums.size()-1;\n            while (l<=r) {\n                int mid = (l+r)/2;\n                int nd = ar.query(i, mid);\n                if (nd==k) id2 = mid;\n                if (nd >= k) {\n                    l = mid+1;\n                }\n                else r = mid-1;\n            }\n            // cout << id << \" \" << id2 << endl;\n            if(id != -1 && id2 != -1) ans += (id2-id+1);\n        }\n        return ans;\n    }\n};\n// and is decreasing ",
    "submit_ts": "1720278863",
    "subm_id": "1311727465"
}