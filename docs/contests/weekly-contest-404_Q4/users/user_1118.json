{
    "username": "_shashank_reddy",
    "submission": "class Solution {\n    public int minimumDiameterAfterMerge(int[][] edges1, int[][] edges2) {\n        int d1=solve(edges1);\n        int d2=solve(edges2);\n        int r1=(d1+1)/2;\n        int r2=(d2+1)/2;\n        return Math.max(Math.max(d1,d2),r1+r2+1);\n    }\n\n    private static int solve(int[][] edges) {\n        int n=edges.length+1;\n        if(n==1)return 0;\n        List<List<Integer>> adj=new ArrayList<>();\n        for(int i=0;i<n;i++){\n            adj.add(new ArrayList<>());\n        }\n        for(int[] edge:edges){\n            adj.get(edge[0]).add(edge[1]);\n            adj.get(edge[1]).add(edge[0]);\n        }\n        int[] l = bfs(0,adj,n);\n        l=bfs(l[0],adj,n);\n        return l[1];\n    }\n\n    private static int[] bfs(int start, List<List<Integer>> adj, int n) {\n        int[] d = new int[n];\n        Arrays.fill(d, -1);\n        d[start] = 0;\n        Queue<Integer> q = new LinkedList<>();\n        q.add(start);\n        int l = start;\n        while (!q.isEmpty()){\n            int node = q.poll();\n            for (int i : adj.get(node)){\n                if (d[i] == -1) {\n                    d[i] = d[node] + 1;\n                    q.add(i);\n                    l = i;\n                }\n            }\n        }\n        return new int[] {l,d[l]}; \n    }\n}",
    "submit_ts": "1719719931",
    "subm_id": "1304454349"
}