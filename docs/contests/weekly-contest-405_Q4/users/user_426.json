{
    "username": "lazyleeds1",
    "submission": "class Node:\n    def __init__(self):\n        self.children = {}\n        self.cost = 1e9\n\nclass Solution:\n    def minimumCost(self, target: str, words: List[str], costs: List[int]) -> int:\n        root = Node()\n        \n        for i, word in enumerate(words):\n            curr = root\n            for char in word:\n                curr = curr.children.setdefault(char, Node())\n            curr.cost = min(curr.cost, costs[i])\n        \n        INF = 1e9\n        n = len(target)\n        \n        dp = [INF for _ in range(n+1)]\n        dp[0] = 0\n        \n        \n        def dfs(i, node, prevcost):\n            # print(i, node.children, node.cost)\n            \n            if node.cost != INF and i <= n:\n                dp[i] = min(dp[i], prevcost + node.cost)\n        \n            if i >= n or target[i] not in node.children:\n                return\n            \n            dfs(i+1, node.children[target[i]], prevcost)\n            \n        \n        # print(root.children)\n        \n        for i in range(n):\n            if dp[i] == INF:\n                continue\n                \n            dfs(i, root, dp[i])\n            \n        # print(dp)\n        return dp[n] if dp[n] != INF else -1\n                \n        '''\n        \"r\"\n        [\"r\",\"r\",\"r\",\"r\"]\n        [1,6,3,3]\n        '''\n            \n            \n            \n            ",
    "submit_ts": "1720321814",
    "subm_id": "1312332993"
}