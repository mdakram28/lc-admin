{
    "username": "DamianSz",
    "submission": "class TrieNode:\n    def __init__(self, val = float('inf')):\n        self.val = val\n        self.transitions = {}\n\n    def insert_word(self, word, i, cost):\n        if i == len(word):\n            self.val = min(self.val, cost)\n            return \n        if word[i] not in self.transitions:\n            self.transitions[word[i]] = TrieNode()\n        self.transitions[word[i]].insert_word(word, i+1, cost)\n\nclass Solution:\n    def minimumCost(self, target: str, words: List[str], costs: List[int]) -> int:\n        # use a trie to optimize looping through, will loop through all forward characters\n\n        head = TrieNode()\n\n        for word, cost in zip(words,costs):\n            head.insert_word(word, 0, cost)\n\n        str_cost = [float('inf')] * (len(target)+1)\n        str_cost[0] = 0\n\n        def dfs(cost, i):\n            if str_cost[i] < cost:\n                return \n            \n        for i in range(len(target)):\n            if str_cost[i] == float('inf'):\n                continue\n\n            curr = head\n\n            for j in range(i, len(target)):\n                ch = target[j]\n                if ch not in curr.transitions:\n                    break\n                curr = curr.transitions[ch]\n                if curr.val != float('inf'):\n                    str_cost[j+1] = min(str_cost[j+1], str_cost[i] + curr.val)\n                \n\n        if str_cost[-1] == float('inf'):\n            return -1\n\n        return str_cost[-1]",
    "submit_ts": "1720322448",
    "subm_id": "1312350197"
}