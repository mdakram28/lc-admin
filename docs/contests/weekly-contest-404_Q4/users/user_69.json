{
    "username": "txingml",
    "submission": "const int MAXN = 1e5 + 10;\nvector<int> edges[MAXN];\nint dp[MAXN];\nint cur;\n\nvoid dfs(int i, int p) {\n    multiset<int> table;\n    for (int nxt : edges[i]) {\n        if (nxt == p) continue;\n        dfs(nxt, i);\n        table.insert(dp[nxt]);\n        if (table.size() == 3) table.erase(table.begin());\n    }\n    if (table.empty()) {\n        return;\n    }\n    dp[i] = *table.rbegin() + 1;\n    cur = max(cur, dp[i]);\n    if (table.size() == 2) {\n        int a = *table.rbegin();\n        int b = *table.begin();\n        cur = max(cur, a + b + 2);\n    }\n}\n\nint solve(const vector<vector<int>>& pairs) {\n    int n = pairs.size() + 1;\n    memset(dp, 0, sizeof(int) * n);\n    for (int i = 0; i < n; i++) {\n        edges[i].clear();\n    }\n    for (auto& pair : pairs) {\n        edges[pair[0]].push_back(pair[1]);\n        edges[pair[1]].push_back(pair[0]);\n    }\n    cur = 0;\n    dfs(0, -1);\n    return cur;   \n}\n\n\nclass Solution {\npublic:\n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n        int a = solve(edges1);\n        int b = solve(edges2);\n        // cout << a << ' ' << b << endl;\n        int tmp = max(a, b);\n        return max((a+1)/2 + (b+1) / 2  + 1, tmp);\n        \n        \n    }\n};",
    "submit_ts": 1719716674.0
}