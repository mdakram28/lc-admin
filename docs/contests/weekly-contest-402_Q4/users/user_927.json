{
    "username": "l00",
    "submission": "class Solution:\n    def countOfPeaks(self, nums: List[int], queries: List[List[int]]) -> List[int]:\n        n = len(nums)\n        m = n + 1\n        if n <= 2: return [0 for a,b,c in queries if a == 1]\n        \n        tree = [0] * m\n\n        def treeChange(root: int, add: int):\n            index = root + 1\n            while index < m:\n                tree[index] = tree[index] + add\n                index += index & -index\n\n        def treeQuery(root: int) -> int:\n            index = root + 1\n            res = 0\n            while index > 0:\n                res += tree[index]\n                index ^= index & -index\n            return res\n\n\n        cnts = [0, 0]\n        for index in range(2, len(nums)):\n            # flag = 1 if nums[index - 2] < nums[index - 1] > nums[index] else  0\n            # cnts.append(cnts[-1] + flag)\n            if nums[index - 2] < nums[index - 1] > nums[index]:\n                treeChange(index, 1)\n        # print(cnts)\n\n        ans = []\n        for a,b,c in queries:\n            if a == 1:\n                if b >= c - 1:\n                    ans.append(0)\n                    continue\n                right = treeQuery(c)\n                left = treeQuery(b + 1)\n                ans.append(right - left)\n            else:\n                # print(\"2\",b,c)\n                if nums[b] == c: continue\n                if b != 0 and b != n - 1:\n                    index = b\n                    flag1 = nums[index - 1] < nums[index] > nums[index + 1]\n                    flag2 = nums[index - 1] < c > nums[index + 1]\n                    # if flag1 == True and flag2 == True: continue\n                    # if flag1 == False and flag2 == False: continue\n                    if flag1 == True and flag2 == False: treeChange(index + 1, -1)\n                    if flag1 == False and flag2 == True: treeChange(index + 1, 1)\n                if b > 1:\n                    index = b - 1\n                    flag1 = nums[index - 1] < nums[index] > nums[index + 1]\n                    flag2 = nums[index - 1] < nums[index] > c\n                    # if flag1 == True and flag2 == True: continue\n                    # if flag1 == False and flag2 == False: continue\n                    if flag1 == True and flag2 == False: treeChange(index + 1, -1)\n                    if flag1 == False and flag2 == True: treeChange(index + 1, 1)\n                if b < n - 2:\n                    index = b + 1\n                    flag1 = nums[index - 1] < nums[index] > nums[index + 1]\n                    flag2 = c < nums[index] > nums[index + 1]\n                    # if flag1 == True and flag2 == True: continue\n                    # if flag1 == False and flag2 == False: continue\n                    if flag1 == True and flag2 == False: treeChange(index + 1, -1)\n                    if flag1 == False and flag2 == True: treeChange(index + 1, 1)\n                nums[b] = c\n        # print(nums)\n        return ans",
    "submit_ts": "1718508813",
    "subm_id": "539789462"
}