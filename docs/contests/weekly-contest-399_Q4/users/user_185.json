{
    "username": "thesycat",
    "submission": "# Negative -> never select\n\ndef get(nums, lo, hi):\n    if hi < lo:\n        return 0\n    nums = nums[lo:hi+1]\n\n    sel = [None for i in range(len(nums))]\n    nosel = [None for i in range(len(nums))]\n\n    for i in range(len(nums)):\n        value = max(nums[i], 0)\n        nosel[i] = max(nosel[i-1] if i > 0 else 0, sel[i-1] if i > 0 else 0)\n        sel[i] = nums[i] + (nosel[i-1] if i>0 else 0)\n    \n    return max(sel[-1], nosel[-1])\n        \n\nclass ST:\n    def __init__(self, nums, lo, hi):\n        self.lo = lo\n        self.hi = hi\n            \n        self.ln = self.hi - self.lo + 1\n        \n\n        if self.ln >= 8:\n            self.mid = (self.hi+self.lo)//2\n            mid = self.mid\n            self.left = ST(nums, lo, mid)\n            self.right = ST(nums, mid+1, hi)\n        \n            self.max_subsum = {\n                (ll,hh) : max(self.left.max_subsum[(ll, mid)] + self.right.max_subsum[(self.mid+2, hh)], \n                                         self.left.max_subsum[(ll, mid-1)] + self.right.max_subsum[(self.mid+1, hh)]) for ll in (self.lo, self.lo+1) for hh in (self.hi, self.hi-1)\n            }\n        \n        else:\n            self.max_subsum = {(ll, hh) :get(nums,ll,hh) for ll in (lo, lo+1) for hh in (hi, hi-1)}\n        \n    def update(self, pos, x, nums): # POS HAS AN UPDATED VALUE!\n        if pos < self.lo or pos > self.hi:\n            return\n        if self.ln >= 8:\n            self.left.update(pos, x, nums)\n            self.right.update(pos, x, nums)\n            mid = self.mid\n            self.max_subsum = {\n                (ll,hh) : max(self.left.max_subsum[(ll, mid)] + self.right.max_subsum[(self.mid+2, hh)], \n                                         self.left.max_subsum[(ll, mid-1)] + self.right.max_subsum[(self.mid+1, hh)]) for ll in (self.lo, self.lo+1) for hh in (self.hi, self.hi-1)\n            }\n        \n        else:\n            \n            self.max_subsum = {(ll, hh) :get(nums,ll,hh) for ll in (self.lo, self.lo+1) for hh in (self.hi, self.hi-1)}\n       \n    \n    def get_max(self):\n        return self.max_subsum[(self.lo, self.hi)]\n\nclass Solution:\n    def maximumSumSubsequence(self, nums: List[int], queries: List[List[int]]) -> int:\n        nums = [max(0, n) for n in nums]\n        \n        st = ST(nums, 0, len(nums) - 1)\n   \n        \n        \n        out = 0\n        for pos, x in queries:\n            nums[pos] = x\n            \n            st.update(pos, x, nums)\n            out += st.get_max()\n            out %= int(1e9+7)\n        return out\n           \n        \n        ",
    "submit_ts": "1716695888",
    "subm_id": "1268145459"
}