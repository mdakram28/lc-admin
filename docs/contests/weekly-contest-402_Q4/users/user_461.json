{
    "username": "harsh_reality_",
    "submission": "class PeakSegmentTree {\n    int length;\n    vector<int> elements, seg_tree;\n\n    bool check_peak(int index) {\n        if (index == 0 || index == length - 1) return false;\n        return elements[index] > elements[index - 1] && elements[index] > elements[index + 1];\n    }\n\n    void build_tree(int node, int start, int end) {\n        if (start == end) {\n            seg_tree[node] = check_peak(start) ? 1 : 0;\n        } else {\n            int mid = (start + end) / 2;\n            build_tree(2 * node + 1, start, mid);\n            build_tree(2 * node + 2, mid + 1, end);\n            seg_tree[node] = seg_tree[2 * node + 1] + seg_tree[2 * node + 2];\n        }\n    }\n\n    void update_tree(int node, int start, int end, int idx) {\n        if (start == end) {\n            seg_tree[node] = check_peak(start) ? 1 : 0;\n        } else {\n            int mid = (start + end) / 2;\n            if (start <= idx && idx <= mid) {\n                update_tree(2 * node + 1, start, mid, idx);\n            } else {\n                update_tree(2 * node + 2, mid + 1, end, idx);\n            }\n            seg_tree[node] = seg_tree[2 * node + 1] + seg_tree[2 * node + 2];\n        }\n    }\n\n    int query_tree(int node, int start, int end, int L, int R) {\n        if (R < start || end < L) return 0;\n        if (L <= start && end <= R) return seg_tree[node];\n        int mid = (start + end) / 2;\n        int left_result = query_tree(2 * node + 1, start, mid, L, R);\n        int right_result = query_tree(2 * node + 2, mid + 1, end, L, R);\n        return left_result + right_result;\n    }\npublic:\n    PeakSegmentTree(vector<int>& nums) : length(nums.size()), elements(nums) {\n        seg_tree.resize(4 * length, 0);\n        build_tree(0, 0, length - 1);\n    }\n\n    void modify_value(int idx, int value) {\n        elements[idx] = value;\n        for (int i = max(0, idx - 1); i <= min(length - 1, idx + 1); ++i)\n            update_tree(0, 0, length - 1, i);\n    }\n\n    int peak_count(int L, int R) {\n        return query_tree(0, 0, length - 1, max(L + 1, 1), min(R - 1, length - 2));\n    }\n};\n\nclass Solution {\npublic:\n    vector<int> countOfPeaks(vector<int>& nums, vector<vector<int>>& queries) {\n        PeakSegmentTree peak_tree(nums);\n        vector<int> output;\n        for (const auto& query : queries) {\n            if (query[0] == 1) \n                output.push_back(peak_tree.peak_count(query[1], query[2]));\n            else if (query[0] == 2) \n                peak_tree.modify_value(query[1], query[2]);\n        }\n        return output;\n    }\n};\n",
    "submit_ts": 1718507912.0
}