{
    "username": "maybk",
    "submission": "class Solution {\npublic:\n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n        int n = edges1.size() + 1, m = edges2.size() + 1;\n        auto dist = [&] (int s, int n, vector<vector<int>> &adj) {\n            vector<int> d(n, -1);\n            queue<int> q;\n            q.push(s);\n            d[s] = 0;\n            while(!q.empty()) {\n                int u = q.front(); q.pop();\n                for(auto &v : adj[u]) {\n                    if(d[v] == -1) {\n                        d[v] = d[u] + 1;\n                        q.push(v);\n                    }\n                }\n            }\n            return d;\n        };\n        auto diameter = [&] (int n, vector<vector<int>> &adj) {\n            auto d1 = dist(0, n, adj);\n            int dia1 = max_element(d1.begin(), d1.end()) - d1.begin();\n            auto d2 = dist(dia1, n, adj);\n            return *max_element(d2.begin(), d2.end()) + 1;\n        };\n        vector<vector<int>> adj1(n), adj2(m);\n        for(auto &x : edges1) {\n            adj1[x[0]].push_back(x[1]);\n            adj1[x[1]].push_back(x[0]);\n        }\n        for(auto &x : edges2) {\n            adj2[x[0]].push_back(x[1]);\n            adj2[x[1]].push_back(x[0]);\n        }\n        int dia1 = diameter(n, adj1), dia2 = diameter(m, adj2);\n        int ddia1 = (dia1 + 1) / 2 + (dia1 % 2 == 0);\n        int ddia2 = (dia2 + 1) / 2 + (dia2 % 2 == 0);\n        return max({dia1 - 1, dia2 - 1, ddia1 + ddia2 - 1});\n    }\n};",
    "submit_ts": "1719718328",
    "subm_id": "1304414449"
}