{
    "username": "AtulKeshari",
    "submission": "class Solution {\npublic:\n    const int MOD = 1e9 + 7;\n\n    int numberOfPermutations(int n, vector<vector<int>>& reqs) {\n        int maxInv = n * (n - 1) / 2;\n        vector<vector<int>> dp1 = initDP(n, maxInv);\n        vector<int> cnt = getCounts(n, reqs);\n        vector<vector<int>> dp2 = processDP(n, maxInv, cnt, dp1);\n        return calculateResult(n, maxInv, dp2);\n    }\n\nprivate:\n    vector<vector<int>> initDP(int n, int maxInv) {\n        vector<vector<int>> dp(n + 1, vector<int>(maxInv + 1, 0));\n        dp[0][0] = 1;\n\n        for (int len = 1; len <= n; ++len) {\n            vector<int> prefixSum(maxInv + 1, 0);\n            for (int inv = 0; inv <= maxInv; ++inv) {\n                prefixSum[inv] = dp[len - 1][inv];\n                if (inv > 0) {\n                    prefixSum[inv] = (prefixSum[inv] + prefixSum[inv - 1]) % MOD;\n                }\n            }\n\n            for (int inv = 0; inv <= maxInv; ++inv) {\n                dp[len][inv] = prefixSum[inv];\n                if (inv >= len) {\n                    dp[len][inv] = (dp[len][inv] - prefixSum[inv - len] + MOD) % MOD;\n                }\n            }\n        }\n\n        return dp;\n    }\n\n    vector<int> getCounts(int n, vector<vector<int>>& reqs) {\n        vector<int> cnt(n, -1);\n        for (const auto& req : reqs) {\n            cnt[req[0]] = req[1];\n        }\n        return cnt;\n    }\n\n    vector<vector<int>> processDP(int n, int maxInv, vector<int>& cnt, vector<vector<int>>& dp1) {\n        vector<vector<int>> dp2(n + 1, vector<int>(maxInv + 1, 0));\n        dp2[0][0] = 1;\n\n        for (int len = 1; len <= n; ++len) {\n            vector<int> prefixSum(maxInv + 1, 0);\n            for (int inv = 0; inv <= maxInv; ++inv) {\n                prefixSum[inv] = dp2[len - 1][inv];\n                if (inv > 0) {\n                    prefixSum[inv] = (prefixSum[inv] + prefixSum[inv - 1]) % MOD;\n                }\n            }\n\n            for (int inv = 0; inv <= maxInv; ++inv) {\n                dp2[len][inv] = prefixSum[inv];\n                if (inv >= len) {\n                    dp2[len][inv] = (dp2[len][inv] - prefixSum[inv - len] + MOD) % MOD;\n                }\n            }\n\n            if (cnt[len - 1] != -1) {\n                for (int inv = 0; inv <= maxInv; ++inv) {\n                    if (inv != cnt[len - 1]) {\n                        dp2[len][inv] = 0;\n                    }\n                }\n            }\n        }\n\n        return dp2;\n    }\n\n    int calculateResult(int n, int maxInv, vector<vector<int>>& dp2) {\n        int result = 0;\n        for (int inv = 0; inv <= maxInv; ++inv) {\n            result = (result + dp2[n][inv]) % MOD;\n        }\n        return result;\n    }\n};",
    "submit_ts": "1719067956",
    "subm_id": "1296747382"
}