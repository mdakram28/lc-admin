{
    "username": "user2349xl",
    "submission": "class SEGT {\npublic:\n    unordered_map<int, int> t;\n    int len = 50001;\n\n    SEGT () {}\n\n    void add(int p, int val) {\n        t[p + len] += val;\n        for (p += len; p > 1; p >>= 1) {\n            t[p>>1] = t[p] + t[p^1];\n        }\n    }\n\n    void modify(int p, int value) {\n        t[p + len] = value;\n        for (p += len; p > 1; p >>= 1) {\n            t[p>>1] = max(t[p], t[p^1]);\n        }\n    }\n\n    int query(int l, int r) {  // sum on interval [l, r)\n        int res = 0;\n        for (l += len, r += len; l < r; l >>= 1, r >>= 1) {\n            if (l & 1) \n                res = max(res, t[l++]);\n            if (r & 1) \n                res = max(res, t[--r]);\n        }\n        return res;\n    }\n};\n\nclass Solution {\npublic:\n    int MX = 50001;\n    \n    // 1, 2, 3, 4, 5,  .... 6\n    //       b\n    \n    //         -3 -3 -3\n    // 1, 2, 3, 1, 2, 3 \n    \n    vector<bool> getResults(vector<vector<int>>& queries) {        \n        int q = queries.size();\n        vector<bool> res;\n        \n        SEGT tree;\n        \n        set<int> obs;\n        \n        obs.insert(0);\n        obs.insert(MX);\n        \n        tree.modify(0, MX - 0 + 1);\n        \n        for (int i = 0; i < q; i++) {\n            int t = queries[i][0];\n            \n            if (t == 1) {\n                int ob = queries[i][1];\n                \n                if (obs.find(ob) != obs.end()) continue;\n                \n                auto f = obs.upper_bound(ob);\n                \n                int r = *f;\n                \n                f = prev(f);\n                int l = *f;\n                \n                // cout << l << \" set \"<< ob - l<< endl;\n                // cout << ob << \" set \" <<  r - ob << endl;\n                \n                tree.modify(l, ob - l);\n                tree.modify(ob, r - ob);\n                \n                obs.insert(ob);\n                \n            } else {\n                int ob = queries[i][1];\n                int sz = queries[i][2];\n                \n                if (ob < sz) {\n                    res.push_back(false); continue;\n                }\n                \n                int mx = tree.query(0, ob - sz + 1);\n                \n                // cout << \"query \"<< 0 << \"~\" << ob - sz << \" is \" << mx << endl;\n                \n                if (mx < sz) {\n                    res.push_back(false);\n                } else {\n                    res.push_back(true);\n                }\n                \n            }\n        }\n        \n        return res;\n    }\n};\n\n// [[1,1],[2,4,3]] true",
    "submit_ts": 1716651895.0
}