{
    "username": "tmimotw",
    "submission": "class Solution {\n  public int minimumSum(int[][] grid) {\n    var result = Integer.MAX_VALUE;\n    for (int i = 0; i < grid.length - 2; i++) {\n      for (int j = i + 1; j < grid.length; j++) {\n        result = Math.min(result, minimumAreaSolve(grid, 0, i, 0, grid[0].length - 1) +\n            minimumAreaSolve(grid, i + 1, j, 0, grid[0].length - 1) +\n            minimumAreaSolve(grid, j + 1, grid.length - 1, 0, grid[0].length - 1));\n      }\n    }\n\n    for (int i = 0; i < grid[0].length - 2; i++) {\n      for (int j = i + 1; j < grid[0].length; j++) {\n        result = Math.min(result, minimumAreaSolve(grid, 0, grid.length - 1, 0, i) +\n            minimumAreaSolve(grid, 0, grid.length - 1, i + 1, j) +\n            minimumAreaSolve(grid, 0, grid.length - 1, j + 1, grid[0].length - 1));\n      }\n    }\n\n    for (int row = 0; row < grid.length - 1; row++) {\n      for (int col = 0; col < grid[0].length - 1; col++) {\n        result = Math.min(result, minimumAreaSolve(grid, 0, row, 0, grid[0].length - 1) +\n            minimumAreaSolve(grid, row + 1, grid.length - 1, 0, col) +\n            minimumAreaSolve(grid, row + 1, grid.length - 1, col + 1, grid[0].length - 1));\n\n        result = Math.min(result, minimumAreaSolve(grid, 0, row, 0, col) +\n            minimumAreaSolve(grid, 0, row, col + 1, grid[0].length - 1) +\n            minimumAreaSolve(grid, row + 1, grid.length - 1, 0, grid[0].length - 1));\n\n        result = Math.min(result, minimumAreaSolve(grid, 0, grid.length - 1, 0, col) +\n            minimumAreaSolve(grid, 0, row, col + 1, grid[0].length - 1) +\n            minimumAreaSolve(grid, row + 1, grid.length - 1, col + 1, grid[0].length - 1));\n\n        result = Math.min(result, minimumAreaSolve(grid, 0, row, 0, col) +\n            minimumAreaSolve(grid, row + 1, grid.length - 1, 0, col) +\n            minimumAreaSolve(grid, 0, grid.length - 1, col + 1, grid[0].length - 1));\n      }\n    }\n    return result;\n  }\n\n  public int minimumAreaSolve(int[][] grid, int beginRow, int endRow, int beginCol, int endCol) {\n    var top = grid.length - 1;\n    var bottom = 0;\n    var left = grid[0].length - 1;\n    var right = 0;\n    // var isFound = false;\n    for (int i = beginRow; i <= endRow; i++) {\n      for (int j = beginCol; j <= endCol; j++) {\n        if (grid[i][j] == 1) {\n          top = Math.min(top, i);\n          bottom = Math.max(bottom, i);\n          left = Math.min(left, j);\n          right = Math.max(right, j);\n          //isFound = true;\n        }\n      }\n    }\n    // if (!isFound)\n    // return 0;\n    return (bottom - top + 1) * (right - left + 1);\n  }\n}",
    "submit_ts": 1719114040.0
}