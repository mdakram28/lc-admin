{
    "username": "nemesis_7",
    "submission": "struct Node {\n    Node* links[26];\n    int cost = 1e9;\n    bool flag = false;\n    \n    bool containKey(char ch) {\n        return (links[ch - 'a'] != NULL);\n    }\n    \n    void put(char ch, Node* node) {\n        links[ch - 'a'] = node;\n    }\n    \n    Node* get(char ch) {\n        return links[ch - 'a'];\n    }\n    \n    int getCost() {\n        return cost;\n    }\n    \n    void setCost(int val) {\n        cost = min(cost, val);\n    }\n    \n    void setEnd() {\n        flag = true;\n    }\n    \n    bool isEnd() {\n        return flag;\n    }\n};\n\nclass Trie {\n    Node* root;\n    \npublic:\n    Trie() {\n        root = new Node();\n    }\n    \n    void insert(string& word, int cost) {\n        Node* node = root;\n        for (char ch : word) {\n            if (!node->containKey(ch)) {\n                node->put(ch, new Node());\n            }\n            node = node->get(ch);\n        }\n        node->setEnd();\n        node->setCost(cost);\n    }\n    \n    Node* getRoot() {\n        return root;\n    }\n};\n\nclass Solution {\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        Trie* trie = new Trie();\n        for (int i = 0; i < words.size(); i++) {\n            trie->insert(words[i], costs[i]);\n        }\n        \n        int n = target.size();\n        vector<int> dp(n + 1, INT_MAX);\n        dp[0] = 0;\n        \n        for (int i = 0; i < n; ++i) {\n            if (dp[i] == INT_MAX) continue;\n            \n            Node* node = trie->getRoot();\n            for (int j = i; j < n; ++j) {\n                if (!node->containKey(target[j])) break;\n                \n                node = node->get(target[j]);\n                if (node->isEnd()) {\n                    dp[j + 1] = min(dp[j + 1], dp[i] + node->getCost());\n                }\n            }\n        }\n        \n        return dp[n] == INT_MAX ? -1 : dp[n];\n    }\n};",
    "submit_ts": "1720322696",
    "subm_id": "1312356720"
}