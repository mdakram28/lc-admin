{
    "username": "sarthakkapoor444",
    "submission": "class SegmentTree:\n    def __init__(self, n):\n        self.n = n\n        self.tree = [0] * (4 * n)\n\n    def build(self, peaks, start, end, node):\n        if start == end:\n            self.tree[node] = peaks[start]\n        else:\n            mid = (start + end) // 2\n            self.build(peaks, start, mid, 2 * node + 1)\n            self.build(peaks, mid + 1, end, 2 * node + 2)\n            self.tree[node] = self.tree[2 * node + 1] + self.tree[2 * node + 2]\n\n    def update(self, start, end, node, idx, value):\n        if start == end:\n            self.tree[node] = value\n        else:\n            mid = (start + end) // 2\n            if idx <= mid:\n                self.update(start, mid, 2 * node + 1, idx, value)\n            else:\n                self.update(mid + 1, end, 2 * node + 2, idx, value)\n            self.tree[node] = self.tree[2 * node + 1] + self.tree[2 * node + 2]\n\n    def query(self, start, end, node, l, r):\n        if r < start or l > end:\n            return 0\n        if l <= start and end <= r:\n            return self.tree[node]\n        mid = (start + end) // 2\n        left = self.query(start, mid, 2 * node + 1, l, r)\n        right = self.query(mid + 1, end, 2 * node + 2, l, r)\n        return left + right\n\ndef is_peak(nums, i):\n    if i <= 0 or i >= len(nums) - 1:\n        return False\n    return nums[i] > nums[i - 1] and nums[i] > nums[i + 1]\n\ndef process_queries(nums, queries):\n    n = len(nums)\n    peaks = [1 if is_peak(nums, i) else 0 for i in range(n)]\n    seg_tree = SegmentTree(n)\n    seg_tree.build(peaks, 0, n - 1, 0)\n    result = []\n\n    for query in queries:\n        if query[0] == 1:\n            _, li, ri = query\n            if li == ri:\n                result.append(0)\n            else:\n                result.append(seg_tree.query(0, n - 1, 0, li + 1, ri - 1))\n        elif query[0] == 2:\n            _, indexi, vali = query\n            nums[indexi] = vali\n            for i in [indexi - 1, indexi, indexi + 1]:\n                if 0 < i < n - 1:\n                    seg_tree.update(0, n - 1, 0, i, 1 if is_peak(nums, i) else 0)\n    return result\n\nclass Solution(object):\n    def countOfPeaks(self, nums, queries):\n        \"\"\"\n        :type nums: List[int]\n        :type queries: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        return process_queries(nums, queries)\n        ",
    "submit_ts": "1718508735",
    "subm_id": "1289689705"
}