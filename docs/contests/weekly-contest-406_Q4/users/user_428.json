{
    "username": "weiguanchong123",
    "submission": "class Solution {\npublic:\n    long long minimumCost(int m, int n, vector<int>& horizontalCut, vector<int>& verticalCut) {\n        vector<vector<int>> cuts; // horizontal\n\n        for (int i = 0; i < horizontalCut.size(); ++i) {\n            cuts.push_back({horizontalCut[i], 0, i});\n        }\n\n        for (int i = 0; i < verticalCut.size(); ++i) {\n            cuts.push_back({verticalCut[i], 1, i});\n        }\n\n        sort(cuts.begin(), cuts.end(), greater<vector<int>>());\n\n        long long vertiCuts = 1;\n        long long horiCuts = 1;\n\n        long long res = 0;\n\n        for (auto& cut : cuts) {\n            if (cut[1] == 0) {\n                ++horiCuts;\n                res += vertiCuts * cut[0];\n            } else {\n                ++vertiCuts;\n                res += horiCuts * cut[0];\n            }\n        }\n\n        return res;\n    }\n};",
    "submit_ts": "1720925213",
    "subm_id": "1320246942"
}