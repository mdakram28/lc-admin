{
    "username": "utkarshraj_20",
    "submission": "class SegmentTree {\nprivate:\n    std::vector<int> tree, lazy;\n    std::vector<bool> hasLazy;\n    int n;\n\n    void build(const std::vector<int>& arr, int node, int start, int end) {\n        if (start == end) {\n            tree[node] = arr[start];\n            return;\n        }\n        int mid = (start + end) / 2;\n        build(arr, 2 * node, start, mid);\n        build(arr, 2 * node + 1, mid + 1, end);\n        tree[node] = tree[2 * node] + tree[2 * node + 1];\n    }\n\n    void propagate(int node, int start, int end) {\n        if (hasLazy[node]) {\n            tree[node] = (end - start + 1) * lazy[node];\n            if (start != end) {\n                lazy[2 * node] = lazy[2 * node + 1] = lazy[node];\n                hasLazy[2 * node] = hasLazy[2 * node + 1] = true;\n            }\n            hasLazy[node] = false;\n        }\n    }\n\n    void updateRange(int node, int start, int end, int l, int r, int val) {\n        propagate(node, start, end);\n        if (start > r || end < l) return;\n        if (l <= start && end <= r) {\n            tree[node] = (end - start + 1) * val;\n            if (start != end) {\n                lazy[2 * node] = lazy[2 * node + 1] = val;\n                hasLazy[2 * node] = hasLazy[2 * node + 1] = true;\n            }\n            return;\n        }\n        int mid = (start + end) / 2;\n        updateRange(2 * node, start, mid, l, r, val);\n        updateRange(2 * node + 1, mid + 1, end, l, r, val);\n        tree[node] = tree[2 * node] + tree[2 * node + 1];\n    }\n\n    int querySum(int node, int start, int end, int l, int r) {\n        propagate(node, start, end);\n        if (start > r || end < l) return 0;\n        if (l <= start && end <= r) return tree[node];\n        int mid = (start + end) / 2;\n        return querySum(2 * node, start, mid, l, r) + \n               querySum(2 * node + 1, mid + 1, end, l, r);\n    }\n\npublic:\n    SegmentTree(const std::vector<int>& arr) {\n        n = arr.size();\n        tree.resize(4 * n);\n        lazy.resize(4 * n);\n        hasLazy.resize(4 * n, false);\n        build(arr, 1, 0, n - 1);\n    }\n\n    void update(int l, int r, int val) {\n        updateRange(1, 0, n - 1, l, r, val);\n    }\n\n    int query(int l, int r) {\n        return querySum(1, 0, n - 1, l, r);\n    }\n};\n\n\nclass Solution {\npublic:\n    vector<int> shortestDistanceAfterQueries(int n, vector<vector<int>>& queries) {\n        int q = queries.size() , i = 0 ;\n        vector<int> Q, dis(n-1,1) ;\n        \n        SegmentTree sg(dis) ;\n        \n//         cout << sg.query(0,n-2) << \"\\n\" ;\n        \n//         cout << q << \" \" ;\n        \n        while(q--){\n            int u = queries[i][0] , v = queries[i][1] ;\n            \n            cout << u << \" \" << v-2 << \"\\n\" ;\n            \n            sg.update( u , v-2 , 0 ) ;\n            \n            Q.push_back(sg.query(0,n-2)) ;\n            \n            i++ ;\n        }\n        cout << Q.size() << \"\\n\" ;\n        return Q ;\n        \n    }\n};",
    "submit_ts": "1722743143",
    "subm_id": "1343785359"
}