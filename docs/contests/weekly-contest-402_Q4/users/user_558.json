{
    "username": "nguyenchicuong",
    "submission": "class SegmentTree:\n    def __init__(self, data):\n        self.n = len(data)\n        self.tree = [0] * (4 * self.n)\n        self.build(data, 0, 0, self.n - 1)\n\n    def build(self, data, node, start, end):\n        if start == end:\n            self.tree[node] = data[start]\n        else:\n            mid = (start + end) // 2\n            left_child = 2 * node + 1\n            right_child = 2 * node + 2\n            self.build(data, left_child, start, mid)\n            self.build(data, right_child, mid + 1, end)\n            self.tree[node] = self.tree[left_child] + self.tree[right_child]\n\n    def update(self, idx, val, node, start, end):\n        if start == end:\n            self.tree[node] = val\n        else:\n            mid = (start + end) // 2\n            left_child = 2 * node + 1\n            right_child = 2 * node + 2\n            if start <= idx <= mid:\n                self.update(idx, val, left_child, start, mid)\n            else:\n                self.update(idx, val, right_child, mid + 1, end)\n            self.tree[node] = self.tree[left_child] + self.tree[right_child]\n\n    def query(self, L, R, node, start, end):\n        if R < start or L > end:\n            return 0\n        if L <= start and end <= R:\n            return self.tree[node]\n        mid = (start + end) // 2\n        left_child = 2 * node + 1\n        right_child = 2 * node + 2\n        left_sum = self.query(L, R, left_child, start, mid)\n        right_sum = self.query(L, R, right_child, mid + 1, end)\n        return left_sum + right_sum\n\n    def update_value(self, idx, val):\n        self.update(idx, val, 0, 0, self.n - 1)\n\n    def range_query(self, L, R):\n        return self.query(L, R, 0, 0, self.n - 1)\n\nclass Solution:\n    def countOfPeaks(self, nums: List[int], queries: List[List[int]]) -> List[int]:\n        n = len(nums)\n        f = [0] * n\n        for i in range(1, n-1):\n            if nums[i] > nums[i-1] and nums[i] > nums[i+1]:\n                f[i] = 1\n        seg_tree = SegmentTree(f)\n        ans = []\n        for i, u, v in queries:\n            if i == 1:\n                # print(i, u, v, nums, f)\n                ans.append(seg_tree.range_query(u+1, v-1))\n            else:\n                nums[u] = v\n                for j in range(u-1, u+2, 1):\n                    # print(j)\n                    if 0 < j < n-1:\n                        current_v = f[j]\n                        new_v = 0\n                        if nums[j-1] < nums[j] and nums[j] > nums[j+1]:\n                            new_v = 1\n                        \n                        if new_v != current_v:\n                            f[j] = new_v\n                            seg_tree.update_value(j, new_v)\n                            \n                #         print(j, current_v, new_v)\n                # print(i, u, v, nums, f)\n        return ans\n\"\"\"\n[9,9,7,7]\n[[1,1,2],[1,2,3],[2,0,6],[2,2,3],[2,0,9],[2,2,8],[1,0,2]]\n\n[0,0,0]\n\"\"\"                    ",
    "submit_ts": 1718507908.0
}