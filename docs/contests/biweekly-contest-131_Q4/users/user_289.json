{
    "username": "time-v5",
    "submission": "class Solution {\n\n     public List<Boolean> getResults(int[][] queries) {\n        List<Boolean> ans = new ArrayList<>();\n        SegTree tree = new SegTree(Math.min(50000, queries.length * 3 + 1));\n        for (int[] q : queries) {\n            if (q[0] == 1) {\n                tree.update(q[1]);\n            } else {\n                ans.add(tree.query(0, q[1]) >= q[2]);\n            }\n        }\n        return ans;\n    }\n\n    public class SegTree {\n        private int[][] info;\n        private int[] max;\n        private int[] pre;\n        private int[] suf;\n        private boolean[] lp;\n        private boolean[] rp;\n        private int[] len;\n        private int N;\n\n        public SegTree(int n) {\n            N = n;\n            info = new int[N << 2][];\n            build(1, N, 1);\n        }\n\n        private void build(int l, int r, int i) {\n            if (l == r) {\n                info[i] = new int[]{1, 1, 1, 0, 0, 1};\n                return;\n            }\n            int m = (l + r) >> 1;\n            build(l, m, i << 1);\n            build(m + 1, r, i << 1 | 1);\n            info[i] = up(info[i << 1], info[i << 1 | 1]);\n        }\n\n        private int[] up(int[] left, int[] right) {\n            return new int[]{\n                    Math.max(Math.max(left[0], right[0]), left[4] == 0 && right[3] == 0 ? left[2] + right[1] : 0),\n                    left[1] == left[5] && right[3] == 0 ? left[1] + right[1] : left[1],\n                    right[2] == right[5] && left[4] == 0 ? right[2] + left[2] : right[2],\n                    left[3],\n                    right[4],\n                    left[5] + right[5]\n            };\n        }\n\n        public void update(int index) {\n            update(index + 1, 1, N, 1);\n        }\n\n        private void update(int idx, int l, int r, int i) {\n            if (l == r) {\n                info[i] = new int[]{0, 0, 0, 1, 1, 1};\n                return;\n            }\n            int m = (l + r) >> 1;\n            if (idx <= m) {\n                update(idx, l, m, i << 1);\n            } else {\n                update(idx, m + 1, r, i << 1 | 1);\n            }\n            info[i] = up(info[i << 1], info[i << 1 | 1]);\n        }\n\n        public int query(int left, int right) {\n            if (left == right) {\n                return 0;\n            }\n            if (right - left == 1) {\n                return 1;\n            }\n            int[] q = query(left + 1, right + 1, 1, N, 1);\n            if (q[0] == q[5]) {\n                return q[0] - 1;\n            }\n            int[] mid = query(left + 2, right, 1, N, 1);\n            if (q[0] > mid[0]) {\n                return q[0];\n            } else {\n                return q[0] + 1;\n            }\n        }\n\n        private int[] query(int L, int R, int l, int r, int i) {\n            if (L <= l && r <= R) {\n                return info[i];\n            }\n            int m = (l + r) >> 1;\n            if (R <= m) {\n                return query(L, R, l, m, i << 1);\n            }\n            if (L > m) {\n                return query(L, R, m + 1, r, i << 1 | 1);\n            }\n            return up(query(L, R, l, m, i << 1), query(L, R, m + 1, r, i << 1 | 1));\n        }\n\n\n    }\n}",
    "submit_ts": "1716651523",
    "subm_id": "534775415"
}