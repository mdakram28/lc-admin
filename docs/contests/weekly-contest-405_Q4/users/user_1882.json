{
    "username": "PILKHN2003",
    "submission": "class Node {\npublic:\n    map<char,Node*> child;\n    vector<pair<int,int>> v;\n};\n\nclass Trie {\npublic:\n    Node* root;\n\n    Trie() {\n        root = new Node();\n    }\n\n    void insert(string word, int index, int cost) {\n        Node* node = root;\n        for(int i=0;i<word.size();i++) {\n            if (!node->child.count(word[i])) {\n                node->child[word[i]] = new Node();\n            }\n            node = node->child[word[i]];\n        }\n        node->v.push_back({index, cost});\n    }\n};\n\nclass Solution {\npublic:\n    int  minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int n = target.size();\n        vector<int> dp(n + 1, INT_MAX);\n        dp[0] = 0;\n\n        Trie t;\n        for (int i = 0; i < words.size(); ++i) {\n            t.insert(words[i], i, costs[i]);\n        }\n\n        for (int i = 0; i < n; ++i) {\n            if (dp[i] == INT_MAX)continue;\n\n            Node* node = t.root;\n            for (int j = i; j < n; ++j) {\n                if (!node->child.count(target[j])) {\n                    break;\n                }\n                node = node->child[target[j]];\n                for(auto it : node->v) {\n                    int len = words[it.first].size();\n                    if (i+len<=n) {\n                        dp[i+len] = min(dp[i+len], dp[i]+it.second);\n                    }\n                }\n            }\n        }\n\n        return dp[n] == INT_MAX? -1 : dp[n];\n    }\n};",
    "submit_ts": "1720323664",
    "subm_id": "1312381075"
}