{
    "username": "\u5c71\u6b62\u5ddd\u884c",
    "submission": "func maximumValueSum(board [][]int) int64 {\n\tm, n := len(board), len(board[0])\n\tbestPerRow := make([][][2]int, m)\n\n\t// Step 1: Find the top 3 values in each row\n\tfor row := 0; row < m; row++ {\n\t\ttop3InRow := make([][2]int, n)\n\t\tfor col := 0; col < n; col++ {\n\t\t\ttop3InRow[col] = [2]int{board[row][col], col}\n\t\t}\n\t\tsort.Slice(top3InRow, func(i, j int) bool {\n\t\t\treturn top3InRow[i][0] > top3InRow[j][0]\n\t\t})\n\t\tif len(top3InRow) > 3 {\n\t\t\ttop3InRow = top3InRow[:3]\n\t\t}\n\t\tbestPerRow[row] = top3InRow\n\t}\n\n\tmaxValue := int64(math.MinInt64)\n\n\t// Step 2: Check combinations of 3 rows\n\tfor i := 0; i < m; i++ {\n\t\tfor j := i + 1; j < m; j++ {\n\t\t\tfor k := j + 1; k < m; k++ {\n\t\t\t\tfor a := 0; a < 3; a++ {\n\t\t\t\t\tfor b := 0; b < 3; b++ {\n\t\t\t\t\t\tif bestPerRow[i][a][1] == bestPerRow[j][b][1] {\n\t\t\t\t\t\t\tcontinue\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor c := 0; c < 3; c++ {\n\t\t\t\t\t\t\tif bestPerRow[i][a][1] == bestPerRow[k][c][1] || bestPerRow[j][b][1] == bestPerRow[k][c][1] {\n\t\t\t\t\t\t\t\tcontinue\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tcurrentValue := int64(bestPerRow[i][a][0] + bestPerRow[j][b][0] + bestPerRow[k][c][0])\n\t\t\t\t\t\t\tif currentValue > maxValue {\n\t\t\t\t\t\t\t\tmaxValue = currentValue\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn maxValue\n}\n",
    "submit_ts": "1723908464",
    "subm_id": "556331089"
}