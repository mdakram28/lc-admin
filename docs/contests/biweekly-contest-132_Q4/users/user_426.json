{
    "username": "user1084vL",
    "submission": "class Solution(object):\n    def maxlen(self,nums,i,steps,k,lengths):\n        if steps>k: return 0\n        #if lengths[i][steps]!=None: return lengths[i][steps]\n        #if (i,steps) in lengths: return lengths[(i,steps)]\n        if lengths[steps][i]!=None: return lengths[steps][i]\n        curmax = 1\n        streak = 1\n        for j in range(i+1,len(nums)):\n            if nums[j]==nums[i]: streak+=1\n            elif steps<k: curmax = max(curmax,streak+self.maxlen(nums,j,steps+1,k,lengths))\n        #lengths[i][steps]=curmax\n        #lengths[(i,steps)]=curmax\n        lengths[steps][i]=curmax\n        return curmax\n    def maximumLength(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        seqlens = [[None for i in range(k+1)] for i in range(len(nums))]\n        for i in range(k+1): seqlens[-1][i]=1\n        vals = {}\n        maxvals = {}\n        for i in range(k+1):\n            vals[i] = {}\n            vals[i][nums[-1]]=1\n            maxvals[i]={}\n            maxvals[i][\"max1\"] = (1,nums[-1])\n            maxvals[i][\"max2\"] = (-1,0)\n        #seqlens = {}\n        #seqlens = [[None for i in range(len(nums))] for i in range(k+1)]\n        curmax = 1\n        for i in reversed(range(len(nums)-1)):\n            for j in range(k+1):\n                if j==0:\n                    if nums[i] in vals[0]:\n                        seqlens[i][0] = 1+vals[0][nums[i]]\n                        vals[0][nums[i]]+=1\n                    else:\n                        seqlens[i][0] = 1\n                        vals[0][nums[i]]=1\n                else:\n                    maxlen = 1\n                    if nums[i] in vals[j]:\n                        maxlen = max(maxlen,1+vals[j][nums[i]])\n                    if maxvals[j-1][\"max1\"][1]==nums[i]:\n                        maxlen = max(maxlen,1+maxvals[j-1][\"max2\"][0])\n                    else:\n                        maxlen = max(maxlen,1+maxvals[j-1][\"max1\"][0])\n                    seqlens[i][j] = maxlen\n                    vals[j][nums[i]] = maxlen\n                if seqlens[i][j]>maxvals[j][\"max1\"][0]:\n                    maxvals[j][\"max2\"] = maxvals[j][\"max1\"]\n                    maxvals[j][\"max1\"] = (seqlens[i][j],nums[i])\n                elif seqlens[i][j]>maxvals[j][\"max2\"][0] and seqlens[i][j]<=maxvals[j][\"max1\"][0]:\n                    maxvals[j][\"max2\"] = (seqlens[i][j],nums[i])\n                curmax = max(curmax,seqlens[i][j])\n        return curmax\n        ",
    "submit_ts": "1717861921",
    "subm_id": "1281806114"
}