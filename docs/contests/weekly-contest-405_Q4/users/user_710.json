{
    "username": "sineshashi",
    "submission": "class Solution:\n    def minimumCost(self, target: str, words: List[str], costs: List[int]) -> int:\n          \n            \n            class PrefixStr:\n                def __init__(self):\n                    self.map = {}\n                    \n                def add_word(self, word, cost):\n                    cnt = self.map\n                    for c in word:\n                        if c in cnt:\n                            cnt = cnt[c]\n                        else:\n                            cnt[c] = {}\n                            cnt = cnt[c]\n                    if \"#\" not in cnt:\n                        cnt[\"#\"] = cost\n                    else:\n                        cnt[\"#\"] = min(cnt[\"#\"], cost)\n                    \n                def find_target_cost(self, i=0):\n                    if i == 0:\n                        self.cache = {}\n                    if i in self.cache:\n                        return self.cache[i]\n                    if i == len(target):\n                        return 0\n                    cnt = self.map\n                    cost = float('inf')\n                    j = i\n                    while i < len(target):\n                        if target[i] in cnt:\n                            cnt = cnt[target[i]]\n                            i += 1\n                            if \"#\" in cnt:\n                                cost = min(cost, cnt[\"#\"] + self.find_target_cost(i))\n                        else:\n                            break\n                    self.cache[j] = cost\n                    return cost\n                \n            pstr = PrefixStr()\n            for word, cost in zip(words, costs):\n                pstr.add_word(word, cost)\n                \n            ans = pstr.find_target_cost()\n            return ans if ans < float('inf') else -1\n                                                     ",
    "submit_ts": "1720322419",
    "subm_id": "1312349408"
}