{
    "username": "milesian-c",
    "submission": "struct syq{\n    int l,r;\n    int mx;\n    int dlt;\n}a[400020];\nint fir[100020], en[200020], nex[200020];\nint dis[100020];\nint fa[100020];\nint tot;\nint top;\nint lft, rgt, dlt;\nint L[100020], R[100020];\nint ans[100020];\nint aim[100020];\nint n;\nclass Solution {\npublic:\n    void tjb(int x,int y){\n        en[++tot] = y;\n        nex[tot]=fir[x];\n        fir[x] = tot;\n    }\n    void dfs(int x){\n        L[x] = ++ top;\n        aim[top] = x;\n        for(int k=fir[x];k;k=nex[k]){\n            int j = en[k];\n            if(j == fa[x])continue;\n            fa[j] = x;\n            if(j%2)dis[j] = dis[x] + 1;\n            else dis[j] = dis[x]+2;\n            dfs(j);\n        }\n        R[x] = top;\n    }\n    void create(int r,int x,int y){\n        a[r].l = x;\n        a[r].r = y;\n        a[r].dlt = 0;\n        if(x == y){\n            a[r].mx = dis[aim[x]];\n            return;\n        }\n        int mid = (x+y) >> 1;\n        create(r<<1,x,mid);\n        create(r<<1|1,mid+1,y);\n        a[r].mx = max(a[r<<1].mx, a[r<<1|1].mx);\n    }\n    void down(int r){\n        if(a[r].dlt == 0)return;\n        \n        a[r<<1].dlt += a[r].dlt;\n        a[r<<1].mx += a[r].dlt;\n        \n        a[r<<1|1].dlt += a[r].dlt;\n        a[r<<1|1].mx += a[r].dlt;\n        \n        a[r].dlt = 0;\n    }\n    \n    void change(int r){\n        if(a[r].l >= lft && a[r].r <= rgt){\n            a[r].mx += dlt;\n            a[r].dlt += dlt;\n            return;\n        }\n        down(r);\n        int mid = a[r<<1].r;\n        if(lft <= mid)change(r<<1);\n        if(rgt > mid)change(r<<1|1);\n        a[r].mx = max(a[r<<1].mx, a[r<<1|1].mx);\n    }\n    void dfs_2(int x){\n        ans[x] = a[1].mx;\n       // printf(\"dfs2: %d %d\\n\",x,a[1].mx);\n        int nowdlt, nowdlt2;\n        if(x % 2)nowdlt2 = 1; else nowdlt2 = 2;\n        for(int k=fir[x];k;k=nex[k]){\n            int j = en[k];\n            if(j == fa[x])continue;\n            if(j % 2) nowdlt = 1;\n            else nowdlt = 2;\n            \n            lft = L[j];\n            rgt = R[j];\n            dlt = -nowdlt;\n            //change(1);\n            dlt += -nowdlt2;\n            change(1);\n            lft = 1;\n            rgt = n;\n            dlt = nowdlt2;\n            change(1);\n            \n            dfs_2(j);\n            \n            lft = L[j];\n            rgt = R[j];\n            dlt = nowdlt;\n            //change(1);\n            dlt += nowdlt2;\n            change(1);\n            lft = 1;\n            rgt = n;\n            dlt = -nowdlt2;\n            change(1);            \n        }\n    }\n    vector<int> timeTaken(vector<vector<int>>& edges) {\n        int m = edges.size();\n        n = m+1;\n        tot = 0;\n        for(int i=0;i<n;++i){\n            fir[i] = 0;\n            fa[i] = -1;\n        }\n        for(int i=0;i<m;++i){\n            int x = edges[i][0];\n            int y = edges[i][1];\n            tjb(x,y);\n            tjb(y,x);\n        }\n        dis[0] = 0;\n        top = 0;\n        dfs(0);\n        create(1,1,n);\n        dfs_2(0);\n        vector<int> ret;\n        for(int i=0;i<n;++i){\n            ret.push_back(ans[i]);\n        }\n        return ret;\n    }\n};",
    "submit_ts": "1722697212",
    "subm_id": "552264977"
}