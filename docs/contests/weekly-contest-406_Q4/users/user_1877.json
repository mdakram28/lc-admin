{
    "username": "atharvaU",
    "submission": "class Solution {\npublic:\n    long long minimumCost(int m, int n, vector<int>& horizontalCut, vector<int>& verticalCut) {\n        vector<pair<int, int>> greedy;\n\n        for(int i = 0 ; i < m-1 ; i++) {\n            greedy.push_back({horizontalCut[i], 1});\n        }\n\n        for(int i = 0 ; i < n-1 ; i++) {\n            greedy.push_back({verticalCut[i], 2});\n        }\n\n        sort(greedy.begin(), greedy.end());\n\n        int verCuts = 0, horCuts = 0, ind = greedy.size()-1;\n        long long ans = 0;\n        \n        while(ind >= 0) {\n            pair<int, int> curCut = greedy[ind];\n            int cost = curCut.first;\n            int orientation = curCut.second;\n            int pieces = 0;\n\n            if(orientation == 1) {\n                pieces = verCuts+1;\n                horCuts++;\n            } else {\n                pieces = horCuts+1;\n                verCuts++;\n            }\n\n\n            ans += pieces * cost;\n            ind--; \n        }\n\n        return ans;\n    }\n};",
    "submit_ts": "1720926509",
    "subm_id": "1320288359"
}