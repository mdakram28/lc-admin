{
    "username": "WhatElseIsThere",
    "submission": "class Solution {\npublic:\n    const int kMod = 1e9 + 7;\n    const int kMaxK = 400;\n    \n    int numberOfPermutations(int n, vector<vector<int>>& requirements) {\n        vector<vector<int>> dp(n, vector<int>(kMaxK + 1));\n        dp[0][0] = 1;\n        for (int i = 1; i < n; i++) {\n            vector<int> pref(kMaxK + 1);\n            pref[0] = dp[i - 1][0];\n            for (int j = 1; j <= kMaxK; j++) {\n                pref[j] = (pref[j - 1] + dp[i - 1][j]) % kMod;\n            }\n            \n            auto sum = [&](int l, int r) {\n                return (pref[r] - (l <= 0 ? 0 : pref[l - 1]) + kMod) % kMod;\n            };\n            \n            for (int j = 0; j <= kMaxK; j++) {\n                dp[i][j] = sum(j - i, j);\n            }\n        }\n        \n        vector<vector<int>> cnk(n + 1, vector<int>(n + 1));\n        for (int i = 0; i <= n; i++) {\n            cnk[i][0] = 1;\n            for (int j = 1; j <= i; j++) {\n                cnk[i][j] = (cnk[i - 1][j - 1] + cnk[i - 1][j]) % kMod;\n            }\n        }\n        \n        vector<int> req(n, -1);\n        for (auto r : requirements) {\n            req[r[0]] = r[1];\n        }\n        \n        vector<vector<vector<int>>> dp2(n + 1, vector<vector<int>>(n + 1, vector<int>(kMaxK + 1)));\n        dp2[0][0][0] = 1;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j <= i; j++) {\n                for (int k = 0; k <= kMaxK; k++) {\n                    if (dp2[i][j][k] == 0) {\n                        continue;\n                    }\n                    dp2[i + 1][j][k] = (dp2[i + 1][j][k] + dp2[i][j][k]) % kMod;\n                    if (k + (i - j) <= kMaxK) {\n                        dp2[i + 1][j + 1][k + (i - j)] = (dp2[i + 1][j + 1][k + (i - j)] + dp2[i][j][k]) % kMod;\n                    }\n                }\n            }\n        }\n        \n        int ans = 1;\n        int prev_len = 0;\n        int prev_req = 0;\n        for (int i = 0; i < n; i++) {\n            if (req[i] == -1) {\n                continue;\n            }\n            if (req[i] < prev_req) {\n                return 0;\n            }\n            int len = i + 1;\n            \n            int y = req[i] - prev_req;\n            int tmp = 0;\n            for (int x = 0; x <= y; x++) {\n                tmp = (tmp + dp[len - prev_len - 1][x] * 1LL * dp2[len][prev_len][y - x]) % kMod;\n            }\n            \n            ans = (ans * 1LL * tmp) % kMod;\n            prev_len = len;\n            prev_req = req[i];\n        }\n        return ans;\n    }\n};",
    "submit_ts": 1719071979.0
}