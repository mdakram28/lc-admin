{
    "username": "lIlIlIIIIIllI",
    "submission": "from sortedcontainers import SortedList\nclass Solution:\n    def getResults(self, queries: List[List[int]]) -> List[bool]:\n        maxsize = 5 * 10**4\n        # maxsize = 20\n        segtree = [0] * (4 * maxsize)\n        \n        def update(segtree, l, r, i, num, val):\n            if num < l or num > r:\n                return segtree[i]\n            if l == r:\n                segtree[i] = val\n                return segtree[i]\n            if l > r:\n                return float(\"-inf\")\n            mid = (l + r) // 2\n            segtree[i] = max(update(segtree, l, mid, i * 2 + 1, num, val), update(segtree, mid + 1, r, i * 2 + 2, num, val))\n            return segtree[i]\n            \n        \n        def query(segtree, l, r, i, ql, qr):\n            if ql > qr:\n                return float(\"inf\")\n            if l == ql and r == qr:\n                return segtree[i]\n            mid = (l + r) // 2\n            if qr <= mid:\n                return query(segtree, l, mid, i * 2 + 1, ql, qr)\n            elif ql > mid:\n                return query(segtree, mid + 1, r, i * 2 + 2, ql, qr)\n            else:\n                return max(query(segtree, l, mid, i * 2 + 1, ql, mid), query(segtree, mid + 1, r, i * 2 + 2, mid + 1, qr))\n        \n        res = []\n        free = SortedList([0])\n        update(segtree, 0, maxsize - 1, 0, 0, float(\"inf\"))\n        # print(free)\n        # print(segtree)\n        for q in queries:\n            if q[0] == 1:\n                _, x = q\n                i = free.bisect_left(x)\n                left = -1\n                right = float(\"inf\")\n                if i < len(free):\n                    right = free[i]\n                if i > 0:\n                    left = free[i - 1]\n                # print(\"left\", left, \"right\", right)\n                # print(\"l\", x - left, \"r\", right - x)\n                update(segtree, 0, maxsize - 1, 0, left, x - left)\n                update(segtree, 0, maxsize - 1, 0, x, right - x)\n                free.add(x)\n                # print(free)\n                # print(segtree)\n            else:\n                _, x, sz = q\n                if sz > x:\n                    res.append(False)\n                    continue\n                m = free.bisect_left(x)\n                if m > 0 and x - free[m - 1] >= sz:\n                    res.append(True)\n                    continue            \n                space = query(segtree, 0, maxsize - 1, 0, 0, free[m - 1] - 1)\n                if space >= sz:\n                    res.append(True)\n                else:\n                    res.append(False)\n        return res\n            \n        ",
    "submit_ts": 1716652717.0
}