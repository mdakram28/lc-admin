{
    "username": "JeffreyLC",
    "submission": "class Solution {\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        const int num_words = words.size();\n        unordered_map<string, int> min_costs;\n        for (int i = 0; i < num_words; ++i) {\n            auto itr = min_costs.find(words[i]);\n            if (itr == min_costs.end()) {\n                min_costs[words[i]] = costs[i];\n            } else {\n                itr->second = min(itr->second, costs[i]);\n            }\n        }\n        words.clear();\n        costs.clear();\n        for (const auto& [word, cost] : min_costs) {\n            words.push_back(word);\n            costs.push_back(cost);\n        }\n        const int n = target.length();\n        const int m = words.size();\n        vector<vector<int>> found(n);\n        for (int i = 0; i < m; ++i) {\n            for (int a : KMP(target, words[i])) {\n                found[a + words[i].length() - 1].push_back(i);\n            }\n        }\n        vector<int> dp(n + 1, INT_MAX);\n        dp[0] = 0;\n        for (int i = 1; i <= n; ++i) {\n            for (int pos : found[i - 1]) {\n                int j = i - words[pos].length();\n                if (j >= 0 && dp[j] != INT_MAX) {\n                    dp[i] = min(dp[i], dp[j] + costs[pos]);\n                }\n            }\n        }\n        return dp[n] == INT_MAX ? -1 : dp[n];\n    }\nprivate:\n    vector<int> BuildLPSArray(const string& str) {\n        int n = str.length();\n        vector<int> lps(n);\n        int i = 1, len = 0;\n        while (i < n) {\n            if (str[i] == str[len]) {\n                lps[i++] = ++len;\n            } else {\n                if (len != 0) {\n                    len = lps[len - 1];\n                } else {\n                    lps[i++] = 0;\n                }\n            }\n        }\n        return lps;\n    }\n\n    vector<int> KMP(const string& str, const string& pat) {\n        int n = str.length(), m = pat.length();\n        vector<int> lps = BuildLPSArray(pat);\n        vector<int> pos;\n        int i = 0, j = 0;\n        while (n - i >= m - j) {\n            if (pat[j] == str[i]) {\n                ++j;\n                ++i;\n            }\n            if (j == m) {\n                pos.push_back(i - j);\n                j = lps[j - 1];\n            } else if (i < n && pat[j] != str[i]) {\n                if (j != 0) {\n                    j = lps[j - 1];\n                } else {\n                    ++i;\n                }\n            }\n        }\n        return pos;\n    }\n};",
    "submit_ts": "1720320870",
    "subm_id": "1312306908"
}