{
    "username": "JayantGoyal2002",
    "submission": "#include <vector>\n#include <string>\n#include <climits>\n#include <unordered_map>\n\nusing namespace std;\n\nclass TrieNode {\npublic:\n    unordered_map<char, TrieNode*> children;\n    int minCost;\n    bool isEndOfWord;\n\n    TrieNode() : minCost(INT_MAX), isEndOfWord(false) {}\n};\n\nclass Trie {\npublic:\n    TrieNode* root;\n\n    Trie() {\n        root = new TrieNode();\n    }\n\n    void insert(const string& word, int cost) {\n        TrieNode* currentNode = root;\n        for (char ch : word) {\n            if (!currentNode->children.count(ch)) {\n                currentNode->children[ch] = new TrieNode();\n            }\n            currentNode = currentNode->children[ch];\n        }\n        currentNode->minCost = min(cost, currentNode->minCost);\n        currentNode->isEndOfWord = true;\n    }\n\n    TrieNode* getRoot() {\n        return root;\n    }\n};\n\nclass Solution {\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        Trie trie;\n        int targetLen = target.size();\n        vector<int> dp(targetLen + 1, INT_MAX);\n\n        for (int i = 0; i < words.size(); ++i) {\n            trie.insert(words[i], costs[i]);\n        }\n\n        dp[0] = 0;\n\n        for (int i = 0; i < targetLen; ++i) {\n            if (dp[i] == INT_MAX) continue;\n\n            TrieNode* currentNode = trie.getRoot();\n            for (int j = i; j < targetLen; ++j) {\n                char ch = target[j];\n                if (!currentNode->children.count(ch)) break;\n                currentNode = currentNode->children[ch];\n                if (currentNode->isEndOfWord) {\n                    dp[j + 1] = min(dp[j + 1], dp[i] + currentNode->minCost);\n                }\n            }\n        }\n\n        return dp[targetLen] == INT_MAX ? -1 : dp[targetLen];\n    }\n};\n",
    "submit_ts": "1720323338",
    "subm_id": "1312373128"
}