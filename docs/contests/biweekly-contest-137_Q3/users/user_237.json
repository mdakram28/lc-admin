{
    "username": "leoyu0813",
    "submission": "class Solution {\n    \n    struct node {\n        int val, x, y;\n        node (int v, int i, int j):val (v), x (i), y(j) {}\n    };\n    struct cmp {\n        bool operator () (node a, node b)\n        {\n            return a.val < b.val;\n        }\n    };\npublic:\n    long long maximumValueSum(vector<vector<int>>& board) {\n        int m = board.size();\n        int n = board[0].size();\n        \n        long long ans = -3e9;\n        priority_queue <node, vector <node>, cmp> pq;\n        unordered_set <int> rows, cols;\n        for (int i = 0; i < m; ++i)\n            for (int j = 0; j < n; ++j)\n                pq.push (node (board[i][j], i, j));\n\n        for (int k = 0; k < 3; ++k){\n            ans = max(ans, dfs (0, 3, pq, rows, cols));\n            pq.pop ();\n        }\n        return ans;\n    }\n\n    long long dfs (long long sum, int k, priority_queue <node, vector <node>, cmp> pq, unordered_set <int> rows, unordered_set <int> cols)\n    {\n        if (k == 0){\n            return sum;\n        }\n        long long ans = -3e9;\n        int cnt = 0;\n        while (!pq.empty () && cnt < k)\n        {\n            node p = pq.top ();\n            pq.pop ();\n            if (!rows.count (p.x) && !cols.count (p.y))\n            {\n                ++cnt;\n                rows.insert (p.x);\n                cols.insert (p.y);\n                ans = max (ans, dfs (sum + p.val, k-1, pq, rows, cols));\n                rows.erase (p.x);\n                cols.erase (p.y);\n            }\n        }\n        return ans;\n    }\n};",
    "submit_ts": "1723908607",
    "subm_id": "1359159670"
}