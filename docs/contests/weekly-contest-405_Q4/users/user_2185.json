{
    "username": "Evexxxxx",
    "submission": "class Solution {\n    static class TrieNode {\n        TrieNode[] children;\n        int cost;\n        \n        TrieNode() {\n            children = new TrieNode[26];\n            cost = Integer.MAX_VALUE;\n        }\n    }\n    \n    public int minimumCost(String target, String[] words, int[] costs) {\n        TrieNode root = new TrieNode();\n        int n = target.length();\n        \n        // Build the Trie\n        for (int i = 0; i < words.length; i++) {\n            TrieNode node = root;\n            for (char c : words[i].toCharArray()) {\n                if (node.children[c - 'a'] == null) {\n                    node.children[c - 'a'] = new TrieNode();\n                }\n                node = node.children[c - 'a'];\n            }\n            node.cost = Math.min(node.cost, costs[i]);\n        }\n        \n        // Initialize DP array\n        int[] dp = new int[n + 1];\n        Arrays.fill(dp, Integer.MAX_VALUE);\n        dp[0] = 0;\n        \n        // Fill DP array using the Trie\n        for (int i = 0; i < n; i++) {\n            if (dp[i] == Integer.MAX_VALUE) continue;\n            TrieNode node = root;\n            for (int j = i; j < n; j++) {\n                if (node == null) break;\n                node = node.children[target.charAt(j) - 'a'];\n                if (node != null && node.cost != Integer.MAX_VALUE) {\n                    dp[j + 1] = Math.min(dp[j + 1], dp[i] + node.cost);\n                }\n            }\n        }\n        \n        return dp[n] == Integer.MAX_VALUE ? -1 : dp[n];\n    }\n}\n",
    "submit_ts": "1720323299",
    "subm_id": "1312372216"
}