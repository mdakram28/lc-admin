{
    "username": "Anshit_24",
    "submission": "#include <bits/stdc++.h>\nusing namespace std;\n#include <ext/pb_ds/assoc_container.hpp> // Common file\n#include <ext/pb_ds/tree_policy.hpp> // Including tree_order_statistics_node_update\n\nnamespace __gnu_pbds{\n          typedef tree<long long,\n                       null_type,\n                       less<long long>,\n                       rb_tree_tag,\n                       tree_order_statistics_node_update> ordered_set;\n}\n//multiset:-\n//greater_equal<long long>\n//less_equal<long long>\n//set:-\n//greater<long long>\n//less<long long>\nusing namespace __gnu_pbds;\n//A.order_of_key\n//*A.find_by_order\n\n// Miscellanous\n#define ld long double\n#define ll long long\n#define ull unsigned long long\n#define pb push_back\n#define ff first\n#define ss second\n#define all(v) v.begin(),v.end()\n\n// Loops\n#define loop(i,s,e) for (int (i)=(s);(i)<(e);++(i))\n#define loope(i,s,e) for (int (i)=(s);(i)<=(e);++(i))\n\n// Constants\n#define PI 3.1415926535897932384626\nconst int mod = 1000000007;\n\n// Containers\ntypedef pair<int, int>\t    pii;\ntypedef pair<ll, ll>\t    pll;\ntypedef vector<int>\t\t    vi;\ntypedef vector<ll>\t\t    vl;\ntypedef vector<pii>\t\t    vpii;\ntypedef vector<pll>\t\t    vpll;\ntypedef vector<vi>\t\t    vvi;\ntypedef vector<vl>\t\t    vvl;\n#define in(a) for(int i = 0; i<a.size(); i++) cin>>a[i];\n#define out(a) for(int i = 0; i<a.size(); i++) cout<<a[i]<<\" \";\n\n// Debug\nvoid _print(int t) {cerr << t;}\nvoid _print(ll t) {cerr << t;}\nvoid _print(string t) {cerr << t;}\nvoid _print(char t) {cerr << t;}\nvoid _print(double t) {cerr << t;}\nvoid _print(ull t) {cerr << t;}\n\ntemplate <class T, class V> void _print(pair <T, V> p);\ntemplate <class T> void _print(vector <T> v);\n\ntemplate <class T> void _print(unordered_set <T> v);\ntemplate <class T> void _print(unordered_multiset <T> v);\ntemplate <class T> void _print(set <T> v);\ntemplate <class T> void _print(multiset <T> v);\n\ntemplate <class T, class V> void _print(unordered_map <T, V> v);\ntemplate <class T, class V> void _print(unordered_multimap <T, V> v);\ntemplate <class T, class V> void _print(map <T, V> v);\ntemplate <class T, class V> void _print(multimap <T, V> v);\n\ntemplate <class T, class V> void _print(pair <T, V> p) {cerr << \"{\"; _print(p.ff); cerr << \",\"; _print(p.ss); cerr << \"}\";}\ntemplate <class T> void _print(vector <T> v) {cerr << \"[ \"; for (T i : v) {_print(i); cerr << \" \";} cerr << \"]\";}\n\ntemplate <class T> void _print(unordered_set <T> v) {cerr << \"[ \"; for (T i : v) {_print(i); cerr << \" \";} cerr << \"]\";}\ntemplate <class T> void _print(unordered_multiset <T> v) {cerr << \"[ \"; for (T i : v) {_print(i); cerr << \" \";} cerr << \"]\";}\ntemplate <class T> void _print(set <T> v) {cerr << \"[ \"; for (T i : v) {_print(i); cerr << \" \";} cerr << \"]\";}\ntemplate <class T> void _print(multiset <T> v) {cerr << \"[ \"; for (T i : v) {_print(i); cerr << \" \";} cerr << \"]\";}\n\ntemplate <class T, class V> void _print(unordered_map <T, V> v) {cerr << \"[ \"; for (auto i : v) {_print(i); cerr << \" \";} cerr << \"]\";}\ntemplate <class T, class V> void _print(unordered_multimap <T, V> v) {cerr << \"[ \"; for (auto i : v) {_print(i); cerr << \" \";} cerr << \"]\";}\ntemplate <class T, class V> void _print(map <T, V> v) {cerr << \"[ \"; for (auto i : v) {_print(i); cerr << \" \";} cerr << \"]\";}\ntemplate <class T, class V> void _print(multimap <T, V> v) {cerr << \"[ \"; for (auto i : v) {_print(i); cerr << \" \";} cerr << \"]\";}\n\n#ifndef ONLINE_JUDGE\n#define deb(x) cerr << #x << \" = \";  _print(x); cerr << endl;\n#else\n#define deb(x)\n#endif\n//stoi to_string\n#define py\t    cout<<\"YES\\n\";\n#define pn\t    cout<<\"NO\\n\";\n#define pnl\t    cout<<\"\\n\";\n\nll extend_gcd(ll a ,ll b ,ll &x , ll &y){\n  if(b==0){\n    x=1;\n    y=0;\n    return a;\n  }\n  ll x1,y1;\n  ll g = extend_gcd(b,a%b,x1,y1);\n  x = y1;\n  y = x1-(a/b)*y1;\n  return g;\n}\nll gcd(ll a, ll b){\n  if(b==0)return a;\n  return gcd(b,a%b);\n}\nll mul_mod_in(ll a , ll m){\n  ll x,y;\n  ll g = extend_gcd(a,m,x,y);\n  if(g!=1)return -1;\n  return (((x%m)+m)%m);\n}\nint fastmod(int x, int y = mod - 2){\n    int res = 1;\n    while(y){\n        if(y&1) res = res * x % (mod);\n        x = x * x % (mod);\n        y /= 2;\n    }\n    return res;\n}\n\nvoid print_arr(vector<ld>&v){\n  for(auto & val : v)cout<<val<<\" \";\n  cout<<endl;\n}\n\nint sum_of_digits(int num){\n  int i = 0; \n  while(num>0){\n    i+= num%10;\n    num/= 10;\n  }\n  return i;\n}\n\n\n\n\nvector<int> Prefix_Mex(vector<int>& A, int n) {\n    vector<bool> b(n+1);\n    int mex = 0; \n    vector<int> result(n);\n    for (int i = 0; i < n; i++) {\n        b[A[i]] = true;\n        while (b[mex] == true) {\n            mex++;\n        }\n        result[i] = mex;\n    }\n    return result;\n}\n//priority_queue<int,vector<int>,greater<int>()>for min queue;\n// ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\n/*\nmove using examples(IMP)\nthink anti test case for ur logic\ntest GST10^9\n*/\n\nclass Solution {\npublic:\n    int minimumDistance(vector<vector<int>>& points) {\n        multiset<int>diff;\n        multiset<int>sumst;\n        int mini = 1e9;\n        int n =  points.size();\n        loop(i,0,n){\n            int di = (points[i][0]-points[i][1]);\n            int su = (points[i][0]+points[i][1]);\n            diff.insert(di);\n            sumst.insert(su);\n        } \n        // int temp = max((*--sumst.end())-(*sumst.begin()),(*--diff.end())-(*diff.begin()));\n        // return temp;\n        for(int i  = 0;i<n ;i++){\n            int di = (points[i][0]-points[i][1]);\n            int su = (points[i][0]+points[i][1]);\n            sumst.erase(sumst.find(su)); \n            diff.erase(diff.find(di));\n            int maxi = max(*--sumst.end()-*sumst.begin(),*--diff.end()-*diff.begin());\n            mini = min(maxi,mini); \n            sumst.insert(su);\n            diff.insert(di);\n        }\n        return mini; \n    }\n};\n\n// ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\n\n/*\n*/"
}