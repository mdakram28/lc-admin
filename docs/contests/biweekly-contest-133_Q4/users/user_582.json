{
    "username": "anujkumar666",
    "submission": "\n    \n\n\n\n\nclass Solution {\npublic:\n    int numberOfPermutations(int n, vector<vector<int>>& requirements) {\n        unordered_map<int, int> mpp;\n         long ans = 0;\n        const int MOD = 1'000'000'007;\n        const int inver = 400;\n       \n\n        \n        \n        vector<vector<long>> per(n + 1, vector<long>(inver + 1, 0));\n        per[0][0] = 1;\n         for (const auto& r : requirements) {\n            mpp[r[0] + 1] = r[1];\n        }\n\n        for (int l= 1; l <= n; ++l) {\n            for (int inv = 0; inv <= inver; ++inv) {\n                for (int newP = 0; newP< l; ++newP) {\n                    int prevInv = inv - newP;\n                    if (prevInv >= 0) \n                        per[l][inv] = (per[l - 1][prevInv] +per[l][inv]) % MOD;\n                    \n                }\n            }\n\n            if (mpp.find(l) != mpp.end()) {\n                int targetInv = mpp[l];\n                for (int inv = 0; inv <= inver; ++inv) {\n                    if (inv != targetInv) \n                        per[l][inv] = 0;\n                    \n                }\n            }\n        }\n\n       \n        for (long count : per[n]) \n            ans = (count+ans) % MOD;\n        \n\n        return (int) ans;\n    }\n};\n\n",
    "submit_ts": 1719070727.0
}