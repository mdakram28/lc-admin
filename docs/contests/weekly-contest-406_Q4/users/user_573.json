{
    "username": "dincoglue",
    "submission": "class Solution {\npublic:\n    long long minimumCost(int m, int n, vector<int>& horizontalCut, vector<int>& verticalCut) {\n        priority_queue<int> horizontalPrices, verticalPrices;\n        long long horizontalCuts = 0, verticalCuts = 0;\n        long long totalPrice = 0;\n        for (int i = 0; i < horizontalCut.size(); i++) {\n            horizontalPrices.push(horizontalCut[i]);\n        }\n        for (int i = 0; i < verticalCut.size(); i++) {\n            verticalPrices.push(verticalCut[i]);\n        }\n        while (!horizontalPrices.empty() && !verticalPrices.empty()) {\n            if (horizontalPrices.top() > verticalPrices.top()) {\n                totalPrice += horizontalPrices.top() * (verticalCuts + 1);\n                horizontalPrices.pop();\n                horizontalCuts++;\n            }\n            else {\n                totalPrice += verticalPrices.top() * (horizontalCuts + 1);\n                verticalPrices.pop();\n                verticalCuts++;\n            }\n        }\n        if (!horizontalPrices.empty()) {\n            while (!horizontalPrices.empty()) {\n                totalPrice += horizontalPrices.top() * (verticalCuts + 1);\n                horizontalPrices.pop();\n            }\n            \n        }\n        else {\n            while (!verticalPrices.empty()) {\n                totalPrice += verticalPrices.top() * (horizontalCuts + 1);\n                verticalPrices.pop();\n            }\n        }\n        return totalPrice;\n    }\n};",
    "submit_ts": "1720925661",
    "subm_id": "1320262053"
}