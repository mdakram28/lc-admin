{
    "username": "MG45",
    "submission": "class Solution {\npublic:\n         static bool compare(int a, int b) {\n    return a > b;\n}\n\nlong long minCostToCutCake(int m, int n, vector<int>& horizontalCut, vector<int>& verticalCut) {\n   \n    sort(horizontalCut.begin(), horizontalCut.end(), compare);\n    sort(verticalCut.begin(), verticalCut.end(), compare);\n\n    long long hIndex = 0, vIndex = 0;\n    long long horizontalPieces = 1, verticalPieces = 1;\n    long long totalCost = 0;\n\n    \n    while (hIndex < horizontalCut.size() && vIndex < verticalCut.size()) {\n        if (horizontalCut[hIndex] >= verticalCut[vIndex]) {\n            \n            totalCost += horizontalCut[hIndex] * verticalPieces;\n            hIndex++;\n            horizontalPieces++;\n        } else {\n           \n            totalCost += verticalCut[vIndex] * horizontalPieces;\n            vIndex++;\n            verticalPieces++;\n        }\n    }\n\n   \n    while (hIndex < horizontalCut.size()) {\n        totalCost += horizontalCut[hIndex] * verticalPieces;\n        hIndex++;\n        horizontalPieces++;\n    }\n\n   \n    while (vIndex < verticalCut.size()) {\n        totalCost += verticalCut[vIndex] * horizontalPieces;\n        vIndex++;\n        verticalPieces++;\n    }\n\n    return totalCost;\n}\n    long long minimumCost(int m, int n, vector<int>& horizontalCut, vector<int>& verticalCut) {\n        return minCostToCutCake(m,n,horizontalCut,verticalCut);\n    }\n};",
    "submit_ts": "1720925759",
    "subm_id": "1320265323"
}