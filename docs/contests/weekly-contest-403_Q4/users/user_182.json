{
    "username": "BattlerRein",
    "submission": "class Solution {\n    public int minimumSum(int[][] grid) {\n\n        int result = 1000;\n\n        int iMax = grid.length - 1;\n        int jMax = grid[0].length - 1;\n\n        for (int isS1Horizontal = 0; isS1Horizontal < 2; isS1Horizontal++) {\n\n            for (int s1 = 0; s1 <= (isS1Horizontal == 1 ? grid.length - 2 : grid[0].length - 2); s1++) {\n                for (int isS2Horizontal = 0; isS2Horizontal < 2; isS2Horizontal++) {\n                    for (int s2 = 0; s2 <= (isS2Horizontal == 1? grid.length - 2 : grid[0].length - 2); s2++) {\n                        \n                        \n\n                        if (isS1Horizontal == isS2Horizontal) {\n                            int sUpper = Math.min(s1, s2);\n                            int sLower = Math.max(s1, s2);\n                            if (isS1Horizontal == 1) {\n                                result = Math.min(result, helper(grid, 0, 0, sUpper, grid[0].length - 1) + helper(grid, sUpper + 1, 0, sLower, grid[0].length - 1) + helper(grid, sLower + 1, 0, grid.length - 1, grid[0].length - 1));\n                            } else {\n                                result = Math.min(result, helper(grid, 0, 0, grid.length - 1, sUpper) + helper(grid, 0, sUpper + 1, grid.length - 1, sLower) + helper(grid, 0, sLower + 1, grid.length - 1, grid[0].length - 1));\n                            }\n                        } else {\n                            if (isS1Horizontal == 1) {\n                            // result = Math.min(helper(grid, , , , ) + helper(grid, , , , ) + helper(grid, , , , ));\n                                result = Math.min(result, helper(grid, 0, 0, s1, grid[0].length - 1) + helper(grid, s1 + 1, 0, grid.length - 1, s2) + helper(grid, s1 + 1, s2 + 1, grid.length - 1, grid[0].length - 1));\n                                result = Math.min(result, helper(grid, 0, 0, s1, s2) + helper(grid, 0, s2 + 1, s1, grid[0].length - 1) + helper(grid, s1 + 1, 0, grid.length - 1, grid[0].length - 1));\n                            } else {\n                                result = Math.min(result, helper(grid, 0, 0, iMax, s1) + helper(grid, 0, s1 + 1, s2, jMax) + helper(grid, s2 + 1, s1 + 1, iMax, jMax));\n                                result = Math.min(result, helper(grid, 0, 0, s2, s1) + helper(grid, s2 + 1, 0, iMax, s1) + helper(grid, 0, s1, iMax, jMax));\n                            }\n                        \n                        }\n\n                        // System.out.println(String.format(\"for s1=%d s2=%d b1=%d b2=%d currResult=%d)\", s1, s2, isS1Horizontal, isS2Horizontal, result));\n                    }\n                }\n            }\n\n        }\n\n        return result;\n    }\n\n    private int helper(int[][] grid, int i1, int j1, int i2, int j2) {\n\n        \n\n        int upper = 40;\n        int lower = -1;\n        int left = 40;\n        int right = -1;\n        boolean isValid = false;\n\n        for (int i = i1; i <= i2; i++) {\n            for (int j = j1; j <= j2; j++) {\n                if (grid[i][j] == 1) {\n                    isValid = true;\n                    upper = Math.min(upper, i);\n                    lower = Math.max(lower, i);\n                    left = Math.min(left, j);\n                    right = Math.max(right, j);\n                }\n            }\n        }\n        int result = isValid ? (lower - upper + 1) * (right - left + 1) : 10000000;\n\n        // System.out.println(String.format(\"Calculating helper (%d, %d) to (%d, %d), result=%d\", i1, j1, i2, j2, result));\n\n        return result;\n    }\n}",
    "submit_ts": 1719113052.0
}