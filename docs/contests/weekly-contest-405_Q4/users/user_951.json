{
    "username": "Sixtycat",
    "submission": "class Solution:\n    def minimumCost(self, target: str, words: List[str], costs: List[int]) -> int:\n        visited_cost = dict()\n        my_trie = dict()\n        for idx in range(len(words)):\n            cur_word = words[idx]\n            cur_cost = costs[idx]\n\n            cur_node = my_trie\n            for char_idx, c in enumerate(cur_word):\n                if c not in cur_node:\n                    cur_node[c] = dict()\n                cur_node = cur_node[c]\n            if \"cost\" not in cur_node:\n                cur_node[\"cost\"] = cur_cost\n\n            cur_node[\"cost\"] = min(cur_node[\"cost\"], cur_cost)\n\n        # print(my_trie)\n        self.dfs(target, 0, my_trie, visited_cost)\n        # print(visited_cost[0])\n        result = -1 if math.isinf(visited_cost[0]) else visited_cost[0]\n        return result # visited_cost[0] \n\n            \n\n\n    def dfs(self, target, start_idx, my_trie, visited_cost):\n        if start_idx == len(target):\n            return 0\n        if start_idx in visited_cost:\n            return visited_cost[start_idx]\n        \n        best_cost = math.inf\n        cur_node = my_trie\n        for end_idx in range(start_idx, len(target)):\n            cur_char = target[end_idx]\n            if cur_char in cur_node:\n                cur_node = cur_node[target[end_idx]]\n                if \"cost\" in cur_node:\n                    best_cost = min(best_cost, cur_node[\"cost\"] + self.dfs(target, end_idx + 1, my_trie, visited_cost))\n\n            else:\n                break\n\n        visited_cost[start_idx] = best_cost\n\n        return best_cost\n\n",
    "submit_ts": "1720322847",
    "subm_id": "1312360673"
}