{
    "username": "anshitmahajan0",
    "submission": "class Solution {\npublic:\n    int bfs(const std::vector<std::vector<int>>& graph, int start, int target1, int target2, int nodes) {\n        std::queue<int> queue;\n        std::vector<bool> visited(nodes + 4, false);\n        queue.push(start);\n        visited[start] = true;\n        \n        while (!queue.empty()) {\n            int u = queue.front();\n            queue.pop();\n            for (int v : graph[u]) {\n                if (!visited[v]) {\n                    queue.push(v);\n                    visited[v] = true;\n                }\n            }\n        }\n        return visited[target1] || visited[target2] ? 1 : 0;\n    }\n\n    bool canReachCorner(int X, int Y, vector<vector<int>>& circles) {\n        vector <vector<int>> circles2;\n        for (const auto& circle : circles2) \n        {\n            circles.push_back({circle[0], circle[1], circle[2]});\n        }\n        \n        int numCircles = circles.size();\n        vector<vector<int>> graph(numCircles + 4);\n        \n        for (int i = 0; i < numCircles; ++i) \n        {\n            if (circles[i][0] <= circles[i][2]) \n            {\n                graph[numCircles].push_back(i);\n                graph[i].push_back(numCircles);\n            }\n\n            if (X - circles[i][0] <= circles[i][2]) \n            {\n                graph[numCircles + 2].push_back(i);\n                graph[i].push_back(numCircles + 2);\n            }\n\n            if (circles[i][1] <= circles[i][2]) \n            {\n                graph[numCircles + 1].push_back(i);\n                graph[i].push_back(numCircles + 1);\n            }\n\n            if (Y - circles[i][1] <= circles[i][2]) \n            {\n                graph[numCircles + 3].push_back(i);\n                graph[i].push_back(numCircles + 3);\n            }\n            for (int j = i + 1; j < numCircles; ++j) {\n                double distance = sqrt(pow(circles[i][0] - circles[j][0], 2) +\n                                            pow(circles[i][1] - circles[j][1],2));\n                int radiusSum = circles[i][2] + circles[j][2];\n                if (radiusSum >= distance) \n                {\n                    graph[i].push_back(j);\n                    graph[j].push_back(i);\n                }\n            }\n        }\n        \n        int isBlocked = 0;\n        isBlocked = max(isBlocked, bfs(graph, numCircles, numCircles + 1, numCircles + 2, numCircles + 4));\n        isBlocked = max(isBlocked, bfs(graph, numCircles + 3, numCircles + 2, numCircles + 1, numCircles + 4));\n        \n        return isBlocked == 0;\n    }\n};",
    "submit_ts": "1722137777",
    "subm_id": "1335773408"
}