{
    "username": "_wow",
    "submission": "class Solution {\npublic:\n    int minimumDistance(vector<vector<int>>& points) {\n        vector<vector<int>> v1(points), v2(points);\n        auto [_, p1, p2] = f(points);\n        v1.erase(v1.begin() + p1);\n        v2.erase(v2.begin() + p2);\n        return min(get<0>(f(v1)), get<0>(f(v2)));\n    }\n    \n    tuple<int, int, int> f(vector<vector<int>>& points) {\n        int n = points.size(), mx = 0, p1 = -1, p2 = -1;\n        vector<vector<pair<int, int>>> p(4, vector<pair<int, int>>(n));\n        for (int i = 0; i < n; ++i) {\n            int x = points[i][0], y = points[i][1];\n            p[0][i] = {x + y, i};\n            p[1][i] = {x - y, i};\n            p[2][i] = {-x + y, i};\n            p[3][i] = {-x - y, i};\n        }\n        for (int i = 0; i < 4; ++i) {\n            sort(p[i].begin(), p[i].end());\n            mx = max(mx, p[i][n - 1].first - p[i][0].first);\n        }\n        for (int i = 0; i < 4; ++i) {\n            if (p[i][n - 1].first - p[i][0].first == mx) p1 = p[i][0].second, p2 = p[i][n - 1].second;\n        }\n        return tuple<int, int, int>{mx, p1, p2};\n    }\n};"
}