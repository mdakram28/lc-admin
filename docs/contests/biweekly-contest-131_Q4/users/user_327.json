{
    "username": "milesian-c",
    "submission": "struct syq{\n    int maxL;\n    int maxR;\n    int max;\n    int l,r;\n    int sum;\n}a[2000020];\nbool used[600020];\nint lft,rgt,opt;\nclass Solution {\npublic:\n    void create(int r,int x,int y){\n    //    printf(\"create: %d %d %d\\n\",r,x,y);\n        a[r].l = x;\n        a[r].r = y;\n        a[r].sum = a[r].maxL = a[r].maxR = a[r].max = y-x+1;\n        if(x == y){\n            return;\n        }\n        int mid = (x+y) >> 1;\n        create(r<<1,x,mid);\n        create(r<<1|1,mid+1,y);\n    }\n    void update(syq &t, syq t1, syq t2){\n        t.l = t1.l;\n        t.r = t2.r;\n        t.sum = t1.sum + t2.sum;\n        t.maxL = t1.maxL;\n        if(t1.maxL == t1.sum) t.maxL = t1.sum + t2.maxL;\n        t.maxR = t2.maxR;\n        if(t2.maxR == t2.sum && (!used[t2.l])) t.maxR = t2.sum + t1.maxR;\n        \n        t.max = max(t.maxL, t.maxR);\n        t.max = max(t.max, max(t1.max, t2.max));\n        if(!used[t2.l])t.max = max(t.max, t1.maxR + t2.maxL);\n        \n    //    printf(\"update: %d %d %d %d %d\\n\",t.l,t.r,t.maxL, t.maxR, t.max);\n    }\n    syq query(int r){\n        \n        if(a[r].r <= rgt)return a[r];\n        int mid = a[r<<1].r;\n        if(rgt <= mid)return query(r<<1);\n        syq t,t1,t2;\n        t1 = a[r<<1];\n        t2 = query(r<<1|1);\n       // printf(\"update: %d %d %d %d %d %d\\n\", t1.maxL, t1.maxR, t1.max, t2.maxL, t2.maxR, t2.max);\n        update(t,t1,t2);\n       // printf(\"query: %d %d %d %d %d\\n\", t.l, t.r, t.maxL, t.maxR, t.max);\n        return t;\n    }\n    void insert(int r){\n        if(a[r].l == a[r].r){\n            a[r].maxL = 0;\n            a[r].maxR = 1;\n            return;\n        }\n        int mid = a[r<<1].r;\n        if(lft <= mid) insert(r<<1); else insert(r<<1|1);\n        update(a[r], a[r<<1], a[r<<1|1]);\n       // printf(\"insert: %d %d %d %d %d %d\\n\",lft, a[r].l, a[r].r, a[r].maxL, a[r].maxR, a[r].max);\n    }\n    vector<bool> getResults(vector<vector<int>>& queries) {\n        int m = queries.size();\n        create(1,0, m*3+1);\n        for(int i=0;i<=m*3+1;++i)used[i] = false;\n        \n        //int m = queries.size();\n        vector<bool> ret;\n        //return ret;\n        for(int i=0;i<m;++i){\n            int opt = queries[i][0];\n            if(opt == 1){\n                lft = rgt = queries[i][1];\n                used[lft] = true;\n                insert(1);\n            }else{\n                lft = 0;\n                rgt = queries[i][1] - 1;\n                int z = query(1).max;\n               // printf(\"ret: %d %d %d\\n\",rgt, z, queries[i][2]);\n                if(z >= queries[i][2]) ret.push_back(true);\n                else ret.push_back(false);\n            }\n        }\n    //    printf(\"==========\\n\");\n        return ret;\n    }\n};",
    "submit_ts": 1716650902.0
}