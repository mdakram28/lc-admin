{
    "username": "zhenliang153",
    "submission": "class Solution:\n    def minChanges(self, nums: List[int], k: int) -> int:\n        def get(num):\n            # [0, k]\u4e0enum\u8ddd\u79bb\n            l, r = 0, 0\n            if num < 0:\n                l, r = -num, k - num\n            elif num > k:\n                l, r = num - k, num\n            else:\n                l, r = 0, max(num, k - num)\n            return l, r\n        ret = len(nums)\n        i, j = 0, len(nums) - 1\n        dp = [0] * (2 + 10**5)\n        dp[0] = len(nums)\n        dp[-1] = -len(nums)\n        while i < j:\n            diff = abs(nums[i] - nums[j])\n            dp[diff] -= 1\n            dp[diff + 1] += 1\n            li, ri = get(nums[i])\n            lj, rj = get(nums[j])\n            intervals = [[li, ri], [lj, rj]]\n            intervals = self.merge(intervals)\n            for l, r in intervals:\n                dp[l] -= 1\n                dp[r + 1] += 1\n            i += 1\n            j -= 1\n        ans = 0\n        for r in dp[:-1]:\n            ans += r\n            # print(ret, ans)\n            ret = min(ret, ans)\n        return ret\n    \n    # https://leetcode.cn/problems/SsGoHC/solutions/1036659/he-bing-qu-jian-by-leetcode-solution-ghjl/\n    def merge(self, intervals: List[List[int]]) -> List[List[int]]:\n        intervals.sort(key=lambda x: x[0])\n        merged = []\n        for interval in intervals:\n            if not merged or merged[-1][1] < interval[0]:\n                merged.append(interval)\n            else:\n                merged[-1][1] = max(merged[-1][1], interval[1])\n        return merged\n                \n            \n            \n            \n            \n        \n            \n        ",
    "submit_ts": "1721489215",
    "subm_id": "548317823"
}