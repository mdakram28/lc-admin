{
    "username": "jakonen",
    "submission": "class Solution {\npublic:\n    struct Trie {\n        int cost = -1;\n        unordered_map<char, Trie*> next;\n    };\n    Trie root;\n    \n    vector<int> cache;\n    \n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int n = words.size();\n        for (int i = 0; i < n; ++i) {\n            Trie* node = &root;\n            for (int j = 0; j < words[i].size(); ++j) {\n                Trie*& nextNode = node->next[words[i][j]];\n                if (nextNode == nullptr)\n                    nextNode = new Trie;\n                node = nextNode;\n            }\n            if (node->cost == -1)\n                node->cost = costs[i];\n            else\n                node->cost = min(node->cost, costs[i]);\n        }\n        \n        cache.resize(target.size(), INT_MAX);\n        \n        return minCost(target, 0, INT_MAX);\n    }\n    \n    int minCost(const string& target, int start, int maxCost) {\n        int n = target.size();\n        if (start == n)\n            return 0;\n        \n        int& lowest = cache[start];\n        if (lowest != INT_MAX)\n            return lowest;\n        \n        Trie* node = &root;\n        for (int i = start; i < n; ++i) {\n            if (node->next.count(target[i]) == 0)\n                break;\n            \n            node = node->next[target[i]];\n            \n            if (node->cost != -1 && node->cost < maxCost) {\n                int suffixCost = minCost(target, i+1, maxCost - node->cost);\n                if (suffixCost != -1) {\n                    lowest = min(lowest, node->cost + suffixCost);\n                }\n            }\n        }\n        return lowest != INT_MAX ? lowest : -1;\n    }\n};",
    "submit_ts": "1720322747",
    "subm_id": "1312358094"
}