{
    "username": "sumitpadadune1689",
    "submission": "class Solution {\n    class TrieNode {\n        TrieNode[] links;\n        boolean flag;\n        int minCost;\n\n        public TrieNode() {\n            links = new TrieNode[26];\n            flag = false;\n            minCost = Integer.MAX_VALUE;\n        }\n\n        public boolean containsKey(char ch) {\n            return links[ch - 'a'] != null;\n        }\n\n        public void put(char ch, TrieNode node) {\n            links[ch - 'a'] = node;\n        }\n\n        public TrieNode get(char ch) {\n            return links[ch - 'a'];\n        }\n\n        public void setEnd(int cost) {\n            flag = true;\n            minCost = Math.min(minCost, cost);\n        }\n\n        public boolean isEnd() {\n            return flag;\n        }\n    }\n\n    class Trie {\n        TrieNode root;\n\n        public Trie() {\n            root = new TrieNode();\n        }\n\n        public void insert(String word, int cost) {\n            TrieNode node = root;\n            for (char c : word.toCharArray()) {\n                if (!node.containsKey(c)) {\n                    node.put(c, new TrieNode());\n                }\n                node = node.get(c);\n            }\n            node.setEnd(cost);\n        }\n\n        public int getMinCost(String word) {\n            TrieNode node = root;\n            for (char c : word.toCharArray()) {\n                if (!node.containsKey(c)) {\n                    return -1;\n                }\n                node = node.get(c);\n            }\n            if (!node.isEnd()) {\n                return -1;\n            }\n            return node.minCost;\n        }\n    }\n\n    public int minimumCost(String target, String[] words, int[] costs) {\n        Trie trie = new Trie();\n\n        // Insert all words into Trie with respective costs\n        if(target.length() == 0)return 0;\n        for (int i = 0; i < words.length; ++i) {\n            trie.insert(words[i], costs[i]);\n        }\n\n        int targetLen = target.length();\n        int[] dp = new int[targetLen + 1];\n        Arrays.fill(dp, Integer.MAX_VALUE);\n        dp[0] = 0;\n\n        // Calculate minimum cost to form each prefix of target\n        for (int i = 0; i < targetLen; ++i) {\n            if (dp[i] == Integer.MAX_VALUE) continue;\n\n            TrieNode curr = trie.root;\n            for (int j = i; j < targetLen; ++j) {\n                char c = target.charAt(j);\n                if (!curr.containsKey(c)) break;\n                curr = curr.get(c);\n\n                if (curr.isEnd()) {\n                    dp[j + 1] = Math.min(dp[j + 1], dp[i] + curr.minCost);\n                }\n            }\n        }\n\n        return dp[targetLen] == Integer.MAX_VALUE ? -1 : dp[targetLen];\n    }\n}\n",
    "submit_ts": "1720324770",
    "subm_id": "1312407783"
}