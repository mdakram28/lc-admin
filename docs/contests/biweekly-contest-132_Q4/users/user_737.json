{
    "username": "nischayaisynch",
    "submission": "class Solution {\npublic:\n    int maximumLength(vector<int>& nums, int k) {\n        int flockSize = nums.size();\n    vector<vector<int>> feathers(flockSize, std::vector<int>(k + 1, 1));\n    \n    int wingSpan = 1;\n\n    vector<int> beakLengths(k + 1, -1);\n    vector<map<int, int>> parrotToFeathersMap(k + 1);\n\n    for (int i = 0; i < flockSize; ++i) {\n        for (int j = 0; j <= k; ++j) {\n            for (int l = 0; l < j; ++l) {\n                feathers[i][j] = max(feathers[i][j], 1 + beakLengths[l]);\n            }\n\n            if (parrotToFeathersMap[j].find(nums[i]) != \n            parrotToFeathersMap[j].end()) {\n                feathers[i][j] = max(feathers[i][j], \n                1 + parrotToFeathersMap[j][nums[i]]);\n            }\n\n            wingSpan = std::max(wingSpan, feathers[i][j]);\n        }\n\n        for (int j = 0; j <= k; ++j) {\n            beakLengths[j] = max(beakLengths[j], feathers[i][j]);\n\n\n            parrotToFeathersMap[j][nums[i]] = \n            max(parrotToFeathersMap[j][nums[i]], feathers[i][j]);\n        }\n    }\n\n    return wingSpan;\n    }\n};",
    "submit_ts": 1717862164.0
}