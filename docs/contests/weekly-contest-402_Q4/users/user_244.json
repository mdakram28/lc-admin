{
    "username": "Fabian0",
    "submission": "class Solution {\n    public List<Integer> countOfPeaks(int[] nums, int[][] queries) {\n        \n        SegmentTree st = new SegmentTree(0, nums.length+1);\n        \n        for(int i = 1; i < nums.length-1; i++){\n            if(nums[i] > nums[i-1] && nums[i] > nums[i+1]){\n                st.add(i);\n            }\n        }\n        \n        List<Integer> ret = new ArrayList<>();\n        \n        \n        for(int[] query : queries){\n            int type = query[0];\n            \n            if(type == 1){\n                ret.add(st.range(query[1]+1, query[2]-1));\n                continue;\n            }\n            \n            \n            int i = query[1];\n            int newVal = query[2];\n            \n            boolean wasLeftPeak = isPeak(i-1, nums);\n            boolean wasMiddlePeak = isPeak(i, nums);\n            boolean wasRightPeak = isPeak(i+1, nums);\n            \n            nums[i] = newVal;\n            \n            boolean isLeftPeak = isPeak(i-1, nums);\n            boolean isMiddlePeak = isPeak(i, nums);\n            boolean isRightPeak = isPeak(i+1, nums);\n            \n            if(wasLeftPeak && isLeftPeak==false)st.remove(i-1);\n            if(wasMiddlePeak && isMiddlePeak==false)st.remove(i);\n            if(wasRightPeak && isRightPeak==false)st.remove(i+1);\n            \n            if(wasLeftPeak==false && isLeftPeak)st.add(i-1);\n            if(wasMiddlePeak==false && isMiddlePeak)st.add(i);\n            if(wasRightPeak==false && isRightPeak)st.add(i+1);\n            \n        }\n            \n            \n        return ret;\n        \n    }\n    \n    \n    \n    \n    private boolean isPeak(int i, int[] nums){\n        if(i <= 0 || i >= nums.length-1)return false;\n        return nums[i] > nums[i-1] && nums[i] > nums[i+1];\n    }\n    \n    \n    \n    \n    \n    \n    public class SegmentTree{\n        int l, r,mid, count;\n        SegmentTree left,right;\n\n        public SegmentTree(int l, int r){\n            this.l = l;\n            this.r = r;\n            mid = l + (r-l)/2;\n            if(l==r)return;\n            left = new SegmentTree(l,mid); \n            right = new SegmentTree(mid+1,r);\n        }\n\n        // -------us\n        //-------------\n        public int range(int leftIndex, int rightIndex){\n            if(leftIndex > r || rightIndex < l)return 0;\n            if(leftIndex <= l && rightIndex >= r)return count;\n            return left.range(leftIndex, rightIndex) + right.range(leftIndex, rightIndex);\n        }\n\n        private void add(int index){\n            count++;\n            if(l==r)return;\n            if(index <= mid){\n                left.add(index);\n            }else{\n                right.add(index);\n            }\n        }\n        \n        private void remove(int index){\n            count--;\n            if(l==r)return;\n            if(index <= mid){\n                left.remove(index);\n            }else{\n                right.remove(index);\n            }\n        }\n\n    }\n    \n    \n    \n    \n    \n}",
    "submit_ts": 1718506936.0
}