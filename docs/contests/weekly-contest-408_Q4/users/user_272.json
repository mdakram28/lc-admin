{
    "username": "shrikant11",
    "submission": "class Solution {\npublic:\n    bool canReachFromBottom(vector<vector<int>>& adj, int curr, unordered_set<int>& left, unordered_set<int>& right, unordered_set<int>& top, unordered_set<int>& bottom){\n        queue<int> q;\n        vector<int> visited(adj.size(), false);\n\n        visited[curr] = true;\n        q.push(curr);\n\n        while (!q.empty()) {\n            int currentNode = q.front();\n            q.pop();\n            if(left.find(currentNode) != left.end() || top.find(currentNode) != top.end()) return true;\n\n            for (int neighbor : adj[currentNode]) {\n                if (!visited[neighbor]) {\n                    visited[neighbor] = true;\n                    q.push(neighbor);\n                }\n            }\n        }\n\n        return false;\n    }\n\n    bool canReachCorner(int X, int Y, vector<vector<int>>& circles) {\n        int n = circles.size();\n        vector<vector<int>> adj(n);\n\n        for (int i = 0; i < n; i++) {\n            for (int j = i+1; j < n; j++) {\n                double x1 = circles[i][0], y1 = circles[i][1], x2 = circles[j][0],\n                    y2 = circles[j][1];\n                double r1 = circles[i][2], r2 = circles[j][2];\n                double d = sqrt((x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2));\n\n                if(d <= (double)(r1+r2)){\n                    adj[i].push_back(j);\n                    adj[j].push_back(i);\n                }\n            }\n        }\n\n        unordered_set<int> left, right, top, bottom;\n\n        for(int i=0; i<n; i++){\n            int x = circles[i][0], y = circles[i][1], r = circles[i][2];\n            if(x <= r) left.insert(i);\n            if(y <= r) bottom.insert(i);\n            if(X-x <= r) right.insert(i);\n            if(Y-y <= r) top.insert(i);\n        }\n\n        for(auto i:bottom) if(canReachFromBottom(adj, i, left, right, top, bottom)) return false;\n\n        for(auto i:right) if(canReachFromBottom(adj, i, left, right, top, bottom)) return false;\n\n        return true;\n    }\n};",
    "submit_ts": "1722136699",
    "subm_id": "1335742365"
}