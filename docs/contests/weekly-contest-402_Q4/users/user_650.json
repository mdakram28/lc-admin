{
    "username": "mipha-2022",
    "submission": "# \u7ebf\u6bb5\u6811\u7684\u6709\u6548\u7d22\u5f15\u4ece1\u5f00\u59cb\n# \u5bf9\u4e8e\u5e8f\u53f7\u4e3ak\u7684\u7ebf\u6bb5\u6811\uff0c\u5de6\u5b69\u5b50\u662f2*k,\u53f3\u5b69\u5b50\u662f2*k+1\n# \u7ebf\u6bb5\u6811\u63a8\u8350\u4f7f\u7528\u5de6\u95ed\u53f3\u95ed\u533a\u95f4\u6765\u5904\u7406\u95ee\u9898\n\nclass SegmentTree:\n    def __init__(self,nums):\n        self.nums = nums\n        n = len(nums)\n        # # f\u8bb0\u5f55\u7684\u662f\u7279\u5b9a\u533a\u95f4\uff0cf[k]\uff0c\u5e8f\u53f7\u4e3ak\u7684\u70b9\uff1a\u8be5\u8282\u70b9\u638c\u7ba1\u7684\u7d22\u5f15\u4e3al,r\uff0c\u503c\u533a\u95f4l~r\u7684\u6570\u5b57\u603b\u548c\n        self.f = [0 for i in range(4*n+4)]\n        self.buildTree(1,0,n-1)\n    \n    # [l,mid] \u548c [mid+1,r]\n    def pushup(self,leftPart,rightPart,l,mid,r):\n        res = leftPart + rightPart\n        # \u7236\u8282\u70b9\u7684\u4fe1\u606f\u4e3a\u5de6\u53f3\u5b69\u5b50\u6c47\u603b\n        # \u51d1\u4e0d\u591f\u4e09\u4e2a\n        if r - l + 1 <= 2:\n            return res\n        \n        # \u5de6\u4fa7\uff0cmid\u4f5c\u4e3a\u5cf0\n        if mid - l + 1 >= 2:\n            a,b,c = self.nums[mid-1],self.nums[mid],self.nums[mid+1]\n            if b > a and b > c:\n                res += 1\n        \n        # \u53f3\u4fa7\uff0cmid+1\u4f5c\u4e3a\u5cf0\n        if r - (mid+1) + 1 >= 2:\n            a,b,c = self.nums[mid],self.nums[mid+1],self.nums[mid+2]\n            if b > a and b > c:\n                res += 1\n\n        return res\n\n    def buildTree(self,k,l,r):\n        # \u5e8f\u53f7\u4e3ak\u7684\u7d22\u5f15\uff0c\u638c\u7ba1\u7684\u8303\u56f4\u662fl~r\n        # \u8fd9\u91cc\u8981\u6ce8\u610f\uff0c\u5bf9\u4e8e\u4e00\u68f5\u6570\u7ec4\u957f\u5ea6\u786e\u5b9a\u7684\u7ebf\u6bb5\u6811\uff0ck\u662f\u53ef\u4ee5\u552f\u4e00\u786e\u5b9al,r\u7684\n        # \u4f8b\u5982\u6839\u8282\u70b91 \u4e00\u5b9a\u5bf9\u5e94 1~n\n        # \u5373\u540c\u4e00\u4e2ak\u5bf9\u5e94\u552f\u4e00\u7684l,r\n        if l == r: \n            # \u53f6\u5b50\u8282\u70b9\n            # \u53ea\u6709\u81ea\u5df1\uff0c\u80af\u5b9a\u6ca1\u5cf0\n            self.f[k] = 0\n            return \n        mid = (l+r)//2\n        # \u5206\u6cbb + \u540e\u5e8f\u904d\u5386\u7684\u601d\u60f3\n        self.buildTree(2*k,l,mid)       # \u5904\u7406\u5de6\u5b69\u5b50\n        self.buildTree(2*k+1,mid+1,r)     # \u5904\u7406\u53f3\u5b69\u5b50\n\n        self.f[k] = self.pushup(self.f[2*k],self.f[2*k+1],l,mid,r)\n        \n\n        \n    # \u66f4\u65b0\u5355\u70b9\uff0c\u8bbe\u7acb\u969c\u788d\u7269\n    def update(self,k,l,r,i):\n        # \u5e8f\u53f7\u4e3ak\u7684\u7d22\u5f15\uff0c\u638c\u7ba1\u7684\u8303\u56f4\u662fl~r\n        if l == r:\n            self.f[k] = 0\n            # \u53f6\u5b50\u8282\u70b9\n            return \n        mid = (l+r)//2\n        # \u770b\u7d22\u5f15i\u5728\u5de6\u53f3\u5b50\u6811\u7684\u54ea\u4e00\u8fb9\u3002\u9012\u5f52\u66f4\u65b0\n        if i <= mid: # \u5728\u5de6\u5b50\u6811\n            self.update(2*k,l,mid,i)\n        elif i > mid: # \u5728\u53f3\u5b50\u6811\n            self.update(2*k+1,mid+1,r,i)\n        \n        self.f[k] = self.pushup(self.f[2*k],self.f[2*k+1],l,mid,r)\n    \n    def query(self,k,l,r,start,end):\n        # start~end\u59cb\u7ec8\u662fl~r\u7684\u5b50\u533a\u95f4\n        # \u5e8f\u53f7\u4e3ak\u7684\u7d22\u5f15\uff0c\u638c\u7ba1\u7684\u8303\u56f4\u662fl~r\n        # \u5728\u6574\u68f5\u6811\u4e0a\u8fdb\u884c\u641c\u5bfb start~end \u7d22\u5f15\u6240\u6c47\u603b\u7684\u8303\u56f4\u548c\n        if l == start and r == end:\n            return self.f[k]\n        mid = (l+r)//2\n        if end <= mid: # \u5982\u679cstart~end\u5b8c\u5168\u5728\u5de6\u534a\u8fb9\uff0c\u5219\u53ea\u9700\u8981\u7b97\u5de6\u5b50\u6811\n            return self.query(2*k,l,mid,start,end)\n        if mid < start: # \u5982\u679cstart~end\u5b8c\u5168\u5728\u53f3\u534a\u8fb9\uff0c\u5219\u53ea\u9700\u8981\u7b97\u53f3\u5b50\u6811\n            return self.query(2*k+1,mid+1,r,start,end)\n        # \u5426\u5219\uff0c\u9700\u8981\u540c\u65f6\u8003\u8651\u5de6\u53f3\u5b69\u5b50\n        leftPart = self.query(2*k,l,mid,start,mid) # \u6ce8\u610f\uff1a\u5728\u8fd9\u91cc\u6700\u540e\u4e00\u4e2a\u53c2\u6570\u662fmid\u800c\u4e0d\u662fend\n        rightPart = self.query(2*k+1,mid+1,r,mid+1,end) # \u6ce8\u610f\uff1a\u5728\u8fd9\u91cc\u5012\u6570\u7b2c\u4e8c\u4e2a\u53c2\u6570\u662fmid+1\u800c\u4e0d\u662fstart\n\n        # \u7236\u8282\u70b9\u7684\u4fe1\u606f\u4e3a\u5de6\u53f3\u5b69\u5b50\u6c47\u603b    \n        return self.pushup(leftPart,rightPart,start,mid,end)\n\n\nclass Solution:\n    def countOfPeaks(self, nums: List[int], queries: List[List[int]]) -> List[int]:\n        tree = SegmentTree(nums)\n        res = []\n        n = len(nums)\n        for op,x,y in queries:\n            if op == 1:\n                res.append(tree.query(1,0,n-1,x,y))\n            else:\n                tree.nums[x] = y\n                tree.update(1,0,n-1,x)\n        return res\n            ",
    "submit_ts": "1718506795",
    "subm_id": "539777301"
}