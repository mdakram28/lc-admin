{
    "username": "jawakarsri",
    "submission": "\nclass Solution {\npublic:\n    int bfs(std::vector<std::vector<int>> &graph, int start, int t1, int t2, int nodes) {\n        std::queue<int> q;\n        std::vector<int> visited(nodes + 4, 0);\n        q.push(start);\n        visited[start] = 1;\n        \n        while (!q.empty()) {\n            int u = q.front();\n            q.pop();\n            for (int v : graph[u]) {\n                if (!visited[v]) {\n                    q.push(v);\n                    visited[v] = 1;\n                }\n            }\n        }\n        return visited[t1] || visited[t2];\n    }\n    \n    bool canReachCorner(int X, int Y, std::vector<std::vector<int>>& c2) {\n        std::vector<std::pair<std::pair<int, int>, int>> c(c2.size());\n        std::vector<std::vector<int>> g(c2.size() + 4);\n        int n = c2.size();\n        \n        for (int i = 0; i < n; ++i) {\n            c[i].first.first = c2[i][0];\n            c[i].first.second = c2[i][1];\n            c[i].second = c2[i][2];\n        }\n        \n        for (int i = 0; i < n; ++i) {\n            if (c[i].first.first <= c[i].second) {\n                g[n].push_back(i);\n                g[i].push_back(n);\n            }\n            if (X - c[i].first.first <= c[i].second) {\n                g[n + 2].push_back(i);\n                g[i].push_back(n + 2);\n            }\n            if (c[i].first.second <= c[i].second) {\n                g[n + 1].push_back(i);\n                g[i].push_back(n + 1);\n            }\n            if (Y - c[i].first.second <= c[i].second) {\n                g[n + 3].push_back(i);\n                g[i].push_back(n + 3);\n            }\n            for (int j = i + 1; j < n; ++j) {\n                double d = std::sqrt(std::pow(c[i].first.first - c[j].first.first, 2) +\n                                     std::pow(c[i].first.second - c[j].first.second, 2));\n                int rs = c[i].second + c[j].second;\n                if (rs >= d) {\n                    g[i].push_back(j);\n                    g[j].push_back(i);\n                }\n            }\n        }\n        \n        int blocked = 0;\n        \n        blocked = std::max(blocked, bfs(g, n, n + 1, n + 2, n + 4)); // Check for bottom-left corner\n        blocked = std::max(blocked, bfs(g, n + 3, n + 2, n + 1, n + 4)); // Check for top-right corner\n\n        if (blocked) {\n            return false;\n        }\n        return true;\n    }\n};",
    "submit_ts": "1722136366",
    "subm_id": "1335732174"
}