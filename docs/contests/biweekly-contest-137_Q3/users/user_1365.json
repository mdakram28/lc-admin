{
    "username": "wr339988",
    "submission": "class Solution {\nprivate:\n    typedef pair<int, int> pii;\npublic:\n    long long maximumValueSum(vector<vector<int>>& board) {\n        int m = board.size(), n = board[0].size();\n        vector<vector<pii>> row_max;\n        for(int i = 0; i < m; ++i) {\n            priority_queue<pii, vector<pii>, greater<>> pq;\n            for (int j = 0; j < n; ++j) {\n                pq.push({board[i][j], j});\n                if (pq.size() > 3) {\n                    pq.pop();\n                }\n            }\n            vector<pii> res;\n            while (!pq.empty()) {\n                res.push_back(std::move(const_cast<pii&>(pq.top())));\n                pq.pop();\n            }\n            row_max.push_back(res);\n        }\n        long long res = LLONG_MIN;\n        for (int i = 0; i < m; ++i) {\n            for (int j = i + 1; j < m; ++j) {\n                for (int k = j + 1; k < m; ++k) {\n                    for (auto& [v1, c1]: row_max[i]) {\n                        for (auto& [v2, c2]: row_max[j]) {\n                            if (c1 == c2)   continue;\n                            for (auto& [v3, c3]: row_max[k]) {\n                                if (c3 == c1 || c3 == c2)   continue;\n                                res = max(res, (long long)v1 + v2 + v3);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        return res;\n    }\n};\n",
    "submit_ts": "1723910136",
    "subm_id": "556339719"
}