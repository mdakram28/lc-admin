{
    "username": "Lezhka",
    "submission": "class Solution {\n    public String largestPalindrome(int n, int k) {\n        if (n <= 6) {\n            String result = \"\";\n            for (int i = 1; i < 1000; ++i) {\n                String z = Integer.toString(i);\n                if (z.length() != (n + 1) / 2) {\n                    continue;\n                }\n\n                StringBuilder x = new StringBuilder(z);\n                \n                for (int j = n / 2 - 1; j >= 0; --j) {\n                    x.append(x.charAt(j));\n                }\n\n                String s = x.toString();\n                int b = Integer.parseInt(s);\n\n                if (b % k == 0 && s.compareTo(result) > 0) {\n                    result = s;\n                } \n            } \n\n            return result;\n        }\n\n        if (k == 1 || k == 3 || k == 9) {\n            return \"9\".repeat(n);\n        } else if (k == 2) {\n            String s = \"8\";\n            s = s + \"9\".repeat(n - 2);\n            s = s + \"8\";\n            return s;\n        } else if (k == 4) {\n            String s = \"88\";\n            s = s + \"9\".repeat(n - 4);\n            s = s + \"88\";\n            return s;\n        } else if (k == 5) {\n            String s = \"5\";\n            s = s + \"9\".repeat(n - 2);\n            s = s + \"5\";\n            return s;\n        } else if (k == 6) {\n            if (n % 2 == 1) {\n                String s = \"8\";\n                s = s + \"9\".repeat(n / 2 - 1);\n                s = s + \"8\";\n                s = s + \"9\".repeat(n / 2 - 1);\n                s = s + \"8\";\n                return s;\n            } else {\n                String s = \"8\";\n                s = s + \"9\".repeat(n / 2 - 2);\n                s = s + \"77\";\n                s = s + \"9\".repeat(n / 2 - 2);\n                s = s + \"8\";\n                return s;\n            }\n        } else if (k == 7) {\n            int[] arr = new int[n];\n            boolean done = false;\n            Arrays.fill(arr, 9);\n            for (int i = 9; i >= 0 && !done; --i) {\n                arr[n / 2 + 1] = i;\n                arr[(n - 1) / 2 - 1] = i; \n                for (int j = 9; j >= 0; --j) {\n                    arr[n / 2] = j;\n                    arr[(n - 1) / 2] = j;\n                    if (check(arr)) {\n                        done = true;\n                        break;\n                    }\n                }\n            }\n            StringBuilder s = new StringBuilder();\n            for (int i = 0; i < n; ++i) {\n                s.append(arr[i]);\n            }\n\n            return s.toString();\n\n        } else if (k == 8) {\n            String s = \"888\";\n            s = s + \"9\".repeat(n - 6);\n            s += \"888\";\n            return s;\n        }\n\n        return \"\";\n    }\n\n    public boolean check (int[] s) {\n        int mod = 0;\n        int a = 1;\n        for (int i = s.length - 1; i >= 0; --i) {\n            mod = (a * s[i] + mod) % 7;\n            a = (a * 10) % 7;\n        }\n\n        return mod == 0;\n    }\n\n    //1: 99999 X\n    //2: 89998 X\n    //3: 99999 X\n    //4: 88988 X\n    //5: 59995 X\n    //6: 89898   897798  8998998  X\n    //7: \n    //8: 88888   8889888  X\n    //9: 99999 X\n}",
    "submit_ts": "1723953108",
    "subm_id": "1359812545"
}