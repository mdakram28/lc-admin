{
    "username": "ish159",
    "submission": "#include <vector>\n#include <unordered_map>\n#include <algorithm>\n\nusing namespace std;\n\nclass Solution {\npublic:\nconst int MOD = 1e9 + 7;\nconst int MAX_INVERSIONS = 400;\n    int numberOfPermutations(int n, vector<vector<int>>& requirements) {\n        unordered_map<int, int> reqMap = createRequirementMap(requirements);\n        vector<vector<long>> cnts = initializeDPTable(n, MAX_INVERSIONS);\n\n        for (int length = 1; length <= n; length++) {\n            updateDPTable(length, cnts);\n            enforceRequirements(length, reqMap, cnts);\n        }\n\n        return calculateResult(n, cnts);\n    }\n\nprivate:\n    unordered_map<int, int> createRequirementMap(const vector<vector<int>>& requirements) {\n        unordered_map<int, int> reqMap;\n        for (const auto& req : requirements) {\n            reqMap[req[0] + 1] = req[1];\n        }\n        return reqMap;\n    }\n\n    vector<vector<long>> initializeDPTable(int n, int maxInversions) {\n        vector<vector<long>> cnts(n + 1, vector<long>(maxInversions + 1, 0));\n        cnts[0][0] = 1;\n        return cnts;\n    }\n\n    void updateDPTable(int length, vector<vector<long>>& cnts) {\n        for (int inv = 0; inv <= MAX_INVERSIONS; inv++) {\n            for (int np = 0; np < length; np++) {\n                int prev = inv - np;\n                if (prev >= 0) {\n                    cnts[length][inv] = (cnts[length][inv] + cnts[length - 1][prev]) % MOD;\n                }\n            }\n        }\n    }\n\n    void enforceRequirements(int length, const unordered_map<int, int>& reqMap, vector<vector<long>>& cnts) {\n        if (reqMap.find(length) != reqMap.end()) {\n            int targetInv = reqMap.at(length);\n            for (int inv = 0; inv <= MAX_INVERSIONS; inv++) {\n                if (inv != targetInv) {\n                    cnts[length][inv] = 0;\n                }\n            }\n        }\n    }\n\n    int calculateResult(int n, const vector<vector<long>>& cnts) {\n        long result = 0;\n        for (const auto& count : cnts[n]) {\n            result = (result + count) % MOD;\n        }\n        return static_cast<int>(result);\n    }\n};\n",
    "submit_ts": 1719070226.0
}