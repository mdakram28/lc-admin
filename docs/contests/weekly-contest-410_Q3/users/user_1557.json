{
    "username": "ayushmistri",
    "submission": "class Solution {\n    public int countOfPairs(int[] nums) {\n        final int MOD = 1_000_000_007;\n        int n = nums.length;\n        int maxVal = 50; // Maximum value for nums[i] based on constraints\n\n        // dp[x][y] represents the number of ways to have arr1[i] = x and arr2[i] = y\n        int[][] dp = new int[maxVal + 1][maxVal + 1];\n        int[][] prefixSum = new int[maxVal + 1][maxVal + 1];\n        \n        // Initialize DP for the first element\n        for (int x = 0; x <= nums[0]; x++) {\n            int y = nums[0] - x;\n            if (y >= 0 && y <= maxVal) {\n                dp[x][y] = 1;\n            }\n        }\n        \n        // Calculate prefix sums for the first element\n        for (int x = 0; x <= maxVal; x++) {\n            for (int y = 0; y <= maxVal; y++) {\n                prefixSum[x][y] = dp[x][y];\n                if (x > 0) prefixSum[x][y] = (prefixSum[x][y] + prefixSum[x - 1][y]) % MOD;\n                if (y > 0) prefixSum[x][y] = (prefixSum[x][y] + prefixSum[x][y - 1]) % MOD;\n                if (x > 0 && y > 0) prefixSum[x][y] = (prefixSum[x][y] - prefixSum[x - 1][y - 1] + MOD) % MOD;\n            }\n        }\n\n        // Fill DP array for subsequent elements\n        for (int i = 1; i < n; i++) {\n            int[][] newDp = new int[maxVal + 1][maxVal + 1];\n            int[][] newPrefixSum = new int[maxVal + 1][maxVal + 1];\n\n            for (int x = 0; x <= nums[i]; x++) {\n                int y = nums[i] - x;\n                if (y < 0 || y > maxVal) continue;\n\n                // Calculate new DP values using prefix sums\n                int prevSum = prefixSum[x][maxVal];\n                if (y > 0) prevSum = (prevSum - prefixSum[x][y - 1] + MOD) % MOD;\n                \n                newDp[x][y] = prevSum % MOD;\n            }\n\n            // Update prefix sums for the new DP array\n            for (int x = 0; x <= maxVal; x++) {\n                for (int y = 0; y <= maxVal; y++) {\n                    newPrefixSum[x][y] = newDp[x][y];\n                    if (x > 0) newPrefixSum[x][y] = (newPrefixSum[x][y] + newPrefixSum[x - 1][y]) % MOD;\n                    if (y > 0) newPrefixSum[x][y] = (newPrefixSum[x][y] + newPrefixSum[x][y - 1]) % MOD;\n                    if (x > 0 && y > 0) newPrefixSum[x][y] = (newPrefixSum[x][y] - newPrefixSum[x - 1][y - 1] + MOD) % MOD;\n                }\n            }\n            dp = newDp;\n            prefixSum = newPrefixSum;\n        }\n\n        // Sum up all valid pairs\n        int totalCount = 0;\n        for (int x = 0; x <= maxVal; x++) {\n            for (int y = 0; y <= maxVal; y++) {\n                totalCount = (totalCount + dp[x][y]) % MOD;\n            }\n        }\n\n        return totalCount;\n    }\n}",
    "submit_ts": "1723345944",
    "subm_id": "1351566728"
}