{
    "username": "WhyAyushOp",
    "submission": "const MOD = 1_000_000_007;\nconst MAX_INVERSIONS = 400;\n\nfunction createReqMap(requirements: number[][]): Map<number, number> {\n    const reqMap = new Map<number, number>();\n    for (const [index, inv] of requirements) {\n        reqMap.set(index + 1, inv);\n    }\n    return reqMap;\n}\n\nfunction initializePermCounts(n: number): number[][] {\n    const permCounts: number[][] = Array.from({ length: n + 1 }, () => Array(MAX_INVERSIONS + 1).fill(0));\n    permCounts[0][0] = 1;\n    return permCounts;\n}\n\nfunction calculatePermCounts(n: number, reqMap: Map<number, number>, permCounts: number[][]): void {\n    for (let length = 1; length <= n; length++) {\n        for (let inv = 0; inv <= MAX_INVERSIONS; inv++) {\n            for (let newPos = 0; newPos < length; newPos++) {\n                const prevInv = inv - newPos;\n                if (prevInv >= 0) {\n                    permCounts[length][inv] = (permCounts[length][inv] + permCounts[length - 1][prevInv]) % MOD;\n                }\n            }\n        }\n\n        if (reqMap.has(length)) {\n            const targetInv = reqMap.get(length);\n            for (let inv = 0; inv <= MAX_INVERSIONS; inv++) {\n                if (inv !== targetInv) {\n                    permCounts[length][inv] = 0;\n                }\n            }\n        }\n    }\n}\n\nfunction calculateResult(n: number, permCounts: number[][]): number {\n    let result = 0;\n    for (const count of permCounts[n]) {\n        result = (result + count) % MOD;\n    }\n    return result;\n}\n\nfunction numberOfPermutations(n: number, requirements: number[][]): number {\n    const reqMap = createReqMap(requirements);\n    const permCounts = initializePermCounts(n);\n    calculatePermCounts(n, reqMap, permCounts);\n    return calculateResult(n, permCounts);\n}\n",
    "submit_ts": "1719069967",
    "subm_id": "1296811102"
}