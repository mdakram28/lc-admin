{
    "username": "N_E_E_R_A_J",
    "submission": "const char fastio = [](){\n    ios_base::sync_with_stdio(false);\n    cin.tie(nullptr);\n    cout.tie(nullptr);\n    return 0;\n}();\n\ntypedef long long int ll;\ntypedef pair<int, int> pii;\ntypedef pair<ll, ll> pll;\n\n#define ALL(iterable) (iterable).begin(), (iterable).end()\n#define RALL(iterable) (iterable).rbegin(), (iterable).rend()\n#define MIN(a, b) ((a) < (b) ? (a) : (b))\n#define MAX(a, b) ((a) > (b) ? (a) : (b))\n#define ROUND(x) (((x) >= 0) ? (ll)((x) + 0.5) : (ll)((x) - 0.5))\n#define DEBUG(...) cout << \"[DEBUG-\" << __LINE__ << \"]:\"; debug_cout(__VA_ARGS__);\n\nshort dx4[] = {-1, 0, 1, 0};\nshort dy4[] = {0, 1, 0, -1};\n\nshort dx8[] = {-1, -1, -1, 0, 1, 1, 1, 0};\nshort dy8[] = {-1, 0, 1, 1, 1, 0, -1, -1};\n\nshort kx[] = {2, 1, -1, -2, -2, -1, 1, 2};\nshort ky[] = {1, 2, 2, 1, -1, -2, -2, -1};\n\ntemplate<typename T>\nvoid debug_cout(const T& arg) {\n    cout << \" \" << arg;\n}\n\ntemplate<typename T, typename... Args>\nvoid debug_cout(const T& firstArg, const Args&... args) {\n    cout << \" \" << firstArg;\n    debug_cout(args...);\n}\n\ntemplate <typename T1, typename T2>\nostream &operator<<(ostream &out, pair<T1, T2> &p)\n{\n    out << \"(\" << p.first << \",\" << p.second << \")\";\n    return out;\n}\n\ntemplate <typename T>\nostream &operator<<(ostream &out, vector<T> &vec)\n{\n    out << \"[\";\n    for (auto it = vec.begin(); it != vec.end(); ++it)\n    {\n        if (it != vec.begin())\n            out << \",\";\n        out << *it;\n    }\n    out << \"]\";\n    return out;\n}\n\nclass Solution {\nprivate:\n    vector<vector<int>> getTree(vector<vector<int>> &edges)\n    {\n        int n = edges.size() + 1;\n        vector<vector<int>> tree(n);\n        \n        for (auto &&edge: edges)\n        {\n            tree[edge[0]].push_back(edge[1]);\n            tree[edge[1]].push_back(edge[0]);\n        }\n        \n        return tree;\n    }\n    \n    int diameter(vector<vector<int>> &tree, int current, int parent, int &dia)\n    {\n        int maxx1 = -1, maxx2 = -1, height = 0;\n        for (auto &&ngbr: tree[current])\n        {\n            if (ngbr == parent)\n                continue;\n            \n            int h = diameter(tree, ngbr, current, dia);\n            if (h >= maxx1)\n            {\n                maxx2 = maxx1;\n                maxx1 = h;\n            }\n            else if (h > maxx2)\n                maxx2 = h;\n            \n            dia = max(dia, maxx1 + maxx2 + 2);\n            height = max(height, 1 + maxx1);\n        }\n        \n        return height;\n    }\n\npublic:\n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n        vector<vector<int>> tree1 = getTree(edges1), tree2 = getTree(edges2);\n        int dia1 = 0, dia2 = 0;\n        diameter(tree1, 0, -1, dia1);\n        diameter(tree2, 0, -1, dia2);\n\n        int left1 = dia1 >> 1, right1 = dia1 - left1, left2 = dia2 >> 1, right2 = dia2 - left2;\n        return max({dia1, dia2, left1 + left2 + 1, left1 + right2 + 1, right1 + left2 + 1, right1 + right2 + 1});\n    }\n};",
    "submit_ts": "1719717204",
    "subm_id": "1304385286"
}