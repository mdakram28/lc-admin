{
    "username": "nickshair",
    "submission": "class Solution {\npublic:\n    int minimumDiameterAfterMerge(std::vector<std::vector<int>>& edges1, std::vector<std::vector<int>>& edges2) {\n\n        int d1 = getdDiameter(edges1);\n        int d2 = getdDiameter(edges2);\n        int dm = (d1 / 2 + d1 % 2) + (d2 / 2 + d2 % 2) + 1;\n\n        int result = std::max(d1, d2);\n        result = std::max(result, dm);\n        \n        return result;\n    }\nprivate:\n    int getdDiameter(std::vector<std::vector<int>> &edges){\n        \n        std::unordered_map<int, std::unordered_set<int>> adjList;\n        for (const auto &v : edges){\n            adjList[v[0]].emplace(v[1]);\n            adjList[v[1]].emplace(v[0]);\n        }\n\n        std::unordered_set<int> ust;\n        for (const auto &[v, nbs] : adjList){\n            if (nbs.size() == 1)\n                ust.emplace(v);\n        }\n\n        int counter = 0;\n        while (!ust.empty()){\n            std::unordered_set<int> next;\n            for (const auto &v : ust){\n                \n                if (adjList[v].size() == 0)\n                    return counter * 2;\n                int nb = *(adjList[v].begin());\n\n                if (ust.contains(nb)){\n                    return counter * 2 + 1;\n                }\n\n                adjList[nb].erase(v);\n                if (adjList[nb].size() == 1){\n                    next.emplace(nb);\n                }\n            }\n            ust = next;\n            ++counter;\n        }\n        \n        return 0;\n    }\n};",
    "submit_ts": 1719719355.0
}