{
    "username": "Rook_Lift",
    "submission": "#include <vector>\n#include <set>\n#include <algorithm>\n\nclass Solution {\npublic:\n    #define ll long long int\n\n    long long minimumCost(int m, int n, std::vector<int>& hh, std::vector<int>& vv) {\n        // Sort the vectors in descending order\n        std::sort(hh.begin(), hh.end(), std::greater<int>());\n        std::sort(vv.begin(), vv.end(), std::greater<int>());\n\n        ll hor_cuts = 1, ver_cuts = 1;  // Initial cuts are 1 (each piece is at least 1x1)\n        ll ans = 0;\n\n        size_t h_idx = 0, v_idx = 0;\n\n        while (h_idx < hh.size() && v_idx < vv.size()) {\n            if (hh[h_idx] > vv[v_idx]) {\n                ans += hh[h_idx] * ver_cuts;\n                hor_cuts++;\n                h_idx++;\n            } else {\n                ans += vv[v_idx] * hor_cuts;\n                ver_cuts++;\n                v_idx++;\n            }\n        }\n\n        // Process any remaining horizontal cuts\n        while (h_idx < hh.size()) {\n            ans += hh[h_idx] * ver_cuts;\n            h_idx++;\n        }\n\n        // Process any remaining vertical cuts\n        while (v_idx < vv.size()) {\n            ans += vv[v_idx] * hor_cuts;\n            v_idx++;\n        }\n\n        return ans;\n    }\n};\n",
    "submit_ts": "1720925797",
    "subm_id": "1320266516"
}