{
    "username": "jason_wong1",
    "submission": "class Solution {\n    public int[] shortestDistanceAfterQueries(int n, int[][] queries) {\n        int m = queries.length;\n        int[] res = new int[m];\n        res[0] = n - 1;\n        TreeMap<Integer, int[]> visited = new TreeMap<>();\n\n        for (int i = 0; i < m; i++) {\n            if (i > 0) {\n                res[i] = res[i - 1];\n            }\n            \n            int[] query = queries[i];\n            \n            Map.Entry<Integer, int[]> floor = visited.floorEntry(query[0]);\n            if (floor != null) {\n                if (floor.getValue()[1] >= query[1]) {\n                    continue;\n                }\n            }\n            \n            Map.Entry<Integer, int[]> ceiling = visited.ceilingEntry(query[0]);\n            while (ceiling != null) {\n                if (ceiling.getValue()[1] <= query[1]) {\n                    visited.remove(ceiling.getValue()[0]);\n                    // System.out.println(\"+\" + getCost(ceiling.getValue()));\n                    res[i] += getCost(ceiling.getValue());\n                } else {\n                    break;\n                }\n                ceiling = visited.ceilingEntry(query[0]);\n            }\n            \n            visited.put(query[0], query);\n            res[i] -= getCost(query);\n            // System.out.println(\"-\" + getCost(query));\n        }\n        return res;\n    }\n    \n    private int getCost(int[] query) {\n        return query[1] - query[0] - 1;\n    }\n}",
    "submit_ts": "1722741078",
    "subm_id": "1343736087"
}