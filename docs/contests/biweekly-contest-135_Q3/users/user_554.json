{
    "username": "alicewang20",
    "submission": "class Solution:\n    def minChanges(self, nums: List[int], k: int) -> int:\n        hm = {}\n        n = len(nums)\n        big = None\n        ans = len(nums)\n        pq = []\n        for x in range(len(nums) // 2):\n            diff = abs(nums[x] - nums[n - x - 1])\n            hm[diff] = hm.get(diff, 0) + 1\n            if big == None:\n                big = diff\n            elif hm[big] < hm[diff]:\n                big = diff\n            elif hm[big] == hm[diff] and diff < big:\n                big = diff\n        for val, o in hm.items():\n            pq.append((-o, val))\n        heapq.heapify(pq)\n        while pq:\n            _, big = heapq.heappop(pq)\n            did_two = False\n            tmp_ans = 0\n            for x in range(len(nums) // 2):\n                diff = abs(nums[x] - nums[n - x - 1])\n                if diff == big:\n                    continue\n                if diff > big:\n                    tmp_ans += 1\n                    continue\n                expand = big - diff\n                small = min(nums[x], nums[n - x - 1])\n                large = max(nums[x], nums[n - x - 1])\n                if small < expand and large + expand > k:\n                    tmp_ans += 2\n                    did_two = True\n                else:\n                    tmp_ans += 1\n            ans = min(ans, tmp_ans)\n            if not did_two:\n                return ans\n        return ans\n\n",
    "submit_ts": "1721488049",
    "subm_id": "1327409853"
}