{
    "username": "facug91",
    "submission": "class Solution {\nprivate:\n    map<tuple<long long, long long, int>, int> DP;\n\n    int dp(long long pos, long long jump, int back) {\n//        cout << \"State \" << pos << \" \" << jump << \" \" << back << endl;\n        if (pos < 0) return 0;\n        if (pos == 1 && jump == 0 && back == 0) return 1;\n        auto t = make_tuple(pos, jump, back);\n        if (DP.contains(t)) return DP[t];\n        int ans = 0;\n        if (back == 1) ans += dp(pos + 1, jump, 0);\n        else if (jump > 0) ans += dp(pos - jump, jump / 2, 0) + dp(pos - jump, jump / 2, 1);\n        DP[t] = ans;\n//        cout << \"Val \" << pos << \" \" << jump << \" \" << back << \" -> \" << ans << endl;\n        return ans;\n    }\n\npublic:\n    int waysToReachStair(int k) {\n        DP.clear();\n        int ans = dp(k, 0, 1);\n//        cout << endl;\n        ans += dp(k, 0, 0);\n//        cout << endl;\n        for (long long i = 1; i <= (k+1)*2; i *= 2) {\n            ans += dp(k, i, 1);\n//            cout << endl;\n            ans += dp(k, i, 0);\n//            cout << endl;\n        }\n        return ans;\n    }\n};",
    "submit_ts": "1716089885",
    "subm_id": "1261853769"
}