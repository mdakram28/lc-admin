{
    "username": "redmastic",
    "submission": "class Solution {\n    public boolean canReachCorner(int X, int Y, int[][] circles) {\n        int n = circles.length;\n\n        List<int[]> circleList = new ArrayList<>();\n        List<List<Integer>> adjList = new ArrayList<>(n + 4);\n        \n        for(int i = 0; i < n + 4; i++) {\n            adjList.add(new ArrayList<>());\n        }\n\n        for(int i = 0; i < n; ++i) {\n            circleList.add(new int[]{circles[i][0], circles[i][1], circles[i][2]});\n        }\n\n        for(int i = 0; i < n; ++i) {\n            int[] currentCircle = circleList.get(i);\n\n            if(currentCircle[0] <= currentCircle[2]) {\n                adjList.get(n).add(i);\n                adjList.get(i).add(n);\n            }\n\n            if(X - currentCircle[0] <= currentCircle[2]) {\n                adjList.get(n + 2).add(i);\n                adjList.get(i).add(n + 2);\n            }\n\n            if(currentCircle[1] <= currentCircle[2]) {\n                adjList.get(n + 1).add(i);\n                adjList.get(i).add(n + 1);\n            }\n\n            if(Y - currentCircle[1] <= currentCircle[2]) {\n                adjList.get(n + 3).add(i);\n                adjList.get(i).add(n + 3);\n            }\n\n            for(int j = i + 1; j < n; ++j) {\n                int[] otherCircle = circleList.get(j);\n\n                double d = Math.sqrt(Math.pow(currentCircle[0] - otherCircle[0], 2) + Math.pow(currentCircle[1] - otherCircle[1], 2));\n                \n                if(currentCircle[2] + otherCircle[2] >= d) {\n                    adjList.get(i).add(j);\n                    adjList.get(j).add(i);\n                }\n            }\n        }\n\n        return !(bf(adjList, n, n + 1, n + 2) || bf(adjList, n + 3, n + 2, n + 1));\n    }\n\n    public boolean bf(List<List<Integer>> adjList, int startBottomLeft, int topRight, int topLeft) {\n        Queue<Integer> queue = new LinkedList<>();\n        queue.add(startBottomLeft);\n        \n        boolean[] visited = new boolean[adjList.size()];\n        visited[startBottomLeft] = true;\n\n        while(!queue.isEmpty()) {\n            int current = queue.poll();\n\n            for(int i : adjList.get(current)) {\n                if(!visited[i]) {\n                    queue.add(i);\n                    visited[i] = true;\n                }\n            }\n        }\n\n        return (visited[topRight] || visited[topLeft]);\n    }\n}\n",
    "submit_ts": "1722138655",
    "subm_id": "1335796302"
}