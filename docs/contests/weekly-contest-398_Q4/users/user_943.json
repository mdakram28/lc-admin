{
    "username": "math_pi",
    "submission": "class Solution {\npublic:\n    int waysToReachStair(int k) {\n        \n        map<array<int, 3>, int> mp;\n        int ans = 0;\n        auto dfs = [&](int i, int state, int jump, auto&&dfs) {\n            if(i<0) return 0;\n            if(i-k>1) {\n                return 0;\n            }\n            if(i==k){\n                // cout << i << ' ' << state << ' ' << jump << '\\n';\n                int val = 1;\n                if(jump==0) {\n                    val += dfs(i+1,1,jump+1,dfs);\n                }\n                if(state) {\n\n                    val += dfs(i-1,0,jump,dfs);\n                }\n                return mp[{i, state, jump}] = val;\n            }\n            \n\n            if(mp.find({i, state, jump})!=mp.end()) return mp[{i, state, jump}];\n\n            int res = 0;\n            if(state == 1) res += dfs(i-1, 0, jump,dfs);\n\n            res += dfs(i+(1<<jump),1,jump+1,dfs);\n            \n            return mp[{i, state, jump}] = res;\n            \n        }; \n        return dfs(1, 1, 0,dfs);\n    }\n};",
    "submit_ts": "1716089326",
    "subm_id": "1261839264"
}