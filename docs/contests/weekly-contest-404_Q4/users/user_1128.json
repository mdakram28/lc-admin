{
    "username": "ZlSVzfi1a9",
    "submission": "from typing import List\nfrom collections import deque\n\nclass Solution:\n    def minimumDiameterAfterMerge(self, edges1: List[List[int]], edges2: List[List[int]]) -> int:\n        \n        def bfs_longest_path(edges, n):\n            def bfs(start):\n                dist = [-1] * n\n                dist[start] = 0\n                q = deque([start])\n                farthest_node = start\n                max_dist = 0\n                while q:\n                    node = q.popleft()\n                    for neighbor in adj[node]:\n                        if dist[neighbor] == -1:\n                            dist[neighbor] = dist[node] + 1\n                            q.append(neighbor)\n                            if dist[neighbor] > max_dist:\n                                max_dist = dist[neighbor]\n                                farthest_node = neighbor\n                return farthest_node, max_dist\n\n            adj = [[] for _ in range(n)]\n            for u, v in edges:\n                adj[u].append(v)\n                adj[v].append(u)\n\n            # Find the farthest node from any node (e.g., node 0)\n            farthest_node, _ = bfs(0)\n            # Find the farthest node from this farthest node\n            farthest_node, max_dist = bfs(farthest_node)\n\n            return max_dist\n        \n        # Number of nodes in each tree\n        n1 = len(edges1) + 1\n        n2 = len(edges2) + 1\n        \n        # Compute the diameters of each tree\n        D1 = bfs_longest_path(edges1, n1)\n        D2 = bfs_longest_path(edges2, n2)\n        \n        # Compute the minimum diameter after merging the trees\n        min_diameter = max(D1, D2, (D1 + 1) // 2 + 1 + (D2 + 1) // 2)\n\n        return min_diameter\n\n# Example usage:\nedges1 = [[0, 1], [0, 2], [0, 3]]\nedges2 = [[0, 1]]\nsol = Solution()\nprint(sol.minimumDiameterAfterMerge(edges1, edges2))  # Output: 3\n\nedges1 = [[0, 1], [0, 2], [0, 3], [2, 4], [2, 5], [3, 6], [2, 7]]\nedges2 = [[0, 1], [0, 2], [0, 3], [2, 4], [2, 5], [3, 6], [2, 7]]\nprint(sol.minimumDiameterAfterMerge(edges1, edges2))  # Output: 5",
    "submit_ts": 1719719569.0
}