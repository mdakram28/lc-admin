{
    "username": "szy0",
    "submission": "class Solution:\n    def minFlips(self, grid: List[List[int]]) -> int:\n        m = len(grid)\n        n = len(grid[0])\n        ans = 0\n        # if m == 1:\n        #     one = 0 # pairs of 1, no need to flip\n        #     for c in range(n//2):\n        #         if grid[0][c] != grid[0][n-1-c]:\n        #             ans += 1 # pairs to flip\n        #         else:\n        #             one += 1 if grid[0][c] == 1 else 0\n        #     if one % 2 == 0:\n        #         pass\n        #     else:\n        #         if ans >= 1:\n        #             pass\n        #         else:\n        #             ans += 2 # flip orignal zeor to one\n        #     if n%2==1 and grid[0][n//2] == 1:\n        #         ans += 1\n        #     return ans\n\n        # if n == 1:\n        #     one = 0 # pairs of 1, no need to flip\n        #     for r in range(m//2):\n        #         if grid[r][0] != grid[m-1-r][0]:\n        #             ans += 1 # pairs to flip\n        #         else:\n        #             one += 1 if grid[r][0] == 1 else 0\n        #     if one % 2 == 0:\n        #         pass\n        #     else:\n        #         if ans >= 1:\n        #             pass\n        #         else:\n        #             ans += 2 # flip orignal zeor to one\n        #     if m%2==1 and grid[m//2][0] == 1:\n        #         ans += 1\n        #     return ans\n        \n        for r in range(m//2):\n            for c in range(n//2):\n                # these four cells must be equal\n                s = grid[r][c] + grid[r][n-1-c] + grid[m-1-r][c] + grid[m-1-r][n-1-c]\n                ans += min(s-0, 4-s)\n        \n        # special case: m n is odd (min lane)\n        one = 0\n        ans_tmp = 0\n        if m % 2 == 1:\n            r = m//2\n            for c in range(n//2):\n                if grid[r][c] != grid[r][n-1-c]:\n                    ans_tmp += 1\n                else:\n                    one += 1 if grid[r][c] == 1 else 0\n        if n % 2 == 1:\n            c = n//2\n            for r in range(m//2):\n                if grid[r][c] != grid[m-1-r][c]:\n                    ans_tmp += 1\n                else:\n                    one += 1 if grid[r][c] == 1 else 0\n        \n        if one%2 != 0:\n            if ans_tmp >= 1:\n                pass\n            else:\n                ans_tmp += 2 # flip orignal zeor to one\n\n        # last special case: flip center 1 to 0\n        if m%2 == 1 and n%2 == 1 and grid[m//2][n//2] == 1:\n            ans_tmp += 1\n        return ans + ans_tmp\n        \n",
    "submit_ts": "1722699664",
    "subm_id": "1343218548"
}