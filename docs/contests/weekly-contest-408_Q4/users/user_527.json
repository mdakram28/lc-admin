{
    "username": "aayushraturi",
    "submission": "class Solution\n{\n    public:\n    bool canReachCorner(int X, int Y, vector<vector<int>> &circle)\n    {\n        vector<pair<pair<int, int>, int>> c(circle.size());\n        vector<vector<int>> graph(circle.size() + 4);\n        int n = circle.size();\n\n        for (int i = 0; i < n; ++i)\n        {\n            c[i].first.first = circle[i][0];\n            c[i].first.second = circle[i][1];\n            c[i].second = circle[i][2];\n        }\n\n        for (int i = 0; i < n; ++i)\n        {\n\n            if (c[i].first.first <= c[i].second)\n            {\n                graph[n].push_back(i);\n                graph[i].push_back(n);\n            }\n            if (X - c[i].first.first <= c[i].second)\n            {\n                graph[n + 2].push_back(i);\n                graph[i].push_back(n + 2);\n            }\n            if (c[i].first.second <= c[i].second)\n            {\n                graph[n + 1].push_back(i);\n                graph[i].push_back(n + 1);\n            }\n            if (Y - c[i].first.second <= c[i].second)\n            {\n                graph[n + 3].push_back(i);\n                graph[i].push_back(n + 3);\n            }\n            for (int j = i + 1; j < n; ++j)\n            {\n                double distance = sqrt(pow(c[i].first.first - c[j].first.first, 2) +\n                                       pow(c[i].first.second - c[j].first.second, 2));\n                int radius_sum = c[i].second + c[j].second;\n                if (radius_sum >= distance)\n                {\n                    graph[i].push_back(j);\n                    graph[j].push_back(i);\n                }\n            }\n        }\n\n        int is_blocked = 0;\n        is_blocked = max(is_blocked, bfs(graph,n,n+1,n+2,n+4));\n        is_blocked = max(is_blocked, bfs(graph,n+3,n+2,n+1,n+4)); \n        if (is_blocked)\n        {\n            return false;\n        }\n        return true;\n    }\n\n    int bfs(vector<vector<int>> &graph, int start, int t1, int t2, int nodes)\n        {\n            queue<int> q;\n            vector<int> vis(nodes + 4, 0);\n            q.push(start);\n            vis[start] = 1;\n\n            while (!q.empty()){\n            int u = q.front();\n            q.pop();\n            for (int v : graph[u]){\n                if (!vis[v]){\n                    q.push(v);\n                    vis[v] = 1;\n                }\n            }\n        }\n        return vis[t1] || vis[t2];\n    }\n};",
    "submit_ts": "1722137456",
    "subm_id": "1335764326"
}