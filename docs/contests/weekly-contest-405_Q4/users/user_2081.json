{
    "username": "deepanju014",
    "submission": "struct TrieNode {\n    unordered_map<char, TrieNode*> children;\n    int cost = INT_MAX; \n};\n\nclass Trie {\npublic:\n    TrieNode* root;\n\n    Trie() {\n        root = new TrieNode();\n    }\n\n   \n    void insert(const string& word, int cost) {\n        TrieNode* node = root;\n        for (char ch : word) {\n            if (!node->children[ch]) {\n                node->children[ch] = new TrieNode();\n            }\n            node = node->children[ch];\n        }\n        node->cost = min(node->cost, cost); \n    }\n\n    \n    int search(const string& target, int pos) {\n        TrieNode* node = root;\n        int min_cost = INT_MAX;\n        for (int i = pos; i < target.size(); ++i) {\n            if (!node->children[target[i]]) break;\n            node = node->children[target[i]];\n            if (node->cost != INT_MAX) {\n                min_cost = min(min_cost, node->cost);\n            }\n        }\n        return min_cost;\n    }\n};\n\nclass Solution {\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int n = target.size();\n        Trie trie;\n\n       \n        for (int i = 0; i < words.size(); ++i) {\n            trie.insert(words[i], costs[i]);\n        }\n\n        vector<int> dp(n + 1, INT_MAX);\n        dp[0] = 0; // Base case\n\n       \n        for (int i = 0; i < n; ++i) {\n            if (dp[i] == INT_MAX) continue; \n\n            TrieNode* node = trie.root;\n            for (int j = i; j < n; ++j) {\n                if (!node->children[target[j]]) break;\n                node = node->children[target[j]];\n                if (node->cost != INT_MAX) {\n                    dp[j + 1] = min(dp[j + 1], dp[i] + node->cost);\n                }\n            }\n        }\n\n        return dp[n] == INT_MAX ? -1 : dp[n];\n    }\n};",
    "submit_ts": "1720321070",
    "subm_id": "1312312628"
}