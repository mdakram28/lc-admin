{
    "username": "emofan",
    "submission": "class Solution:\n    def countOfPeaks(self, nums: List[int], queries: List[List[int]]) -> List[int]:\n        n = len(nums)\n        tr = [0] * (n + 1)\n        def add(p: int, x: int) -> None:\n            while p <= n:\n                tr[p] += x\n                p += p & -p\n        def query(p: int) -> int:\n            res = 0\n            while p > 0:\n                res += tr[p]\n                p -= p & -p\n            return res\n\n        nums = [0] + nums\n        for i in range(2, n):\n            if nums[i] > nums[i - 1] and nums[i] > nums[i + 1]:\n                add(i, 1)\n        \n        def f(i: int, v: int) -> None:\n            if i <= 1 or i >= n:\n                return \n            if nums[i] > nums[i - 1] and nums[i] > nums[i + 1]:\n                add(i, v)\n            return \n        ans = []\n        for typ, a, b in queries:\n            if typ == 1:\n                a += 1\n                if a <= b:\n                    ans.append(query(b) - query(a))\n                else:\n                    ans.append(0)\n            else:\n                a += 1\n                f(a, -1)\n                f(a - 1, -1)\n                f(a + 1, -1)\n                nums[a] = b\n                f(a, 1)\n                f(a - 1, 1)\n                f(a + 1, 1)\n        return ans",
    "submit_ts": 1718506662.0
}