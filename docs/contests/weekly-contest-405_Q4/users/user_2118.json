{
    "username": "Shinchan26",
    "submission": "class Solution\n{\npublic:\n    struct TrieNode\n    {\n        unordered_map<char, TrieNode *> child;\n        vector<pair<int, int>> wordEnds;\n    };\n\n    class Trie\n    {\n    public:\n        TrieNode *root;\n        Trie() { root = new TrieNode(); }\n\n        void insert(string &word, int index, int cost)\n        {\n            TrieNode *node = root;\n            for (char c : word)\n            {\n                if (!node->child.count(c))\n                    node->child[c] = new TrieNode();\n                node = node->child[c];\n            }\n            node->wordEnds.push_back({index, cost});\n        }\n    };\n\n    int minimumCost(string target, vector<string> &words, vector<int> &costs)\n    {\n        int n = target.size();\n        vector<int> dp(n + 1, INT_MAX);\n        dp[0] = 0;\n\n        Trie trie;\n        for (int i = 0; i < words.size(); ++i)\n        {\n            trie.insert(words[i], i, costs[i]);\n        }\n\n        for (int i = 0; i < n; ++i)\n        {\n            if (dp[i] == INT_MAX)\n                continue;\n\n            TrieNode *node = trie.root;\n            for (int j = i; j < n; ++j)\n            {\n                if (!node->child.count(target[j]))\n                    break;\n                node = node->child[target[j]];\n                for (auto &p : node->wordEnds)\n                {\n                    int wordind = p.first;\n                    int wordCost = p.second;\n                    int len = words[wordind].size();\n                    if (i + len <= n)\n                    {\n                        dp[i + len] = min(dp[i + len], dp[i] + wordCost);\n                    }\n                }\n            }\n        }\n\n        return dp[n] == INT_MAX ? -1 : dp[n];\n    }\n};",
    "submit_ts": "1720322613",
    "subm_id": "1312354570"
}