{
    "username": "shivu_iitp",
    "submission": "class Solution {\npublic:\n    int minChanges(vector<int>& nums, int k) {\n        int n = nums.size();\n        unordered_map<int, vector<int>> diffMap;\n        vector<int> candidates;\n        \n        // Calculate differences and candidates\n        for (int i = 0; i < n / 2; ++i) {\n            int left = nums[i];\n            int right = nums[n - i - 1];\n            int diff = abs(left - right);\n            int maxVal = max({left, right, k - left, k - right});\n            diffMap[diff].push_back(maxVal);\n            candidates.push_back(maxVal);\n        }\n        \n        // Sort the candidate values\n        sort(candidates.begin(), candidates.end());\n        int minChanges = n;\n\n        for (auto it = diffMap.begin(); it != diffMap.end(); ++it) {\n            int diff = it->first;\n            int pos = lower_bound(candidates.begin(), candidates.end(), diff) - candidates.begin();\n            int changes = pos * 2 + (n / 2 - pos);\n            \n            for (auto &val : it->second) {\n                if (val < diff) changes -= 2;\n                else changes -= 1;\n            }\n            \n            minChanges = min(minChanges, changes);\n        }\n        \n        return minChanges;\n    }\n};",
    "submit_ts": "1721489089",
    "subm_id": "1327442515"
}