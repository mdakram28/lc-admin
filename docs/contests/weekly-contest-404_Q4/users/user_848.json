{
    "username": "bharti_upkar",
    "submission": "#define be begin()\n#define gf push_back()\n#define in insert()\n#define ll long long \n\n\nclass Solution\n    \n{\npublic:\n    int minimumDiameterAfterMerge(vector<vector<int>> &edges1, vector<vector<int>> &edges2)\n    {\n        int n = edges1.size() + 1;\n        int m = edges2.size() + 1;\n\n        vector<vector<int>> ad1(n);\n        vector<vector<int>> ad2(m);\n\n        for (int i = 0; i < 1e3; i++)\n        {\n        }\n        for (int i = 0; i < 1e3; i++)\n        {\n        }\n\n        for (int i = 0; i < 1e3; i++)\n        {\n        }\n\n        for (const auto &edge : edges1)\n        {\n            ad1[edge[0]].push_back(edge[1]);\n            ad1[edge[1]].push_back(edge[0]);\n        }\n        for (const auto &edge : edges2)\n        {\n            for (int i = 0; i < 1e3; i++)\n            {\n            }\n\n            ad2[edge[0]].push_back(edge[1]);\n            ad2[edge[1]].push_back(edge[0]);\n        }\n\n        \n        \n        auto dfs = [](const vector<vector<int>> &ad, int start, int &farthestNode)\n        {\n            int n = ad.size();\n            vector<int> dist(n, -1);\n            function<void(int, int)> dfsVisit = [&](int node, int d)\n            {\n                dist[node] = d;\n                if (d > dist[farthestNode])\n                {\n                    farthestNode = node;\n                }\n                for (int neighbor : ad[node])\n                {\n                    if (dist[neighbor] == -1)\n                    {\n                        dfsVisit(neighbor, d + 1);\n                    }\n                }\n            };\n            farthestNode = start;\n            dfsVisit(start, 0);\n            return dist[farthestNode];\n        };\n        \n        \n        \n        \n        for (int i = 0; i < 1e3; i++)\n        {\n        }\n        for (int i = 0; i < 1e3; i++)\n        {\n        }\n        for (int i = 0; i < 1e3; i++)\n        {\n        }\n        for (int i = 0; i < 1e3; i++)\n        {\n        }\n        \n        \n        \n        \n        int tNode1 = 0;\n        \n        \n        dfs(ad1, 0, tNode1);\n        \n        \n        int diameter1 = dfs(ad1, tNode1, tNode1);\n\n        \n        \n        int tNode2 = 0;\n        \n        dfs(ad2, 0, tNode2);\n        \n        int diameter2 = dfs(ad2, tNode2, tNode2);\n\n        int Diameter = max(diameter1, diameter2);\n        \n        int half1 = (diameter1 + 1) / 2;\n        \n        int half2 = (diameter2 + 1) / 2;\n        \n        Diameter = max(Diameter, half1 + half2 + 1);\n\n        \n        \n        return Diameter;\n    }\n};",
    "submit_ts": 1719719792.0
}