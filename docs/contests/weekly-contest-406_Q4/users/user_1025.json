{
    "username": "mike-meng",
    "submission": "class Solution {\npublic:\n    long long minimumCost(int m, int n, vector<int>& horizontalCut, vector<int>& verticalCut) {\n        vector<vector<int>> arr;\n        for (int i = 0; i < horizontalCut.size(); i++) {\n            arr.push_back({horizontalCut[i], i, 0});\n        }\n        for (int i = 0; i < verticalCut.size(); i++) {\n            arr.push_back({verticalCut[i], i, 1});\n        }\n        sort(arr.begin(), arr.end(), [&](const vector<int> &a, const vector<int> &b) {\n            return a[0] > b[0];\n        });\n        \n        long long res = 0;\n        int hcut = 1;\n        int vcut = 1;\n        for (int i = 0; i < arr.size(); i++) {\n            int cost = arr[i][0];\n            int idx = arr[i][1];\n            int flag = arr[i][2];\n            /* horizon */\n            if (flag == 0) {\n                res += (long long)vcut * cost;\n                hcut++;\n            } else { // vertical\n                res += (long long)hcut * cost;\n                vcut++;\n            }\n        }\n        \n        return res;\n    }\n};",
    "submit_ts": "1720926007",
    "subm_id": "546443424"
}