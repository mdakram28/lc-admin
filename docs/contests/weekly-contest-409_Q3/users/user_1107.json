{
    "username": "hoanghonghieu",
    "submission": "class Solution {\npublic:\n    vector<int> shortestDistanceAfterQueries(int n, vector<vector<int>>& queries) {\n        vector<int> ans;\n        map<int, int> ranges;\n        int distance = n - 1;\n        for (auto& query : queries) {\n            int u = query[0], v = query[1];\n            // left bounder\n            auto upper_it = ranges.upper_bound(u);\n            if (upper_it != ranges.begin()) {\n                auto range_it = prev(upper_it);\n                int l = range_it->first, r = range_it->second;\n                if (u == l) {\n                    if (v > r) {\n                        distance -= v - r;\n                        ranges[l] = v;\n                    }\n                } else if (u >= r) {\n                    ranges[u] = v;\n                    distance -= v - u - 1;\n                }\n            } else {\n                ranges[u] = v;\n                distance -= v - u - 1;\n            }\n            vector<map<int, int>::iterator> removed;\n            for (auto it = upper_it; it != ranges.end() && it->second <= v; it++) {\n                removed.push_back(it);\n                distance += it->second - it->first - 1;\n            }\n            for (auto r : removed) {\n                ranges.erase(r);\n            }\n\n            ans.push_back(distance);\n        }\n        return ans;\n    }\n};",
    "submit_ts": "1722743436",
    "subm_id": "1343791891"
}