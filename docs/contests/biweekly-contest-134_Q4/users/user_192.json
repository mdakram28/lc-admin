{
    "username": "ismailfateen",
    "submission": "class Solution {\npublic:\n    long long countSubarrays(vector<int>& nums, int k) {\n        int n = nums.size();\n        vector<vector<int>> pref(nums.size(), vector<int>(31));\n        for (int i = 0; i < n; ++i) {\n            for (int j = 0; j < 31; ++j) {\n                if (nums[i] & (1 << j)) pref[i][j] = 1;\n                if (i) pref[i][j] += pref[i - 1][j];\n            }\n        }\n        auto get_and = [&](int l, int r) -> int {\n            int ans = 0;\n            for (int i = 0; i < 31; ++i) {\n                int count = pref[r][i];\n                if (l) count -= pref[l - 1][i];\n                if (count == r - l + 1) ans |= 1 << i;\n            }\n            return ans;\n        };\n        long long ans = 0;\n        for (int i = 0; i < n; ++i) {\n            // let f(i, mid) = whether AND(i,mid) is supermask of k\n            // f(i, mid) is monontonic\n            int l = i, r = n - 1, pos = -1;\n            if ((nums[i] & k) != k) continue;\n            while (l <= r) {\n                int mid = (l + r) >> 1;\n                int AND = get_and(i, mid);\n                if ((AND & k) == k) {\n                    l = mid + 1;\n                    pos = mid;\n                } else {\n                    r = mid - 1;\n                }\n            }\n            if (pos == -1 || get_and(i, pos) != k) continue;\n            // another binary search for first true\n            l = i, r = pos;\n            int fin;\n            while (l <= r) {\n                int mid = (l + r) >> 1;\n                if (get_and(i, mid) == k) {\n                    r = mid - 1;\n                    fin = mid;\n                } else {\n                    l = mid + 1;\n                }\n            }\n            ans += pos - fin + 1;\n        }\n        return ans;\n    }\n};",
    "submit_ts": "1720277751",
    "subm_id": "1311678334"
}