{
    "username": "mohitkanodia",
    "submission": "class Solution {\n    int[] dp;\n    Trie trie;\n\n    public int minimumCost(String target, String[] words, int[] costs) {\n      int ans = 0;\n      int n = words.length;\n      int m = target.length();\n      \n      dp = new int[m];\n      Arrays.fill(dp, -1);\n      trie = new Trie();\n\n      for (int i = 0; i < n; i++) {\n        trie.insert(words[i], i, costs[i]);\n      }\n\n      ans = dfs(0, m, target, words, costs);\n      if (ans == Integer.MAX_VALUE) {\n        ans = -1;\n      }\n      return ans;\n    }\n\n    int dfs(int c, int m, String target, String[] words, int[] costs) {\n      if (c >= m) {\n        return 0;\n      }\n\n      if (dp[c] != -1) {\n        return dp[c];\n      }\n\n      int ans = Integer.MAX_VALUE;\n      TrieNode curr = trie.root;\n\n      for (int i = c; i < m; i++) {\n        char ch = target.charAt(i);\n        int index = ch - 'a';\n\n        TrieNode chN = curr.child[index];\n        if (chN == null) {\n          break;\n        }\n\n        curr = curr.child[index];\n\n        if (curr.isWord) {\n          int newans = dfs(i + 1, m, target, words, costs);\n          if (newans == Integer.MAX_VALUE) {\n            continue;\n          }\n          ans = Math.min(ans, curr.cost + newans);\n        }\n      }\n\n      dp[c] = ans;\n      return ans;\n    }\n\n  }\n\n  class Trie {\n\n    TrieNode root;\n\n    public Trie() {\n      root = new TrieNode('/');\n    }\n\n    // insert\n    void insert(String word, int ind, int cost) {\n      int n = word.length();\n      TrieNode curr = root;\n\n      for (int i = 0; i < n; i++) {\n        char c = word.charAt(i);\n        int index = c - 'a';\n\n        TrieNode ch = curr.child[index];\n        if (ch == null) {\n          curr.child[index] = new TrieNode(c);\n        }\n        curr = curr.child[index];\n      }\n\n      curr.index = ind;\n      curr.cost = Math.min(curr.cost, cost);\n      curr.isWord = true;\n    }\n\n  }\n\n  class TrieNode {\n    char c;\n    TrieNode[] child;\n    boolean isWord;\n    int index;\n    int cost;\n\n    public TrieNode(char c) {\n      this.c = c;\n      this.isWord = false;\n      child = new TrieNode[26];\n      this.index = 0;\n      this.cost = Integer.MAX_VALUE;\n    }\n\n    public String toString() {\n      return c + \" \" + isWord + \" \" + index + \" \" + cost;\n    }\n  }",
    "submit_ts": "1720324165",
    "subm_id": "1312393076"
}