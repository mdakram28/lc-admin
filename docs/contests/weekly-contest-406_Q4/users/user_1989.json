{
    "username": "madhavbansal6633",
    "submission": "class Solution {\n    public long minimumCost(int m, int n, int[] horizontalCut, int[] verticalCut) {\n        Integer[] hCuts = Arrays.stream(horizontalCut).boxed().toArray(Integer[]::new);\n        Integer[] vCuts = Arrays.stream(verticalCut).boxed().toArray(Integer[]::new);\n\n        \n        Arrays.sort(hCuts, Collections.reverseOrder());\n        Arrays.sort(vCuts, Collections.reverseOrder());\n\n        long totalCost = 0;\n        int hPieces = 1;\n        int vPieces = 1;\n\n        int i = 0, j = 0;\n        while (i < hCuts.length && j < vCuts.length) {\n            if (hCuts[i] >= vCuts[j]) {\n                totalCost +=(long) hCuts[i] * vPieces;\n                hPieces++;\n                i++;\n            } else {\n                totalCost += (long) vCuts[j] * hPieces;\n                vPieces++;\n                j++;\n            }\n        }\n\n       \n        while (i < hCuts.length) {\n            totalCost +=(long) hCuts[i] * vPieces;\n            i++;\n        }\n\n \n        while (j < vCuts.length) {\n            totalCost +=(long) vCuts[j] * hPieces;\n            j++;\n        }\n\n        return totalCost;\n    }\n}",
    "submit_ts": "1720926271",
    "subm_id": "1320281188"
}