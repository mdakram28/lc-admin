{
    "username": "___PhoenixOp",
    "submission": "#define MOD 1000000007\n\nconst int maxi = 405;\nclass Solution {\npublic:\n\nvoid computePermutationCounts(int n, vector<vector<long>>& pc, const unordered_map<int, int>& mp) {\n    bool flag=true;\n    pc[0][0] = 1;\n\n    for (int length = 1; length <= n; length++) {\n          for (int inv = 0; inv <= maxi; inv++) {\n        for (int newPos = 0; newPos < length; newPos++) {\n                int prev = inv - newPos;\n                  if (prev >= 0 && flag) {\n                    pc[length][inv] = (pc[length][inv] + pc[length - 1][prev]) % MOD;\n                }\n            }\n        }\n\n\n   if (mp.find(length) != mp.end() && flag) {\n            int targetInv = mp.at(length);\n          for (int inv = 0; inv <= maxi; inv++) {\n                if (inv != targetInv && flag) {\n                      pc[length][inv] = 0;\n                }\n            }\n        }\n    }\n}\n\n  \n    int numberOfPermutations(int n, vector<vector<int>>& requirements) {\n      unordered_map<int, int> mp;\n    for (const auto& req : requirements) {\n        mp[req[0] + 1] = req[1];\n    }\n\n    vector<vector<long>> pc(n + 1, vector<long>(maxi + 1, 0));\n    computePermutationCounts(n, pc, mp);\n\n    long result = 0;\n    for (long count : pc[n]) {\n        result = (result + count) % MOD;\n    }\n\n    return (result);\n    }\n};",
    "submit_ts": 1719071926.0
}