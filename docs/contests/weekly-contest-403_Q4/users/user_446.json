{
    "username": "zhangsz1998",
    "submission": "class Solution:\n    def minimumSum(self, grid: List[List[int]]) -> int:\n\n        def merge_rect(rect1, rect2):\n            if rect1 is None:\n                return rect2\n            elif rect2 is None:\n                return rect1\n            else:\n                f_list = [min, min, max, max]\n                rect = tuple(f(a, b) for f, a, b in zip(f_list, rect1, rect2))\n                return rect\n\n        def get_area(rect):\n            if rect is None:\n                return 0\n            return (rect[2] - rect[0] + 1) * (rect[3] - rect[1] + 1)\n\n        @cache\n        def get_bound_rect(rect):\n            if rect is None:\n                return None\n            x1, y1, x2, y2 = rect\n            if x1 == x2 and y1 == y2:\n                if grid[x1][y1] == 1:\n                    return (x1, y1, x2, y2)\n                else:\n                    return None\n            else:\n                if x1 < x2:\n                    rect_a = get_bound_rect((x1, y1, x1, y2))\n                    rect_b = get_bound_rect((x1 + 1, y1, x2, y2))\n                    return merge_rect(rect_a, rect_b)\n                else:\n                    rect_a = get_bound_rect((x1, y1, x2, y1))\n                    rect_b = get_bound_rect((x1, y1 + 1, x2, y2))\n                    return merge_rect(rect_a, rect_b)\n\n        def best_split(rect, t):\n            if rect is None:\n                return 0\n            x1, y1, x2, y2 = rect\n            if x1 == x2 and y1 == y2:\n                return inf\n            ans = get_area(rect)\n\n            # split_by_row\n            for i in range(x1, x2):\n                rect1 = (x1, y1, i, y2)\n                rect2 = (i + 1, y1, x2, y2)\n                bound1 = get_bound_rect(rect1)\n                bound2 = get_bound_rect(rect2)\n                area1 = get_area(bound1)\n                area2 = get_area(bound2)\n                if t == 1:\n                    ans = min(ans, area1 + area2)\n                else:\n                    ans = min(ans, best_split(bound1, 1) + area2, area1 + best_split(bound2, 1))\n\n            # split by col\n            for j in range(y1, y2):\n                rect1 = (x1, y1, x2, j)\n                rect2 = (x1, j + 1, x2, y2)\n                bound1 = get_bound_rect(rect1)\n                bound2 = get_bound_rect(rect2)\n                area1 = get_area(bound1)\n                area2 = get_area(bound2)\n                if t == 1:\n                    ans = min(ans, area1 + area2)\n                else:\n                    ans = min(ans, best_split(bound1, 1) + area2, area1 + best_split(bound2, 1))\n            return ans\n        m, n = len(grid), len(grid[0])\n\n        return best_split((0, 0, m - 1, n - 1), 0)\n",
    "submit_ts": "1719115122",
    "subm_id": "541404677"
}