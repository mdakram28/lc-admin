{
    "username": "WillTsai",
    "submission": "class Solution:\n    def minimumDistance(self, points: List[List[int]]) -> int:\n        ll, lr, ul, ur = [], [], [], []\n        \n        for i, p in enumerate(points):\n            heapq.heappush(ll, (-p[0]-p[1], i))\n            if len(ll) >= 3:\n                heapq.heappop(ll)\n            heapq.heappush(lr, (-p[0]+p[1], i))\n            if len(lr) >= 3:\n                heapq.heappop(lr)\n            heapq.heappush(ul, (p[0]-p[1], i))\n            if len(ul) >= 3:\n                heapq.heappop(ul)\n            heapq.heappush(ur, (p[0]+p[1], i))\n            if len(ur) >= 3:\n                heapq.heappop(ur)\n                \n        \n        ps = set()\n        # print('ll', f\"{[points[i] for _, i in ll]}\")\n        # print('lr', f\"{[points[i] for _, i in lr]}\")\n        # print('ul', f\"{[points[i] for _, i in ul]}\")\n        # print('ur', f\"{[points[i] for _, i in ur]}\")\n        for _, i in ll:\n            ps.add(i)\n        for _, i in lr:\n            ps.add(i)\n        for _, i in ul:\n            ps.add(i)\n        for _, i in ur:\n            ps.add(i)\n        ps = list(ps)\n        # print(ps)\n        res = 1e10\n        for rm in ps:\n            r = 0\n            for ii in ps:\n                if ii == rm:\n                    continue\n                for jj in ps:\n                    if ii == jj or jj == rm:\n                        continue\n                    r = max(r, abs(points[ii][0]-points[jj][0])+abs(points[ii][1]-points[jj][1]))\n                    # print(points[ii], points[jj], abs(points[ii][0]-points[jj][0])+abs(points[ii][1]-points[jj][1]))\n            # print(rm, r)\n            res = min(res, r)\n                \n        return res"
}