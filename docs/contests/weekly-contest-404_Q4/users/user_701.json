{
    "username": "Deep_1026",
    "submission": "class Solution {\npublic:\n    void dfs(vector <vector <int>>& adj, int node, vector <int>& vis, vector <int>& dis){\n        vis[node]=1;\n        int m=0;\n        for(auto i:adj[node]){\n            if(!vis[i]){\n                dfs(adj, i, vis, dis);\n                m=max(dis[i],m);\n            }\n        }\n        dis[node]=m+1;\n    }\n\n    int dfs1(vector <vector <int>>& adj, int node, vector <int>& vis, vector <int>& dis, int d){\n        vis[node]=1;\n        multiset <int> se;\n        se.insert(d);\n        for(auto i:adj[node]){\n            if(!vis[i]){\n                se.insert(dis[i]);\n            }\n        }\n        int ans=(*(--se.end()));\n        for(auto i:adj[node]){\n            if(!vis[i]){\n                se.erase(se.find(dis[i]));\n                ans = min(ans,dfs1(adj, i, vis, dis, (*(--se.end()))+1));\n                se.insert(dis[i]);\n            }\n        }\n        return ans;\n    }\n\n    pair<int, int> dfs2(int node, const vector<vector<int>>& adj, vector<int>& visited) {\n        visited[node] = 1;\n        pair<int, int> farthest = {node, 0};\n\n        for (int neighbor : adj[node]) {\n            if (!visited[neighbor]) {\n                pair<int, int> result = dfs2(neighbor, adj, visited);\n                result.second += 1; \n                if (result.second > farthest.second) {\n                    farthest = result;\n                }\n            }\n        }\n\n        return farthest;\n    }\n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n        int n=edges1.size()+1;\n        int m=edges2.size()+1;\n        vector <vector <int>> adj1(n);\n        vector <vector <int>> adj2(m);\n        for(auto i:edges1){\n            adj1[i[0]].push_back(i[1]);\n            adj1[i[1]].push_back(i[0]);\n        }\n        for(auto i:edges2){\n            adj2[i[0]].push_back(i[1]);\n            adj2[i[1]].push_back(i[0]);\n        }\n        vector <int> vis1(n),vis2(m),dis1(n),dis2(m);\n        dfs(adj1,0,vis1,dis1);\n        dfs(adj2,0,vis2,dis2);\n        for(int i=0;i<n;i++){\n            vis1[i]=0;\n        }\n        for(int i=0;i<m;i++){\n            vis2[i]=0;\n        }\n        int m1 = dfs1(adj1,0,vis1,dis1,0);\n        int m2 = dfs1(adj2,0,vis2,dis2,0);\n        // cout<<m1<<\" \"<<m2<<endl;\n        fill(vis1.begin(), vis1.end(), 0);\n        pair<int, int> farthest1 = dfs2(0, adj1, vis1);\n        fill(vis1.begin(), vis1.end(), 0);\n        farthest1 = dfs2(farthest1.first, adj1, vis1);\n\n        fill(vis2.begin(), vis2.end(), 0);\n        pair<int, int> farthest2 = dfs2(0, adj2, vis2);\n        fill(vis2.begin(), vis2.end(), 0);\n        farthest2 = dfs2(farthest2.first, adj2, vis2);\n\n        return max(m1+m2+1,max(farthest1.second,farthest2.second));\n    }\n};",
    "submit_ts": 1719719587.0
}