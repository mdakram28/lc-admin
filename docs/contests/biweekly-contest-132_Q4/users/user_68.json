{
    "username": "taiwaiming2003",
    "submission": "class Solution {\npublic:\n    int maximumLength(vector<int>& nums, int k) {\n        \n        int n=nums.size();\n        \n        vector<vector<int>> dp(k+1,vector<int>(n,1));\n        \n        unordered_map<int,int> mp;\n        int mx =1;\n        \n        \n        for(int i=0;i<=k;i++) {\n            \n            mx=0;\n            mp.clear();\n            \n            for(int j=0;j<n;j++) {\n                \n                \n                dp[i][j]=max(dp[i][j],mx + 1);\n                auto it=mp.find(nums[j]);\n                if(it!=mp.end()) dp[i][j]=max(dp[i][j],it->second+1);\n                \n                if(i!=0) mx=max(mx,dp[i-1][j]);\n                if(it==mp.end()) mp[nums[j]]=dp[i][j];\n                else mp[nums[j]]=max(it->second,dp[i][j]);\n                \n            }\n            \n        }\n        \n//         for(int i=0;i<=k;i++) {\n            \n            \n            \n//             for(int j=0;j<n;j++) {\n                \n//                 cout << dp[i][j] << \" \";\n                \n//             }\n//             cout << endl;\n            \n//         }\n        \n        \n        int rtn=1;\n        for(int i=0;i<n;i++) rtn=max(rtn,dp[k][i]);\n        \n        \n        return rtn;\n        \n    }\n};",
    "submit_ts": 1717859462.0
}