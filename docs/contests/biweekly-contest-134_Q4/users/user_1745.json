{
    "username": "ywwbill",
    "submission": "class Solution:\n    def countSubarrays(self, nums: List[int], k: int) -> int:\n        segs = []\n        temp = []\n        for num in nums:\n            if num & k == k:\n                temp.append(num)\n            else:\n                if len(temp) > 0:\n                    segs.append(temp)\n                temp = []\n        if len(temp) > 0:\n            segs.append(temp)\n        num_subarrays = 0\n        for i in range(len(segs)):\n            num_subarrays += self.count_impl(segs[i], k)\n        return num_subarrays\n\n    def count_impl(self, nums: List[int], k: int) -> int:\n        n = len(nums)\n        p_sum = [[0] * 30 for _ in range(n)]\n        bits = self.to_bits(nums[0])\n        for j in range(30):\n            p_sum[0][j] = bits[j]\n        for i in range(1, n):\n            bits = self.to_bits(nums[i])\n            for j in range(30):\n                p_sum[i][j] = p_sum[i - 1][j] + bits[j]\n        num_subarrays=0\n        k_bits = self.to_bits(k)\n        right=0\n        for i in range(n):\n            while right<n and self.cmp(p_sum, right, i, k_bits)!=0:\n                right+=1\n            if right==n:\n                break\n            num_subarrays+=n-right\n        # k_bits = self.to_bits(k)\n        # num_subarrays = 0\n        # for i in range(n):\n        #     if nums[i] < k:\n        #         continue\n        #     all_and_cmp = self.cmp(p_sum, i, 0, k_bits)\n        #     if all_and_cmp == 1:\n        #         continue\n        #     if all_and_cmp == 0:\n        #         left_k = 0\n        #     else:\n        #         left, right = 0, i\n        #         while right - left > 1:\n        #             mid = (left + right) // 2\n        #             and_cmp = self.cmp(p_sum, i, mid, k_bits)\n        #             if and_cmp >= 0:\n        #                 right = mid\n        #             else:\n        #                 left = mid\n        #         if self.cmp(p_sum, i, right, k_bits) == 0:\n        #             left_k = right\n        #         else:\n        #             continue\n        #     if nums[i] == k:\n        #         right_k = i\n        #     else:\n        #         left, right = 0, i\n        #         while right - left > 1:\n        #             mid = (left + right) // 2\n        #             and_cmp = self.cmp(p_sum, i, mid, k_bits)\n        #             if and_cmp <= 0:\n        #                 left = mid\n        #             else:\n        #                 right = mid\n        #         if self.cmp(p_sum, i, left, k_bits) == 0:\n        #             right_k = left\n        #         else:\n        #             continue\n        #     num_subarrays += right_k - left_k + 1\n        return num_subarrays\n\n    def to_bits(self, num: int) -> List[int]:\n        bits = [0] * 30\n        temp = num\n        for i in range(30):\n            bits[i] = temp % 2\n            temp //= 2\n        return bits\n\n    def cmp(\n        self, p_sum: List[List[int]], right: int, left: int, k_bits: List[int]\n    ) -> int:\n        for i in range(30):\n            count = p_sum[right][i]\n            if left - 1 >= 0:\n                count -= p_sum[left - 1][i]\n            if count == right - left + 1:\n                b = 1\n            else:\n                b = 0\n            if b > k_bits[i]:\n                return 1\n            if b < k_bits[i]:\n                return -1\n        return 0",
    "submit_ts": "1720279751",
    "subm_id": "544568919"
}