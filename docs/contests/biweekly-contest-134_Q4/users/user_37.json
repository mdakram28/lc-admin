{
    "username": "Sai-17",
    "submission": "class Solution {\npublic:\n    struct segtree {\n    using T = int; \n    using U = int; \n\n    int sz;\n    vector<T> vals; \n \n    inline T single(U a) {\n        return a;\n    }\n\n    inline T combine(T a, T b) {\n        return(a&b); \n    }\n \n    T NEUTRAL_ELEMENT = INT_MAX;\n \n    void init(int _sz) {\n        sz = _sz;\n        vals.assign(2 * sz, NEUTRAL_ELEMENT); \n    }\n \n    void build(vector<U> &v) {\n        for(int i = 0; i < v.size(); ++i)\n            vals[sz + i] = single(v[i]);\n        for(int i = sz - 1; i > 0; --i)\n            vals[i] = combine(vals[i << 1], vals[i << 1 | 1]);  \n    }\n \n    void set(int idx, U val) {  \n        for(vals[idx += sz] = single(val); idx >>= 1; )\n            vals[idx] = combine(vals[idx<<1], vals[idx<<1|1]); \n    }\n\n    T query(int l, int r) {\n        T resl = NEUTRAL_ELEMENT, resr = NEUTRAL_ELEMENT; \n        for(l += sz, r += sz; l < r; l >>= 1, r >>= 1) {\n            if (l&1) resl = combine(resl, vals[l++]); \n            if (r&1) resr = combine(vals[--r], resr); \n        }\n        return combine(resl, resr); \n    }    \n};\n    \n    long long countSubarrays(vector<int>& nums, int k) {\n        int n = nums.size(); \n        segtree st; \n        st.init(n); \n        st.build(nums); \n        long long ans = 0; \n        for(int i = 0; i < n; ++i)\n        {\n            int left = n + 1, right = -1; \n            int l = i, r = n - 1; \n            while(r - l >= 0)\n            {\n                int mid = l + (r - l)/2; \n                int d = st.query(i, mid + 1); \n                if(d > k) \n                    l = mid + 1; \n                else if(d < k) \n                    r = mid - 1; \n                else \n                {\n                    left = min(left, mid); \n                    r = mid - 1; \n                }\n            }\n            l = i, r = n-1; \n            while(r - l >= 0)\n            {\n                int mid = l + (r - l)/2; \n                int d = st.query(i, mid + 1); \n                if(d > k) \n                    l = mid + 1; \n                else if(d < k) \n                    r = mid - 1; \n                else \n                {\n                    right = max(right, mid); \n                    l = mid + 1; \n                }\n            }\n            if(right != -1) \n                ans += (right - left + 1); \n        }\n        return ans; \n        \n    }\n};",
    "submit_ts": "1720277491",
    "subm_id": "1311666164"
}