{
    "username": "rastsislau",
    "submission": "class Solution {\npublic:\n    class Tree {\n    public:\n        vector < vector<int>> tree;\n        int nodeCount;\n\n        Tree(int n) : nodeCount(n) {\n            tree.resize(n);\n        }\n\n        bool getDiameterPath(int vertex, int targetVertex, int parent, vector<int>& path) {\n            if (vertex == targetVertex) {\n                path.push_back(vertex);\n                return true;\n            }\n\n            for (auto i : tree[vertex]) {\n                if (i == parent)\n                    continue;\n\n                if (getDiameterPath(i, targetVertex, vertex, path)) {\n                    path.push_back(vertex);\n                    return true;\n                }\n            }\n\n            return false;\n        }\n\n        void farthestNode(int vertex, int parent, int height, int& maxHeight, int& maxHeightNode) {\n            if (height > maxHeight) {\n                maxHeight = height;\n                maxHeightNode = vertex;\n            }\n\n            for (auto i : tree[vertex]) {\n                if (i == parent)\n                    continue;\n\n                farthestNode(i, vertex, height + 1, maxHeight, maxHeightNode);\n            }\n        }\n\n        void addEdge(int a, int b) {\n            tree[a].push_back(b);\n            tree[b].push_back(a);\n        }\n\n        vector<int> calculateDiam(int startNode) {\n            int maxHeight = -1;\n            int maxHeightNode = -1;\n            farthestNode(startNode, -1, 0, maxHeight, maxHeightNode);\n\n            int leaf1 = maxHeightNode;\n\n            maxHeight = -1;\n            farthestNode(maxHeightNode, -1, 0, maxHeight, maxHeightNode);\n\n            int leaf2 = maxHeightNode;\n\n            vector<int> path;\n            getDiameterPath(leaf1, leaf2, -1, path);\n            return path;\n        }\n\n        int findCenter(int startNode) {\n            auto path = calculateDiam(startNode);\n            int pathSize = path.size();\n            return path[pathSize / 2];\n        }\n\n        int diam(int startNode) {\n            auto path = calculateDiam(startNode);\n            int pathSize = path.size();\n            return pathSize - 1;\n        }\n    };\n\n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n        \n        int n = edges1.size() + 1;\n        int m = edges2.size() + 1;\n        Tree g1(n+m);\n        \n        //cout << 0 << endl;\n        for (int i=0;i<n-1;i++) {\n            g1.addEdge(edges1[i][0], edges1[i][1]);\n        }\n        //cout << 1 << endl;\n        int c1 = g1.findCenter(0);\n\n        \n        //cout << 2 << endl;\n        for (int i=0;i<m-1;i++) {\n            g1.addEdge(edges2[i][0] + n, edges2[i][1] + n);\n        }\n        \n        //cout << 3 << endl;\n        int c2 = g1.findCenter(n);\n        g1.addEdge(c1, c2);\n        \n        //cout << 4 << endl;\n\n        return g1.diam(c2);\n    }\n};\n",
    "submit_ts": 1719718708.0
}