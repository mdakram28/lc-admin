{
    "username": "Ronak Gadhiya",
    "submission": "class Solution {\npublic:\n    long long maximumValueSum(vector<vector<int>>& board) {\n        int m = board.size();\n        int n = board[0].size();\n\n        vector<tuple<int, int, int>> gridElements;\n        for (int i = 0; i < m; ++i) {\n            for (int j = 0; j < n; ++j) {\n                gridElements.emplace_back(board[i][j], i, j);\n            }\n        }\n        sort(gridElements.rbegin(), gridElements.rend());\n\n        long long maxSum = LLONG_MIN;\n\n        int K = min(50, m * n);\n        for (int k1 = 0; k1 < K; ++k1) {\n            int i1, j1;\n            long long v1;\n            tie(v1, i1, j1) = gridElements[k1];\n\n            for (int k2 = k1 + 1; k2 < K; ++k2) {\n                int i2, j2;\n                long long v2;\n                tie(v2, i2, j2) = gridElements[k2];\n\n                if (i1 == i2 || j1 == j2) continue;\n\n                long long currentSum = v1 + v2;\n\n                unordered_map<int, bool> occupiedRows, occupiedCols;\n                occupiedRows[i1] = true;\n                occupiedRows[i2] = true;\n                occupiedCols[j1] = true;\n                occupiedCols[j2] = true;\n\n                for (int k3 = 0; k3 < m * n; ++k3) {\n                    int i3, j3;\n                    long long v3;\n                    tie(v3, i3, j3) = gridElements[k3];\n\n                    if (occupiedRows[i3] || occupiedCols[j3]) continue;\n                    long long totalSum = currentSum + v3;\n                    maxSum = max(maxSum, totalSum);\n                    break;\n                }\n            }\n        }\n\n        return maxSum;\n    }\n};\n",
    "submit_ts": "1723909044",
    "subm_id": "1359177347"
}