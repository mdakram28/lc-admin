{
    "username": "shinez1997",
    "submission": "class Solution {\npublic:\n    const int MOD = 1e9 + 7;\n    struct Node {\n        vector<int> a;\n        Node(){\n            a = vector<int>(4);\n        }\n        Node(int x) {\n            a = vector<int>(4);\n            a[0] = x;\n            // a[0] choose L and R\n            // a[1] choose L + 1 and R\n            // a[2] choose L and R - 1\n            // a[3] choose L + 1 and R - 1\n        }\n        void debug() {\n            cout << a[0] << \" \" << a[1] << \" \" << a[2] << \" \"<< a[3] << endl;\n        }\n        \n    };\n    \n    struct SegTree {\n        Node merge (Node& x, Node& y) {\n            Node res;\n            assert(x.a.size() == 4);\n            res.a[0] = max({\n                x.a[0] + y.a[1],\n                x.a[2] + y.a[1],\n                x.a[2] + y.a[0]\n            });\n            res.a[1] = max({\n                x.a[1] + y.a[1],\n                x.a[3] + y.a[1],\n                x.a[3] + y.a[0]\n            });\n            res.a[2] = max({\n                x.a[0] + y.a[3],\n                x.a[2] + y.a[2],\n                x.a[2] + y.a[3]\n            });\n            res.a[3] = max({\n                x.a[1] + y.a[3],\n                x.a[3] + y.a[3],\n                x.a[3] + y.a[2]\n            });\n            return res;\n        }\n        vector<Node> tree;\n        int base;\n        SegTree(vector<int>& a) {\n            base = 1;\n            int n = a.size();\n            while(base < n)\n                base *= 2;\n            tree = vector<Node>(2 * base, 0);\n            for(int i = 0; i < n; ++i) {\n                tree[i + base] = Node(a[i]);\n            }\n            for(int i = base - 1; i > 0; --i)\n                tree[i] = merge(tree[2*i], tree[2*i+1]);\n        }\n        void update(int i, int x) {\n            tree[i + base] = Node(x);\n            i += base;\n            i/= 2;\n            while(i) {\n                tree[i] = merge(tree[2*i], tree[2*i+1]);\n                i /= 2;\n            }\n            // for(int i = 1; i < 2 * base; ++i) {\n            //     tree[i].debug();\n            // }\n        }\n        int get() {\n            int res = 0;\n            for(int i = 0; i < 4; ++i)\n                res = max(res, tree[1].a[i]);\n            return res;\n        }\n    };\n    int maximumSumSubsequence(vector<int>& a, vector<vector<int>>& q) {\n        SegTree st(a);\n        long long res = 0;\n        // for(int i = 0; i < a.size(); ++i) {\n        //     cout << st.tree[i + st.base].a[0] << endl;\n        // }\n        for(auto& x : q) {\n            st.update(x[0], x[1]);\n            res += st.get();\n            res %= MOD;\n        }\n        return res;\n    }\n};",
    "submit_ts": "1716695499",
    "subm_id": "1268142294"
}