{
    "username": "adarshn000",
    "submission": "#include <vector>\n#include <algorithm>\n#include <climits>\n\nusing namespace std;\n\n// Function to get the top 3 values and their column indices for each row\nvoid getTop3Values(const vector<vector<int>>& board, vector<vector<long long>>& bestValues, vector<vector<int>>& bestColumns) {\n    int m = board.size();\n    int n = board[0].size();\n\n    for (int i = 0; i < m; ++i) {\n        vector<pair<long long, int>> colValues;\n        for (int j = 0; j < n; ++j) {\n            colValues.emplace_back(board[i][j], j);\n        }\n        sort(colValues.rbegin(), colValues.rend());\n\n        for (int k = 0; k < 3 && k < n; ++k) {\n            bestValues[i][k] = colValues[k].first;\n            bestColumns[i][k] = colValues[k].second;\n        }\n    }\n}\n\n// Function to calculate the maximum sum of values for non-attacking rooks\nlong long calculateMaxSum(const vector<vector<long long>>& bestValues, const vector<vector<int>>& bestColumns) {\n    int m = bestValues.size();\n    long long maxSum = LLONG_MIN;\n\n    for (int r1 = 0; r1 < m; ++r1) {\n        for (int r2 = r1 + 1; r2 < m; ++r2) {\n            for (int r3 = r2 + 1; r3 < m; ++r3) {\n                for (int i = 0; i < 3; ++i) {\n                    for (int j = 0; j < 3; ++j) {\n                        if (bestColumns[r2][j] == bestColumns[r1][i]) continue;\n                        for (int k = 0; k < 3; ++k) {\n                            if (bestColumns[r3][k] == bestColumns[r1][i] || bestColumns[r3][k] == bestColumns[r2][j]) continue;\n\n                            long long currentSum = bestValues[r1][i] + bestValues[r2][j] + bestValues[r3][k];\n                            maxSum = max(maxSum, currentSum);\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    return maxSum;\n}\n\nclass Solution {\npublic:\n    long long maximumValueSum(vector<vector<int>>& board) {\n        int m = board.size();\n        vector<vector<long long>> bestValues(m, vector<long long>(3, LLONG_MIN));\n        vector<vector<int>> bestColumns(m, vector<int>(3, -1));\n\n        getTop3Values(board, bestValues, bestColumns);\n        return calculateMaxSum(bestValues, bestColumns);\n    }\n};\n",
    "submit_ts": "1723910204",
    "subm_id": "1359221261"
}