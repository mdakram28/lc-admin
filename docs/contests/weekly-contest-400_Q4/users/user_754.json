{
    "username": "ocavue",
    "submission": "from typing import List\n\nfrom typing import List\n\n\nclass Solution:\n    def minimumDifference(self, nums: List[int], k: int) -> int:\n        best = min(abs(k - num) for num in nums)\n        n = len(nums)\n        m = (max(max(nums), k)).bit_length()\n        counter = [0] * m\n\n        i = j = 0\n\n        def to_sum():\n            assert 0 <= i <= j <= n\n\n            if i == j:\n                return 0\n\n            s = 0\n            for x in range(m):\n                if counter[x] == j - i:\n                    s += 1 << x\n\n            nonlocal best\n            best = min(best, abs(k - s))\n\n            return s\n\n        def add_num(\n            num: int,\n        ):\n            for i in range(m):\n                if num & (1 << i):\n                    counter[i] += 1\n\n        def remove_num(num: int):\n            for i in range(m):\n                if num & (1 << i):\n                    counter[i] -= 1\n\n        # Find the smallest sum that is larger than k\n        while i < n:\n            while j < n:\n                add_num(nums[j])\n                j += 1\n\n                if to_sum() < k:\n                    j -= 1\n                    remove_num(nums[j])\n                    break\n\n            to_sum()\n\n            remove_num(nums[i])\n            i += 1\n\n            while i > j:\n                add_num(nums[j])\n                j += 1\n\n            to_sum()\n\n        # Find the largest sum that is smaller than k\n        i = j = 0\n        while j < n:\n            while i < j:\n                remove_num(nums[i])\n                i += 1\n\n                if to_sum() > k:\n                    i -= 1\n                    add_num(nums[i])\n                    break\n\n            to_sum()\n\n            if j < n:\n                add_num(nums[j])\n                j += 1\n\n            to_sum()\n\n        return best\n\n ",
    "submit_ts": 1717299563.0
}