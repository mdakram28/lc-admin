{
    "username": "dyf3244",
    "submission": "#include <bits/stdc++.h>\nusing namespace std;\n#define ll long long\n#define maxn (int)(1e6+10)\n#define IOS ios::sync_with_stdio(0);\n#define FFF freopen(\"out\", \"w\", stdout); \n\n\n\nclass Solution {\npublic:\n    int minimumDistance(vector<vector<int>>& points) {\n        int n = points.size();\n        vector<int> p[4];\n        for (auto point: points) {\n            int x = point[0];\n            int y = point[1];\n            p[0].push_back(x+y);\n            p[1].push_back(-x+y);\n            p[2].push_back(x-y);\n            p[3].push_back(-x-y);\n        }        \n        for (int i = 0 ; i < 4 ; i++ ) {\n            sort(p[i].begin(), p[i].end());\n        }\n        int minx = 1<<30;\n        for (auto point: points) {\n            int x = point[0];\n            int y = point[1];\n            int sum;\n            int maxx = 0;\n            for (int i = 0; i < 4; i++) {\n                if (i==0) {\n                    sum = x+y;\n                } else if (i==1) {\n                    sum = -x+y;\n                } else if (i==2) {\n                    sum = x-y;\n                } else if (i==3) {\n                    sum = -x-y;\n                }\n                int pos = lower_bound(p[i].begin(), p[i].end(), sum) - p[i].begin();\n                if (pos == n-1) {\n                    maxx = max(maxx, p[i][n-2]-p[i][0]);\n                } else if (pos == 0) {\n                    maxx = max(maxx, p[i][n-1]-p[i][1]);\n                } else {\n                    maxx = max(maxx, p[i][n-1]-p[i][0]);\n                }\n            }\n            minx = min(minx, maxx);\n        }\n        return minx;\n    }\n};"
}