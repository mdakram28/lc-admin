{
    "username": "LeviAckerman616",
    "submission": "class TrieNode {\npublic:\n    unordered_map<char, TrieNode*> children;\n    int cost;\n    \n    TrieNode() : cost(INT_MAX) {}\n};\n\nclass Trie {\npublic:\n    TrieNode* root;\n    \n    Trie() {\n        root = new TrieNode();\n    }\n    \n    void insert(const string& word, int cost) {\n        TrieNode* node = root;\n        int i = 0;\n        while (i < word.size()) {\n            char c = word[i];\n            if (!node->children.count(c)) {\n                node->children[c] = new TrieNode();\n            }\n            node = node->children[c];\n            ++i;\n        }\n        node->cost = min(node->cost, cost);\n    }\n};\n\nclass Solution {\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int n = target.size();\n        Trie trie;\n        int i = 0;\n        while (i < words.size()) {\n            trie.insert(words[i], costs[i]);\n            ++i;\n        }\n        \n        vector<int> dp(n + 1, INT_MAX);\n        dp[0] = 0;\n        \n        fun1(target, trie, dp);\n        \n        return dp[n] == INT_MAX ? -1 : dp[n];\n    }\n    \npublic:\n    void fun1(const string& target, Trie& trie, vector<int>& dp) {\n        int n = target.size();\n        int i = 0;\n        while (i < n) {\n            if (dp[i] == INT_MAX) {\n                ++i;\n                continue;\n            }\n            TrieNode* node = trie.root;\n            int j = i;\n            while (j < n) {\n                char c = target[j];\n                if (!node->children.count(c)) \n                    break;\n                node = node->children[c];\n                if (node->cost != INT_MAX) \n                    dp[j + 1] = min(dp[j + 1], dp[i] + node->cost);\n                ++j;\n            }\n            ++i;\n        }\n    }\n};\n",
    "submit_ts": "1720323697",
    "subm_id": "1312381847"
}