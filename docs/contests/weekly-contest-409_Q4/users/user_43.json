{
    "username": "Ryazimn",
    "submission": "const int N = 5e4 + 1;\nclass Solution {\npublic:\n    int n;\n    vector<int> ans;\n    int seg[N * 4][2];\n    void add(int x, int st, int ed, int p, int v) {\n        if (st > p || ed < p) {\n            return;\n        }\n        if (st == ed) {\n            seg[x][0] += v;\n            if (v > 0) {\n                seg[x][1]++;\n            } else {\n                seg[x][1]--;\n            }\n            return;\n        }\n        add(x * 2 + 1, st, (st + ed) / 2, p, v);\n        add(x * 2 + 2, (st + ed) / 2 + 1, ed, p, v);\n        seg[x][0] = seg[x * 2 + 1][0] + seg[x * 2 + 2][0];\n        seg[x][1] = seg[x * 2 + 1][1] + seg[x * 2 + 2][1];\n    }\n    void add(int p, int v) {\n        add(0, 0, n, p, v);\n    }\n    pair<int, int> getSum(int x, int st, int ed, int l, int r) {\n        if (st > r || ed < l) {\n            return {0, 0};\n        }\n        if (l <= st && ed <= r) {\n            return {seg[x][0], seg[x][1]};\n        }\n        pair<int, int> L = getSum(x * 2 + 1, st, (st + ed) / 2, l, r);\n        pair<int, int> R = getSum(x * 2 + 2, (st + ed) / 2 + 1, ed, l, r);\n        return {L.first + R.first, L.second + R.second};\n    }\n    pair<int, int> getSum(int l, int r) {\n        return getSum(0, 0, n, l, r);\n    }\n    set<int> ind;\n    int getNext(int i) {\n        auto t = ind.upper_bound(i);\n        if (t == end(ind)) {\n            return *begin(ind);\n        }\n        return *t;\n    }\n    int getPrev(int i) {\n        auto t = ind.lower_bound(i);\n        if (t == begin(ind)) {\n            return *prev(end(ind));\n        }\n        return *prev(t);\n    }\n    void insert(int i) {\n        if (ind.size() == 0) {\n            ind.insert(i);\n            return;\n        }\n        int l = getPrev(i), r = getNext(i);\n        if (l == r) {\n            add(n, -n);\n        } else {\n            add((r - l + n) % n, -((r - l + n) % n));\n        }\n        add((r - i + n) % n, (r - i + n) % n);\n        add((i - l + n) % n, (i - l + n) % n);\n        ind.insert(i);\n    }\n    void remove(int i) {\n        if (ind.find(i) == end(ind)) {\n            return;\n        }\n        int l = getPrev(i), r = getNext(i);\n        if (l == r) {\n            if (ind.size() > 1) {\n                add(n, n);\n            }\n        } else {\n            add((r - l + n) % n, ((r - l + n) % n));\n        }\n        add((r - i + n) % n, -((r - i + n) % n));\n        add((i - l + n) % n, -((i - l + n) % n));\n        ind.erase(i);\n    }\n    vector<int> numberOfAlternatingGroups(vector<int>& col, vector<vector<int>>& qs) {\n        n = col.size();\n        for (int i = 0; i < n; i++) {\n            if (col[i] == col[(i + 1) % n]) {\n                ind.insert((i + 1) % n);\n            }\n        }\n        if (ind.size() == 0) {\n            add(n, n);\n        } else {\n            for (int i: ind) {\n                auto t = ind.upper_bound(i);\n                if (t == end(ind)) {\n                    int j = (*begin(ind)) + n - i;\n                    add(j, j);\n                } else {\n                    int j = (*t) - i;\n                    add(j, j);\n                }\n            }\n        }\n        for (vector<int> i: qs) {\n            if (i[0] == 1) {\n                if (ind.size() == 0) {\n                    ans.push_back(n);\n                } else {\n                    pair<int, int> t = getSum(i[1], n);\n                    ans.push_back(t.first - t.second * (i[1] - 1));\n                }\n            } else {\n                if (i[2] == col[i[1]]) {\n                    continue;\n                }\n                if (col[i[1]] == col[(i[1] + 1) % n]) {\n                    remove((i[1] + 1) % n);\n                } else {\n                    insert((i[1] + 1) % n);\n                }\n                if (col[i[1]] == col[(i[1] - 1 + n) % n]) {\n                    remove(i[1]);\n                } else {\n                    insert(i[1]);\n                }\n                col[i[1]] = i[2];\n            }\n        }\n        return ans;\n    }\n};",
    "submit_ts": "1722743654",
    "subm_id": "1343796729"
}