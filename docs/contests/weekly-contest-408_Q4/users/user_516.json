{
    "username": "rajavarapuavinash57",
    "submission": "from collections import deque\nimport math\n\nclass Solution:\n    def bfs(self, g, s, t1, t2, n):\n        q = deque()\n        v = [0] * (n + 4)\n        q.append(s)\n        v[s] = 1\n        \n        while q:\n            u = q.popleft()\n            for w in g[u]:\n                if not v[w]:\n                    q.append(w)\n                    v[w] = 1\n        \n        return v[t1] or v[t2]\n    \n    def canReachCorner(self, w, h, c2):\n        c = [((x, y), r) for x, y, r in c2]\n        g = [[] for _ in range(len(c2) + 4)]\n        nc = len(c2)\n        \n        for i in range(nc):\n            x, y, r = c[i][0][0], c[i][0][1], c[i][1]\n            if x <= r:\n                g[nc].append(i)\n                g[i].append(nc)\n            if w - x <= r:\n                g[nc + 2].append(i)\n                g[i].append(nc + 2)\n            if y <= r:\n                g[nc + 1].append(i)\n                g[i].append(nc + 1)\n            if h - y <= r:\n                g[nc + 3].append(i)\n                g[i].append(nc + 3)\n            \n            for j in range(i + 1, nc):\n                x2, y2, r2 = c[j][0][0], c[j][0][1], c[j][1]\n                d = math.sqrt((x - x2) ** 2 + (y - y2) ** 2)\n                if r + r2 >= d:\n                    g[i].append(j)\n                    g[j].append(i)\n        \n        b = 0\n        b = max(b, self.bfs(g, nc, nc + 1, nc + 2, nc + 4))\n        b = max(b, self.bfs(g, nc + 3, nc + 2, nc + 1, nc + 4))\n        \n        if b:\n            return False\n        return True\n",
    "submit_ts": "1722137720",
    "subm_id": "1335771793"
}