{
    "username": "mohdikram",
    "submission": "\nclass Solution {\npublic:\n    // BFS function to check connectivity between nodes\n    bool bfs(vector<vector<int>>& graph, int start, int target1, int target2, int nodes) {\n        queue<int> q;\n        vector<int> visited(nodes + 4, 0);\n        q.push(start);\n        visited[start] = 1;\n        \n        while (!q.empty()) {\n            int u = q.front();\n            q.pop();\n            for (int v : graph[u]) {\n                if (!visited[v]) {\n                    q.push(v);\n                    visited[v] = 1;\n                }\n            }\n        }\n        return visited[target1] || visited[target2];\n    }\n\n    bool canReachCorner(int X, int Y, vector<vector<int>>& circles2) {\n        int num_circles = circles2.size();\n        vector<pair<pair<int, int>, int>> circles(num_circles);\n        vector<vector<int>> graph(num_circles + 4);  // +4 for the rectangle edges\n\n        // Initialize circles\n        for (int i = 0; i < num_circles; ++i) {\n            circles[i] = {{circles2[i][0], circles2[i][1]}, circles2[i][2]};\n        }\n\n        // Build graph\n        for (int i = 0; i < num_circles; ++i) {\n            if (circles[i].first.first <= circles[i].second) {\n                graph[num_circles].push_back(i);        // Connect to left edge\n                graph[i].push_back(num_circles);\n            }\n            if (X - circles[i].first.first <= circles[i].second) {\n                graph[num_circles + 2].push_back(i);    // Connect to right edge\n                graph[i].push_back(num_circles + 2);\n            }\n            if (circles[i].first.second <= circles[i].second) {\n                graph[num_circles + 1].push_back(i);    // Connect to bottom edge\n                graph[i].push_back(num_circles + 1);\n            }\n            if (Y - circles[i].first.second <= circles[i].second) {\n                graph[num_circles + 3].push_back(i);    // Connect to top edge\n                graph[i].push_back(num_circles + 3);\n            }\n\n            // Check circle-to-circle connections\n            for (int j = i + 1; j < num_circles; ++j) {\n                double distance = sqrt(pow(circles[i].first.first - circles[j].first.first, 2) +\n                                       pow(circles[i].first.second - circles[j].first.second, 2));\n                int radius_sum = circles[i].second + circles[j].second;\n                if (radius_sum >= distance) {\n                    graph[i].push_back(j);\n                    graph[j].push_back(i);\n                }\n            }\n        }\n\n        // Check connectivity from bottom-left to top-right\n        int is_blocked = max(\n            bfs(graph, num_circles, num_circles + 1, num_circles + 2, num_circles + 4),  // Bottom-left corner\n            bfs(graph, num_circles + 3, num_circles + 2, num_circles + 1, num_circles + 4)  // Top-right corner\n        );\n\n        return !is_blocked;\n    }\n};",
    "submit_ts": "1722137201",
    "subm_id": "1335757027"
}