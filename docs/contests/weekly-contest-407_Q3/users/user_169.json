{
    "username": "megaspazz",
    "submission": "class Solution {\n    public int maxOperations(String s) {\n        LongDeque lst = new LongDeque();\n        int consec = 0;\n        for (char c : s.toCharArray()) {\n            if (c == '1') {\n                ++consec;\n            } else {\n                if (consec > 0) {\n                    lst.add(consec);\n                }\n                consec = 0;\n            }\n        }\n        \n        long[] arr = lst.toArray();\n        \n        final int K = arr.length;\n        \n        if (K == 0) {\n            return 0;\n        }\n        \n        long ans = 0;\n        for (int i = 0; i < K; ++i) {\n            ans += arr[i];\n            if (i + 1 < K) {\n                arr[i + 1] += arr[i];\n            }\n        }\n        return (int) ans;\n    }\n    \n    /**\n\t * Circular buffer of long values, can be used as:\n\t *   - ArrayList: values are added to end.\n\t *   - Queue: values are added to end and removed from front.\n\t *   - Stack: values are added to and removed from front.\n\t */\n\tpublic static class LongDeque {\n\t\tprivate long[] arr;\n\t\tprivate int off;\n\t\tprivate int len;\n\n\t\tpublic LongDeque() {\n\t\t\tthis(2);\n\t\t}\n\n\t\tpublic LongDeque(int capacity) {\n\t\t\tthis.arr = new long[capacity];\n\t\t}\n\n\t\tpublic void addFirst(long x) {\n\t\t\tif (len == arr.length) {\n\t\t\t\tincreaseCapacity();\n\t\t\t}\n\t\t\tif (off == 0) {\n\t\t\t\toff = arr.length;\n\t\t\t}\n\t\t\tarr[--off] = x;\n\t\t\t++len;\n\t\t}\n\n\t\tpublic void addLast(long x) {\n\t\t\tif (len == arr.length) {\n\t\t\t\tincreaseCapacity();\n\t\t\t}\n\t\t\tint idx = index(off + len);\n\t\t\tarr[idx] = x;\n\t\t\t++len;\n\t\t}\n\n\t\tpublic long peekFirst() {\n\t\t\treturn arr[off];\n\t\t}\n\n\t\tpublic long peekLast() {\n\t\t\tint idx = index(off + len - 1);\n\t\t\treturn arr[idx];\n\t\t}\n\n\t\tpublic long removeFirst() {\n\t\t\tlong ans = peekFirst();\n\t\t\toff = index(off + 1);\n\t\t\t--len;\n\t\t\treturn ans;\n\t\t}\n\n\t\tpublic long removeLast() {\n\t\t\tlong ans = peekLast();\n\t\t\t--len;\n\t\t\treturn ans;\n\t\t}\n\n\t\tpublic void add(long x) {\n\t\t\taddLast(x);\n\t\t}\n\n\t\tpublic void offer(long x) {\n\t\t\taddLast(x);\n\t\t}\n\n\t\tpublic long poll() {\n\t\t\treturn removeFirst();\n\t\t}\n\n\t\tpublic void push(long x) {\n\t\t\taddFirst(x);\n\t\t}\n\n\t\tpublic long pop() {\n\t\t\treturn removeFirst();\n\t\t}\n\n\t\tpublic long peek() {\n\t\t\treturn peekFirst();\n\t\t}\n\n\t\tpublic long get(int i) {\n\t\t\tif (i >= len) {\n\t\t\t\tthrow new ArrayIndexOutOfBoundsException(String.format(\"index %d out of range [0, %d)\", i, len));\n\t\t\t}\n\t\t\tint idx = index(i + off);\n\t\t\treturn arr[idx];\n\t\t}\n\n\t\tpublic void set(int i, long x) {\n\t\t\tif (i >= len) {\n\t\t\t\tthrow new ArrayIndexOutOfBoundsException(String.format(\"index %d out of range [0, %d)\", i, len));\n\t\t\t}\n\t\t\tint idx = index(i + off);\n\t\t\tarr[idx] = x;\n\t\t}\n\n\t\tpublic int size() {\n\t\t\treturn len;\n\t\t}\n\n\t\tpublic boolean isEmpty() {\n\t\t\treturn size() == 0;\n\t\t}\n\n\t\tpublic long[] toArray() {\n\t\t\tif (len == 0) {\n\t\t\t\treturn new long[0];\n\t\t\t}\n\t\t\tint idx = index(off + len);\n\t\t\tif (idx > off) {\n\t\t\t\treturn Arrays.copyOfRange(arr, off, idx);\n\t\t\t}\n\t\t\tlong[] A = new long[len];\n\t\t\tint endLen = arr.length - off;\n\t\t\tint startLen = len - endLen;\n\t\t\tSystem.arraycopy(arr, off, A, 0, endLen);\n\t\t\tSystem.arraycopy(arr, 0, A, endLen, startLen);\n\t\t\treturn A;\n\t\t}\n\n\t\t@Override\n\t\tpublic String toString() {\n\t\t\tStringBuilder sb = new StringBuilder();\n\t\t\tsb.append('[');\n\t\t\tprintToBuffer(sb, \", \");\n\t\t\tsb.append(']');\n\t\t\treturn sb.toString();\n\t\t}\n\n\t\tprivate void increaseCapacity() {\n\t\t\tlong[] next = new long[arr.length << 1];\n\t\t\tint endLen = arr.length - off;\n\t\t\tSystem.arraycopy(arr, off, next, 0, endLen);\n\t\t\tSystem.arraycopy(arr, 0, next, endLen, off);\n\t\t\tarr = next;\n\t\t\toff = 0;\n\t\t}\n\n\t\tprivate int index(int i) {\n\t\t\tif (i >= arr.length) {\n\t\t\t\ti -= arr.length;\n\t\t\t} else if (i < 0) {\n\t\t\t\ti += arr.length;\n\t\t\t}\n\t\t\treturn i;\n\t\t}\n\n\t\tprivate void printToBuffer(StringBuilder sb, CharSequence sep) {\n\t\t\tfor (int i = 0; i < len; ++i) {\n\t\t\t\tif (i > 0) {\n\t\t\t\t\tsb.append(sep);\n\t\t\t\t}\n\t\t\t\tsb.append(get(i));\n\t\t\t}\n\t\t}\n\n\t\tpublic static LongDeque of(long... arr) {\n\t\t\tLongDeque deq = new LongDeque();\n\t\t\tfor (long x : arr) {\n\t\t\t\tdeq.add(x);\n\t\t\t}\n\t\t\treturn deq;\n\t\t}\n\t}\n    \n\t/**\n\t * Circular buffer of int values, can be used as:\n\t *   - ArrayList: values are added to end.\n\t *   - Queue: values are added to end and removed from front.\n\t *   - Stack: values are added to and removed from front.\n\t */\n\tpublic static class IntDeque {\n\t\tprivate int[] arr;\n\t\tprivate int off;\n\t\tprivate int len;\n\n\t\tpublic IntDeque() {\n\t\t\tthis(2);\n\t\t}\n\n\t\tpublic IntDeque(int capacity) {\n\t\t\tthis.arr = new int[capacity];\n\t\t}\n\n\t\tpublic void addFirst(int x) {\n\t\t\tif (len == arr.length) {\n\t\t\t\tincreaseCapacity();\n\t\t\t}\n\t\t\tif (off == 0) {\n\t\t\t\toff = arr.length;\n\t\t\t}\n\t\t\tarr[--off] = x;\n\t\t\t++len;\n\t\t}\n\n\t\tpublic void addLast(int x) {\n\t\t\tif (len == arr.length) {\n\t\t\t\tincreaseCapacity();\n\t\t\t}\n\t\t\tint idx = index(off + len);\n\t\t\tarr[idx] = x;\n\t\t\t++len;\n\t\t}\n\n\t\tpublic int peekFirst() {\n\t\t\treturn arr[off];\n\t\t}\n\n\t\tpublic int peekLast() {\n\t\t\tint idx = index(off + len - 1);\n\t\t\treturn arr[idx];\n\t\t}\n\n\t\tpublic int removeFirst() {\n\t\t\tint ans = peekFirst();\n\t\t\toff = index(off + 1);\n\t\t\t--len;\n\t\t\treturn ans;\n\t\t}\n\n\t\tpublic int removeLast() {\n\t\t\tint ans = peekLast();\n\t\t\t--len;\n\t\t\treturn ans;\n\t\t}\n\n\t\tpublic void add(int x) {\n\t\t\taddLast(x);\n\t\t}\n\n\t\tpublic void offer(int x) {\n\t\t\taddLast(x);\n\t\t}\n\n\t\tpublic int poll() {\n\t\t\treturn removeFirst();\n\t\t}\n\n\t\tpublic void push(int x) {\n\t\t\taddFirst(x);\n\t\t}\n\n\t\tpublic int pop() {\n\t\t\treturn removeFirst();\n\t\t}\n\n\t\tpublic int peek() {\n\t\t\treturn peekFirst();\n\t\t}\n\n\t\tpublic int get(int i) {\n\t\t\tif (i >= len) {\n\t\t\t\tthrow new ArrayIndexOutOfBoundsException(String.format(\"index %d out of range [0, %d)\", i, len));\n\t\t\t}\n\t\t\tint idx = index(i + off);\n\t\t\treturn arr[idx];\n\t\t}\n\n\t\tpublic void set(int i, int x) {\n\t\t\tif (i >= len) {\n\t\t\t\tthrow new ArrayIndexOutOfBoundsException(String.format(\"index %d out of range [0, %d)\", i, len));\n\t\t\t}\n\t\t\tint idx = index(i + off);\n\t\t\tarr[idx] = x;\n\t\t}\n\n\t\tpublic int size() {\n\t\t\treturn len;\n\t\t}\n\n\t\tpublic boolean isEmpty() {\n\t\t\treturn size() == 0;\n\t\t}\n\n\t\tpublic int[] toArray() {\n\t\t\tif (len == 0) {\n\t\t\t\treturn new int[0];\n\t\t\t}\n\t\t\tint idx = index(off + len);\n\t\t\tif (idx > off) {\n\t\t\t\treturn Arrays.copyOfRange(arr, off, idx);\n\t\t\t}\n\t\t\tint[] A = new int[len];\n\t\t\tint endLen = arr.length - off;\n\t\t\tint startLen = len - endLen;\n\t\t\tSystem.arraycopy(arr, off, A, 0, endLen);\n\t\t\tSystem.arraycopy(arr, 0, A, endLen, startLen);\n\t\t\treturn A;\n\t\t}\n\n\t\t@Override\n\t\tpublic String toString() {\n\t\t\tStringBuilder sb = new StringBuilder();\n\t\t\tsb.append('[');\n\t\t\tprintToBuffer(sb, \", \");\n\t\t\tsb.append(']');\n\t\t\treturn sb.toString();\n\t\t}\n\n\t\tprivate void increaseCapacity() {\n\t\t\tint[] next = new int[arr.length << 1];\n\t\t\tint endLen = arr.length - off;\n\t\t\tSystem.arraycopy(arr, off, next, 0, endLen);\n\t\t\tSystem.arraycopy(arr, 0, next, endLen, off);\n\t\t\tarr = next;\n\t\t\toff = 0;\n\t\t}\n\n\t\tprivate int index(int i) {\n\t\t\tif (i >= arr.length) {\n\t\t\t\ti -= arr.length;\n\t\t\t} else if (i < 0) {\n\t\t\t\ti += arr.length;\n\t\t\t}\n\t\t\treturn i;\n\t\t}\n\n\t\tprivate void printToBuffer(StringBuilder sb, CharSequence sep) {\n\t\t\tfor (int i = 0; i < len; ++i) {\n\t\t\t\tif (i > 0) {\n\t\t\t\t\tsb.append(sep);\n\t\t\t\t}\n\t\t\t\tsb.append(get(i));\n\t\t\t}\n\t\t}\n\n\t\tpublic static IntDeque of(int... arr) {\n\t\t\tIntDeque deq = new IntDeque();\n\t\t\tfor (int x : arr) {\n\t\t\t\tdeq.add(x);\n\t\t\t}\n\t\t\treturn deq;\n\t\t}\n\t}\n}",
    "submit_ts": "1721529788",
    "subm_id": "1327912812"
}