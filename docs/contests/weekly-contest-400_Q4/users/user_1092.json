{
    "username": "puneeth225",
    "submission": "class Solution {\npublic:\n    void decrementZeros(int x, vector<int>& zeroCount) {\n    for (int i = 0; i < 32; ++i) {\n        if (((x >> i) & 1) == 0) {\n            zeroCount[i] -= 1;\n        }\n    }\n}\n\nvoid incrementZeros(int x, vector<int>& zeroCount) {\n    for (int i = 0; i < 32; ++i) {\n        if (((x >> i) & 1) == 0) {\n            zeroCount[i] += 1;\n        }\n    }\n}\n    int minimumDifference(vector<int>& nums, int k) {\n         vector<int> zeroCount(32, 0);\n\n    auto evaluate = [&]() {\n        int result = 0;\n        for (int i = 0; i < 32; ++i) {\n            if (zeroCount[i] == 0) {\n                result ^= (1 << i);\n            }\n        }\n        return result;\n    };\n\n    int leftIndex = 0;\n    int size = nums.size();\n    int minimumDiff = INT_MAX;\n\n    for (int rightIndex = 0; rightIndex < size; ++rightIndex) {\n        incrementZeros(nums[rightIndex], zeroCount);\n        int currentXOR = evaluate();\n        minimumDiff = min(minimumDiff, std::abs(currentXOR - k));\n        while (leftIndex < rightIndex && currentXOR < k) {\n            decrementZeros(nums[leftIndex], zeroCount);\n            ++leftIndex;\n            currentXOR = evaluate();\n            minimumDiff = min(minimumDiff, std::abs(currentXOR - k));\n        }\n    }\n\n    return minimumDiff;\n    }\n};",
    "submit_ts": 1717300184.0
}