{
    "username": "Kpaxtime",
    "submission": "public class Solution {\n    public int[] ShortestDistanceAfterQueries(int n, int[][] queries) {\n                //Create adjlist\n        var  intervals = new List<int[]>();\n\n        for(int i = 0; i < n; i++)\n        {\n            if(i < n - 1)\n            {\n                intervals.Add(new int[] {i, i+1});\n            }\n        }\n        //Console.WriteLine($\"Original interval count: {intervals.Count}\");\n\n        var solution = new List<int>();\n\n        foreach(var query in queries)\n        {\n            Bsearch(query, intervals);\n            solution.Add(intervals.Count);\n            //Console.WriteLine($\" interval count: {intervals.Count}\");\n        }\n\n        return solution.ToArray();\n    }\n\n    public void Bsearch(int[] query, List<int[]> intervals)\n    {\n        var left = 0;\n        var right = intervals.Count - 1;\n        var start = 0;\n        var mid = left + (right - left)/2;\n        var foundMatch = false;\n\n        //Find start\n        while(left <= right)\n        {\n            mid = left + (right - left)/2;\n            //Console.WriteLine($\"left: {left} right: {right} mid: {mid}  {intervals[mid][0]},{intervals[mid][1]} vs {query[0]}\");\n\n            if(intervals[mid][0] ==  query[0])\n            {\n                //Console.WriteLine($\"found match!\");\n                foundMatch = true;\n                start = mid;\n                break;\n            }\n            else if(intervals[mid][0] <  query[0])\n            {\n                left = mid + 1;\n            }\n            else\n            {\n                right = mid - 1;\n            }\n        }\n        //Console.WriteLine($\"mid: {mid}\");\n\n        if(!foundMatch)\n        {\n            return;\n        }\n\n        //Binary Search End\n        left = mid;\n        right = intervals.Count - 1;\n        var endMid = left + (right - left)/2;\n        var intervalEnd = 0;\n\n        while(left <= right)\n        {\n            endMid = left + (right - left)/2;\n\n            if(intervals[endMid][1] <= query[1])\n            {\n                intervalEnd = endMid;\n                left = endMid + 1;\n            }\n            else\n            {\n                right = endMid - 1;\n            }\n        }\n        intervals.RemoveRange(mid+1, intervalEnd - mid);\n    }\n}",
    "submit_ts": "1722741934",
    "subm_id": "1343756984"
}