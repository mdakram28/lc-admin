{
    "username": "bobby_444",
    "submission": "class Solution {\n\npublic:\n     int bfs(const std::vector<std::vector<int>>& graph, int start, int target1, int target2, int nodes) {\n        std::queue<int> q;\n        std::vector<int> visited(nodes, 0);\n        q.push(start);\n        visited[start] = 1;\n\n        while (!q.empty()) {\n            int u = q.front();\n            q.pop();\n            for (int v : graph[u]) {\n                if (!visited[v]) {\n                    q.push(v);\n                    visited[v] = 1;\n                }\n            }\n        }\n        return visited[target1] || visited[target2];\n    }\n\n    bool canReachCorner(int X, int Y, const std::vector<std::vector<int>>& circles2) {\n        int num_circles = circles2.size();\n        std::vector<std::pair<std::pair<int, int>, int>> circles(num_circles);\n        std::vector<std::vector<int>> graph(num_circles + 4);\n\n        for (int i = 0; i < num_circles; ++i) {\n            circles[i] = {{circles2[i][0], circles2[i][1]}, circles2[i][2]};\n        }\n\n        for (int i = 0; i < num_circles; ++i) {\n            int x = circles[i].first.first;\n            int y = circles[i].first.second;\n            int r = circles[i].second;\n\n            if (x <= r) {\n                graph[num_circles].push_back(i);\n                graph[i].push_back(num_circles);\n            }\n            if (X - x <= r) {\n                graph[num_circles + 2].push_back(i);\n                graph[i].push_back(num_circles + 2);\n            }\n            if (y <= r) {\n                graph[num_circles + 1].push_back(i);\n                graph[i].push_back(num_circles + 1);\n            }\n            if (Y - y <= r) {\n                graph[num_circles + 3].push_back(i);\n                graph[i].push_back(num_circles + 3);\n            }\n\n            for (int j = i + 1; j < num_circles; ++j) {\n                int x2 = circles[j].first.first;\n                int y2 = circles[j].first.second;\n                int r2 = circles[j].second;\n                double distance = std::sqrt(std::pow(x - x2, 2) + std::pow(y - y2, 2));\n                if (r + r2 >= distance) {\n                    graph[i].push_back(j);\n                    graph[j].push_back(i);\n                }\n            }\n        }\n\n        bool is_blocked = false;\n        is_blocked = is_blocked || bfs(graph, num_circles, num_circles + 1, num_circles + 2, num_circles + 4); // Bottom-left corner\n        is_blocked = is_blocked || bfs(graph, num_circles + 3, num_circles + 2, num_circles + 1, num_circles + 4); // Top-right corner\n\n        return !is_blocked;\n    }\n};",
    "submit_ts": "1722137271",
    "subm_id": "1335758996"
}