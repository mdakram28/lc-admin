{
    "username": "Samuel-Aktar-Laskar",
    "submission": "class Solution {\npublic:\nstruct trie {\n    int cost;\n    trie* next[26];\n    trie(){\n        cost= -1;\n        for(int i=0;i<26;i++){\n            next[i] = NULL;\n        }\n    }\n};\ntrie* root;\n\nstring target;\nint dp[500001];\nint solve(int i){\n    int n = target.size();\n    if (i>=n) return 0;\n    if (dp[i] != -1) return dp[i];\n\n    auto node = root;\n    int res = 1e9;\n    for(int j=i;j<n;j++){\n        int c = target[j]-'a';\n        if (node->next[c] == NULL) break;\n        node = node->next[c];\n        if (node->cost != -1){\n            res = min(res,node->cost +  solve(j+1));\n        }\n    }\n    dp[i] = res;\n    return res;\n\n}\n\nvoid put(string& word, int cost){\n    auto node = root;\n    for(char c : word){\n        if (node->next[c-'a'] == NULL) node->next[c-'a'] = new trie();\n        node = node->next[c-'a'];\n    }\n    if (node->cost != -1)\n        node->cost = min(node->cost, cost);\n    else node->cost = cost;\n}\n\n\nint minimumCost(string target, vector<string>& words, vector<int>& costs) {\n    memset(dp,-1,sizeof(dp));\n   int n = words.size();\n   root =  new trie();\n   for(int i=0;i<n;i++){\n      put(words[i], costs[i]);\n   } \n   this->target = target;\n   int ans = solve(0);\n    if (ans >= 1e9) return -1;\n    return ans;\n}\n\n};",
    "submit_ts": "1720321127",
    "subm_id": "1312314264"
}