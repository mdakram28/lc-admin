{
    "username": "karanjohn890",
    "submission": "class Solution {\npublic:\n    struct TrieNode {\n        vector<TrieNode*> children;\n        int cost = -1;  // store cost when it's a word end\n\n        TrieNode() : children(26, nullptr) {}\n    };\n\n    void insert(TrieNode* root, const string& word, int cost) {\n        TrieNode* node = root;\n        for (char c : word) {\n            if (!node->children[c - 'a'])\n                node->children[c - 'a'] = new TrieNode();\n            node = node->children[c - 'a'];\n        }\n        // Only update cost if it's the first time or found a cheaper cost\n        if (node->cost == -1 || node->cost > cost)\n            node->cost = cost;\n    }\n\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        TrieNode* root = new TrieNode();\n        int n = target.length();\n        \n        // Build the trie from words and store costs\n        for (int i = 0; i < words.size(); ++i)\n            insert(root, words[i], costs[i]);\n\n        vector<int> dp(n + 1, numeric_limits<int>::max());\n        dp[0] = 0;  // zero cost to build an empty string\n\n        for (int i = 0; i < n; ++i) {\n            if (dp[i] == numeric_limits<int>::max()) continue;  // No valid construction\n\n            TrieNode* node = root;\n            for (int j = i; j < n && node; ++j) {\n                char c = target[j];\n                node = node->children[c - 'a'];\n                if (!node) break;  // No further matches\n\n                if (node->cost != -1) {  // Is a word ending here\n                    dp[j + 1] = min(dp[j + 1], dp[i] + node->cost);\n                }\n            }\n        }\n\n        return dp[n] == numeric_limits<int>::max() ? -1 : dp[n];\n    }\n};",
    "submit_ts": "1720320835",
    "subm_id": "1312305892"
}