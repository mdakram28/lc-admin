{
    "username": "devansh789",
    "submission": "class Solution {\npublic:\n    void dfs(int node, int par, vector<vector<int>> &tree, vector<int> &dp) {\n        for(auto &ch: tree[node]) {\n            if(par==ch) continue;\n            dfs(ch,node,tree,dp);\n            dp[node] = max(dp[node],dp[ch]+2-(ch%2));\n        }\n    }\n    \n    void reroot(int node, int par, vector<vector<int>> &tree, vector<int> &dp, vector<int> &ans) {\n        // cout << node << \" -> \" << dp[node] << endl;\n        int max1 = 0, max2 = 0;\n        for(auto &ch: tree[node]) {\n            // if(par==ch) continue;\n            int x = dp[ch]+2-(ch%2);\n            // cout <<\"*\" << dp[ch] << endl;\n            if(x>max1) {\n                max2 = max1;\n                max1 = x;\n            }\n            else max2 = max(max2,x);\n        }\n        int y = dp[node];\n        dp[node] = max1;\n        ans[node] = max1;\n        for(auto &ch: tree[node]) {\n            if(par==ch) continue;\n            int x = dp[node];\n            int z = dp[ch]+2-(ch%2);\n            if(z==max1) {\n                dp[node] = max2;\n            }\n            int w = dp[ch];\n            // dp[ch] = dp[node]+2-(node%2);\n            reroot(ch,node,tree,dp,ans);\n            // dp[ch] = w;\n            dp[node] = x;\n        }\n        dp[node] = y;\n    }\n    \n    vector<int> timeTaken(vector<vector<int>>& edges) {\n        int n = edges.size()+1;\n        vector<vector<int>> tree(n);\n        for(auto i: edges) {\n            tree[i[0]].push_back(i[1]);\n            tree[i[1]].push_back(i[0]);\n        }\n        vector<int> dp(n),ans(n);\n        dfs(0,n,tree,dp);\n        // for(int i = 0; i < n; i++) cout << dp[i] << \" \";\n        // cout << endl;\n        reroot(0,n,tree,dp,ans);\n        // for(int i = 0; i < n; i++) cout << dp[i] << \" \";\n        // cout << endl;\n        return ans;\n    }\n};",
    "submit_ts": "1722700026",
    "subm_id": "1343229446"
}