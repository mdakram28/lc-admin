{
    "username": "vsr5005",
    "submission": "class Solution {\npublic:\n    bool canReachCorner(int X, int Y, vector<vector<int>>& circles) {\n        return isPathPossible(X, Y, circles);\n    }\n    bool bfs(vector<vector<int>>& g, int start, int target1, int target2, int totalNodes) {\n        queue<int> q;\n        vector<bool> vis(totalNodes, false);\n        q.push(start);\n        vis[start]=true;\n        while (!q.empty()) {\n            int curr=q.front();\n            q.pop();\n            for (int it: g[curr]) {\n                if (!vis[it]) {\n                    q.push(it);\n                    vis[it] = true;\n                }\n            }\n        }\n        return vis[target1] || vis[target2];\n    }\n    bool isPathPossible(int X, int Y, vector<vector<int>>& circles) {\n        int n=circles.size();\n        vector<vector<int>> g(n+4);\n        for (int i=0;i<n;i++) {\n            if(circles[i][0]<=circles[i][2]) {\n                g[n].push_back(i);\n                g[i].push_back(n);\n            }\n            if (circles[i][1]<=circles[i][2]) {\n                g[n+1].push_back(i);\n                g[i].push_back(n+1);\n            }\n            if(X-circles[i][0]<=circles[i][2]) {\n                g[n+2].push_back(i);\n                g[i].push_back(n+2);\n            }\n            if (circles[i][2]>=Y-circles[i][1]) {\n                g[n+3].push_back(i);\n                g[i].push_back(n+3);\n            }\n            for (int j=i+1;j<n;++j) {\n                double dis=sqrt(pow(circles[i][0]-circles[j][0],2)+pow(circles[i][1]-circles[j][1],2));\n                int rSum=circles[j][2]+circles[i][2];\n                if (rSum>=dis) {\n                    g[i].push_back(j);\n                    g[j].push_back(i);\n                }\n            }\n        }\n\n        bool isB= bfs(g, n, n + 1, n + 2, n + 4) || bfs(g, n + 3, n+ 2, n + 1, n+ 4);\n\n        return !isB;\n    }\n}; ",
    "submit_ts": "1722138934",
    "subm_id": "1335803514"
}