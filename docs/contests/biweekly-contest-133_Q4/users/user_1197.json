{
    "username": "ola_abdallah",
    "submission": "class Solution:\n    def numberOfPermutations(self, n: int, requirements: List[List[int]]) -> int:\n        MOD=10**9+7\n        \n        requirements.sort()\n        max_inversions = 400  # Based on the problem constraints\n\n        # Initialize DP table\n        dp = [[0] * (max_inversions + 1) for _ in range(n + 1)]\n        dp[0][0] = 1\n\n        for length in range(1, n + 1):\n            new_dp = [[0] * (max_inversions + 1) for _ in range(n + 1)]\n\n            for inversions in range(max_inversions + 1):\n                if dp[length - 1][inversions] > 0:\n                    for new_pos in range(length):\n                        new_inversions = inversions + new_pos\n                        if new_inversions <= max_inversions:\n                            new_dp[length][new_inversions] = (new_dp[length][new_inversions] + dp[length - 1][inversions]) % MOD\n\n            dp = new_dp\n\n            for end, cnt in requirements:\n                if end + 1 == length:\n                    for inversions in range(max_inversions + 1):\n                        if inversions != cnt:\n                            dp[length][inversions] = 0\n\n        result = sum(dp[n]) % MOD\n        return result\n\n",
    "submit_ts": "1719071946",
    "subm_id": "1296857676"
}