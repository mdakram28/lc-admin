{
    "username": "e7x0pbWqIm",
    "submission": "typedef long long ll;\n\nstruct trie{\n    trie* links[26];\n    ll end,cost,is_pref;\n    trie(){\n        end = 0;\n        cost = 1e8;\n        is_pref = 1;\n        for(int i = 0;i<26;i++)links[i] = NULL;\n    }\n};\n\nclass trieNode{\n    public : \n    trie* root;\n\n    trieNode(){\n        root = new trie();\n    }\n\n    void insert(string &s,ll c){\n        trie* curr = root;\n        int n = s.size();\n        for(int i = 0;i<n;i++){\n            char ch = s[i];\n            if(curr->links[ch - 'a'] == NULL){\n                curr->links[ch - 'a'] = new trie();\n            }\n            curr = curr->links[ch - 'a'];\n           curr->is_pref = 1;\n        }\n        if(curr->end == 0)curr->cost = c;\n        else curr->cost = min(curr->cost,c);\n        \n        curr->end++;\n    }\n\n    \n};\n\nclass Solution {\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        trieNode* tree = new trieNode();\n        \n        int syz = costs.size();\n        \n        for(int i = 0;i<syz;i++)tree->insert(words[i],costs[i]);\n        \n        int n = target.size();\n        \n        vector<ll>dp(n + 1,0);\n        \n        dp[n] = 0;\n        \n        for(int id = n - 1;id>=0;id--){\n            trie* curr = tree->root;\n            \n            ll mn = 1e9;\n            for(int j = id;j<n && curr && curr->is_pref ;j++){\n                curr = curr->links[target[j] - 'a'];\n                if(curr && curr->end > 0){\n                    mn = min(mn,curr->cost + dp[j + 1]);\n                }\n            }\n            \n            dp[id] = mn;\n        }\n        \n        if(dp[0] == 1000000000)return -1;\n        \n        return dp[0];\n    }\n};",
    "submit_ts": "1720324075",
    "subm_id": "1312390987"
}