{
    "username": "n2c",
    "submission": "class Solution {\n    public int minimumCost(String target, String[] words, int[] costs) {\n        return sol1(target, words, costs);\n    }\n    \n    private int sol1(String target, String[] words, int[] costs) {\n        if (target.length() <= 0) {\n            return 0;\n        }\n        \n        List<List<Integer>> graph = new ArrayList<>();\n        for (int c = 0; c < 26; c++) {\n            graph.add(new ArrayList<>());\n        }\n        for (int i = 0; i < words.length; i++) {\n            int c = words[i].charAt(0) - 'a';\n            graph.get(c).add(i);\n        }\n        for (int c = 0; c < 26; c++) {\n            Collections.sort(graph.get(c), (i1, i2) -> {\n                return words[i1].length() - words[i2].length() != 0 ? \n                    Integer.compare(words[i1].length(), words[i2].length()) : \n                    Integer.compare(costs[i1], costs[i2]);\n                }); \n        }\n        \n        \n        PriorityQueue<int[]> minHeap = new PriorityQueue<>((c1, c2) -> {\n            return c1[1] - c2[1] != 0 ? Integer.compare(c1[1], c2[1]) : Integer.compare(c1[0], c2[0]);\n            });//[pos, cost]\n        int[] minCost = new int[target.length() + 1];\n        Arrays.fill(minCost, Integer.MAX_VALUE);\n        \n        minCost[0] = 0;\n        minHeap.offer(new int[]{0, 0});\n        \n        while (!minHeap.isEmpty()) {\n            int[] curr = minHeap.poll();\n            int pos = curr[0], cost = curr[1];\n            if (pos == target.length()) {\n                return cost;\n            }\n            if (cost > minCost[pos]) {\n                continue;\n            }\n            int c = target.charAt(pos) - 'a';\n            for (int neig : graph.get(c)) {\n                int pos2 = words[neig].length() + pos;\n                if (pos2 > target.length()) {\n                    break;\n                }\n                int cost2 = cost + costs[neig];\n                if (minCost[pos2] > cost2 && \n                    target.substring(pos, pos2).equals(words[neig])) {\n                    minCost[pos2] = cost2;\n                    minHeap.offer(new int[]{pos2, cost2});\n                }\n            }\n        }\n        \n        return -1;\n    }\n}",
    "submit_ts": "1720324327",
    "subm_id": "1312396835"
}