{
    "username": "DVSINGH",
    "submission": "class Solution {\npublic:\n    struct Node {\n        int left;\n        int right;\n        int maxValue;\n    };\n\n    Node merge(Node l, Node r) {\n        if (l.left == 1000000 && r.left == 1000000) return {1000000, -1000000, -2000000};\n        if (l.left == 1000000) return r;\n        if (r.left == 1000000) return l;\n        int m = max(l.maxValue, max(r.maxValue, r.left - l.right));\n        return {l.left, r.right, m};\n    }\n\n    void build(int node, int start, int end) {\n        if (start == end) {\n            tree[node] = {1000000, -1000000, -2000000};\n        } else {\n            int mid = (start + end) / 2;\n            build(2 * node, start, mid);\n            build(2 * node + 1, mid + 1, end);\n            tree[node] = merge(tree[2 * node], tree[2 * node + 1]);\n        }\n    }\n\n    void update(int node, int start, int end, int idx, int value) {\n        if (start == end) {\n            arr[idx] = 1;\n            tree[node] = {value, value, 0};\n        } else {\n            int mid = (start + end) / 2;\n            if (idx <= mid) {\n                update(2 * node, start, mid, idx, value);\n            } else {\n                update(2 * node + 1, mid + 1, end, idx, value);\n            }\n            tree[node] = merge(tree[2 * node], tree[2 * node + 1]);\n        }\n    }\n\n    Node query(int node, int start, int end, int l, int r) {\n        if (r < start || end < l) {\n            return {1000000, -1000000, -2000000}; // Neutral element for merging\n        }\n        if (l <= start && end <= r) {\n            return tree[node];\n        }\n        int mid = (start + end) / 2;\n        Node left = query(2 * node, start, mid, l, r);\n        Node right = query(2 * node + 1, mid + 1, end, l, r);\n        return merge(left, right);\n    }\n\n    vector<Node> tree;\n    vector<int> arr;\n\n    vector<bool> getResults(vector<vector<int>>& queries) {\n        int s = 50000 + 100;\n        arr.resize(s, 0);\n        tree.resize(4 * s);\n        build(1, 0, 50000 + 1);\n        update(1, 0, 50000 + 1, 0, 0);\n        vector<bool> res;\n        for (auto i : queries) {\n            if (i[0] == 1) {\n                update(1, 0, 50000 + 1, i[1], i[1]);\n            } else {\n                Node d = query(1, 0, 50000 + 1, 0, i[1]);\n                int e=max(d.maxValue,i[1]-d.right);\n                \n                if (e >= i[2]) {\n                    res.push_back(true);\n                } else {\n                    res.push_back(false);\n                }\n            }\n        }\n        return res;\n    }\n};\n",
    "submit_ts": 1716651407.0
}