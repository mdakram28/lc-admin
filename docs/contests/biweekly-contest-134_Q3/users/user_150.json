{
    "username": "zronghui",
    "submission": "from typing import List\n\n\nclass PrefixSum:\n    def __init__(self, a):\n        self.n = len(a)\n        self.sum = [0] * (self.n + 1)\n        for i in range(1, self.n + 1):\n            self.sum[i] = self.sum[i - 1] + a[i - 1]\n\n    def __getitem__(self, key):\n        if isinstance(key, slice):\n            start = key.start if key.start is not None else 0\n            stop = key.stop if key.stop is not None else self.n - 1\n\n            return self.get_sum(start, stop)\n\n        return self.sum[key + 1]\n\n    def __iter__(self):\n        return iter(self.sum)\n\n    def __len__(self):\n        return self.n\n\n    def get_sum(self, l, r):\n\n        if l > r:\n            return 0\n        return self.sum[r + 1] - self.sum[l]\n\n    def __repr__(self):\n        return str(self.sum)\n\n\nclass Solution:\n    def numberOfAlternatingGroups(self, a: List[int], k) -> int:\n        n = len(a)\n        res = 0\n        # k = 3\n        a += a[: k - 1]\n\n        b = []\n        for i in range(len(a) - 1):\n            if a[i] != a[i + 1]:\n                b.append(1)\n            else:\n                b.append(0)\n\n        pre = PrefixSum(b)\n        for i in range(len(b)):\n            if i + k - 2 > len(b) - 1:\n                break\n            if pre[i : i + k - 2] == k - 1:\n                res += 1\n        return res\n",
    "submit_ts": "1720276901",
    "subm_id": "544553122"
}