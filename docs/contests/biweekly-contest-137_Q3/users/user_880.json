{
    "username": "Nikita Kar",
    "submission": "class Solution {\npublic:\n    long long maximumValueSum(vector<vector<int>>& board) {\n        int m = board.size();\n        int n = board[0].size();\n        vector<vector<pair<int, int>>> bestInRow(m);\n\n        for (int i = 0; i < m; ++i) {\n            vector<pair<int, int>> rowValues;\n            for (int j = 0; j < n; ++j) {\n                rowValues.emplace_back(board[i][j], j);\n            }\n            sort(rowValues.rbegin(), rowValues.rend());\n            for (int k = 0; k < min(3, n); ++k) {\n                bestInRow[i].push_back(rowValues[k]);\n            }\n        }\n\n        long long maxSum = LLONG_MIN;\n\n        for (int r1 = 0; r1 < m; ++r1) {\n            for (int r2 = r1 + 1; r2 < m; ++r2) {\n                for (int r3 = r2 + 1; r3 < m; ++r3) {\n                    for (auto [val1, c1] : bestInRow[r1]) {\n                        for (auto [val2, c2] : bestInRow[r2]) {\n                            for (auto [val3, c3] : bestInRow[r3]) {\n                                if (c1 != c2 && c2 != c3 && c1 != c3) {\n                                    long long currentSum = (long long)val1 +\n                                                           (long long)val2 +\n                                                           (long long)val3;\n                                    maxSum = max(maxSum, currentSum);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        return maxSum;\n    }\n};\n",
    "submit_ts": "1723906773",
    "subm_id": "1359071760"
}