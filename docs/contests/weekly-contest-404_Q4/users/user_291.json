{
    "username": "ParthSorathiya1210",
    "submission": "class Solution {\npublic:\n    pair<int, int> bfs(const vector<int> adj[], int start, int n) {\n        vector<int> dist(n, -1);\n        queue<int> q;\n        q.push(start);\n        dist[start] = 0;\n\n        int farthestNode = start;\n        int maxDist = 0;\n\n        while (!q.empty()) {\n            int node = q.front();\n            q.pop();\n\n            for (int neighbor : adj[node]) {\n                if (dist[neighbor] == -1) {\n                    dist[neighbor] = dist[node] + 1;\n                    q.push(neighbor);\n\n                    if (dist[neighbor] > maxDist) {\n                        maxDist = dist[neighbor];\n                        farthestNode = neighbor;\n                    }\n                }\n            }\n        }\n\n        return {farthestNode, maxDist};\n    }\n\n    int findDiameter(const vector<int> adj[], int n) {\n        // Perform BFS from an arbitrary node (0 in this case)\n        pair<int, int> p = bfs(adj, 0, n);\n\n        // Perform BFS from the farthest node found in the previous BFS\n        pair<int, int> q = bfs(adj, p.first, n);\n\n        // The distance to the farthest node in this second BFS is the diameter\n        return q.second;\n    }\n\n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1,\n                                  vector<vector<int>>& edges2) {\n        int n1 = edges1.size() + 1;\n        vector<int> adj1[n1];\n\n        int n2 = edges2.size() + 1;\n        vector<int> adj2[n2];\n\n        for (auto i : edges1) {\n            adj1[i[0]].push_back(i[1]);\n            adj1[i[1]].push_back(i[0]);\n        }\n\n        for (auto i : edges2) {\n            adj2[i[0]].push_back(i[1]);\n            adj2[i[1]].push_back(i[0]);\n        }\n\n        int diameter1 = findDiameter(adj1, n1);\n        int diameter2 = findDiameter(adj2, n2);\n        cout<<diameter1<<\" \"<<diameter2<<endl;\n\n        int ans = max(diameter1,max(diameter2,(((diameter1 + 1) /2) + ((diameter2 + 1) /2) + 1)));\n\n        return ans;\n    }\n};",
    "submit_ts": "1719718344",
    "subm_id": "1304414870"
}