{
    "username": "user9679yR",
    "submission": " #include <iostream>\n#include <vector>\n#include <queue>\n#include <cmath>\n#include <algorithm>\n    \n    class Solution {\n        \npublic:\n        \n          bool bfs(const vector<vector<int>>& graph, int startNode, int targetNode1, int targetNode2, int totalNodes) {\n        queue<int> q;\n        vector<int> visited(totalNodes + 4, 0);\n        q.push(startNode);\n        visited[startNode] = 1;\n\n        while (!q.empty()) {\n            int currentNode = q.front();\n            q.pop();\n            for (int neighbor : graph[currentNode]) {\n                if (!visited[neighbor]) {\n                    q.push(neighbor);\n                    visited[neighbor] = 1;\n                }\n            }\n        }\n        return visited[targetNode1] || visited[targetNode2];\n    }\n\n     void buildGraph(int gridWidth, int gridHeight, const vector<pair<pair<int, int>, int>>& circles, vector<vector<int>>& graph) {\n        int numCircles = circles.size();\n        for (int i = 0; i < numCircles; ++i) {\n            int circleX = circles[i].first.first;\n            int circleY = circles[i].first.second;\n            int radius = circles[i].second;\n\n            if (circleX <= radius) {\n                graph[numCircles].push_back(i);\n                graph[i].push_back(numCircles);\n            }\n            if (gridWidth - circleX <= radius) {\n                graph[numCircles + 2].push_back(i);\n                graph[i].push_back(numCircles + 2);\n            }\n            if (circleY <= radius) {\n                graph[numCircles + 1].push_back(i);\n                graph[i].push_back(numCircles + 1);\n            }\n            if (gridHeight - circleY <= radius) {\n                graph[numCircles + 3].push_back(i);\n                graph[i].push_back(numCircles + 3);\n            }\n            for (int j = i + 1; j < numCircles; ++j) {\n                int otherCircleX = circles[j].first.first;\n                int otherCircleY = circles[j].first.second;\n                int otherRadius = circles[j].second;\n\n                double distance = sqrt(pow(circleX - otherCircleX, 2) + pow(circleY - otherCircleY, 2));\n                int combinedRadius = radius + otherRadius;\n                if (combinedRadius >= distance) {\n                    graph[i].push_back(j);\n                    graph[j].push_back(i);\n                }\n            }\n        }\n    }\n\n     bool canReachCorner(int gridWidth, int gridHeight, vector<vector<int>>& circles2) {\n        vector<pair<pair<int, int>, int>> circles(circles2.size());\n        vector<vector<int>> graph(circles2.size() + 4);\n        int numCircles = circles2.size();\n\n        for (int i = 0; i < numCircles; ++i) {\n            circles[i].first.first = circles2[i][0];\n            circles[i].first.second = circles2[i][1];\n            circles[i].second = circles2[i][2];\n        }\n\n        buildGraph(gridWidth, gridHeight, circles, graph);\n\n        int isBlocked = 0;\n        isBlocked = max(isBlocked, static_cast<int>(bfs(graph, numCircles, numCircles + 1, numCircles + 2, numCircles + 4))); \n        isBlocked = max(isBlocked, static_cast<int>(bfs(graph, numCircles + 3, numCircles + 2, numCircles + 1, numCircles + 4)));  \n        \n        return !isBlocked;\n    }\n};\n ",
    "submit_ts": "1722139080",
    "subm_id": "1335807277"
}