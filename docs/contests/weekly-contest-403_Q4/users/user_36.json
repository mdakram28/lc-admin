{
    "username": "watashi",
    "submission": "class Solution {\npublic:\n  struct Rect {\n    int r1, c1, r2, c2;\n\n    void upd(const Rect& rect) {\n      if (rect.r1 < 0) {\n      } else if (r1 < 0) {\n        *this = rect;\n      }\n      else {\n        r1 = min(r1, rect.r1);\n        r2 = max(r2, rect.r2);\n        c1 = min(c1, rect.c1);\n        c2 = max(c2, rect.c2);\n      }\n    }\n\n    int size() const {\n      if (r1 < 0) {\n        return 1;\n      }\n      else {\n        return (r2 - r1 + 1) * (c2 - c1 + 1);\n      }\n    }\n  };\n\n  static int gao(const vector<vector<int>>& g) {\n    const int R = g.size(), C = g[0].size();\n    if (R <= 0 || C <= 0) {\n      return 0;\n    }\n\n    static Rect rect[31][31][31][31];\n    fill(rect[0][0][0], rect[R][0][0], Rect{ -1, -1, -1, -1 });\n    for (int i = 0; i < R; ++i) {\n      for (int j = 0; j < C; ++j) {\n        auto p = rect[i][j];\n        for (int ii = i; ii < R; ++ii) {\n          for (int jj = j; jj < C; ++jj) {\n            if (ii > i) {\n              p[ii][jj].upd(p[ii - 1][jj]);\n            }\n            if (jj > j) {\n              p[ii][jj].upd(p[ii][jj - 1]);\n            }\n            if (g[ii][jj] == 1) {\n              p[ii][jj].upd(Rect{ ii, jj, ii, jj });\n            }\n          }\n        }\n      }\n    }\n\n    int ret = R * C;\n    for (int i = 1; i < R; ++i) {\n      const int up = rect[0][0][i - 1][C - 1].size();\n      for (int j = 1; j < C; ++j) {\n        ret = min(ret, up + rect[i][0][R - 1][j - 1].size() + rect[i][j][R - 1][C - 1].size());\n      }\n      const int down = rect[i][0][R - 1][C - 1].size();\n      for (int j = 1; j < C; ++j) {\n        ret = min(ret, down + rect[0][0][i - 1][j - 1].size() + rect[0][j][i - 1][C - 1].size());\n      }\n      for (int ii = i + 1; ii < R; ++ii) {\n        ret = min(ret, up + rect[i][0][ii - 1][C - 1].size() + rect[ii][0][R - 1][C - 1].size());\n      }\n    }\n    return ret;\n  }\n\n  int minimumSum(vector<vector<int>>& grid) {\n    const int R = grid.size(), C = grid[0].size();\n    auto ret = gao(grid);\n    vector<vector<int>> g(C, vector<int>(R));\n    for (int i = 0; i < R; ++i) {\n      for (int j = 0; j < C; ++j) {\n        g[j][i] = grid[i][j];\n      }\n    }\n    return min(ret, gao(g));\n  }\n};",
    "submit_ts": 1719111678.0
}