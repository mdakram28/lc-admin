{
    "username": "jerryxu20",
    "submission": "\n\nclass Solution {\npublic:\n    vector<vector<int>> rotate(vector<vector<int>> &grid) {\n        int n = grid.size();\n        int m = grid[0].size();\n        vector<vector<int>> ans(m, vector<int>(n));\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                ans[j][i] = grid[i][j];                \n            }\n        }\n        \n        for (auto &row: ans) {\n            reverse(row.begin(), row.end());\n        }\n        return ans;\n    }\n    \n    int minimumSum(vector<vector<int>>& grid) {\n        int ans = 900 + 2;\n        \n        for (int _ = 0; _ < 4; _++) {                \n            int n = grid.size();\n            int m = grid[0].size();\n            int mni = 50;\n            int mxi = 0;\n            int mnj = 50;\n            int mxj = 0;\n\n            vector<vector<int>> nxt = grid;\n            for (int i = n - 1; i >= 0; i--) {\n                for (int j = 0; j < m; j++) {                    \n                    if (grid[i][j] == 1) {\n                        mni = min(mni, i);\n                        mxi = max(mxi, i);\n\n                        mnj = min(mnj, j);\n                        mxj = max(mxj, j);\n                    }\n                }\n                nxt.pop_back();\n                // cout << \"here1\" << endl;\n                \n                int rect = (mxi - mni + 1) * (mxj - mnj + 1);\n                if (rect > 900) rect = 1;\n\n                int cand = rect + solve(nxt);\n                ans = min(ans, cand);\n            }\n            \n            grid = rotate(grid);\n        }\n        \n        return ans;\n    }\n    \n    int solve(vector<vector<int>> &grid) {\n        int n = grid.size();\n        if (n == 0) return 2;\n        \n        int m = grid.size();\n        assert(m != 0);\n        \n        int ans = 900 + 2;\n        for (int _ = 0; _ < 4; _++) {                \n            int n = grid.size();\n            int m = grid[0].size();\n            int mni = 50;\n            int mxi = 0;\n            int mnj = 50;\n            int mxj = 0;\n\n            vector<vector<int>> nxt = grid;\n            // cout << \"here\" << endl;\n            for (int i = n - 1; i >= 0; i--) {\n                for (int j = 0; j < m; j++) {                    \n                    if (grid[i][j] == 1) {\n                        mni = min(mni, i);\n                        mxi = max(mxi, i);\n\n                        mnj = min(mnj, j);\n                        mxj = max(mxj, j);\n                    }\n                }\n                nxt.pop_back();\n                \n                int rect = (mxi - mni + 1) * (mxj - mnj + 1);\n                if (rect > 900) rect = 1;\n\n                int cand = rect + minimumArea(nxt);\n                ans = min(ans, cand);\n            }\n            \n            grid = rotate(grid);\n        }\n        return ans;   \n    }\n    \n    int minimumArea(vector<vector<int>>& grid) {\n        int mni = 1000;\n        int mxi = 0;\n        \n        int mnj = 1000;\n        int mxj = 0;\n        int n = grid.size();\n        if (n == 0) return 1;        \n        int m = grid[0].size();\n        \n        // cout << n << \" \" << m << endl;\n        if(m == 0) return 1;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (grid[i][j] == 1) {\n                    mni = min(i, mni);\n                    mxi = max(i, mxi);\n\n                    mnj = min(j, mnj);\n                    mxj = max(j, mxj);\n                } \n            }\n        }\n                \n        int di = mxi - mni + 1;\n        int dj = mxj - mnj + 1;\n        if (di * dj > 900) return 1;\n        \n        return di * dj;\n    }\n};",
    "submit_ts": "1719114256",
    "subm_id": "1297343071"
}