{
    "username": "ryanguorocket",
    "submission": "class Solution {\npublic:\n    int calc(const vector<vector<int>>& arr) {\n        int minx = INT_MAX, maxx = INT_MIN;\n        int miny = INT_MAX, maxy = INT_MIN;\n        int n = arr.size(), m = arr[0].size();\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < m; j++) {\n                if(arr[i][j]) {\n                    minx = min(minx, i);\n                    maxx = max(maxx, i);\n                    miny = min(miny, j);\n                    maxy = max(maxy, j);\n                }\n            }\n        }\n        if(minx == INT_MAX) return 0;\n        return max(1, (maxx - minx + 1) * (maxy - miny + 1));\n    }\n    int minimumSum(vector<vector<int>>& grid) {\n        int n = grid.size(), m = grid[0].size();\n        int ret = INT_MAX;\n        auto ha = [&]() {\n            for(int i = 0; i < n - 1; i++) {\n                vector<vector<int>> top(i + 1, vector<int>(m));\n                for(int k = 0; k <= i; k++) {\n                    for(int l = 0; l < m; l++) {\n                        top[k][l] = grid[k][l];\n                    }\n                }\n                int topv = calc(top);\n                for(int j = 0; j < m - 1; j++) {\n                    vector<vector<int>> lef(n - 1 - i, vector<int>(j + 1));\n                    vector<vector<int>> rig(n - 1 - i, vector<int>(m - 1 - j));\n                    for(int k = i + 1; k < n; k++) {\n                        for(int l = 0; l <= j; l++) {\n                            lef[k - i - 1][l] = grid[k][l];\n                        }\n                    }\n                    for(int k = i + 1; k < n; k++) {\n                        for(int l = j + 1; l < m; l++) {\n                            rig[k - i - 1][l - j - 1] = grid[k][l];\n                        }\n                    }\n                    int pot = max(3, topv + calc(lef) + calc(rig));\n                    ret = min(ret, pot);\n                }\n            }\n\n\n            for(int i = 0; i < n - 1; i++) {\n                for(int j = i + 1; j < n - 1; j++) {\n                    vector<vector<int>> top(i + 1, vector<int>(m));\n                    vector<vector<int>> mid(j - i, vector<int>(m));\n                    vector<vector<int>> bot(n - 1 - j, vector<int>(m));\n                    for(int k = 0; k <= i; k++) {\n                        for(int l = 0; l < m; l++) {\n                            top[k][l] = grid[k][l];\n                        }\n                    }\n                    for(int k = i + 1; k <= j; k++) {\n                        for(int l = 0; l < m; l++) {\n                            mid[k - i - 1][l] = grid[k][l];\n                        }\n                    }\n                    for(int k = j + 1; k < n; k++) {\n                        for(int l = 0; l < m; l++) {\n                            bot[k - j - 1][l] = grid[k][l];\n                        }\n                    }\n                    ret = min(ret, max(3, calc(top) + calc(mid) + calc(bot)));\n                }\n            }\n        };\n\n\n        ha();\n\n        for(int j = 0; j < m; j++) {\n            for(int i = 0; i < n / 2; i++) {\n                swap(grid[i][j], grid[n - 1 - i][j]);\n            }\n        }\n        ha();\n\n        vector<vector<int>> temp(m, vector<int>(n));\n\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < m; j++) {\n                temp[j][i] = grid[i][j];\n            }\n        }\n\n        grid = temp;\n        swap(n, m);\n\n        ha();\n        for(int j = 0; j < m; j++) {\n            for(int i = 0; i < n / 2; i++) {\n                swap(grid[i][j], grid[n - 1 - i][j]);\n            }\n        }\n        ha();\n\n        return ret;\n    }\n};",
    "submit_ts": "1719111634",
    "subm_id": "1297278652"
}