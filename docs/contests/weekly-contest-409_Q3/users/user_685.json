{
    "username": "Xenoid",
    "submission": "class Solution {\npublic:\n    bool Eat(map<int, int>& intervals, int left, int right, int& dist) {\n        auto iter = intervals.lower_bound(left);\n        if (iter != intervals.begin()) {\n            if (std::prev(iter)->first < left && std::prev(iter)->second >= right) {\n                return false;\n            }\n        }\n        vector<int> keys_to_delete;\n        while (iter != intervals.end() && iter->second <= right) {\n            keys_to_delete.push_back(iter->first);\n            ++iter;\n        }\n\n        for(int key : keys_to_delete) {\n            dist += intervals[key] - key - 1;\n            intervals.erase(key);\n        }\n        return true;\n    }\n    vector<int> shortestDistanceAfterQueries(int n, vector<vector<int>>& queries) {\n        vector<int> r;\n        map<int, int> intervals;\n        int dist = n - 1;\n        for(const vector<int>& query : queries) {\n            const int left = query[0];\n            const int right = query[1];\n            if (intervals.find(left) != intervals.end()) {\n                int old_right = intervals[left];\n                if (right > old_right) {\n                    if (Eat(intervals, left, right, dist)) {\n                        intervals[left] = right;\n                        dist -= right - left - 1;\n                    }\n                }\n            } else if (Eat(intervals, left, right, dist)) {\n                intervals[left] = right;\n                dist -= right - left - 1;\n            }\n            r.push_back(dist);\n        }\n        return r;\n    }\n};",
    "submit_ts": "1722741777",
    "subm_id": "1343753281"
}