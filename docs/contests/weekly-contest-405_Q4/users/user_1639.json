{
    "username": "Jessie_Pinkman53",
    "submission": "# class TrieNode:\n#     def __init__(self):\n#         self.children={}\n#         self.end=False\n\nclass Solution:\n    def minimumCost(self, target: str, words: List[str], costs: List[int]) -> int:\n        dic={}\n        n=len(target)\n        for i,word in enumerate(words):\n            if word not in dic: \n                dic[word]=costs[i]\n            else: dic[word]=min(dic[word],costs[i])\n        \n        pq,visit=[(0,0)],set()\n        dst,dst[0]=[inf]*(n+1),0\n        while pq:\n            w,s=heappop(pq)\n            if s in visit: continue\n            visit.add(s)\n            if s==n: return w\n            for word in dic:\n                j=s+len(word)\n                if j<=n and target[s:j]==word:\n                    if w+dic[word]<dst[j]:\n                        dst[j]=w+dic[word]\n                        heappush(pq,(w+dic[word],j))\n        return -1 if dst[n]==inf else dst[n]\n\n            # for neiw,nein in graph[s]:\n            #     if w+neiw<dst[nein]: \n            #         heappush(pq,(w+neiw,nein))\n            #         dst[nein]=w+neiw\n        \n        # return [v if v!=inf else -1 for i,v in enumerate(dst)]\n\n\n\n        # dic,root={},TrieNode()\n        # n=len(target)\n        # for i,word in enumerate(words):\n        #     if word not in dic: \n        #         dic[word]=costs[i]\n        #         curr=root\n        #         for c in word:\n        #             if c not in curr.children:\n        #                 curr.children[c]=TrieNode()\n        #             curr=curr.children[c]\n        #         curr.end=True\n        #     else: dic[word]=min(dic[word],costs[i])\n        \n        # @cache\n        # def fun(i):\n        #     if i>=n: return 0\n        #     curr=root\n        #     ans=inf\n        #     for j in range(i,n):\n        #         c=target[j]\n        #         if c not in curr.children: break\n        #         curr=curr.children[c]\n        #         if curr.end: \n        #             ans=min(ans,dic[target[i:j+1]]+fun(j+1))\n        #     return ans\n            \n        # ans=fun(0)\n        # return ans if ans!=inf else -1\n        \n\n\n\n",
    "submit_ts": "1720324358",
    "subm_id": "1312397575"
}