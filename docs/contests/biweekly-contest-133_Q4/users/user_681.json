{
    "username": "tusharbazaz",
    "submission": "class Solution {\n    static const int MOD = 1000000007;\n    static const int MAX_INVERSIONS = 400;\n\npublic:\n    int numberOfPermutations(int totalSize, vector<vector<int>>& conditions) {\n        map<int, int> conditionMap;\n        for (int i = 0; i < conditions.size(); i++) {\n            conditionMap[conditions[i][0] + 1] = conditions[i][1];\n        }\n\n        vector<vector<long>> permutationCounts(totalSize + 1, vector<long>(MAX_INVERSIONS + 1, 0));\n        permutationCounts[0][0] = 1;\n\n        for (int length = 1; length <= totalSize; length++) {\n            int inv = 0;\n            while (inv <= MAX_INVERSIONS) {\n                for (int newPosition = 0; newPosition < length; newPosition++) {\n                    int prevInversions = inv - newPosition;\n                    if (prevInversions >= 0) {\n                        permutationCounts[length][inv] = (permutationCounts[length][inv] + permutationCounts[length - 1][prevInversions]) % MOD;\n                    }\n                }\n                inv++;\n            }\n\n            if (conditionMap.find(length) != conditionMap.end()) {\n                int targetInversions = conditionMap[length];\n                for (int inv = 0; inv <= MAX_INVERSIONS; inv++) {\n                    if (inv != targetInversions) {\n                        permutationCounts[length][inv] = 0;\n                    }\n                }\n            }\n        }\n\n        long totalCount = 0;\n        for (long count : permutationCounts[totalSize]) {\n            totalCount = (totalCount + count) % MOD;\n        }\n\n        return static_cast<int>(totalCount);\n    }\n};",
    "submit_ts": 1719070684.0
}