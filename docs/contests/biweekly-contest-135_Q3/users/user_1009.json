{
    "username": "yuzining",
    "submission": "/**\n * @author yuzining\n * @date 2024/07/20 23:17\"\n */\n\n#ifdef local\n#include \"debug.hpp\"\nusing namespace std;\n#else\n#define DEBUG(...) do { } while(false)\n#endif\n\nnamespace ext {\n\n// \u6811\u72b6\u6570\u7ec4\n// index from 1\ntemplate<typename Type = int>\nclass FenwickTree {\n public:\n  FenwickTree(const int size) {\n    std::vector<Type> vec(size, Type());\n    Init(vec);\n  }\n  FenwickTree(const int size, const Type& init_value) {\n    std::vector<Type> vec(size, init_value);\n    Init(vec);\n  }\n  FenwickTree(const std::vector<Type>& vec) {\n    Init(vec);\n  }\n  void Add(int position, const Type& value) {\n    for (int i = position; i <= n_; i += i & (-i)) {\n      fenwick_tree_[i] += value;\n    }\n  }\n  Type Query(int index) const {\n    Type ret = Type();\n    for (int i = index; i > 0; i -= i & (-i)) {\n      ret += fenwick_tree_[i];\n    }\n    return ret;\n  }\n  Type Query(int left, int right) const {\n    return Query(right) - Query(left - 1);\n  }\n private:\n  void Init(const std::vector<Type>& vec) {\n    n_ = vec.size();\n    fenwick_tree_.resize(vec.size() + 1);\n    for (int i = 1; i <= n_; i++) {\n      Add(i, vec[i - 1]);\n    }\n  }\n  int n_;\n  std::vector<Type> fenwick_tree_;\n};\n\n}  // namespace ext\n\nclass Solution {\npublic:\n  int minChanges(vector<int>& nums, int k) {\n    int n = nums.size();\n    std::vector<std::pair<int, int>> a;\n    std::vector<int> cnt(k + 1, 0);\n    for (int i = 0, j = n - 1; i < j; i++, j--) {\n      int x = nums[i];\n      int y = nums[j];\n      if (x > y) {\n        std::swap(x, y);\n      }\n      cnt[y - x]++;\n      a.emplace_back(x, y);\n    }\n    std::sort(a.begin(), a.end());\n    std::reverse(a.begin(), a.end());\n    int m = n / 2;\n    int j = 0;\n    ext::FenwickTree tree(k + 5);\n    int ans = n;\n    for (int x = 0; x <= k; x++) {\n      while (j < m && a[j].first > k - x) {\n        tree.Add(a[j].second + 1, 1);\n        j++;\n      }\n      int tmp = 0;\n      if (x > 0) {\n        tmp = tree.Query(1, x);\n      }\n      // std::cout << n << ' ' << x << ' ' << tmp << ' ' << cnt[x] << ' ' << tmp * 2 + (n - cnt[x] * 2 - tmp * 2) / 2 << '\\n';\n      ans = std::min(ans, tmp * 2 + (n - cnt[x] * 2 - tmp * 2) / 2);\n    }\n    return ans;\n  }\n};\n\n#ifdef local\nint main() {\n\n}\n#endif",
    "submit_ts": "1721489346",
    "subm_id": "548318382"
}