{
    "username": "greg100",
    "submission": "class Solution {\npublic:\n    struct Node {\n        int c = INT_MAX / 2;\n        Node* children[26]{};\n    }* root = new Node();\n\n        int n;\n\n        vector<int> f;\n        int dfs(int u) {\n            if (u == n) {\n                return 0;\n            }\n\n            int& res = f[u];\n            if (res != -1) {\n                return res; \n            }\n\n            res = INT_MAX / 2;\n            Node* cur = root;\n            for (int i = u; i < n; i++) {\n                char ch = str[i];\n                int c = ch - 'a';\n                if (cur->children[c]) {\n                    cur = cur->children[c];\n                    if (cur->c != INT_MAX) {\n                        res = min(res, cur->c + dfs(i + 1));\n                    }\n                } else {\n                    break;\n                }\n            }\n            return res;\n        };\n\n\n    void insert(string word, int cost) {\n        Node* cur = root;\n        for (char ch : word) {\n            int c = ch - 'a';\n            if (!cur->children[c]) {\n                cur->children[c] = new Node();\n            }\n            cur = cur->children[c];\n        }\n        cur->c = min(cur->c, cost);\n    } \n\n    string str;\n    int minimumCost(string _str, vector<string>& words, vector<int>& costs) {\n        str = _str;\n        int n = str.size();\n        this->n = n;\n        int m = words.size();\n        for (int i = 0; i < m; i++) {\n            insert(words[i], costs[i]);\n        }\n        f.resize(n + 1, -1);\n\n        int res = dfs(0);\n        if (res == INT_MAX / 2) {\n            return -1;\n        }\n        return res;\n    }\n};",
    "submit_ts": "1720322283",
    "subm_id": "1312345694"
}