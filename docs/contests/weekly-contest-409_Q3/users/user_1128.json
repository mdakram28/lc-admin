{
    "username": "MrSup1998",
    "submission": "class DSU {\npublic:\n    vector<int> parent, rank;\n    DSU(int n) {\n        parent.resize(n);\n        rank.resize(n, 0);\n        for (int i = 0; i < n; ++i) {\n            parent[i] = i;\n        }\n    }\n\n    int find(int x) {\n        if (parent[x] != x) {\n            parent[x] = find(parent[x]);\n        }\n        return parent[x];\n    }\n\n    void unite(int x, int y) {\n        int rootX = find(x);\n        int rootY = find(y);\n        if (rootX != rootY) {\n            if (rank[rootX] > rank[rootY]) {\n                parent[rootY] = rootX;\n            } else if (rank[rootX] < rank[rootY]) {\n                parent[rootX] = rootY;\n            } else {\n                parent[rootY] = rootX;\n                rank[rootX]++;\n            }\n        }\n    }\n};\n\nclass Solution {\npublic:\n    vector<int> shortestDistanceAfterQueries(int n, vector<vector<int>>& queries) {\n      // Initialize the distance vector\n      vector<int> distance(n, 0);\n      for (int i = 1; i < n; ++i) {\n      distance[i] = distance[i - 1] + 1;\n      }\n      set<int> positions;\nfor (int i = 0; i < n; ++i) {\npositions.insert(i);\n}\nvector<int> result;\nfor (const auto& query : queries) {\nint left = query[0];\nint right = query[1];\nauto lower_bound = positions.lower_bound(left + 1);\nauto upper_bound = positions.lower_bound(right);\n// Erase the range [left, right]\npositions.erase(lower_bound, upper_bound);\nresult.push_back(positions.size() - 1);\n}\nreturn result;\n    }\n};",
    "submit_ts": "1722743507",
    "subm_id": "1343793491"
}