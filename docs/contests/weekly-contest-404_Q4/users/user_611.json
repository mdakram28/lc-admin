{
    "username": "seal541",
    "submission": "class Solution {\npublic:\n    vector<int> dist;\n    vector<vector<int>> adj1;\n\n    pair<int, int> bfs(int start) {\n        int n = adj1.size();\n        dist = vector<int>(n, -1);\n        queue<int> q;\n        q.push(start);\n        dist[start] = 0;\n\n        int farthest_node = start;\n        while (!q.empty()) {\n            int node = q.front();\n            q.pop();\n\n            for (int neighbor : adj1[node]) {\n                if (dist[neighbor] == -1) {\n                    dist[neighbor] = dist[node] + 1;\n                    q.push(neighbor);\n                    if (dist[neighbor] > dist[farthest_node]) {\n                        farthest_node = neighbor;\n                    }\n                }\n            }\n        }\n\n        return {farthest_node, dist[farthest_node]};\n    }\n\n    int find_ans() {\n        pair<int, int> p1 = bfs(0);\n        pair<int, int> p2 = bfs(p1.first);\n\n        return p2.second;\n    }\n\n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n        map<int, vector<int>> adj;\n        for (auto& edge : edges1) {\n            adj[edge[1]].push_back(edge[0]);\n            adj[edge[0]].push_back(edge[1]);\n        }\n        \n        int n = adj.size();\n        adj1 = vector<vector<int>>(n);\n        for (auto& entry : adj) {\n            adj1[entry.first] = entry.second;\n        }\n        int d1;\n        if(edges1.size()==0){\n            d1 = 0;\n        }\n        else\n        d1 =  find_ans();\n        adj.clear();\n        adj1.clear(); \n\n        for (auto& edge : edges2) {\n            adj[edge[1]].push_back(edge[0]);\n            adj[edge[0]].push_back(edge[1]);\n        }\n\n        int m = adj.size();\n        adj1 = vector<vector<int>>(m);\n        for (auto& entry : adj) {\n            adj1[entry.first] = entry.second;\n        }\n        int d2 ;\n        if(edges2.size()==0){\n            d2=0;\n        }\n        else\n            d2 =  find_ans();\n        if(d1==0 and d2==0)return 1;\n        int ans = max((d1/2 + d2/2 + d2%2 + d1%2 + 1), max(d2, d1));\n        return ans;\n    }\n};\n",
    "submit_ts": 1719718378.0
}