{
    "username": "3PQeaIB0Wk",
    "submission": "class TrieNode {\n    public:\n    TrieNode* children[26];\n    int cost;\n    TrieNode() {\n        for (int i = 0; i < 26; i++) children[i] = nullptr;\n        cost = -1;\n    }\n};\n\nvoid insert(TrieNode* root, string& word, int cost) {\n    TrieNode* node = root;\n    for (char c : word) {\n        if (node->children[c - 'a'] == nullptr) node->children[c - 'a'] = new TrieNode();\n        node = node->children[c - 'a'];\n    }\n    if (node->cost == -1) node->cost = cost;\n    else node->cost = min(node->cost, cost);\n}\n\nclass Solution {\npublic:\n    vector<int> dp;\n    string target;\n    TrieNode* root;\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        root = new TrieNode();\n        for (int i = 0; i < words.size(); i++) insert(root, words[i], costs[i]);\n        dp.resize(target.size(), -1);\n        this->target = target;\n        int res = go(0);\n        if (res >= 1e9) return -1;\n        return res;\n    }\n\n    int go(int idx) {\n        if (idx == target.length()) return 0;\n        if (dp[idx] != -1) return dp[idx];\n        int res = 1e9;\n\n        TrieNode* node = root;\n        for (int i = idx; i < target.length(); i++) {\n            if (node->children[target[i] - 'a'] == nullptr) break;\n            node = node->children[target[i] - 'a'];\n            if (node->cost != -1) res = min(res, node->cost + go(i + 1));\n        }\n        return dp[idx] = res;\n    }\n};",
    "submit_ts": "1720320965",
    "subm_id": "1312309663"
}