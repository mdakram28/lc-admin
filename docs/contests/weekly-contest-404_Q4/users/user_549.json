{
    "username": "yuwen-yan",
    "submission": "class Solution:\n    def minimumDiameterAfterMerge(self, edges1: List[List[int]], edges2: List[List[int]]) -> int:\n        def min_num(input_edges):\n            edges = collections.defaultdict(set)\n            for node, other_node in input_edges:\n                edges[node].add(other_node)\n                edges[other_node].add(node)\n            \n            distance = 0\n            \n            next_nodes = set()\n            for node, other_nodes in edges.items():\n                if len(other_nodes) == 1:\n                    next_nodes.add(node)\n                    \n            while next_nodes:\n                if len(next_nodes) == 1:\n                    return distance\n                elif len(next_nodes) == 2 and len(edges) == 2:\n                    distance += 1\n                    return distance\n                distance += 2\n                new_next_nodes = set()\n                for node in next_nodes:\n                    for other_node in edges[node]:\n                        edges[other_node].remove(node)\n                        if other_node not in next_nodes and len(edges[other_node]) == 1:\n                            new_next_nodes.add(other_node)\n                    del edges[node]\n                next_nodes = new_next_nodes\n            return distance\n        num1 = min_num(edges1)\n        num2 = min_num(edges2)\n        #print(num1, num2)\n        return max(((num1 + 1) // 2) + ((num2 + 1) // 2) + 1, num1, num2)\n                    ",
    "submit_ts": 1719718787.0
}