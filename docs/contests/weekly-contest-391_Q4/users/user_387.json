{
    "username": "Tanguilol",
    "submission": "class Solution {\n    \n    private static class Point {\n        \n        int x;\n        int y;\n        \n        public Point(int x, int y) {\n            this.x = x;\n            this.y = y;\n        }\n        \n        public String toString() {\n            return \"[\" + x + \", \" + y + \"]\";\n        }\n        \n        public boolean equals(Object obj) {\n            Point other = (Point) obj;\n            return x == other.x && y == other.y;\n        }\n    }\n    \n    private static class WeightedPoint implements Comparable<WeightedPoint> {\n        \n        int w;\n        Point p;\n        \n        public WeightedPoint(int w, Point p) {\n            this.w = w;\n            this.p = p;\n        }\n        \n        public int compareTo(WeightedPoint wp) {\n            return Integer.compare(w, wp.w);\n        }\n        \n        public String toString() {\n            return \"[\" + w + \", \" + p + \"]\";\n        }\n        \n    }\n    \n    public int minimumDistance(int[][] points) {\n        List<WeightedPoint> d1 = new ArrayList<>();\n        List<WeightedPoint> d2 = new ArrayList<>();\n        \n        for (int i = 0; i < points.length; i++) {\n            int x = points[i][0];\n            int y = points[i][1];\n            \n            Point p = new Point(x, y);\n            \n            d1.add(new WeightedPoint(x + y, p));\n            d2.add(new WeightedPoint(x - y, p));\n        }\n        \n        Collections.sort(d1);\n        Collections.sort(d2);\n        \n        //System.out.println(d1);\n        //System.out.println(d2);\n        \n        return Math.min(\n            Math.min(calc(d1, d2, d1.get(0).p), calc(d1, d2, d1.get(d1.size() - 1).p)),\n            Math.min(calc(d1, d2, d2.get(0).p), calc(d1, d2, d2.get(d2.size() - 1).p))\n        );\n    }\n    \n    private int calc(List<WeightedPoint> d1, List<WeightedPoint> d2, Point remove) {\n        return Math.max(calc(d1, remove), calc(d2, remove));\n    }\n    \n    private int calc(List<WeightedPoint> wp, Point remove) {\n        if (wp.get(0).p.equals(remove)) {\n            return wp.get(wp.size() - 1).w - wp.get(1).w;\n        } else if (wp.get(wp.size() - 1).p.equals(remove)) {\n            return wp.get(wp.size() - 2).w - wp.get(0).w;\n        } else {\n            return wp.get(wp.size() - 1).w - wp.get(0).w;\n        }\n    }\n    \n}"
}