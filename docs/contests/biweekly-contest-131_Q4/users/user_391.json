{
    "username": "sheldon-29",
    "submission": "class Solution {\n    typedef long long ll;\n    static const ll MN = 1L*INT_MIN*100000;\n    static const ll MX = 1l*INT_MAX*100000;\n    const int inf = 0x3f3f3f3f;\n    struct my_tree{\n        struct node{\n            ll l,r;\n            int left_son = -1,right_son = -1;\n            ll sum = 0;\n            ll mx = MN;\n            ll mn = MX;\n        };\n        int id = 1;\n        vector<node>tree = vector<node>(1,node());\n        void pushup(int k){\n            ll ans = 0;\n            ll mx = MN;\n            ll mn = MX;\n            if(tree[k].left_son != -1){\n                ans += tree[tree[k].left_son].sum;\n                mx = max(mx,tree[tree[k].left_son].mx);\n                mn = min(mn,tree[tree[k].left_son].mn);\n            }\n            if(tree[k].right_son != -1){\n                ans += tree[tree[k].right_son].sum;\n                mx = max(mx,tree[tree[k].right_son].mx);\n                mn = min(mn,tree[tree[k].right_son].mn);\n            }\n            tree[k].sum = ans;\n            tree[k].mx = mx;\n            tree[k].mn = mn;\n        }\n        //\u4fee\u6539\u4e0b\u6807\u4e3aid\u7684\u503c\u4e3aval\n        void insert(int k,ll l,ll r,ll idx,ll val){\n            tree[k].l = l;\n            tree[k].r = r;\n            if(l != r){\n                ll mid = (l+r)>>1;\n                if(mid >= idx){\n                    if(tree[k].left_son == -1){\n                        tree.emplace_back(node());\n                        tree[k].left_son = id++;\n                    }\n                    insert(tree[k].left_son,l,mid,idx,val);\n                }else{\n                    if(tree[k].right_son == -1){\n                        tree.emplace_back(node());\n                        tree[k].right_son = id++;\n                    }\n                    insert(tree[k].right_son,mid+1,r,idx,val);\n                }\n                pushup(k);\n            }else{\n                tree[k].sum = val;\n                tree[k].mx = val;\n                tree[k].mn = val;\n            }\n        }\n        //\u6c42\u533a\u95f4[left,right]\u5185\u7684\u533a\u95f4\u548c\n        ll query(int k,ll l,ll r,int left,int right){\n            if(k == -1)    return 0;\n            if(l>=left && r<=right){\n                return tree[k].sum;\n            }\n            ll ans = 0;\n            ll mid = (l+r)>>1;\n            if(mid >= left){\n                ans += query(tree[k].left_son,l,mid,left,right);\n            }\n            if(mid < right){\n                ans += query(tree[k].right_son,mid+1,r,left,right);\n            }\n            return ans;\n        }\n        //\u6c42\u533a\u95f4[left,right]\u5185\u7684\u6700\u5927\u503c\n        ll query_mx(int k,ll l,ll r,int left,int right){\n            if(k == -1)    return MN;\n            if(l>=left && r<=right){\n                return tree[k].mx;\n            }\n            ll ans = MN;\n            ll mid = (l+r)>>1;\n            if(mid >= left){\n                ans = max(ans,query_mx(tree[k].left_son,l,mid,left,right));\n            }\n            if(mid < right){\n                ans = max(ans,query_mx(tree[k].right_son,mid+1,r,left,right));\n            }\n            return ans;\n        }\n        //\u6c42\u533a\u95f4[left,right]\u5185\u7684\u6700\u5927\u503c\n        ll query_mn(int k,ll l,ll r,int left,int right){\n            if(k == -1)    return MX;\n            if(l>=left && r<=right){\n                return tree[k].mn;\n            }\n            ll ans = MX;\n            ll mid = (l+r)>>1;\n            if(mid >= left){\n                ans = min(ans,query_mn(tree[k].left_son,l,mid,left,right));\n            }\n            if(mid < right){\n                ans = min(ans,query_mn(tree[k].right_son,mid+1,r,left,right));\n            }\n            return ans;\n        }\n    };\n\n    \n\n\npublic:\n    vector<bool> getResults(vector<vector<int>>& q) {\n        ll l = 0,r = 50005;\n        my_tree o1;\n        o1.insert(0,l,r,0,0);\n        set<int>s;\n        s.insert(0);\n        vector<bool>ans;\n        for(auto obj : q){\n            int x = obj[1];\n            if(obj[0] == 1){\n                int mx = *s.rbegin();\n                //\u67e5\u770b\u662f\u5426\u6bd4\u6700\u5927\u7684\u8fd8\u5927\n                if(x > mx){\n                    s.insert(x);\n                    //cout<<\"ddddd\"<<mx<<endl;\n                    o1.insert(0,l,r,x,x-mx);\n                }else{\n                    auto it = (s.lower_bound(x));\n                    int lat = *it;\n                    o1.insert(0,l,r,lat,lat-x);\n                    it--;\n                    int pre = *it;\n                    o1.insert(0,l,r,x,x-pre);\n                    s.insert(x);\n                }\n            }else{\n                int w = obj[2];\n                \n                int have = 0;\n                auto it = (s.lower_bound(x));\n                it--;\n                int mx = *it;\n                \n                have = max(have,x-mx);\n                int other = o1.query_mx(0,l,r,l,mx);\n                //cout<<mx<<\" \"<<other<<\" \"<<have<<endl;\n                have = max(have,other);\n                ans.push_back(have >= w);\n            }\n        }\n        return ans;\n    }\n};",
    "submit_ts": "1716651107",
    "subm_id": "534773743"
}