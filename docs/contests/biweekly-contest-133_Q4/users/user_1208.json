{
    "username": "CB__007",
    "submission": "class Solution {\npublic:\n    static const int MOD = 1'000'000'007;\n    static const int MAX_INV = 400;\n\n    int numberOfPermutations(int n, vector<vector<int>>& requirements) {\n        unordered_map<int, int> reqMap;\n        parseRequirements(requirements, reqMap);\n\n        vector<vector<long long>> permCounts(n + 1, vector<long long>(MAX_INV + 1, 0));\n        permCounts[0][0] = 1;\n\n        calculatePermutations(permCounts, reqMap, n);\n\n        return countPermutations(permCounts, n);\n    }\n\nprivate:\n    void parseRequirements(vector<vector<int>>& requirements, unordered_map<int, int>& reqMap) {\n        for (auto& req : requirements) {\n            reqMap[req[0] + 1] = req[1];\n        }\n    }\n\n    void calculatePermutations(vector<vector<long long>>& permCounts, unordered_map<int, int>& reqMap, int n) {\n        for (int length = 1; length <= n; length++) {\n            for (int inv = 0; inv <= MAX_INV; inv++) {\n                for (int newPos = 0; newPos < length; newPos++) {\n                    int prevInv = inv - newPos;\n                    if (prevInv >= 0) {\n                        permCounts[length][inv] = (permCounts[length][inv] + permCounts[length - 1][prevInv]) % MOD;\n                    }\n                }\n            }\n\n            if (reqMap.find(length) != reqMap.end()) {\n                int targetInv = reqMap[length];\n                for (int inv = 0; inv <= MAX_INV; inv++) {\n                    if (inv != targetInv) {\n                        permCounts[length][inv] = 0;\n                    }\n                }\n            }\n        }\n    }\n\n    int countPermutations(vector<vector<long long>>& permCounts, int n) {\n        long long result = 0;\n        for (long long count : permCounts[n]) {\n            result = (result + count) % MOD;\n        }\n        return static_cast<int>(result);\n    }\n};",
    "submit_ts": 1719071789.0
}