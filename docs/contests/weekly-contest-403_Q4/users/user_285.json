{
    "username": "mdakram28",
    "submission": "class SegmentTree2D:\n    def __init__(self, matrix, func, init_val):\n        if not matrix or not matrix[0]:\n            return\n        \n        self.init_val = init_val\n        self.func = func\n        self.n = len(matrix)\n        self.m = len(matrix[0])\n        self.tree = [[0] * (2 * self.m) for _ in range(2 * self.n)]\n        self.build(matrix)\n    \n    def build(self, matrix):\n        # Build the segment tree\n        for i in range(self.n):\n            for j in range(self.m):\n                self.tree[i + self.n][j + self.m] = matrix[i][j]\n        \n        # Build columns\n        for i in range(self.n):\n            for j in range(self.m - 1, 0, -1):\n                self.tree[i + self.n][j] = self.func(self.tree[i + self.n][2 * j], self.tree[i + self.n][2 * j + 1])\n        \n        # Build rows\n        for i in range(self.n - 1, 0, -1):\n            for j in range(2 * self.m):\n                self.tree[i][j] = self.func(self.tree[2 * i][j], self.tree[2 * i + 1][j])\n    \n    def calc_col(self, row, col1, col2):\n        res = self.init_val\n        c1, c2 = col1 + self.m, col2 + self.m + 1\n        while c1 < c2:\n            if c1 % 2 == 1:\n                res = self.func(res, self.tree[row][c1])\n                c1 += 1\n            if c2 % 2 == 1:\n                c2 -= 1\n                res = self.func(res, self.tree[row][c2])\n            c1 //= 2\n            c2 //= 2\n        return res\n    \n    def calc_region(self, row1, col1, row2, col2):\n        # Get the sum of the elements in the submatrix [(row1, col1), (row2, col2)]\n        res = self.init_val\n        r1, r2 = row1 + self.n, row2 + self.n + 1\n        while r1 < r2:\n            if r1 % 2 == 1:\n                res = self.func(res, self.calc_col(r1, col1, col2))\n                r1 += 1\n            if r2 % 2 == 1:\n                r2 -= 1\n                res = self.func(res, self.calc_col(r2, col1, col2))\n            r1 //= 2\n            r2 //= 2\n        return res\n    \nclass Solution:\n    def minimumSum(self, grid: List[List[int]]) -> int:\n        m, n = len(grid), len(grid[0])\n        \n        rows = [[r if grid[r][c] == 1 else None for c in range(n)] for r in range(m)]\n        \n        min_col_st = SegmentTree2D([[c if grid[r][c] == 1 else inf for c in range(n)] for r in range(m)], min, inf)\n        min_row_st = SegmentTree2D([[r if grid[r][c] == 1 else inf for c in range(n)] for r in range(m)], min, inf)\n        max_col_st = SegmentTree2D([[c if grid[r][c] == 1 else -inf for c in range(n)] for r in range(m)], max, -inf)\n        max_row_st = SegmentTree2D([[r if grid[r][c] == 1 else -inf for c in range(n)] for r in range(m)], max, -inf)\n        \n        def min_area(r1, c1, r2, c2):\n            left = min_col_st.calc_region(r1, c1, r2, c2)\n            right = max_col_st.calc_region(r1, c1, r2, c2)\n            top = min_row_st.calc_region(r1, c1, r2, c2)\n            bottom = max_row_st.calc_region(r1, c1, r2, c2)\n            # print(top, left, bottom, right)\n            if left == inf or right == -inf or top == inf or bottom == -inf:\n                return inf\n            return (right-left+1)*(bottom-top+1)\n        \n        ans = inf\n        l = 0\n        r = n-1\n        t = 0\n        b = m-1\n        \n        for r0 in range(m-1):\n            for c0 in range(n-1):\n                a1 = min_area(t, l, r0, c0)\n                a2 = min_area(t, c0+1, r0, r)\n                a3 = min_area(r0+1, l, b, r)\n                ans = min(ans, a1 + a2 + a3)\n                \n                a1 = min_area(t, l, r0, c0)\n                a2 = min_area(r0+1, l, b, c0)\n                a3 = min_area(t, c0+1, b, r)\n                ans = min(ans, a1 + a2 + a3)\n                \n                a1 = min_area(r0+1, l, b, c0)\n                a2 = min_area(r0+1, c0+1, b, r)\n                a3 = min_area(t, l, r0, r)\n                ans = min(ans, a1 + a2 + a3)\n                \n                a1 = min_area(t, c0+1, r0, r)\n                a2 = min_area(r0+1, c0+1, b, r)\n                a3 = min_area(t, l, b, c0)\n                ans = min(ans, a1 + a2 + a3)\n                \n        for r1 in range(m-2):\n            for r2 in range(r1+1, m-1):\n                a1 = min_area(t, l, r1, r)\n                a2 = min_area(r1+1, l, r2, r)\n                a3 = min_area(r2+1, l, b, r)\n                ans = min(ans, a1 + a2 + a3)\n        \n        for c1 in range(n-2):\n            for c2 in range(c1+1, n-1):\n                # print(f\"{c1=}, {c2=}\")\n                a1 = min_area(t, l, b, c1)\n                # print(f\"{a1=}\")\n                a2 = min_area(t, c1+1, b, c2)\n                # print(f\"{a2=}\")\n                a3 = min_area(t, c2+1, b, r)\n                # print(f\"{a3=}\")\n                ans = min(ans, a1 + a2 + a3)\n        \n        return ans\n        \n                ",
    "submit_ts": 1719114114.0
}