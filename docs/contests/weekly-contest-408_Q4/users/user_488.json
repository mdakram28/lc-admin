{
    "username": "goog_ol",
    "submission": "\nclass Solution {\n    int bfs(vector<vector<int>>& diag, int start, int tg1, int tg2,\n            int nodes) {\n        queue<int> q;\n        vector<int> vis(nodes + 4, 0);\n        q.push(start);\n        vis[start] = 1;\n        while (!q.empty()) {\n            int u = q.front();\n            q.pop();\n            for (int node : diag[u]) {\n                if (!vis[node]) {\n                    q.push(node);\n                    vis[node] = 1;\n                }\n            }\n        }\n        return vis[tg1] || vis[tg2];\n    }\n\n    double dis(int a, int b) { return sqrt(pow(a, 2) + pow(b, 2)); }\n\npublic:\n    bool canReachCorner(int X, int Y, vector<vector<int>>& alterC) {\n        vector<pair<pair<int, int>, int>> circles(alterC.size());\n        vector<vector<int>> diag(alterC.size() + 4);\n        int nc = alterC.size();\n\n        for (int i{}; i < nc; ++i)\n\n            circles[i].first.first = alterC[i][0],\n            circles[i].first.second = alterC[i][1],\n            circles[i].second = alterC[i][2];\n\n        for (int i{}; i < nc; ++i) {\n\n            if (circles[i].first.first <= circles[i].second)\n\n                diag[nc].push_back(i), diag[i].push_back(nc);\n\n            if (X - circles[i].first.first <= circles[i].second)\n\n                diag[nc + 2].push_back(i), diag[i].push_back(nc + 2);\n\n            if (circles[i].first.second <= circles[i].second)\n\n                diag[nc + 1].push_back(i), diag[i].push_back(nc + 1);\n\n            if (Y - circles[i].first.second <= circles[i].second)\n\n                diag[nc + 3].push_back(i), diag[i].push_back(nc + 3);\n\n            for (int j = i + 1; j < nc; ++j) {\n                double distance =\n                    dis(circles[i].first.first - circles[j].first.first,\n                        circles[i].first.second - circles[j].first.second);\n                int radius_sum = circles[i].second + circles[j].second;\n                if (radius_sum >= distance) {\n                    diag[i].push_back(j), diag[j].push_back(i);\n                }\n            }\n        }\n\n        int isBlock = false;\n        if (bfs(diag, nc, nc + 1, nc + 2, nc + 4))\n            isBlock = 1;\n        if (bfs(diag, nc + 3, nc + 2, nc + 1, nc + 4))\n            isBlock = 1;\n        return !isBlock;\n    }\n};",
    "submit_ts": "1722137601",
    "subm_id": "1335768457"
}