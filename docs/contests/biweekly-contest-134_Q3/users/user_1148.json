{
    "username": "uday5747",
    "submission": "class Solution { \npublic: \n    int numberOfAlternatingGroups(vector<int>& udayColors, int udayK) { \n        int udayN = udayColors.size(); \n        int udayCount = 0; \n \n        if (udayK == 1) { \n            // Every single tile is an alternating group by itself \n            return udayN; \n        } \n \n        int udayAlternatingLength = 1; \n        int udayI = 1; \n        while (udayI < udayN + udayK - 1) { \n            int udayCurrent = udayI; \n            int udayPrevious = udayI - 1; \n \n            // Handle circular indexing \n            if (udayCurrent >= udayN) { \n                udayCurrent -= udayN; \n            } \n            if (udayPrevious >= udayN) { \n                udayPrevious -= udayN; \n            } \n \n            if (udayColors[udayCurrent] != udayColors[udayPrevious]) { \n                ++udayAlternatingLength; \n            } else { \n                udayAlternatingLength = 1; \n            } \n \n            // Check if we have a valid alternating group of length udayK \n            if (udayAlternatingLength >= udayK) { \n                ++udayCount; \n            } \n \n            ++udayI; \n        } \n \n        return udayCount; \n    } \n};",
    "submit_ts": "1720279515",
    "subm_id": "1311754274"
}