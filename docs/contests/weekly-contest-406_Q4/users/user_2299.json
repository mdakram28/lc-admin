{
    "username": "Volcandrabuzz",
    "submission": "class Solution {\n    public long minimumCost(int m, int n, int[] horizontalCut, int[] verticalCut) {\n        PriorityQueue<Integer> horizontalCuts = new PriorityQueue<>(Collections.reverseOrder());\n        PriorityQueue<Integer> verticalCuts = new PriorityQueue<>(Collections.reverseOrder());\n\n        for (int cut : horizontalCut) {\n            horizontalCuts.offer(cut);\n        }\n        for (int cut : verticalCut) {\n            verticalCuts.offer(cut);\n        }\n        int horizontalPieces = 1;\n        int verticalPieces = 1;\n        long totalCost = 0;\n\n        while (!horizontalCuts.isEmpty() && !verticalCuts.isEmpty()) {\n            if (horizontalCuts.peek() > verticalCuts.peek()) {\n                totalCost += horizontalCuts.poll() * verticalPieces;\n                horizontalPieces++;\n            } else {\n                totalCost += verticalCuts.poll() * horizontalPieces;\n                verticalPieces++;\n            }\n        }\n\n        while (!horizontalCuts.isEmpty()) {\n            totalCost += horizontalCuts.poll() * verticalPieces;\n        }\n\n        while (!verticalCuts.isEmpty()) {\n            totalCost += verticalCuts.poll() * horizontalPieces;\n        }\n\n        return totalCost;\n        \n    }\n}",
    "submit_ts": "1720926447",
    "subm_id": "1320286563"
}