{
    "username": "malikmanish09876",
    "submission": "#include <vector>\n#include <algorithm>\n\nclass SegmentTree {\nprivate:\n    std::vector<int> nums;\n    std::vector<int> tree;\n    int n;\n\n    void build(int node, int start, int end) {\n        if (start == end) {\n            tree[node] = isPeak(start) ? 1 : 0;\n        } else {\n            int mid = (start + end) / 2;\n            build(2 * node, start, mid);\n            build(2 * node + 1, mid + 1, end);\n            tree[node] = tree[2 * node] + tree[2 * node + 1];\n        }\n    }\n\n    int query(int node, int start, int end, int l, int r) {\n        if (r < start || l > end) return 0;\n        if (l <= start && r >= end) return tree[node];\n        int mid = (start + end) / 2;\n        int leftQuery = query(2 * node, start, mid, l, r);\n        int rightQuery = query(2 * node + 1, mid + 1, end, l, r);\n        return leftQuery + rightQuery;\n    }\n\n    void update(int node, int start, int end, int idx) {\n        if (start == end) {\n            tree[node] = isPeak(start) ? 1 : 0;\n        } else {\n            int mid = (start + end) / 2;\n            if (start <= idx && idx <= mid) {\n                update(2 * node, start, mid, idx);\n            } else {\n                update(2 * node + 1, mid + 1, end, idx);\n            }\n            tree[node] = tree[2 * node] + tree[2 * node + 1];\n        }\n    }\n\n    bool isPeak(int idx) {\n        if (idx <= 0 || idx >= n - 1) return false;\n        return nums[idx] > nums[idx - 1] && nums[idx] > nums[idx + 1];\n    }\n\npublic:\n    SegmentTree(std::vector<int>& nums) : nums(nums) {\n        n = nums.size();\n        tree.resize(4 * n);\n        build(1, 0, n - 1);\n    }\n\n    int rangeQuery(int l, int r) {\n        return query(1, 0, n - 1, l, r);\n    }\n\n    void pointUpdate(int idx, int val) {\n        nums[idx] = val;\n        if (idx > 0) update(1, 0, n - 1, idx - 1);\n        update(1, 0, n - 1, idx);\n        if (idx < n - 1) update(1, 0, n - 1, idx + 1);\n    }\n};\n\nclass Solution {\npublic:\n    std::vector<int> countOfPeaks(std::vector<int>& nums, std::vector<std::vector<int>>& queries) {\n        SegmentTree st(nums);\n        std::vector<int> result;\n\n        for (const auto& q : queries) {\n            if (q[0] == 1) {\n                result.push_back(st.rangeQuery(q[1] + 1, q[2] - 1));\n            } else if (q[0] == 2) {\n                st.pointUpdate(q[1], q[2]);\n            }\n        }\n\n        return result;\n    }\n};\n",
    "submit_ts": 1718507812.0
}