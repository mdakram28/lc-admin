{
    "username": "3FrenchOmelettes",
    "submission": "class Solution {\npublic:\n    class SegmentTree\n    {\n        private:\n            vector<int> tree;\n            int n;\n\n            int query_helper(int x, int y, int lo, int hi, int cur)\n            {\n                if (hi < x || lo > y)\n                {\n                    return 0;\n                }\n\n                if (lo >= x && hi <= y)\n                {\n                    return tree[cur];\n                }\n\n                int mid = (lo + hi) / 2;\n                auto left = query_helper(x, y, lo, mid, cur*2+1);\n                auto right = query_helper(x, y, mid+1, hi, cur*2+2);\n                return left + right;\n            }\n\n            void update_helper(int x, int y, int lo, int hi, int cur)\n            {\n                if (lo == hi)\n                {\n                    tree[cur] = y;\n                    return;\n                }\n\n                int mid = (lo + hi) / 2;\n                if (x <= mid)\n                {\n                    update_helper(x, y, lo, mid, cur*2+1);\n                }\n                else\n                {\n                    update_helper(x, y, mid+1, hi, cur*2+2);\n                }\n\n                tree[cur] = tree[cur*2+1] + tree[cur*2+2];\n            }\n        \n            void build_helper(vector<int>& arr, int lo, int hi, int cur)\n            {\n                if (lo == hi)\n                {\n                    tree[cur] = arr[lo];\n                    return;\n                }\n                \n                int mid = (hi + lo) / 2;\n                \n                build_helper(arr, lo, mid, cur*2+1);\n                build_helper(arr, mid+1, hi, cur*2+2);\n                \n                tree[cur] = tree[cur*2+1] + tree[cur*2+2];\n            }\n        public:\n            SegmentTree(vector<int>& arr)\n            {\n                n = (int) arr.size();\n                tree = vector<int>(4*n+1, 0);\n                build_helper(arr, 0, n-1, 0);\n            }\n\n            int query(int x, int y)\n            {\n                return query_helper(x, y, 0, n-1, 0);\n            }\n\n            void update(int x, int y)\n            {\n                update_helper(x, y, 0, n-1, 0);\n            }\n    };\n    vector<int> countOfPeaks(vector<int>& nums, vector<vector<int>>& queries)\n    {\n        // segment tree probably\n        \n        // when we update an element it can affect how many others?\n        \n        // start by marking all the peak elements\n        // [1,3,0]\n        \n        // it only affects the element we updated and its two neighbors\n        \n        // it could make arr[i-1] or arr[i+1] a peak\n        // it could take away a peak from arr[i]\n        // it could make arr[i] a peak\n        \n        // so just apply the update then recalculate\n        // segment tree to get the range sums\n        \n        int n = nums.size();\n        vector<int> arr(n, 0);\n        for (int i = 1; i + 1 < n; i++)\n        {\n            if (nums[i] > nums[i-1] && nums[i] > nums[i+1])\n            {\n                arr[i] = 1;\n            }\n        }\n        \n        /*for (auto x : arr)\n        {\n            cout << x << ' ';\n        }\n        cout << endl;*/\n        \n        SegmentTree tree(arr);\n        \n        vector<int> ans;\n        for (auto& q : queries)\n        {\n            if (q[0] == 1)\n            {\n                auto sub = tree.query(q[1]+1, q[2]-1);\n                \n                ans.push_back(sub);\n            }\n            else\n            {\n                nums[q[1]] = q[2];\n                \n                int lo = max(0, q[1]-1);\n                for (int i = q[1] - 1; i <= q[1]+1; i++)\n                {\n                    if (i - 1 >= 0 && i + 1 < n && nums[i] > nums[i-1] && nums[i] > nums[i+1])\n                    {\n                        tree.update(i, 1);\n                    }\n                    else\n                    {\n                        tree.update(i,0);\n                    }\n                }\n            }\n        }\n        \n        return ans;\n        \n        \n    }\n};",
    "submit_ts": 1718508330.0
}