{
    "username": "wddd",
    "submission": "class Solution {\n    public int minimumDiameterAfterMerge(int[][] edges1, int[][] edges2) {\n        int d1 = getDiameter(edges1);\n        int d2 = getDiameter(edges2);\n\n        return Math.max(d1, Math.max(d2, 1 + d1 / 2 + (d1 % 2 == 1 ? 1 : 0) + d2 / 2 + (d2 % 2 == 1 ? 1 : 0)));\n    }\n\n    private int getDiameter(int[][] edges) {\n        List<Integer>[] adjs = new List[edges.length + 1];\n        for (int i = 0; i < adjs.length; i++) {\n            adjs[i] = new ArrayList<>();\n        }\n        for (int[] edge : edges) {\n            adjs[edge[0]].add(edge[1]);\n            adjs[edge[1]].add(edge[0]);\n        }\n        \n        return getDiameter(adjs);\n    }\n\n    private int getDiameter(List<Integer>[] adjs) {\n        int[] diameters = new int[] {0, 0};\n        boolean[] visited = new boolean[adjs.length];\n        dfs(adjs, -1, diameters, visited);\n        \n        int[] nextDiameters = new int[] {diameters[0], 0};\n        Arrays.fill(visited, false);\n        dfs(adjs, -1, nextDiameters, visited);\n        \n        return nextDiameters[1];\n    }\n\n    private void dfs(List<Integer>[] adjs, int parent, int[] diameters, boolean[] visited) {\n        visited[diameters[0]] = true;\n        \n        int[] maxDiameter = diameters.clone();\n        \n        for (int next : adjs[diameters[0]]) {\n            if (next != parent && !visited[next]) {\n                int[] currDiameter = new int[] {next, diameters[1] + 1};\n                dfs(adjs, parent, currDiameter, visited);\n                if (currDiameter[1] > maxDiameter[1]) {\n                    maxDiameter = currDiameter.clone();\n                }\n            }\n        }\n        \n        diameters[0] = maxDiameter[0];\n        diameters[1] = maxDiameter[1];\n    }\n}",
    "submit_ts": "1719717113",
    "subm_id": "1304382793"
}