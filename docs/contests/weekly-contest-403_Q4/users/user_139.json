{
    "username": "jushuai_lfx",
    "submission": "class Solution {\npublic:\n    using ll = long long;\n    int minimumSum(vector<vector<int>>& g) {\n        int row = g.size();\n        int col = g[0].size();\n        \n        ll dp[1000] = {0};\n        \n        for (int i = 0; i < row * col; ++i) {\n            ll left = INT_MAX;\n            ll right = INT_MIN;\n            ll up = INT_MIN;\n            ll down = INT_MAX;\n            bool flag = false;\n            for (ll j = 0; j < row; ++j) {\n                if (j > (i / col)) {\n                    continue;\n                }\n                for (ll k = 0; k < col; ++k) {\n                    if (k > (i % col)) {\n                        continue;\n                    }\n                    if (!g[j][k]) {\n                        continue;\n                    }\n                    left = min(left, k);\n                    right = max(right, k);\n                    up = max(up, j);\n                    down = min(down, j);\n                    flag = true;\n                }\n            }\n            if (!flag) {\n                continue;\n            }\n            dp[i] = (right - left + 1) * (up - down + 1);\n            //cout << i << \" \" << dp[i] << endl;\n        }\n        \n        ll ans = LLONG_MAX;\n        \n        for (int i = 0; i < row * col; ++i) {\n            if (!dp[i]) {\n                continue;\n            }\n            for (int j = 0; j < row; ++j) {\n                ll left1 = INT_MAX;\n                ll right1 = INT_MIN;\n                ll down1 = INT_MAX;\n                ll up1 = INT_MIN;\n                \n                ll left2 = INT_MAX;\n                ll right2 = INT_MIN;\n                ll down2 = INT_MAX;\n                ll up2 = INT_MIN;\n                bool flag1 = false;\n                bool flag2 = false;\n                \n                for (ll m = 0; m < row; ++m) {\n                    for (ll n = 0; n < col; ++n) {\n                        if (m <= (i / col) && (n <= (i % col))) {\n                            continue;\n                        }\n                        if (!g[m][n]) {\n                            continue;\n                        }\n                        if (m <= j) {\n                            left1 = min(left1, n);\n                            right1 = max(right1, n);\n                            up1 = max(up1, m);\n                            down1 = min(down1, m);\n                            flag1 = true;\n                        } else {\n                            left2 = min(left2, n);\n                            right2 = max(right2, n);\n                            up2 = max(up2, m);\n                            down2 = min(down2, m);\n                            flag2 = true;\n                        }\n                    }\n                }\n                if ((!flag1) || (!flag2)) {\n                    continue;\n                }\n                ans = min(ans, dp[i] + (right1 - left1 + 1) * (up1 - down1 + 1) + (right2 - left2 + 1) * (up2 - down2 + 1));\n                //cout << i << \" \" << dp[i] << \" \" << left1 << \" \" << right1 << \" \" << down1 << \" \" << up1 << \" \" << left2 << \" \" << right2 << \" \" << down2 << \" \" << up2 << endl;\n            }\n            \n            for (int j = 0; j < col; ++j) {\n                ll left1 = INT_MAX;\n                ll right1 = INT_MIN;\n                ll down1 = INT_MAX;\n                ll up1 = INT_MIN;\n                \n                ll left2 = INT_MAX;\n                ll right2 = INT_MIN;\n                ll down2 = INT_MAX;\n                ll up2 = INT_MIN;\n                bool flag1 = false;\n                bool flag2 = false;\n                \n                for (ll m = 0; m < row; ++m) {\n                    for (ll n = 0; n < col; ++n) {\n                        if (m <= (i / col) && (n <= (i % col))) {\n                            continue;\n                        }\n                        if (!g[m][n]) {\n                            continue;\n                        }\n                        if (n <= j) {\n                            left1 = min(left1, n);\n                            right1 = max(right1, n);\n                            up1 = max(up1, m);\n                            down1 = min(down1, m);\n                            flag1 = true;\n                        } else {\n                            left2 = min(left2, n);\n                            right2 = max(right2, n);\n                            up2 = max(up2, m);\n                            down2 = min(down2, m);\n                            flag2 = true;\n                        }\n                    }\n                }\n                // ll area1 = (right1 - left1 + 1) * (up1 - down1 + 1);\n                // ll area2 = (right2 - left2 + 1) * (up2 - down2 + 1);\n                if ((!flag1) || (!flag2)) {\n                    continue;\n                }\n                //cout << i << \" \" << dp[i] << \" \" << left1 << \" \" << right1 << \" \" << down1 << \" \" << up1 << \" \" << left2 << \" \" << right2 << \" \" << down2 << \" \" << up2 << endl;\n                ans = min(ans, dp[i] + (right1 - left1 + 1) * (up1 - down1 + 1) + (right2 - left2 + 1) * (up2 - down2 + 1));\n            }\n        }\n        return ans;\n    }\n};",
    "submit_ts": 1719112642.0
}