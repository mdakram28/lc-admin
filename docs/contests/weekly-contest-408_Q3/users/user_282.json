{
    "username": "dragonoverlord3000",
    "submission": "class Solution:\n    def numberOfSubstrings(self, s: str) -> int:\n        n = len(s)\n        sqrt_n = int(n**0.5) + 1\n        ans = 0\n        prefix_o, prefix_z = [0]*n, [0]*n\n        for i in range(n):\n            prefix_o[i] += prefix_o[i-1] + (1 if s[i] == \"1\" else 0)\n            prefix_z[i] += prefix_z[i-1] + (1 if s[i] == \"0\" else 0)\n\n        zero_idxs = [i for i in range(n) if s[i] == \"0\"]\n        ones_left_arr = [0]*len(zero_idxs)\n        ones_right_arr = [0]*len(zero_idxs)\n        for i in range(len(zero_idxs)):\n            pointer = zero_idxs[i]-1\n            while pointer >= 0 and s[pointer] == \"1\": pointer -= 1\n            ones_left = zero_idxs[i] - pointer - 1\n            ones_left_arr[i] = ones_left\n\n            pointer = zero_idxs[i]+1\n            while pointer < n and s[pointer] == \"1\": pointer += 1\n            ones_right = pointer - zero_idxs[i] - 1\n            ones_right_arr[i] = ones_right\n\n        for size in range(1, sqrt_n+1):\n            for left in range(len(zero_idxs)):\n                right = left + size - 1\n                if right >= len(zero_idxs): break\n                ones_left = ones_left_arr[left]\n                ones_right = ones_right_arr[right]\n                ones_between = prefix_o[zero_idxs[right]] - prefix_o[zero_idxs[left]]\n                missing = size*size - ones_between\n\n                for left_count in range(ones_left+1):\n                    min_right_count = max(missing - left_count, 0)\n                    ans += max(ones_right+1 - min_right_count, 0)\n\n        group_size = 0\n        for i in range(n):\n            if s[i] == \"1\": group_size += 1\n            else:\n                ans += group_size * (group_size + 1)//2\n                group_size = 0\n        ans += group_size * (group_size + 1)//2\n\n        return ans\n                \n\n\n\n",
    "submit_ts": "1722138729",
    "subm_id": "1335798192"
}