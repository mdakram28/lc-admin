{
    "username": "scotchtape",
    "submission": "template<class T> struct Seg { // comb(ID,b) = b\n    const T ID = -1e9; T comb(T a, T b) { return max(a,b); }\n    int n; vector<T> seg;\n    void init(int _n) { n = _n; seg.assign(2*n,ID); }\n    void pull(int p) { seg[p] = comb(seg[2*p],seg[2*p+1]); }\n    void upd(int p, T val) { // set val at position p\n        seg[p += n] = val; for (p /= 2; p; p /= 2) pull(p); }\n    T query(int l, int r) {\t// min on interval [l, r]\n        T ra = ID, rb = ID;\n        for (l += n, r += n+1; l < r; l /= 2, r /= 2) {\n            if (l&1) ra = comb(ra,seg[l++]);\n            if (r&1) rb = comb(seg[--r],rb);\n        }\n        return comb(ra,rb);\n    }\n};\n\nclass Solution {\npublic:\n    int maximumLength(vector<int>& a, int K) {\n        int n = a.size();\n        vector<Seg<int>> dp(K+1, Seg<int>());\n        for (int i = 0; i <= K; ++i) {\n            dp[i].init(n);\n        }\n        for (int i = 0; i < n; ++i) dp[0].upd(i, 1);\n\n\n        vector<map<int, int>> max_len_for_value(K+1);\n\n        int ans = 0;\n        for (int i = 0; i < n; ++i) {\n            for (int k = 0; k <= K; ++k) {\n\n                int res = 0;\n                if (k-1 >= 0)\n                    res = max(res, dp[k-1].query(0, i-1)+1);\n                if (max_len_for_value[k].count(a[i]))\n                    res = max(res, max_len_for_value[k][a[i]]+1);\n\n                int cur = dp[k].query(i, i);\n                res = max(res, cur);\n\n                dp[k].upd(i, res);\n                ans = max(ans, res);\n\n            }\n            for (int k = 0; k <= K; ++k)\n                max_len_for_value[k][a[i]] = max(max_len_for_value[k][a[i]], dp[k].query(i, i));\n        }\n        return ans;\n    }\n};",
    "submit_ts": 1717860062.0
}