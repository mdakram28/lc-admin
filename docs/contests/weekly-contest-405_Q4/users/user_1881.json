{
    "username": "jacobj2",
    "submission": "class TrieNode:\n    def __init__(self):\n        self.children={}\n        self.minCost = 100000\nclass Trie:\n    def __init__(self):\n        self.root = TrieNode()\n    def insert(self, word, cost):\n        curr = self.root\n        for i in range(len(word)):\n            if word[i] not in curr.children:\n                curr.children[word[i]]=TrieNode()\n            curr=curr.children[word[i]]\n        curr.minCost = min(curr.minCost,cost)\nclass Solution:\n    def minimumCost(self, target: str, words: List[str], costs: List[int]) -> int:\n        trie = Trie()\n        for i in range(len(words)):\n            trie.insert(words[i],costs[i])\n        @cache\n        def dfs(i):\n            if i>=len(target): return 0\n            res = -1\n            curr = trie.root\n            index = i\n            while curr and index<len(target) and target[index] in curr.children:\n                curr = curr.children[target[index]]\n                if curr.minCost!=100000:\n                    add = dfs(index+1)\n                    if add!=-1:\n                        if res==-1: \n                            res=curr.minCost+add\n                        else:\n                            res = min(res,curr.minCost+add)\n                index+=1\n            return res\n        ans = dfs(0)\n        if ans==inf: return -1\n        return ans",
    "submit_ts": "1720323963",
    "subm_id": "1312388323"
}