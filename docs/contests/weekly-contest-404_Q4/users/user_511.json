{
    "username": "d_ananta_",
    "submission": "class Solution {\npublic:\n    void dfs(int curr, int from, vector<vector<int>> &adj, vector<vector<pair<int, int>>> &dp) {\n        dp[curr].push_back({0, -1});\n        for(auto to: adj[curr]) {\n            if(to == from) continue;\n            dfs(to, curr, adj, dp);\n            pair<int, int> tmp = {dp[to][0].first + 1, to};\n            if(tmp > dp[curr][0]) {\n                dp[curr][1] = dp[curr][0];\n                dp[curr][0] = tmp;\n            } else if(tmp > dp[curr][1]) {\n                dp[curr][1] = tmp;\n            }\n        }\n    }\n    void dfs2(int curr, int from, vector<vector<int>> &adj, vector<vector<pair<int, int>>> &dp) {\n        for(auto to: adj[curr]) {\n            if(to == from) continue;\n            pair<int, int> tmp = {dp[curr][(dp[curr][0].second == to ? 1 : 0)].first + 1, curr};\n            if(tmp > dp[to][0]) {\n                dp[to][1] = dp[to][0];\n                dp[to][0] = tmp;\n            } else if(tmp > dp[to][1]) {\n                dp[to][1] = tmp;\n            }\n            dfs2(to, curr, adj, dp);\n        }\n    }\n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n        ios_base::sync_with_stdio(false); cin.tie(0);\n        int n = edges1.size() + 1, m = edges2.size() + 1;\n        vector<vector<int>> adj1(n), adj2(m);\n        vector<vector<pair<int, int>>> dp1(n, vector<pair<int, int>>(2, {0, -1})), dp2(m, vector<pair<int, int>>(2, {0, -1}));\n        for(auto i: edges1) {\n            adj1[i[0]].push_back(i[1]);\n            adj1[i[1]].push_back(i[0]);\n        }\n        for(auto i: edges2) {\n            adj2[i[0]].push_back(i[1]);\n            adj2[i[1]].push_back(i[0]);\n        }\n        dfs(0, -1, adj1, dp1);\n        dfs(0, -1, adj2, dp2);\n        dfs2(0, -1, adj1, dp1);\n        dfs2(0, -1, adj2, dp2);\n        int ans = 0, ans1 = INT_MAX, ans2 = INT_MAX;\n        for(int i = 0; i < n; i++) {\n            // cout << i << \": \";\n            // for(auto j: dp1[i]) {\n            //     cout << \"(\" << j.first << \", \" << j.second << \") \";\n            // }\n            // cout << \"\\n\";\n            ans = max(ans, dp1[i][0].first + (dp1[i].size() > 1 ? dp1[i][1].first : 0));\n            ans1 = min(ans1, dp1[i][0].first);\n        }\n        for(int i = 0; i < m; i++) {\n            // cout << i << \": \";\n            // for(auto j: dp2[i]) {\n            //     cout << \"(\" << j.first << \", \" << j.second << \") \";\n            // }\n            // cout << \"\\n\";\n            ans = max(ans, dp2[i][0].first + (dp2[i].size() > 1 ? dp2[i][1].first : 0));\n            ans2 = min(ans2, dp2[i][0].first);\n        }\n        return max(ans, ans1 + ans2 + 1);\n    }\n};",
    "submit_ts": 1719718025.0
}