{
    "username": "ROHAN_SAMUEL_J",
    "submission": "class TrieNode {\npublic:\n    unordered_map<char, TrieNode*> child;\n    vector<pair<int, int>> wordLast;\n};\n\nclass Trie {\npublic:\n    TrieNode* root;\n    Trie() {\n        root = new TrieNode();\n    }\n\n    void insert(string word,int i,int cost) {\n        TrieNode *node = root;\n        for (auto j : word) {\n            if (!node->child.count(j)) {\n                node->child[j] = new TrieNode();\n            }\n            node=node->child[j];\n        }\n        node->wordLast.push_back({i,cost});\n    }\n};\n\nclass Solution {\npublic:\n    int  minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int n=target.size();\n        vector<int> ans(n+1, INT_MAX);\n        ans[0]=0;\n        Trie trie;\n        for (int i=0; i<words.size();i++) {\n            trie.insert(words[i],i,costs[i]);\n        } for (int i=0;i<n;i++) {\n            if (ans[i]!=INT_MAX) {\n                TrieNode *node=trie.root;\n                for (int j=i;j<n;j++) {\n                    if (!node->child.count(target[j])) break;\n                    node=node->child[target[j]];\n                    for(auto& pair : node->wordLast) {\n                        int m=words[pair.first].size();\n                        if (i+m<=n) {\n                            ans[i+m]=min(ans[i+m],ans[i]+pair.second);\n                        }\n                    }\n                }\n            }\n        } return (ans[n]==INT_MAX) ? -1 : ans[n];\n    }\n};",
    "submit_ts": "1720323699",
    "subm_id": "1312381886"
}