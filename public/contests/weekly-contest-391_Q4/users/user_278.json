{
    "username": "alexlin87",
    "submission": "import java.util.*;\n\nimport static java.lang.Math.max;\n\nclass Solution {\n    public int minimumDistance(int[][] points) {\n        int n = points.length;\n        int[][] sum = new int[n][2], diff = new int[n][2];\n        int ans = Integer.MAX_VALUE;\n        TreeSet<int[]> ts1 = new TreeSet<>((e1, e2) -> {\n            if(e1[0] != e2[0]) {\n                return e1[0] - e2[0];\n            }\n            return e1[1] - e2[1];\n        });\n        TreeSet<int[]> ts2 = new TreeSet<>((e1, e2) -> {\n            if(e1[0] != e2[0]) {\n                return e1[0] - e2[0];\n            }\n            return e1[1] - e2[1];\n        });\n        for(int i = 0; i < n; i++) {\n            sum[i][0] = points[i][0] + points[i][1];\n            sum[i][1] = i;\n            diff[i][0] = points[i][0] - points[i][1];\n            diff[i][1] = i;\n            ts1.add(new int[]{sum[i][0], i});\n            ts2.add(new int[]{diff[i][0], i});\n        }\n        for(int i = 0; i < n; i++) {\n            ts1.remove(sum[i]);\n            int v1 = ts1.last()[0] - ts1.first()[0];\n            ts2.remove(diff[i]);\n            int v2 = ts2.last()[0] - ts2.first()[0];\n            ans = Math.min(ans, Math.max(v1, v2));\n            ts1.add(sum[i]);\n            ts2.add(diff[i]);\n        }\n        return ans;\n    }\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        int[][] a = new int[][]{{1,1},{1,1},{1,1}};\n        solution.minimumDistance(a);\n    }\n}\n\nclass SegmentTreeRangeMax {\n    int leftMost, rightMost;\n    SegmentTreeRangeMax lChild, rChild;\n    int max;\n    SegmentTreeRangeMax(int[] a, int l, int r) {\n        this.leftMost = l;\n        this.rightMost = r;\n        if(l == r) {\n            max = a[l];\n        }\n        else {\n            int mid = l + (r - l) / 2;\n            lChild = new SegmentTreeRangeMax(a, l, mid);\n            rChild = new SegmentTreeRangeMax(a, mid + 1, r);\n            recalc();\n        }\n    }\n\n    void recalc() {\n        if(leftMost < rightMost) {\n            this.max = max(lChild.max, rChild.max);\n        }\n    }\n\n    void update(int k, int v) {\n        if(leftMost == rightMost) {\n            max = max(max, v);\n            return;\n        }\n        if(k <= lChild.rightMost) lChild.update(k, v);\n        else rChild.update(k, v);\n        recalc();\n    }\n\n    int rangeMax(int l, int r) {\n        if(l > rightMost || r < leftMost) return Integer.MIN_VALUE;\n        if(l <= leftMost && r >= rightMost) return max;\n        return max(lChild.rangeMax(l, r), rChild.rangeMax(l, r));\n    }\n}"
}