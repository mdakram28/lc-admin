{
    "username": "Splatendoo",
    "submission": "class Solution {\n//     public int minimumDistance(int[][] points) {\n\n//     }\n    public int minimumDistance(int[][] points) {\n        Arrays.sort(points , (a,b) -> a[0] + a[1] - b[0] - b[1]);\n        //\u79fb\u9664\u5de6\u8fb9 \u6216\u8005\u53f3\u8fb9\n        int max1 = Integer.MAX_VALUE , n = points.length , max2 = 0;\n        int[] a = new int[n] , b = new int[n] , c = new int[n] , d= new int[n];\n        int idx = 0;\n        for (int[] p : points){\n            a[idx] = p[0] - p[1];\n            b[idx] = p[0] + p[1];\n            c[idx] = -p[0] + p[1];\n            d[idx] = -p[0] - p[1];\n            idx++;\n        }\n        //int mx1 = 0 , mn1 = Integer.MAX_VALUE , mx2 = 0 , mn2 = Integer.MAX_VALUE , mx3 = 0 , mn3 = Integer.MAX_VALUE , mx4 = 0 , mn4 = Integer.MAX_VALUE;\n\n            int[] r1 = helper(a);\n            int[] r2 = helper(b);\n            int[] r3 = helper(c);\n            int[] r4 = helper(d);\n            for (int i = 0 ; i < n ; i++){\n                int m1 = points[i][0] - points[i][1] , m2 = points[i][0] + points[i][1] , m3 = -points[i][0] + points[i][1] , m4 = -points[i][0] - points[i][1] ;\n                int mx1 = r1[0] , mn1 = r1[1] , mx2 = r2[0] , mn2 = r2[1] , mx3 = r3[0] ,\n                        mn3 = r3[1], mx4 = r4[0] , mn4 = r4[1];\n                mx1 = m1 == mx1 ? r1[2] : mx1;\n                mn1 = m1 == mn1 ? r1[3] : mn1;\n                mx2 = m2 == mx2 ? r2[2] : mx2;\n                mn2 = m2 == mn2 ? r2[3] : mn2;\n                mx3 = m3 == mx3 ? r3[2] : mx3;\n                mn3 = m3 == mn3 ? r3[3] : mn3;\n                mx4 = m4 == mx4 ? r4[2] : mx4;\n                mn4 = m4 == mn4 ? r4[3] : mn4;\n                int cm = Math.max(mx1 - mn1 , Math.max(mx2 - mn2 , Math.max(mx3 - mn3 , mx4 - mn4)));\n                max1 = Math.min(max1 , cm);\n            }\n        return max1;\n    }\n\n    int dist(int[] a , int [] b){\n        return Math.abs(a[0] - b[0]) + Math.abs(a[1] - b[1]);\n    }\n    int[] helper( int[] a){\n        //\u6c42\u79fb\u9664\u7b2cidx\u4e2a\u70b9 \u7684\u6700\u5927\u503c \u6700\u5c0f\u503c \u6b21\u5927\u503c \uff0c\u6b21\u5c0f\u503c\n        int[] ans = new int[4];\n        ans[0] = Integer.MIN_VALUE ; ans[1] = Integer.MAX_VALUE ; ans[2] = Integer.MIN_VALUE ; ans[3] = Integer.MAX_VALUE;\n        for (int i = 0 ; i < a.length ; i++){\n//            if (i == idx){\n//                continue;\n//            }\n            int x = a[i];\n            if (x > ans[2]){\n                if (x > ans[0]){\n                    ans[2] = ans[0];\n                    ans[0] = x;\n\n                }else {\n                    ans[2] = x;\n                }\n            }\n            if (x < ans[3]){\n                if (x < ans[1]){\n                    ans[3] = ans[1];\n                    ans[1] = x;\n\n                }else {\n                    ans[3] = x;\n                }\n            }\n        }\n        return ans;\n    }\n}"
}