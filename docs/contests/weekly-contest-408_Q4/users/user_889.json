{
    "username": "run_time_error__",
    "submission": "class Solution {\npublic:\n    bool avisolD(int avX, int avY, vector<vector<int>>& avCircles)\n    {\n        auto avBfs = [&](vector<vector<int>>& avGraph, int avStart, int avTarget1, int avTarget2, int avN) -> bool {\n            vector<bool> avVisited(avN + 4, false);\n            queue<int> avQueue;\n            avQueue.push(avStart);\n            avVisited[avStart] = true;\n\n            while (!avQueue.empty()) {\n                int avU = avQueue.front();\n                avQueue.pop();\n                for (int i = 0; i < avGraph[avU].size(); ++i) {\n                    int avV = avGraph[avU][i];\n                    if (!avVisited[avV]) {\n                        avQueue.push(avV);\n                        avVisited[avV] = true;\n                    }\n                }\n            }\n            return avVisited[avTarget1] || avVisited[avTarget2];\n        };\n\n        long long avNc = avCircles.size();\n        vector<vector<int>> avGraph(avNc + 4);\n\n        vector<vector<int>> avC(avNc, vector<int>(3));\n        for (int avI = 0; avI < avNc; ++avI) {\n            avC[avI][0] = avCircles[avI][0];\n            avC[avI][1] = avCircles[avI][1];\n            avC[avI][2] = avCircles[avI][2];\n        }\n\n        for (int avI = 0; avI < avNc; ++avI) {\n            if (avC[avI][0] <= avC[avI][2]) {\n                avGraph[avNc].push_back(avI);\n                avGraph[avI].push_back(avNc);\n            }\n            if (avX - avC[avI][0] <= avC[avI][2]) {\n                avGraph[avNc + 2].push_back(avI);\n                avGraph[avI].push_back(avNc + 2);\n            }\n            if (avC[avI][1] <= avC[avI][2]) {\n                avGraph[avNc + 1].push_back(avI);\n                avGraph[avI].push_back(avNc + 1);\n            }\n            if (avY - avC[avI][1] <= avC[avI][2]) {\n                avGraph[avNc + 3].push_back(avI);\n                avGraph[avI].push_back(avNc + 3);\n            }\n            for (int avJ = avI + 1; avJ < avNc; ++avJ) {\n                double avDx = avC[avI][0] - avC[avJ][0];\n                double avDy = avC[avI][1] - avC[avJ][1];\n                double avDistance = sqrt(avDx * avDx + avDy * avDy);\n                if (avC[avI][2] + avC[avJ][2] >= avDistance) {\n                    avGraph[avI].push_back(avJ);\n                    avGraph[avJ].push_back(avI);\n                }\n            }\n        }return !(avBfs(avGraph, avNc, avNc + 1, avNc + 2, avNc + 4) ||\n                 avBfs(avGraph, avNc + 3, avNc + 2, avNc + 1, avNc + 4));\n    }\n    bool canReachCorner(int avX, int avY, vector<vector<int>>& avCircles) {\n        return avisolD(avX,avY,avCircles);\n    }\n};\n",
    "submit_ts": "1722139184",
    "subm_id": "1335810393"
}