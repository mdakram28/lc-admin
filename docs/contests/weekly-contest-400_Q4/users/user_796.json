{
    "username": "DCXiaoBing",
    "submission": "class Solution {\n    // want the AND val to have same bit as k has\n    // n 1e5\n    // value 1e9 30 bits\n\n    // dp[i]? min diff val using subarray ending at i?\n    // has after effect\n\n    // similar to max XOR?\n\n    // one property of AND is, the value can only decrease\n    // if val < k or val == k, then we can stop\n\n    // https://www.geeksforgeeks.org/bitwise-and-of-sub-array-closest-to-k/\n    // use segment tree to compute range value\n    // \n    public int minimumDifference(int[] nums, int k) {\n        int n = nums.length;\n        SegmentTree tree = new SegmentTree(nums);\n        // int tmp = Integer.MAX_VALUE;\n        // for (int num : nums) {\n        //     System.out.println(Integer.toBinaryString(num));\n        //     tmp = tmp & num;\n        // }\n        // System.out.println(Integer.toBinaryString(k));\n        // System.out.println(\"tmp\" + tmp);\n        // for (int i = 0; i < n; i++) {\n        //     int cur = Integer.MAX_VALUE;\n        //     for (int j = i; j < n; j++) {\n        //         cur = cur & nums[j];\n        //         System.out.println(i + \" \" + j + \" \" + cur + \" \" + Integer.toBinaryString(cur));\n        //     }\n\n        // }\n\n        int res = Integer.MAX_VALUE;\n        for (int i = 0; i < n; i++) {\n            // AND val mono decrease\n            // so l is the largest idx, that AND val is larger than K\n            // l is the smallest idx that has largest AND value\n            int l = i, r = n - 1, mid;\n            while (l < r) {\n                mid = l + (r - l + 1) / 2;\n\n                // if (i == 0) System.out.println(\"bs: \" + l + \" \" + r + \" \" + tree.query(i, mid));\n                if (tree.query(i, mid) >= k) l = mid;\n                else r = mid - 1;\n            }\n            // System.out.println(i + \" \" + l + \" \" + tree.query(i, l));\n\n            res = Math.min(res, Math.abs(k - tree.query(i, l)));\n            if (l + 1 < n) res = Math.min(res, Math.abs(k - tree.query(i, l + 1)));\n        }\n        return res;\n    }\n}\n\nclass SegmentTree {\n    int[] tree;\n    int n;\n\n    // Constructor\n    public SegmentTree(int[] arr)\n    {\n        n = arr.length;\n        tree = new int[4 * n];\n        build(arr, 0, 0, n - 1);\n    }\n\n    // Function to build the Segment Tree\n    public void build(int[] arr, int node, int start,\n                      int end)\n    {\n        if (start == end) {\n            tree[node] = arr[start];\n        }\n        else {\n            int mid = (start + end) / 2;\n            build(arr, 2 * node + 1, start, mid);\n            build(arr, 2 * node + 2, mid + 1, end);\n            tree[node]\n                = tree[2 * node + 1] & tree[2 * node + 2];\n        }\n    }\n\n    // Overloading query function to be used recursively\n    public int query(int l, int r)\n    {\n        return query(0, 0, n - 1, l, r);\n    }\n\n    // query function to get bitwise AND of the range\n    public int query(int node, int start, int end, int l,\n                     int r)\n    {\n        if (r < start || end < l) {\n            return Integer\n                .MAX_VALUE; // Return maximum value if\n                            // outside the range\n        }\n        if (l <= start && end <= r) {\n            return tree[node]; // Return node value if range\n                               // is completely within the\n                               // query range\n        }\n        int mid = (start + end) / 2;\n        int p1 = query(2 * node + 1, start, mid, l, r);\n        int p2 = query(2 * node + 2, mid + 1, end, l, r);\n        return p1\n            & p2; // Return bitwise AND of children nodes\n    }\n}\n",
    "submit_ts": "1717299069",
    "subm_id": "1274800742"
}