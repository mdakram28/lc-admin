{
    "username": "Mirza_Atif",
    "submission": "class Solution {\npublic:\n    const int MOD =1e9+7;\n        int numberOfPermutations(int n, vector<vector<int>>& require) {\n        int maxInv=n*(n-1)/2;\n        long long int val = 0;\n        vector<int>dp(maxInv + 1, 0),prev(maxInv + 1, 0);\n        prev[0] = 1;\n        int rsize=require.size();\n        int csize=require[0].size();\n        int ab=0;\n\n        for (int len = 1;len<=n;len++) {\n            \n            fill(dp.begin(),dp.end(),0);\n\n            vector<int> v1(maxInv + 1, 0);\n            v1[0] = prev[0];\n            for(int inv = 1; inv <= maxInv; ++inv) {\n                v1[inv]=(v1[inv -1] +prev[inv])% MOD;\n            }\n\n            for (int i = 0; i<=maxInv; i++) {\n                if (i >= len) {\n                    dp[i] = (v1[i] - v1[i - len] + MOD) % MOD;\n                } else {\n                    dp[i] = v1[i];\n                }\n            }\n            swap(dp,prev);\n        }\n\n       \n        vector<int> v2(n+1, -1);\n        for (const auto& req :require) {\n            int a = req[0];\n            int b = req[1];\n            v2[a+1] =b;\n        }\n\n        fill(dp.begin(),dp.end(), 0);\n        prev[0] = 1;\n        for (int i=1; i<=maxInv; i++) {\n            prev[i] = 0;\n        }\n\n        for (int currLen = 1; currLen <= n; ++currLen) {\n            fill(dp.begin(), dp.end(), 0);\n\n            vector<int> v1(maxInv + 1, 0);\n            v1[0] = prev[0];\n            for (int inv = 1; inv<= maxInv; ++inv) {\n                v1[inv] =(v1[inv - 1] + prev[inv]) % MOD;\n            }\n\n            for (int i = 0; i <= maxInv; i++) {\n                if (i >= currLen) {\n                    dp[i] = (v1[i] - v1[i-currLen]+MOD) % MOD;\n                } else {\n                    dp[i]=v1[i];\n                }\n            }\n\n            swap(dp, prev);\n\n            if (v2[currLen] != -1) {\n                for (int inv = 0; inv <= maxInv; ++inv) {\n                    if (inv != v2[currLen]) {\n                        prev[inv] = 0;\n                    }\n                }\n            }\n        }\n\n        \n        for (int i=0;i<= maxInv; i++) {\n            val=(val+prev[i])% MOD;\n        }\n\n        return val;\n    }\n};",
    "submit_ts": 1719070115.0
}