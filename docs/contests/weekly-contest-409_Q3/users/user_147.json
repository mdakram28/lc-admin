{
    "username": "FreeYourMind",
    "submission": "from string import *\nfrom re import *\nfrom datetime import *\nfrom collections import *\nfrom heapq import *\nfrom bisect import *\nfrom copy import *\nfrom math import *\nfrom random import *\nfrom statistics import *\nfrom itertools import *\nfrom functools import *\nfrom operator import *\nfrom io import *\nfrom sys import *\nfrom json import *\nfrom builtins import *\nfrom typing import *\n\n\"\"\"\n<p>You are given an integer <code>n</code> and a 2D integer array <code>queries</code>.</p>\n\n<p>There are <code>n</code> cities numbered from <code>0</code> to <code>n - 1</code>. Initially, there is a <strong>unidirectional</strong> road from city <code>i</code> to city <code>i + 1</code> for all <code>0 &lt;= i &lt; n - 1</code>.</p>\n\n<p><code>queries[i] = [u<sub>i</sub>, v<sub>i</sub>]</code> represents the addition of a new <strong>unidirectional</strong> road from city <code>u<sub>i</sub></code> to city <code>v<sub>i</sub></code>. After each query, you need to find the <strong>length</strong> of the <strong>shortest path</strong> from city <code>0</code> to city <code>n - 1</code>.</p>\n\n<p>There are no two queries such that <code>queries[i][0] &lt; queries[j][0] &lt; queries[i][1] &lt; queries[j][1]</code>.</p>\n\n<p>Return an array <code>answer</code> where for each <code>i</code> in the range <code>[0, queries.length - 1]</code>, <code>answer[i]</code> is the <em>length of the shortest path</em> from city <code>0</code> to city <code>n - 1</code> after processing the <strong>first </strong><code>i + 1</code> queries.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">n = 5, queries = [[2,4],[0,2],[0,4]]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">[3,2,1]</span></p>\n\n<p><strong>Explanation: </strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/06/28/image8.jpg\" style=\"width: 350px; height: 60px;\" /></p>\n\n<p>After the addition of the road from 2 to 4, the length of the shortest path from 0 to 4 is 3.</p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/06/28/image9.jpg\" style=\"width: 350px; height: 60px;\" /></p>\n\n<p>After the addition of the road from 0 to 2, the length of the shortest path from 0 to 4 is 2.</p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/06/28/image10.jpg\" style=\"width: 350px; height: 96px;\" /></p>\n\n<p>After the addition of the road from 0 to 4, the length of the shortest path from 0 to 4 is 1.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">n = 4, queries = [[0,3],[0,2]]</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">[1,1]</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/06/28/image11.jpg\" style=\"width: 300px; height: 70px;\" /></p>\n\n<p>After the addition of the road from 0 to 3, the length of the shortest path from 0 to 3 is 1.</p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2024/06/28/image12.jpg\" style=\"width: 300px; height: 70px;\" /></p>\n\n<p>After the addition of the road from 0 to 2, the length of the shortest path remains 1.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n    <li><code>3 &lt;= n &lt;= 10<sup>5</sup></code></li>\n    <li><code>1 &lt;= queries.length &lt;= 10<sup>5</sup></code></li>\n    <li><code>queries[i].length == 2</code></li>\n    <li><code>0 &lt;= queries[i][0] &lt; queries[i][1] &lt; n</code></li>\n    <li><code>1 &lt; queries[i][1] - queries[i][0]</code></li>\n    <li>There are no repeated roads among the queries.</li>\n    <li>There are no two queries such that <code>i != j</code> and <code>queries[i][0] &lt; queries[j][0] &lt; queries[i][1] &lt; queries[j][1]</code>.</li>\n</ul>\n\n\"\"\"\n\nfrom sortedcontainers import SortedList\n\n\nclass Solution:\n    def shortestDistanceAfterQueries(\n        self, n: int, queries: List[List[int]]\n    ) -> List[int]:\n        sl = SortedList(range(n))\n        res = []\n        for u, v in queries:\n            i = sl.bisect_left(u)\n            if sl[i] != u:\n                res.append(len(sl) - 1)\n                continue\n            j = sl.bisect_left(v)\n            if sl[j] != v:\n                res.append(len(sl) - 1)\n                continue\n            while i + 1 < j:\n                sl.pop(i + 1)\n                j -= 1\n            res.append(len(sl) - 1)\n        return res\n\n\n# testcases = [\n#     [5, [[2, 4], [0, 2], [0, 4]]],\n#     [\n#         5,\n#         [\n#             [0, 4],\n#             [2, 4],\n#             [0, 2],\n#         ],\n#     ],\n#     # [],\n# ]\n\n# s = Solution()\n# func_name = dir(s)[-1]\n# func = getattr(s, func_name)\n\n# for args in testcases:\n#     print(func(*args))\n",
    "submit_ts": "1722740321",
    "subm_id": "552330704"
}