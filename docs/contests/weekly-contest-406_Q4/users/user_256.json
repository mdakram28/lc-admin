{
    "username": "Priyanka1154Bind",
    "submission": "class Solution {\npublic:\n    long long minimumCost(int m, int n, vector<int>& horizontalCut, vector<int>& verticalCut) {\n          vector<pair<int, bool>> allCuts;\n        for (int i = 0; i < horizontalCut.size(); ++i) {\n            allCuts.push_back({horizontalCut[i], true});\n        }\n        for (int j = 0; j < verticalCut.size(); ++j) {\n            allCuts.push_back({verticalCut[j], false});\n        }\n        sort(allCuts.rbegin(), allCuts.rend());\n\n        int hSegments = 1; \n        int vSegments = 1; \n        long long totalCost = 0;\n\n        for (const auto& cut : allCuts) {\n            if (cut.second) {\n                totalCost += static_cast<long long>(cut.first) * vSegments;\n                hSegments++;\n            } else {\n                totalCost += static_cast<long long>(cut.first) * hSegments;\n                vSegments++;\n            }\n        }\n\n        return totalCost;\n    }\n};",
    "submit_ts": "1720925325",
    "subm_id": "1320250841"
}