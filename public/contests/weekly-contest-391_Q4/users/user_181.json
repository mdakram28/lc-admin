{
    "username": "jtjl",
    "submission": "typedef pair<int, int> pii;\ntypedef vector<pii> vp;\ntypedef pair<vp, vp> vii;\ntypedef pair<int, vii> shb;\n\nclass Solution {\npublic:\n    shb getmx(const vector<pii>& a, int p, int q) {\n        vector<pii> mx, mn;\n        int mxo = -1e9, mno = 1e9;\n        for (auto &x : a) {\n            int o = p * x.first + q * x.second;\n            if (o > mxo) mx.clear(), mxo = o;\n            if (o >= mxo) mx.emplace_back(x);\n            if (o < mno) mn.clear(), mno = o;\n            if (o <= mno) mn.emplace_back(x);\n        }\n        return {mxo - mno, {mx, mn}};\n    }\n    int getans(const vector<pii>& a, int p, int q) {\n        vector<pii> mx, mn;\n        int mxo = -1e9, mno = 1e9;\n        for (auto &x : a) {\n            int o = p * x.first + q * x.second;\n            if (o > mxo) mx.clear(), mxo = o;\n            if (o >= mxo) mx.emplace_back(x);\n            if (o < mno) mn.clear(), mno = o;\n            if (o <= mno) mn.emplace_back(x);\n        }\n        return mxo - mno;\n    }\n    int minimumDistance(vector<vector<int>>& points) {\n        vector<pii> g;\n        for (auto &x : points) g.push_back(pii(x[0], x[1]));\n        shb A = getmx(g, 1, 1);\n        shb B = getmx(g, 1, -1);\n        if (A.first == 0 && B.first == 0) return 0;\n        set<pii> C;\n        vector<pii> D;\n        for (int i = 0; i < 1 && i < A.second.first.size(); ++i) C.insert(A.second.first[i]);\n        for (int i = 0; i < 1 && i < A.second.second.size(); ++i) C.insert(A.second.second[i]);\n        for (int i = 0; i < 1 && i < B.second.first.size(); ++i) C.insert(B.second.first[i]);\n        for (int i = 0; i < 1 && i < B.second.second.size(); ++i) C.insert(B.second.second[i]);\n        vector<pii> h;\n        for (int i = 0; i < g.size(); ++i) {\n            if (C.find(g[i]) != C.end()) {\n                C.erase(g[i]); D.push_back(g[i]);\n            } else {\n                h.push_back(g[i]);\n            }\n        }\n        int ans = 1e9;\n        for (int i = 0; i < D.size(); ++i) {\n            for (int j = 0; j < D.size(); ++j) if (j != i) h.push_back(D[j]);\n            // for (auto &x : h) cout << x.first << \",\" << x.second << \"  \"; cout << endl;\n            ans = min(ans, max(getans(h, 1, 1), getans(h, 1, -1)));\n            for (int j = 0; j < D.size(); ++j) if (j != i) h.pop_back();\n        }\n        return ans;\n    }\n};"
}