{
    "username": "FakeToxic",
    "submission": "class Solution {\npublic:\n    int minChanges(vector<int>& nums, int k) {\n        int n = nums.size();\n        int ans = n;\n        unordered_map<int, vector<int>> diffGroups;  \n        for (int i = 0; i < n / 2; ++i) {\n            int diff = abs(nums[i] - nums[n - 1 - i]);\n            int maxElement = max({nums[i], nums[n - 1 - i], k - nums[i], k - nums[n - 1 - i]});\n            diffGroups[diff].push_back(maxElement);\n        }\n        vector<int> allMax;\n        for (const auto& [diff, maxElems] : diffGroups) {\n            allMax.insert(allMax.end(), maxElems.begin(), maxElems.end());\n        }\n        sort(allMax.begin(), allMax.end());\n        for (const auto& [diff, maxElems] : diffGroups) {\n            int lb = lower_bound(allMax.begin(), allMax.end(), diff) - allMax.begin();\n            lb = 2 * lb + (n / 2 - lb); \n            for (int maxElem : maxElems) {\n                lb -= (maxElem < diff) ? 2 : 1; \n            }\n            ans = min(ans, lb);\n        }\n        return ans;\n    }\n};",
    "submit_ts": "1721489099",
    "subm_id": "1327442852"
}