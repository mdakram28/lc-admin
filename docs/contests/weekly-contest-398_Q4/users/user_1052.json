{
    "username": "traveler1",
    "submission": "class Solution {\npublic:\n    unordered_map<long long, vector<vector<long long>>> dp;\n    \n    // long long solve(long long curr, int jump, int k, bool prevNotDown) {\n    //     if(jump > 31 or curr >= k + 6) return 0;\n    //     if (dp[curr][jump][prevNotDown] != -1 and dp.count(curr)) return dp[curr][jump][prevNotDown];\n    //     int already = curr == k;\n    //     long long ways = already;\n    //     if (curr > 0 && prevNotDown) {\n    //         ways += solve(curr - 1, jump, k, false);\n    //     }\n    //     if(curr + (1 << jump) <= k + 1)\n    //     ways += solve(curr + (1LL << jump), jump + 1, k, true);\n    //     dp[curr].resize(32,vector<long long>(2,-1));\n    //     return dp[curr][jump][prevNotDown] = ways;\n    // }\n    long long ncr(long long n,long long r){\n        if (r > n || r < 0) return 0;\n        if (r == 0 || r == n) return 1;\n        long long ans = 1;\n        r = min(r, n - r);\n        for (int i = 0; i < r; ++i) {\n            ans *= (n - i);\n            ans /= (i + 1);\n        }\n\n        return ans;\n    }\n    int waysToReachStair(int k) {\n        long long ans = 0;\n        for(int i = 0;i <= 31;i++){\n            int jump = (1ll << i) - k;\n            if(jump < 0ll) continue;\n            ans += ncr(i + 1, jump);\n        }\n        return ans;\n        \n    }\n};",
    "submit_ts": "1716090442",
    "subm_id": "1261867283"
}