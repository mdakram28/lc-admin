{
    "username": "IEC2021110",
    "submission": "class Node {\npublic:\n    unordered_map<char, Node*> children;\n    int cost;\n    \n    Node() : cost(INT_MAX) {}\n};\n\nclass Trie {\npublic:\n    Node* root;\n    \n    Trie() {\n        root = new Node();\n    }\n    \n    void insert(const string& word, int cost) {\n        Node* node = root;\n        for (char c : word) {\n            if (!node->children.count(c)) {\n                node->children[c] = new Node();\n            }\n            node = node->children[c];\n        }\n        node->cost = min(node->cost, cost);\n    }\n};\n\n\n\n\n\n\nclass Solution {\n    \npublic:\n    int minimumCost(string k, vector<string>& arr, vector<int>& costs) {\n        \n        int n = k.size();\n        \n        Trie trie;\n        \n        for(int i =0;i<arr.size();i++){\n            trie.insert(arr[i],costs[i]);\n        }\n        \n        vector<int>dp(n+1,INT_MAX);\n        dp[0]=0;\n        \n        for(int i =0;i<n;i++){\n            if(dp[i]!=INT_MAX){\n                Node* node = trie.root;\n                \n                for(int j= i;j<n;j++){\n                    if(!node->children.count(k[j])) break;\n                    node = node->children[k[j]];\n                    if(node->cost!=INT_MAX){\n                        dp[j+1] = min(dp[j+1],dp[i]+node->cost);\n                    }\n                }\n            }\n        }\n        \n        return dp[n]==INT_MAX?-1:dp[n];\n        \n    }\n};",
    "submit_ts": "1720323204",
    "subm_id": "1312369867"
}