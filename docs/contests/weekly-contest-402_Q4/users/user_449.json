{
    "username": "piscesdream-7",
    "submission": "template <typename T> class FenwickTree {\npublic:\n  FenwickTree(int N, const T &default_value = T()) : N(N) {\n    values.assign(N, default_value);\n  }\n\n  void Update(int idx, const T &delta) {\n    while (idx < N) {\n      values[idx] += delta;\n      idx |= (idx + 1);\n    }\n  }\n\n  T Query(int idx) {\n    T res{};\n    while (idx >= 0) {\n      res += values[idx];\n      idx = (idx & (idx + 1)) - 1;\n    }\n    return res;\n  }\n\n  T Query(int l, int r) { // inclusive\n    return Query(r) - Query(l - 1);\n  }\n\n  int N;\n  vector<T> values;\n};\n\n\nclass Solution {\npublic:\n    vector<int> countOfPeaks(vector<int>& nums, vector<vector<int>>& queries) {\n        int n = nums.size();\n        auto Is = [&](int i) {\n            if (i == 0 || i == n-1) return false;\n            return nums[i] > nums[i+1] && nums[i] > nums[i-1];\n        };\n        \n        FenwickTree tr(n+1, 0);\n        for (int i = 0; i < n; ++i) {\n            if (Is(i)) {\n                // cout << \"IS\" << i << endl;\n                tr.Update(i, +1);\n            }\n        }\n        \n        vector<int> ans;\n        for (const auto& q: queries) {\n            if (q[0] == 1){ \n                if (q[1]+1 > q[2]-1)\n                    ans.push_back(0); else\n                ans.push_back(tr.Query(q[1]+1, q[2]-1));\n            } else {\n                \n                int nums_i = nums[q[1]];\n                \n                for (int i = max(0, q[1]-1); i <= min(n-1, q[1]+1); ++i) {\n                    nums[q[1]] = nums_i;\n                    int c1 = Is(i);\n                    nums[q[1]] = q[2];\n                    int c2 = Is(i);\n                    if (c1 != c2) {\n                        // cout << \"UPDATE\" << i << \" \" << c1 << \"->\" << c2 << endl;\n                        tr.Update(i, c2-c1);\n                    }\n                }\n            }\n        }\n        return ans;\n    }\n};",
    "submit_ts": 1718506988.0
}