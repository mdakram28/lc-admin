{
    "username": "krism_lsy",
    "submission": "class SegTree1:\n    def __init__(self,n):\n        self.size=2<<n.bit_length()\n        self.mark = [0] * self.size\n        self.tag = [0] * self.size\n\n    # \u7ef4\u62a4\u533a\u95f4\n    def maintain(self,o: int) -> None:\n        self.mark[o] = self.mark[o * 2] + self.mark[o * 2 + 1]\n\n    def do(self,o: int, l: int, r: int,val:int) -> None:\n        self.mark[o] = (r - l + 1) *val\n        self.tag[o] = val\n\n    #\u521d\u59cb\u5316\u7ebf\u6bb5\u6811   o,l,r=1,1,n\n    def build(self,o: int, l: int, r: int,nums) -> None:\n        if l == r:\n            self.mark[o] = nums[l - 1] #nums\u5168\u4e3a0\u5219\u4e0d\u7528\u521d\u59cb\u5316\n            return\n        m = (l + r) // 2\n        self.build(o * 2, l, m ,nums)\n        self.build(o * 2 + 1, m + 1, r,nums)\n        self.maintain(o)\n\n    # [L,R]\u533a\u95f4\u503c\u4fee\u6539\u4e3aval\n    def update(self,o: int, l: int, r: int, L: int, R: int,val:int) -> None:\n        if L <= l and r <= R:\n            self.do(o, l, r,val)\n            return\n        m = (l + r) // 2\n        if self.tag[o]:\n            self.do(o * 2, l, m,self.tag[o])\n            self.do(o * 2 + 1, m + 1, r,self.tag[o])\n            self.tag[o] = 0\n        if m >= L: self.update(o * 2, l, m, L, R,val)\n        if m < R: self.update(o * 2 + 1, m + 1, r, L, R,val)\n        self.maintain(o)\n\n    #\u67e5\u8be2\u533a\u95f4\n    def query(self,o: int, l: int, r: int, L: int, R: int):\n        if L <= l and r <= R:\n            return self.mark[o]\n        m = (l + r) // 2\n        if self.tag[o]:\n            self.do(o * 2, l, m,self.tag[o])\n            self.do(o * 2 + 1, m + 1, r,self.tag[o])\n            self.tag[o] = 0\n        res=0\n        if m >= L: res +=self.query(o * 2, l, m, L, R)\n        if m < R: res +=self.query(o * 2 + 1, m + 1, r, L, R)\n        self.maintain(o)\n        return res\n\n\nclass Solution:\n    def shortestDistanceAfterQueries(self, n: int, queries: List[List[int]]) -> List[int]:\n        st=SegTree1(n)\n        # st1=SegTree(n)\n        res=[]\n        d=n-1\n        for x,y in queries:\n            x+=1\n            y+=1\n            s=st.query(1,1,n,x+1,y-1)\n            # print(x,y,s)\n            if s==y-x:\n                res.append(d)\n                continue\n            else:\n                st.update(1,1,n,x+1,y-1,1)\n                d-=(y-x+1-2)-s\n            # print(st.query(1,1,n,1,n))\n            res.append(d)\n        return res\n            \n",
    "submit_ts": "1722742855",
    "subm_id": "552347325"
}