{
    "username": "seaofnonsense52",
    "submission": "class Solution:\n    def minFlips(self, grid: List[List[int]]) -> int:\n        NR=len(grid)\n        NC=len(grid[0])\n\n        # count and mark grid with changes, tho I think only the modulo matters, so doesn't have to be exact marking\n        cnt = 0\n        # cnt true quardrants (if exist)\n        for r in range(NR//2):\n            for c in range(NC//2):\n                num1s = (\n                    grid[r     ][c     ]+\n                    grid[NR-1-r][c     ]+\n                    grid[r     ][NC-1-c]+\n                    grid[NR-1-r][NC-1-c]\n                )\n                print(f'{num1s}')\n                cnt+=min(\n                    num1s,  # flip all 1s to 0\n                    4-num1s # flip all 0s to 1\n                )\n                grid[r     ][c     ] = 1\n                grid[NR-1-r][c     ] = 1\n                grid[r     ][NC-1-c] = 1\n                grid[NR-1-r][NC-1-c] = 1\n        print(f'aft true quads {cnt}')\n\n        flipped_centerRC=False\n        # cnt H center (if exist)\n        if NR%2==1:\n            MIDR=NR//2\n            for c in range(NC//2):\n                if grid[MIDR][c]!=grid[MIDR][NC-1-c]:\n                    cnt+=1\n                    grid[MIDR][c] = (grid[MIDR][c]+1)%2\n                    flipped_centerRC=True\n        print(f'aft H center {cnt}')\n        # cnt V center (if exist)\n        if NC%2==1:\n            MIDC=NC//2\n            for r in range(NR//2):\n                if grid[r][MIDC]!=grid[NR-1-r][MIDC]:\n                    cnt+=1\n                    grid[r][MIDC] = (grid[r][MIDC]+1)%2\n                    flipped_centerRC=True\n        print(f'aft V center {cnt}')\n        # cnt total number of 1s\n        tot1s = sum(map(sum, grid))\n        print('grid:')\n        for x in grid:\n            print(x)\n        print(f'tot1s {tot1s}')\n        # flip remaining 1s down to 0\n\n        return cnt+(tot1s%2 if flipped_centerRC else tot1s%4)",
    "submit_ts": "1722700226",
    "subm_id": "1343235429"
}