{
    "username": "chakradharchakri939",
    "submission": "from collections import deque\nimport math\nclass Solution:\n    def canReachCorner(self, X: int, Y: int, circles: List[List[int]]) -> bool:\n        def fun( g, i, t1, t2, node):\n            qu = deque([i])\n            visit= [0]*(node + 4)\n            visit[i] = 1\n            while qu:\n                x = qu.popleft()\n                for y in g[x]:\n                    if not visit[y]:\n                        qu.append(y)\n                        visit[y] = 1\n            return visit[t1] or visit[t2]\n\n\n\n\n        flag = 0\n        temp = [((i, j), r) for i, j, r in circles]\n        gf = [[] for _ in range(len(circles) + 4)]\n        for i,((x, y), r) in enumerate(temp):\n            if y <= r:\n                gf[len(circles) + 1].append(i)\n                gf[i].append(len(circles) + 1)\n            if Y - y <= r:\n                gf[len(circles) + 3].append(i)\n                gf[i].append(len(circles) + 3)\n            if x <= r:\n                gf[len(circles)].append(i)\n                gf[i].append(len(circles))\n            if X - x <= r:\n                gf[len(circles) + 2].append(i)\n                gf[i].append(len(circles) + 2)\n            for j in range(i + 1, len(circles)):\n                a,b = temp[j][0]\n                if r+temp[j][1] >= math.sqrt((x - a)**2 + (y - b)**2):\n                    gf[i].append(j)\n                    gf[j].append(i)\n        flag = max(flag, fun(gf, len(circles), len(circles) + 1, len(circles) +2,len(circles) +4))  \n        flag = max(flag, fun(gf, len(circles)+3,len(circles)+ 2, len(circles)+ 1, len(circles)+ 4)) \n        if flag:\n            return False\n        return True",
    "submit_ts": "1722138303",
    "subm_id": "1335787263"
}