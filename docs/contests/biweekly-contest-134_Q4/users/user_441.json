{
    "username": "tejasmundhe123",
    "submission": "#include <vector>\n#include <unordered_map>\nusing namespace std;\n\nclass Solution {\npublic:\n    long long countSubarrays(vector<int>& nums, int k) {\n        int n = nums.size();\n        long long count = 0;\n\n        // Map to store results of previous bitwise AND operations\n        unordered_map<long long, long long> prevResults;\n\n        for (int i = 0; i < n; ++i) {\n            // Temporary map to store current results\n            unordered_map<long long, long long> currResults;\n\n            // Check the current element\n            if (nums[i] == k) {\n                ++count;\n            }\n            currResults[nums[i]] = 1;\n\n            // Update the current results based on previous results\n            for (auto& [val, freq] : prevResults) {\n                long long newAndResult = val & nums[i];\n                if (newAndResult == k) {\n                    count += freq;\n                }\n                currResults[newAndResult] += freq;\n            }\n\n            // Update previous results for the next iteration\n            prevResults = currResults;\n        }\n\n        return count;\n    }\n};\n",
    "submit_ts": "1720279818",
    "subm_id": "1311766316"
}