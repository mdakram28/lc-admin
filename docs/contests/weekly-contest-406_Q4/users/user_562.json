{
    "username": "ajayprajapati0253",
    "submission": "class Solution {\npublic:\n    long long minimumCost(int m, int n, std::vector<int>& horizontalCut, std::vector<int>& verticalCut) {\n        // Combine the cuts with their types\n        std::vector<std::pair<int, char>> cuts;\n        for (int cost : horizontalCut) {\n            cuts.emplace_back(cost, 'H');\n        }\n        for (int cost : verticalCut) {\n            cuts.emplace_back(cost, 'V');\n        }\n\n        // Sort the cuts by cost in descending order\n        std::sort(cuts.rbegin(), cuts.rend());\n\n        // Initialize the number of horizontal and vertical pieces\n        int horizontalPieces = 1;\n        int verticalPieces = 1;\n\n        long long totalCost = 0;\n\n        // Perform the cuts in the order of their costs\n        for (const auto& cut : cuts) {\n            if (cut.second == 'H') {\n                // Horizontal cut\n                totalCost += static_cast<long long>(cut.first) * verticalPieces;\n                horizontalPieces++;\n            } else {\n                // Vertical cut\n                totalCost += static_cast<long long>(cut.first) * horizontalPieces;\n                verticalPieces++;\n            }\n        }\n\n        return totalCost;\n    }\n};",
    "submit_ts": "1720925314",
    "subm_id": "1320250462"
}