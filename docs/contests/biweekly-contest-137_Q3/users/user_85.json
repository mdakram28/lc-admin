{
    "username": "Kanstantsin Vilcheuski",
    "submission": "class Solution {\npublic:\n\n    struct Node {\n        int val;\n        int i;\n        int j;\n    };\n\n    void replace(vector<int>& rsq, int mod, int i, int x) {\n        i += mod;\n        rsq[i] = x;\n        i /= 2;\n        while (i > 0) {\n            rsq[i] = max(rsq[i + i], rsq[i + i + 1]);\n            i /= 2;\n        }\n    }\n\n    int getmax(vector<int>& rsq, int mod, int l, int r) {\n        int i = l + mod, j = r + mod, ans = -1e9;\n        while (i <= j) {\n            if (i % 2 == 1) ans = max(ans, rsq[i]);\n            if (j % 2 == 0) ans = max(ans, rsq[j]);\n            i = (i + 1) / 2;\n            j = (j - 1) / 2;\n        }\n        return ans;\n    }\n\n    long long maximumValueSum(vector<vector<int>>& board) {\n        vector<pair<int, pair<int, int> > > a;\n        int n = board.size(), m = board[0].size();\n        vector<vector<pair<int, int> > > cur(n);\n        for (int i = 0; i < n; ++i) {\n            vector<pair<int, int> > tmp;\n            for (int j = 0; j < m; ++j) tmp.push_back({board[i][j], j});\n            sort(tmp.begin(), tmp.end());\n            reverse(tmp.begin(), tmp.end());\n            while (tmp.size() > 3) tmp.pop_back();\n            cur[i] = tmp;\n        }\n        vector<int> rsq(m + m + 2, -1e9);\n        int mod = m + 1;\n        vector<set<pair<int, int> > > s(m);\n        for (int i = 0; i < n; ++i) {\n            for (const auto& x : cur[i]) {\n                int I = i, J = x.second;\n                s[J].insert({x.first, I});\n                replace(rsq, mod, J, x.first);\n            }\n        }\n        long long answer = -1e18;\n        for (int i = 0; i < n; ++i) {\n            for (int j = i + 1; j < n; ++j) {\n                for (const auto& x : cur[i]) {\n                    int I = i, J = x.second;\n                    assert(s[J].count({x.first, I}));\n                    s[J].erase({x.first, I});\n                    if (s[J].empty()) replace(rsq, mod, J, -1e9); else {\n                        auto val = --(s[J].end());\n                        replace(rsq, mod, J, val->first);\n                    }\n                }\n                for (const auto& x : cur[j]) {\n                    int I = j, J = x.second;\n                    assert(s[J].count({x.first, I}));\n                    s[J].erase({x.first, I});\n                    if (s[J].empty()) replace(rsq, mod, J, -1e9); else {\n                        auto val = --(s[J].end());\n                        replace(rsq, mod, J, val->first);\n                    }\n                }\n                for (const auto& x : cur[i]) {\n                    for (const auto& y : cur[j]) {\n                        if (x.second == y.second) continue;\n                        int L = x.second, R = y.second;\n                        if (L > R) swap(L, R);\n                        long long mx = getmax(rsq, mod, 0, L - 1);\n                        long long mx2 = getmax(rsq, mod, L + 1, R - 1);\n                        long long mx3 = getmax(rsq, mod, R + 1, m - 1);\n                        answer = max(answer, 1ll * x.first + y.first + max(mx, max(mx2, mx3)));\n                    }\n                }\n                for (const auto& x : cur[i]) {\n                    int I = i, J = x.second;\n                    s[J].insert({x.first, I});\n                    if (s[J].empty()) replace(rsq, mod, J, -1e9); else {\n                        auto val = --(s[J].end());\n                        replace(rsq, mod, J, val->first);\n                    }\n                }\n                for (const auto& x : cur[j]) {\n                    int I = j, J = x.second;\n                    s[J].insert({x.first, I});\n                    if (s[J].empty()) replace(rsq, mod, J, -1e9); else {\n                        auto val = --(s[J].end());\n                        replace(rsq, mod, J, val->first);\n                    }\n                }\n            }\n        }\n        return answer;\n    }\n};",
    "submit_ts": "1723907802",
    "subm_id": "1359124902"
}