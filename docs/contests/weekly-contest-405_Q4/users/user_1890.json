{
    "username": "avdhesh201",
    "submission": "\nclass TrieNode {\npublic:\n    unordered_map<char, TrieNode*> children;\n    int minimumCost;\n    \n    TrieNode() : minimumCost(INT_MAX) {}\n};\n\nclass Trie {\npublic:\n    TrieNode* root;\n    \n    Trie() {\n        root = new TrieNode();\n    }\n    \n    void insertWord(const string& word, int cost) {\n        TrieNode* currentNode = root;\n        for (char character : word) {\n            if (!currentNode->children.count(character)) {\n                currentNode->children[character] = new TrieNode();\n            }\n            currentNode = currentNode->children[character];\n        }\n        currentNode->minimumCost = min(currentNode->minimumCost, cost);\n    }\n};\n\nclass Solution {\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int targetSize = target.size();\n        Trie trie;\n      \n        for (int i = 0; i < words.size(); ++i) {\n            trie.insertWord(words[i], costs[i]);\n        }\n      \n        vector<int> dp(targetSize + 1, INT_MAX);\n        dp[0] = 0;\n      \n        for (int i = 0; i < targetSize; ++i) {\n            if (dp[i] == INT_MAX) continue; \n            TrieNode* currentNode = trie.root;\n            \n            for (int j = i; j < targetSize; ++j) {\n                char currentChar = target[j];\n                if (!currentNode->children.count(currentChar)) break; \n                currentNode = currentNode->children[currentChar];\n                if (currentNode->minimumCost != INT_MAX)dp[j + 1] = min(dp[j + 1], dp[i] + currentNode->minimumCost);\n            }\n        }       \n        return dp[targetSize] == INT_MAX ? -1 : dp[targetSize];\n    }\n};",
    "submit_ts": "1720324034",
    "subm_id": "1312390031"
}