{
    "username": "swapniltyagi17",
    "submission": "class Solution {\n    \n    pair<int,int> fn(vector<int> *g, vector<int> &indeg, int n){\n        int size = 0;\n        int rem = n;\n        queue<int> q;\n        for(int i = 0; i<n; ++i){\n            if(indeg[i]==1 or indeg[i]==0) q.push(i);\n        }\n        \n        \n        while(rem>2){\n            int s = q.size();\n            if(s>=2)    size += 2;\n            else ++size;\n            rem -= s;\n            while(s--){\n                int node = q.front();\n                q.pop();\n                for(auto nbr : g[node]){\n                    if(--indeg[nbr]==1){\n                        q.push(nbr);\n                    }\n                }\n            }\n        }\n        if(rem==2) ++size;\n        return {q.front(),size};\n    }\n    \n    \n    int dfs(int node, vector<int> *g, bool * vis){\n        int ans = 0;\n        vis[node] = 1;\n        for(auto nbr : g[node]){\n            if(!vis[nbr]) ans = max(ans,1+dfs(nbr,g, vis));\n        }\n        return ans;\n    }\n    \npublic:\n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n        int n = edges1.size()+1, m = edges2.size()+1;\n        vector<int> g1[n];\n        vector<int> g2[m];\n        vector<int> indeg1(n,0), indeg2(m,0);\n        \n        for(int i = 0; i<n-1; ++i){\n            int u = edges1[i][0];\n            int v = edges1[i][1];\n            g1[u].push_back(v);\n            g1[v].push_back(u);\n            ++indeg1[u];\n            ++indeg1[v];\n        }\n        \n           for(int i = 0; i<m-1; ++i){\n            int u = edges2[i][0];\n            int v = edges2[i][1];\n            g2[u].push_back(v);\n            g2[v].push_back(u);\n            ++indeg2[u];\n            ++indeg2[v];\n        }\n        \n        \n        auto p1 = fn(g1,indeg1,n);\n        auto p2 = fn(g2,indeg2,m);\n        \n        int node1 = p1.first;\n        int node2 = p2.first;\n        int dia1 = p1.second;\n        int dia2 = p2.second;\n        \n        bool *vis = new bool[n]{0};\n        bool *vis2 = new bool[m]{0};\n          \n        int a = dfs(node1,g1,vis);\n        int b = dfs(node2,g2,vis2);\n        \n        int ans = a+b+1;\n        \n        // return dia2;\n        \n        return max(ans,max(dia1,dia2));\n        \n    }\n    \n};",
    "submit_ts": 1719719301.0
}