{
    "username": "manassinghmainacc",
    "submission": "#include <bits/stdc++.h>\nusing namespace std;\n\nclass Solution {\nprivate:\n    int bfs(vector<vector<int>>& g, int s, int t1, int t2, int n) {\n        queue<int> q;\n        vector<int> vis(n + 4, 0);\n        q.push(s);\n        vis[s] = 1;\n\n        while (!q.empty()) {\n            int u = q.front();\n            q.pop();\n            int i = 0;\n            while (i < g[u].size()) {\n                int v = g[u][i];\n                if (!vis[v]) {\n                    q.push(v);\n                    vis[v] = 1;\n                }\n                i++;\n            }\n        }\n\n        return vis[t1] || vis[t2];\n    }\n\n    double find (vector<pair<pair<int, int>, int>> &circ, int j, int k){\n        return (pow(circ[j].first.first - circ[k].first.first, 2) +\n                         pow(circ[j].first.second - circ[k].first.second, 2));\n    }\n\npublic:\n    bool canReachCorner(int X, int Y, vector<vector<int>>& c) {\n        int n = c.size();\n        vector<pair<pair<int, int>, int>> circ(n);\n        vector<vector<int>> g(n + 4);\n\n        int i = 0, j = i, Wrong = 0;\n        while (i < n) {\n            circ[i] = {{c[i][0], c[i][1]}, c[i][2]};\n            i++;\n        }\n\n        while (j < n) {\n            if (circ[j].first.first <= circ[j].second) {\n                g[n].push_back(j);\n                g[j].push_back(n);\n            }\n            if (X - circ[j].first.first <= circ[j].second) {\n                g[n + 2].push_back(j);\n                g[j].push_back(n + 2);\n            }\n            if (circ[j].first.second <= circ[j].second) {\n                g[n + 1].push_back(j);\n                g[j].push_back(n + 1);\n            }\n            if (Y - circ[j].first.second <= circ[j].second) {\n                g[n + 3].push_back(j);\n                g[j].push_back(n + 3);\n            }\n\n            int k = j + 1;\n            while (k < n) {\n                double dist =\n                    sqrt(find(circ, j, k));\n                int rSum = circ[j].second + circ[k].second;\n                if (rSum >= dist) {\n                    g[j].push_back(k);\n                    g[k].push_back(j);\n                }\n                k++;\n            }\n            j++;\n        }\n\n        Wrong = max(bfs(g, n + 3, n + 2, n + 1, n + 4), max(Wrong, bfs(g, n, n + 1, n + 2, n + 4)));\n\n\n        return !Wrong;\n    }\n};\n",
    "submit_ts": "1722137121",
    "subm_id": "1335754772"
}