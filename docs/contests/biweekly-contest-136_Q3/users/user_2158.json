{
    "username": "arya994",
    "submission": "class Solution {\npublic:\n    \nint minFlips(vector<vector<int>>& matrix) {\n        int rows = matrix.size();\n        int cols = matrix[0].size();\n        int totalFlips = 0;\n        vector<vector<int>>m(matrix.begin(),matrix.end());\n        sort(m.begin(),m.end());\n        \n        vector<int> adjustments(3, 0);\n\n        // Process the middle row if the number of rows is odd\n        if (rows % 2 == 1) {\n            int left = 0;\n            int right = cols - 1;\n            while (left < right) {\n                int sum = matrix[rows / 2][left] + matrix[rows / 2][right];\n                adjustments[sum] += 1;\n                left += 1;\n                right -= 1;\n            }\n        }\n\n        // Process the middle column if the number of columns is odd\n        if (cols % 2 == 1) {\n            int top = 0;\n            int bottom = rows - 1;\n            while (top < bottom) {\n                int sum = matrix[top][cols / 2] + matrix[bottom][cols / 2];\n                adjustments[sum] += 1;\n                top += 1;\n                bottom -= 1;\n            }\n        }\n\n        // Adjust the total flips based on the shift values\n        if (adjustments[2] % 2 == 1) {\n            if (adjustments[1] > 0) {\n                totalFlips += adjustments[1];\n            } else {\n                totalFlips += 2;\n            }\n        } else {\n            totalFlips += adjustments[1];\n        }\n\n        // Handle the center cell if both dimensions are odd\n        if (rows % 2 == 1 && cols % 2 == 1) {\n            if (matrix[rows / 2][cols / 2] == 1) {\n                totalFlips += 1;\n            }\n        }\n\n        \n\n        // Ensure all quadrants are palindromic\n        for (int r = 0; r < rows / 2; ++r) {\n            for (int c = 0; c < cols / 2; ++c) {\n                int val1 = matrix[r][c];\n                int val2 = matrix[rows - 1 - r][c];\n                int val3 = matrix[r][cols - 1 - c];\n                int val4 = matrix[rows - 1 - r][cols - 1 - c];\n                \n                int totalSum = val1 + val2 + val3 + val4;\n                \n                if (totalSum != 0 && totalSum != 4) {\n                    totalFlips += min(totalSum, 4 - totalSum);\n                }\n            }\n        }\n        \n        return totalFlips;\n    }\n};",
    "submit_ts": "1722699983",
    "subm_id": "1343228160"
}