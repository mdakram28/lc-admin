{
    "username": "PyIsTheBestLang",
    "submission": "from collections import defaultdict\nfrom typing import List\n\n\n# from sortedcontainers import SortedList\n# sys.set_int_max_str_digits(0)  # for big number in leet code\n\n\ndef max(a, b):\n    return a if a > b else b\n\n\ndef min(a, b):\n    return a if a < b else b\n\n\nclass UnionFind:\n    def __init__(self, n: int) -> None:\n        self.root_or_size = [-1] * n\n        self.part = n\n        self.n = n\n        return\n\n    def initialize(self):\n        for i in range(self.n):\n            self.root_or_size[i] = -1\n        self.part = self.n\n        return\n\n    def find(self, x):\n        y = x\n        while self.root_or_size[x] >= 0:\n            # range_merge_to_disjoint to the direct root node after query\n            x = self.root_or_size[x]\n        while y != x:\n            self.root_or_size[y], y = x, self.root_or_size[y]\n        return x\n\n    def union(self, x, y):\n        root_x = self.find(x)\n        root_y = self.find(y)\n        if root_x == root_y:\n            return False\n        if self.root_or_size[root_x] < self.root_or_size[root_y]:\n            root_x, root_y = root_y, root_x\n        self.root_or_size[root_y] += self.root_or_size[root_x]\n        self.root_or_size[root_x] = root_y\n        self.part -= 1\n        return True\n\n    def union_left(self, x, y):\n        root_x = self.find(x)\n        root_y = self.find(y)\n        if root_x == root_y:\n            return False\n        self.root_or_size[root_x] += self.root_or_size[root_y]\n        self.root_or_size[root_y] = root_x\n        self.part -= 1\n        return True\n\n    def union_right(self, x, y):\n        root_x = self.find(x)\n        root_y = self.find(y)\n        if root_x == root_y:\n            return False\n        self.root_or_size[root_y] += self.root_or_size[root_x]\n        self.root_or_size[root_x] = root_y\n        self.part -= 1\n        return True\n\n    def union_max(self, x, y):\n        root_x = self.find(x)\n        root_y = self.find(y)\n        if root_x == root_y:\n            return False\n        if root_x > root_y:\n            root_x, root_y = root_y, root_x\n        self.root_or_size[root_y] += self.root_or_size[root_x]\n        self.root_or_size[root_x] = root_y\n        self.part -= 1\n        return\n\n    def union_min(self, x, y):\n        root_x = self.find(x)\n        root_y = self.find(y)\n        if root_x == root_y:\n            return False\n        if root_x < root_y:\n            root_x, root_y = root_y, root_x\n        self.root_or_size[root_y] += self.root_or_size[root_x]\n        self.root_or_size[root_x] = root_y\n        self.part -= 1\n        return\n\n    def is_connected(self, x, y):\n        return self.find(x) == self.find(y)\n\n    def size(self, x):\n        return -self.root_or_size[self.find(x)]\n\n    def get_root_part(self):\n        # get the nodes list of every root\n        part = defaultdict(list)\n        n = len(self.root_or_size)\n        for i in range(n):\n            part[self.find(i)].append(i)\n        return part\n\n    def get_root_size(self):\n        # get the size of every root\n        size = defaultdict(int)\n        n = len(self.root_or_size)\n        for i in range(n):\n            if self.find(i) == i:\n                size[i] = -self.root_or_size[i]\n        return size\n\n\nclass Solution:\n    def canReachCorner(self, X: int, Y: int, circles: List[List[int]]) -> bool:\n\n        n = len(circles)\n        uf = UnionFind(n)\n        for i in range(n):\n            x1, y1, r1 = circles[i]\n            for j in range(i + 1, n):\n                x2, y2, r2 = circles[j]\n                if (x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2) <= (r1 + r2) * (r1 + r2):\n                    uf.union(i, j)\n            if x1 * x1 + y1 * y1 > r1 * r1 and (x1 - X) * (x1 - X) + (y1 - Y) * (y1 - Y) > r1 * r1:\n                continue\n            return False\n\n        group = uf.get_root_part()\n        for g in group:\n            left = up = down = right = 0\n            for i in group[g]:\n                x1, y1, r1 = circles[i]\n                if x1 <= r1:\n                    dis = (r1 * r1 - x1 * x1) ** 0.5\n                    a, b = y1 - dis, y1 + dis\n                    if b < 0 or a > Y:\n                        continue\n                    left = 1\n\n                if abs(x1 - X) <= r1:\n                    d = abs(x1 - X)\n                    dis = (r1 * r1 - d * d) ** 0.5\n                    a, b = y1 - dis, y1 + dis\n                    if b < 0 or a > Y:\n                        continue\n                    right = 1\n\n                if abs(y1 - Y) <= r1:\n                    d = abs(y1 - Y)\n                    dis = (r1 * r1 - d * d) ** 0.5\n                    a, b = x1 - dis, x1 + dis\n                    if b < 0 or a > X:\n                        continue\n                    up = 1\n\n                if abs(y1) <= r1:\n                    d = abs(y1)\n                    dis = (r1 * r1 - d * d) ** 0.5\n                    a, b = x1 - dis, x1 + dis\n                    if b < 0 or a > X:\n                        continue\n                    down = 1\n\n            if left and down:\n                return False\n            if up and right:\n                return False\n            if left and right:\n                return False\n            if up and down:\n                return False\n        return True\n",
    "submit_ts": "1722138036",
    "subm_id": "1335780435"
}