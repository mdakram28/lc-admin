{
    "username": "Rishi Singh",
    "submission": "class Solution {\npublic:\n    long long maximumValueSum(vector<vector<int>>& board) {\n         int m = board.size();\n        int n = board[0].size();\n        \n        // Store the top 3 maximums for each row and their corresponding column indices\n        vector<vector<pair<int, int>>> top3(m, vector<pair<int, int>>(3, {-INT_MAX, -1}));\n        \n        // Finding the top 3 maximum values in each row\n        for (int i = 0; i < m; ++i) {\n            for (int j = 0; j < n; ++j) {\n                if (board[i][j] > top3[i][0].first) {\n                    top3[i][2] = top3[i][1];\n                    top3[i][1] = top3[i][0];\n                    top3[i][0] = {board[i][j], j};\n                } else if (board[i][j] > top3[i][1].first) {\n                    top3[i][2] = top3[i][1];\n                    top3[i][1] = {board[i][j], j};\n                } else if (board[i][j] > top3[i][2].first) {\n                    top3[i][2] = {board[i][j], j};\n                }\n            }\n        }\n        \n        long long maxSum = LLONG_MIN;\n        \n        // Try every combination of different rows\n        for (int r1 = 0; r1 < m; ++r1) {\n            for (int r2 = r1 + 1; r2 < m; ++r2) {\n                for (int r3 = r2 + 1; r3 < m; ++r3) {\n                    // Check all column combinations without overlapping columns\n                    for (int i = 0; i < 3; ++i) {\n                        for (int j = 0; j < 3; ++j) {\n                            for (int k = 0; k < 3; ++k) {\n                                if (top3[r1][i].second != top3[r2][j].second && \n                                    top3[r1][i].second != top3[r3][k].second && \n                                    top3[r2][j].second != top3[r3][k].second) {\n                                    long long sum = (long long)top3[r1][i].first + (long long)top3[r2][j].first + (long long)top3[r3][k].first;\n                                    maxSum = max(maxSum, sum);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        \n        return maxSum;\n    }\n};\n\n\nauto init = []() { \n    ios::sync_with_stdio(0);\n    cin.tie(0);\n    cout.tie(0);\n    return 'c';\n}();",
    "submit_ts": "1723910363",
    "subm_id": "1359227584"
}