{
    "username": "M_D_L",
    "submission": "class Solution {\n    public int minChanges(int[] nums, int k) {\n        Map<Integer, List<Integer>> m = new HashMap<>();\n        List<Integer> v = new ArrayList<>();\n\n        for (int i = 0; i < nums.length / 2; ++i) {\n            int a = nums[i];\n            int b = nums[nums.length - i - 1];\n            int diff = Math.abs(a - b);\n\n            int X = Math.max(Math.max(a, b), Math.max(k - a, k - b));\n\n            m.computeIfAbsent(diff, x -> new ArrayList<>()).add(X);\n            v.add(X);\n        }\n\n        int ans = nums.length;\n        Collections.sort(v);\n\n        for (Map.Entry<Integer, List<Integer>> entry : m.entrySet()) {\n            int diff = entry.getKey();\n            List<Integer> values = entry.getValue();\n\n            int T = lowerBound(v, diff);\n            T = T * 2 + (nums.length / 2 - T);\n\n            for (int X : values) {\n                if (X < diff) {\n                    T -= 2;\n                } else {\n                    T -= 1;\n                }\n            }\n\n            ans = Math.min(ans, T);\n        }\n\n        return ans;\n    }\n\n    private int lowerBound(List<Integer> list, int value) {\n        int low = 0, high = list.size();\n        while (low < high) {\n            int mid = (low + high) / 2;\n            if (list.get(mid) < value) {\n                low = mid + 1;\n            } else {\n                high = mid;\n            }\n        }\n        return low;\n    }\n}\n",
    "submit_ts": "1721489246",
    "subm_id": "1327447459"
}