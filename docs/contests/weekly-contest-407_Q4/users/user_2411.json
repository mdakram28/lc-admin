{
    "username": "YanJF",
    "submission": "class Solution {\n    public long minimumOperations(int[] nums, int[] target) {\n        int len = nums.length;\n        int[] diff = new int[len];\n        for (int i = 0; i < len; i++) diff[i] = target[i] - nums[i];\n        \n        long res = 0;\n        List<Integer> list = new ArrayList<>();\n        for (int i = 0; i < len; i++) {\n            Integer lastNum = null;\n            \n            if (list.size() != 0) lastNum = list.get(list.size() - 1);\n            \n            if (lastNum != null && lastNum.equals(diff[i])) continue;\n            \n            if (lastNum != null && ((lastNum ^ diff[i]) >>> 31) == 1) {\n                res += helper(list);\n                list = new ArrayList<>();\n            }\n            list.add(diff[i]);\n        }\n        \n        res += helper(list);\n        return res;\n    }\n    private long helper(List<Integer> list2) {\n        List<Integer> list = new ArrayList<>();\n        for (int num: list2) list.add(num > 0 ? num : -num);\n        // System.out.println(list);\n        Integer[] idxes = new Integer[list.size()];\n        for (int i = 0; i < list.size(); i++) idxes[i] = i;\n        Arrays.sort(idxes, (i1, i2) -> list.get(i1) - list.get(i2));\n        long res = 0L;\n        \n        TreeMap<Integer, Integer> map = new TreeMap<>();\n        for (int i = 0; i < idxes.length; i++) {\n            int idx = idxes[i];\n            Map.Entry<Integer, Integer> left = map.lowerEntry(idx);\n            Map.Entry<Integer, Integer> right = map.higherEntry(idx);\n            int leftNum = 0, rightNum = 0;\n            if (left != null) leftNum = left.getValue();\n            if (right != null) rightNum = right.getValue();\n            res +=list.get(idx) - Math.max(leftNum, rightNum);\n            map.put(idx, list.get(idx));\n        }\n        return res;\n    }\n}",
    "submit_ts": "1721533737",
    "subm_id": "1328015556"
}