{
    "username": "beunique_18",
    "submission": "#include <vector>\n#include <algorithm>\nusing namespace std;\n\nclass Solution {\npublic:\n    int numberOfPermutations(int n, vector<vector<int>>& requirements) {\n        const int MOD = 1e9 + 7;\n        vector<vector<int>> dp(n + 1, vector<int>(n * (n - 1) / 2 + 1, 0));\n        dp[0][0] = 1;\n\n        for (int len = 1; len <= n; ++len) {\n            vector<int> prefix(n * (n - 1) / 2 + 2, 0);\n            for (int inv = 0; inv <= len * (len - 1) / 2; ++inv) {\n                prefix[inv + 1] = (prefix[inv] + dp[len - 1][inv]) % MOD;\n            }\n            for (int inv = 0; inv <= len * (len - 1) / 2; ++inv) {\n                if (inv >= len) {\n                    dp[len][inv] = (prefix[inv + 1] - prefix[inv - len + 1] + MOD) % MOD;\n                } else {\n                    dp[len][inv] = prefix[inv + 1];\n                }\n            }\n        }\n\n        vector<int> requiredInversions(n, -1);\n        for (const auto& req : requirements) {\n            requiredInversions[req[0]] = req[1];\n        }\n\n        vector<vector<int>> validDP(n + 1, vector<int>(n * (n - 1) / 2 + 1, 0));\n        validDP[0][0] = 1;\n\n        for (int len = 1; len <= n; ++len) {\n            vector<int> prefix(n * (n - 1) / 2 + 2, 0);\n            for (int inv = 0; inv <= len * (len - 1) / 2; ++inv) {\n                prefix[inv + 1] = (prefix[inv] + validDP[len - 1][inv]) % MOD;\n            }\n            for (int inv = 0; inv <= len * (len - 1) / 2; ++inv) {\n                if (requiredInversions[len - 1] != -1 && requiredInversions[len - 1] != inv) {\n                    continue;\n                }\n                if (inv >= len) {\n                    validDP[len][inv] = (prefix[inv + 1] - prefix[inv - len + 1] + MOD) % MOD;\n                } else {\n                    validDP[len][inv] = prefix[inv + 1];\n                }\n            }\n        }\n\n        int result = 0;\n        for (int inv = 0; inv <= n * (n - 1) / 2; ++inv) {\n            result = (result + validDP[n][inv]) % MOD;\n        }\n\n        return result;\n    }\n};\n",
    "submit_ts": 1719070538.0
}