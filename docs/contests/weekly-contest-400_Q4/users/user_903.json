{
    "username": "mkprajapati1614",
    "submission": "class SegTree{\npublic:\n    vector<int> t;\n    int n;\n    \n    SegTree(vector<int>& arr){\n        n = arr.size();\n        t.resize(4*n);\n        build(arr, 0, 0, n-1);\n    }\n    \n    void build(vector<int>& arr, int node, int s, int e){\n        if( s == e ){\n            t[node] = arr[s];\n        }else{\n            int mid = (s + e)/2;\n            build(arr, 2*node+1, s, mid);\n            build(arr, 2*node+2, mid+1, e);\n            \n            t[node] = t[2*node+1] & t[2*node+2];\n        }\n    }\n    \n    int query(int left, int right){\n        return query(0, 0, n-1, left, right);\n    }\n    \n    int query(int node, int start, int end, int left, int right){\n        if(right < start || end < left ){\n            return INT_MAX;\n        }\n        \n        if( left <= start && end <= right ){\n            return t[node];\n        }\n        \n        int mid = (start + end)/2;\n        int a = query(2*node+1, start, mid, left, right);\n        int b = query(2*node+2, mid+1, end, left, right);\n        \n        return a & b;\n    }\n};\n\nclass Solution {\npublic:\n    int minimumDifference(vector<int>& nums, int k) {\n        int n = nums.size();\n        \n        // create a segmment tree object\n        SegTree st(nums);\n        \n        int ans = INT_MAX;\n        for(int i = 0; i<n ; i++){\n            int left = i - 1;\n            int right = n - 1;\n            int mid;\n            \n            while( right - left > 1 ){\n                mid = ( left + right )/2;\n                if( st.query(i, mid) >= k ){\n                    left = mid;\n                }else{\n                    right = mid;\n                }\n            }\n            \n            if( left != (i-1) ){\n                ans = min(ans, abs(st.query(i, left) - k) );\n            }\n            ans = min(ans, abs( k - st.query(i, right)) );\n        }\n        \n        return ans;\n    }\n};",
    "submit_ts": 1717300274.0
}