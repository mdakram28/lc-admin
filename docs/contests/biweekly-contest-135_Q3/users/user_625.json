{
    "username": "AndyLead",
    "submission": "class Solution {\npublic:\n    int minChanges(vector<int>& nums, int k) {\n        vector<pair<int, int>> pairs;\n        for(int i = 0, j = nums.size() - 1; i < j; i++, j--) {\n            if(nums[i] > nums[j]) swap(nums[i], nums[j]);\n            pairs.push_back({nums[i], nums[j]});\n        }\n\n        map<int, int> counts;\n        for(auto [small, big] : pairs) counts[big - small]++;\n\n        vector<int> smaller(pairs.size());\n        for(int i = 0; i < pairs.size(); i++) smaller[i] = i;\n        ranges::sort(smaller, [&pairs](int i, int j) { return pairs[i].first < pairs[j].first; });\n\n        vector<int> bigger(pairs.size());\n        for(int i = 0; i < pairs.size(); i++) bigger[i] = i;\n        ranges::sort(bigger, [&pairs](int i, int j) { return pairs[i].second < pairs[j].second; });\n        \n        set<int> one_move;\n        int result = INT_MAX;\n        int smaller_i = 0, bigger_i = bigger.size() - 1;\n        for(int x = k, left = 0, right = k; x >= 0; x--, left++, right--) {\n            while(smaller_i < smaller.size() and pairs[smaller[smaller_i]].first <= left) one_move.insert(smaller[smaller_i++]);\n            while(bigger_i >= 0 and pairs[bigger[bigger_i]].second >= right) one_move.insert(bigger[bigger_i--]);\n            int twice = pairs.size() - one_move.size();\n            result = min(result, 2 * twice + (int)one_move.size() - counts[x]);\n        }\n        return result;\n    }\n};",
    "submit_ts": "1721488491",
    "subm_id": "1327423958"
}