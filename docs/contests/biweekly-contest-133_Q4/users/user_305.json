{
    "username": "fakrrid",
    "submission": "#include<bits/stdc++.h>\n#include <cassert>\n#include <cmath>\n#include <cstdint>\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <algorithm>\n#include <bitset>\n#include <complex>\n#include <deque>\n#include <functional>\n#include <iostream>\n#include <map>\n#include <numeric>\n#include <queue>\n#include <set>\n#include <sstream>\n#include <string>\n#include <stdlib.h>\n#include <unordered_map>\n#include <unordered_set>\n#include <utility>\n#include <vector>\n#include<ext/pb_ds/tree_policy.hpp>\n#include<ext/pb_ds/assoc_container.hpp>\nusing namespace  __gnu_pbds;\nusing namespace std;\n\n#define ll long long int  \n#define For(n) for(ll i=0;i<n;i++)\n#define all(x) x.begin(),x.end()\n#define allr(x) x.rbegin(),x.rend()\n\ntypedef vector<int> VI;  \ntypedef vector<ll> VL; \ntypedef long double lld;\ntypedef unsigned long long ull;\n\nconst int MOD = 1e9 + 7;\n\n \n//--------------------------------- Trace Functions --------------------------------------\n \nvoid _print(ll t) {cerr << t;}\nvoid _print(int t) {cerr << t;}\nvoid _print(string t) {cerr << t;}\nvoid _print(char t) {cerr << t;}\nvoid _print(lld t) {cerr << t;}\nvoid _print(double t) {cerr << t;}\nvoid _print(ull t) {cerr << t;}\nvoid DBG() {\n\tcerr << \"]\" << endl;\n}\n\ntemplate<typename T1,typename T2>istream& operator>>(istream& in,pair<T1,T2> &a){in>>a.x>>a.y;return in;}\ntemplate<typename T1,typename T2>ostream& operator<<(ostream& out,pair<T1,T2> a){out<<a.x<<\" \"<<a.y;return out;}\ntemplate<typename T,typename T1>T maxs(T &a,T1 b){if(b>a)a=b;return a;}\ntemplate<typename T,typename T1>T mins(T &a,T1 b){if(b<a)a=b;return a;}\ntemplate<class H, class... T> void DBG(H h, T... t) {\n\tcerr << to_string(h);\n\tif (sizeof...(t))\n\t\tcerr << \", \";\n\tDBG(t...);\n}\n\n#define DEBUG(x...) { cout << \"(\" << #x << \")\" << \" = ( \"; Print(x); }\ntemplate <typename T1> void Print(T1 t1) { cout << t1 << \" )\" << endl; }\ntemplate <typename T1, typename... T2>\nvoid Print(T1 t1, T2... t2) { cout << t1 << \" , \"; Print(t2...); }\n\n// ----------------------------- Debuging -----------------------------------------------\n\nvoid __print(int x) {cerr << x;}\nvoid __print(long x) {cerr << x;}\nvoid __print(long long x) {cerr << x;}\nvoid __print(unsigned x) {cerr << x;}\nvoid __print(unsigned long x) {cerr << x;}\nvoid __print(unsigned long long x) {cerr << x;}\nvoid __print(float x) {cerr << x;}\nvoid __print(double x) {cerr << x;}\nvoid __print(long double x) {cerr << x;}\nvoid __print(char x) {cerr << '\\'' << x << '\\'';}\nvoid __print(const char *x) {cerr << '\\\"' << x << '\\\"';}\nvoid __print(const string &x) {cerr << '\\\"' << x << '\\\"';}\nvoid __print(bool x) {cerr << (x ? \"true\" : \"false\");}\n\ntemplate <class T, class V> void _print(pair <T, V> p);\ntemplate <class T> void _print(vector <T> v);\ntemplate <class T> void _print(set <T> v);\ntemplate <class T, class V> void _print(map <T, V> v);\ntemplate <class T> void _print(multiset <T> v);\ntemplate <class T, class V> void _print(pair <T, V> p) {cerr << \"{\"; _print(p.ff); cerr << \",\"; _print(p.ss); cerr << \"}\";}\ntemplate <class T> void _print(vector <T> v) {cerr << \"[ \"; for (T i : v) {_print(i); cerr << \" \";} cerr << \"]\";}\ntemplate <class T> void _print(set <T> v) {cerr << \"[ \"; for (T i : v) {_print(i); cerr << \" \";} cerr << \"]\";}\ntemplate <class T> void _print(multiset <T> v) {cerr << \"[ \"; for (T i : v) {_print(i); cerr << \" \";} cerr << \"]\";}\ntemplate <class T, class V> void _print(map <T, V> v) {cerr << \"[ \"; for (auto i : v) {_print(i); cerr << \" \";} cerr << \"]\";}\n\ntemplate<typename T, typename V>\nvoid __print(const pair<T, V> &x) {cerr << '{'; __print(x.first); cerr << ','; __print(x.second); cerr << '}';}\ntemplate<typename T>\nvoid __print(const T &x) {int f = 0; cerr << '{'; for (auto &i: x) cerr << (f++ ? \",\" : \"\"), __print(i); cerr << \"}\";}\nvoid _print() {cerr << \"]\\n\";}\ntemplate <typename T, typename... V>\nvoid _print(T t, V... v) {__print(t); if (sizeof...(v)) cerr << \", \"; _print(v...);}\n#ifndef ONLINE_JUDGE\n#define debug(x...) cerr << \"[\" << #x << \"] = [\"; _print(x) cerr << endl;\n#else\n#define debug(x...)\n#endif\n\nstatic const int MAX_INVERSIONS = 400;\n\n\nclass Solution {\npublic:\n    int numberOfPermutations(int n, vector<vector<int>>& requirements) {\n         ios_base::sync_with_stdio(false);\n         cin.tie(NULL);\n         cout.tie(NULL);\n        unordered_map<int, int> endIdxToInversionCnt;\n        for (auto& req : requirements) {\n            endIdxToInversionCnt[req[0] + 1] = req[1]; \n        }\n\n        vector<vector<long long>> dp(n + 1, vector<long long>(MAX_INVERSIONS + 1, 0));\n        dp[0][0] = 1;\n\n        int length = 1;\n        while (length <= n) {\n            int currentInversions = 0;\n            while (currentInversions <= MAX_INVERSIONS) {\n                int newPosition = 0;\n                while (newPosition < length) {\n                    int previousInversions = currentInversions - newPosition;\n                    if (previousInversions >= 0) {\n                        dp[length][currentInversions] = (dp[length][currentInversions] + dp[length - 1][previousInversions]) % MOD;\n                    }\n                    ++newPosition;\n                }\n                ++currentInversions;\n            }\n\n            if (endIdxToInversionCnt.count(length) > 0) {\n                int requiredInversions = endIdxToInversionCnt[length];\n                int currentInversions = 0;\n                while (currentInversions <= MAX_INVERSIONS) {\n                    if (currentInversions != requiredInversions) {\n                        dp[length][currentInversions] = 0;\n                    }\n                    ++currentInversions;\n                }\n            }\n\n            ++length;\n        }\n        DBG(length);\n        // debug(length);\n\n        long long result = 0;\n        int currentInversions = 0;\n        while (currentInversions <= MAX_INVERSIONS) {\n            result = (result + dp[n][currentInversions]) % MOD;\n            ++currentInversions;\n        }\n\n        return static_cast<int>(result);\n    }\n    private:\n    int countInversions(int number, int length) {\n        int inversions = 0;\n        for (int i = 0; i < length; ++i) {\n            for (int j = i + 1; j < length; ++j) {\n                if ((number >> i) % 2 > (number >> j) % 2) {\n                    inversions++;\n                }\n            }\n        }\n        return inversions;\n    }\n\n};",
    "submit_ts": 1719070116.0
}