{
    "username": "jjzzzmd",
    "submission": "# class Solution:\n#     def minimumCost(self, target: str, words: List[str], costs: List[int]) -> int:\n#         self.res=inf\n#         def bt(s,cost):\n#             if s==\"\":\n#                 self.res=min(self.res,cost)\n#                 return\n#             if cost>=self.res:\n#                 return\n#             for i,word in enumerate(words):\n#                 if len(word)>len(s):\n#                     continue\n#                 if s.startswith(word):\n#                     bt(s[len(word):],cost+costs[i])\n#         bt(target,0)\n#         if self.res==inf:\n#             return -1\n#         return self.res\n\n# class Solution:\n#     def minimumCost(self, target: str, words: List[str], costs: List[int]) -> int:\n#         lenmap=defaultdict(list)\n#         for i,word in enumerate(words):\n#             lenmap[len(word)].append(i)\n#         lenlist=list(sorted(lenmap.keys()))\n#         self.res=inf\n#         def bt(s,cost):\n#             if s==\"\":\n#                 self.res=min(self.res,cost)\n#                 return\n#             if cost>=self.res:\n#                 return\n#             idx=bisect_right(lenlist,len(s))\n#             for i in range(idx):\n#                 for j in lenmap[lenlist[i]]:\n#                     if s.startswith(words[j]):\n#                         bt(s[len(words[j]):],cost+costs[j])\n#         bt(target,0)\n#         if self.res==inf:\n#             return -1\n#         return self.res\n\n# class Solution:\n#     def minimumCost(self, target: str, words: List[str], costs: List[int]) -> int:\n#         lenmap=defaultdict(list)\n#         for i,word in enumerate(words):\n#             lenmap[len(word)].append(i)\n#         lenlist=list(sorted(lenmap.keys()))\n#         self.res=inf\n#         def bt(start,cost):\n#             if start==len(target):\n#                 self.res=min(self.res,cost)\n#                 return\n#             if cost>=self.res:\n#                 return\n#             idx=bisect_right(lenlist,len(target)-start)\n#             for i in range(idx):\n#                 for j in lenmap[lenlist[i]]:\n#                     if target.startswith(words[j],start,len(target)):\n#                         bt(start+len(words[j]),cost+costs[j])\n#         bt(0,0)\n#         if self.res==inf:\n#             return -1\n#         return self.res\n\nclass Node:\n    def __init__(self):\n        self.eow=False\n        self.i=-1\n        self.c={}\n\n\nclass Solution:\n    def minimumCost(self, target: str, words: List[str], costs: List[int]) -> int:\n        trie=Node()\n        for i,word in enumerate(words):\n            head=trie\n            for char in word:\n                if char not in head.c:\n                    head.c[char]=Node()\n                head=head.c[char]\n            head.eow=True\n            if head.i==-1:\n                head.i=i\n            else:\n                if costs[i]<costs[head.i]:\n                    head.i=i\n\n        self.res=inf\n        def bt(start,cost):\n            if start==len(target):\n                self.res=min(self.res,cost)\n                return\n            head=trie\n            for i in range(start,len(target)):\n                char=target[i]\n                if char not in head.c:\n                    return\n                head=head.c[char]\n                if head.eow and cost+costs[head.i]<self.res:\n                    bt(start+len(words[head.i]),cost+costs[head.i])\n\n        bt(0,0)\n        if self.res==inf:\n            return -1\n        return self.res\n\nclass Solution:\n    def minimumCost(self, target: str, words: List[str], costs: List[int]) -> int:\n        trie=Node()\n        for i,word in enumerate(words):\n            head=trie\n            for char in word:\n                if char not in head.c:\n                    head.c[char]=Node()\n                head=head.c[char]\n            head.eow=True\n            if head.i==-1:\n                head.i=i\n            else:\n                if costs[i]<costs[head.i]:\n                    head.i=i\n\n        self.res=inf\n        @cache\n        def bt(start):\n            if start==len(target):\n                return 0\n            head=trie\n            res=inf\n            for i in range(start,len(target)):\n                char=target[i]\n                if char not in head.c:\n                    break\n                head=head.c[char]\n                if head.eow:\n                    res=min(res,bt(start+len(words[head.i]))+costs[head.i])\n            return res\n\n        self.res=bt(0)\n        if self.res==inf:\n            return -1\n        return self.res\n",
    "submit_ts": "1720324731",
    "subm_id": "1312406663"
}