{
    "username": "deepanju014",
    "submission": "class Solution {\npublic:\n    class SegmentTree {\n    private:\n        vector<int> st;\n        vector<int> nums;\n        int n;\n\n        void build(int node, int start, int end) {\n            if (start == end) {\n                st[node] = isPeak(start);\n            } else {\n                int mid = (start + end) / 2;\n                build(2 * node + 1, start, mid);\n                build(2 * node + 2, mid + 1, end);\n                st[node] = st[2 * node + 1] + st[2 * node + 2];\n            }\n        }\n\n        void update(int node, int start, int end, int idx) {\n            if (start == end) {\n                st[node] = isPeak(start);\n            } else {\n                int mid = (start + end) / 2;\n                if (start <= idx && idx <= mid) {\n                    update(2 * node + 1, start, mid, idx);\n                } else {\n                    update(2 * node + 2, mid + 1, end, idx);\n                }\n                st[node] = st[2 * node + 1] + st[2 * node + 2];\n            }\n        }\n\n        int query(int node, int start, int end, int L, int R) {\n            if (R < start || end < L) {\n                return 0;\n            }\n            if (L <= start && end <= R) {\n                return st[node];\n            }\n            int mid = (start + end) / 2;\n            int leftQuery = query(2 * node + 1, start, mid, L, R);\n            int rightQuery = query(2 * node + 2, mid + 1, end, L, R);\n            return leftQuery + rightQuery;\n        }\n\n        bool isPeak(int i) {\n            if (i == 0 || i == n - 1) return false;\n            return nums[i] > nums[i - 1] && nums[i] > nums[i + 1];\n        }\n\n    public:\n        SegmentTree(vector<int>& arr) {\n            nums = arr;\n            n = nums.size();\n            st.resize(4 * n);\n            build(0, 0, n - 1);\n        }\n\n        void update(int idx, int val) {\n            nums[idx] = val;\n            if (idx > 0) update(0, 0, n - 1, idx - 1);\n            update(0, 0, n - 1, idx);\n            if (idx < n - 1) update(0, 0, n - 1, idx + 1);\n        }\n\n        int query(int L, int R) {\n            if (L == R || L + 1 == R) return 0;\n            return query(0, 0, n - 1, L + 1, R - 1);\n        }\n    };\n\n    vector<int> countOfPeaks(vector<int>& nums, vector<vector<int>>& queries) {\n        SegmentTree segTree(nums);\n        vector<int> result;\n\n        for (const auto& q : queries) {\n            if (q[0] == 1) {\n                result.push_back(segTree.query(q[1], q[2]));\n            } else {\n                segTree.update(q[1], q[2]);\n            }\n        }\n\n        return result;\n    }\n};\n",
    "submit_ts": 1718507318.0
}