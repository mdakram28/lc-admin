{
    "username": "792649497ye",
    "submission": "class Solution {\n    public long minimumCost(int m, int n, int[] horizontalCut, int[] verticalCut) {\n         PriorityQueue<int[]>pq = new PriorityQueue<>((a, b)->b[0]-a[0]);\n\n        for(int t: horizontalCut){\n            pq.add(new int[]{t, 0});\n        }\n\n        for(int t: verticalCut){\n            pq.add(new int[]{t, 1});\n        }\n        int h = 0;\n        int v = 0;\n        long res = 0;\n        while(pq.size()!=0){\n            int[] cur = pq.poll();\n            int d = cur[1];\n            int val = cur[0];\n            if(d==0) {\n                res += (long)val * (v+1);\n                h++;\n            }else{\n                res += (long)val * (h+1);\n                v++;\n            }\n        }\n\n        return res;\n    }\n}",
    "submit_ts": "1720925748",
    "subm_id": "1320264921"
}