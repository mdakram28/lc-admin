{
    "username": "darshhhhhh",
    "submission": "class Solution {\npublic:\n    long long minimumCost(int m, int n, vector<int>& horizontalCuts, vector<int>& verticalCuts) {\n        vector<pair<int, char>> allCuts;\n    for (int i = 0; i < horizontalCuts.size(); ++i) {\n        allCuts.push_back({horizontalCuts[i], 'H'});\n    }\n    for (int i = 0; i < verticalCuts.size(); ++i) {\n        allCuts.push_back({verticalCuts[i], 'V'});\n    }\n\n\n    sort(allCuts.begin(), allCuts.end());\n    \n\nlong long ans=1e18;\n    int horizontalPieces = 1;\n    int verticalPieces = 1;\n\n    long long totalCost = 0;\n\n\n    for (auto& cut : allCuts) {\n        if (cut.second == 'H') {\n\n            totalCost += 1ll*cut.first * verticalPieces;\n            ++horizontalPieces;\n        } else {\n\n            totalCost += 1ll*cut.first * horizontalPieces;\n            ++verticalPieces;\n        }\n    }\n    reverse(allCuts.begin(),allCuts.end());\n    long long cost=0;\n    int h=1;\n    int v=1;\n    for (auto& cut : allCuts) {\n        if (cut.second == 'H') {\n\n            cost += 1ll*cut.first * v;\n            ++h;\n        } else {\n\n            cost += 1ll*cut.first * h;\n           v++;\n        }\n    }\n    if(cost<totalCost)return cost;\n    else return totalCost;\n    \n    }\n};",
    "submit_ts": "1720925810",
    "subm_id": "1320266909"
}