{
    "username": "singhadi_29",
    "submission": "class Solution {\npublic:\n    const int MOD = 1e9 + 7;\n    \n    int countOfPairs(vector<int>& nums) {\n        int n = nums.size();\n        int maxVal = *max_element(nums.begin(), nums.end());\n        \n        // dp[i][j] will store the number of valid pairs for the first i+1 elements where arr1[i] = j.\n        vector<vector<int>> dp(n, vector<int>(maxVal + 1, 0));\n        \n        // Initialize dp for the first element.\n        for (int j = 0; j <= nums[0]; ++j)\n            dp[0][j] = 1; // There's one way to make arr1[0] = j and arr2[0] = nums[0] - j.\n        \n        // Fill the dp array.\n        for (int i = 1; i < n; ++i) {\n            for (int j = 0; j <= nums[i]; ++j) {\n                int arr2_val = nums[i] - j;\n                \n                for (int k = 0; k <= j; ++k) {  // k <= j to maintain non-decreasing order of arr1.\n                    if (arr2_val <= nums[i-1] - k) // arr2_val must be >= arr2[i-1] to ensure non-increasing order of arr2.\n                        dp[i][j] = (dp[i][j] + dp[i-1][k]) % MOD;\n                }\n            }\n        }\n        \n        // Sum up the results for the last element.\n        int result = 0;\n\n        for (int j = 0; j <= nums[n-1]; ++j)\n            result = (result + dp[n-1][j]) % MOD;\n        \n        return result;\n    }\n};",
    "submit_ts": "1723346305",
    "subm_id": "1351574627"
}