{
    "username": "blueyefish",
    "submission": "class TrieNode {\n    public:\n        int cost;\n        TrieNode* next[26];\n        TrieNode() {\n            cost = -1;\n            for(int i = 0; i < 26; ++i) next[i] = nullptr;\n        }\n};\n\nclass Trie {\n    private:\n        TrieNode* root;\n    public:\n        Trie() {\n            root = new TrieNode();\n        }\n\n        void insert(string word, int cost) {\n            TrieNode *p = root;\n            for(auto c: word) {\n                int u = c - 'a';\n                if(!p->next[u]) p->next[u] = new TrieNode();\n                p = p->next[u];\n            }\n            if(p->cost == -1) p->cost = cost;\n            else p->cost = min(p->cost, cost);\n        }\n\n        void match(string& target, int i, vector<int>& f) {\n            TrieNode *p = root;\n            int start = i;\n            for(; i < target.size(); ++i) {\n                int u = target[i] - 'a';\n                if(!p->next[u]) return;\n                p = p->next[u];\n                if(p->cost != -1) {\n                    f[i + 1] = min(f[i + 1], f[start] + p->cost);\n                }\n            }\n        }\n};\n\n\n\n\nclass Solution {\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        Trie *trie = new Trie();\n        const int m = target.size(), n = words.size();\n        for(int i = 0; i < n; ++i) {\n            trie->insert(words[i], costs[i]);\n        }\n        vector<int> f(m + 1, INT_MAX);\n        f[0] = 0;\n        for(int i = 0; i < m; ++i) {\n            if(f[i] != INT_MAX) trie->match(target, i, f);\n        }\n        if(f[m] == INT_MAX) return -1;\n        return f[m];\n    }\n};",
    "submit_ts": "1720323337",
    "subm_id": "1312373122"
}