{
    "username": "brijeshsiwach93",
    "submission": "#include<bits/stdc++.h>\n//#include <sys/resource.h>\nusing namespace std;\n\ntypedef long long ll;\ntypedef long double ld;\ntypedef vector<int> vi;\ntypedef vector<ll> vl;\ntypedef pair<ll,ll> pl;\ntypedef vector<pl> vpl;\n \n#define all(x) x.begin(), x.end()\n#define nl cout<<\"\\n\"\n#define ar  array\n#define PRECISION 9\n#define fast_IO ios_base::sync_with_stdio(false),cin.tie(NULL),cout.tie(NULL)\n#define clock() cerr << \"Time elapsed: \" << 1.0 * clock() / CLOCKS_PER_SEC << \" s.\\n\"\n\n#ifdef LOCAL\n#include \"../Library/debug.h\"\n#else \n#define dbg(...) \"UNEMPLOYED\"\n#endif\n\n//#define STACK_INCREASE\n\n\ntemplate<class T> \nclass SegmentTree{\npublic:\n    int N; // this should be (b.size()-1)\n    vector<T> t;\n \n    SegmentTree(int n, vector<int> b):N(n),t(4*n+1){ \n        build(1, 1, N, b);\n    }\n     \n     SegmentTree(int n):N(n), t(4*n+2){}\n\n    T merge(T a, T b){\n        return max(a,b);\n    }\n    \n \n    void build(int i, int l, int r, vector<int> &b){\n        if(l > r) return;\n        if(l == r){\n            t[i] = b[l];\n            return;\n        }\n        int mid = (l+r) >> 1;\n        build(2*i, l, mid, b);\n        build(2*i+1, mid+1, r, b);\n        t[i] = merge(t[2*i],t[2*i + 1]);\n    }\n \n    void print(){\n        for(int i = 0; i < 4*N; i++){\n            cout << t[i] << \" \";\n        }\n    }\n \n \n    void update(int i, int l, int r, int pos, T val){\n        if(l > pos || r < pos) return;\n        if(l == pos && r == pos){\n            t[i] = val;\n            return;\n        }\n        int mid = (l+r)>>1;\n        update(2*i, l, mid, pos, val);\n        update(2*i +1, mid+1, r, pos, val);\n        t[i] = merge(t[2*i], t[2*i+1]);\n    }\n \n    T query(int i, int l, int r, int ql, int qr){\n        if(l > qr || r < ql) return 0;\n        if(l >=ql && r <= qr) return t[i];\n        int mid = (l+r)>>1;\n        return merge(query(2*i, l, mid, ql, qr), query(2*i+1, mid+1, r, ql, qr));\n    }\n \n    void update(int pos, T val){\n        update(1, 1, N, pos, val);\n    }\n \n    T query(int ql, int qr){\n        return query(1, 1, N, ql, qr);\n    }\n \n};\n// check for the update, do you want t[u] += val or t[u] = val;\n// also note that the starting index of the segment tree is 1.\n\n\nclass Solution {\npublic:\n\n    int maximumLength(vector<int> a, int k) {\n        int n=a.size();\n        vector<int>f(n);\n        map<int,int>mp;\n        for(int i=n-1;i>=0;i--){\n            if(mp.find(a[i])==mp.end()) {\n                mp[a[i]]=i;\n                f[i]=1;\n            }\n            else {\n                f[i]=f[mp[a[i]]]+1;\n                mp[a[i]]=i;\n            }\n        }\n        vector<SegmentTree<int>>dp(k+1,SegmentTree<int> {n});\n        map<int,int>last;\n        for(int i=0;i<n;i++){\n            for(int j=k;j>=0;j--){\n                if(j==0) {\n                    if(last.find(a[i])==last.end()) {\n                        dp[j].update(i+1,1);\n                    }\n                    else{\n                        int q=dp[j].query(last[a[i]]+1,last[a[i]]+1);\n                        dp[j].update(i+1,q+1);\n                    }\n                }\n                else{\n                    if(last.find(a[i])!=last.end()) {\n                        int q=dp[j].query(last[a[i]]+1,last[a[i]]+1);\n                        // if(i==2){\n                        //     dbg(q);\n                        // }\n                        if(q>0){\n                            dp[j].update(i+1,q+1);\n                        }\n                    }\n                    int q=dp[j-1].query(1,i+1);\n                    int mx=dp[j].query(i+1,i+1);\n                    dp[j].update(i+1,max(q+1,mx));\n                    \n                }\n            }\n            last[a[i]]=i;\n        }\n        int ans=0;\n        for(int i=0;i<n;i++){\n            for(int j=0;j<=k;j++){\n                dbg(i,j,dp[j].query(i+1,i+1));\n                ans=max(ans,dp[j].query(i+1,i+1));\n            }\n        }\n        return ans;\n    }\n};\n\n\n// int main(){\n//     if (0) cout<<fixed<<setprecision(PRECISION);\n//     fast_IO;\n//     #ifdef STACK_INCREASE\n//     rlimit rlim;\n//     if (getrlimit(RLIMIT_STACK, &rlim)) return 1;\n//     rlim.rlim_cur = 1024*1024*1024;\n//     if (setrlimit(RLIMIT_STACK, &rlim)) return 2;\n//     #endif\n//     int T=1;\n//     // cin>>T;\n//     while(T--){\n//         // solve();\n//         Solution sol;\n//         cout<<sol.maximumLength({29,30,30},1)<<\"\\n\";\n//         // cout<<sol.maximumLength({1,2,1,1,3},2)<<\"\\n\";\n//         // cout<<sol.maximumLength({1,2,3,4,5,1},0)<<\"\\n\";\n//         clock();\n//     }\n//     return 0;\n// }\n",
    "submit_ts": 1717860808.0
}