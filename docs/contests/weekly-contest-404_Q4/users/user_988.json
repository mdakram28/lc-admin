{
    "username": "Shubham_Tiwari55",
    "submission": "class Solution {\npublic:\n   \n    pair<int, int> bfs(int start, vector<vector<int>>& adj) {\n        int n = adj.size();\n        vector<int> dist(n, -1);\n        queue<int> q;\n        q.push(start);\n        dist[start] = 0;\n\n        int far = start;\n        int maxDist = 0;\n\n        while (!q.empty()) {\n            int node = q.front();\n            q.pop();\n            \n            for (int neigh : adj[node]) {\n                if (dist[neigh] == -1) {\n                    dist[neigh] = dist[node] + 1;\n                    q.push(neigh);\n                    \n                    if (dist[neigh] > maxDist) {\n                        maxDist = dist[neigh];\n                        far = neigh;\n                    }\n                }\n            }\n        }\n        \n        return {far, maxDist};\n    }\n\n    int findDiameter(vector<vector<int>>& adj) {\n        pair<int, int> p1 = bfs(0, adj);\n        pair<int, int> p2 = bfs(p1.first, adj);\n        return p2.second;\n    }\n\n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n        int n = edges1.size();\n        int m = edges2.size();\n        vector<vector<int>> gr1(n+1);\n        vector<vector<int>> gr2(m+1);\n\n        for (auto edge : edges1) {\n            gr1[edge[0]].push_back(edge[1]);\n            gr1[edge[1]].push_back(edge[0]);\n        }\n\n        for (auto edge : edges2) {\n            gr2[edge[0]].push_back(edge[1]);\n            gr2[edge[1]].push_back(edge[0]);\n        }\n\n        int dia1 = findDiameter(gr1);\n        int dia2 = findDiameter(gr2);\n\n        int minD = max({dia1, dia2, (dia1 + 1) / 2 + 1 + (dia2 + 1) / 2});\n\n        return minD;\n    }\n};\n\n\n",
    "submit_ts": "1719716367",
    "subm_id": "1304362469"
}