{
    "username": "yuanwang2011",
    "submission": "typedef long long ll;\ntypedef vector<pair<int, int>> vpii;\ntypedef vector<pair<int, ll>> vpil;\ntypedef vector<pair<ll, ll>> vpll;\ntypedef vector<int> vi;\ntypedef vector<ll> vll;\ntypedef vector<bool> vb;\ntypedef vector<vector<int>> vvi;\ntypedef vector<vector<ll>> vvll;\ntypedef pair<int, int> pii;\ntypedef pair<int, ll> pil;\ntypedef pair<ll, ll> pll;\n\ntemplate<class T>\nvoid print_set(set<T> &num_set, string name = \"\") {\n    if (name != \"\") cout << name << endl;\n    for (auto it = num_set.begin(); it != num_set.end(); ++it) cout << *it << \" \";\n    cout << endl;\n}\n\n\ntemplate<class T>\nT op_max(T a, T b) {\n    return max(a, b);\n}\n\ntemplate<class T, T (*op)(T, T)>\nstruct SegTree {\n    vector<T> t; int n;\n    T base_val; // e.g. INT_MIM for max, 0 for sum\n    SegTree(int _n, T _val, T _base_val): n(_n), base_val(_base_val) {\n        t.resize(n * 2);\n        fill(t.begin(), t.end(), _val);\n    }\n    void update(int i, int x) {\n        for (t[i += n] = x; i > 1; i >>= 1) {\n            t[i >> 1] = op(t[i], t[i ^ 1]);\n        }\n    }\n    T query(int l, int r) { // [l, r)\n        T res = base_val;\n        for (l += n, r += n; l < r; l >>= 1, r >>= 1) {\n            if (l & 1) res = op(res, t[l++]);\n            if (r & 1) res = op(res, t[--r]);\n        }\n        return res;\n    }\n};\n\nclass Solution {\npublic:\n    vector<bool> getResults(vector<vector<int>>& queries) {\n        set<int> pos_set = {0};\n        SegTree<int, op_max> seg_tree(1e5 + 10, 0, 0);\n        vb ans;\n        for (auto query : queries) {\n            if (query[0] == 1) {\n                int x = query[1];\n                auto it_post = pos_set.lower_bound(x), it_pre = prev(it_post);\n                int x_pre = *it_pre;\n                if (it_post != pos_set.end()) {\n                    int x_post = *it_post;\n                    // cout << \"update tree: \" << x_pre << \" \" << 0 << endl;\n                    // cout << \"update tree: \" << x << \" \" << x_post - x << endl;\n                    seg_tree.update(x_pre, 0);\n                    seg_tree.update(x, x_post - x);\n                }\n                // cout << \"update tree: \" << x_pre << \" \" << x - x_pre << endl;;\n                seg_tree.update(x_pre, x - x_pre);\n                pos_set.insert(x);\n            }\n            else {\n                int x = query[1], sz = query[2], x_pre = *prev(pos_set.lower_bound(x));\n                int max_len = (x_pre == 0 ? 0 : seg_tree.query(0, x_pre - 1));\n                // cout << \"max len pre: \" << max_len << \" \" << x - x_pre << endl;\n                max_len = max(max_len, x - x_pre);\n                ans.push_back(max_len >= sz);\n            }\n            // print_set(pos_set, \"pos_set\");\n            // cout << endl;\n        }\n        return ans;\n    }\n};",
    "submit_ts": 1716649454.0
}