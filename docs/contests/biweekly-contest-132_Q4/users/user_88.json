{
    "username": "vipbaswan",
    "submission": "class Solution {\npublic:\n    int maximumLength(vector<int>& nums, int k) {\n        int n = nums.size();\n        \n        vector<vector<int>> dp(n, vector<int>(k+1, 0));\n        vector<int> suff(k+1, 1);\n        map<pair<int, int>, int> mp;\n        \n        for(int j=0; j<=k; j++) {\n            dp[n-1][j] = 1;\n            mp[{j, nums[n-1]}] = 1;\n        }\n        \n        for(int i=0; i<n; i++) {\n            dp[i][0] = 1;\n        }\n        \n        for(int i=n-2; i>=0; i--) {\n            // iterate for each possible \"k\"\n            for(int p=0; p<=k; p++) {\n                if(p) {\n                    dp[i][p] = max(dp[i][p], 1 + suff[p-1]);\n                }\n                \n                auto itr = mp.find({p, nums[i]});\n                if(itr != mp.end()) {\n                    dp[i][p] = max(dp[i][p], 1 + itr->second);\n                }\n            }\n            \n            for(int p=0; p<=k; p++) {\n                suff[p] = max(suff[p], dp[i][p]);\n                \n                auto itr = mp.find({p, nums[i]});\n                if(itr == mp.end()) {\n                    mp[{p, nums[i]}] = dp[i][p];\n                } else {\n                    itr->second = max(itr->second, dp[i][p]);\n                }\n            }\n        }\n        \n        int ans = 1;\n        \n        for(int i=0; i<n; i++) {\n            ans = max(ans, dp[i][k]);\n        }\n        \n        return ans;\n    }\n};",
    "submit_ts": 1717859844.0
}