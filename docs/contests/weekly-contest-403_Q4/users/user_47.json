{
    "username": "tiger2005",
    "submission": "class Solution {\npublic:\n    int minimumSum(vector<vector<int>>& grid) {\n        // vector<tuple<int, int, int, int>> vp1, vp2, vp3, vp4, vp5;\n        int n = grid.size(), m = grid[0].size();\n\n        // auto gen0 = [&] (int x) {\n        //     vector<tuple<int, int, int, int>> res;\n        //     for (int i = 0; i < x; i ++)\n        //         for (int j = i; j < x; j ++)\n        //             for (int k = 0; k < x; k ++)\n        //                 for (int l = k; l < x; l ++)\n        //                     res.emplace_back(i, j, k, l);\n        //     return res;\n        // };\n\n        // auto gen = [&] (int x) {\n        //     vector<tuple<int, int, int, int>> res;\n        //     for (int i = 0; i < x; i ++)\n        //         for (int j = i; j < x; j ++)\n        //             for (int k = j + 1; k < x; k ++)\n        //                 for (int l = k; l < x; l ++)\n        //                     res.emplace_back(i, j, k, l),\n        //                     res.emplace_back(k, l, i, j);\n        //     return res;\n        // };\n\n        // auto gen2 = [&] (int x) {\n        //     vector<tuple<int, int, int, int>> res;\n        //     for (int i = 0; i < x; i ++)\n        //         for (int j = i; j < x; j ++)\n        //             for (int k = i; k <= j; k ++)\n        //                 for (int l = k; l < x; l ++)\n        //                     res.emplace_back(i, j, k, l),\n        //                     res.emplace_back(k, l, i, j);\n        //     return res;\n        // };\n        // vp1 = gen(n);\n        // vp2 = gen(m);\n        // vp3 = gen2(n);\n        // vp4 = gen2(m);\n        // vp5 = gen0(m);\n        // printf(\"%llu %llu\\n\", gen0(30).size(), gen(30).size());\n\n        // auto check = [&] (int i, int j, int a, int b, int c, int d) {\n        //     return a <= i && i <= c && b <= j && j <= d;\n        // };\n\n        // int ans = 100000;\n        // for (auto [a1, c1, a2, c2]: vp1)\n        //     for (auto [b1, d1, b2, d2]: vp5) {\n        //         int a = n + 1, b = m + 1, c = -1, d = -1;\n        //         for (int i = 0; i < n; i ++)\n        //             for (int j = 0; j < m; j ++) if (grid[i][j]) {\n        //                 if (check(i, j, a1, b1, c1, d1))\n        //                     continue;\n        //                 if (check(i, j, a2, b2, c2, d2))\n        //                     continue;\n        //                 a = min(a, i); c = max(c, i);\n        //                 b = min(b, j); d = max(d, j);\n        //             }\n        //         if (c != -1)\n        //             ans = min(ans, (c1 - a1 + 1) * (d1 - b1 + 1) + (c2 - a2 + 1) * (d2 - b2 + 1) + (c - a + 1) * (d - b + 1));\n        //     }\n        // for (auto [a1, c1, a2, c2]: vp3)\n        //     for (auto [b1, d1, b2, d2]: vp4) {\n        //         int a = n + 1, b = m + 1, c = -1, d = -1;\n        //         for (int i = 0; i < n; i ++)\n        //             for (int j = 0; j < m; j ++) if (grid[i][j]) {\n        //                 if (check(i, j, a1, b1, c1, d1))\n        //                     continue;\n        //                 if (check(i, j, a2, b2, c2, d2))\n        //                     continue;\n        //                 a = min(a, i); c = max(c, i);\n        //                 b = min(b, j); d = max(d, j);\n        //             }\n        //         if (c != -1)\n        //             ans = min(ans, (c1 - a1 + 1) * (d1 - b1 + 1) + (c2 - a2 + 1) * (d2 - b2 + 1) + (c - a + 1) * (d - b + 1));\n        //     }\n        \n        // return ans;\n        map<tuple<int, int, int, int, int>, int> mp;\n        auto calc = [&] (auto self, int a, int b, int c, int d, int k) -> int {\n            if (mp[{a, b, c, d, k}] != 0)\n                return mp[{a, b, c, d, k}];\n            if (k == 1) {\n                int a1 = n + 1, b1 = m + 1, c1 = -1, d1 = -1;\n                for (int i = a; i <= c; i ++)\n                    for (int j = b; j <= d; j ++) if (grid[i][j]) {\n                        a1 = min(a1, i); c1 = max(c1, i);\n                        b1 = min(b1, j); d1 = max(d1, j);\n                    }\n                if (c1 != -1)\n                    return mp[{a, b, c, d, k}] = (c1 - a1 + 1) * (d1 - b1 + 1);\n                return mp[{a, b, c, d, k}] = 1000000;\n            }\n            int cur = 1000000;\n            for (int i = a; i < c; i ++) {\n                if (k == 2)\n                    cur = min(cur, self(self, a, b, i, d, 1) + self(self, i + 1, b, c, d, 1));\n                else\n                    cur = min(cur, self(self, a, b, i, d, 1) + self(self, i + 1, b, c, d, 2)),\n                    cur = min(cur, self(self, a, b, i, d, 2) + self(self, i + 1, b, c, d, 1));\n            }\n            for (int i = b; i < d; i ++) {\n                if (k == 2)\n                    cur = min(cur, self(self, a, b, c, i, 1) + self(self, a, i + 1, c, d, 1));\n                else\n                    cur = min(cur, self(self, a, b, c, i, 1) + self(self, a, i + 1, c, d, 2)),\n                    cur = min(cur, self(self, a, b, c, i, 2) + self(self, a, i + 1, c, d, 1));\n            }\n            return mp[{a, b, c, d, k}] = cur;\n        };\n        return calc(calc, 0, 0, n - 1, m - 1, 3);\n    }\n};",
    "submit_ts": 1719111833.0
}