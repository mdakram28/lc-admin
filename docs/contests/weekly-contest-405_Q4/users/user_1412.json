{
    "username": "luckyryn30",
    "submission": "class Solution {\npublic:\n struct TrieNode {\n    map<char, TrieNode*> children;\n    int cost;\n    TrieNode() : cost(INT_MAX) {}\n};\n\nclass Trie {\npublic:\n    Trie() {\n        root = new TrieNode();\n    }\n    \n    void insert(const string& word, int cost) {\n        TrieNode* node = root;\n        for (char c : word) {\n            if (node->children.find(c) == node->children.end()) {\n                node->children[c] = new TrieNode();\n            }\n            node = node->children[c];\n        }\n        node->cost = min(node->cost, cost);\n    }\n    \n    vector<pair<int, int>> get_costs(const string& suffix) {\n        vector<pair<int, int>> results;\n        TrieNode* node = root;\n        int length = 0;\n        for (char c : suffix) {\n            if (node->children.find(c) == node->children.end()) {\n                break;\n            }\n            node = node->children[c];\n            length++;\n            if (node->cost != INT_MAX) {\n                results.emplace_back(node->cost, length);\n            }\n        }\n        return results;\n    }\n\n    TrieNode* getRoot() {\n        return root;\n    }\n    \nprivate:\n    TrieNode* root;\n};\n\nint minimumCost(const string& target, const vector<string>& words, const vector<int>& costs) {\n    Trie trie;\n    for (size_t i = 0; i < words.size(); ++i) {\n        trie.insert(words[i], costs[i]);\n    }\n    \n    vector<int> dp(target.length() + 1, INT_MAX);\n    dp[0] = 0;\n\n    for (size_t i = 0; i < target.length(); ++i) {\n        if (dp[i] == INT_MAX) continue;\n\n        TrieNode* node = trie.getRoot();\n        for (size_t j = i; j < target.length(); ++j) {\n            char c = target[j];\n            if (node->children.find(c) == node->children.end()) {\n                break;\n            }\n            node = node->children[c];\n            if (node->cost != INT_MAX) {\n                dp[j + 1] = min(dp[j + 1], dp[i] + node->cost);\n            }\n        }\n    }\n    \n    return dp[target.length()] == INT_MAX ? -1 : dp[target.length()];\n}\n};",
    "submit_ts": "1720323234",
    "subm_id": "1312370606"
}