{
    "username": "donglin0202",
    "submission": "class Solution {\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int n = target.size();\n        vector<int> dp(n + 1, INT_MAX);\n        dp[0] = 0;\n        unordered_map<string, int> wordCostMap;\n        for (int i = 0; i < words.size(); ++i) \n            if (wordCostMap.find(words[i]) == wordCostMap.end() || costs[i] < wordCostMap[words[i]])\n                wordCostMap[words[i]] = costs[i];\n        for (int j = 1; j <= n; ++j) {\n            for (auto& [word, wordCost] : wordCostMap) {\n                int len = word.size();\n                if (j >= len && target.compare(j - len, len, word) == 0)\n                    if (dp[j - len] != INT_MAX)\n                        dp[j] = min(dp[j], dp[j - len] + wordCost);\n            }\n        }\n        return dp[n] == INT_MAX ? -1 : dp[n];\n    }\n};\nauto init = [](){\n    ios::sync_with_stdio(0), cin.tie(0), cout.tie(0);\n    return 'c';\n}();",
    "submit_ts": "1720321502",
    "subm_id": "1312324561"
}