{
    "username": "sorcerer007",
    "submission": "#include <iostream>\n#include <vector>\n#include <queue>\n#include <algorithm>\n#include <utility>\n\nusing namespace std;\n\nclass Solution {\npublic:\n    int bfs(int start, vector<vector<int>>& adj, int& farthestNode) {\n        int n = adj.size();\n        vector<int> dist(n, -1);\n        queue<int> q;\n        q.push(start);\n        dist[start] = 0;\n        int maxDist = 0;\n        farthestNode = start;\n        \n        while (!q.empty()) {\n            int node = q.front();\n            q.pop();\n            \n            for (int neighbor : adj[node]) {\n                if (dist[neighbor] == -1) {\n                    dist[neighbor] = dist[node] + 1;\n                    q.push(neighbor);\n                    if (dist[neighbor] > maxDist) {\n                        maxDist = dist[neighbor];\n                        farthestNode = neighbor;\n                    }\n                }\n            }\n        }\n        return maxDist;\n    }\n\n    int treeDiameter(vector<vector<int>>& edges) {\n        if (edges.empty()) return 0;\n        \n        int n = edges.size() + 1;\n        vector<vector<int>> adj(n);\n        \n        for (const auto& edge : edges) {\n            adj[edge[0]].push_back(edge[1]);\n            adj[edge[1]].push_back(edge[0]);\n        }\n        \n        int farthestNode;\n        bfs(0, adj, farthestNode);\n        int diameter = bfs(farthestNode, adj, farthestNode);\n        \n        return diameter;\n    }\n\n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n        int d1 = treeDiameter(edges1);\n        int d2 = treeDiameter(edges2);\n        \n        return max({d1, d2, (d1 + 1) / 2 + (d2 + 1) / 2 + 1});\n    }\n};\n\n\n",
    "submit_ts": "1719717447",
    "subm_id": "1304391785"
}