{
    "username": "hikoship",
    "submission": "class Solution:\n    def minimumDistance(self, points: List[List[int]]) -> int:\n        n = len(points)\n        trans = [[0, 0] for _ in range(n)]\n        for i, p in enumerate(points):\n            trans[i][0] = p[0] + p[1]\n            trans[i][1] = p[0] - p[1]\n            \n        transformedP1 = [x + y for x, y in points]\n        transformedP2 = [x - y for x, y in points]\n\n        maxP1, maxP2 = float('-inf'), float('-inf')\n        secondMaxP1, secondMaxP2 = float('-inf'), float('-inf')\n        minP1, minP2 = float('inf'), float('inf')\n        secondMinP1, secondMinP2 = float('inf'), float('inf')\n        imaxP1, imaxP2, isecondMaxP1, isecondMaxP2, iminP1, iminP2, isecondMinP1, isecondMinP2 = 0,0,0,0,0,0,0,0\n        \n        for i, t in enumerate(trans):\n            x = t[0]\n            if x >= maxP1:\n                secondMaxP1 = maxP1 \n                isecondMaxP1 = imaxP1\n                maxP1 = x\n                imaxP1 = i\n            elif x > secondMaxP1:\n                secondMaxP1 = x\n                isecondMaxP1 = i\n            if x <= minP1:\n                secondMinP1 = minP1\n                isecondMinP1 = iminP1\n                minP1 = x\n                iminP1 = i\n            elif x < secondMinP1:\n                secondMinP1 = x\n                isecondMinP1 = i\n                \n            x = t[1]\n            if x >= maxP2:\n                secondMaxP2 = maxP2\n                maxP2 = x\n                isecondMaxP2 = imaxP2\n                imaxP2 = i\n            elif x > secondMaxP2:\n                secondMaxP2 = x\n                isecondMaxP2 = i\n            if x <= minP2:\n                secondMinP2 = minP2\n                minP2 = x\n                isecondMinP2 = iminP2\n                iminP2 = i\n            elif x < secondMinP2:\n                secondMinP2 = x\n                isecondMinP2 = i\n        candidatesToRemove = [imaxP1, imaxP2, isecondMaxP1, isecondMaxP2, iminP1, iminP2, isecondMinP1, isecondMinP2]\n        res = float('inf')\n        def getMax(tmp, i):\n            res = float('-inf')\n            for j in range(len(tmp)):\n                res = max(res, tmp[j][i])\n            return res\n        def getMin(tmp, i):\n            res = float('inf')\n            for j in range(len(tmp)):\n                res = min(res, tmp[j][i])\n            return res\n        for i in candidatesToRemove:\n            tmp = trans[:i] + trans[i + 1:]\n            res = min(res, max(getMax(tmp, 0) - getMin(tmp, 0), getMax(tmp, 1) - getMin(tmp, 1)))\n        return res\n                \n            \n            \n        \n            \n\n\n\n            \n        "
}