{
    "username": "Ashwina Ashish",
    "submission": "#include <vector>\n#include <algorithm>\n#include <set>\n#include <climits>\n\nusing namespace std;\n\nclass Solution {\npublic:\n    long long maximumValueSum(vector<vector<int>>& board) {\n        int rows = board.size();\n        int cols = board[0].size();\n        \n        // Store the best 3 values and their corresponding columns for each row\n        vector<vector<pair<int, int>>> rowMax(rows);\n        \n        for (int i = 0; i < rows; ++i) {\n            vector<pair<int, int>> temp;\n            for (int j = 0; j < cols; ++j) {\n                temp.push_back({board[i][j], j});\n            }\n            // Sort to get the top 3 values\n            sort(temp.rbegin(), temp.rend());\n            rowMax[i].assign(temp.begin(), temp.begin() + min(3, cols));\n        }\n        \n        long long maxSum = LLONG_MIN;\n        \n        // Try all combinations of three distinct rows\n        for (int r1 = 0; r1 < rows - 2; ++r1) {\n            for (int r2 = r1 + 1; r2 < rows - 1; ++r2) {\n                for (int r3 = r2 + 1; r3 < rows; ++r3) {\n                    // Try all combinations of the top values for these rows, ensuring distinct columns\n                    for (const auto& p1 : rowMax[r1]) {\n                        for (const auto& p2 : rowMax[r2]) {\n                            if (p2.second == p1.second) continue;\n                            for (const auto& p3 : rowMax[r3]) {\n                                if (p3.second == p1.second || p3.second == p2.second) continue;\n                                long long currentSum = (long long)p1.first + p2.first + p3.first;\n                                maxSum = max(maxSum, currentSum);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        \n        return maxSum;\n    }\n};\n",
    "submit_ts": "1723909534",
    "subm_id": "1359196213"
}