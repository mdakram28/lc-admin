{
    "username": "olnyfcxwps",
    "submission": "#include <iostream>\n#include <vector>\n#include <string>\n#include <map>\n#include <set>\nusing namespace std;\n\nint parent[100000];\nint c;\nint mx[100000];\n\nclass Solution {\n    int n;\n    void init() {\n        for (int i = 0; i < n - 1; i++) {\n            parent[i] = i;\n            mx[i] = i;\n        }\n        c = n - 1;\n    }\n\n    int query(int x) {\n        while (parent[x] != x) {\n            x = parent[x] = parent[parent[x]];\n        }\n        return x;\n    }\n\n    void merge(int x, int y) {\n        int rx = query(x);\n        int ry = query(y);\n        if (rx == ry) {\n            return;\n        }\n        parent[ry] = rx;\n        mx[rx] = mx[rx] > mx[ry] ? mx[rx] : mx[ry];\n        c -= 1;\n    }\npublic:\n    vector<int> shortestDistanceAfterQueries(int n_, vector<vector<int>>& queries) {\n        n = n_;\n        init();\n        \n        vector<int> ans;\n        for (int i = 0; i < queries.size(); i++) {\n            int x = queries[i][0];\n            int y = queries[i][1];\n            if (x >= y) {\n                ans.push_back(c);\n                continue;\n            }\n            int rx = query(x);\n            y -= 1;\n            int ry = query(y);\n            if (rx == ry) {\n                ans.push_back(c);\n                continue;\n            }\n            for (int j = mx[rx] + 1; j <= y;) {\n                int rj = query(j);\n                merge(rx, rj);\n                j = mx[rx] + 1;\n            }\n            ans.push_back(c);\n        }\n\n        return ans;\n    }\n};\n",
    "submit_ts": "1722741749",
    "subm_id": "1343752569"
}