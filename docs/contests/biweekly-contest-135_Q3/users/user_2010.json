{
    "username": "Jp_2018-A",
    "submission": "class Solution {\npublic:\n    int solve(vector<int>&nums,int k){\n    unordered_map<int, vector<int>> diffToMaxValues;\n    vector<int> maxValues;\n    \n    int n = nums.size();\n    int halfSize = n / 2;\n    \n  \n    for (int i = 0; i < halfSize; i++) {\n        int diff = abs(nums[i] - nums[n - i - 1]);\n        int maxValue = max({nums[i], nums[n - i - 1], k - nums[i], k - nums[n - i - 1]});\n        \n        diffToMaxValues[diff].push_back(maxValue);\n        maxValues.push_back(maxValue);\n    }\n    \n    int minMoves = n; \n    sort(maxValues.begin(), maxValues.end());\n    \n   \n    for (const auto& entry : diffToMaxValues) {\n        int diff = entry.first;\n        int totalMoves = lower_bound(maxValues.begin(), maxValues.end(), diff) - maxValues.begin();\n        \n        totalMoves = totalMoves * 2 + (halfSize - totalMoves);\n        \n        for (const int& maxValue : entry.second) {\n            if (maxValue < diff) {\n                totalMoves -= 2;\n            } else {\n                totalMoves -= 1;\n            }\n        }\n        \n        minMoves = min(minMoves, totalMoves);\n    }\n    \n    return minMoves;\n    \n    }\n    int minChanges(vector<int>& nums, int k) {\n        //  int n=nums.size();\n        // unordered_map<int,int>m;\n        // for(int i=0;i<n/2;i++){\n        //     m[abs(nums[i]-nums[n-i-1])]++;\n        // }\n        \n        return solve(nums,k);\n        \n    }\n};",
    "submit_ts": "1721489742",
    "subm_id": "1327462375"
}