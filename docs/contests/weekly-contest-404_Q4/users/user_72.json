{
    "username": "mhasan01",
    "submission": "class Solution {\npublic:\n    int minimumDiameterAfterMerge(vector<vector<int>>& e1, vector<vector<int>>& e2) {\n        auto getDist = [&](int n, vector<vector<int>>& adj) -> vector<int> {\n            vector<int> dist(n);\n            vector<int> fir(n), sec(n);\n            \n            function<void(int, int)> dfs = [&](int u, int p) {\n                for (int v : adj[u]) {\n                    if (v == p) {\n                        continue;\n                    }\n                    dfs(v, u);\n                    if (fir[v] + 1 > fir[u]) {\n                        sec[u] = fir[u];\n                        fir[u] = fir[v] + 1;\n                    } else if (fir[v] + 1 > sec[u]) {\n                        sec[u] = fir[v] + 1;\n                    }\n                }\n            };\n            \n            function<void(int, int, int)> reroot = [&](int u, int p, int d) {\n                dist[u] = max(d, fir[u]);\n                for (int v : adj[u]) {\n                    if (v == p) {\n                        continue;\n                    }\n                    if (fir[v] + 1 == fir[u]) {\n                        reroot(v, u, max(d, sec[u]) + 1);\n                    } else {\n                        reroot(v, u, dist[u] + 1);\n                    }\n                }\n            };\n            \n            dfs(0, 0);\n            reroot(0, 0, 0);\n            return dist;\n        };\n        \n        auto build = [&](int n, vector<vector<int>>& e) -> vector<vector<int>> {\n            vector<vector<int>> adj(n);\n            for (auto& ee : e) {\n                int u = ee[0];\n                int v = ee[1];\n                adj[u].emplace_back(v);\n                adj[v].emplace_back(u);\n            }\n            return adj;\n        };\n        \n        int n = (int) e1.size() + 1;\n        int m = (int) e2.size() + 1;\n        vector<vector<int>> adj1 = build(n, e1);\n        vector<vector<int>> adj2 = build(m, e2);\n        vector<int> d1 = getDist(n, adj1);\n        vector<int> d2 = getDist(m, adj2);\n        int diam1 = *max_element(d1.begin(), d1.end());\n        int diam2 = *max_element(d2.begin(), d2.end());\n        int diam3 = *min_element(d1.begin(), d1.end()) + 1 + *min_element(d2.begin(), d2.end());\n        return max({diam1, diam2, diam3});\n    }\n};",
    "submit_ts": 1719716617.0
}