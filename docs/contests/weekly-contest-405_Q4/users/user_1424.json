{
    "username": "Pradeep_Agrawal",
    "submission": "class Node {\npublic:\n    unordered_map<char, Node*> m;\n    int cost;\n\n    Node() : cost(INT_MAX) {}\n};\n\nclass Trie {\npublic:\n    Node* root;\n\n    Trie() {\n        root = new Node();\n    }\n\n    void insert(string& word, int cost) {\n        Node* node = root;\n        for (char c : word) {\n            if (!node->m.count(c)) {\n                node->m[c] = new Node();\n            }\n            node = node->m[c];\n        }\n        node->cost = min(node->cost, cost);\n    }\n};\nclass Solution {\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        Trie t;\n        int n = target.size();\n\n        int i=0;\n        while (i < words.size()) {\n            t.insert(words[i], costs[i]);\n            i++;\n        }\n\n        vector<int> dp(n + 1, INT_MAX);\n        dp[0] = 0; \n\n\n        for (int i = 0; i < n; i++) {\n            if (dp[i] == INT_MAX) continue; \n            Node* node = t.root;\n            int j=i;\n            while (j < n) {\n                char c=target[j];\n                if (!node->m.count(c)) break;\n                node = node->m[c];\n\n                if (node->cost != INT_MAX) {\n                    dp[j + 1] = min(dp[j + 1], dp[i] + node->cost);\n                }\n                j++;\n            }\n        }\n        if(dp[n]==INT_MAX) return -1;\n        return  dp[n];\n    }\n};",
    "submit_ts": "1720324462",
    "subm_id": "1312400085"
}