{
    "username": "rishisrivastava78",
    "submission": "class Solution {\npublic:\n    // This function calculates the minimum number of operations needed to \n    // transform the `nums` array into the `target` array.\n    long long minimumOperations(vector<int>& nums, vector<int>& target) {\n        int n = nums.size();\n        // Create a vector to store the difference between corresponding elements in `nums` and `target`.\n        vector<int> difference(n);\n\n        // Calculate the difference between elements at each index in both arrays.\n        for (int i = 0; i < n; i++) difference[i] = (nums[i] - target[i]);\n\n        long long totOps = 0;\n        int currSubArrayDiff = 0;   // variable to track cummulative difference\n\n        for (int i = 0; i < n; i++) {\n            if (i == 0 || \n                (difference[i - 1] > 0 && difference[i] > 0) || \n                (difference[i - 1] < 0 && difference[i] < 0)) {\n                int addtlOps = abs(difference[i]) - abs(currSubArrayDiff);\n                    // If additional operations are needed, update the total count.\n                    if (addtlOps > 0) totOps += addtlOps;\n            } \n            else totOps += abs(difference[i]);\n            \n            currSubArrayDiff = difference[i];\n        }\n\n        // Return the total number of operations required.\n        return totOps;\n    }\n};",
    "submit_ts": "1721534360",
    "subm_id": "1328029224"
}