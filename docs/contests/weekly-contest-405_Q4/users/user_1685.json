{
    "username": "sreecharan_12082003",
    "submission": "#include <vector>\n#include <unordered_map>\n#include <string>\n#include <limits>\n#include <algorithm>\n\nusing namespace std;\n\nclass Solution {\npublic:\n    struct TrieNode {\n        unordered_map<char, TrieNode*> child;\n        vector<pair<int, int>> we;  // Vector of pairs to store index and cost\n    };\n    \n    class Trie {\n    public:\n        TrieNode* root;\n        \n        Trie() {\n            root = new TrieNode();\n        }\n        \n        void insert(const string& word, int index, int cost) {\n            TrieNode* node = root;\n            for (char c : word) {\n                if (!node->child.count(c)) {\n                    node->child[c] = new TrieNode();\n                }\n                node = node->child[c];\n            }\n            node->we.push_back({index, cost});\n        }\n    };\n    \n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int n1 = target.size();\n        vector<int> dp(n1 + 1, numeric_limits<int>::max());\n        dp[0] = 0;\n        Trie trie;\n        \n        for (int i = 0; i < words.size(); ++i) {\n            trie.insert(words[i], i, costs[i]);\n        }\n        \n        for (int i = 0; i < n1; ++i) {\n            if (dp[i] == numeric_limits<int>::max()) {\n                continue;\n            }\n            TrieNode* node = trie.root;\n            for (int j = i; j < n1; ++j) {\n                char c = target[j];\n                if (!node->child.count(c)) {\n                    break;\n                }\n                node = node->child[c];\n                for (auto& p : node->we) {\n                    int wei = p.first;\n                    int wec = p.second;\n                    int l1 = words[wei].size();\n                    if (i + l1 <= n1) {\n                        dp[i + l1] = min(dp[i + l1], dp[i] + wec);\n                    }\n                }\n            }\n        }\n        \n        return dp[n1] == numeric_limits<int>::max() ? -1 : dp[n1];\n    }\n};\n",
    "submit_ts": "1720324785",
    "subm_id": "1312408255"
}