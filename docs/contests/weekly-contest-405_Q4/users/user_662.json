{
    "username": "g8shen",
    "submission": "class TrieNode:\n    def __init__(self):\n        self.children = {}\n        self.endOfWord = False\n        self.cost = float('inf')\n\nclass Solution:\n    def trie(self, words, costs):\n        root = TrieNode()\n        for i, word in enumerate(words):\n            curr = root\n            for char in word:\n                if char not in curr.children:\n                    curr.children[char] = TrieNode()\n                curr = curr.children[char]\n            curr.endOfWord = True\n            curr.cost = min(curr.cost, costs[i])\n        return root\n\n    def minimumCost(self, target: str, words: List[str], costs: List[int]) -> int:\n        trie_root = self.trie(words, costs)\n        n = len(target)\n        dp = [float('inf')] * (n + 1)\n        dp[0] = 0\n\n        for j in range(n):\n            if dp[j] < float('inf'):\n                node = trie_root\n                i = j\n                while i < n and target[i] in node.children:\n                    node = node.children[target[i]]\n                    i += 1\n                    if node.endOfWord:\n                        new_cost = dp[j] + node.cost\n                        if new_cost < dp[i]:\n                            dp[i] = new_cost\n\n        if dp[-1] == float('inf'):\n            return -1\n        else:\n            return dp[-1]\n\n",
    "submit_ts": "1720322032",
    "subm_id": "1312338852"
}