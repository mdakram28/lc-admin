{
    "username": "Shruthik_Ravula",
    "submission": "class Solution:\n    def countSubarrays(self, arr: List[int], k: int) -> int:\n\n        def count_bitwise_and_zero(nums):\n            def get_set_bit_indices(x):\n                pow_2 = 1\n                exponent = 0\n                set_bits = []\n\n                while pow_2 <= x:\n                    if pow_2 & x != 0:\n                        set_bits.append(exponent)\n                    exponent += 1\n                    pow_2 *= 2\n\n                return set_bits\n\n            def is_bitwise_and_zero(window_length, bit_counts):\n                return all(value < window_length for value in bit_counts.values())\n\n            n = len(nums)\n            total_subarray_count = n * (n + 1) // 2\n            nonzero_subarray_count = 0\n            window_bit_counts = Counter()\n            left_idx = 0\n\n            for right_idx, right_element in enumerate(nums):\n                if right_element == 0:\n                    window_bit_counts.clear()\n                    left_idx = right_idx + 1\n                    continue\n\n                window_bit_counts += Counter(get_set_bit_indices(right_element))\n\n                while (left_idx < right_idx\n                    and is_bitwise_and_zero(right_idx - left_idx + 1, window_bit_counts)):\n                    window_bit_counts -= Counter(get_set_bit_indices(nums[left_idx]))\n                    left_idx += 1\n\n                nonzero_subarray_count += (right_idx - left_idx + 1)\n\n            return total_subarray_count - nonzero_subarray_count\n\n\n\n        n = len(arr)\n        ans = 0\n        nd = 2 ** 31 - 1\n        i = 0\n        while i < n:\n            if arr[i] & k == k:\n                nums = []\n                while i < n and arr[i] & k == k:\n                    nums.append(arr[i] - k)\n                    i += 1\n                ans += count_bitwise_and_zero(nums)\n            else:\n                i += 1\n        return ans\n        ",
    "submit_ts": "1720279436",
    "subm_id": "1311751122"
}