{
    "username": "nancy_2003",
    "submission": "class Solution {\npublic:\n    long long minimumCost(int m, int n, vector<int>& horizontalCuts, vector<int>& verticalCuts) {\n        sort(horizontalCuts.begin(), horizontalCuts.end(), greater<int>());\n        sort(verticalCuts.begin(), verticalCuts.end(), greater<int>());\n\n    long long total = 0;\n    int horizontalPieces = 1;\n    int verticalPieces = 1;\n\n    int hIndex = 0;\n    int vIndex = 0;\n\n    while (hIndex < horizontalCuts.size() && vIndex < verticalCuts.size()) {\n        if (horizontalCuts[hIndex] >= verticalCuts[vIndex]) {\n            total += static_cast<long long>(horizontalCuts[hIndex]) * verticalPieces;\n            hIndex++;\n            horizontalPieces++;\n        } else {\n            total += static_cast<long long>(verticalCuts[vIndex]) * horizontalPieces;\n            vIndex++;\n            verticalPieces++;\n        }\n    }\n\n    while (hIndex < horizontalCuts.size()) {\n        total += static_cast<long long>(horizontalCuts[hIndex]) * verticalPieces;\n        hIndex++;\n        horizontalPieces++;\n    }\n    while (vIndex < verticalCuts.size()) {\n        total += static_cast<long long>(verticalCuts[vIndex]) * horizontalPieces;\n        vIndex++;\n        verticalPieces++;\n    }\n\n    return total;\n    }\n};",
    "submit_ts": "1720925532",
    "subm_id": "1320257826"
}