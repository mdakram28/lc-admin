{
    "username": "kush_1719",
    "submission": "/**\n * @param {number[][]} edges1\n * @param {number[][]} edges2\n * @return {number}\n */\nvar minimumDiameterAfterMerge = function(edges1, edges2) {\n    const buildGraph = (edges, size) => {\n        const graph = Array.from({ length: size }, () => []);\n        for (const edge of edges) {\n            graph[edge[0]].push(edge[1]);\n            graph[edge[1]].push(edge[0]);\n        }\n        return graph;\n    };\n\n    const size1 = edges1.length + 1;\n    const size2 = edges2.length + 1;\n\n    const graph1 = buildGraph(edges1, size1);\n    const graph2 = buildGraph(edges2, size2);\n\n    const dfs = (graph, start) => {\n        const n = graph.length;\n        const distance = Array(n).fill(-1);\n        let furthestNode = start;\n\n        const dfsVisit = (node, dist) => {\n            distance[node] = dist;\n            if (dist > distance[furthestNode]) {\n                furthestNode = node;\n            }\n            for (const neighbor of graph[node]) {\n                if (distance[neighbor] === -1) {\n                    dfsVisit(neighbor, dist + 1);\n                }\n            }\n        };\n\n        dfsVisit(start, 0);\n        return { distance, furthestNode };\n    };\n\n    const getDiameter = (graph) => {\n        let { furthestNode } = dfs(graph, 0);\n        let { distance, furthestNode: newFurthestNode } = dfs(graph, furthestNode);\n        return { diameter: distance[newFurthestNode], node: newFurthestNode };\n    };\n\n    const { diameter: diameter1, node: node1 } = getDiameter(graph1);\n    const { diameter: diameter2, node: node2 } = getDiameter(graph2);\n\n    let minDiameter = Math.max(diameter1, diameter2);\n    const half1 = Math.floor((diameter1 + 1) / 2);\n    const half2 = Math.floor((diameter2 + 1) / 2);\n\n    minDiameter = Math.max(minDiameter, half1 + half2 + 1);\n\n    return minDiameter;\n};\n",
    "submit_ts": "1719719616",
    "subm_id": "1304446325"
}