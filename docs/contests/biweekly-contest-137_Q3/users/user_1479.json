{
    "username": "\u7af9\u4e0b\u4e3a\u751f",
    "submission": "class Solution {\n    using LL = long long;\npublic:\n    long long maximumValueSum(vector<vector<int>>& board) {\n        int n = board.size(), m = board[0].size();\n        vector<tuple<int,int,int>> v(n);\n        for(int i = 0; i < n; i++){\n            int mx = -1, mx2 = -1, mx3 = -1;\n            for(int j = 0; j < m; j++){\n                if(mx == -1 || board[i][j] >= board[i][mx]) mx3 = mx2, mx2 = mx, mx = j;\n                else if(mx2 == -1 || board[i][j] >= board[i][mx2]) mx3 = mx2, mx2 = j;\n                else if(mx3 == -1 || board[i][j] >= board[i][mx3]) mx3 = j;\n            }\n            v[i] = {mx, mx2, mx3};\n            // cout << board[i][mx] << \" \" << board[i][mx2] << \" \" << board[i][mx3] << endl;\n        }\n        auto check=[&](int j, int mask){\n            return mask % 201 != j && mask/201%201 != j;\n        };\n        unordered_map<LL,LL> mp;\n        function<LL(int,int,int)>dfs = [&](int i, int k, int mask)->LL{\n            if(k == 0) return 0;\n            if(i < 0) return LLONG_MIN/2;\n            LL x = (long long) mask << 10 | i << 3 | k;\n            if(mp.count(x)) return mp[x]; \n            LL res = dfs(i - 1, k, mask);\n            auto [j1,j2,j3] = v[i];\n            if(check(j1 + 1, mask)) res = max(res, dfs(i - 1, k - 1, mask*(k==3?1:201)+(j1+1))+board[i][j1]);\n            if(check(j2 + 1, mask)) res = max(res, dfs(i - 1, k - 1, mask*(k==3?1:201)+(j2+1)) + board[i][j2]);\n            if(check(j3 + 1, mask)) res = max(res, dfs(i - 1, k - 1, mask*(k==3?1:201)+(j3+1)) + board[i][j3]);\n            return mp[x] = res;\n        };\n        return dfs(n-1, 3, 0);\n    }\n};",
    "submit_ts": "1723909902",
    "subm_id": "556338522"
}