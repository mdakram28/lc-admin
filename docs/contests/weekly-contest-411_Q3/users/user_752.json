{
    "username": "Ivan Vasilenko",
    "submission": "class Solution:\n    def largestPalindrome(self, n: int, k: int) -> str:\n        sys.set_int_max_str_digits(10 ** 8)\n\n        if k == 9:\n            return '9' * n\n\n        if k == 8:\n            if n < 7:\n                return '8' * n\n            return '888' + '9' * (n - 6) + '888'\n\n        if k == 7:\n            if n < 3:\n                return '7' * n\n            nines = (n - 1) // 2\n            middle_digits = n - nines * 2\n            middle = 9\n            nines_str = '9' * nines\n            while int(nines_str + str(middle) * middle_digits + nines_str) % 7 != 0:\n                middle -= 1\n            return nines_str + str(middle) * middle_digits + nines_str\n\n        if k == 6:\n            if n < 3:\n                return '6' * n\n            if n & 1:\n                nines = (n - 3) // 2\n                return '8' + '9' * nines + '8' + '9' * nines + '8'\n            else:\n                nines = (n - 4) // 2\n                return '8' + '9' * nines + '77' + '9' * nines + '8'\n\n        if k == 5:\n            if n < 3:\n                return '5' * n\n            return '5' + '9' * (n - 2) + '5'\n\n        if k == 4:\n            if n < 5:\n                return '8' * n\n            return '88' + '9' * (n - 4) + '88'\n\n        if k == 3:\n            return '9' * n\n\n        if k == 2:\n            if n < 3:\n                return '8' * n\n            return '8' + '9' * (n - 2) + '8'\n\n        return '9' * n",
    "submit_ts": "1723953153",
    "subm_id": "1359813795"
}