{
    "username": "Dilpreet_05",
    "submission": "from collections import deque\nfrom typing import List\n\nclass Solution:\n    def minimumDiameterAfterMerge(self, edges1: List[List[int]], edges2: List[List[int]]) -> int:\n        n = len(edges1) + 1\n        m = len(edges2) + 1\n        \n        adj1 = [[] for _ in range(n)]\n        adj2 = [[] for _ in range(m)]\n        \n        for edge in edges1:\n            adj1[edge[0]].append(edge[1])\n            adj1[edge[1]].append(edge[0])\n            \n        for edge in edges2:\n            adj2[edge[0]].append(edge[1])\n            adj2[edge[1]].append(edge[0])\n        \n        def bfs(adj, start):\n            v = [-1] * len(adj)\n            q = deque([start])\n            v[start] = 0\n            farthest_node = start\n            \n            while q:\n                node = q.popleft()\n                for neighbor in adj[node]:\n                    if v[neighbor] == -1:\n                        v[neighbor] = v[node] + 1\n                        q.append(neighbor)\n                        if v[neighbor] > v[farthest_node]:\n                            farthest_node = neighbor\n            \n            return farthest_node, v[farthest_node]\n        \n        def getDiameter(adj):\n            farthest_node1, _ = bfs(adj, 0)\n            _, dia = bfs(adj, farthest_node1)\n            return dia\n        \n        dia1 = getDiameter(adj1)\n        dia2 = getDiameter(adj2)\n        \n        mini = max(dia1, dia2)\n        h1 = (dia1 + 1) // 2\n        h2 = (dia2 + 1) // 2\n        mini = max(mini, h1 + h2 + 1)\n        \n        return mini\n",
    "submit_ts": "1719718362",
    "subm_id": "1304415313"
}