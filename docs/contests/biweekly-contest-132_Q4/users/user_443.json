{
    "username": "Neha_84",
    "submission": "class Solution {\n    public int maximumLength(int[] nums, int k) {\n        int n = nums.length;\n        int[][] dp = new int[n][k + 1];\n        int ans = 1;\n        int[] vk = new int[k + 1];\n        Arrays.fill(vk, -1);\n        List<Map<Integer, Integer>> vkm = new ArrayList<>(k + 1);\n\n        for (int i = 0; i <= k; i++) {\n            vkm.add(new HashMap<>());\n        }\n\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j <= k; j++) {\n                dp[i][j] = 1; // Initialize dp[i][j] to 1\n\n                for (int l = 0; l < j; l++) {\n                    dp[i][j] = Math.max(dp[i][j], 1 + vk[l]);\n                }\n\n                if (vkm.get(j).containsKey(nums[i])) {\n                    dp[i][j] = Math.max(dp[i][j], 1 + vkm.get(j).get(nums[i]));\n                }\n\n                ans = Math.max(ans, dp[i][j]);\n            }\n\n            for (int j = 0; j <= k; j++) {\n                vk[j] = Math.max(vk[j], dp[i][j]);\n                vkm.get(j).put(nums[i], Math.max(vkm.get(j).getOrDefault(nums[i], 0), dp[i][j]));\n            }\n        }\n\n        return ans;\n    }\n}",
    "submit_ts": "1717861825",
    "subm_id": "1281803357"
}