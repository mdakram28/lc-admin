{
    "username": "yuanchenxi2022",
    "submission": "\nclass Solution:\n    def shortestDistanceAfterQueries(self, n: int, queries: List[List[int]]) -> List[int]:\n        qq = []\n        ssum = 0\n        nn = n\n        res = []\n        def compute(ll, rr):\n            nonlocal qq, ssum, nn\n\n            lidx = bisect.bisect_left(qq, ll, key=lambda xx: xx[0])\n            ridx = bisect.bisect_left(qq, rr, key=lambda xx: xx[1])\n            if ridx < len(qq):\n                ritem = qq[ridx]\n                if ritem[0] <= ll and ritem[1] >= rr:\n                    return\n                if ritem[0] > ll and ritem[1] > rr:\n                    ridx -= 1\n            ridx =  max(lidx, ridx)\n\n            if lidx >= len(qq):\n                ssum += rr - ll\n                bisect.insort(qq, (ll, rr), key=lambda xx: xx[0])\n                return\n            litem = qq[lidx]\n            if litem[0] > ll and litem[1] > rr:\n                ssum += rr - ll\n                bisect.insort(qq, (ll, rr), key=lambda xx: xx[0])\n            cur_sum = 0\n            for ii in range(lidx, min(ridx + 1, len(qq))):\n                # print(qq[ii])\n                cur_sum += qq[ii][1] - qq[ii][0]\n            qq = qq[:lidx] + qq[ridx + 1:]\n            # print(lidx, ridx)\n            ssum = ssum - cur_sum + rr - ll\n            bisect.insort(qq, (ll, rr), key=lambda xx: xx[0])\n\n\n        for ii, (ll, rr) in enumerate(queries):\n            compute(ll, rr)\n            # print(ssum, qq)\n            res.append(\n                nn - 1 - ssum + len(qq)\n            )\n        return res",
    "submit_ts": "1722741572",
    "subm_id": "1343748233"
}