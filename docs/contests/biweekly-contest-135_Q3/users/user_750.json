{
    "username": "virajs324",
    "submission": "import java.util.*;\n\nclass Solution {\n    public int minChanges(int[] nums, int k) {\n        Map<Integer, List<Integer>> dMap = new HashMap<>();\n        List<Integer> xList = new ArrayList<>();\n        \n        int n = nums.length;\n        \n        for (int i = 0; i < n / 2; i++) {\n            int a = nums[i], b = nums[n - i - 1];\n            int d = Math.abs(a - b);\n            int x = Math.max(a, Math.max(b, Math.max(k - a, k - b)));\n            \n            dMap.computeIfAbsent(d, key -> new ArrayList<>()).add(x);\n            xList.add(x);\n        }\n        \n        int ans = n;\n        Collections.sort(xList);\n        \n        for (Map.Entry<Integer, List<Integer>> entry : dMap.entrySet()) {\n            int d = entry.getKey();\n            List<Integer> xs = entry.getValue();\n            \n            int t = Collections.binarySearch(xList, d);\n            if (t < 0) {\n                t = -t - 1;\n            } else {\n                while (t > 0 && xList.get(t - 1) == d) {\n                    t--;\n                }\n            }\n            t = t * 2 + (n / 2 - t);\n            \n            for (int x : xs) {\n                if (x < d) {\n                    t -= 2;\n                } else {\n                    t -= 1;\n                }\n            }\n            \n            ans = Math.min(ans, t);\n        }\n        \n        return ans;\n    }\n}\n",
    "submit_ts": "1721488989",
    "subm_id": "1327439386"
}