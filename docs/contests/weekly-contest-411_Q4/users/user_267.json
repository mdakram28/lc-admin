{
    "username": "user5976fh",
    "submission": "class Solution {\npublic:\n    vector<long long> countKConstraintSubstrings(string s, int k, vector<vector<int>>& queries) {\n        vector<int> ranges;\n        int n = s.size();\n        int z = 0, o = 0, l = 0;\n\n        for (int i = 0; i < n; ++i) {\n            z += s[i] == '0';\n            o += s[i] == '1';\n            while (z > k && o > k) {\n                z -= s[l] == '0';\n                o -= s[l] == '1';\n                ++l;\n            }\n            ranges.push_back(i - l + 1);\n        }\n\n        vector<long long> p(n + 1, 0);\n        long long cur = 0;\n        for (int i = 0; i < n; ++i) {\n            cur += ranges[i];\n            p[i + 1] = cur;\n        }\n\n        vector<long long> ans;\n        for (const auto& query : queries) {\n            int li = query[0], ri = query[1];\n            \n            int left = li, right = ri, idx = -1;\n            while (left <= right) {\n                int mid = left + (right - left) / 2;\n                if (mid - ranges[mid] + 1 <= li) {\n                    idx = mid;\n                    left = mid + 1;\n                } else {\n                    right = mid - 1;\n                }\n            }\n\n            long long leftResult = 0;\n            if (idx != -1 && idx >= li) {\n                int len = idx - li + 1;\n                leftResult = static_cast<long long>(len) * (len + 1) / 2;\n            }\n\n            long long rightResult = p[ri + 1] - p[idx + 1];\n            ans.push_back(leftResult + rightResult);\n        }\n\n        return ans;\n    }\n};",
    "submit_ts": "1723952520",
    "subm_id": "1359798175"
}