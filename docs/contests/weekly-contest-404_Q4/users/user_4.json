{
    "username": "uwi",
    "submission": "\tclass Solution {\n\t\tpublic int minimumDiameterAfterMerge(int[][] edges1, int[][] edges2) {\n\t\t\tint n = edges1.length + 1;\n\t\t\tint[][] g = packU(n, edges1);\n\t\t\tint m = edges2.length + 1;\n\t\t\tint[][] h = packU(m, edges2);\n\n\t\t\tint[] d1 = diameter(g);\n\t\t\tint[] d2 = diameter(h);\n\t\t\tint ans = Math.max(d1[0], d2[0]);\n\t\t\tans = Math.max((d1[0]+1)/2 + (d2[0]+1)/2 + 1, ans);\n\t\t\treturn ans;\n\t\t}\n\n\t\tpublic static int[] diameter(int[][] g)\n\t\t{\n\t\t\tint n = g.length;\n\t\t\tint f0 = -1, f1 = -1, d01 = -1;\n\t\t\tint[] q = new int[n];\n\t\t\tboolean[] ved = new boolean[n];\n\t\t\t{\n\t\t\t\tint qp = 0;\n\t\t\t\tq[qp++] = 0; ved[0] = true;\n\t\t\t\tfor(int i = 0;i < qp;i++){\n\t\t\t\t\tint cur = q[i];\n\t\t\t\t\tfor(int e : g[cur]){\n\t\t\t\t\t\tif(!ved[e]){\n\t\t\t\t\t\t\tved[e] = true;\n\t\t\t\t\t\t\tq[qp++] = e;\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tf0 = q[n-1];\n\t\t\t}\n\t\t\t{\n\t\t\t\tint[] d = new int[n];\n\t\t\t\tint qp = 0;\n\t\t\t\tArrays.fill(ved, false);\n\t\t\t\tq[qp++] = f0; ved[f0] = true;\n\t\t\t\tfor(int i = 0;i < qp;i++){\n\t\t\t\t\tint cur = q[i];\n\t\t\t\t\tfor(int e : g[cur]){\n\t\t\t\t\t\tif(!ved[e]){\n\t\t\t\t\t\t\tved[e] = true;\n\t\t\t\t\t\t\tq[qp++] = e;\n\t\t\t\t\t\t\td[e] = d[cur] + 1;\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tf1 = q[n-1];\n\t\t\t\td01 = d[f1];\n\t\t\t}\n\t\t\treturn new int[]{d01, f0, f1};\n\t\t}\n\n\n\t\tpublic static int[][] packU(int n, int[][] ft)\n\t\t{\n\t\t\tint[][] g = new int[n][];\n\t\t\tint[] p = new int[n];\n\t\t\tfor(int[] u : ft){\n\t\t\t\tp[u[0]]++; p[u[1]]++;\n\t\t\t}\n\t\t\tfor(int i = 0;i < n;i++)g[i] = new int[p[i]];\n\t\t\tfor(int[] u : ft){\n\t\t\t\tg[u[0]][--p[u[0]]] = u[1];\n\t\t\t\tg[u[1]][--p[u[1]]] = u[0];\n\t\t\t}\n\t\t\treturn g;\n\t\t}\n\n\t}\n",
    "submit_ts": "1719715610",
    "subm_id": "1304341389"
}