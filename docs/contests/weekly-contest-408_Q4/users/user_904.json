{
    "username": "kumarnikhil94058",
    "submission": "class Solution {\npublic:\n    bool canReachCorner(int X, int Y, vector<vector<int>>& circles) {\n        int numCircles = circles.size();\n        vector<vector<int>> graph(numCircles + 4);\n\n      \n        for (int i = 0; i < numCircles; ++i) {\n            long long x = circles[i][0], y = circles[i][1], r = circles[i][2];\n            if (x <= r) {\n                graph[numCircles].push_back(i);\n                graph[i].push_back(numCircles);\n            }\n            if (X - x <= r) {\n                graph[numCircles + 2].push_back(i);\n                graph[i].push_back(numCircles + 2);\n            }\n            if (y <= r) {\n                graph[numCircles + 1].push_back(i);\n                graph[i].push_back(numCircles + 1);\n            }\n            if (Y - y <= r) {\n                graph[numCircles + 3].push_back(i);\n                graph[i].push_back(numCircles + 3);\n            }\n            for (int j = i + 1; j < numCircles; ++j) {\n                long long xj = circles[j][0], yj = circles[j][1], rj = circles[j][2];\n                long long dx = x - xj;\n                long long dy = y - yj;\n                long long distanceSq = dx * dx + dy * dy;\n                long long radiusSumSq = (r + rj) * (r + rj);\n                if (radiusSumSq >= distanceSq) {\n                    graph[i].push_back(j);\n                    graph[j].push_back(i);\n                }\n            }\n        }\n\n\n        return !bfs(graph, numCircles, numCircles + 1, numCircles + 2, numCircles + 4) &&\n               !bfs(graph, numCircles + 3, numCircles + 2, numCircles + 1, numCircles + 4);\n    }\n\nprivate:\n    bool bfs(const vector<vector<int>>& graph, int start, int target1, int target2, int nodes) {\n        queue<int> q;\n        vector<bool> visited(nodes, false);\n        q.push(start);\n        visited[start] = true;\n\n        while (!q.empty()) {\n            int u = q.front();\n            q.pop();\n            for (int v : graph[u]) {\n                if (!visited[v]) {\n                    q.push(v);\n                    visited[v] = true;\n                }\n            }\n        }\n        return visited[target1] || visited[target2];\n    }\n};",
    "submit_ts": "1722138922",
    "subm_id": "1335803189"
}