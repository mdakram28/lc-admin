{
    "username": "_saraswat",
    "submission": "#include <bits/stdc++.h>\nusing namespace std;\n\n#define loop(i, a, n) for (lli i = (a); i < (n); ++i)\n#define loopD(i, a, n) for (lli i = (a); i >= (n); --i)\n#define all(c) (c).begin(), (c).end()\n#define rall(c) (c).rbegin(), (c).rend()\n#define sz(a) ((int)a.size())\n#define YES cout << \"YES\" << endl;\n#define NO cout << \"NO\" << endl;\n#define endl '\\n'\n#define fastio std::ios::sync_with_stdio(false), cin.tie(NULL), cout.tie(NULL);\n#define pb push_back\n#define pp pop_back()\n#define fi first\n#define si second\n#define v(a) vector<int>(a)\n#define vv(a) vector<vector<int>>(a)\n#define present(c, x) ((c).find(x) != (c).end())\n#define set_bits __builtin_popcountll\n#define MOD 1000000007\n\ntypedef long long lli;\ntypedef vector<int> vi;\ntypedef vector<vi> vvi;\ntypedef pair<lli, lli> pll;\ntypedef pair<int, int> pii;\ntypedef map<lli, lli> umpi;\ntypedef map<int, int> mpi;\ntypedef vector<pii> vp;\ntypedef vector<lli> vll;\ntypedef vector<vll> vvll;\n\nstruct node\n{\n    unordered_map<char, node *> freq;\n    vp wordEnds;\n};\n\nclass ds\n{\npublic:\n    node *start;\n    ds() { start = new node(); }\n\n    void set(string &word, int i, int c)\n    {\n        node *ch = start;\n        for (char c : word)\n        {\n            if (present(ch->freq, c))\n            {\n                ch = ch->freq[c];\n            }\n            else\n            {\n                ch->freq[c] = new node();\n                ch = ch->freq[c];\n            }\n        }\n        ch->wordEnds.pb({i, c});\n    }\n};\n\nclass Solution\n{\npublic:\n    vi dp;\n    ds store;\n\n    void upd(int n)\n    {\n        dp.resize(n + 1, INT_MAX);\n        dp[0] = 0;\n    }\n\n    void fill(int m, vector<string> &words, vector<int> &costs)\n    {\n        loop(i, 0, m)\n            store.set(words[i], i, costs[i]);\n    }\n\n    void solve(string target, int n, vector<string> &words, vector<int> &costs)\n    {\n        for (int i = 0; i < n; ++i)\n        {\n            if (dp[i] != INT_MAX)\n            {\n                node *ch = store.start;\n                loop(j, i, n)\n                {\n                    if (!present(ch->freq, target[j]))\n                        break;\n                    ch = ch->freq[target[j]];\n                    for (auto &p : ch->wordEnds)\n                    {\n                        int ti = p.first;\n                        int tc = p.second;\n                        int s = words[ti].size();\n                        s += i;\n                        if (s > n)\n                            continue;\n                        dp[s] = min(dp[s], dp[i] + tc);\n                    }\n                }\n            }\n        }\n    }\n\n    int minimumCost(string target, vector<string> &words, vector<int> &costs)\n    {\n        int n = sz(target), m = sz(words);\n        upd(n);\n\n        fill(m, words, costs);\n        solve(target, n, words, costs);\n        if (dp[n] != INT_MAX)\n            return dp[n];\n        return -1;\n    }\n};\n",
    "submit_ts": "1720322304",
    "subm_id": "1312346261"
}