{
    "username": "LayCurse",
    "submission": "#pragma GCC optimize(\"Ofast\")\n#pragma GCC optimize(\"unroll-loops\")\n#pragma GCC optimize(\"inline\")\n#include<bits/stdc++.h>\nusing namespace std;\n#define MD (1000000007U)\ntemplate<class T> struct cLtraits_identity{\n  using type = T;\n}\n;\ntemplate<class T> using cLtraits_try_make_signed =\n  typename conditional<\n    is_integral<T>::value,\n    make_signed<T>,\n    cLtraits_identity<T>\n    >::type;\ntemplate <class S, class T> struct cLtraits_common_type{\n  using tS = typename cLtraits_try_make_signed<S>::type;\n  using tT = typename cLtraits_try_make_signed<T>::type;\n  using type = typename common_type<tS,tT>::type;\n}\n;\nvoid*wmem;\nchar memarr[96000000];\ntemplate<class S, class T> inline auto max_L(S a, T b)\n-> typename cLtraits_common_type<S,T>::type{\n  return (typename cLtraits_common_type<S,T>::type) a >= (typename cLtraits_common_type<S,T>::type) b ? a : b;\n}\ntemplate<class T> inline void walloc1d(T **arr, int x, void **mem = &wmem){\n  static int skip[16] = {0, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1};\n  (*mem) = (void*)( ((char*)(*mem)) + skip[((unsigned long long)(*mem)) & 15] );\n  (*arr)=(T*)(*mem);\n  (*mem)=((*arr)+x);\n}\ntemplate<class T> inline void walloc1d(T **arr, int x1, int x2, void **mem = &wmem){\n  walloc1d(arr, x2-x1, mem);\n  (*arr) -= x1;\n}\ntemplate<class T> struct segtree_ph{\n  int N;\n  int logN;\n  T*val;\n  void malloc(int maxN, int once = 0);\n  void walloc(int maxN, int once = 0, void **mem = &wmem);\n  void free(void);\n  T& operator[](int i);\n  void setN(int n, int zerofill = 1, int dobuild = 1);\n  void build(void);\n  inline void build(int a);\n  inline void change(int a, T v);\n  inline T get(int a, int b);\n}\n;\n#define main dummy_main\nint main(){\n  wmem = memarr;\n  return 0;\n}\n#undef main\nstruct sval{\n  long long m[4];\n}\n;\nsval segtree_ph_func(sval a, sval b){\n  sval res;\n  res.m[0] =max_L(a.m[1] + b.m[0], a.m[0] + b.m[2]);\n  res.m[1] =max_L(a.m[1] + b.m[1], a.m[0] + b.m[3]);\n  res.m[2] =max_L(a.m[3] + b.m[0], a.m[2] + b.m[2]);\n  res.m[3] =max_L(a.m[3] + b.m[1], a.m[2] + b.m[3]);\n  return res;\n}\nclass Solution{\n  public:\n  int maximumSumSubsequence(vector<int>& nums, vector<vector<int>>& queries){\n    int i;\n    dummy_main();\n    int N = nums.size();\n    long long res = 0;\n    sval tmp;\n    segtree_ph<sval> t;\n    t.walloc(N);\n    t.setN(N);\n    for(i=(0);i<(N);i++){\n      t[i].m[0] = t[i].m[1] = t[i].m[2] = 0;\n      t[i].m[3] =max_L(nums[i], 0);\n    }\n    t.build();\n    for(vector<int> q: queries){\n      int i;\n      tmp.m[0] = tmp.m[1] = tmp.m[2] = 0;\n      tmp.m[3] =max_L(q[1], 0);\n      t.change(q[0], tmp);\n      tmp = t.get(0, N);\n      res += tmp.m[3];\n      res %= MD;\n    }\n    return res;\n  }\n}\n;\ntemplate<class T> void segtree_ph<T>::malloc(int maxN, int once /*= 0*/){\n  int i;\n  for(i=1;i<maxN;i*=2){\n    ;\n  }\n  val = new T[2*i];\n  if(once){\n    setN(maxN);\n  }\n}\ntemplate<class T> void segtree_ph<T>::walloc(int maxN, int once /*= 0*/, void **mem /*= &wmem*/){\n  int i;\n  for(i=1;i<maxN;i*=2){\n    ;\n  }\n  walloc1d(&val, 2*i, mem);\n  if(once){\n    setN(maxN);\n  }\n}\ntemplate<class T> void segtree_ph<T>::free(void){\n  delete [] val;\n}\ntemplate<class T> T& segtree_ph<T>::operator[](int i){\n  return val[N+i];\n}\ntemplate<class T> void segtree_ph<T>::setN(int n, int zerofill /*= 1*/, int dobuild /*= 1*/){\n  int i;\n  for(i=1,logN=0;i<n;i*=2,logN++){\n    ;\n  }\n  N = i;\n  if(dobuild){\n    build();\n  }\n}\ntemplate<class T> void segtree_ph<T>::build(void){\n  for(int i=N-1;i;i--){\n    val[i] = segtree_ph_func(val[2*i], val[2*i+1]);\n  }\n}\ntemplate<class T> inline void segtree_ph<T>::build(int a){\n  while(a > 1){\n    a /= 2;\n    val[a] = segtree_ph_func(val[2*a], val[2*a+1]);\n  }\n}\ntemplate<class T> inline void segtree_ph<T>::change(int a, T v){\n  val[a+N] = v;\n  build(a+N);\n}\ntemplate<class T> inline T segtree_ph<T>::get(int a, int b){\n  T res;\n  T tmp;\n  int fga = 0;\n  int fgb = 0;\n  a += N;\n  b += N;\n  while(a < b){\n    if(a%2){\n      if(fga){\n        res = segtree_ph_func(res, val[a]);\n      }\n      else{\n        res = val[a];\n        fga = 1;\n      }\n      a++;\n    }\n    if(b%2){\n      b--;\n      if(fgb){\n        tmp = segtree_ph_func(val[b], tmp);\n      }\n      else{\n        tmp = val[b];\n        fgb = 1;\n      }\n    }\n    a /= 2;\n    b /= 2;\n  }\n  if(fga==1 && fgb==0){\n    return res;\n  }\n  if(fga==0 && fgb==1){\n    return tmp;\n  }\n  if(fga==1 && fgb==1){\n    return segtree_ph_func(res, tmp);\n  }\n  return res;\n}\n// cLay version 20240420-1\n\n// --- original code ---\n// #define main dummy_main\n// {}\n// #undef main\n// \n// struct sval {ll m[4];};\n// \n// sval segtree_ph_func(sval a, sval b){\n//   sval res;\n// \n//   res.m[0] = max(a.m[1] + b.m[0], a.m[0] + b.m[2]);\n//   res.m[1] = max(a.m[1] + b.m[1], a.m[0] + b.m[3]);\n//   res.m[2] = max(a.m[3] + b.m[0], a.m[2] + b.m[2]);\n//   res.m[3] = max(a.m[3] + b.m[1], a.m[2] + b.m[3]);\n// \n//   return res;\n// }\n// \n// class Solution {\n// public:\n//   int maximumSumSubsequence(vector<int>& nums, vector<vector<int>>& queries) {\n//     dummy_main();\n// \n//     int N = nums.size();\n//     ll res = 0;\n//     sval tmp;\n//     segtree_ph<sval> t;\n// \n//     t.walloc(N);\n//     t.setN(N);\n//     rep(i,N){\n//       t[i].m[0] = t[i].m[1] = t[i].m[2] = 0;\n//       t[i].m[3] = max(nums[i], 0);\n//     }\n//     t.build();\n// \n//     for(VI q: queries){\n//       tmp.m[0] = tmp.m[1] = tmp.m[2] = 0;\n//       tmp.m[3] = max(q[1], 0);\n//       t.change(q[0], tmp);\n//       tmp = t.get(0, N);\n//       res += tmp.m[3];\n//       res %= MD;\n//     }\n// \n//     return res;\n//   }\n// };\n",
    "submit_ts": 1716691759.0
}