{
    "username": "TimmyChiang",
    "submission": "class Solution {\npublic:\n    int dp[35][35] = {0};\n    int choose(int n, int k) {\n        // cout << \"n = \" << n << \", k = \" << k << '\\n';\n        if (dp[n][k] != -1)\n            return dp[n][k];\n        return dp[n][k] = choose(n-1, k) + choose(n-1, k-1);\n    }\n    const int val[9] = {2, 4, 4, 3, 2, 4, 6, 4, 1};\n    int waysToReachStair(int k) {\n        for (int i = 0; i < 35; ++i)\n            fill(dp[i], dp[i] + 35, -1);\n        for (int i = 0; i < 35; ++i) {\n            dp[i][0] = dp[i][i] = 1;\n            dp[i][1] = i;\n        }\n        if (0 <= k && k <= 8)\n            return val[k];\n        int idx;\n        for (int i = 3; i < 30; ++i) {\n            if ((1LL << i) < k && k <= (1LL << (i+1))) {\n                idx = i;\n                break;\n            }\n        }\n        ++idx;\n        // cout << \"k = \" << k << \", idx = \" << idx << \", (1 << idx) = \" << (1 << idx) << '\\n';\n        if (k + idx + 1 < (1 << idx))\n            return 0;\n        for (int i = 0; i <= (idx + 1); ++i) {\n            if (k == ((1 << idx) - i)) {\n                return choose(idx+1, i);\n            }\n        }\n        return 0;\n    }\n};",
    "submit_ts": "1716090007",
    "subm_id": "1261856903"
}