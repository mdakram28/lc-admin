{
    "username": "9560kiran",
    "submission": "typedef long long int ll;\nclass Solution {\npublic:\n    \nvoid solve(ll node, ll par, vector<vector<ll>> &adj,vector<ll> &depth)\n{\n      ll d=0;\n      for(auto it:adj[node])\n      {\n          if(it!=par)\n          {\n               solve(it,node,adj,depth);\n               d=max(d,1+depth[it]);\n          }\n      }\n      \n      depth[node]=d;\n}\nvoid dfs(ll node,ll par,ll ppar,vector<vector<ll>> &adj,vector<ll> &depth,vector<ll> &ans)\n{\n    \n       vector<ll> p,s;\n       for(auto it:adj[node])\n       {\n           if(it!=par)\n           {\n               p.push_back(depth[it]);\n               s.push_back(depth[it]);\n           }\n       }\n       \n       ll partial_ans=0;\n       for(ll i=1;i<p.size();i++)  p[i]=max(p[i],p[i-1]);\n       for(ll i=s.size()-2;i>=0;i--) s[i]=max(s[i],s[i+1]);\n       \n       ll idx=0;\n       \n       for(auto it:adj[node])\n       {\n           if(it!=par)\n           {\n               ll left=(idx!=0)?p[idx-1]:-1e9;\n               ll right=(idx!=s.size()-1)?s[idx+1]:-1e9;\n               \n               partial_ans=1+max(ppar,max(left,right));\n               idx++;\n               dfs(it,node,partial_ans,adj,depth,ans);\n           }\n       }\n       \n      \n       ll tempans=(p.size()>0)?p[p.size()-1]:-1;\n       ans[node]=1+max(ppar,tempans);\n}\n    pair<ll,ll> ok(vector<vector<int>> &edges){\n         \n        int n=edges.size();\n        vector<vector<ll>> adj(n+2);\n        for(auto e:edges){\n              adj[e[0]+1].push_back(e[1]+1);\n              adj[e[1]+1].push_back(e[0]+1);\n        }\n        vector<ll> dpath(n+2);\n        vector<ll> depth(n+2),ans(n+2);\n        solve(1,0,adj,depth);\n        \n        dfs(1,0,-1,adj,depth,ans);\n        ll mn=1e9;\n        ll mx=0;\n        for(int i=1;i<=n+1;i++) {\n            // cout<<ans[i]<<\" \";\n            mn=min(mn,ans[i]);\n            mx=max(mx,ans[i]);\n            \n        }\n        // cout<<endl;\n        return {mn,mx};\n    }\n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n          auto p1=ok(edges1);\n          auto p2=ok(edges2);\n          return max({p1.first+p2.first+1,p1.second,p2.second});\n    }\n};",
    "submit_ts": 1719719023.0
}