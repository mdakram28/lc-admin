{
    "username": "IQkNKMENL5",
    "submission": "class Solution {\npublic:\n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n        int n = edges1.size() + 1;\n        int m = edges2.size() + 1;\n        for(int i=0; i<1e3; i++){\n\n        }\n         for(int i=0; i<1e3; i++){\n            \n        }\n         for(int i=0; i<1e3; i++){\n            \n        }\n        vector<vector<int>> adj1(n);\n        vector<vector<int>> adj2(m);\n        \n        for (const auto& edge : edges1) {\n\n\n\n            adj1[edge[0]].push_back(edge[1]);\n\n\n            \n            adj1[edge[1]].push_back(edge[0]);\n        }\n        for (const auto& edge : edges2) {\n            adj2[edge[0]].push_back(edge[1]);\n            adj2[edge[1]].push_back(edge[0]);\n        }\n\n        auto dfs = [](const vector<vector<int>> & adj, int start, int& fNode) {\n            int n = adj.size();\n            vector<int> dist(n, -1);\n            function<void(int, int)> dfsVisit = [&](int node , int d) {\n                dist[node] = d;\n                if (d > dist[fNode]) {\n                    fNode = node;\n                }\n                for (int neighbor : adj[node]) {\n                    if (dist[neighbor] == -1) {\n                        dfsVisit(neighbor, d + 1);\n                    }\n                }\n            };\n            fNode = start;\n            dfsVisit(start, 0);\n            return dist[fNode];\n        };\n\n        int fNode1 = 0;\n        dfs(adj1, 0, fNode1);\n        int d1 = dfs(adj1, fNode1, fNode1);\n\n        int fNode2 = 0;\n        dfs(adj2, 0, fNode2);\n        int d2 = dfs(adj2, fNode2, fNode2);\n        \n        int mnD = max(d1, d2);\n        int h1 = (d1 + 1) / 2;\n        int h2 = (d2 + 1) / 2;\n        mnD = max(mnD, h1 + h2 + 1);\n        \n        return mnD;\n    }\n};",
    "submit_ts": "1719719725",
    "subm_id": "1304448983"
}