{
    "username": "phamkienxmas2001",
    "submission": "class Solution {\n    struct Trie {\n        Trie *children[26];\n        int val;\n        Trie() {\n            val = 0;\n            memset(children, 0, sizeof(children));\n        }\n        void insert(const string &s, int _val) {\n            Trie* cur = this;\n            for (int i = 0; i < s.size(); i++) {\n                auto& nxt = cur->children[s[i] - 'a'];\n                if (nxt == nullptr) nxt = new Trie();\n                cur = nxt; \n            }\n            cur->val = cur->val == 0? _val : min(cur->val, _val);\n        }\n    };\npublic:\n    vector<int> dp;\n    const int INF = 1e9;\n    int solve(int i, const string& target, Trie *root) {\n        if (i == target.size()) return 0;\n        if (dp[i] != -1) return dp[i];\n        int res = INF;\n        Trie *cur = root;\n        for (int j = i; j < target.size(); j++) {\n            cur = cur->children[target[j] - 'a'];\n            if (cur == nullptr) break;\n            if (cur->val) {\n                int next_res = solve(j + 1, target, root);\n                if (next_res < INF) \n                    res = min(res, next_res + cur->val);\n            }\n        }\n        return dp[i] = res;\n    }\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        dp.assign(target.size(), -1);\n        Trie tr;\n        for (int i = 0; i < words.size(); i++) tr.insert(words[i], costs[i]);\n        int ans = solve(0, target, &tr);\n        return ans >= INF? -1 : ans;\n    }\n};",
    "submit_ts": "1720321136",
    "subm_id": "1312314481"
}