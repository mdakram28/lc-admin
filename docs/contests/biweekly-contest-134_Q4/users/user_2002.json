{
    "username": "chad_guy",
    "submission": "class Solution {\n    public long countSubarrays(int[] nums, int k) {\n//         int n = nums.length;\n//         int count = 0;\n\n//         // Iterate over every possible starting point of subarray\n//         for (int i = 0; i < n; i++) {\n//             int currentAnd = nums[i];\n            \n//             // Iterate over every possible ending point of subarray starting from i\n//             for (int j = i; j < n; j++) {\n//                 currentAnd &= nums[j];\n                \n//                 // If AND is already less than k, no point in further checking\n//                 if (currentAnd < k) break;\n                \n//                 if (currentAnd == k) count++;\n//             }\n//         }\n        \n        // return count;\n        \n        \n        int size = nums.length;\n        long t = 0L;\n        HashMap<Long, Long> mapP = new HashMap<>();\n        for(int i=0; i<size; ++i) {\n            HashMap<Long, Long> mapC = new HashMap<>();\n            if(nums[i] == k) {\n               ++t; \n            }\n            mapC.put((long)nums[i], 1L);\n            for(long x : mapP.keySet()) {\n                long and = x & nums[i];\n                if(and == k) {\n                    t += mapP.get(x);\n                }\n                mapC.put(and, mapC.getOrDefault(and, 0L)+mapP.get(x));\n            }\n            mapP = mapC;\n        }\n        return t;\n    }\n}",
    "submit_ts": "1720281075",
    "subm_id": "1311812282"
}