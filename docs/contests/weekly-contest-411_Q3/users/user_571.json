{
    "username": "IBENCH225",
    "submission": "class Solution:\n    def largestPalindrome(self, n: int, k: int) -> str:\n        res=''\n        if k==1:\n            return '9'*n\n        elif k==2:\n            if n<=2:\n                return '8'*n\n            return ('8'+('9'*(n-2))+'8') \n        elif k==3:\n            return '9'*n\n\n        elif k==4:\n            if n<=3: return '8'*n\n            return '88'+'9'*(n-4)+'88'\n        elif k==5:\n            if n<=2: return '5'*n\n            return ('5'+('9'*(n-2))+'5') \n        elif k==6:\n            palindrome = ['9'] * n\n            palindrome[0] = '8'\n            palindrome[-1] = '8'\n            if n>=3 and n%2==1: #just needs to drop by 1\n                palindrome[n//2]='8'\n            elif n >= 4 and n % 2 == 0:  #needs to drop by 4, so 2, 2, OR \n                palindrome[n // 2 - 1] = '7'\n                palindrome[n // 2] = '7'\n            elif n==2:\n                return '66'\n            else:\n                return '6'\n            palindrome = ''.join(palindrome)\n            return palindrome\n\n\n        elif k == 7:\n            if n == 1:\n                return '7'\n            palindrome = ['9'] * n\n            \n            def compute_modulo(palindrome, mod):\n                result = 0\n                for digit in palindrome:\n                    result = (result * 10 + int(digit)) % mod\n                return result\n            \n            def adjust_palindrome_for_7(palindrome):\n                current_mod = compute_modulo(palindrome, 7)\n                if n % 2 == 1:\n                    mid_index = n // 2\n                    for i in range(9, -1, -1):\n                        palindrome[mid_index] = str(i)\n                        if compute_modulo(palindrome, 7) == 0:\n                            return ''.join(palindrome)\n                else:\n                    left_mid = n // 2 - 1\n                    right_mid = n // 2\n                    for i in range(9, -1, -1):\n                        palindrome[left_mid] = str(i)\n                        palindrome[right_mid] = str(i)\n                        if compute_modulo(palindrome, 7) == 0:\n                            return ''.join(palindrome)\n                return ''.join(palindrome)\n            \n            return adjust_palindrome_for_7(palindrome)\n        elif k==8:\n            if n<=6: return '8'*n\n            return '888' + '9'*(n-6) + '888'\n\n        elif k==9:\n            return '9'*n\n",
    "submit_ts": "1723951223",
    "subm_id": "1359766320"
}