{
    "username": "Yawn_Sean",
    "submission": "class Solution:\n    def minimumDiameterAfterMerge(self, edges1: List[List[int]], edges2: List[List[int]]) -> int:\n        n1 = len(edges1) + 1\n        n2 = len(edges2) + 1\n        path1 = [[] for _ in range(n1)]\n        for u, v in edges1:\n            path1[u].append(v)\n            path1[v].append(u)\n        path2 = [[] for _ in range(n2)]\n        for u, v in edges2:\n            path2[u].append(v)\n            path2[v].append(u)\n        \n        def dfs1(u, p):\n            for v in path1[u]:\n                if v != p:\n                    d[v] = d[u] + 1\n                    dfs1(v, u)\n        \n        d1 = [0] * n1\n        d = [0] * n1\n        dfs1(0, -1)\n        \n        u = d.index(max(d))\n        d[u] = 0\n        dfs1(u, -1)\n        \n        for i in range(n1):\n            d1[i] = d[i]\n        \n        u = d.index(max(d))\n        d[u] = 0\n        dfs1(u, -1)\n        for i in range(n1):\n            if d[i] > d1[i]:\n                d1[i] = d[i]\n        \n        def dfs2(u, p):\n            for v in path2[u]:\n                if v != p:\n                    d[v] = d[u] + 1\n                    dfs2(v, u)\n        \n        d2 = [0] * n2\n        d = [0] * n2\n        dfs2(0, -1)\n        \n        u = d.index(max(d))\n        d[u] = 0\n        dfs2(u, -1)\n        \n        for i in range(n2):\n            d2[i] = d[i]\n        \n        u = d.index(max(d))\n        d[u] = 0\n        dfs2(u, -1)\n        for i in range(n2):\n            if d[i] > d2[i]:\n                d2[i] = d[i]\n        return max(max(d1), max(d2), min(d1) + min(d2) + 1)\n        ",
    "submit_ts": 1719715434.0
}