{
    "username": "krishnash1355",
    "submission": "class Solution {\npublic:\n    int minimumDifference(vector<int>& nums, int k) {\n        vector<vector<int>> v(nums.size() + 1, vector<int>(32));\n        for (int i = 0; i < nums.size(); i++)\n            for (int j = 0; j < 31; j++) if ((1 << j)&nums[i]) v[i + 1][j]++;\n        for (int i = 1; i <= nums.size(); i++)\n            for (int j = 0; j < 31; j++) v[i][j] += v[i - 1][j];\n        int lo = 0; int hi = 1e9;\n        while (lo <= hi) {\n            int mid = (lo + hi) / 2;\n            int check = k - mid;\n            int i = 0;\n            int j = 0;\n            int val = INT_MAX;\n            bool checker = false;\n            while (i < nums.size()) {\n                val = 0;\n                for (int k = 0; k < 31; k++) if ((i - j + 1) == (v[i + 1][k] - v[j][k])) val += (1 << k);\n                while (val < check && j <= i) {\n                    j++;\n                    val = 0;\n                    for (int k = 0; k < 31; k++) if ((i - j + 1) == (v[i + 1][k] - v[j][k])) val += (1 << k);\n                }\n                if (val >= check && val <= k + mid) checker = true;\n                i++;\n            }\n            if (checker) hi = mid - 1;\n            else lo = mid + 1;\n        }\n        return lo;\n    }\n};",
    "submit_ts": "1717299890",
    "subm_id": "1274827164"
}