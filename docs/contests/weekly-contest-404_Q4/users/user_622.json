{
    "username": "neal27",
    "submission": "class Solution {\npublic:\n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n        int n = edges1.size() + 1, m = edges2.size() + 1;\n        vector<int> adj1[n];\n        vector<int> adj2[m];\n        for (int i = 0; i < n - 1; i++)\n        {\n            int u = edges1[i][0], v = edges1[i][1];\n            adj1[u].push_back(v);\n            adj1[v].push_back(u);\n        }\n        for (int i = 0; i < m - 1; i++)\n        {\n            int u = edges2[i][0], v = edges2[i][1];\n            adj2[u].push_back(v);\n            adj2[v].push_back(u);\n        }\n        vector<int> height(max(n, m), 0);\n        vector<int> dist(max(n, m), 0);\n        function<void(int, int, int)> dfs1 = [&](int cur, int par, int tree){\n            for (auto u : (tree==1 ? adj1[cur] : adj2[cur])) {\n                if (u != par) {\n                    dfs1(u, cur, tree);\n                    height[cur] = max(height[cur], height[u]);\n                }\n            }\n            height[cur] += 1;\n        };\n        function<void(int, int, int)> dfs2 = [&](int cur, int par, int tree){\n            int max1 = 0;\n            int max2 = 0;\n            for (auto u : (tree == 1 ? adj1[cur] : adj2[cur])) {\n                if (u != par) {\n                    if (height[u] >= max1) {\n                        max2 = max1;\n                        max1 = height[u];\n                    }\n                    else if (height[u] > max2) {\n                        max2 = height[u];\n                    }\n                }\n            }\n            int sum = 0;        \n            for (auto u : (tree == 1 ? adj1[cur] : adj2[cur])) {\n                if (u != par) {\n                    sum = ((max1 == height[u]) ? max2 : max1);\n                    if (max1 == height[u])\n                        dist[u] = 1 + max(1 + max2, dist[cur]);\n                    else\n                        dist[u] = 1 + max(1 + max1, dist[cur]);\n                    dfs2(u, cur, tree);\n                }\n            }\n        };\n        int a = 1e9, b = 1e9, d1 = 0, d2 = 0;\n        dfs1(0, -1, 1);\n        dfs2(0, -1, 1);\n        for(int i = 0; i < n; i++){\n            a = min(a, max(dist[i], height[i]) - 1);\n            d1 = max(d1, max(dist[i], height[i]) - 1);\n        }\n        for (int i = 0; i < m; i++)\n        {\n            height[i] = 0, dist[i] = 0;\n        }\n        dfs1(0, -1, 2);\n        dfs2(0, -1, 2);\n        for (int i = 0; i < m; i++)\n        {\n            b = min(b, max(dist[i], height[i]) - 1);\n            d2 = max(d2, max(dist[i], height[i]) - 1);\n        }\n        return max(d1, max(d2, a + b + 1));\n    }\n};",
    "submit_ts": 1719719929.0
}