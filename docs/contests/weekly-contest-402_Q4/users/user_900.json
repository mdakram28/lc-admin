{
    "username": "YuningCong",
    "submission": "class Solution {\npublic:\n    int tree[100005];\n    int lowbit(int x){return x&-x;}\n    int N;\n    int query(int x){\n        if(x==-1) return 0;\n        int sum = 0;\n        for(int i=x;i;i-=lowbit(i)) sum += tree[i];\n        return sum;\n    }\n    void add(int x,int k){\n        for(int i=x;i<=N;i+=lowbit(i)) tree[i]+=k;\n    }\n    bool check(vector<int>& nums,int i){\n        return i>0&&i<N-1&&(nums[i]>nums[i-1]&&nums[i]>nums[i+1]);\n    }\n    vector<int> countOfPeaks(vector<int>& nums, vector<vector<int>>& queries) {\n        N = nums.size();\n        memset(tree,0,sizeof(tree));\n        for(int i=1;i<N-1;i++) if(nums[i]>nums[i-1]&&nums[i]>nums[i+1]) add(i,1);\n        vector<int>ans;\n        int l = queries.size();\n        for(int i=0;i<l;i++){\n            if(queries[i][0]==1){\n                if(queries[i][2]-queries[i][1]<2) ans.push_back(0);\n                else\n                ans.push_back(query(queries[i][2]-1)-query(queries[i][1]));\n            }\n            else{\n                int tmp = nums[queries[i][1]];\n                for(int j=-1;j<=1;j++){\n                    bool bf = check(nums,queries[i][1]+j);\n                    nums[queries[i][1]] =  queries[i][2];\n                    bool af = check(nums,queries[i][1]+j);\n                    nums[queries[i][1]] = tmp;\n                    if(bf&&(!af)) add(queries[i][1]+j,-1);\n                    if((!bf)&&af)add(queries[i][1]+j,1);\n                }\n                nums[queries[i][1]] = queries[i][2];\n            }\n        }\n        return ans;\n    }\n};",
    "submit_ts": "1718508153",
    "subm_id": "1289673186"
}