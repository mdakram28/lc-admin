{
    "username": "salyu",
    "submission": "struct seg_t {\n    int l{}, r{}, v{};\n    seg_t *pl{}, *pr{};\n};\n\nnamespace {\n    constexpr int SIZE = 1024;\n    vector<unique_ptr<seg_t[]>> buffers;\n    seg_t * current_p;\n    int current_size = SIZE;\n    seg_t* alloc(int l, int r) {\n        if (current_size == SIZE) {\n            current_size = 0;\n            current_p = buffers.emplace_back(make_unique<seg_t[]>(SIZE)).get();\n        }\n        auto p = &current_p[current_size++];\n        p->l = l;\n        p->r = r;\n        return p;\n    }\n}\n\nclass Solution {\npublic:\n    int minChanges(vector<int>& nums, int k) {\n        int n = nums.size();\n        seg_t root{0, k, 0, nullptr, nullptr};\n        function<void(seg_t*, int, int, int)> update = [&](seg_t* p, int l, int r, int v) {\n            if (p->l >= l && p->r <= r) {\n                p->v += v;\n                return;\n            }\n            int m = p->l + (p->r - p->l) / 2;\n            if (m >= l) {\n                if (!p->pl) {\n                    p->pl = alloc(p->l, m);\n                }\n                update(p->pl, l, r, v);\n            }\n            if (m < r) {\n                if (!p->pr) {\n                    p->pr = alloc(m + 1, p->r);\n                }\n                update(p->pr, l, r, v);\n            }\n        };\n        auto get = [&](int i) {\n            auto p = &root;\n            int res = 0;\n            while (p) {\n                res += p->v;\n                int m = p->l + (p->r - p->l) / 2;\n                if (m >= i) {\n                    p = p->pl;\n                }\n                else {\n                    p = p->pr;\n                }\n            }\n            return res;\n        };\n        for (int i = 0, j = n - 1; i < j; ++i, --j) {\n            auto [a, b] = minmax(nums[i], nums[j]);\n            if (b - a >= 1) {\n                update(&root, 0, b - a - 1, 1);\n            }\n            int t = max(b, k - a);\n            if (b - a < t) {\n                update(&root, b - a + 1, t, 1);\n            }\n            if (t < k) {\n                update(&root, t + 1, k, 2);\n            }\n        }\n        int res = numeric_limits<int>::max();\n        for (int i = 0; i <= k; ++i) {\n            res = min(res, get(i));\n        }\n        return res;\n    }\n};",
    "submit_ts": "1721488707",
    "subm_id": "1327430725"
}