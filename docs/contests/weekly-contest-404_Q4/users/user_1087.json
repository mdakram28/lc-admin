{
    "username": "craggy",
    "submission": "class Solution:\n    def minimumDiameterAfterMerge(self, edges1: List[List[int]], edges2: List[List[int]]) -> int:\n        g1, g2 = defaultdict(list), defaultdict(list)\n        for a, b in edges1:\n            g1[a].append(b)\n            g1[b].append(a)\n        for a, b in edges2:\n            g2[a].append(b)\n            g2[b].append(a)\n        \n        def dfs(g, v, f):\n            bd, bv = 0, v\n            for n in g[v]:\n                if n == f: continue\n                cd, cv = dfs(g, n, v)\n                if cd + 1 > bd:\n                    bd = cd + 1\n                    bv = cv\n            return bd, bv\n        \n        ret = 1\n        d1, v1 = dfs(g1, 0, -1)\n        d1b, _ = dfs(g1, v1, -1)\n        d2, v2 = dfs(g2, 0, -1)\n        d2b, _ = dfs(g2, v2, -1)\n        return max([ceil(d1b/2) + ceil(d2b/2) + 1, d1b, d2b])\n        \n\n        ",
    "submit_ts": 1719719521.0
}