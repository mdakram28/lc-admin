{
    "username": "trickster_",
    "submission": "class Solution {\npublic:\n    int minChanges(vector<int>& nums, int k) {\n        int n = nums.size(), ans = n;\n        // how much max diff can the previous ones accomodate?\n        // before they need to change both of the nums at i and n-i-1?\n        priority_queue<int, vector<int>, greater<int>> pq;\n        \n        // jo bhi differences X se bade hain, they require only 1 operation\n        map<int, vector<int>> diffs; // (difference, index)\n        for (int i = 0; i < n/2; ++i) {\n            diffs[abs(nums[i]-nums[n-i-1])].push_back(i);\n            int n1 = min(nums[i], nums[n-i-1]), n2 = max(nums[i], nums[n-i-1]);\n            pq.push(max(n2, k-n1));\n        }\n        \n        // for (auto [a, b]: diffs) {\n        //     cout << a << \": \";\n        //     for (int x: b)\n        //         cout << x << ' ';\n        //     cout << '\\n';\n        // }\n        \n        int totalDiffs = n/2, prevOps = 0;\n        for (auto it = diffs.begin(); it != diffs.end(); ++it) {\n            int X = it->first;\n            // if (it != diffs.begin()) {\n            //     auto prev = it;\n            //     --prev;\n            //     // evaluate diffs for the previous difference\n            //     for (int idx: prev->second) {;\n            //         int n1 = min(nums[idx], nums[n-idx-1]), n2 = max(nums[idx], nums[n-idx-1]);\n            //         if (n1 + X <= k || n2 - X >= 0)\n            //             ++prevOps;\n            //         else\n            //             prevOps += 2;\n            //     }\n            // }\n            while (!pq.empty() && pq.top() < X) {\n                pq.pop();\n                ++prevOps;\n            }\n            \n            totalDiffs -= it->second.size();\n            // totalDiffs is the number of the differences remaining to come in the loop\n            // bade wale diffs require only 1 operation, ie all the differences that are yet to come in the loop\n            ans = min(ans, totalDiffs + prevOps);\n            prevOps += it->second.size();\n            \n            // printf(\"ans = %d, prevOps = %d\\n\", ans, prevOps);\n        }\n        return ans;\n    }\n};",
    "submit_ts": "1721488980",
    "subm_id": "1327439089"
}