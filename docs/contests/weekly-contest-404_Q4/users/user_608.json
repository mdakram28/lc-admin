{
    "username": "ddveloper",
    "submission": "class Solution:\n    def minimumDiameterAfterMerge(self, A: List[List[int]], B: List[List[int]]) -> int:\n        \n        self.far = (0, 0)\n        \n        def dfs(G, a, seen, dis):\n            \n            if dis > self.far[0]:\n                self.far = (dis, a)\n                \n            for b in G[a]:\n                if b not in seen:\n                    seen.add(b)\n                    dfs(G, b, seen, dis + 1)\n                \n        \n        def getLongest(X):\n            G = defaultdict(dict)\n            for a, b in X:\n                G[a][b] = 1\n                G[b][a] = 1\n            \n            self.far = (0, 0)\n            dfs(G, 0, set([0]), 0)\n            node = self.far[1]\n            dfs(G, node, set([node]), 0)\n            return self.far[0]\n        \n        x, y = getLongest(A), getLongest(B)\n        \n        print(x, y)\n        \n        if x % 2 == 0 and y % 2 == 0:\n            return max(x, y, x // 2 + y // 2 + 1)\n        if x % 2 == 0:\n            return max(x, y, x // 2 + y // 2 + 1, x // 2 + (y - y // 2) + 1)\n        if y % 2 == 0:\n            return max(x, y, y // 2 + x // 2 + 1, y // 2 + (x - x // 2) + 1)\n        a, b = x // 2, x - x // 2\n        c, d = y // 2, y - y // 2\n        a, b = (b, a) if a > b else (a, b)\n        c, d = (d, c) if c > d else (c, d)\n        z = max(a, b) + max(c, d) + 1\n        \n        return max(x, y, z)",
    "submit_ts": "1719719874",
    "subm_id": "1304452783"
}