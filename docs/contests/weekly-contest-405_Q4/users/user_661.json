{
    "username": "Anshuman-3000",
    "submission": "class Solution {\npublic:\n    struct TrieNode {\n        TrieNode* children[26] = {};\n        vector<int> indices;\n    };\n    \n    TrieNode* buildTrie(vector<string>& words) {\n        TrieNode* root = new TrieNode();\n        for (int i = 0; i < words.size(); ++i) {\n            TrieNode* node = root;\n            for (char c : words[i]) {\n                if (!node->children[c - 'a']) {\n                    node->children[c - 'a'] = new TrieNode();\n                }\n                node = node->children[c - 'a'];\n            }\n            node->indices.push_back(i);\n        }\n        return root;\n    }\n    \n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int n = target.length();\n        vector<int> dp(n + 1, INT_MAX); // dp[i] will hold the minimum cost to form target[0..i-1]\n        dp[0] = 0; // Base case: cost to form an empty string is 0\n        \n        TrieNode* root = buildTrie(words);\n        \n        for (int i = 0; i < n; ++i) {\n            if (dp[i] == INT_MAX) continue; // If current state is unreachable, skip it\n            TrieNode* node = root;\n            for (int j = i; j < n; ++j) {\n                if (!node->children[target[j] - 'a']) break;\n                node = node->children[target[j] - 'a'];\n                for (int index : node->indices) {\n                    dp[j + 1] = min(dp[j + 1], dp[i] + costs[index]);\n                }\n            }\n        }\n        \n        return dp[n] == INT_MAX ? -1 : dp[n];\n    }\n};\n",
    "submit_ts": "1720321733",
    "subm_id": "1312330835"
}