{
    "username": "8symbols",
    "submission": "class Solution:\n    def minimumDistance(self, points: List[List[int]]) -> int:\n        sums = [(x + y, i) for i, (x, y) in enumerate(points)]\n        diffs = [(x - y, i) for i, (x, y) in enumerate(points)]\n\n        sums.sort(key=lambda x: x[0])\n        diffs.sort(key=lambda x: x[0])\n\n        def get_min_distance(removed_point):\n            sums_min_index = 1 if removed_point == sums[0][1] else 0\n            sums_max_index = -2 if removed_point == sums[-1][1] else -1\n            diffs_min_index = 1 if removed_point == diffs[0][1] else 0\n            diffs_max_index = -2 if removed_point == diffs[-1][1] else -1\n            return max(\n                sums[sums_max_index][0] - sums[sums_min_index][0],\n                diffs[diffs_max_index][0] - diffs[diffs_min_index][0],\n            )\n\n        return min(\n            get_min_distance(sums[0][1]),\n            get_min_distance(sums[-1][1]),\n            get_min_distance(diffs[0][1]),\n            get_min_distance(diffs[-1][1]),\n        )"
}