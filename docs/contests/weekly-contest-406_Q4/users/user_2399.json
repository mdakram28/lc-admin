{
    "username": "pala1",
    "submission": "class Solution {\npublic:\n    long long minimumCost(int m, int n, vector<int>& horizontalCut, vector<int>& verticalCut) {\n          sort(horizontalCut.rbegin(), horizontalCut.rend());\n    sort(verticalCut.rbegin(), verticalCut.rend());\n\n    int hCount = 1;  // Number of vertical pieces (initially 1)\n    int vCount = 1;  // Number of horizontal pieces (initially 1)\n    int i = 0, j = 0;\n    long long  minCost = 0;\n\n    // Process the cuts in a greedy manner\n    while (i < horizontalCut.size() && j < verticalCut.size()) {\n        if (horizontalCut[i] >= verticalCut[j]) {\n            // Perform a horizontal cut\n            minCost += horizontalCut[i] * vCount;\n            hCount++;\n            i++;\n        } else {\n            // Perform a vertical cut\n            minCost += verticalCut[j] * hCount;\n            vCount++;\n            j++;\n        }\n    }\n\n    // Process any remaining horizontal cuts\n    while (i < horizontalCut.size()) {\n        minCost += horizontalCut[i] * vCount;\n        hCount++;\n        i++;\n    }\n\n    // Process any remaining vertical cuts\n    while (j < verticalCut.size()) {\n        minCost += verticalCut[j] * hCount;\n        vCount++;\n        j++;\n    }\n\n    return minCost;\n    }\n};",
    "submit_ts": "1720926195",
    "subm_id": "1320278786"
}