{
    "username": "kirtisharma_112",
    "submission": "class TrieNode {\npublic:\n    unordered_map<char, TrieNode*> children;\n    int cost;\n    \n    TrieNode() : cost(-1) {}\n};\n\nclass Trie {\npublic:\n    TrieNode* root;\n    \n    Trie() {\n        root = new TrieNode();\n    }\n    \n    void insert(const string& word, int cost) {\n        TrieNode* node = root;\n        for (char c : word) {\n            if (!node->children.count(c)) {\n                node->children[c] = new TrieNode();\n            }\n            node = node->children[c];\n        }\n        if (node->cost == -1) {\n            node->cost = cost;\n        } else {\n            node->cost = min(node->cost, cost); // Store the minimum cost\n        }\n    }\n    \n    TrieNode* getRoot() {\n        return root;\n    }\n};\n\nclass Solution {\npublic:\n// int solve(int i, string& target, string& temp, unordered_map<string, int>& mp, unordered_map<int, int>& memo) {\n//         int n = target.size();\n//   if (i == n) {\n//     if(temp == \"\")\n//       return 1e9; // Target not formed\n//     else\n//       return 0;\n//   }\n//   if (memo.find(i) != memo.end()) {\n//     return memo[i];\n//   }\n\n//   temp.push_back(target[i]);\n//   int ans1 = INT_MAX, ans2 = INT_MAX;\n\n//   if (mp.find(temp) != mp.end()) {\n//     int cost = mp[temp];\n//     string temp2 = \"\";\n//     ans1 = cost + solve(i + 1, target, temp2, mp, memo);\n//   }\n\n//   ans2 = solve(i + 1, target, temp, mp, memo);\n\n//   temp.pop_back(); // Remove the last character\n//   memo[i] = min(ans1, ans2);\n//   return memo[i];\n//     }\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n         int n = target.size();\n        vector<int> dp(n + 1, INT_MAX);\n        dp[0] = 0; // No cost to build an empty string\n        \n        Trie trie;\n        for (int i = 0; i < words.size(); ++i) {\n            trie.insert(words[i], costs[i]);\n        }\n        \n        for (int i = 0; i < n; ++i) {\n            if (dp[i] == INT_MAX) continue; // If current prefix is not reachable, skip\n            TrieNode* node = trie.getRoot();\n            for (int j = i; j < n; ++j) {\n                if (!node->children.count(target[j])) break;\n                node = node->children[target[j]];\n                if (node->cost != -1) {\n                    dp[j + 1] = min(dp[j + 1], dp[i] + node->cost);\n                }\n            }\n        }\n        \n        return dp[n] == INT_MAX ? -1 : dp[n];\n    }\n};",
    "submit_ts": "1720323563",
    "subm_id": "1312378596"
}