{
    "username": "Nikolai_Edkov",
    "submission": "class Solution {\npublic:\n    struct Circle{\n        int x, y, r;\n        bool right = false;\n        bool left = false;\n        bool top = false;\n        bool bot = false;\n        int id;\n        vector <int> neigh;\n        Circle (int x, int y, int r, int X, int Y, int id){\n            this -> x = x;\n            this -> y = y;\n            this -> r = r;\n            this -> id = id;\n            if (x + r >= X){\n                right = true;\n            }\n            if (x - r <= 0){\n                left = true;\n            }\n            if (y + r >= Y){\n                top = true;\n            }\n            if (y - r <= 0){\n                bot = true;\n            }\n        }\n        void are_neigh(Circle & c){\n            long long dx = x - c.x;\n            long long dy = y - c.y;\n            if (dy * dy + dx * dx <= (long long)(r + c.r) * (r + c.r)){\n                neigh.push_back(c.id);\n                c.neigh.push_back(id);\n            }\n        }\n    };\n    bool canReachCorner(int X, int Y, vector<vector<int>>& circles) {\n        vector <Circle> my_circles;\n        int n = circles.size();\n        for (int i = 0; i < n; ++i){\n            int x = circles[i][0];\n            int y = circles[i][1];\n            int r = circles[i][2];\n            my_circles.push_back(Circle(x, y, r, X, Y, i));\n        }\n        for (int i = 0; i < n; ++i){\n            for (int j = i + 1; j < n; ++j){\n                my_circles[i].are_neigh(my_circles[j]);\n            }\n        }\n        set <int> all_been;\n        for (int i = 0; i < n; ++i){\n            queue <int> q;\n            if (all_been.find(i) == all_been.end()){\n                q.push(i);\n                all_been.insert(i);\n                set <int> s;\n                s.insert(i);\n                while (q.size() > 0){\n                    int now = q.front();\n                    for (int el: my_circles[now].neigh){\n                        all_been.insert(el);\n                        if (s.find(el) == s.end()){\n                            q.push(el);\n                            s.insert(el);\n                        }\n                    }\n                    q.pop();\n                }\n                bool top = false;\n                bool right = false;\n                bool left = false;\n                bool bot = false;\n                for (int el : s){\n                    Circle & c = my_circles[el];\n                    top = top || c.top;\n                    bot = bot || c.bot;\n                    right = right || c.right;\n                    left = left || c.left;\n                }\n                if (left && right || top && bot || bot && left || top && right){\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n};",
    "submit_ts": "1722137925",
    "subm_id": "1335777427"
}