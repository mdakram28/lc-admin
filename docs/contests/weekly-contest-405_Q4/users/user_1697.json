{
    "username": "mking01",
    "submission": "class Solution {\npublic:\nclass TrieNode {\npublic:\n    unordered_map<char, TrieNode*> children;\n    int cost;\n    TrieNode() : cost(-1) {}\n};\n\nclass Trie {\npublic:\n    TrieNode* root;\n    Trie() { root = new TrieNode(); }\n    \n    void insert(const string& word, int cost) {\n        TrieNode* node = root;\n        for (char ch : word) {\n            if (node->children.find(ch) == node->children.end()) {\n                node->children[ch] = new TrieNode();\n            }\n            node = node->children[ch];\n        }\n        if (node->cost == -1) {\n            node->cost = cost;\n        } else {\n            node->cost = min(node->cost, cost);\n        }\n    }\n    \n    int getCost(const string& word) {\n        TrieNode* node = root;\n        for (char ch : word) {\n            if (node->children.find(ch) == node->children.end()) {\n                return -1;\n            }\n            node = node->children[ch];\n        }\n        return node->cost;\n    }\n};\n\n    int minimumCost(string s, vector<string>& w, vector<int>& c) {\n       int n = s.length();\n        Trie trie;\n        for (int i = 0; i < w.size(); ++i) {\n            trie.insert(w[i], c[i]);\n        }\n        \n        vector<int> dp(n + 1, INT_MAX);\n        dp[0] = 0;\n\n        for (int i = 0; i < n; ++i) {\n            if (dp[i] == INT_MAX) continue;\n            TrieNode* node = trie.root;\n            for (int j = i; j < n; ++j) {\n                if (node->children.find(s[j]) == node->children.end()) break;\n                node = node->children[s[j]];\n                if (node->cost != -1) {\n                    dp[j + 1] = min(dp[j + 1], dp[i] + node->cost);\n                }\n            }\n        }\n\n            if(dp[n]==INT_MAX) return -1;\n    return dp[n];\n\n    }\n};",
    "submit_ts": "1720324212",
    "subm_id": "1312394199"
}