{
    "username": "prin100603",
    "submission": "class CreateSegmentTree {\nprivate:\n    vector<int> tree;\n    int size;\n\n    void make(const vector<int>& arr, int node, int s, int e) {\n        if (s == e) {\n            tree[node] = arr[s];\n        } else {\n            int mid = (s + e) / 2;\n            make(arr, 2 * node + 1, s, mid);\n            make(arr, 2 * node + 2, mid + 1, e);\n            tree[node] = tree[2 * node + 1] & tree[2 * node + 2];\n        }\n    }\n\n    int raq(int node, int s, int e, int left, int right) const {\n        if (right < s || e < left) {\n            return INT_MAX;\n        }\n        if (left <= s && e <= right) {\n            return tree[node];\n        }\n        int mid = (s + e) / 2;\n        int left_result = raq(2 * node + 1, s, mid, left, right);\n        int right_result = raq(2 * node + 2, mid + 1, e, left, right);\n        return left_result & right_result;\n    }\n\npublic:\n    CreateSegmentTree(const vector<int>& arr) {\n        size = arr.size();\n        tree.resize(4 * size);\n        make(arr, 0, 0, size - 1);\n    }\n\n    int query(int left, int right) const {\n        return raq(0, 0, size - 1, left, right);\n    }\n};\n\nclass Solution {\n    int myabs(int a, int b) const {\n        return abs(a - b);\n    }\npublic:\n    int minimumDifference(vector<int>& nums, int k) {\n        int n = nums.size();\n        CreateSegmentTree obj(nums);\n        int ans = INT_MAX;\n\n        for (int i = 0; i < n; ++i) {\n            int left = i - 1, right = n - 1;\n            while (right - left > 1) {\n                int mid = (left + right) / 2;\n                if (obj.query(i, mid) >= k)\n                    left = mid;\n                else\n                    right = mid;\n            }\n            if (left != i - 1)\n                ans = min(ans, myabs(obj.query(i, left), k));\n            ans = min(ans, myabs(k, obj.query(i, right)));\n        }\n        return ans;\n    }\n};",
    "submit_ts": 1717300725.0
}