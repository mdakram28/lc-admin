{
    "username": "samonkeys",
    "submission": "class SegTree {\npublic:\n    vector<int> tree;\n    int n;\n\n    SegTree(vector<int>& nums) {\n        n = nums.size();\n        tree.resize( 4 * n );\n        build( nums, 0, 0, n - 1 );\n    }\n\n    int query(int l, int r) {\n        return query( 0, 0, n - 1, l, r );\n    }\n\nprivate:\n    void build(vector<int>& nums, int node, int start, int end) {\n        if( start == end ) {\n            tree[ node ] = nums[ start ];\n        }\n        else {\n            int mid = ( start + end ) / 2;\n            build( nums, 2 * node + 1, start, mid );\n            build( nums, 2 * node + 2, mid + 1, end );\n            tree[ node ] = tree[ 2 * node + 1 ] & tree[ 2 * node + 2 ];\n        }\n    }\n    \n    int query(int node, int start, int end, int l, int r) {\n        if( r < start || end < l ) {\n            return INT_MAX;\n        }\n        if( l <= start && end <= r ) {\n            return tree[ node ];\n        }\n\n        int mid = ( start + end ) / 2;\n        int v1 = query( 2 * node + 1, start, mid, l, r );\n        int v2 = query( 2 * node + 2, mid + 1, end, l, r );\n\n        return v1 & v2;\n    }\n};\n\nclass Solution {\npublic:\n    int minimumDifference(vector<int>& nums, int k) {\n        int n = nums.size();\n        SegTree tree( nums );\n        int ans = INT_MAX;\n\n        for( int i = 0; i < n; ++i ) {\n            int l = i, r = n - 1;\n            while( l <= r ) {\n                int mid = ( l + r ) / 2;\n                int val = tree.query( i, mid );\n                ans = min( ans, abs( val - k ) );\n                if( val >= k ) {\n                    l = mid + 1;\n                }                    \n                else {\n                    r = mid - 1;\n                }\n            }\n        }\n\n        return ans;\n    }\n};",
    "submit_ts": 1717299255.0
}