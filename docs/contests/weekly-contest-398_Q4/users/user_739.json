{
    "username": "realstar",
    "submission": "class Solution {\n    public int waysToReachStair(int k) {\n        int need = k - 1;\n        int result = 0;\n        for (int i = 0; i < 32; i++) {\n            int n = (int) Math.pow(2, i) - 1;\n            if (0 <= n - need && n - need <= i + 1)\n                result += (int) ncr(i + 1, n - need);\n        }\n        return result;\n    }\n\n\t\n\tprivate static long ncr(int n, int k)\n\t{\n\t    long ans = 1;\n\t    k = k > n - k ? n - k : k;\n\t    for (int j = 1; j <= k; j++, n--)\n\t    {\n\t        if(n % j == 0) {\n\t            ans = (ans * n / j);\n\t        } else if (ans % j == 0) {\n\t            ans = ans / j * n;\n\t        } else {\n\t            ans = (ans * n) / j;\n\t        }\n\t    }\n\t    return ans;\n\t}\n}",
    "submit_ts": "1716089129",
    "subm_id": "1261833887"
}