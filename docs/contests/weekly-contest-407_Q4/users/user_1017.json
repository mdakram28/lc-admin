{
    "username": "Ir1descent",
    "submission": "class Solution {\n    public long minimumOperations(int[] nums, int[] target) {\n        int n = nums.length;\n        int[] diff = new int[n];\n        for(int i = 0; i < n; i++) {\n            diff[i] = target[i] - nums[i];\n        }\n        return minimumOperations(diff, 0, n - 1);\n    }\n\n    public long minimumOperations(int[] diff, int left, int right) {\n        long res = 0;\n        if(left == right) {\n            return Math.abs(diff[left]);\n        }\n        if(left > right) {\n            return 0;\n        }\n        for(int i = left; i <= right; i++) {\n            if(diff[i] == 0) {\n                continue;\n            }\n            int sign = diff[i] > 0 ? 1 : -1;\n            int minValue = Math.abs(diff[i]);\n            // Find the subarray with the same sign\n            int j = i;\n            while (j <= right && diff[j] * sign > 0) {\n                minValue = Math.min(minValue, Math.abs(diff[j]));\n                j++;\n            }\n            //[i, j - 1]\n            res += minValue;\n            for(int idx = i; idx <= j - 1; idx++) {\n                diff[idx] = diff[idx] < 0 ? diff[idx] + minValue : diff[idx] - minValue;\n            }\n            res += minimumOperations(diff, i, j - 1);\n            i = j - 1;\n        }\n        return res;\n    }\n}",
    "submit_ts": "1721532253",
    "subm_id": "1327981435"
}