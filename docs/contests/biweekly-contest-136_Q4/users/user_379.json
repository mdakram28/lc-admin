{
    "username": "Sayuyere",
    "submission": "from functools import lru_cache\nfrom collections import defaultdict\n\nclass Solution:\n    def timeTaken(self, edges: List[List[int]]) -> List[int]:\n        tracker = defaultdict(list)\n        for i in edges:\n            tracker[i[0]].append(i[1])\n            tracker[i[1]].append(i[0])\n        def g(i):\n            return 1+(i+1)%2\n        @lru_cache(None)\n        def dp(i,prev=None):\n            res = 0 if prev==None else g(i)\n            m = 0\n            for v in tracker[i]:\n                if v==prev:continue\n                m = max(m,dp(v,i))\n            return m+res\n        main_values = [0 for i in range(len(edges)+1)]\n        def dfs(i,prev=None,val=0):\n            nonlocal main_values\n\n            items = []\n            s = 0\n            for v in tracker[i]:\n                if v==prev:continue\n                value = dp(v,i)\n                s = max(s,value)\n                items.append((value,v))\n            main_values[i] = max(val,s)\n            # print(items,i,main_values[i],val,stx,s)\n            items.sort()\n            for v in items:\n                l = g(i)+(max(val,items[-1][0]) if v!=items[-1] else (max(val,items[-2][0]) if len(items)>=2 else val))\n                if v!=items[-1]:\n                    dfs(v[1],i,l)\n                else:\n                    dfs(v[1],i,l)\n        (dp(0))\n        dfs(0)\n        return(main_values)",
    "submit_ts": "1722700679",
    "subm_id": "1343249392"
}