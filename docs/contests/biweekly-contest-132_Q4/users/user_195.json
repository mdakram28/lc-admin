{
    "username": "user3593Z",
    "submission": "class Solution {\n    public int maximumLength(int[] nums, int k) {\n        \n        int n = nums.length;\n        \n        List<Map<Integer, Integer>> mapList = new ArrayList<>();\n        for (int i = 0; i <= k; i++) {\n            mapList.add(new HashMap<>());\n        }\n        \n        List<PriorityQueue<int[]>> pqList = new ArrayList<>();\n        for (int i = 0; i <= k; i++) {\n            pqList.add(new PriorityQueue<>((a, b) -> a[1] - b[1]));\n        }\n        \n        int result = 0;\n        \n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j <= k && j <= i; j++) {\n                int r = 1;\n                Map<Integer, Integer> tmSame = mapList.get(j);\n                r = Math.max(r, tmSame.getOrDefault(nums[i], 0) + 1);\n                if (j > 0) {\n                    PriorityQueue<int[]> pq = pqList.get(j - 1);\n                    for (int[] last : pq) {\n                        if (last[0] != nums[i]) r = Math.max(r, last[1] + 1);\n                    }\n                }\n                result = Math.max(result, r);\n                tmSame.put(nums[i], r);\n                \n                PriorityQueue<int[]> cpq = pqList.get(j);\n                cpq.offer(new int[]{nums[i], r});\n                while (cpq.size() > 2) cpq.poll();\n            }\n        }\n        \n        return result;\n        \n    }\n}",
    "submit_ts": 1717860864.0
}