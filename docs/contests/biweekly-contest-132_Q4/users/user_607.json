{
    "username": "ykings12",
    "submission": "class Solution {\nprivate:\n    void f(const vector<int>& nums, int k, vector<vector<int>>& dp, vector<int>& maxi, vector<unordered_map<int, int>>& maxi_map) {\n        int n = nums.size();\n        for (int i = 0; i < n; ++i) {\n            for (int j = 0; j <= k; ++j) {\n                for (int l = 0; l < j; ++l) {\n                    dp[i][j] = max(dp[i][j], 1 + maxi[l]);\n                }\n                if (maxi_map[j].find(nums[i]) != maxi_map[j].end()) {\n                    dp[i][j] = max(dp[i][j], 1 + maxi_map[j][nums[i]]);\n                }\n            }\n            update(nums[i], k, dp[i], maxi, maxi_map);\n        }\n    }\n\n    void update(int num, int k, vector<int>& dp_row, vector<int>& maxi, vector<unordered_map<int, int>>& maxi_map) {\n        for (int j = 0; j <= k; ++j) {\n            maxi[j] = max(maxi[j], dp_row[j]);\n            maxi_map[j][num] = max(maxi_map[j][num], dp_row[j]);\n        }\n    }\n\n    int ans(const vector<vector<int>>& dp) {\n        int ans = 1;\n        for (const auto& row : dp) {\n            for (int val : row) {\n                ans = max(ans, val);\n            }\n        }\n        return ans;\n    }\n    \n    public:\n    int maximumLength(vector<int>& nums, int k) {\n        int n = nums.size();\n        vector<vector<int>> dp(n, vector<int>(k + 1, 1));\n        int ans = 1;\n        vector<int> maxi(k + 1, -1);\n        vector<unordered_map<int, int>> maxi_map(k + 1);\n\n        f(nums, k, dp, maxi, maxi_map);\n\n        return this->ans(dp); \n    }\n};\n",
    "submit_ts": 1717862065.0
}