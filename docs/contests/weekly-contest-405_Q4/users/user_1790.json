{
    "username": "Braga310",
    "submission": "#include <vector>\n#include <string>\n#include <unordered_map>\n#include <algorithm>\nusing namespace std;\n\nclass TrieNode {\npublic:\n    unordered_map<char, TrieNode*> children;\n    vector<int> wordIndices;  // Store indices of words ending at this node\n    \n    TrieNode() {}\n};\n\nclass Trie {\npublic:\n    TrieNode* root;\n    \n    Trie() {\n        root = new TrieNode();\n    }\n    \n    void insert(const string& word, int index) {\n        TrieNode* node = root;\n        for (char ch : word) {\n            if (node->children.find(ch) == node->children.end()) {\n                node->children[ch] = new TrieNode();\n            }\n            node = node->children[ch];\n        }\n        node->wordIndices.push_back(index);\n    }\n};\n\nclass Solution {\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int n = target.size();\n        Trie trie;\n        \n        // Insert words into Trie with their index\n        for (int i = 0; i < words.size(); ++i) {\n            trie.insert(words[i], i);\n        }\n        \n        vector<int> dp(n + 1, 1e9);\n        dp[0] = 0; // Base case: cost to form an empty string is 0\n\n        for (int i = 0; i < n; ++i) {\n            if (dp[i] == 1e9) continue; // Skip unreachable states\n            TrieNode* node = trie.root;\n            for (int j = i; j < n; ++j) {\n                if (node->children.find(target[j]) == node->children.end()) {\n                    break;\n                }\n                node = node->children[target[j]];\n                for (int idx : node->wordIndices) {\n                    dp[j + 1] = min(dp[j + 1], dp[i] + costs[idx]);\n                }\n            }\n        }\n        \n        return dp[n] == 1e9 ? -1 : dp[n];\n    }\n};\n\n// Example usage\n",
    "submit_ts": "1720323884",
    "subm_id": "1312386379"
}