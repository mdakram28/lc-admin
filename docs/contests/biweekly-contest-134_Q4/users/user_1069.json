{
    "username": "nu-li-xue-xi-de-xiao-g",
    "submission": "# -*- coding: utf-8 -*-\nfrom typing import List, Tuple, Optional\nfrom collections import deque, Counter\nfrom queue import PriorityQueue\nimport math\nfrom functools import lru_cache\nfrom sortedcontainers import SortedDict, SortedSet\nimport random\nimport copy\nimport bisect\n\nimport sys\nsys.setrecursionlimit(9999999)\n\nMOD = 10**9 + 7\n\n\n\n\n\n\nN = 200005           # \u533a\u95f4\u6700\u5927\u5927\u5c0f\uff0c\u533a\u95f4\u7684\u5de6\u7aef\u70b9\u6700\u5c0f\u53ef\u4ee5\u662f0\nMAX_POW = 21        # \u6700\u5927\u76842\u7684\u6b21\u5e42\u6570\uff0c\u4fdd\u8bc12^MAX_POW > N \u5373\u53ef\nLog2 = [0] * (N+1)\nLog2[1] = 0\nLog2[2] = 1\n\nfor i in range(3, N+1):\n    Log2[i] = Log2[i>>1] + 1\n\nclass RMQ:\n    # op\u662f\u4e00\u4e2a\u4e8c\u5143\u51fd\u6570\uff0c\u6c42\u6700\u5927\u503c\u5c31\u4f20\u5165max, \u6c42\u6700\u5c0f\u503c\u5c31\u4f20\u5165min\n    def __init__(self, data, op):\n        self.__data = data\n        self.op = op\n        self.__build()\n\n    def __build(self):\n        d = self.__data\n        n = len(d)\n        op = self.op\n\n        # dp(i, j)\u8868\u793a\u4ecei\u4f4d\u7f6e\u5f00\u59cb\uff0c\u957f\u5ea6\u4e3a2^j\u7684\u533a\u95f4\u4e2d\u7684\u6700\u5927\u503c\n        self.__dp = [[None] * (MAX_POW + 1) for _ in range(n)]\n        for i in range(n-1, -1, -1):\n            self.__dp[i][0] = d[i]\n            j = 1\n            while i + (1<<j) - 1 <= n-1:\n                self.__dp[i][j] = op( self.__dp[i][j-1], self.__dp[i+(1<<(j-1))][j-1] )\n                j += 1\n\n    # \u67e5\u8be2\u95ed\u533a\u95f4[L, R]\u4e2d\u7684\u6781\u503c, \u4e0b\u6807\u4ece0\u5f00\u59cb\n    def get_range_val(self, L, R):\n        op = self.op\n        max_pow = Log2[R-L+1]\n        return op(self.__dp[L][max_pow], self.__dp[R-(1<<max_pow)+1][max_pow])\n\n\ndef and_oper(x, y):\n    return x & y;\n\n\nclass Solution:\n    def countSubarrays(self, nums: List[int], k: int) -> int:\n\n        st = RMQ(nums, and_oper)\n\n        n = len(nums)\n        ans = 0\n        for i in range(n):\n            if nums[i] < k:\n                continue\n\n            l, r = i, n-1\n            p1 = None\n            while l <= r:\n                mid = (l+r) >> 1\n\n                x = st.get_range_val(i, mid)\n                if x < k:\n                    r = mid-1\n                elif x > k:\n                    l = mid+1\n                else:\n                    p1 = mid\n                    r = mid-1\n\n            if p1 is None:\n                continue\n\n\n            l, r = p1, n-1\n            while l <= r:\n                mid = (l + r) >> 1\n\n                x = st.get_range_val(i, mid)\n                if x < k:\n                    r = mid - 1\n                else:\n                    p2 = mid\n                    l = mid + 1\n\n            ans += p2-p1+1\n\n        return ans",
    "submit_ts": "1720280599",
    "subm_id": "544572595"
}