{
    "username": "yadla_mani",
    "submission": "\nclass Solution {\npublic:\n    int minFlips(vector<vector<int>>& grid) {\n        int rows = grid.size(), cols = grid[0].size();\n        int flips = 0;\n\n        if (rows % 2 == 1 && cols % 2 == 1) {\n            flips += checkCenter(grid, rows, cols);\n        }\n\n        vector<int> counts = processCentralLines(grid, rows, cols);\n        flips += calculateLineFlips(counts);\n\n        flips += processQuadrants(grid, rows, cols);\n\n        return flips;\n    }\n\nprivate:\n    int checkCenter(const vector<vector<int>>& grid, int rows, int cols) {\n        return grid[rows / 2][cols / 2];\n    }\n\n    vector<int> processCentralLines(const vector<vector<int>>& grid, int rows, int cols) {\n        vector<int> counts(3, 0);\n\n        if (rows % 2 == 1) {\n            countCentralRow(grid, rows, cols, counts);\n        }\n\n        if (cols % 2 == 1) {\n            countCentralColumn(grid, rows, cols, counts);\n        }\n\n        return counts;\n    }\n\n    void countCentralRow(const vector<vector<int>>& grid, int rows, int cols, vector<int>& counts) {\n        int midRow = rows / 2;\n        int left = 0, right = cols - 1;\n        while (left < right) {\n            int sum = grid[midRow][left] + grid[midRow][right];\n            counts[sum]++;\n            left++;\n            right--;\n        }\n    }\n\n    void countCentralColumn(const vector<vector<int>>& grid, int rows, int cols, vector<int>& counts) {\n        int midCol = cols / 2;\n        int top = 0, bottom = rows - 1;\n        while (top < bottom) {\n            int sum = grid[top][midCol] + grid[bottom][midCol];\n            counts[sum]++;\n            top++;\n            bottom--;\n        }\n    }\n\n    int calculateLineFlips(const vector<int>& counts) {\n        if (counts[2] % 2 == 1) {\n            return (counts[1] > 0) ? counts[1] : 2;\n        }\n        return counts[1];\n    }\n\n    int processQuadrants(const vector<vector<int>>& grid, int rows, int cols) {\n        int flips = 0;\n        for (int r = 0; r < rows / 2; ++r) {\n            for (int c = 0; c < cols / 2; ++c) {\n                int topLeft = grid[r][c];\n                int bottomLeft = grid[rows - 1 - r][c];\n                int topRight = grid[r][cols - 1 - c];\n                int bottomRight = grid[rows - 1 - r][cols - 1 - c];\n\n                int totalOnes = topLeft + bottomLeft + topRight + bottomRight;\n                if (totalOnes != 0 && totalOnes != 4) {\n                    flips += min(totalOnes, 4 - totalOnes);\n                }\n            }\n        }\n        return flips;\n    }\n};",
    "submit_ts": "1722699863",
    "subm_id": "1343224667"
}