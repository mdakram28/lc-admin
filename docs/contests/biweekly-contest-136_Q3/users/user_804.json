{
    "username": "mewadahariom2000",
    "submission": "class Solution {\npublic:\n    int minchanges(vector<vector<int> > mat) \n{ \n    // Rows in the matrix \n    \n    int N = mat.size(); \n  \n    // Columns in the matrix \n    int M = mat[0].size(); \n  \n    int i, j, ans = 0, x; \n    map<int, int> mp; \n    // Traverse the given matrix \n    for (i = 0; i < N / 2; i++) { \n        for (j = 0; j < M / 2; j++) { \n            mp[(mat[i][M - 1 - j])]++; \n            mp[(mat[i][j])]++; \n            mp[(mat[N - 1 - i][M - 1 - j])]++; \n            mp[(mat[N - 1 - i][j])]++; \n  \n            x = 0; \n  \n            // Iterate over the map \n            for (auto it = mp.begin(); \n                 it != mp.end(); it++) { \n                x = max(x, it->second); \n            } \n  \n            // Min changes to do to make all \n            ans = ans + 4 - x; \n  \n            // Four elements equal \n            mp.clear(); \n        } \n    } \n  \n    // Make the middle row palindromic \n    int flip = 0;\n    int ones = 0;\n    if (N % 2 == 1) { \n        for (i = 0; i < M / 2; i++) { \n            if (mat[N / 2][i] \n                != mat[N / 2][M - 1 - i])\n                flip++;\n            else if(mat[N / 2][i]==1) ones+=2;\n        }\n    }\n    if (M % 2 == 1) { \n        for (i = 0; i < N / 2; i++) { \n  \n            // Make the middle column \n            // palindromic \n            if (mat[i][M / 2] \n                != mat[N - 1 - i][M / 2]) \n                flip++; \n            else if(mat[i][M / 2]==1) ones+=2;\n        } \n    }\n    if(N%2 and M%2)\n    ans+=mat[N/2][M/2];\n    if(flip==0 and ones%4!=0) ans+=2; \n    return ans + flip; \n} \n    int minFlips(vector<vector<int>>& grid) {\n        return minchanges(grid);\n    }\n};",
    "submit_ts": "1722698438",
    "subm_id": "1343180632"
}