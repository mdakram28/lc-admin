{
    "username": "anurag_6787",
    "submission": "class Solution {\n\npublic:\n    int bfs(vector<vector<int>> &graph, int start, int t1, int t2, int nodes) {\n    queue<int> q;\n    vector<int> visited(nodes + 4, 0);\n    q.push(start);\n    visited[start] = 1;\n    \n    while (!q.empty()) {\n        int u = q.front();\n        q.pop();\n        for (int v : graph[u]) {\n            if (!visited[v]) {\n                q.push(v);\n                visited[v] = 1;\n            }\n        }\n    }\n    return visited[t1] || visited[t2];\n}\n    \n    bool canReachCorner(int X, int Y, vector<vector<int>>& circ2) {\n         vector<pair<pair<int, int>, int>> circ(circ2.size());\n         vector<vector<int>> graph(circ2.size() + 4);\n        int num_circ=circ2.size();\n        \n        for (int i = 0; i < num_circ; ++i) {\n            circ[i].first.first=circ2[i][0];\n            circ[i].first.second=circ2[i][1];\n            circ[i].second=circ2[i][2];\n        }\n        \n        \n        \n         for (int i = 0; i < num_circ; ++i) {\n             \n            if (circ[i].first.first <= circ[i].second) {\n                graph[num_circ].push_back(i);\n                graph[i].push_back(num_circ);\n            }\n            if (X - circ[i].first.first <= circ[i].second) {\n                graph[num_circ + 2].push_back(i);\n                graph[i].push_back(num_circ + 2);\n            }\n\n            if (Y - circ[i].first.second <= circ[i].second) {\n                graph[num_circ + 3].push_back(i);\n                graph[i].push_back(num_circ + 3);\n            }    \n\n            if (circ[i].first.second <= circ[i].second) {\n                graph[num_circ + 1].push_back(i);\n                graph[i].push_back(num_circ + 1);\n            }\n            \n            for (int j = i + 1; j < num_circ; ++j) {\n                double dist = sqrt(pow(circ[i].first.first - circ[j].first.first, 2) +\n                                       pow(circ[i].first.second - circ[j].first.second, 2));\n                int radsum = circ[i].second + circ[j].second;\n                if (radsum >= dist) {\n                    graph[i].push_back(j);\n                    graph[j].push_back(i);\n                }\n            }\n        }\n        \n        int is_blocked = 0;\nis_blocked = max(is_blocked, bfs(graph, num_circ, num_circ + 1, num_circ + 2, num_circ + 4)); \n    is_blocked = max(is_blocked, bfs(graph, num_circ + 3, num_circ + 2, num_circ + 1, num_circ + 4)); \n        if (is_blocked) return false;\n        return true;\n       \n        \n       \n    }\n};",
    "submit_ts": "1722137397",
    "subm_id": "1335762601"
}