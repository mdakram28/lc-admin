{
    "username": "wayNoway21",
    "submission": "class Solution {\npublic:\n    int minFlips(vector<vector<int>>& grid) {\n        int numRows = grid.size();\n        int numCols = grid[0].size();\n        int flips = 0;\n\n        // Handle the center cell in case of odd dimensions\n        if (numRows % 2 == 1 && numCols % 2 == 1) {\n            if (grid[numRows / 2][numCols / 2] == 1) {\n                flips += 1;\n            }\n        }\n\n        // Vector to count the number of flips needed for each type of symmetry\n        vector<int> symmetryCounts(3, 0);\n\n        // Handle rows if the number of rows is odd\n        if (numRows % 2 == 1) {\n            int leftCol = 0;\n            int rightCol = numCols - 1;\n            while (leftCol < rightCol) {\n                int sum =\n                    grid[numRows / 2][leftCol] + grid[numRows / 2][rightCol];\n                symmetryCounts[sum] += 1;\n                leftCol += 1;\n                rightCol -= 1;\n            }\n        }\n\n        // Handle columns if the number of columns is odd\n        if (numCols % 2 == 1) {\n            int topRow = 0;\n            int bottomRow = numRows - 1;\n            while (topRow < bottomRow) {\n                int sum =\n                    grid[topRow][numCols / 2] + grid[bottomRow][numCols / 2];\n                symmetryCounts[sum] += 1;\n                topRow += 1;\n                bottomRow -= 1;\n            }\n        }\n\n        // Adjust the flips required based on the counts of required symmetry\n        // flips\n        if (symmetryCounts[2] % 2 == 1) {\n            if (symmetryCounts[1] > 0) {\n                flips+= symmetryCounts[1];\n            } else {\n                flips += 2;\n            }\n        } else {\n            flips+= symmetryCounts[1];\n        }\n\n        // Handle the remaining cells in the grid\n        for (int row = 0; row < numRows / 2; ++row) {\n            for (int col = 0; col < numCols / 2; ++col) {\n                int topLeft = grid[row][col];\n                int bottomLeft = grid[numRows - 1 - row][col];\n                int topRight = grid[row][numCols - 1 - col];\n                int bottomRight = grid[numRows - 1 - row][numCols - 1 - col];\n\n                int total = topLeft + bottomLeft + topRight + bottomRight;\n\n                if (total != 0 && total != 4) {\n                    flips+= min(total, 4 - total);\n                }\n            }\n        }\n\n        return flips;\n    }\n};",
    "submit_ts": "1722700150",
    "subm_id": "1343233171"
}