{
    "username": "kmram0908",
    "submission": "class Solution:\n    def minimumDifference(self, nums: List[int], k: int) -> int:\n        bits = [0 for _ in range(32)]\n\n        def get_num_from_bits(k):\n            tmp = [1 if i == k else 0 for i in bits]\n            result = 0\n            for bit in tmp:\n                result = (result << 1) | bit\n            return result\n\n        def set_bits(num):\n            i = 31\n            while num and i >= 0:\n                if num & 1:  # Check if the least significant bit is set\n                    bits[i] += 1\n                num >>= 1  # Right shift to move to the next bit\n                i -= 1\n\n        def remove_bits(num):\n            i = 31\n            while num and i >= 0:\n                if num & 1:  # Check if the least significant bit is set\n                    bits[i] -= 1\n                num >>= 1  # Right shift to move to the next bit\n                i -= 1\n\n        l, r, window_size = 0, 1, 1\n        min_res = abs(k - nums[0])\n        set_bits(nums[0])\n        \n        while r < len(nums):\n            set_bits(nums[r])\n            r += 1\n            window_size += 1\n            val = get_num_from_bits(window_size)\n            min_res = min(min_res, abs(k - val))\n            while val < k:\n                remove_bits(nums[l])\n                window_size -= 1\n                val = get_num_from_bits(window_size)\n                min_res = min(min_res, abs(k - val))\n                l += 1\n\n        return min_res",
    "submit_ts": "1717300139",
    "subm_id": "1274834965"
}