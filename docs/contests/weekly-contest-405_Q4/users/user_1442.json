{
    "username": "HalleysComet",
    "submission": "struct Node\n{\n    Node* child[26]; //pointer array\n    int minCost;\n    Node(){\n        for( int i = 0; i < 26; i++){\n            child[i] = NULL;\n        }\n        minCost = 1e9;\n    }\n};\n\nclass Trie {\npublic:\nNode* root;\n    Trie() {\n        root=new Node();\n    }\n    \n    void insert(string word, int cost) {\n        Node* curr=root;\n        for(int i = 0; i<word.size() ; i++){\n            int idx= word[i]-'a';\n            if(curr->child[idx]==NULL){\n                curr->child[idx]=new Node();\n            }\n            curr= curr->child[idx];\n        }\n        curr->minCost = min(curr->minCost, cost);\n    }\n    \n    int minCost(string target) {\n        vector<int> DP(target.size(), 1e9 + 1);\n        for(int i = 0; i < target.size(); i++){\n            Node*cur= root;\n            int j = i;\n            while(cur != NULL && j < target.size())\n            {\n                int idx = target[j] - 'a';\n                cur = cur->child[idx];\n                if(cur == NULL)\n                    break;\n                DP[j] = min(DP[j], cur->minCost + (i > 0 ? DP[i - 1] : 0));\n                j++;\n            }\n        }\n        if(DP.back() == 1e9 + 1)\n            return -1;\n        return DP[target.size() - 1];\n    }\n};\n\nclass Solution {\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int n = words.size();\n        Trie tr;\n        for(int i = 0; i < n; i++)\n        {\n            tr.insert(words[i], costs[i]);\n        }\n        return tr.minCost(target);\n    }\n};",
    "submit_ts": "1720324203",
    "subm_id": "1312393986"
}