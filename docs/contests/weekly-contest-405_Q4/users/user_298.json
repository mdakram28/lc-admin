{
    "username": "pham_haerin",
    "submission": "class Solution {\n    static class TrieNode {\n        Map<Character, TrieNode> children = new HashMap<>();\n        int minCost = Integer.MAX_VALUE;  \n    }\n    \n    TrieNode root;\n\n    public Solution() {\n        root = new TrieNode();\n    }\n\n    private void insert(String word, int cost) {\n        TrieNode node = root;\n        for (char c : word.toCharArray()) {\n            node.children.putIfAbsent(c, new TrieNode());\n            node = node.children.get(c);\n        }\n        node.minCost = Math.min(node.minCost, cost);  \n    }\n\n    public int minimumCost(String target, String[] words, int[] costs) {\n        for (int i = 0; i < words.length; i++) {\n            insert(words[i], costs[i]);\n        }\n\n        int n = target.length();\n        int[] dp = new int[n + 1];\n        Arrays.fill(dp, Integer.MAX_VALUE);\n        dp[0] = 0;  \n\n        for (int i = 0; i < n; i++) {\n            if (dp[i] == Integer.MAX_VALUE) continue; \n            TrieNode node = root;\n            for (int j = i; j < n; j++) {\n                char c = target.charAt(j);\n                if (!node.children.containsKey(c)) break;\n                node = node.children.get(c);\n                if (node.minCost != Integer.MAX_VALUE) {\n                    dp[j + 1] = Math.min(dp[j + 1], dp[i] + node.minCost);\n                }\n            }\n        }\n\n        return dp[n] == Integer.MAX_VALUE ? -1 : dp[n];\n    }\n\n}",
    "submit_ts": "1720321157",
    "subm_id": "1312315071"
}