{
    "username": "Ayush_goyal_nitkkr",
    "submission": "#include <vector>\n#include <algorithm>\n#include <unordered_map>\n\nclass Solution {\npublic:\n int maximumLength(vector<int>& nums, int k) { \n    int n = nums.size(); \n    vector<vector<int>> dp(n, vector<int>(k + 1, 1)); \n    int max_length = 1; \n    vector<int> max_length_for_changes(k + 1, -1); \n    vector<map<int, int>> max_length_for_num_with_changes(k + 1); \n    \n    for (int i = 0; i < n; i++) { \n        updateDP(dp, max_length_for_changes, max_length_for_num_with_changes, nums[i], k, max_length, i); \n        updateMaxForChanges(max_length_for_changes, dp, k, i); \n        updateMaxForNumWithChanges(max_length_for_num_with_changes, dp, nums[i], k, i); \n    } \n    \n    return max_length; \n}\n\nvoid updateDP(vector<vector<int>>& dp, vector<int>& max_length_for_changes, vector<map<int, int>>& max_length_for_num_with_changes, int num, int k, int& max_length, int index) { \n    for (int changes = 0; changes <= k; changes++) { \n        for (int prev_changes = 0; prev_changes < changes; prev_changes++) { \n            dp[index][changes] = max(dp[index][changes], 1 + max_length_for_changes[prev_changes]); \n        } \n        if (max_length_for_num_with_changes[changes].find(num) != max_length_for_num_with_changes[changes].end()) { \n            dp[index][changes] = max(dp[index][changes], 1 + max_length_for_num_with_changes[changes][num]); \n        } \n        max_length = max(max_length, dp[index][changes]); \n    } \n}\n\nvoid updateMaxForChanges(vector<int>& max_length_for_changes, vector<vector<int>>& dp, int k, int index) { \n    for (int changes = 0; changes <= k; changes++) { \n        max_length_for_changes[changes] = max(max_length_for_changes[changes], dp[index][changes]); \n    } \n}\n\nvoid updateMaxForNumWithChanges(vector<map<int, int>>& max_length_for_num_with_changes, vector<vector<int>>& dp, int num, int k, int index) { \n    for (int changes = 0; changes <= k; changes++) { \n        max_length_for_num_with_changes[changes][num] = max(max_length_for_num_with_changes[changes][num], dp[index][changes]); \n    } \n}\n};\n",
    "submit_ts": 1717861543.0
}