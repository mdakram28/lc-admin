{
    "username": "fsyun",
    "submission": "class Solution {\n    class UF {\n        int[] g, sz;\n        UF(int n) {\n            g = new int[n];\n            sz = new int[n];\n            for (int i = 0; i < n; i++) {\n                g[i] = i;\n                sz[i] = 1;\n            }\n        }\n        int find(int x) {\n            if (g[x] != x)\n                g[x] = find(g[x]);\n            return g[x];\n        }\n        int size(int x) {\n            return sz[find(x)];\n        }\n        void union(int x, int y) {\n            int rx = find(x), ry = find(y);\n            if (rx != ry) {\n                if (sz[rx] >= sz[ry]) {\n                    g[ry] = rx;\n                    sz[rx] += sz[ry];\n                } else {\n                    g[rx] = ry;\n                    sz[ry] += sz[rx];\n                }\n            }\n        }\n    }\n    boolean f(int[] a, int[] b) {\n        double x1 = a[0], y1 = a[1], r1 = a[2], x2 = b[0], y2 = b[1], r2 = b[2];\n        double dx = Math.abs(x1 - x2), dy = Math.abs(y1 - y2);\n        return Math.sqrt(dx * dx + dy * dy) <= r1 + r2;\n    }\n    public boolean canReachCorner(int X, int Y, int[][] cs) {\n        int n = cs.length;\n        boolean[] a = new boolean[n], b = new boolean[n], c = new boolean[n], d = new boolean[n];\n        for (int i = 0; i < n; i++) {\n            int x = cs[i][0], y = cs[i][1], r = cs[i][2];\n            if (y - r <= 0)\n                a[i] = true;\n            if (x + r >= X)\n                b[i] = true;\n            if (y + r >= Y)\n                c[i] = true;\n            if (x - r <= 0)\n                d[i] = true;\n        }\n        UF uf = new UF(n);\n        for (int i = 0; i < n; i++)\n            for (int j = i + 1; j < n; j++)\n                if (f(cs[i], cs[j]))\n                    uf.union(i, j);\n        HashMap<Integer, HashSet<Integer>> h = new HashMap<>();\n        for (int i = 0; i < n; i++) {\n            int r = uf.find(i);\n            h.putIfAbsent(r, new HashSet<>());\n            if (a[i])\n                h.get(r).add(1);\n            if (b[i])\n                h.get(r).add(2);\n            if (c[i])\n                h.get(r).add(3);\n            if (d[i])\n                h.get(r).add(4);\n        }\n        //System.out.println(h.size());\n        for (int key : h.keySet()) {\n            HashSet<Integer> h2 = h.get(key);\n            if (h2.size() >= 3)\n                return false;\n            if (h2.size() == 2) {\n                if (!(h2.contains(1) && h2.contains(2) || h2.contains(3) && h2.contains(4)))\n                    return false;\n            }\n        }\n        return true;\n    }\n}\n",
    "submit_ts": "1722139132",
    "subm_id": "1335808726"
}