{
    "username": "Rainingcity",
    "submission": "class SegTree {\nprivate:\n    int n;\n    vector<int> v{};\n    void build(int idx, int l, int r, vector<int>& nums) {\n        if (l == r) {\n            v[idx] = nums[l];\n            return;\n        }\n        int mid = (l + r) >> 1;\n        int idxl = idx << 1;\n        build(idxl, l, mid, nums);\n        build(idxl + 1, mid + 1, r, nums);\n        v[idx] = v[idxl] + v[idxl + 1];\n        return;\n    }\n    void modify(int idx, int l, int r, int i, int x) {\n        if (l == r) {\n            v[idx] = x;\n            return;\n        }\n        int mid = (l + r) >> 1;\n        int idxl = idx << 1;\n        if (i > mid) {\n            modify(idxl + 1, mid + 1, r, i, x);\n        } else {\n            modify(idxl, l, mid, i, x);\n        }\n        v[idx] = v[idxl] + v[idxl + 1];\n    }\n    int get(int idx, int l, int r, int tl, int tr) {\n        if (l == tl && r == tr) {\n            return v[idx];\n        }\n        int mid = (l + r) >> 1;\n        int idxl = idx << 1;\n        if (tr <= mid) {\n            return get(idxl, l, mid, tl, tr);\n        } else if (tl > mid) {\n            return get(idxl + 1, mid + 1, r, tl, tr);\n        } else {\n            return get(idxl, l, mid, tl, mid) + get(idxl + 1, mid + 1, r, mid + 1, tr);\n        }\n    }\npublic:\n    SegTree(vector<int>& nums) {\n        n = nums.size();\n        v.clear();\n        v.resize(5 * n, 0);\n        build(1, 0, n - 1, nums);\n    }\n    void modify(int i, int x) {\n        modify(1, 0, n - 1, i, x);\n    }\n    int get(int l, int r) {\n        return get(1, 0, n - 1, l, r);\n    }\n};\n\nclass Solution {\nprivate:\n    bool isPeak(vector<int>& nums, int i) {\n        if (i <= 0 || i >= nums.size() - 1) return false;\n        return nums[i] > nums[i - 1] && nums[i] > nums[i + 1];\n    }\npublic:\n    vector<int> countOfPeaks(vector<int>& nums, vector<vector<int>>& queries) {\n        int n = nums.size();\n        vector<int> peaks(n, 0);\n        for(int i = 0; i < n; i++) {\n            peaks[i] = isPeak(nums, i);\n        }\n        SegTree st(peaks);\n        vector<int> ans{};\n        for(vector<int>& q: queries) {\n            int op = q[0];\n            if (op == 1) {\n                int cur = st.get(q[1], q[2]);\n                if (isPeak(nums, q[1])) cur--;\n                if (q[1] != q[2] && isPeak(nums, q[2])) cur--;\n                ans.push_back(cur);\n            } else {\n                int idx = q[1], val = q[2];\n                nums[idx] = val;\n                st.modify(idx, isPeak(nums, idx));\n                if (idx > 0) st.modify(idx - 1, isPeak(nums, idx - 1));\n                if (idx < nums.size() - 1) st.modify(idx + 1, isPeak(nums, idx + 1));\n            }\n        }\n        return ans;\n    }\n};",
    "submit_ts": 1718506671.0
}