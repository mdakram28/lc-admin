{
    "username": "mkliac",
    "submission": "class Solution {\npublic:\n    int maximumLength(vector<int>& nums, int k) {\n        // best of m[k]\n        // best of end at val[val][k]\n        // dp[i][k] = max(val[val][k], m[k] == val[val][k] ? m[k] : m[k]-1);\n        unordered_map<int, vector<int>> val;\n        unordered_map<int,int> m;\n        int res = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            if (val.find(nums[i]) == val.end()) {\n                val[nums[i]] = vector<int>(k+1, 0);\n            }\n            vector<int> ks;\n            for (int j = 0; j <= k; j++) {\n                int maxVal = val[nums[i]][j]+1;\n                if (j != 0)\n                    maxVal = max(maxVal, m[j-1]+1);\n                res = max(res, maxVal);\n                val[nums[i]][j] = max(val[nums[i]][j], maxVal);\n                ks.push_back(max(m[j], maxVal));\n                // m[j] = max(m[j], maxVal);\n                // cout << i << \" \" << j << \" \" << val[nums[i]][j] << \" \" << m[j] << endl;\n            }  \n            for (int j = 0; j < ks.size(); j++)\n                m[j] = ks[j];\n        }\n        \n        return res;\n    }\n};",
    "submit_ts": "1717860322",
    "subm_id": "1281753547"
}