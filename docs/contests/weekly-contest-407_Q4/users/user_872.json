{
    "username": "MonoLithh",
    "submission": "class Solution {\npublic:\n    //link to min operation logic-https://www.geeksforgeeks.org/minimum-decrements-on-subarrays-required-to-reduce-all-array-elements-to-zero/\n    long long min_operations(vector<int>& A)  \n    {  \n        // Base Case  \n        if (A.size() == 0)  \n            return 0;  \n\n        // Initialize ans to first element  \n        long long  ans = A[0];  \n\n        for (int i = 1; i < A.size(); i++) {  \n\n            // For A[i] > A[i-1], operation  \n            // (A[i] - A[i - 1]) is required  \n            ans += 1ll*max(A[i] - A[i - 1], 0);  \n        }  \n\n        // Return the answer  \n        return ans;  \n    }  \n    long long minimumOperations(vector<int>& nums, vector<int>& target) {\n        long long ans=0;\n        int n=nums.size();\n        for(int i=0;i<n;i++)\n        {\n            if(nums[i]==target[i])\n            {\n                continue;\n            }\n            int type=(nums[i]<=target[i]);\n            int j=i;\n            int mx=0;\n            vector<int>arr;\n            while(j<n && ((nums[j]<=target[j]) == type) && (nums[j]!=target[j]))\n            {\n                arr.push_back(abs(nums[j]-target[j]));\n                j++;\n            }\n            // cout<<j<<\"\\n\";\n            ans+=min_operations(arr);\n            i=j-1;\n        }\n        return ans;\n    }\n};",
    "submit_ts": "1721531708",
    "subm_id": "1327967866"
}