{
    "username": "ninja_master2002",
    "submission": "#define ll long long\ntemplate<class T, class U>\n// T -> node, U->update.\nstruct Lsegtree{\n    vector<T>st;\n    vector<U>lazy;\n    ll n;\n    T identity_element;\n    U identity_update;\n\n    /*\n        Definition of identity_element: the element I such that combine(x,I) = x\n        for all x\n\n        Definition of identity_update: the element I such that apply(x,I) = x\n        for all x        \n    */\n\n    Lsegtree(ll n, T identity_element, U identity_update)\n    {\n        this->n = n;\n        this->identity_element = identity_element;\n        this->identity_update = identity_update;\n        st.assign(4*n,identity_element);\n        lazy.assign(4*n, identity_update);\n    }\n\n\n    T combine(T l, T r)\n    {\n        // change this function as required.\n        //change on actually what we want\n        T ans = l+r;\n        return ans;\n    }\n    void buildUtil(ll v, ll tl, ll tr, vector<T>&a)\n    {\n        if(tl == tr)\n        {\n            st[v] = a[tl];\n            return;\n        }\n        ll tm = (tl + tr)>>1;\n        buildUtil(2*v + 1, tl, tm,a);\n        buildUtil(2*v + 2,tm+1,tr,a);\n        st[v] = combine(st[2*v + 1], st[2*v + 2]);\n    }\n\n    // change the following 2 functions, and you're more or less done.\n    T apply(T curr, U upd, ll tl, ll tr)\n    {\n        T ans = upd;\n        \n        // increment range by upd:\n        // T ans =(tr - tl + 1)*upd;\n        return ans;\n    }\n\n    U combineUpdate(U old_upd, U new_upd, ll tl, ll tr)\n    {\n        //3rd function we need to change\n        U ans=old_upd;\n        ans=new_upd;\n\n        return ans;\n    }  \n\n\n    void push_down(ll v, ll tl, ll tr)\n    {\n        //for the below line to work, make sure the \"==\" operator is defined for U.\n        if(lazy[v] == identity_update)return;\n        st[v] = apply(st[v], lazy[v], tl, tr);\n        if(2*v + 1 <= 4*n)\n        {\n            ll tm = (tl + tr)>>1;\n            lazy[2*v + 1] = combineUpdate(lazy[2*v+1], lazy[v], tl, tm);\n            lazy[2*v + 2] = combineUpdate(lazy[2*v+2], lazy[v], tm+1,tr);            \n        }\n        lazy[v] = identity_update;\n    }\n    T queryUtil(ll v, ll tl, ll tr, ll l, ll r)\n    {\n        push_down(v,tl,tr);\n        if(l > r)return identity_element;\n        if(tr < l or tl > r)\n        {\n            return identity_element;\n        }\n        if(l <= tl and r >= tr)\n        {\n            return st[v];\n        }\n        ll tm = (tl + tr)>>1;\n        return combine(queryUtil(2*v+1,tl,tm,l,r), queryUtil(2*v+2,tm+1,tr,l,r));\n    }\n \n    void updateUtil(ll v, ll tl, ll tr, ll l, ll r, U upd)\n    {\n        // push_down(v,tl,tr); \n        if(tr < l or tl > r)return;\n        if(tl >=l and tr <=r)\n        {\n            // lazy[v] = combineUpdate(lazy[v],upd,tl,tr);\n            // push_down(v,tl,tr);\n            //for point update\n            st[v]=upd;\n        }\n        else\n        {\n            ll tm = (tl + tr)>>1;\n            updateUtil(2*v+1,tl,tm,l,r,upd);\n            updateUtil(2*v+2,tm+1,tr,l,r,upd);\n            st[v] = combine(st[2*v + 1], st[2*v+2]);\n        }\n    }\n    void build(vector<T>a)\n    {\n        assert( (ll)a.size() == n);\n        buildUtil(0,0,n-1,a);\n    }\n    T query(ll l, ll r)\n    {\n        return queryUtil(0,0,n-1,l,r);\n    }\n    void update(ll l,ll r, U upd)\n    {\n        updateUtil(0,0,n-1,l,r,upd);\n    }\n};\n//for using generic segment tree\n//.....................................................................\n// Lsegtree<ll,ll>st(n,0,-1);\n// vector<ll>a(n,0);\n// st.build(a);\n//......................................................................\nclass Solution {\n    \npublic:\n    vector<int> countOfPeaks(vector<int>& nums, vector<vector<int>>& queries) {\n        vector<int>ans;\n        int n=nums.size();\n        Lsegtree<ll,ll>st(n,0,0);\n        vector<ll>a(n,0);\n        for(int i=1;i<n-1;i++){\n            if(nums[i]>nums[i-1] && nums[i]>nums[i+1])a[i]=1;\n        }\n        // for(auto it:a){\n        //     cout<<it<<\" \";\n        // }\n        st.build(a);\n        for(auto it:queries){\n            if(it[0]==1){\n                if(it[2]-it[1]<=1){\n                    ans.push_back(0);\n                }\n                else{\n                    ans.push_back(st.query(it[1]+1,it[2]-1));\n                }\n            }\n            else{\n                nums[it[1]]=it[2];\n                if(it[1]>=1 && it[1]<n-1){\n                    if(nums[it[1]]>nums[it[1]-1] && nums[it[1]]>nums[it[1]+1]){\n                        st.update(it[1],it[1],1);\n                    }\n                    else{\n                        st.update(it[1],it[1],0);\n                    }\n                    if(it[1]-1>0 ){\n                        int idx=it[1]-1;\n                        if(nums[idx]>nums[idx-1] && nums[idx]>nums[idx+1]){\n                            st.update(idx,idx,1);\n                        }\n                        else{\n                            st.update(idx,idx,0);\n                        }\n                    }\n                    if(it[1]+1<n-1){\n                        int idx=it[1]+1;\n                        if(nums[idx]>nums[idx-1] && nums[idx]>nums[idx+1]){\n                            st.update(idx,idx,1);\n                        }\n                        else{\n                            st.update(idx,idx,0);\n                        }\n                    }\n                }\n                else if(it[1]==0){\n                    if(it[1]+1<n-1){\n                        int idx=it[1]+1;\n                        if(nums[idx]>nums[idx-1] && nums[idx]>nums[idx+1]){\n                            st.update(idx,idx,1);\n                        }\n                        else{\n                             st.update(idx,idx,0);\n                        }\n                    }\n                }\n                else if(it[1]==n-1){\n                    if(it[1]-1>0){\n                        int idx=it[1]-1;\n                        if(nums[idx]>nums[idx-1] && nums[idx]>nums[idx+1]){\n                            st.update(idx,idx,1);\n                        }\n                        else{\n                             st.update(idx,idx,0);\n                        }\n                    }\n                }\n            }\n        }\n        // cout<<st.query(1,1)<<endl;\n        return ans;\n    }\n};",
    "submit_ts": 1718507273.0
}