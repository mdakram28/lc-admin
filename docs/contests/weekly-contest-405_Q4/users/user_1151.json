{
    "username": "arpit18a",
    "submission": "class Tvertix {\npublic:\n    vector<Tvertix*> child;\n    int data;\n    bool endIs;\n    Tvertix() : child(26, nullptr), data(INT_MAX), endIs(false) {}\n};\n\nclass TrieTree {\npublic:\n    Tvertix* root;\n\n    TrieTree() {\n        root = new Tvertix();\n    }\n\n    void addString(const string& word, int cost) {\n        Tvertix* node = root;\n        for (char c : word) {\n            if (!node->child[c - 'a']) {\n                node->child[c - 'a'] = new Tvertix();\n            }\n            node = node->child[c - 'a'];\n        }\n        node->data = min(cost, node->data);\n        node->endIs = true;\n    }\n\n    Tvertix* getRoot() {\n        return root;\n    }\n};\n\nclass Solution {\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        TrieTree trie;\n        \n        int length = target.size();\n        \n        vector<int> minimumCost(length + 1, INT_MAX);\n        for (int i = 0; i < words.size(); ++i) {\n            trie.addString(words[i], costs[i]);\n        }\n        minimumCost[0] = 0;\n\n        for (int i = 0; i < length; ++i) {\n            if (minimumCost[i] == INT_MAX) continue;\n\n            Tvertix* node = trie.getRoot();\n            for (int j = i; j < length; ++j) {\n                \n                char c = target[j];\n                if (!node->child[c - 'a']) break;\n                \n                node = node->child[c - 'a'];\n                \n                if (node->endIs) {\n                    minimumCost[j + 1] = min(minimumCost[j + 1], minimumCost[i] + node->data);\n                }\n            }\n        }\n        \n        if (minimumCost[length] == INT_MAX) return -1;\n        return minimumCost[length];\n    }\n};",
    "submit_ts": "1720323856",
    "subm_id": "1312385716"
}