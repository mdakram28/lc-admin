{
    "username": "im_sparrow05",
    "submission": "class SegmentTree {\npublic:\n    SegmentTree(int size) : n(size) {\n        data.assign(4 * n, 0);\n        lazy.assign(4 * n, 0);\n    }\n\n    void update(int l, int r, int value) {\n        update(1, 0, n - 1, l, r, value);\n    }\n\n    int query(int idx) {\n        return query(1, 0, n - 1, idx);\n    }\n\nprivate:\n    vector<int> data, lazy;\n    int n;\n\n    void push(int node, int start, int end) {\n        if (lazy[node] != 0) {\n            data[node] += lazy[node];\n            if (start != end) {\n                lazy[node * 2] += lazy[node];\n                lazy[node * 2 + 1] += lazy[node];\n            }\n            lazy[node] = 0;\n        }\n    }\n\n    void update(int node, int start, int end, int l, int r, int value) {\n        push(node, start, end);\n        if (start > end || start > r || end < l) return;\n        if (start >= l && end <= r) {\n            lazy[node] += value;\n            push(node, start, end);\n            return;\n        }\n        int mid = (start + end) / 2;\n        update(node * 2, start, mid, l, r, value);\n        update(node * 2 + 1, mid + 1, end, l, r, value);\n        data[node] = min(data[node * 2], data[node * 2 + 1]);\n    }\n\n    int query(int node, int start, int end, int idx) {\n        push(node, start, end);\n        if (start == end) return data[node];\n        int mid = (start + end) / 2;\n        if (idx <= mid) return query(node * 2, start, mid, idx);\n        else return query(node * 2 + 1, mid + 1, end, idx);\n    }\n};\n\n\nclass Solution {\npublic:\n    #define ll long long\n    #define pb push_back\n    #define fi first\n    #define se second\n    int minChanges(vector<int>& nums, int k) {\n        int n = nums.size();\n        SegmentTree segmentTree(k + 1);\n\n        ll i=0,j=n-1;\n        while(i<j){\n            int a = max(nums[i], nums[j]);\n            int b = min(nums[i], nums[j]);\n            int maxi = max(a, k - b);\n            if (maxi+1<=k) {\n                segmentTree.update(maxi+1,k,2);\n            }\n            i++;\n            j--;\n        }\n\n        map<ll,ll> mp1;\n        i = 0; j = n - 1;\n        while (i < j) {\n            mp1[abs(nums[i]-nums[j])] +=2;\n            i++;\n            j--;\n        }\n\n        int ans = INT_MAX;\n        for (int i = 0; i <= k; i++) {\n            int freq = mp1[i];\n            int temp = segmentTree.query(i);\n            ans = min(ans,temp + (n-freq-temp)/2);\n        }\n\n        return ans;\n    }\n};",
    "submit_ts": "1721489811",
    "subm_id": "1327464533"
}