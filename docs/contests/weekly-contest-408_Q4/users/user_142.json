{
    "username": "sunil1906",
    "submission": "class union_find{\npublic:\n    int n;\n    vector<int> parent;\n    union_find(int nn){\n        n = nn;\n        for(int i=0;i<n;i++)    parent.push_back(-1);\n    }\n    void connect(int p, int q){\n        while(parent[p] >= 0)   p = parent[p];\n        while(parent[q] >= 0)   q = parent[q];\n        if(p == q)  return;\n        if(parent[p] > parent[q])   swap(p, q);\n        parent[p] += parent[q];\n        parent[q] = p;\n    }\n    bool isConnected(int p, int q){\n        while(parent[p] >= 0)   p = parent[p];\n        while(parent[q] >= 0)   q = parent[q];\n        return p == q;\n    }\n    \n    int getParent(int p){\n        while(parent[p] >= 0)   p = parent[p];\n        return p;\n    }\n};\n\nclass Solution {\npublic:\n    bool intersect(vector<int> &a, vector<int> &b){\n        long long x1, y1, r1, x2, y2, r2;\n        x1 = a[0]; x2 = b[0];\n        y1 = a[1]; y2 = b[1];\n        r1 = a[2]; r2 = b[2];\n        double distance = sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));\n        \n        return (distance <= (r1 + r2) && distance >= abs(r1 - r2));\n    }\n    \n    bool canReachCorner(int X, int Y, vector<vector<int>>& circles) {\n        int i, j, n = circles.size(), x, y, r, parent;\n        union_find uf(n);\n        for(i=0;i<n;i++)\n            for(j=i+1;j<n;j++)\n                if(intersect(circles[i], circles[j]))\n                    uf.connect(i, j);\n        \n        vector<vector<int>> istouching(n, vector<int>(4, 0));\n        for(i=0;i<n;i++){\n            x = circles[i][0];\n            y = circles[i][1];\n            r = circles[i][2];\n            parent = uf.getParent(i);\n            \n            if(x - r <= 0)  istouching[parent][0] = 1; // left\n            if(x + r >= X)  istouching[parent][1] = 1; // right\n            if(y - r <= 0)  istouching[parent][2] = 1; // bottom\n            if(y + r >= Y)  istouching[parent][3] = 1; // top\n            \n            // cout<<\"Current: \"<<i<<\", Parent: \"<<parent<<\": \"<<istouching[parent][0]<<\" \"<<istouching[parent][1]<<\" \"<<istouching[parent][2]<<\" \"<<istouching[parent][3]<<\"\\n\";\n            \n            if(istouching[parent][0] + istouching[parent][2] == 2 or istouching[parent][1] + istouching[parent][3] == 2)\n                return false;\n            \n            if(istouching[parent][0] + istouching[parent][1] == 2 or istouching[parent][2] + istouching[parent][3] == 2)\n                return false;\n        }\n        \n        return true;\n    }\n};",
    "submit_ts": "1722138842",
    "subm_id": "1335801098"
}