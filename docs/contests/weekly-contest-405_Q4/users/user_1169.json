{
    "username": "DGukesh",
    "submission": "struct Node {\n    map<char, Node*> child;\n    vector<pair<int, int>> word_ends;\n};\n\nstruct Trie {\n    Node* root;\n\n    Trie() {\n        root = new Node();\n    }\n\n    void insert(string word, int i, int cost) {\n        Node* node = root;\n        for (char c : word) {\n            if (!node->child.count(c)) {\n                node->child[c] = new Node();\n            }\n            node = node->child[c];\n        }\n        node->word_ends.push_back({i, cost});\n    }\n};\n\nclass Solution {\npublic:\n    int  minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int n = target.size();\n        vector<int> dp(n + 1, INT_MAX);\n        dp[0] = 0;\n\n        Trie tr;\n        for (int i = 0; i < words.size(); ++i) {\n            tr.insert(words[i], i, costs[i]);\n        }\n\n        for (int i = 0; i < n; ++i) {\n            if (dp[i] == INT_MAX) {\n                continue;\n            }\n\n            Node* node = tr.root;\n            for (int j = i; j < n; ++j) {\n                if (!node->child.count(target[j])) {\n                    break;\n                }\n                node = node->child[target[j]];\n                for (auto it : node->word_ends) {\n                    int len = words[it.first].size();\n                    if (i + len <= n) {\n                        dp[i + len] = min(dp[i + len], dp[i] + it.second);\n                    }\n                }\n            }\n        }\n\n        if (dp[n] != INT_MAX) {\n            return dp[n];\n        }\n        else {\n            return -1;\n        }\n    }\n};",
    "submit_ts": "1720323599",
    "subm_id": "1312379462"
}