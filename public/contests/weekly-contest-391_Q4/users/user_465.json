{
    "username": "thundersmoker",
    "submission": "class Solution {\npublic:\n    int idx,jdx;\n    long long MaxDist(vector<pair<int, int> >& A)\n    {\n    int N=A.size();\n    long long minsum, maxsum, mindiff, maxdiff;\n \n    minsum = maxsum = A[0].first + A[0].second;\n    mindiff = maxdiff = A[0].first - A[0].second;\n    for (int i = 1; i < N; i++) {\n        int sum = A[i].first + A[i].second;\n        int diff = A[i].first - A[i].second;\n        if (sum < minsum)\n            minsum = sum;\n        else if (sum > maxsum)\n            maxsum = sum;\n        if (diff < mindiff)\n            mindiff = diff;\n        else if (diff > maxdiff)\n            maxdiff = diff;\n    }\n   \n    long long maximum = max(maxsum - minsum, maxdiff - mindiff);\n        // cout<<\"minsum\"<<mindiff<<\" \"<<maxdiff<<\" \"<<maximum<<'\\n';\n    if((maxsum-minsum)==maximum){\n        // cout<<\"there\\n\";\n     for(int i=0;i<N;i++){\n         int sum = A[i].first + A[i].second;\n        int diff = A[i].first - A[i].second;\n         \n         if(sum==minsum){\n             idx=i;\n         }\n         else if(sum==maxsum){\n             jdx=i;\n         }\n         \n    }\n    }\n        else{\n             // cout<<\"here\\n\";\n              for(int i=0;i<N;i++){\n         int sum = A[i].first + A[i].second;\n        int diff = A[i].first - A[i].second;\n         if(diff==mindiff){\n             idx=i;\n         }\n         else if(diff==maxdiff){\n             jdx=i;\n         }\n         \n    }\n        }\n    return maximum;\n}\n    int minimumDistance(vector<vector<int>>& points) {\n        vector<pair<int,int>> p;\n        for(auto &i:points){\n            p.push_back({i[0],i[1]});\n            \n        }\n        MaxDist(p);\n    int ans=MaxDist(p);\n        vector<pair<int,int>> p1;\n        for(int i=0;i<p.size();i++){\n            if(i!=idx){\n                p1.push_back(p[i]);\n            }\n        }\n        vector<pair<int,int>> p2;\n        for(int i=0;i<p.size();i++){\n            if(i!=jdx){\n                p2.push_back(p[i]);\n            }\n        }\n        \n        return min(MaxDist(p1),MaxDist(p2));\n    }\n};"
}