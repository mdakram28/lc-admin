{
    "username": "kkmk1999",
    "submission": "class Solution {\npublic:\n    int waysToReachStair(int k) {\n        return dfs(1, k, 0, -1);\n    }\nprivate:\n    map<vector<int>, int> dp;\n    int dfs(int curr, int k, int jump, int prevOp) {\n        if (dp.find({curr, jump, prevOp}) != dp.end()) {\n            return dp[{curr, jump, prevOp}];\n        }\n        if (curr > k + 1) return 0;\n        int res = 0;\n        if (curr == k) res++;\n        // try first type\n        if (curr > 0 && prevOp != 1) res += dfs(curr - 1, k, jump, 1);\n        // try second type\n        res += dfs(curr + (int)pow(2.0, (double)jump), k, jump + 1, 2);\n        // dp[{curr, jump, prevOp}] = res;\n        return dp[{curr, jump, prevOp}] = res;\n    }\n};",
    "submit_ts": "1716089747",
    "subm_id": "1261850269"
}