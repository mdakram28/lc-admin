{
    "username": "hyungzin",
    "submission": "import 'dart:math';\nclass Solution {\n  int minimumDiameterAfterMerge(List<List<int>> edges1, List<List<int>> edges2) {\n    final result1 = findMinHeight(edges1);\n    final result2 = findMinHeight(edges2);\n    final sum = (result1 / 2).ceil() + (result2 / 2).ceil() + 1;\n    return max(sum, max(result1, result2));\n  }\n  int findMinHeight(List<List<int>> edges) {\n    if (edges.isEmpty) return 0;\n\n    final n = edges.length + 1;\n    final graph = List.generate(n, (_) => <int>[]);\n    \n    for (var edge in edges) {\n      graph[edge[0]].add(edge[1]);\n      graph[edge[1]].add(edge[0]);\n    }\n\n    var result1 = bfs(graph, 0);\n    var result2 = bfs(graph, result1[0]);\n    return result2[1];\n  }\n  List<int> bfs(List<List<int>> graph, int start) {\n    final distance = List.filled(graph.length, -1);\n    distance[start] = 0;\n    final q = [start];\n    int maxDist = 0;\n    int farthestNode = start;\n\n    for (int i = 0; i < q.length; i++) {\n      int node = q[i];\n      for (int neighbor in graph[node]) {\n        if (distance[neighbor] == -1) {\n          distance[neighbor] = distance[node] + 1;\n          q.add(neighbor);\n          if (distance[neighbor] > maxDist) {\n            maxDist = distance[neighbor];\n            farthestNode = neighbor;\n          }\n        }\n      }\n    }\n\n    return [farthestNode, maxDist];\n  }\n}",
    "submit_ts": "1719716542",
    "subm_id": "1304367429"
}