{
    "username": "DiegoBrandovich",
    "submission": "class Solution:\n    def minimumCost(self, m: int, n: int, horizontalCut: List[int], verticalCut: List[int]) -> int:\n        # Combine and sort cuts\n        horizontalCut.sort(reverse=True)\n        verticalCut.sort(reverse=True)\n        \n        # Initialize the number of segments\n        horizontal_segments = 1\n        vertical_segments = 1\n        \n        # Total cost\n        total_cost = 0\n        \n        # Pointers for horizontal and vertical cuts\n        h = 0\n        v = 0\n        \n        # Process cuts in a greedy manner\n        while h < len(horizontalCut) and v < len(verticalCut):\n            if horizontalCut[h] >= verticalCut[v]:\n                total_cost += horizontalCut[h] * vertical_segments\n                horizontal_segments += 1\n                h += 1\n            else:\n                total_cost += verticalCut[v] * horizontal_segments\n                vertical_segments += 1\n                v += 1\n        \n        # Process remaining horizontal cuts\n        while h < len(horizontalCut):\n            total_cost += horizontalCut[h] * vertical_segments\n            h += 1\n        \n        # Process remaining vertical cuts\n        while v < len(verticalCut):\n            total_cost += verticalCut[v] * horizontal_segments\n            v += 1\n        \n        return total_cost",
    "submit_ts": "1720926171",
    "subm_id": "1320278081"
}