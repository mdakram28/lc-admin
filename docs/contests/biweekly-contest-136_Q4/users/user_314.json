{
    "username": "zhou-zhou-36",
    "submission": "class Solution {\npublic:\n    // vector<vector<array<int,2>>> edge;\n    vector<map<int,int>> edge;\n    vector<int> ans,subdis;\n    int dfs1(int curr,int parent)\n    {\n        int maxd=0;\n        for(auto [i,dis]:edge[curr])\n        {\n            if(i==parent) continue;\n            maxd=max(maxd,dfs1(i,curr)+dis);\n        }\n        subdis[curr]=maxd;\n        return maxd;\n    }\n    void dfs2(int curr,int parent,int pdis)\n    {\n        ans[curr]=max(subdis[curr],pdis);\n        multiset<int> si={pdis};\n        for(auto [i,dis]:edge[curr])\n        {\n            if(i==parent) continue;\n            si.insert(dis+subdis[i]);\n        }\n        for(auto [i,dis]:edge[curr])\n        {\n            if(i==parent) continue;\n            si.erase(si.find(dis+subdis[i]));\n            dfs2(i,curr,edge[i][curr]+*prev(si.end()));\n            si.insert(dis+subdis[i]);\n        }\n    }\n    vector<int> timeTaken(vector<vector<int>>& edges) {\n        int n=edges.size()+1;\n        // edge.assign(n,vector<array<int,2>>());\n        edge.assign(n,map<int,int>());\n        for(vector<int> &e:edges)\n        {\n            // edge[e[0]].push_back({e[1],e[1]%2==0 ? 2 : 1});\n            // edge[e[1]].push_back({e[0],e[0]%2==0 ? 2 : 1});\n            edge[e[0]][e[1]]=(e[1]%2==0 ? 2 : 1);\n            edge[e[1]][e[0]]=(e[0]%2==0 ? 2 : 1);\n        }\n        subdis.assign(n,0);\n        ans.assign(n,0);\n        dfs1(0,-1);\n        dfs2(0,-1,0);\n        return ans;\n    }\n};",
    "submit_ts": "1722700435",
    "subm_id": "552279823"
}