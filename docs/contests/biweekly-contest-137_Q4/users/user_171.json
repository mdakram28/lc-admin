{
    "username": "s_saurabh",
    "submission": "from typing import List\n\nclass MaxValueTable:\n    def __init__(self, values: List[int]):\n        self.max_table = []\n        n = len(values)\n        power = 0\n        while (1 << power) <= n:\n            power += 1\n        self.max_table = [[0] * n for _ in range(power)]\n        self.max_table[0] = values[:]\n        self.powers_of_two = [1]\n\n        for i in range(1, power):\n            for j in range(n - (1 << i) + 1):\n                self.max_table[i][j] = max(self.max_table[i - 1][j], self.max_table[i - 1][j + (1 << (i - 1))])\n            self.powers_of_two.append(1 << i)\n\n    def find_max_in_range(self, left: int, right: int) -> int:\n        length = right - left + 1\n        idx = max(i for i in range(len(self.powers_of_two)) if self.powers_of_two[i] <= length)\n        return max(self.max_table[idx][left], self.max_table[idx][right - (1 << idx) + 1])\n\nclass Solution:\n    def calculate_potential(self, primary: List[int], secondary: List[int], tertiary: List[int]) -> int:\n        n = len(primary)\n        prefix_primary = primary[:]\n        prefix_secondary = secondary[:]\n        suffix_primary = primary[:]\n        suffix_secondary = secondary[:]\n\n        for i in range(1, n):\n            prefix_primary[i] = max(prefix_primary[i], prefix_primary[i - 1])\n            prefix_secondary[i] = max(prefix_secondary[i], prefix_secondary[i - 1])\n\n        for i in range(n - 2, -1, -1):\n            suffix_primary[i] = max(suffix_primary[i], suffix_primary[i + 1])\n            suffix_secondary[i] = max(suffix_secondary[i], suffix_secondary[i + 1])\n\n        best_value = float('-inf')\n        for i in range(1, n - 1):\n            potential = max(prefix_primary[i - 1] + suffix_secondary[i + 1], prefix_secondary[i - 1] + suffix_primary[i + 1])\n            best_value = max(best_value, potential + tertiary[i])\n\n        return best_value\n\n    def calculate_max_sum(self, first_col: List[int], second_col: List[int], third_col: List[int]) -> int:\n        return max(self.calculate_potential(first_col, second_col, third_col),\n                   self.calculate_potential(second_col, third_col, first_col),\n                   self.calculate_potential(first_col, third_col, second_col))\n\n    def maximumValueSum(self, grid: List[List[int]]) -> int:\n        rows, cols = len(grid), len(grid[0])\n        value_tables = [MaxValueTable(grid[i]) for i in range(rows)]\n\n        global_max = float('-inf')\n        for col in range(1, cols - 1):\n            first_column = [grid[row][col] for row in range(rows)]\n            left_max = []\n            right_max = []\n\n            for row in range(rows):\n                max_left = value_tables[row].find_max_in_range(0, col - 1)\n                max_right = value_tables[row].find_max_in_range(col + 1, cols - 1)\n                left_max.append(max_left)\n                right_max.append(max_right)\n\n            global_max = max(global_max, self.calculate_max_sum(first_column, left_max, right_max))\n\n        return global_max\n\n        ",
    "submit_ts": "1723908392",
    "subm_id": "1359150639"
}