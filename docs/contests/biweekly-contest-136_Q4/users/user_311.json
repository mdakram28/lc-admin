{
    "username": "c337134154",
    "submission": "class Solution {\npublic:\n    vector<multiset<int>> maxTime;\n    vector<int> timeTaken(vector<vector<int>>& edges) {\n        int n = edges.size() + 1;\n        vector<vector<int>> adj(n);\n        vector<int> dp(n, 0), ans(n, 0), father(n, -1);\n        maxTime.resize(n);\n        for (int i = 0; i < n; ++i) {\n            maxTime[i] = multiset<int>();\n        }\n        // Construct the graph tree\n        for (const auto& edge : edges) {\n            adj[edge[0]].push_back(edge[1]);\n            adj[edge[1]].push_back(edge[0]);\n        }\n\n        // First DFS to calculate dp values\n        dfs1(0, -1, adj, dp, father);\n\n        // Second DFS to calculate ans values\n        dfs2(0, -1, adj, dp, ans, father);\n\n        return ans;\n    }\n\nprivate:\n    void dfs1(int node, int parent, const vector<vector<int>>& adj, vector<int>& dp, vector<int>& father) {\n        father[node] = parent;\n        int maxSubtreeTime = 0;\n        for (int son : adj[node]) {\n            if (son == parent) continue;\n            dfs1(son, node, adj, dp, father);\n            int markTime = (son % 2 == 0) ? dp[son] + 2 : dp[son] + 1;\n            maxTime[node].insert(markTime);\n            maxSubtreeTime = max(maxSubtreeTime, markTime);\n        }\n        dp[node] = maxSubtreeTime;\n    }\n\n    void dfs2(int node, int parent, const vector<vector<int>>& adj, const vector<int>& dp, vector<int>& ans, const vector<int>& father) {\n        if (parent != -1) {\n//            cout << \"node: \" << node << \" parent: \" << parent << \"\\n\";\n//            cout << \"maxTime[parent]: \" << *maxTime[parent].rbegin() << \"\\n\";\n            int markTime = (node % 2 == 0) ? dp[node] + 2 : dp[node] + 1;\n            maxTime[parent].erase(maxTime[parent].find(markTime));\n            int famaxn=maxTime[parent].empty() ? 0 : *maxTime[parent].rbegin();\n            int parentMarkTime = (parent % 2 == 0) ? famaxn + 2 : famaxn + 1;\n            ans[node] = max(dp[node], parentMarkTime);\n//            cout << \"famaxn: \" << famaxn << \"\\n\";\n//            cout << \"dp[node]: \" << dp[node] << \" parentMarkTime: \" << parentMarkTime << \" ans[node]: \" << ans[node] << \"\\n\";\n            maxTime[parent].insert(markTime);\n            maxTime[node].insert(parentMarkTime);\n        } else {\n            ans[node] = dp[node];\n        }\n\n        for (int son : adj[node]) {\n            if (son == parent) continue;\n            dfs2(son, node, adj, dp, ans, father);\n        }\n    }\n};",
    "submit_ts": "1722700704",
    "subm_id": "1343250183"
}