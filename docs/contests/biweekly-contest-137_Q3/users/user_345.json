{
    "username": "Tadeusz Sznuk",
    "submission": "type oops struct {\n    v, c int\n}\n\nfunc maximumValueSum(board [][]int) int64 {\n    // overkill, just need best 3, but... meh\n    sorted := make([][]oops, len(board))\n    for y := range sorted {\n        sorted[y] = make([]oops, len(board[y]))\n        for x := range sorted[y] {\n            sorted[y][x] = oops{board[y][x], x}\n        }\n    }\n    for y := range sorted {\n        sort.Slice(sorted[y], func(i, j int)bool {\n            return sorted[y][i].v > sorted[y][j].v\n        })   \n    }\n    best := int64(board[0][0]) + int64(board[1][1]) + int64(board[2][2])\n    for i := 0; i < 3; i++ {\n        for j := 0; j < 3; j++ {\n            for k := 0; k < 3; k++ {\n                for r1 := 2; r1 < len(sorted); r1++ {\n                    for r2 := 1; r2 < r1; r2++ {\n                        for r3 := 0; r3 < r2; r3++ {\n                            a := sorted[r1][i]\n                            b := sorted[r2][j]\n                            c := sorted[r3][k]\n                            if a.c == b.c || b.c == c.c || c.c == a.c {\n                                continue\n                            }\n                            v := int64(a.v) + int64(b.v) + int64(c.v)\n                            if v > best {\n                                best = v\n                            }\n                        }\n                    }\n                }                \n            }\n        }\n    }\n    return best\n}",
    "submit_ts": "1723907558",
    "subm_id": "1359113409"
}