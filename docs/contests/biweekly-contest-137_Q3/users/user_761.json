{
    "username": "tf_imba",
    "submission": "class Solution:\n    def __init__(self):\n        self.ans = float('-inf')\n    \n    def maximumValueSum(self, board: List[List[int]]) -> int:\n        m, n = len(board), len(board[0])\n        rows, cols = [False] * m, [False] * n\n        self.ans = float('-inf')\n        large = [float('-inf')] * m\n        second_large = [float('-inf')] * m\n        \n        def build():\n            large[-1] = max(board[-1])\n            second_large[-2] = large[-1] + max(board[-2])\n            for i in range(m - 2, -1, -1):\n                curr_large = max(board[i])\n                large[i] = max(large[i + 1], curr_large)\n                if i < m - 2:\n                    prev_second_large_ele = second_large[i + 1] - large[i + 1]\n                    if curr_large > prev_second_large_ele:\n                        second_large[i] = second_large[i + 1] + curr_large - prev_second_large_ele\n                    else:\n                        second_large[i] = second_large[i + 1]\n        \n        def valid(i, j, placed = 0, val = 0):\n            if placed == 0:\n                if i < m - 2:\n                    '''\n                    if val + board[i][j] + second_large[i + 1] <= self.ans:\n                        print(\"invald\", i, j, self.ans, second_large[i + 1])\n                    '''\n                    return val + board[i][j] + second_large[i + 1] > self.ans\n            if placed == 1:\n                if i < m - 1:\n                    return val + board[i][j] + large[i + 1] > self.ans\n            return True\n            \n        def dfs(row_idx = 0, placed = 0, val = 0):\n            if placed == 3:\n                self.ans = max(self.ans, val)\n                return\n            if row_idx >= m:\n                return\n            \n            #place\n            rows[row_idx] = True\n            for j in range(n):\n                if (not cols[j]) and valid(row_idx, j, placed, val):\n                    cols[j] = True\n                    dfs(row_idx + 1, placed + 1, val + board[row_idx][j])\n                    cols[j] = False\n            #no place\n            rows[row_idx] = False\n            dfs(row_idx + 1, placed, val)\n        \n        build()\n        #print(large)\n        #print(second_large)\n        dfs()\n        \n        return self.ans",
    "submit_ts": "1723909361",
    "subm_id": "1359189630"
}