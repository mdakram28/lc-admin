{
    "username": "Fabian0",
    "submission": "class Solution {\n    public int minimumDifference(int[] nums, int k) {\n        SegmentTree st = new SegmentTree(0, nums.length-1, nums);\n        \n        int minDistance = Integer.MAX_VALUE;\n\n        for(int ptr1 = 0; ptr1 < nums.length; ptr1++){\n\n\n            int left = ptr1;\n            int right = nums.length-1;\n\n            while(left <= right){\n                int mid = left + (right-left)/2;\n                int res = st.getRange(ptr1, mid);\n\n                if(res == k)return 0;\n\n                int dif = Math.abs(k - res);\n                minDistance = Math.min(minDistance, dif);\n\n                if(res < k){ //res too small, look left\n                    right = mid-1;\n                }else{ //res too big, look right\n                    left = mid+1;\n                }\n\n            }\n\n        }\n\n        return minDistance;\n\n    }\n\n    public class SegmentTree{\n        int l, r, mid;\n        int and;\n        SegmentTree left, right;\n\n        public SegmentTree(int l, int r, int[] array){\n            this.l = l;\n            this.r = r;\n            mid = l + (r-l)/2;\n            if(l==r){\n                and = array[l];\n                return;\n            }\n            left = new SegmentTree(l, mid, array);\n            right = new SegmentTree(mid+1, r, array);\n            this.and = left.and & right.and;\n        }\n\n        public int getRange(int leftRange, int rightRange){\n            // if(rightRange < l || leftRange > r)return xxx;\n            if(leftRange <= l && rightRange >= r)return and;\n\n            \n            if(rightRange <= mid){\n                return left.getRange(leftRange, rightRange);\n            }else if(leftRange >= mid+1){\n                return right.getRange(leftRange, rightRange);\n            }else{\n                return left.getRange(leftRange, rightRange) & right.getRange(leftRange, rightRange);\n            }\n        }\n    }\n}",
    "submit_ts": 1717298278.0
}