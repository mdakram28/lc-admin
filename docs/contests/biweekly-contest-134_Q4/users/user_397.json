{
    "username": "zwling",
    "submission": "template <typename T, class F = function<T(const T&, const T&)>>\nclass SparseTable {\n public:\n  int n;\n  vector<vector<T>> mat;\n  F func;\n\n  SparseTable(const vector<T>& a, const F& f) : func(f) {\n    n = static_cast<int>(a.size());\n    int max_log = 32 - __builtin_clz(n);\n    mat.resize(max_log);\n    mat[0] = a;\n    for (int j = 1; j < max_log; j++) {\n      mat[j].resize(n - (1 << j) + 1);\n      for (int i = 0; i <= n - (1 << j); i++) {\n        mat[j][i] = func(mat[j - 1][i], mat[j - 1][i + (1 << (j - 1))]);\n      }\n    }\n  }\n\n  T get(int from, int to) const {\n    assert(0 <= from && from <= to && to <= n - 1);\n    int lg = 32 - __builtin_clz(to - from + 1) - 1;\n    return func(mat[lg][from], mat[lg][to - (1 << lg) + 1]);\n  }\n};\nclass Solution {\npublic:\n    long long countSubarrays(vector<int>& a, int k) {\n        int n = a.size();\n        long long ans = 0;\n        auto f = [&](int a, int b) {\n            return a & b;\n        };\n        SparseTable<int, decltype(f)> st(a, f);\n        \n        for (int l = 0, r1 = 0, r2 = 0; l < n; l++) {\n            r1 = max(r1, l), r2 = max(r2, l);\n            while (r1 < n && st.get(l, r1) > k) {\n                r1++;\n            }\n            while (r2 < n && st.get(l, r2) >= k) {\n                r2++;\n            }\n            ans += max(r2 - r1, 0);\n        }\n        \n        return ans;\n       \n    }\n};",
    "submit_ts": "1720279124",
    "subm_id": "544566057"
}