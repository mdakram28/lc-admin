{
    "username": "agrawalh",
    "submission": "class Solution {\n    public int minimumDiameterAfterMerge(int[][] edges1, int[][] edges2) {\n        Map<Integer, List<Integer>> adj1 = new HashMap<>();\n        Map<Integer, List<Integer>> adj2 = new HashMap<>();\n        int m = 0, n = 0;\n        for(int[] e : edges1) {\n            adj1.computeIfAbsent(e[0], k -> new LinkedList<>()).add(e[1]);\n            adj1.computeIfAbsent(e[1], k -> new LinkedList<>()).add(e[0]);\n            m = Math.max(m, Math.max(e[0], e[1]));\n        }\n        \n        for(int[] e : edges2) {\n            adj2.computeIfAbsent(e[0], k -> new LinkedList<>()).add(e[1]);\n            adj2.computeIfAbsent(e[1], k -> new LinkedList<>()).add(e[0]);\n            n = Math.max(n, Math.max(e[0], e[1]));\n        }\n        \n        int d1 = findDiameter(adj1, m+1);\n        int d2 = findDiameter(adj2, n+1);\n        int d3 = (d1+1)/2 + 1 + (d2+1)/2;\n        return Math.max(d1, Math.max(d2, d3));\n    }\n    \n    private int findDiameter(Map<Integer, List<Integer>> adj, int n) {\n        // Find the farthest point\n        boolean[] vis = new boolean[n];\n        Queue<Integer> q = new LinkedList<>();\n        q.offer(0);\n        vis[0] = true;\n        int last = -1;\n        while (!q.isEmpty()) {\n            int cur = q.poll();\n            last = cur;\n            for(int neigh : adj.getOrDefault(cur, Collections.emptyList())) {\n                if (!vis[neigh]) {\n                    vis[neigh] = true;\n                    q.offer(neigh);\n                }\n            }\n        }\n        \n        int dia = 0, dis = -1;\n        Queue<Integer> next = new LinkedList<>();\n        q.offer(last);\n        Arrays.fill(vis, false);\n        \n        while (!q.isEmpty()) {\n            int sz = q.size();\n            dis++;\n            for(int i=0;i<sz;i++) {\n                int cur = q.poll();\n                for(int neigh : adj.getOrDefault(cur, Collections.emptyList())) {\n                    if (!vis[neigh]) {\n                        vis[neigh] = true;\n                        q.offer(neigh);\n                    }\n                }\n            }\n        }\n        return dis;\n    }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
    "submit_ts": 1719718118.0
}