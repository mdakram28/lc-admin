{
    "username": "maple-92u",
    "submission": "class LazySegmentTree:\n    def __init__(self, n: int):\n        self.cnt = [0] * (4 * n)\n        self.todo = [0] * (4 * n)\n        self.mod = 10**9 + 7\n\n    # \u7ef4\u62a4\u533a\u95f4\u548c\n    def maintain(self, o: int) -> None:\n        self.cnt[o] = self.cnt[o * 2] + self.cnt[o * 2 + 1]\n\n    def doSum(self, o: int, l: int, r: int, val: int) -> None:\n        self.cnt[o] += (r-l+1) * val\n        self.todo[o] += val\n    \n    def spread(self, o: int, l: int, r: int) -> None:\n        v = self.todo[o]\n        if v:\n            m = (l + r) // 2\n            self.doSum(o * 2, l, m, v)\n            self.doSum(o * 2 + 1, m + 1, r, v)\n            self.todo[o] = 0\n\n    # \u533a\u95f4 [L,R] \u5185\u7684\u6570\u90fd\u52a0\u4e0a val   o,l,r=1,1,n\n    def update(self, o: int, l: int, r: int, L: int, R: int, val: int) -> None:\n        if L <= l and r <= R:\n            self.doSum(o, l, r, val)\n            return\n        self.spread(o, l, r)\n        m = (l + r) // 2\n        if m >= L:\n            self.update(o * 2, l, m, L, R, val)\n        if m < R:\n            self.update(o * 2 + 1, m + 1, r, L, R, val)\n        self.maintain(o)\n\n    def query(self, o: int, l: int, r: int, L: int, R: int) -> int:\n        if L <= l and r <= R:\n            return self.cnt[o]\n        self.spread(o, l, r)\n        m = (l + r) // 2\n        res = 0\n        if L <= m:\n            res =  self.query(o * 2, l, m, L, R)\n        if m < R:\n            res += self.query(o * 2 + 1, m + 1, r, L, R)\n        return res % self.mod\n\nclass Solution:\n    def countOfPeaks(self, nums: List[int], queries: List[List[int]]) -> List[int]:\n        n = len(nums)\n        ST = LazySegmentTree(100000)\n        for i in range(1, n-1):\n            if nums[i]>nums[i-1] and nums[i]>nums[i+1]: ST.update(1, 1, n, i+1, i+1, 1)\n        ans = []\n        #for i in range(1, 6): print(ST.query(1, 1, n, i, i))\n        for it in queries:\n            if it[0]==1:\n                L, R = it[1]+1, it[2]+1\n                res = ST.query(1, 1, n, L, R)\n                #print(res)\n                if ST.query(1, 1, n, L, L): res -= 1\n                if L != R and ST.query(1, 1, n, R, R): res -= 1\n                ans.append(res)\n            else:\n                index, val = it[1], it[2]\n                v0_l = v0 = v0_r = 0\n                v1_l = v1 = v1_r = 0\n                if index!=0 and index!=n-1 and nums[index]>nums[index-1] and nums[index]>nums[index+1]: v0 = 1\n                if index-1>0 and nums[index-1]>nums[index-2] and nums[index-1]>nums[index]: v0_l = 1\n                if index+1<n-1 and nums[index+1]>nums[index+2] and nums[index+1]>nums[index]: v0_r = 1\n                nums[index] = val\n                if index!=0 and index!=n-1 and nums[index]>nums[index-1] and nums[index]>nums[index+1]: v1 = 1\n                if index-1>0 and nums[index-1]>nums[index-2] and nums[index-1]>nums[index]: v1_l = 1\n                if index+1<n-1 and nums[index+1]>nums[index+2] and nums[index+1]>nums[index]: v1_r = 1\n                dv_l, dv, dv_r = v1_l - v0_l, v1 - v0, v1_r - v0_r\n                #print(dv_l, dv, dv_r)\n                if dv_l!=0: ST.update(1, 1, n, index, index, dv_l)\n                if dv!=0:   ST.update(1, 1, n, index+1, index+1, dv)\n                if dv_r!=0: ST.update(1, 1, n, index+2, index+2, dv_r)\n        return ans",
    "submit_ts": 1718508656.0
}