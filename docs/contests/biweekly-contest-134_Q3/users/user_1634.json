{
    "username": "07socalledcoder859",
    "submission": "#include <bits/stdc++.h>\n\n#define ull unsigned long long\n#define ld long double\n#define yes cout << \"YES\\n\";\n#define no cout << \"NO\\n\";\n#define maxofvec(v) *max_element(v.begin(), v.end())\n#define minofvec(v) *min_element(v.begin(), v.end())\n#define getv(v, n)              \\\n    for (int i = 0; i < n; i++) \\\n        cin >> v[i];\n#define vi(v, n) vector<int> v(n);\n#define pv(v, n)                \\\n    for (int i = 0; i < n; i++) \\\n        cout << v[i] << \" \";\n#define all(v) (v).begin(), (v).end()\n#define rall(v) (v).rbegin(), (v).rend()\n#define ff first\n#define ss second\n#define nl cout << \"\\n\";\n#define inf LLONG_MAX\n#define inm LLONG_MIN\n#define mod 1e9 + 7\n#define ll long long\n\nclass Solution {\npublic:\n    int numberOfAlternatingGroups(vector<int>& sid_colors, int sid_k) {\n        ll sid_n = sid_colors.size();\n        \n        if(sid_k == 1)\n            return sid_n;\n        \n        ll sid_ANS = 0, sid_len = 1, sid_idx = 1;\n        \n        while(sid_idx < (sid_n + sid_k - 1)) {\n            int sid_curridx = sid_idx;\n            int sid_previdx = sid_idx - 1;\n            \n            if(sid_curridx >= sid_n)\n                sid_curridx -= sid_n;\n            \n            if(sid_previdx >= sid_n)\n                sid_previdx -= sid_n;\n            \n            if(sid_colors[sid_curridx] != sid_colors[sid_previdx])\n                sid_len++;\n            else \n                sid_len = 1;\n            \n            if(sid_len >= sid_k)\n                sid_ANS++;\n            \n            sid_idx++;\n        }\n        \n        return sid_ANS;\n    }\n};\n",
    "submit_ts": "1720280365",
    "subm_id": "1311786634"
}