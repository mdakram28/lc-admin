{
    "username": "abtimes2",
    "submission": "class Solution {\npublic:\n    int minChanges(vector<int>& nums, int k) {\n        /*\n            [1,0,1,2,4,3]    k = 4\n            [1, 3]  delta = 2   maxDeltaWithOneOps = max(3 - 0, 4 - 1) = 3\n            [0, 4]  delta = 4   maxDeltaWithOneOps = max(4 - 0, 4 - 0) = 4\n            [1, 2]  delta = 1   maxDeltaWithOneOps = max(2 - 0, 4 - 1) = 3\n\n            int p = n / 2\n            Delta \n                0 ->    withOneOps + withTwoOps\n                        (cntOfElementHave one ops >= 0) - cnt[0]\n\n                1 ->    withOneOps + withTwoOps\n                        withLessDelta than 1 + withGreaterDelta than 1\n\n                2 -> withLessDeltaThan2 + withGreaterDelta than 2\n        */\n        int n = nums.size();\n        unordered_map <int, int> d;\n        vector<int> delta(k + 1, 0);\n\n        for (int i = 0 ; i < n/2 ; i++) {\n            d[abs(nums[i] - nums[n - i - 1])]++;\n            int maxDeltaWithOneOps = max(max(nums[i], nums[n - 1 - i]), k - min(nums[i], nums[n - 1 - i]));\n            delta[maxDeltaWithOneOps]++;\n        }\n\n      \n\n        for (int i = 1 ;i <= k; i++) {\n            delta[i] += delta[i - 1];\n        }\n\n        int minOps = INT_MAX;\n        /*\n            1, 3 = 2\n            0, 4 = 4\n            1, 2 = 1\n        */\n\n        for (int i = 0; i <= k; i++) {\n           \n            // minOps = min(minOps,\n            //     (i == 0 ? 0 : delta[i - 1] * 2) + (i == k ? 0 : delta[k] - delta[i] - d[i]) \n            // );\n\n            int leftSide = (i == 0 ? 0 : delta[i - 1] * 2);\n            int rightSide = (i == 0 ? delta[k] : delta[k] - delta[i - 1]);\n\n            // cout<<i<<' '<<leftSide<<' '<<rightSide<<'\\n';\n            minOps = min(minOps, leftSide + rightSide - d[i]);\n\n        }\n\n        return minOps;\n\n\n    }\n};",
    "submit_ts": "1721489525",
    "subm_id": "1327455949"
}