{
    "username": "Matt Akin",
    "submission": "class Solution {\npublic:\n    long long maximumValueSum(vector<vector<int>>& board) {\n        int n = board.size(), m = board[0].size();\n        long long res = LLONG_MIN;\n\n        vector<pair<int, pair<int, int>>> places;\n        for (int r = 0; r < n; r++)\n            for (int c = 0; c < m; c++)\n                places.push_back({board[r][c], {r, c}});\n\n        sort(places.begin(), places.end(), greater<pair<int, pair<int, int>>>());\n\n        for (int i = 0; i < m + n; i++) {\n            int r1 = places[i].second.first, c1 = places[i].second.second;\n\n            int j = i + 1;\n            while (j < m * n && (places[j].second.first == r1 || places[j].second.second == c1))\n                j++;\n            \n            if (j >= m * n)\n                continue;\n\n            int r2 = places[j].second.first, c2 = places[j].second.second;\n\n            int k = j + 1;\n            while (k < m * n && (places[k].second.first == r1 || places[k].second.first == r2 || places[k].second.second == c1 || places[k].second.second == c2))\n                k++;\n\n            int maxInRowR2 = INT_MIN;\n            for (int i = 0; i < m; i++)\n                if (i != c1 && i != c2)\n                    maxInRowR2 = max(maxInRowR2, board[r2][i]);\n            int maxInColC2 = INT_MIN;\n            for (int i = 0; i < n; i++)\n                if (i != r1 && i != r2)\n                    maxInColC2 = max(maxInColC2, board[i][c2]);\n\n            long long candidate1 = k < m * n ? (long long) places[i].first + places[j].first + places[k].first : LLONG_MIN;\n            long long candidate2 = (long long) places[i].first + maxInRowR2 + maxInColC2;\n            res = max({res, candidate1, candidate2});\n        }\n\n        return res;\n    }\n};",
    "submit_ts": "1723909091",
    "subm_id": "1359179246"
}