{
    "username": "Abhishek Thakur",
    "submission": "#include <vector>\n#include <algorithm>\n#include <climits>\n\nusing namespace std;\n\nclass sparseTable {\n    vector<vector<int>> vec;\n    vector<int> cal;\npublic:\n    sparseTable(vector<int>& temp) {\n        int n = temp.size();\n        int k = 0;\n        while ((1 << k) <= n) k++;\n        vec.resize(k, vector<int>(n));\n        for (int i = 0; i < n; i++) vec[0][i] = temp[i];\n        cal.push_back(1);\n        for (int i = 1; i < k; i++) {\n            for (int j = 0; j + (1 << i) <= n; j++) {\n                vec[i][j] = max(vec[i - 1][j], vec[i - 1][j + (1 << (i - 1))]);\n            }\n            cal.push_back((1 << i));\n        }\n    }\n\n    int rangeMax(int l, int r) {\n        int range = r - l + 1;\n        int idx = upper_bound(cal.begin(), cal.end(), range) - cal.begin() - 1;\n        return max(vec[idx][l], vec[idx][r - (1 << idx) + 1]);\n    }\n};\n\nclass Solution {\n    typedef long long ll;\n\n    ll cal2(vector<int>& f, vector<int>& s, vector<int>& t) {\n        int n = f.size();\n        vector<int> p1 = f, p2 = s;\n        vector<int> n1 = f, n2 = s;\n\n        for (int i = 1; i < n; i++) {\n            p1[i] = max(p1[i], p1[i - 1]);\n            p2[i] = max(p2[i], p2[i - 1]);\n        }\n        for (int i = n - 2; i >= 0; i--) {\n            n1[i] = max(n1[i], n1[i + 1]);\n            n2[i] = max(n2[i], n2[i + 1]);\n        }\n\n        ll ans = LLONG_MIN;\n        for (int i = 1; i < n - 1; i++) {\n            ll other = max(p1[i - 1] + n2[i + 1], p2[i - 1] + n1[i + 1]);\n            ans = max(ans, other + t[i]);\n        }\n        return ans;\n    }\n\n    ll cal(vector<int>& f, vector<int>& s, vector<int>& t) {\n        return max({cal2(f, s, t), cal2(s, t, f), cal2(f, t, s)});\n    }\n\npublic:\n    long long maximumValueSum(vector<vector<int>>& board) {\n        int n = board.size(), m = board[0].size();\n        vector<sparseTable> allTable;\n        for (int i = 0; i < n; i++) {\n            sparseTable st(board[i]);\n            allTable.push_back(st);\n        }\n\n        ll ans = LLONG_MIN;\n        for (int i = 0; i < m; i++) {\n            for (int j = i + 1; j < m; j++) {\n                vector<int> f, s, t;\n                for (int row = 0; row < n; row++) {\n                    f.push_back(board[row][i]);\n                    s.push_back(board[row][j]);\n                }\n                for (int row = 0; row < n; row++) {\n                    int mx = INT_MIN;\n                    if (i > 0) mx = max(mx, allTable[row].rangeMax(0, i - 1));\n                    if (i + 1 < j) mx = max(mx, allTable[row].rangeMax(i + 1, j - 1));\n                    if (j < m - 1) mx = max(mx, allTable[row].rangeMax(j + 1, m - 1));\n                    t.push_back(mx);\n                }\n                ans = max(ans, cal(f, s, t));\n            }\n        }\n        return ans;\n    }\n};\n",
    "submit_ts": "1723907411",
    "subm_id": "1359106317"
}