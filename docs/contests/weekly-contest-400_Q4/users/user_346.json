{
    "username": "aswinkumarravikumar",
    "submission": "class Solution {\npublic:\n    int minimumDifference(vector<int>& nums, int k) {\n        int root = 0;\n        for(root = 1; root * root <= nums.size(); root++);\n        vector<int> sqrtDecomp(root,((1<<30) - 1));\n        for(int i=0;i<nums.size();i++){\n            sqrtDecomp[i/root] &= nums[i];\n        }\n        int minDiff = (1<<30);\n        for(int i=0;i<nums.size();i++){\n            int bucket = i/root;\n            int curr = (1<<30) - 1;\n            for(int j=i;j/root == bucket && j < nums.size();j++){\n                curr &= nums[j];\n                minDiff = min(minDiff, abs(curr - k));\n            }\n            int endBucket = -1;\n            for(int j=bucket+1;j<root;j++){\n                if((curr & sqrtDecomp[j]) < k){\n                    endBucket = j;\n                    break;\n                }\n                curr &= sqrtDecomp[j];\n                minDiff = min(minDiff, abs(curr- k));\n            }\n            if(endBucket != -1){\n                for(int j=endBucket * root; j/root == endBucket && j < nums.size(); j++){\n                    curr &= nums[j];\n                    minDiff = min(minDiff, abs(curr-k));\n                }\n            }\n        }\n        return minDiff;\n    }\n};",
    "submit_ts": 1717298745.0
}