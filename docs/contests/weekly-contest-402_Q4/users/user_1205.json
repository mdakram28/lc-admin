{
    "username": "MenheraCapoo",
    "submission": "class BIT:\n    def __init__(self, n: int):\n        self.sums = [0] * (n + 1)\n\n    def lowbit(self, x) -> int:\n        return x & (-x)\n\n    def update(self, i, delta):\n        while i < len(self.sums):\n            self.sums[i] += delta\n            i += self.lowbit(i)\n\n    def query(self, i) -> int:\n        sum = 0\n        while i > 0:\n            sum += self.sums[i]\n            i -= self.lowbit(i)\n        return sum\n\nclass Solution:\n    def countOfPeaks(self, nums: List[int], queries: List[List[int]]) -> List[int]:\n        n = len(nums)\n        bit = BIT(n)\n        res = []\n        \n        tot = 0\n        pre = 0\n        for i in range(n):\n            if i - 1 >= 0 and i + 1 <= n - 1 and (nums[i - 1] < nums[i] > nums[i + 1]):\n                tot += 1\n            bit.update(i + 1, tot - pre)\n            pre = tot\n        \n        # for i in range(n + 1):\n        #     q = bit.query(i)\n        #     print(i, q)\n        \n        for t, a, b in queries:\n            if t == 1:\n                l = a\n                r = b\n                if r - l <= 1:\n                    res.append(0)\n                    continue\n                rSum = bit.query(r)\n                lSum = bit.query(l + 1)\n                # print('l, r', l, r)\n                # print('lSum, rSum', lSum, rSum)\n                count = rSum - lSum\n                res.append(count)\n            else:\n                index = a\n                val = b\n                oldVal = nums[index]\n                nums[index] = val\n                # pre\n                dec = index - 2 >= 0 and index <= n - 1 and (nums[index - 2] < nums[index - 1] > oldVal) and not(nums[index - 2] < nums[index - 1] > val)\n                inc = index - 2 >= 0 and index <= n - 1 and not(nums[index - 2] < nums[index - 1] > oldVal) and (nums[index - 2] < nums[index - 1] > val)\n                if dec: bit.update(index, -1)\n                if inc: bit.update(index, 1)\n                # print('pre dec, inc', dec, inc)\n                \n                # mid\n                dec = index - 1 >= 0 and index + 1 <= n - 1 and (nums[index - 1] < oldVal > nums[index + 1]) and not(nums[index - 1] < val > nums[index + 1])\n                inc = index - 1 >= 0 and index + 1 <= n - 1 and not(nums[index - 1] < oldVal > nums[index + 1]) and (nums[index - 1] < val > nums[index + 1])\n                if dec: bit.update(index + 1, -1)\n                if inc: bit.update(index + 1, 1)\n                # print('mid dec, inc', dec, inc)\n                    \n                # next\n                dec = index >= 0 and index + 2 <= n - 1 and (oldVal < nums[index + 1] > nums[index + 2]) and not(val < nums[index + 1] > nums[index + 2])\n                inc = index >= 0 and index + 2 <= n - 1 and not(oldVal < nums[index + 1] > nums[index + 2]) and (val < nums[index + 1] > nums[index + 2])\n                if dec: bit.update(index + 2, -1)\n                if inc: bit.update(index + 2, 1)\n                # print('next dec, inc', dec, inc)\n        return res",
    "submit_ts": 1718508593.0
}