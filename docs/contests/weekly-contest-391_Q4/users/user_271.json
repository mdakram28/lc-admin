{
    "username": "sky_walker-x",
    "submission": "class Solution:\n    def minimumDistance(self, points: List[List[int]]) -> int:\n        n = len(points)\n        xy_sum = [(x + y, i) for i, (x, y) in enumerate(points)]\n        xy_diff = [(x - y, i) for i, (x, y) in enumerate(points)]\n        xy_sum.sort()\n        xy_diff.sort()\n        max_dis_pair = (xy_sum[0][1], xy_sum[-1][1]) if xy_sum[-1][0] - xy_sum[0][0] > xy_diff[-1][0] - xy_diff[0][0] else (xy_diff[0][1], xy_diff[-1][1])\n        \n        # try to remove the first point\n        xy_sum = [(x + y, i) for i, (x, y) in enumerate(points) if i != max_dis_pair[0]]\n        xy_diff = [(x - y, i) for i, (x, y) in enumerate(points) if i != max_dis_pair[0]]\n        xy_sum.sort()\n        xy_diff.sort()\n        max_dis1 = max(xy_sum[-1][0] - xy_sum[0][0], xy_diff[-1][0] - xy_diff[0][0])\n        \n        # try to remove the second point\n        xy_sum = [(x + y, i) for i, (x, y) in enumerate(points) if i != max_dis_pair[1]]\n        xy_diff = [(x - y, i) for i, (x, y) in enumerate(points) if i != max_dis_pair[1]]\n        xy_sum.sort()\n        xy_diff.sort()\n        max_dis2 = max(xy_sum[-1][0] - xy_sum[0][0], xy_diff[-1][0] - xy_diff[0][0])\n        \n        return min(max_dis1, max_dis2)"
}