{
    "username": "vilmos_prokaj",
    "submission": "class BIT:\n    def __init__(self, n):\n        self.values = [0]*(n+1)\n        \n    def add(self, index, value):\n        index += 1\n        values = self.values\n        n = len(values)\n        while index < n:\n            values[index] += value\n            index += index & (-index)\n        \n    def prefix_sum(self, index):\n        index += 1\n        values = self.values\n        value = 0\n        while index > 0:\n            value += values[index]\n            index -= index & (-index)\n        \n        return value\n    \n    def __repr__(self):\n        return str([self.prefix_sum(i) for i in range(len(self.values)-1)])\n    \n\nclass Solution:\n    def countOfPeaks(self, nums: List[int], queries: List[List[int]]) -> List[int]:\n\n        def is_peak(i):\n            return 0 < i < len(nums)-1 and nums[i-1] < nums[i] and nums[i+1] < nums[i]\n\n        bit = BIT(len(nums))\n        for i in range(len(nums)):\n            if is_peak(i):\n                bit.add(i, 1)\n        \n        answer = []\n        for t, a, b in queries:\n            # print(bit)\n            if t == 1:\n                if b < a+1:\n                    answer.append(0)\n                else:\n                    answer.append(bit.prefix_sum(b-1)-bit.prefix_sum(a))\n            else:\n                for i in range(a-1, a+2):\n                    if is_peak(i):\n                        bit.add(i, -1)\n                        \n                nums[a] = b\n                for i in range(a-1, a+2):\n                    if is_peak(i):\n                        bit.add(i, 1)\n            # print(bit)\n                \n        return answer\n        ",
    "submit_ts": 1718507025.0
}