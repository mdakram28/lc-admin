{
    "username": "foxintohumanbeing",
    "submission": "class Solution(object):\n    def minimumCost(self, m, n, horizontalCut, verticalCut):\n        \"\"\"\n        :type m: int\n        :type n: int\n        :type horizontalCut: List[int]\n        :type verticalCut: List[int]\n        :rtype: int\n        \"\"\"\n        # Sort the costs in descending order\n        horizontalCut.sort(reverse=True)\n        verticalCut.sort(reverse=True)\n        \n        h = 0\n        v = 0\n        h_pieces = 1\n        v_pieces = 1\n        total_cost = 0\n        \n        # Use a greedy approach to choose the most expensive cut available\n        while h < len(horizontalCut) and v < len(verticalCut):\n            if horizontalCut[h] >= verticalCut[v]:\n                total_cost += horizontalCut[h] * v_pieces\n                h_pieces += 1\n                h += 1\n            else:\n                total_cost += verticalCut[v] * h_pieces\n                v_pieces += 1\n                v += 1\n        \n        # If there are remaining horizontal cuts\n        while h < len(horizontalCut):\n            total_cost += horizontalCut[h] * v_pieces\n            h_pieces += 1\n            h += 1\n        \n        # If there are remaining vertical cuts\n        while v < len(verticalCut):\n            total_cost += verticalCut[v] * h_pieces\n            v_pieces += 1\n            v += 1\n        \n        return total_cost",
    "submit_ts": "1720924997",
    "subm_id": "1320238984"
}