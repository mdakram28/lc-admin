{
    "username": "Ajit123",
    "submission": "class Solution {\npublic:\n    int extra(int i) {\n        if (i % 2 == 0) {\n            return 2;\n        }\n        return 1;\n    }\n\n    void dfs1(int i, int prev, vector<vector<int>>& g, vector<multiset<int>>& times) {\n        int tot_time = 0;\n        for(auto it: g[i]) {\n            if (it == prev) {\n                continue;\n            }\n\n            dfs1(it, i, g, times);\n            times[i].insert(*times[it].rbegin() + extra(it));\n        }\n\n        times[i].insert(0);\n    }\n\n    void dfs2(int i, int prev, vector<vector<int>>& g, vector<multiset<int>>& times, vector<int>& ans) {\n        ans[i] = *times[i].rbegin();\n        for(auto it: g[i]) {\n            if (it == prev) {\n                continue;\n            }\n\n            int toRemParent = *times[it].rbegin() + extra(it);\n            times[i].erase(times[i].find(toRemParent));\n            int toAddChild = *times[i].rbegin() + extra(i);\n            times[it].insert(toAddChild);\n            dfs2(it, i, g, times, ans);\n            times[it].erase(times[it].find(toAddChild));\n            times[i].insert(toRemParent); \n        }\n    }\n\n    vector<int> timeTaken(vector<vector<int>>& edges) {\n        int n = edges.size() + 1;\n        vector<vector<int>> g(n);\n        vector<multiset<int>> times(n);\n        vector<int> ans(n);\n        \n        for(auto& it: edges) {\n            g[it[0]].push_back(it[1]);\n            g[it[1]].push_back(it[0]);\n        }\n\n        dfs1(0, -1, g, times);\n        dfs2(0, -1, g, times, ans);\n        return ans;\n    }\n};",
    "submit_ts": "1722698272",
    "subm_id": "1343175279"
}