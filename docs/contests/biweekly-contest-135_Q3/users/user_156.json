{
    "username": "jachetheboss",
    "submission": "class Solution {\npublic:\n    void binarySearch(vector<int>& v, int diff, int k, int& single_ops, int& double_ops){\n        if(v.back() + diff <= k){\n            single_ops = v.size();\n            double_ops = 0;\n            return;\n        }\n        if(v[0] + diff > k){\n            single_ops = 0;\n            double_ops = v.size();\n            return;\n        }\n        int lo = 0;\n        int hi = (int)v.size() - 1;\n        int mid = (lo + hi) / 2;\n        while(true){\n            if(v[mid] + diff <= k and v[mid + 1] + diff > k){\n                single_ops = mid + 1;\n                double_ops = (int)v.size() - single_ops;\n                return;\n            }else if(v[mid] + diff > k) hi = mid;\n            else if(v[mid + 1] + diff <= k) lo = mid + 1;\n            mid = (lo + hi) / 2;\n        }\n    }\n    int minChanges(vector<int>& nums, int k) {\n        unordered_map<int, vector<int>> diffs; // count freq of unique differences\n        vector<int> sorted; // closest in each pair\n        int n = nums.size();\n        int bound = n / 2;\n        for(int i = 0; i < bound; ++i){\n            int diff = abs(nums[i] - nums[n - 1 - i]);\n            if(diffs.count(diff) == false) diffs.insert({diff, {}});\n            //diffs[diff].push_back(min(nums[i], nums[n - 1 - i]));\n            int min_d1 = min(nums[i], k - nums[i]);\n            int min_d2 = min(nums[n - 1 - i], k - nums[n - 1 - i]);\n            if(min_d1 <= min_d2){\n                diffs[diff].push_back(min_d1);\n                sorted.push_back(min_d1);\n            }else{\n                diffs[diff].push_back(min_d2);\n                sorted.push_back(min_d2);\n            }\n        }\n        // binary searches? sort diffs in order?\n        // for each diff, figure out how many double ops are needed, how many single ops are needed\n        sort(sorted.begin(), sorted.end());\n        unordered_map<int, vector<int>>::iterator it;\n        int ans = INT_MAX;\n        for(it = diffs.begin(); it != diffs.end(); ++it){\n            int diff = it->first;\n            vector<int>& v = it->second;\n            int single_ops;\n            int double_ops;\n            binarySearch(sorted, diff, k, single_ops, double_ops);\n            // remember to decrement out diff's own\n            int decr_single_ops;\n            int decr_double_ops;\n            binarySearch(v, diff, k, decr_single_ops, decr_double_ops);\n            single_ops -= decr_single_ops;\n            double_ops -= decr_double_ops;\n            int ops = single_ops + 2 * double_ops;\n            ans = min(ans, ops);\n        }\n        return ans;\n    }\n};",
    "submit_ts": "1721487434",
    "subm_id": "1327388691"
}