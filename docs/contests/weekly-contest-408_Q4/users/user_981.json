{
    "username": "itzzGaurav7",
    "submission": "class Solution {\npublic:\n    bool bfs(const vector<vector<int>>& g, int s, int t1, int t2, int n) {\n        vector<int> v(n + 4, 0);\n        queue<int> q;\n        q.push(s);\n        v[s] = 1;\n\n        while (!q.empty()) {\n            int u = q.front();\n            q.pop();\n            for (int w : g[u]) {\n                if (!v[w]) {\n                    q.push(w);\n\n                    v[w] = 1;\n                }\n            }\n        }\n        return v[t1] || v[t2];\n    }\n\n    bool canReachCorner(int X, int Y, vector<vector<int>>& circles) {\n        int n = circles.size();\n\n        \n        vector<vector<int>> g(n + 4);\n\n        for (int i = 0; i < n; ++i) {\n            int x = circles[i][0];\n            int y = circles[i][1];\n            int r = circles[i][2];\n            if (x <= r) {\n                g[n].push_back(i);\n                g[i].push_back(n);\n            }\n            if (X - x <= r) {\n                g[n + 2].push_back(i);\n                g[i].push_back(n + 2);\n            }\n            if (y <= r) {\n                g[n + 1].push_back(i);\n                g[i].push_back(n + 1);\n            }\n            if (Y - y <= r) {\n                g[n + 3].push_back(i);\n                g[i].push_back(n + 3);\n            }\n            for (int j = i + 1; j < n; ++j) {\n                int xj = circles[j][0];\n                int yj = circles[j][1];\n\n\n                int rj = circles[j][2];\n                double d = sqrt(pow(x - xj, 2) + pow(y - yj, 2));\n                int rs = r + rj;\n\n\n                if (rs >= d) {\n                    g[i].push_back(j);\n                    g[j].push_back(i);\n                }\n            }\n        }\n\n        bool b = false;\n        b = max(b, bfs(g, n,n + 1,n + 2,n + 4));  \n        b = max(b, bfs(g,n + 3, n + 2, n + 1,n + 4)); \n\n        return !b;\n    }\n};",
    "submit_ts": "1722138883",
    "subm_id": "1335802125"
}