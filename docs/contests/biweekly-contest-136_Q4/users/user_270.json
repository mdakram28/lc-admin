{
    "username": "theoden42",
    "submission": "class Solution {\npublic:\n    vector<int> timeTaken(vector<vector<int>>& edges) {\n        int n = edges.size() + 1;\n        vector<vector<int>> adj(n);\n        for(int i = 0; i < edges.size(); i++){\n            adj[edges[i][0]].push_back(edges[i][1]);\n            adj[edges[i][1]].push_back(edges[i][0]);\n        }   \n        vector<int> times(n);\n        vector<multiset<pair<int,int>>> st(n);\n        function<int(int,int)> dfs = \n        [&](int src, int pnt){\n            int mx = 0;\n            for(auto x: adj[src]) if(x != pnt) { \n                int v = dfs(x, src);\n                if(x & 1) v += 1; else v += 2;\n                mx = max(mx, v);\n                st[src].insert({v, x});\n                if(st[src].size() > 2){\n                    st[src].erase(st[src].begin());\n                }\n            }\n            return times[src] = mx;\n        }; dfs(0, -1);\n\n        vector<int> ans(n);\n        function<void(int,int)> reroot = \n        [&](int src, int pnt){\n            if(pnt == -1){\n                ans[src] = times[src];\n                for(auto x: adj[src]){\n                    reroot(x, src);\n                }\n                return;\n            }\n            int v = 1;\n            if(!(pnt & 1))\n                v += 1;\n            if(st[pnt].rbegin()->second == src){\n                if(st[pnt].size() >= 2){\n                   auto it = --st[pnt].end();\n                   --it;\n                   v += it->first;\n                }\n            } else {\n                v += st[pnt].rbegin()->first;\n            }\n            st[src].insert({v, pnt});\n            if(st[src].size() > 2){\n                st[src].erase(st[src].begin());\n            }\n            ans[src] = st[src].rbegin()->first;\n            for(auto x: adj[src]) if( x != pnt){\n                reroot(x, src);\n            }\n        }; reroot(0, -1);\n\n        return ans;\n    }\n};",
    "submit_ts": "1722700395",
    "subm_id": "1343240583"
}