{
    "username": "BytefulRashi",
    "submission": "#include <vector>\n#include <string>\n#include <algorithm>\n#include <climits>\nusing namespace std;\n\nclass TrieNode {\npublic:\n    TrieNode* child[26];\n    int cost;\n    \n    TrieNode() : cost(INT_MAX) {\n        for (int i = 0; i < 26; ++i) {\n            child[i] = nullptr;\n        }\n    }\n};\n\nclass Trie {\npublic:\n    TrieNode* root;\n    \n    Trie() {\n        root = new TrieNode();\n    }\n    \n    void insert(const string& word, int cost) {\n        TrieNode* node = root;\n        for (char c : word) {\n            int index = c - 'a';\n            if (!node->child[index]) {\n                node->child[index] = new TrieNode();\n            }\n            node = node->child[index];\n        }\n        node->cost = min(node->cost, cost);\n    }\n};\n\nclass Solution {\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int n = target.size();\n        Trie trie;\n        \n        for (int i = 0; i < words.size(); ++i) {\n            trie.insert(words[i], costs[i]);\n        }\n        \n        vector<int> dpp(n + 1, INT_MAX);\n        dpp[0] = 0;\n        \n        solve(target, trie, dpp);\n        \n        return getResult(dpp, n);\n    }\n    \nprivate:\n    void solve(const string& target, Trie& trie, vector<int>& dp) {\n        int n = target.size();\n        for (int i = 0; i < n; ++i) {\n            if (dp[i] == INT_MAX) {\n                continue;\n            }\n            \n            TrieNode* node = trie.root;\n            for (int j = i; j < n; ++j) {\n                int index = target[j] - 'a';\n                if (!node->child[index]) {\n                    break;\n                }\n                node = node->child[index];\n                if (node->cost != INT_MAX) {\n                    dp[j + 1] = min(dp[j + 1], dp[i] + node->cost);\n                }\n            }\n        }\n    }\n    \n    int getResult(const vector<int>& dpp, int n) {\n        if (dpp[n] == INT_MAX) {\n            return -1;\n        } else {\n            return dpp[n];\n        }\n    }\n};\n",
    "submit_ts": "1720322802",
    "subm_id": "1312359467"
}