{
    "username": "ethanrao",
    "submission": "class Solution {\npublic:\n    int s1[200005], cnt_b = 0;\n    long long s2[200005];\n    void upd(int x, int l, int r, int y, int z){\n        if(l == r){\n            s1[x] += z;\n            s2[x] += 1ll * y * z;\n            return ;\n        }\n        int mid = l + r >> 1;\n        if(y <= mid) upd(x * 2, l, mid, y, z);\n        else upd(x * 2 + 1, mid + 1, r, y, z);\n        s1[x] = s1[x * 2] + s1[x * 2 + 1];\n        s2[x] = s2[x * 2] + s2[x * 2 + 1];\n        return ;\n    }\n    struct res{\n        int v1;\n        long long v2;\n    };\n    res ask(int x, int l, int r, int L, int R){\n        if(l == L && r == R){\n            res rr; rr.v1 = s1[x], rr.v2 = s2[x];\n            return rr;\n        }\n        int mid = l + r >> 1;\n        if(R <= mid) return ask(x * 2, l, mid, L, R);\n        else if(L >= mid + 1) return ask(x * 2 + 1, mid + 1, r, L, R);\n        else {\n            res rr, r1, r2;\n            r1 = ask(x * 2, l, mid, L, mid), r2 = ask(x * 2 + 1, mid + 1, r, mid + 1, R);\n            rr.v1 = r1.v1 + r2.v1;\n            rr.v2 = r1.v2 + r2.v2;\n            return rr;\n        }\n    }\n    int n, a[50005], b[50005];\n    void erase(int x){\n        //printf(\"n = %d, erase %d\\n\", n, x);\n        upd(1, 1, n, x + 1, -1);\n        return ;\n    }\n    void insert(int x){\n        //printf(\"n = %d, insert %d\\n\", n, x);\n        upd(1, 1, n, x + 1, 1);\n        return ;\n    }\n    std::set <int> c1, c0;\n    void change(int x){\n        if(b[x] == 0){\n            if(x > 1 && b[x - 1] == 1 && x < n && b[x + 1] == 1){\n                auto it1 = c0.lower_bound(x);\n                --it1;\n                int beg = (*it1) + 1;\n                erase(x - beg);\n                auto it2 = c0.lower_bound(x + 1);\n                int end = (*it2) - 1;\n                erase(end - x);\n                insert(end - beg + 1);\n            }\n            else if(x > 1 && b[x - 1] == 1){\n                auto it1 = c0.lower_bound(x);\n                --it1;\n                int beg = (*it1) + 1;\n                erase(x - beg);\n                insert(x - beg + 1);\n            }\n            else if(x < n && b[x + 1] == 1){\n                auto it2 = c0.lower_bound(x + 1);\n                int end = (*it2) - 1;\n                erase(end - x);\n                insert(end - x + 1);\n            }\n            else insert(1);\n            c0.erase(x);\n            c1.insert(x);\n            ++cnt_b;\n            b[x] = 1;\n        }\n        else {\n            if(x > 1 && b[x - 1] == 1 && x < n && b[x + 1] == 1){\n                auto it1 = c0.lower_bound(x);\n                --it1;\n                int beg = (*it1) + 1;\n                insert(x - beg);\n                auto it2 = c0.lower_bound(x + 1);\n                int end = (*it2) - 1;\n                insert(end - x);\n                erase(end - beg + 1);\n            }\n            else if(x > 1 && b[x - 1] == 1){\n                auto it1 = c0.lower_bound(x);\n                --it1;\n                int beg = (*it1) + 1;\n                insert(x - beg);\n                erase(x - beg + 1);\n            }\n            else if(x < n && b[x + 1] == 1){\n                auto it2 = c0.lower_bound(x + 1);\n                int end = (*it2) - 1;\n                insert(end - x);\n                erase(end - x + 1);\n            }\n            else erase(1);\n            c0.insert(x);\n            c1.erase(x);\n            --cnt_b;\n            b[x] = 0;\n        }\n        return ;\n    }\n    vector<int> numberOfAlternatingGroups(vector<int>& colors, vector<vector<int>>& queries) {\n        std::vector <int> ans;\n        n = colors.size();\n        for(int i = 1; i <= n; ++i) a[i] = colors[i - 1];\n        for(int i = 1; i <= n - 1; ++i){\n            b[i] = (a[i] != a[i + 1]) ? 1 : 0, cnt_b += b[i];\n            if(b[i] == 0) c0.insert(i);\n            else c1.insert(i);\n        }\n        c0.insert(0), c1.insert(0);\n        c0.insert(n), c1.insert(n);\n        for(int i = 1, j; i <= n - 1; i = j + 1){\n            j = i;\n            if(b[i] == 0) continue;\n            while(j < n - 1 && b[j + 1] == 1) ++j;\n            insert(j - i + 1);\n        }\n        for(int i = 0; i < queries.size(); ++i){\n            if(queries[i][0] == 1){\n                if(cnt_b == n - 1 && a[1] != a[n]){\n                    ans.push_back(n);\n                    continue;\n                }\n                int s = queries[i][1];\n                res rr = ask(1, 1, n, s, n);\n                int tmp = int(rr.v2 - 1ll * rr.v1 * s + 1ll * rr.v1);\n                //printf(\"tmp = %d\\n\", tmp);\n                if(a[1] != a[n]){\n                    auto it1 = c0.lower_bound(1);\n                    int c1 = (*it1) - 1;\n                    auto it2 = c0.lower_bound(n);\n                    --it2;\n                    int c2 = n - 1 - (*it2);\n                    int mi = std::max(s - 2 - c1, 0), ma = std::min(c2, s - 2);\n                    if(ma >= mi) tmp += ma - mi + 1;\n                }\n                ans.push_back(tmp);\n            }\n            else {\n                int x = queries[i][1] + 1, y = queries[i][2];\n                if(a[x] == y) continue;\n                if(x < n) change(x);\n                if(x > 1) change(x - 1);\n                a[x] = y;\n            }\n        }\n        return ans;\n    }\n};",
    "submit_ts": "1722743021",
    "subm_id": "1343782510"
}