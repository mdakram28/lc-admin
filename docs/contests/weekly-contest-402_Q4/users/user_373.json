{
    "username": "weiyinfu",
    "submission": "\nclass Solution:\n    def countOfPeaks(self, nums: List[int], queries: List[List[int]]) -> List[int]:\n        tr=[0]*(len(nums)+2)\n        def lowbit(x):\n            return x&(-x)\n        def update_tr(ind,v):\n            if v==0:\n                return \n            x=ind\n            while x<len(tr):\n                tr[x]+=v\n                x+=lowbit(x)\n        def query_tr(ind):\n            ans=0\n            x=ind\n            while x>0:\n                ans+=tr[x]\n                x-=lowbit(x)\n            return ans\n        def query(f,t):\n            if f+1>=t:\n                return 0\n            ans= query_tr(t+1)-query_tr(f)\n            if ispeak(t):\n                ans-=1\n            if ispeak(f):\n                ans-=1\n            return ans\n        def ispeak(ind):\n            if ind-1<0 or ind+1>=len(nums):\n                return False\n            return nums[ind]>nums[ind-1] and nums[ind]>nums[ind+1]\n        def update(ind,v):\n            for i in range(-1,2):\n                old=nums[ind]\n                p=ispeak(ind+i)\n                nums[ind]=v\n                pp=ispeak(ind+i)\n                nums[ind]=old\n                update_tr(ind+i+1,pp-p)\n            nums[ind]=v\n        for i in range(len(nums)):\n            if ispeak(i):\n                update_tr(i+1,1)\n        ans=[]\n        for i in queries:\n            if i[0]==1:\n                # print(nums,tr)\n                ans.append(query(i[1],i[2]))\n            else:\n                update(i[1],i[2])\n        return ans",
    "submit_ts": 1718507361.0
}