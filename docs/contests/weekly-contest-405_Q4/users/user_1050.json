{
    "username": "wweijia",
    "submission": "class TrieNode:\n    def __init__(self):\n        self.chd = {}\n        self.l = 0\n        self.cost = inf\n\n    def insert(self, word, cost):\n        node = self\n        for c in word:\n            if c not in node.chd:\n                node.chd[c] = TrieNode()\n            node = node.chd[c]\n        node.cost = min(node.cost, cost)\n        node.l = len(word)\n\n    def search(self, word):\n        node = self\n        for c in word:\n            if c not in node.chd:\n                return False\n            node = node.chd[c]\n        return node.end\n\nclass Solution:\n    def minimumCost(self, target: str, words: List[str], costs: List[int]) -> int:\n        m = len(words)\n        n = len(target)\n\n        root = TrieNode()\n        for i in range(m):\n            root.insert(words[i], costs[i])\n\n        dp = [inf] * (n + 1)\n        dp[0] = 0\n\n        for i in range(n):\n            node = root\n            for j in range(i, n):\n                if target[j] in node.chd:\n                    node = node.chd[target[j]]\n                    if node.cost != inf:\n                        dp[j + 1] = min(dp[j + 1], dp[j + 1 - node.l] + node.cost)\n                else:\n                    break\n\n        return dp[-1] if dp[-1] != inf else -1",
    "submit_ts": "1720323323",
    "subm_id": "1312372773"
}