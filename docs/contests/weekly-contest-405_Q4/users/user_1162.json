{
    "username": "GoGuru",
    "submission": "#include <vector>\n#include <string>\n#include <unordered_map>\n#include <limits>\n\nusing namespace std;\n\nclass TrieNode {\npublic:\n    unordered_map<char, TrieNode*> children;\n    vector<pair<int, int>> wordIndices;  // (word index, cost)\n    \n    TrieNode() {}\n};\n\nclass Solution {\nprivate:\n    TrieNode* root;\n    vector<int> memo;\n    string target;\n    \n    void buildTrie(const vector<string>& words, const vector<int>& costs) {\n        root = new TrieNode();\n        for (int i = 0; i < words.size(); ++i) {\n            TrieNode* node = root;\n            for (char c : words[i]) {\n                if (node->children.find(c) == node->children.end()) {\n                    node->children[c] = new TrieNode();\n                }\n                node = node->children[c];\n            }\n            node->wordIndices.emplace_back(i, costs[i]);\n        }\n    }\n    \n    int dfs(int i) {\n        if (i == target.length()) return 0;\n        if (memo[i] != -1) return memo[i];\n        \n        int result = numeric_limits<int>::max();\n        TrieNode* node = root;\n        \n        for (int j = i; j < target.length(); ++j) {\n            if (node->children.find(target[j]) == node->children.end()) break;\n            node = node->children[target[j]];\n            for (const auto& [wordIndex, cost] : node->wordIndices) {\n                int subCost = dfs(j + 1);\n                if (subCost != numeric_limits<int>::max()) {\n                    result = min(result, cost + subCost);\n                }\n            }\n        }\n        \n        return memo[i] = result;\n    }\n    \npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        this->target = target;\n        memo.assign(target.length(), -1);\n        \n        buildTrie(words, costs);\n        \n        int result = dfs(0);\n        return result == numeric_limits<int>::max() ? -1 : result;\n    }\n};",
    "submit_ts": "1720322991",
    "subm_id": "1312364534"
}