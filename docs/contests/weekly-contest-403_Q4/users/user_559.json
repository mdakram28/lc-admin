{
    "username": "d_ananta_",
    "submission": "#pragma GCC optimize(\"Ofast\")\n#pragma GCC optimize(\"unroll-loops\")\n#pragma GCC target(\"avx2,bmi,bmi2,popcnt,lzcnt\")\nclass Solution {\npublic:\n    inline bool check(vector<int> &mni, vector<int> &mxi, vector<int> &mnj, vector<int> &mxj) {\n        for(int i = 0; i < 3; i++) {\n            for(int j = i+1; j < 3; j++) {\n                if(!(mxi[i] < mni[j] || mxi[j] < mni[i] || mxj[i] < mnj[j] || mxj[j] < mnj[i])) return 0;\n            }\n        }\n        return 1;\n    }\n    inline void solve(vector<vector<int>> &grid, int &ans) {\n        int n = grid.size(), m = grid[0].size();\n        int t;\n        vector<int> mni, mxi, mnj, mxj;\n        \n        for(int i = 0; i < n; i++) {\n            for(int j = i; j < n; j++) {\n                mni = mnj = vector<int>(3, 40);\n                mxi = mxj = vector<int>(3, -1);\n                for(int ii = 0; ii < n; ii++) {\n                    for(int jj = 0; jj < m; jj++) {\n                        if(grid[ii][jj]) {\n                            if(ii < i) t = 0;\n                            else if(ii > j) t = 1;\n                            else t = 2;\n                            update(ii, jj, mni[t], mxi[t], mnj[t], mxj[t]);\n                        }\n                    }\n                }\n                if(mni[0] != -1 && mni[1] != -1 && mni[2] != -1 && check(mni, mxi, mnj, mxj)) {\n                    ans = min(ans, calc(mni, mxi, mnj, mxj));\n                }\n            }\n        }\n        \n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < m; j++) {\n                // batas vertikal\n                mni = mnj = vector<int>(3, 40);\n                mxi = mxj = vector<int>(3, -1);\n                for(int ii = 0; ii < n; ii++) {\n                    for(int jj = 0; jj < m; jj++) {\n                        if(grid[ii][jj]) {\n                            if(ii <= i) t = 0;\n                            else if(jj <= j) t = 1;\n                            else t = 2;\n                            update(ii, jj, mni[t], mxi[t], mnj[t], mxj[t]);\n                        }\n                    }\n                }\n                if(mni[0] != -1 && mni[1] != -1 && mni[2] != -1 && check(mni, mxi, mnj, mxj)) {\n                    ans = min(ans, calc(mni, mxi, mnj, mxj));\n                }\n                // batas horizontal\n                mni = mnj = vector<int>(3, 40);\n                mxi = mxj = vector<int>(3, -1);\n                for(int ii = 0; ii < n; ii++) {\n                    for(int jj = 0; jj < m; jj++) {\n                        if(grid[ii][jj]) {\n                            if(jj <= j) t = 0;\n                            else if(ii <= i) t = 1;\n                            else t = 2;\n                            update(ii, jj, mni[t], mxi[t], mnj[t], mxj[t]);\n                        }\n                    }\n                }\n                if(mni[0] != -1 && mni[1] != -1 && mni[2] != -1 && check(mni, mxi, mnj, mxj)) {\n                    ans = min(ans, calc(mni, mxi, mnj, mxj));\n                }\n            }\n        }\n    }\n    inline void update(int i, int j, int &mni, int &mxi, int &mnj, int &mxj) {\n        mni = min(mni, i);\n        mxi = max(mxi, i);\n        mnj = min(mnj, j);\n        mxj = max(mxj, j);\n    }\n    inline int calc(vector<int> &mni, vector<int> &mxi, vector<int> &mnj, vector<int> &mxj) {\n        int ret = 0;\n        for(int t = 0; t < 3; t++) {\n            ret += (mxi[t] - mni[t] + 1) * (mxj[t] - mnj[t] + 1);\n        }\n        return ret;\n    }\n    int minimumSum(vector<vector<int>>& grid) {\n        ios_base::sync_with_stdio(false); cin.tie(0);\n        int n = grid.size(), m = grid[0].size();\n        int ans = n * m;\n        vector<vector<int>> tmpgrid;\n        for(int k = 0; k < 4; k++) {\n            solve(grid, ans);\n            n = grid.size(), m = grid[0].size();\n            tmpgrid.assign(m, vector<int>(n));\n            for(int i = 0; i < m; i++) {\n                for(int j = 0; j < n; j++) {\n                    tmpgrid[i][j] = grid[n-j-1][i];\n                }\n            }\n            grid = tmpgrid;\n        }\n        return ans;\n    }\n};",
    "submit_ts": 1719114487.0
}