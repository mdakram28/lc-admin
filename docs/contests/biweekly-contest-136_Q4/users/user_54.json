{
    "username": "vermachakshu",
    "submission": "class Solution {\n    vector<vector<int>> adj;\n    vector<int> ans, dp, out, times;\n    vector<multiset<int>> st; \npublic:\n\n    void dfs(int i, int p, int x){\n        \n        // cout << i << \" \" << x << \" ..\\n\";\n        times[i] = dp[i] = x;\n        \n        for(int j:adj[i]){\n            if(j == p)  continue;\n            dfs(j, i, 1 + !(j & 1) + times[i]);\n            dp[i] = max(dp[i], dp[j]);\n            st[i].insert(dp[j]);\n        }\n    }\n\n    void reRoot(int i, int p, int sub){\n        // cout << i << \" \" << sub << \" ..\\n\";\n        ans[i] = max(out[i], dp[i] - sub);\n        for(int j:adj[i]){\n            if(j == p)  continue;\n            st[i].erase(st[i].find(dp[j]));\n            int y = st[i].empty() ? 0 : (*(st[i].rbegin()) - sub);\n            out[j] = max(out[i], y) + 1 + !(i & 1);\n            reRoot(j, i, times[j]);\n            st[i].insert(dp[j]);\n        }\n    }\n\n    vector<int> timeTaken(vector<vector<int>>& edges) {\n        int n = edges.size() + 1;\n        \n        adj.resize(n);\n        ans.resize(n);\n        dp.resize(n);\n        st.resize(n);\n        out.resize(n);\n        times.resize(n);\n\n        for(auto e:edges){\n            adj[e[0]].push_back(e[1]);\n            adj[e[1]].push_back(e[0]);\n        }\n\n        dfs(0, -1, 0);\n        // for(int i=0; i<n; i++){\n        //     cout << times[i] << \" \";\n        // }\n        reRoot(0, -1, 0);\n        // for(int i=0; i<n; i++){\n        //     cout << dp[i] << \" \" << out[i] << \"\\n\";\n        // }\n\n        return ans;\n    }\n};",
    "submit_ts": "1722698009",
    "subm_id": "1343166623"
}