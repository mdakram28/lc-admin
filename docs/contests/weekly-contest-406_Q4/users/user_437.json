{
    "username": "bai-du-ren-a",
    "submission": "class Solution:\n    def minimumCost(self, m: int, n: int, horizontalCut: List[int], verticalCut: List[int]) -> int:\n        # \u521d\u59cb\u5316\u6700\u5c0f\u5806\n        heap = []\n        \n        # \u5c06\u6240\u6709\u6c34\u5e73\u548c\u5782\u76f4\u5207\u5272\u7684\u5f00\u9500\u52a0\u5165\u5230\u6700\u5c0f\u5806\u4e2d\n        for i, cost in enumerate(horizontalCut):\n            heapq.heappush(heap, (cost, 'H', i))\n        for j, cost in enumerate(verticalCut):\n            heapq.heappush(heap, (cost, 'V', j))\n        \n        # \u521d\u59cb\u5316\u603b\u5f00\u9500\n        total_cost = 0\n        \n        # \u521d\u59cb\u5316\u5f53\u524d\u86cb\u7cd5\u7684\u7ef4\u5ea6\n        current_m = m\n        current_n = n\n        \n        # \u5f53\u5806\u4e0d\u4e3a\u7a7a\u65f6\uff0c\u9010\u6b65\u8fdb\u884c\u5207\u5272\n        while heap:\n            cost, direction, index = heapq.heappop(heap)\n            \n            # \u6839\u636e\u5207\u5272\u65b9\u5411\u66f4\u65b0\u5f53\u524d\u86cb\u7cd5\u7684\u7ef4\u5ea6\n            if direction == 'H':\n                total_cost += cost * current_n\n                current_m -= 1\n            else:\n                total_cost += cost * current_m\n                current_n -= 1\n            \n            # \u5982\u679c\u6240\u6709\u86cb\u7cd5\u5757\u5747\u4e3a 1 x 1 \uff0c\u5219\u9000\u51fa\n            if current_m == 1 and current_n == 1:\n                break\n        \n        return total_cost",
    "submit_ts": "1720925224",
    "subm_id": "546437796"
}