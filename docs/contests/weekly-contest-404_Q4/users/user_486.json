{
    "username": "phanthaiduong21",
    "submission": "class Solution {\npublic:\n    pair<int,int> heightTree(unordered_map<int, vector<int>>&graphs, int start){\n        queue<pair<int,int>>q;\n        unordered_set<int>vis;\n        \n        q.push({start, 0});\n        vis.insert(start);\n\n        int ans = 0;\n        int farestNode = 0;\n\n        while(!q.empty()){\n            auto [u, dis] = q.front();\n            q.pop();\n\n            if(dis > ans){\n                ans = dis;\n                farestNode = u;\n            }\n\n            for(int i = 0;i<graphs[u].size(); ++i){\n                int v = graphs[u][i];\n                if(vis.find(v) == vis.end()){\n                    vis.insert(v);\n                    q.push({v, dis + 1});\n                }\n            }\n        }\n        \n        return {ans, farestNode};\n    }\n    pair<int,int> findMinHeightTree(vector<vector<int>>& edges) {\n        int n = edges.size() + 1;\n        unordered_map<int, vector<int>>graphs;\n        vector<int>indegree(n, 0);\n        unordered_set<int>vis;\n        for(int i = 0;i<edges.size(); ++i){\n            graphs[edges[i][0]].push_back(edges[i][1]);\n            graphs[edges[i][1]].push_back(edges[i][0]);\n            indegree[edges[i][0]]++;\n            indegree[edges[i][1]]++;\n        }\n\n        queue<int>q;\n        for(int i = 0;i<n; ++i){\n            vis.insert(i);\n        }\n        if(n > 2){\n            for(int i = 0;i<n; ++i){\n                if(indegree[i] == 1){\n                    q.push(i);\n                    vis.erase(i);\n                }\n            }\n        }\n\n        while(!q.empty()){\n            int len = q.size();\n\n            for(int i = 0;i<len; ++i){\n                int node = q.front(); q.pop();\n\n                vis.erase(node);\n                // cout<<node<<endl;\n\n                for(int nei : graphs[node]){\n                    indegree[nei]--;\n                    // cout<<\"nei: \"<<nei<<\" | indegree: \"<<indegree[nei]<<endl;\n                    if(indegree[nei] == 1 && vis.find(nei) != vis.end()){\n                        // cout<<\"push: \"<<nei<<endl;\n                        q.push(nei);\n                    }\n                }\n            }\n            if(vis.size() <= 2) break;\n        }\n\n        int root = (*vis.begin());\n\n        auto [h, farestNode] = heightTree(graphs, root);\n        auto [p, P]  = heightTree(graphs, farestNode);\n\n        return {h, p};\n    }\n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n        auto [a, c] = findMinHeightTree(edges1);\n        auto [b, d] = findMinHeightTree(edges2);\n        return max({a + b + 1, c, d});\n    }\n};",
    "submit_ts": 1719718796.0
}