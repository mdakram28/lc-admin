{
    "username": "qiu-tian-han-5",
    "submission": "class Solution {\npublic:\n    int minimumDistance(vector<vector<int>>& points) {\n        int n = points.size();\n        multiset<pair<int, int>> p[4];\n        int tot = 0;\n        for (auto t : points) {\n            int x = t[0], y = t[1];\n            p[0].insert({x + y, tot});\n            p[1].insert({x - y, tot});\n            p[2].insert({-x + y, tot});\n            p[3].insert({-x - y, tot});\n            tot++;\n        }\n        int mx = 0;\n        for (int i = 0; i < 4; i++) {\n            mx = max(mx, p[i].rbegin()->first - p[i].begin()->first);\n        }\n        int ans = mx;\n        for (int i = 0; i < 4; i++) {\n            int id = p[i].begin()->second;\n            int x = points[id][0], y = points[id][1];\n            if (p[0].count({x + y, id})) p[0].extract({x + y, id});\n            if (p[1].count({-x - y, id})) p[1].extract({x - y, id});\n            if (p[2].count({-x + y, id})) p[2].extract({-x + y, id});\n            if (p[3].count({-x - y, id})) p[3].extract({-x - y, id});\n            int cur = 0;\n            for (int i = 0; i < 4; i++) {\n                cur = max(cur, p[i].rbegin()->first - p[i].begin()->first);\n            }\n            p[0].insert({points[id][0] + points[id][1], id});\n            p[1].insert({points[id][0] - points[id][1], id});\n            p[2].insert({-points[id][0] + points[id][1], id});\n            p[3].insert({-points[id][0] - points[id][1], id});\n            ans = min(ans, cur);\n        }\n        for (int i = 0; i < 4; i++) {\n            int id = p[i].rbegin()->second;\n            p[0].erase({points[id][0] + points[id][1], id});\n            p[1].erase({points[id][0] - points[id][1], id});\n            p[2].erase({-points[id][0] + points[id][1], id});\n            p[3].erase({-points[id][0] - points[id][1], id});\n            int cur = 0;\n            for (int i = 0; i < 4; i++) {\n                cur = max(cur, p[i].rbegin()->first - p[i].begin()->first);\n            }\n            p[0].insert({points[id][0] + points[id][1], id});\n            p[1].insert({points[id][0] - points[id][1], id});\n            p[2].insert({-points[id][0] + points[id][1], id});\n            p[3].insert({-points[id][0] - points[id][1], id});\n            ans = min(cur, ans);\n        }\n        return ans;\n    }\n};"
}