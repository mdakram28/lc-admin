{
    "username": "finisher07",
    "submission": "#define MAXN 50000\nint dp[MAXN+1];\n\nclass TrieNode {\npublic:\n    // unordered_map<char, TrieNode*> children;\n    TrieNode* children[26];\n    int cost;\n\n    TrieNode() : cost(INT_MAX) {\n        memset(children, NULL, sizeof(children));\n    }\n};\n\nclass Trie {\npublic:\n    TrieNode* root;\n\n    Trie() {\n        root = new TrieNode();\n    }\n\n    void insert(const string& word, int cost) {\n        TrieNode* node = root;\n        for (char ch : word) {\n            if (!node->children[ch - 'a']) {\n                node->children[ch - 'a'] = new TrieNode();\n            }\n            node = node->children[ch -'a'];\n        }\n        node->cost = min(node->cost, cost);\n    }\n};\n\nclass Solution {\npublic:\n//     int solve(string& s, int idx, unordered_map<string, int>& dict, vector<int>& c)\n//     {\n//         // base case;\n//         int n{(int)s.length()};\n//         if(idx == n) return 0;\n        \n//         if(dp[idx] != -1) \n//         {\n//             cout << \"pruned\" << endl;\n//             return dp[idx];\n//         }\n        \n//         int minCost{INT_MAX - MAXN};\n//         string part;\n//         for(int i = idx; i < n; i++)\n//         {\n//             // string part = s.substr(idx, (i - idx + 1));\n//             part += (s[i]);\n//             auto it = dict.find(part);\n//             if(it != dict.end())\n//             {\n//                 int cost = c[it->second] + solve(s, i+1, dict, c);\n//                 minCost = min(cost, minCost);\n//             }\n//         }\n        \n//         return dp[idx] = minCost;\n//     }\n    int solve(const string& s, int idx, Trie& trie) {\n        int n = s.length();\n        if (idx == n) return 0;\n\n        if (dp[idx] != -1) {\n            // cout << \"pruned\" << endl;\n            return dp[idx];\n        }\n\n        int minCost = INT_MAX - MAXN;\n        TrieNode* node = trie.root;\n\n        for (int i = idx; i < n; ++i) {\n            char ch = s[i];\n            if (!node->children[ch - 'a']) break;\n            node = node->children[ch - 'a'];\n            if (node->cost != INT_MAX) {\n                int cost = node->cost + solve(s, i + 1, trie);\n                minCost = min(cost, minCost);\n            }\n        }\n\n        return dp[idx] = minCost;\n    }\n    \n    \n    int minimumCost(string tar, vector<string>& w, vector<int>& c) {\n        int i{}, n{int(w.size())};\n        // unordered_map<string, int> dict;\n        // for(i = 0; i < n; i++)\n        // {\n        //     auto it = dict.find(w[i]);\n        //     if(it == dict.end()) dict[w[i]] = i;\n        //     else\n        //     {\n        //         if(c[it->second] > c[i]) dict[w[i]] = i;\n        //     }\n        // }\n        Trie trie;\n        for (int i = 0; i < w.size(); ++i) {\n            trie.insert(w[i], c[i]);\n        }\n        memset(dp, -1, sizeof(dp));\n        // cout << \"here\" << endl;\n        \n//         int res = solve(tar, 0, dict, c);\n        \n//         if(res >= INT_MAX - MAXN) return -1;\n        int res = solve(tar, 0, trie);\n\n        if (res >= INT_MAX - MAXN) return -1;\n\n        \n        return res;\n        \n    }\n};",
    "submit_ts": "1720323352",
    "subm_id": "1312373462"
}