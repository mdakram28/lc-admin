{
    "username": "Arucade",
    "submission": "class Solution {\n    public List<Integer> countOfPeaks(int[] nums, int[][] q) {\n        List<Integer> res = new ArrayList<>();\n        int n = nums.length, m = q.length;\n        int[] fw = new int[n + 1];\n        for (int i = 1; i < n - 1; i++) {\n            if (isP(nums, i)) add(fw, i + 1, 1);\n        }\n        for (int i = 0; i < m; i++) {\n            int t = q[i][0];\n            if (t == 1) {\n                int l = q[i][1], r = q[i][2];\n                int v = get(fw, r + 1) - get(fw, l);\n                if (isP(nums, l)) v--;\n                if (r != l && isP(nums, r)) v--;\n                res.add(v);\n            } else {\n                int j = q[i][1], v = q[i][2];\n                boolean b1 = isP(nums, j - 1), b2 = isP(nums, j), b3 = isP(nums, j + 1);\n                nums[j] = v;\n                boolean nb1 = isP(nums, j - 1), nb2 = isP(nums, j), nb3 = isP(nums, j + 1);\n                if (nb1 && !b1) add(fw, j, 1);\n                else if (!nb1 && b1) add(fw, j, -1);\n                if (nb2 && !b2) add(fw, j + 1, 1);\n                else if (!nb2 && b2) add(fw, j + 1, -1);\n                if (nb3 && !b3) add(fw, j + 2, 1);\n                else if (!nb3 && b3) add(fw, j + 2, -1);\n            }\n        }\n        return res;\n    }\n    \n    private void add(int[] fw, int i, int v) {\n        while (i < fw.length) {\n            fw[i] += v;\n            i += i & -i;\n        }\n    }\n    \n    private int get(int[] fw, int i) {\n        int res = 0;\n        while (i > 0) {\n            res += fw[i];\n            i -= i & -i;\n        }\n        return res;\n    }\n    \n    private boolean isP(int[] nums, int i) {\n        return i > 0 && i < nums.length - 1 && nums[i] > nums[i - 1] && nums[i] > nums[i + 1];\n    }\n}",
    "submit_ts": 1718508381.0
}