{
    "username": "mkliac",
    "submission": "class Solution {\npublic:\n    vector<int> timeTaken(vector<vector<int>>& edges) {\n        // res[i] = max(res[j] + j%2 == 0 ? 2 : 1)\n        // for each j res[j] = max(res[j], (i%2 == 0 ? 2 : 1) + max(j') != j)\n        unordered_map<int,vector<int>> m;\n        for (int i = 0; i < edges.size(); i++) {\n            m[edges[i][0]].push_back(edges[i][1]);\n            m[edges[i][1]].push_back(edges[i][0]);\n        }\n        vector<int> res(edges.size()+1, 0);\n        dfs(m, 0, res, 0);\n        dfs2(m, 0, res, 0, 0);\n        return res;\n    }\n\n    int dfs(unordered_map<int,vector<int>>& m, int node, vector<int>& res, int parent) {\n        int t = 0;\n        for (int adj : m[node]) {\n            if (adj == parent)\n                continue;\n            t = max(t, (adj%2 == 0 ? 2 : 1) + dfs(m, adj, res, node));\n        }\n        res[node] = t;\n        return t;\n    }\n\n    void dfs2(unordered_map<int,vector<int>>& m, int node, vector<int>& res, int parent, int pVal) {\n        vector<int> rlist(1, pVal);\n        for (int adj : m[node]) {\n            if (adj == parent)\n                continue;\n            rlist.push_back(res[adj] + (adj%2 == 0 ? 2 : 1));\n        }\n        sort(rlist.begin(), rlist.end());\n        for (int adj : m[node]) {\n            if (adj == parent)\n                continue;\n            int val = res[adj] + (adj%2 == 0 ? 2 : 1) == rlist.back() ? rlist.size() == 1 ? 0 : rlist[rlist.size()-2] : rlist.back();\n            res[adj] = max(res[adj], (node%2 == 0 ? 2 : 1) + val);\n            dfs2(m, adj, res, node, (node%2 == 0 ? 2 : 1) + val);\n        }\n    }\n};",
    "submit_ts": "1722698337",
    "subm_id": "1343177403"
}