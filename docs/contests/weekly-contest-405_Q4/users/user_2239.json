{
    "username": "aman_snh",
    "submission": "class TrieNode {\npublic:\n    TrieNode* children[26];\n    unordered_map<int, int> wordCost; // stores the cost of words ending at this node\n    \n    TrieNode() {\n        fill(begin(children), end(children), nullptr);\n    }\n};\n\nclass Trie {\npublic:\n    TrieNode* root;\n    \n    Trie() {\n        root = new TrieNode();\n    }\n    \n    void insert(const string& word, int cost, int index) {\n        TrieNode* node = root;\n        for (char c : word) {\n            int idx = c - 'a';\n            if (!node->children[idx]) {\n                node->children[idx] = new TrieNode();\n            }\n            node = node->children[idx];\n        }\n        node->wordCost[index] = cost; // Map the index of the word to its cost\n    }\n};\n\nclass Solution {\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int n = target.length();\n        Trie trie;\n        \n        // Insert all words into the Trie\n        for (int i = 0; i < words.size(); ++i) {\n            trie.insert(words[i], costs[i], i);\n        }\n        \n        vector<int> dp(n + 1, INT_MAX);\n        dp[0] = 0;\n        \n        for (int i = 0; i < n; ++i) {\n            if (dp[i] == INT_MAX) continue; // Skip impossible states\n            \n            TrieNode* node = trie.root;\n            for (int j = i; j < n; ++j) {\n                int idx = target[j] - 'a';\n                if (!node->children[idx]) break;\n                \n                node = node->children[idx];\n                for (auto& [index, cost] : node->wordCost) {\n                    dp[j + 1] = min(dp[j + 1], dp[i] + cost);\n                }\n            }\n        }\n        \n        return dp[n] == INT_MAX ? -1 : dp[n];\n    }\n};\n",
    "submit_ts": "1720324030",
    "subm_id": "1312389927"
}