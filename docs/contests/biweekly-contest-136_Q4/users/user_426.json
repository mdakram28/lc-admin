{
    "username": "trusting-poincarerho",
    "submission": "class Solution {\npublic:\n    vector<int> timeTaken(vector<vector<int>>& edges) {\n        int n = edges.size() + 1;\n        vector<vector<int>> G(n);\n        for (const auto& edge : edges) {\n            int u = edge[0], v = edge[1];\n            G[u].push_back(v);\n            G[v].push_back(u);\n        }\n        \n        vector<int> ans(n, 0);\n        vector<int> dp(n, 0);\n        vector<int> mx(n, 0);\n        function<void(int, int)> dfs = [&](int u, int fa) {\n            mx[u] = dp[u];\n            for (int v : G[u]) {\n                if (v == fa) continue;\n                dp[v] = (v % 2 == 1) ? dp[u] + 1 : dp[u] + 2;\n                dfs(v, u);\n                mx[u] = max(mx[u], mx[v]);\n            }\n        };\n        \n        dfs(0, -1);\n        function<void(int, int, int)> dfs1 = [&](int u, int fa, int val) {\n            ans[u] = max(mx[u] - dp[u], val);\n            multiset<int> s;\n            for (int v : G[u]) {\n                if (v == fa) continue;\n                s.insert(mx[v] - dp[u]);\n            }\n            for (int v : G[u]) {\n                if (v == fa) continue;\n                int p = mx[v] - dp[u];\n                s.erase(s.find(p));\n                int val1 = val;\n                if (!s.empty()) {\n                    val1 = max(val1, *s.rbegin());\n                }\n                dfs1(v, u, (u % 2 == 1) ? val1 + 1 : val1 + 2);\n                s.insert(p);\n            }\n        };\n        \n        dfs1(0, -1, 0);\n        return ans;\n    }\n};",
    "submit_ts": "1722698119",
    "subm_id": "552269439"
}