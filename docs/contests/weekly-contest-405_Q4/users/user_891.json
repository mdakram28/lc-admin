{
    "username": "sorenramesh868",
    "submission": "struct TrieNode {\n    unordered_map<char, TrieNode*> children;\n    vector<pair<int, int>> wordEnds; \n};\n\nclass Trie {\npublic:\n    TrieNode* root;\n\n    Trie() {\n        root = new TrieNode();\n    }\n\n    void insert(const string& word, int index, int cost) {\n        TrieNode* node = root;\n        for (char c : word) {\n            if (node->children.find(c) == node->children.end()) {\n                node->children[c] = new TrieNode();\n            }\n            node = node->children[c];\n        }\n        node->wordEnds.push_back({index, cost});\n    }\n};\n\nclass Solution {\npublic:\n    int minimumCost(const string& target, const vector<string>& words, const vector<int>& costs) {\n        int n = target.size();\n        vector<int> dp(n + 1, INT_MAX); \n        dp[0] = 0; \n\n        Trie trie; \n        for (int i = 0; i < words.size(); ++i) {\n            trie.insert(words[i], i, costs[i]);\n        }\n\n        for (int i = 0; i < n; ++i) {\n            if (dp[i] == INT_MAX) {\n                continue;\n            }\n\n            TrieNode* node = trie.root;\n            for (int j = i; j < n; ++j) {\n                if (node->children.find(target[j]) == node->children.end()) {\n                    break;\n                }\n\n                node = node->children[target[j]];\n\n                for (const auto& p : node->wordEnds) {\n                    int wordLen = words[p.first].size();\n                    if (i + wordLen <= n) {\n                        dp[i + wordLen] = min(dp[i + wordLen], dp[i] + p.second);\n                    }\n                }\n            }\n        }\n        return dp[n] == INT_MAX ? -1 : dp[n]; \n    }\n};\n",
    "submit_ts": "1720322737",
    "subm_id": "1312357800"
}