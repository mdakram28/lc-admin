{
    "username": "BeaconMC",
    "submission": "sys.setrecursionlimit(1000000)\nclass Solution:\n    def minimumDiameterAfterMerge(self, edges1: List[List[int]], edges2: List[List[int]]) -> int:\n        fuck1 = deepcopy(edges1)\n        fuck2 = deepcopy(edges2)\n        edges1 = [[] for i in range(len(edges1)+2)]\n        edges2 = [[] for i in range(len(edges2)+2)]\n        for i in fuck1:\n            edges1[i[0]].append(i[1])\n            edges1[i[1]].append(i[0])\n        for i in fuck2:\n            edges2[i[0]].append(i[1])\n            edges2[i[1]].append(i[0])\n            \n        ans = -1\n        maxi = -1\n        maxnum = -1\n        def dfs(node, p, dist):\n            nonlocal maxi, maxnum\n            if dist > maxi:\n                maxi = dist\n                maxnum = node\n            for i in edges1[node]:\n                if i != p:\n                    dfs(i, node, dist+1)\n        \n        def dfs2(node, p, dist):\n            nonlocal maxi, maxnum\n            if dist > maxi:\n                maxi = dist\n                maxnum = node\n            for i in edges2[node]:\n                if i != p:\n                    dfs2(i, node, dist+1)\n        sus = 0\n\n        maxi = -1\n        dfs(sus, -1, 0)\n        \n        sus = maxnum\n        maxi = -1\n        dfs(sus, -1, 0)\n        \n        ans = max(ans, maxi)\n        diam1 = (maxi-1)//2 + 1\n\n        \n        sus = 0\n        maxi = -1\n        dfs2(sus, -1, 0)\n\n        sus = maxnum\n        maxi = -1\n        dfs2(sus, -1, 0)\n        ans = max(ans, maxi)\n        diam2 = (maxi-1)//2 + 1\n        ans = max(ans, diam1+diam2+1)\n        return ans\n        \n        \n        ",
    "submit_ts": 1719715396.0
}