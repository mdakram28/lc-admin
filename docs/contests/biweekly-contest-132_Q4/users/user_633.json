{
    "username": "Aviral__Gupta",
    "submission": "class Solution {\npublic:\n    int dp[2][2][5001][51];\n    int func(int ind,int skip,int start,int k,vector<int> &nums, map<int,vector<int>> &m){\n        if(ind == nums.size()) return 0;\n        int take = 0, ntake = 0, take1 = 0;\n        if(dp[skip][start][ind][k] != -1) return dp[skip][start][ind][k];\n        if(!start){\n            take = 1 + func(ind,0,1,k,nums,m);\n            ntake = func(ind+1,skip,start,k,nums,m);\n        }\n        else{\n            if(skip) take1 = func(ind+1,skip,start,k,nums,m);\n            // else{\n                int t = upper_bound(begin(m[nums[ind]]),end(m[nums[ind]]),ind) - begin(m[nums[ind]]);\n                if(t != m[nums[ind]].size()){\n                    take = max(take,1 + func(m[nums[ind]][t],0,start,k,nums,m));\n                }\n                if(ind + 1 < nums.size() && k > 0) ntake = 1 + func(ind+1,1,start,k-1,nums,m);\n            // }\n        }\n        return dp[skip][start][ind][k] = max(take, max(ntake, take1));\n    }\n    int maximumLength(vector<int>& nums, int k) {\n        memset(dp,-1,sizeof dp);\n        map<int,vector<int>> m;\n        for(int i=0;i<nums.size();i++){\n            m[nums[i]].push_back(i);\n        }\n        return func(0,0,0,k,nums,m);\n    }\n};",
    "submit_ts": 1717862157.0
}