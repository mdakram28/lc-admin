{
    "username": "abhayjoshi1104",
    "submission": "\nclass Solution {\npublic:\n    struct Node {\n        unordered_map<char, Node*> children;\n        vector<pair<int, int>> ends;\n    };\n\nprivate:\n    Node* root;\n\n    class Trie {\n    public:\n        Node* root;\n\n        Trie() { root = new Node(); }\n\n        void insert(const string& w, int idx, int cst) {\n            Node* n = root;\n            for (char c : w) {\n                if (!n->children.count(c))\n                    n->children[c] = new Node();\n                n = n->children[c];\n            }\n            n->ends.push_back({idx, cst});\n        }\n    };\n\n    int calcMinCost(const string& t, const vector<string>& wds, const vector<int>& csts) {\n        int len = t.size();\n        vector<int> dp(len + 1, INT_MAX);\n        dp[0] = 0;\n\n        Trie trie;\n        for (int i = 0; i < wds.size(); ++i) {\n            trie.insert(wds[i], i, csts[i]);\n        }\n\n        for (int i = 0; i < len; ++i) {\n            if (dp[i] == INT_MAX) continue;\n\n            Node* node = trie.root;\n            for (int j = i; j < len; ++j) {\n                if (!node->children.count(t[j])) break;\n                node = node->children[t[j]];\n                for (auto& p : node->ends) {\n                    int idx = p.first;\n                    int cst = p.second;\n                    int l = wds[idx].size();\n                    if (i + l <= len) {\n                        dp[i + l] = min(dp[i + l], dp[i] + cst);\n                    }\n                }\n            }\n        }\n\n        return dp[len] == INT_MAX ? -1 : dp[len];\n    }\n\npublic:\n    int minimumCost(string t, vector<string>& wds, vector<int>& csts) {\n        root = new Node();\n        return calcMinCost(t, wds, csts);\n    }\n};\n",
    "submit_ts": "1720323499",
    "subm_id": "1312377079"
}