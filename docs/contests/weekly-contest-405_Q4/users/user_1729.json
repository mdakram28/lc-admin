{
    "username": "Su57Felon",
    "submission": "class TrieN {\npublic:\n    std::unordered_map<char, TrieN*> child;\n    int miniC;\n    TrieN() : miniC(INT_MAX) {}\n};\nclass Solution {\nprivate:\n    const int maxi = INT_MAX;\npublic:\n    int minimumCost(string target, vector<string>& wrd, vector<int>& cst) {\n        TrieN* root = new TrieN();\n        for (int i = 0; i < wrd.size(); ++i) {\n            string word = wrd[i];\n            int cost = cst[i];\n            TrieN* node = root;\n            for (char c : word) {\n                if (!node->child.count(c)) {\n                    node->child[c] = new TrieN();\n                }\n                node = node->child[c];\n            }\n            node->miniC = min(node->miniC, cost);\n        }\n        int n = target.size();\n        vector<int> dp(n + 1, maxi);\n        dp[0] = 0;\n\n        for (int i = 0; i < n; ++i) {\n            TrieN* node = root;\n            for (int j = i; j < n; ++j) {\n\n                char ch = target[j];\n\n                if (!node->child.count(ch))break;\n                node = node->child[ch];\n                if (dp[i] != INT_MAX && node->miniC != INT_MAX) {\n                    int sum = dp[i] + node->miniC;\n                    if (sum >= 0 && sum <= INT_MAX) {\n                        dp[j + 1] = std::min(dp[j + 1], sum);\n                    } else {\n                        dp[j + 1] = maxi;\n                    }\n                }\n            }\n        }\n        int ans = dp[n];\n        return ans == maxi ? -1 : ans;\n    }\n};\n",
    "submit_ts": "1720321523",
    "subm_id": "1312325142"
}