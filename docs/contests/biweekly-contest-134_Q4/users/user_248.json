{
    "username": "ca_dream",
    "submission": "class Solution {\npublic:\n    long long countSubarrays(vector<int>& a, int k) {\n        long long res = 0;\n        int n = a.size(), B = 31;\n        vector<vector<int>> pre(n+1, vector<int>(B, 0));\n        for (int i = 1; i <= n; ++i) {\n            for (int j = 0; j < B; ++j) {\n                pre[i][j] = pre[i-1][j] + (1 & (a[i-1]>>j));\n            }\n        }\n        auto cal = [&](int st, int ed) -> int {\n            int res = 0;\n            for (int b = 0; b < B; ++b) {\n                if (pre[ed+1][b] - pre[st][b] == ed - st + 1) {\n                    res |= 1<<b;\n                }\n            }\n            return res;\n        };\n        auto lower = [&](int idx, int val) -> int {\n            int left = 0, right = idx;\n            while (left <= right) {\n                int mid = (left + right) / 2;\n                int t = cal(mid, idx);\n                if (t >= val) right = mid - 1;\n                else left = mid + 1;\n            }\n            return left;\n        };\n        for (int i = 0; i < n; ++i) {\n            int left = lower(i, k);\n            int right = lower(i, k+1);\n            res += right - left;\n        }\n        return res;\n    }\n};",
    "submit_ts": "1720277209",
    "subm_id": "544555200"
}