{
    "username": "_itsme",
    "submission": "class Solution {\npublic:\nconst int curMx=5e4+5;\nint tree[4*(50004)];\nvector<int> arr;\nvoid buildST(int index=1,int st=0,int endd=-1){\n    if(endd==-1){endd=(curMx);}\n    if(st==endd){\n        tree[index]=arr[st];\n        return;\n    }\n    buildST(index<<1,st,(st+endd)>>1);\n    buildST(index<<1|1,((st+endd)>>1)+1,endd);\n    tree[index]=max(tree[index<<1],tree[index<<1|1]);\n}\nvoid updateValue(int k,int increment,int st=0,int endd=-1,int index=1){\n    if(endd==-1){endd=(curMx);}\n    if(st==endd and st==k){\n        arr[k]=increment;\n        tree[index] = increment;\n        return;\n    }\n    if(st>k or endd<k){return;}\n    updateValue(k,increment, st,(st+endd)>>1, index<<1);\n    updateValue(k,increment,((st+endd)>>1)+1,endd, index<<1|1);\n    tree[index]=max(tree[index<<1],tree[index<<1|1]);\n}\nint query(int qs,int qe,int st=0,int endd=-1,int index=1){\n    if(endd==-1){endd=(curMx);}\n    if(st>=qs and endd<=qe){return tree[index];}\n    if(endd<qs or st>qe){\n        return 0;\n    }\n    int left = query(qs,qe,st,(st+endd)>>1,index<<1);\n    int right = query(qs,qe,((st+endd)>>1)+1,endd,index<<1|1);\n    return max(left,right);\n    \n}\nvector<bool> getResults(vector<vector<int>>& queries) {\n        set<int> ms;\n        multiset<int> dists;\n        arr.resize(curMx+2,0);\n        arr[curMx+1]=curMx;\n        buildST();\n        vector<bool> res;\n        ms.insert(0);\n        ms.insert(curMx);\n        for(int i=0;i<queries.size();i++){\n            if(queries[i][0]==1){\n                int idx  = queries[i][1];\n                auto itr = ms.lower_bound(idx);\n                auto itr2 = itr;\n                --itr2;\n                updateValue(*itr,(*itr)-idx);\n                updateValue(idx,idx-(*itr2));\n                // cout<<(*itr)<<\" \"<<((*itr)-idx)<<\"\\n\";\n                // cout<<(idx)<<\" \"<<(idx-(*itr2))<<\"\\n\";\n                ms.insert(idx);\n            }else{\n                int sz = queries[i][2];\n                int curX = queries[i][1];\n                auto lwX = ms.lower_bound(curX);\n                if(ms.find(curX)==ms.end()){\n                    --lwX;\n                }\n                \n                int result = query(0,(*lwX)); \n                int dist = (curX - (*lwX));\n                result = max(result,dist);\n                // cout<<curX<<\" \"<<sz<<\" \"<<result<<\"\\n\";\n                if(result>=sz){\n                    res.push_back(true);\n                }else{\n                    res.push_back(false);\n                }\n                \n            }\n        }\n        return res;\n    }\n};",
    "submit_ts": "1716651082",
    "subm_id": "1267631639"
}