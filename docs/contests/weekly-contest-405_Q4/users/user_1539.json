{
    "username": "SUNITHA_RAJ",
    "submission": "#include <vector>\n#include <string>\n#include <unordered_map>\n#include <climits>\n\nusing namespace std;\n\nstruct TrieNode {\n    unordered_map<char, TrieNode*> children;\n    bool isWord;\n    int cost; // Store the minimum cost to reach this node\n\n    TrieNode() : isWord(false), cost(INT_MAX) {}\n};\n\nclass Solution {\npublic:\n    int minimumCost(string& target, vector<string>& words, vector<int>& costs) {\n        // Step 1: Build Trie from dictionary words\n        TrieNode* root = buildTrie(words, costs);\n\n        // Step 2: Initialize DP array\n        int n = target.size();\n        vector<int> dp(n + 1, INT_MAX);\n        dp[0] = 0;\n\n        // Step 3: Traverse through target string and compute minimum cost\n        for (int i = 0; i < n; ++i) {\n            if (dp[i] == INT_MAX) continue; // Early termination if no valid prefix found\n\n            TrieNode* node = root;\n            for (int j = i; j < n; ++j) {\n                char c = target[j];\n                if (!node->children.count(c)) break; // No valid prefix in Trie\n\n                node = node->children[c];\n                if (node->isWord) {\n                    dp[j + 1] = min(dp[j + 1], dp[i] + node->cost);\n                }\n            }\n        }\n\n        // Step 4: Return minimum cost to form target or -1 if target cannot be formed\n        return dp[n] == INT_MAX ? -1 : dp[n];\n    }\n\nprivate:\n    TrieNode* buildTrie(const vector<string>& words, const vector<int>& costs) {\n        TrieNode* root = new TrieNode();\n\n        // Insert each word into Trie with its associated cost\n        for (int i = 0; i < words.size(); ++i) {\n            insertWord(root, words[i], costs[i]);\n        }\n        return root;\n    }\n\n    void insertWord(TrieNode* root, const string& word, int cost) {\n        TrieNode* node = root;\n        for (char c : word) {\n            if (!node->children.count(c)) {\n                node->children[c] = new TrieNode();\n            }\n            node = node->children[c];\n        }\n        node->isWord = true;\n        // Update the minimum cost to reach this node\n        node->cost = min(node->cost, cost);\n    }\n};",
    "submit_ts": "1720324743",
    "subm_id": "1312407002"
}