{
    "username": "aknov711",
    "submission": "\n\nclass Solution {\n \npublic:\n    vector<long long> countKConstraintSubstrings(string s, int k, vector<vector<int>>& queries) {\n        int q=  queries.size();\n        vector<long long> ans(q);\n        int n=s.size();\n        int left[n][2];\n        memset(left, -1,sizeof(left));\n        int right[n][2];\n        for(int i=0;i<n;i++)\n            right[i][0]=right[i][1]=n;\n        \n        vector<int> one, zero;\n        \n        for(int i=0;i<n;i++){\n            if(s[i]=='1')\n                one.push_back(i);\n            else \n                zero.push_back(i);\n            \n            if(one.size() > k){\n                int sz=one.size();\n                left[i][1]= one[sz-k-1];\n            }\n               \n            if(zero.size() > k)\n            {\n                 int sz=zero.size();\n                left[i][0]= zero[sz-k-1];\n            }\n            \n            \n            \n        }\n        \n       one.clear();\n        zero.clear();\n        \n        for(int i=n-1;i>=0;i--){\n            if(s[i]=='1')\n                one.push_back(i);\n            else \n                zero.push_back(i);\n            \n           if(one.size() > k){\n                int sz=one.size();\n                right[i][1]= one[sz-k-1];\n            }\n               \n            if(zero.size() > k)\n            {\n                 int sz=zero.size();\n                right[i][0]= zero[sz-k-1];\n            }\n            \n            \n        }\n        \n        vector<pair<int, pair<int,int>>>vq;\n        for(int i=0;i<q;i++){\n            vq.push_back(make_pair(i, make_pair(queries[i][0], queries[i][1])));\n        }\n        \n        sort(vq.begin(), vq.end(), [&](pair<int, pair<int, int>> p1, pair<int, pair<int, int>> p2){\n        return make_pair(p1.second.first/320, p1.second.second) < make_pair(p2.second.first/320, p2.second.second);\n    });\n        \n        int cur_l=0;\n        int cur_r=-1;\n        long long res = 0; \n        \n        for(auto e : vq){\n            int l = e.second.first;\n            int r = e.second.second;\n            int id = e.first;\n            \n            while (cur_l > l) {\n            cur_l--;\n            int id1 = max(right[cur_l][0], right[cur_l][1]);\n                id1--;\n            id1 = min(id1, cur_r);\n            res += (id1 - cur_l + 1);    \n           }\n            \n            while (cur_r < r) {\n            cur_r++;\n             int id1 = min(left[cur_r][0], left[cur_r][1]);\n                id1++;\n            id1 = max(id1, cur_l);\n            res += (cur_r - id1 + 1);   \n               // cout<<\"res \"<<res<<endl;\n            }\n            \n            while (cur_l < l) {\n              int id1 = max(right[cur_l][0], right[cur_l][1]);\n                id1--;\n            id1 = min(id1, cur_r);\n            res -= (id1 - cur_l + 1);    \n              cur_l++;\n            }\n            \n            while (cur_r > r) {\n            int id1 = min(left[cur_r][0], left[cur_r][1]);\n                id1++;\n            id1 = max(id1, cur_l);\n            res -= (cur_r - id1 + 1);    \n            cur_r--;\n           }\n            \n            ans[id] = res;\n            \n        }\n        \n        return ans;\n    }\n};",
    "submit_ts": "1723953369",
    "subm_id": "1359819414"
}