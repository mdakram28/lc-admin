{
    "username": "user6154C",
    "submission": "class Solution {\npublic:\nstruct TrieNode {\n    unordered_map<char, TrieNode*> children;\n    int minCost;\n\n    TrieNode() : minCost(INT_MAX) {}\n};\n\nclass Trie {\nprivate:\n    TrieNode* root;\n\npublic:\n    Trie() {\n        root = new TrieNode();\n    }\n\n    void insert(const string& word, int cost) {\n        TrieNode* node = root;\n        for (char ch : word) {\n            if (!node->children.count(ch)) {\n                node->children[ch] = new TrieNode();\n            }\n            node = node->children[ch];\n        }\n        node->minCost = min(node->minCost, cost); \n    }\n\n    void searchAndUpdate(const string& target, vector<int>& dp, int i) {\n        TrieNode* node = root;\n        int n = target.size();\n\n        for (int j = i; j < n; ++j) {\n            char ch = target[j];\n            if (!node->children.count(ch)) {\n                break; \n            }\n            node = node->children[ch];\n\n            if (node->minCost != INT_MAX) {\n                dp[j + 1] = min(dp[j + 1], dp[i] + node->minCost);\n            }\n        }\n    }\n};\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n      int n = target.size();\n    vector<int> dp(n + 1, INT_MAX);\n    dp[0] = 0;\n\n    Trie trie;\n    int m = words.size();\n\n    for (int i = 0; i < m; ++i) {\n        trie.insert(words[i], costs[i]);\n    }\n\n    for (int i = 0; i < n; ++i) {\n        if (dp[i] == INT_MAX) continue; \n        trie.searchAndUpdate(target, dp, i);\n    }\n\n    return dp[n] == INT_MAX ? -1 : dp[n];\n    }\n};",
    "submit_ts": "1720322721",
    "subm_id": "1312357386"
}