{
    "username": "yash_ww07",
    "submission": "struct Node {\n        vector<pair<int, int>> lastWord; \n        unordered_map<char, Node*> child;\n    };\n\n    class Trie {\n    public:\n        Node* root;\n        Trie() {\n            root = new Node(); \n        }\n\n        void insert(int ind, string& word, int cost) {\n            Node* curr = root;\n            for (int i = 0; i<word.size(); i++) {\n                char c = word[i];\n                if (curr->child.find(c) == curr->child.end())\n                    curr->child[c] = new Node();\n                curr = curr->child[c];\n            }\n            curr->lastWord.push_back({ind, cost});\n        }\n    };\n\nclass Solution {\npublic:\n    int minimumCost(string k, vector<string>& words, vector<int>& costs) {\n        int n = k.size();\n        \n        Trie trie;\n        for (int i = 0; i < words.size(); ++i) {\n            trie.insert(i, words[i], costs[i]);\n        }\n        \n        \n        vector<int> dp(n + 1, 1e9);\n        dp[0] = 0;\n\n\n        for (int i = 0; i < n; ++i) {\n            if (dp[i] == 1e9) continue;\n\n            Node* node = trie.root;\n            for (int j = i; j < n; ++j) {\n                if (node->child.find(k[j]) == node->child.end()) break;\n                \n                node = node->child[k[j]];\n                \n                for (auto it : node->lastWord) {\n                    int ind = it.first;\n                    int cost = it.second;\n                    int len = words[ind].size() + i;\n                    if (len <= n) {\n                        dp[len] = min(dp[len], dp[i] + cost);\n                    }\n                }\n            }\n        }\n        \n        if(dp[n] == 1e9)    return -1;\n        return dp[n];\n    }\n};\n",
    "submit_ts": "1720323540",
    "subm_id": "1312378047"
}