{
    "username": "yourleetcode",
    "submission": "class Solution:\n    def minimumDiameterAfterMerge(self, edges1: List[List[int]], edges2: List[List[int]]) -> int:\n\n        def helper(indegree, graph):\n            q= deque()\n            cnts = [0]*len(indegree)\n            cnts2 = [[0] for _ in range(len(indegree))]\n            for i in range(len(indegree)):\n                if indegree[i]==1:\n                    q.append(i)\n            while q:\n                node = q.popleft()\n                for next_node in graph[node]:\n                    graph[next_node].discard(node)\n                    cnts[next_node] = max(cnts[node]+1,cnts[next_node])\n                    cnts2[next_node] += [cnts[node]+1]\n                    print(\"1\",cnts2[next_node])\n                    cnts2[next_node].sort(reverse=True)\n                    if len(cnts2[next_node])>2:\n                        cnts2[next_node].pop()\n                    indegree[next_node]-=1\n                    if indegree[next_node]==1:\n                        q.append(next_node)\n            # print(indegree)\n            # print(cnts)\n            r = 0\n            for i in range(len(cnts2)):\n                r = max(r, sum(cnts2[i]))\n            # print(cnts2)\n            return [max(cnts),r]\n        \n        graph = defaultdict(set)\n        indegree = [0]*(len(edges1)+1)\n        for s,e in edges1:\n            graph[s].add(e)\n            graph[e].add(s)\n            indegree[s]+=1\n            indegree[e]+=1\n        a1,a2 = helper(indegree, graph)\n\n        graph = defaultdict(set)\n        indegree = [0]*(len(edges2)+1)\n        for s,e in edges2:\n            graph[s].add(e)\n            graph[e].add(s)\n            indegree[s]+=1\n            indegree[e]+=1\n        b1,b2 = helper(indegree, graph)\n        return max(a1+b1+1,a2,b2)\n",
    "submit_ts": "1719717195",
    "subm_id": "1304385055"
}