{
    "username": "hulot",
    "submission": "class Solution {\n    public int minimumCost(String target, String[] words, int[] costs) {\n        Trie root = new Trie();\n        for (int i = 0; i < words.length; i++) {\n            insert(root, words[i].toCharArray(), costs[i]);\n        }\n        Integer[] memo = new Integer[target.length()];\n        int res = findMin(root, target.toCharArray(), 0, memo);\n        return res == Integer.MAX_VALUE ? -1 : res;\n    }\n    \n    private class Trie {\n        Trie[] children = new Trie[26];\n        int cost = -1;\n    }\n\n    private void insert(Trie root, char[] s, int cost) {\n        for (char c : s) {\n            if (root.children[c-'a'] == null) {\n                root.children[c-'a'] = new Trie();\n            }\n            root = root.children[c-'a'];\n        }\n        if (root.cost < 0 || cost < root.cost) root.cost = cost;\n    }\n    \n    private int findMin(Trie root, char[] s, int pos, Integer[] memo) {\n        if (pos >= s.length) return -1;\n        if (memo[pos] != null) return memo[pos];\n        Trie cur = root;\n        int res = Integer.MAX_VALUE;\n        for (int i = pos; i < s.length; i++) {\n            cur = cur.children[s[i]-'a'];\n            if (cur == null) break;\n            if (cur.cost >= 0) {\n                int cost = findMin(root, s, i+1, memo);\n                if (cost >= 0) res = Math.min(res, cur.cost + cost);\n            }\n        }\n        if (cur != null && cur.cost > 0) res = Math.min(res, cur.cost);\n        return memo[pos] = res == Integer.MAX_VALUE ? -1 : res;\n    }\n}",
    "submit_ts": "1720323199",
    "subm_id": "1312369741"
}