{
    "username": "ni-hong-ge",
    "submission": "class LazySegmentTree {\nprivate:\n    vector<int> tree; // \u7ebf\u6bb5\u6811\u8282\u70b9\n    vector<int> lazy; // \u61d2\u60f0\u6807\u8bb0\n    int n;\n\n    // \u6784\u5efa\u7ebf\u6bb5\u6811\n    void build(const vector<int>& arr, int node, int start, int end) {\n        if (start == end) {\n            tree[node] = arr[start];\n        } else {\n            int mid = (start + end) / 2;\n            build(arr, 2 * node + 1, start, mid);\n            build(arr, 2 * node + 2, mid + 1, end);\n            tree[node] = tree[2 * node + 1] + tree[2 * node + 2];\n        }\n    }\n\n    // \u533a\u95f4\u66f4\u65b0\n    void updateRange(int node, int start, int end, int l, int r, int val) {\n        if (lazy[node] != 0) {\n            tree[node] += (end - start + 1) * lazy[node];\n            if (start != end) {\n                lazy[2 * node + 1] += lazy[node];\n                lazy[2 * node + 2] += lazy[node];\n            }\n            lazy[node] = 0;\n        }\n\n        if (start > end || start > r || end < l)\n            return;\n\n        if (start >= l && end <= r) {\n            tree[node] += (end - start + 1) * val;\n            if (start != end) {\n                lazy[2 * node + 1] += val;\n                lazy[2 * node + 2] += val;\n            }\n            return;\n        }\n\n        int mid = (start + end) / 2;\n        updateRange(2 * node + 1, start, mid, l, r, val);\n        updateRange(2 * node + 2, mid + 1, end, l, r, val);\n        tree[node] = tree[2 * node + 1] + tree[2 * node + 2];\n    }\n\n    // \u533a\u95f4\u67e5\u8be2\n    int queryRange(int node, int start, int end, int l, int r) {\n        if (start > end || start > r || end < l)\n            return 0;\n\n        if (lazy[node] != 0) {\n            tree[node] += (end - start + 1) * lazy[node];\n            if (start != end) {\n                lazy[2 * node + 1] += lazy[node];\n                lazy[2 * node + 2] += lazy[node];\n            }\n            lazy[node] = 0;\n        }\n\n        if (start >= l && end <= r)\n            return tree[node];\n\n        int mid = (start + end) / 2;\n        int leftQuery = queryRange(2 * node + 1, start, mid, l, r);\n        int rightQuery = queryRange(2 * node + 2, mid + 1, end, l, r);\n        return leftQuery + rightQuery;\n    }\n\npublic:\n    LazySegmentTree(const vector<int>& arr) {\n        n = arr.size();\n        tree.resize(4 * n);\n        lazy.resize(4 * n, 0);\n        build(arr, 0, 0, n - 1);\n    }\n\n    // \u5916\u90e8\u63a5\u53e3\uff1a\u533a\u95f4\u66f4\u65b0\n    void updateRange(int l, int r, int val) {\n        updateRange(0, 0, n - 1, l, r, val);\n    }\n\n    // \u5916\u90e8\u63a5\u53e3\uff1a\u533a\u95f4\u67e5\u8be2\n    int queryRange(int l, int r) {\n        return queryRange(0, 0, n - 1, l, r);\n    }\n\n    // \u6253\u5370\u7ebf\u6bb5\u6811\u548c\u61d2\u60f0\u6807\u8bb0\uff08\u7528\u4e8e\u8c03\u8bd5\uff09\n    void printTree() const {\n        for (int i = 0; i < 4 * n; ++i) {\n            cout << tree[i] << \" \";\n        }\n        cout << endl;\n    }\n\n    void printLazy() const {\n        for (int i = 0; i < 4 * n; ++i) {\n            cout << lazy[i] << \" \";\n        }\n        cout << endl;\n    }\n};\nclass Solution {\npublic:\n    vector<int> countOfPeaks(vector<int>& nums, vector<vector<int>>& queries) {\n        int n=nums.size();\n        vector<int> ans;\n        vector<int> v(n,0);\n        vector<int> vis(n,0);\n        LazySegmentTree segTree(v);\n        for(int i=1;i<n-1;i++){\n            if(nums[i]>nums[i-1]&&nums[i]>nums[i+1]){\n                segTree.updateRange(i,i,1);\n                vis[i]=1;\n            }\n        }\n        auto check=[&](int index){\n            if(index==0||index==n-1)return;\n            if(nums[index]>nums[index-1]&&nums[index]>nums[index+1]){\n                    if(!vis[index]){\n                        vis[index]=1;\n                        segTree.updateRange(index,index,1);\n                    }\n                }else{\n                    if(vis[index]){\n                        vis[index]=0;\n                        segTree.updateRange(index,index,-1);\n                    }\n                }\n        };\n        for(auto x:queries){\n            if(x[0]==1){\n                int k=segTree.queryRange(x[1],x[2]);\n                if(vis[x[1]])k--;\n                if(x[1]!=x[2]&&vis[x[2]])k--;\n                ans.push_back(k);\n            }else{\n                int index=x[1],val=x[2];\n                nums[index]=val;\n                check(index);\n                if(index)check(index-1);\n                if(index<n-1)check(index+1);\n            }\n        }\n        return ans;\n    }\n};",
    "submit_ts": 1718507338.0
}