{
    "username": "Jayant Sharma",
    "submission": "class Solution {\npublic:\n    \n    // put values in reverse ie negative\n    multiset<int> pref[505], suff[505];\n    \n    // -value, index of col\n    set<pair<int, int> > top, bottom;\n    \n   // long long max_pref_val[505], max_suff_val[505];\n    \n    \n    long long maximumValueSum(vector<vector<int>>& board) {\n        int n = board.size();\n        int m = board[0].size();\n        \n        \n        \n        long long ans = -(1000000*1LL*100000);\n        \n        \n        // for(int j = 0 ; j < m ; j++){\n        //     max_pref_val[j] = ans;\n        //     max_suff_val[j] = ans;\n        // }\n        \n        // first row\n        for(int j = 0 ; j < m ; j++){\n            pref[j].insert(-board[0][j]);\n            top.insert({-board[0][j], j});\n            //max_pref_val[j] = max(max_pref_val[j], board[0][j]);\n        }\n        \n        for(int i = 2 ; i < n ; i++){\n            for(int j = 0 ; j < m ; j++){\n                suff[j].insert(-board[i][j]);\n                //max_suff_val[j] = max(max_suff_val[j], board[i][j]);\n            }\n        }\n        \n        for(int j = 0 ; j < m ; j++){\n            bottom.insert({*suff[j].begin(), j});\n        }\n        \n        vector<pair<int, int> > vec_top, vec_bottom;\n        \n        \n        for(int row = 1 ; row < n - 1 ; row++){\n            \n             vec_top.clear();\n         vec_bottom.clear();\n            // cout<<\"row \"<<row<<endl;\n            \n            for(int k = 0 ; k < 3 ; k++){\n                \n                \n                pair<int, int> top_first = *top.begin();\n                top.erase(top_first);\n                vec_top.push_back(top_first);\n                 // if(row == 1)\n                 // cout<<\"okay so k \"<<k<<\"  \"<<top_first.first<<\"  \"<<top_first.second<<endl;\n                \n                \n                pair<int, int> bottom_first = *bottom.begin();\n                bottom.erase(bottom_first);\n                vec_bottom.push_back(bottom_first);\n                //  if(row == 1)\n                // cout<<\"okay so k \"<<k<<\"  \"<<bottom_first.first<<\"  \"<<bottom_first.second<<endl;\n            }\n            \n            \n            for(int col = 0 ; col < m ; col++){\n                long long val = board[row][col];\n                for(int k1 = 0 ; k1 < 3 ; k1++){\n                    for(int k2 = 0 ; k2 < 3 ; k2++){\n                        int c1 = vec_top[k1].second;\n                        int c2 = vec_bottom[k2].second;\n                        \n                        if(c1 == c2 || c1 == col || c2 == col) continue;\n                        \n                        //val = val - vec_top[k1].first - vec_bottom[k2].first;\n                     //  cout<<\"okay\"<<c1<<\"  \"<<col<<\"  \"<<c2<<\". \"<<val<<\" \"<< -vec_top[k1].first <<\"  \"<<-vec_bottom[k2].first<<\". \"<<val - vec_top[k1].first - vec_bottom[k2].first<<endl;\n                        \n                        ans = max(ans, val - vec_top[k1].first - vec_bottom[k2].first);\n                        \n                    }\n                }\n            }\n            \n            for(int k = 0 ; k < 3 ; k++){\n                top.insert(vec_top[k]);\n                bottom.insert(vec_bottom[k]);\n            }\n            \n            \n            // process\n            \n            for(int col = 0 ; col < m ; col++){\n                \n                int prev_max_top = -(*pref[col].begin());\n                top.erase({-prev_max_top, col});\n                pref[col].insert(-board[row][col]);\n                int new_max_top = -(*pref[col].begin());\n                top.insert({-new_max_top, col});\n                \n                \n                int prev_max_bottom = -(*suff[col].begin());\n                bottom.erase({-prev_max_bottom, col});\n                \n                multiset<int> :: iterator it;\n                it = suff[col].lower_bound(-board[row + 1][col]);\n                suff[col].erase(it);\n                int new_max_bottom = -(*suff[col].begin());\n                bottom.insert({-new_max_bottom, col});\n            }\n            \n        }\n        \n        return ans;\n        \n        \n    }\n    \n};",
    "submit_ts": "1723909900",
    "subm_id": "1359209885"
}