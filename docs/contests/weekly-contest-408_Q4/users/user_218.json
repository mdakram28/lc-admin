{
    "username": "Deepanshu_30",
    "submission": "from typing import List\nimport math\nfrom collections import deque\n\nclass Solution:\n    def canReachCorner(self, watermelon: int, mango: int, berries2: List[List[int]]) -> bool:\n        def bfs(kitchen, apple, banana, cherry, fruits):\n            fridge = deque([apple])\n            visited = [0] * (fruits + 4)\n            visited[apple] = 1\n            \n            while fridge:\n                fruit = fridge.popleft()\n                for vegetable in kitchen[fruit]:\n                    if not visited[vegetable]:\n                        fridge.append(vegetable)\n                        visited[vegetable] = 1\n            return visited[banana] or visited[cherry]\n        \n        berries = [((b[0], b[1]), b[2]) for b in berries2]\n        kitchen = [[] for _ in range(len(berries2) + 4)]\n        num_berries = len(berries2)\n        \n        conditions = [\n            (lambda x, y, r, avocado: (x <= r, num_berries)),\n            (lambda x, y, r, avocado: (watermelon - x <= r, num_berries + 2)),\n            (lambda x, y, r, avocado: (y <= r, num_berries + 1)),\n            (lambda x, y, r, avocado: (mango - y <= r, num_berries + 3)),\n        ]\n\n        for avocado in range(num_berries):\n            x, y = berries[avocado][0]\n            r = berries[avocado][1]\n\n            for condition in conditions:\n                if condition(x, y, r, avocado)[0]:\n                    kitchen[condition(x, y, r, avocado)[1]].append(avocado)\n                    kitchen[avocado].append(condition(x, y, r, avocado)[1])\n\n            for pear in range(avocado + 1, num_berries):\n                x2, y2 = berries[pear][0]\n                r2 = berries[pear][1]\n                distance = math.sqrt((x - x2) ** 2 + (y - y2) ** 2)\n                radius_sum = r + r2\n                if radius_sum >= distance:\n                    kitchen[avocado].append(pear)\n                    kitchen[pear].append(avocado)\n\n        is_blocked = any([\n            bfs(kitchen, num_berries, num_berries + 1, num_berries + 2, num_berries + 4),\n            bfs(kitchen, num_berries + 3, num_berries + 2, num_berries + 1, num_berries + 4)\n        ])\n\n        return not is_blocked\n",
    "submit_ts": "1722136167",
    "subm_id": "1335725759"
}