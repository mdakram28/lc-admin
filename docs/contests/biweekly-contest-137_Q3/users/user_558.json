{
    "username": "Ayanerru",
    "submission": "class Solution:\n    def maximumValueSum(self, board: List[List[int]]) -> int:\n        n, m = len(board), len(board[0])\n        \n        arr = []\n        for i in range(n):\n            for j in range(m):\n                arr.append((board[i][j], i, j))\n        arr.sort()\n        arr.reverse()\n        mx = min(50, max(n, m) * 3)\n        thres = arr[mx-1][0]\n        while arr and arr[-1][0] < thres:\n            arr.pop()\n       \n        \n        \n        def rev(idx):\n            # return board[idx//m][idx%m]\n            return arr[idx][0]\n        \n        @functools.lru_cache(None)\n        def dfs(d, tup):\n            if len(tup) == 3:\n                return sum(rev(val) for val in tup)\n            # if d == n*m:\n            if d == len(arr):\n                return -10 ** 12\n            nxt1 = dfs(d+1, tup)\n            \n            # r, c = d // m, d % m\n            r = arr[d][1]\n            c = arr[d][2]\n            for val in tup:\n                if arr[val][1] == r or arr[val][2] == c:\n                    return nxt1\n                # if val // m == r or val % m == c:\n                #     return nxt1            \n             \n            tup2 = (*tup, d)\n            nxt2 = dfs(d+1, tup2)\n            return max(nxt1, nxt2)\n        \n        empty = tuple()\n        return dfs(0, empty)",
    "submit_ts": "1723908204",
    "subm_id": "1359142648"
}