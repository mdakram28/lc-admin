{
    "username": "violet_07",
    "submission": "class Solution:\n    def minimumDiameterAfterMerge(self, edges1: List[List[int]], edges2: List[List[int]]) -> int:\n        def get_min_height(edges):\n            nodes = len(edges) + 1\n            in_count = [0] * nodes\n            graph = defaultdict(list)\n\n            for a, b in edges:\n                in_count[a] += 1\n                in_count[b] += 1\n                graph[a].append(b)\n                graph[b].append(a)\n            \n            out_bounds = []\n\n            for node in range(nodes):\n                if in_count[node] == 1:\n                    out_bounds.append(node)\n\n            height = 0\n            while out_bounds:\n                height += 1\n                new_out_bounds = []\n\n                for node in out_bounds:\n                    for adj_node in graph[node]:\n                        if in_count[adj_node] == 0:\n                            continue\n                        \n                        in_count[adj_node] -= 1\n                        in_count[node] -= 1\n\n                        if in_count[adj_node] == 1:\n                            new_out_bounds.append(adj_node)\n                \n                out_bounds = new_out_bounds\n                out_bounds = list(set(out_bounds))\n                out_bounds = [node for node in out_bounds if in_count[node] == 1]\n\n            return height\n\n        def get_max_path(edges):\n            nodes = len(edges) + 1\n            graph = defaultdict(list)\n\n            for a, b in edges:\n                graph[a].append(b)\n                graph[b].append(a)\n\n            res = 0\n            def dfs(node, parent):\n                nonlocal res\n                child_heights = []\n                for child in graph[node]:\n                    if child == parent:\n                        continue\n                    \n                    child_heights.append(dfs(child, node))\n                \n                if len(child_heights) == 0:\n                    return 0\n\n                if len(child_heights) == 1:\n                    res = max(res, child_heights[0] + 1)\n                    return child_heights[0] + 1\n                \n                child_heights.sort()\n                res = max(res, child_heights[-1] + child_heights[-2] + 2)\n                return child_heights[-1] + 1\n            \n            dfs(0, -1)\n            return res\n\n\n        return max(\n            get_min_height(edges1) + get_min_height(edges2) + 1,\n            get_max_path(edges1),\n            get_max_path(edges2)\n        )\n\n\n",
    "submit_ts": "1719717283",
    "subm_id": "1304387475"
}