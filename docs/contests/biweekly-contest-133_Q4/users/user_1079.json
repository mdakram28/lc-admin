{
    "username": "Hackerman784",
    "submission": "class Solution {\nprivate:\n    const int a = 1'000'000'007;\n    const int b = 400;\n    \n    void c(int d, vector<vector<long long>>& e, const unordered_map<int, int>& f) {\n        for (int g = 0; g <= b; g++) {\n            for (int h = 0; h < d; h++) {\n                int i = g - h;\n                if (i >= 0) {\n                    e[d][g] = (e[d][g] + e[d - 1][i]) % a;\n                }\n            }\n        }\n        \n        if (f.count(d) > 0) {\n            int j = f.at(d);\n            for (int g = 0; g <= b; g++) {\n                if (g != j) {\n                    e[d][g] = 0;\n                }\n            }\n        }\n    }\n    \n    int k(const vector<vector<long long>>& e, int l) {\n        long long m = 0;\n        for (long long n : e[l]) {\n            m = (m + n) % a;\n        }\n        return static_cast<int>(m);\n    }\n\npublic:\n    int numberOfPermutations(int o, vector<vector<int>>& p) {\n        unordered_map<int, int> q;\n        for (const auto& r : p) {\n            q[r[0] + 1] = r[1];\n        }\n        \n        vector<vector<long long>> s(o + 1, vector<long long>(b + 1, 0));\n        s[0][0] = 1;\n        \n        for (int t = 1; t <= o; t++) {\n            c(t, s, q);\n        }\n        \n        return k(s, o);\n    }\n};",
    "submit_ts": "1719071656",
    "subm_id": "1296851406"
}