{
    "username": "user5976fh",
    "submission": "class Solution {\npublic:\n    bool canReachCorner(int X, int Y, vector<vector<int>>& circles) {\n        int n = circles.size();\n        vector<int> parent(n);\n        for (int i = 0; i < n; ++i) parent[i] = i;\n        \n        function<int(int)> find = [&](int x) {\n            if (parent[x] != x) parent[x] = find(parent[x]);\n            return parent[x];\n        };\n        \n        auto union_sets = [&](int x, int y) {\n            int rootX = find(x);\n            int rootY = find(y);\n            if (rootX != rootY) parent[rootY] = rootX;\n        };\n        \n        auto circlesOverlap = [&](vector<int>& c1, vector<int>& c2) {\n            long long x1 = c1[0], y1 = c1[1], r1 = c1[2];\n            long long x2 = c2[0], y2 = c2[1], r2 = c2[2];\n            long long distSq = (x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2);\n            long long radiusSumSq = (r1 + r2) * (r1 + r2);\n            return distSq <= radiusSumSq;\n        };\n        \n        for (int i = 0; i < n; ++i) {\n            for (int j = i + 1; j < n; ++j) {\n                if (circlesOverlap(circles[i], circles[j])) {\n                    union_sets(i, j);\n                }\n            }\n        }\n        \n        unordered_map<int, vector<vector<int>>> groups;\n        for (int i = 0; i < n; ++i) {\n            groups[find(i)].push_back(circles[i]);\n        }\n        \n        for (const auto& groupEntry : groups) {\n            const auto& group = groupEntry.second;\n            bool leftWall = false, rightWall = false, topWall = false, bottomWall = false;\n            \n            for (const auto& circle : group) {\n                int x = circle[0], y = circle[1], r = circle[2];\n                \n                if (x - r <= 0) leftWall = true;\n                if (x + r >= X) rightWall = true;\n                if (y - r <= 0) bottomWall = true;\n                if (y + r >= Y) topWall = true;\n            }\n            \n            if ((leftWall && rightWall) || \n                (topWall && rightWall) || \n                (topWall && bottomWall) ||\n                (leftWall && bottomWall)) {\n                return false;\n            }\n        }\n        \n        return true;\n    }\n};",
    "submit_ts": "1722138413",
    "subm_id": "1335790118"
}