{
    "username": "RampageLi",
    "submission": "from typing import Tuple, List\nfrom itertools import combinations\nfrom collections import defaultdict\n\nSegment = Tuple[int, int, int, int]\nCircle = Tuple[int, int, int]\n\nclass UnionFind:\n    def __init__(self, n: int):\n        self.ancestor = list(range(n))\n\n    def find(self, node: int):\n        if self.ancestor[node] != node:\n            self.ancestor[node] = self.find(self.ancestor[node])\n        return self.ancestor[node]\n    \n    def union(self, node1: int, node2: int):\n        self.ancestor[self.find(node1)] = self.find(node2)\n\nclass Solution:\n    def canReachCorner(self, X: int, Y: int, circles: List[List[int]]) -> bool:\n        def calc_dist(x1, y1, x2, y2):\n            return (x1 - x2) ** 2 + (y1 - y2) ** 2\n        for x, y, r in circles:\n            if calc_dist(0, 0, x, y) <= r ** 2 or calc_dist(X, Y, x, y) <= r ** 2:\n                return False\n\n        def \u5916\u79bb(circle1, circle2) -> bool:\n            x1, y1, r1 = circle1\n            x2, y2, r2 = circle2\n            return (x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2) > (r1 + r2) * (r1 + r2)\n        def \u5185\u542b(circle1, circle2) -> bool:\n            x1, y1, r1 = circle1\n            x2, y2, r2 = circle2\n            return (x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2) < (r1 - r2) * (r1 - r2)\n        n = len(circles)\n        uf = UnionFind(n)\n        for i, j in combinations(range(n), 2):\n            if not \u5916\u79bb(circles[i], circles[j]) and not \u5185\u542b(circles[i], circles[j]):\n                uf.union(i, j)\n        d = defaultdict(list)\n        for i in range(n):\n            d[uf.find(i)].append(i)\n\n        def isSegCircleCross(segment, circle) -> bool:\n            \"\"\"\n            \u7ebf\u6bb5\u4e0e\u5706\u662f\u5426\u76f8\u4ea4\n            !\u7ebf\u6bb5\u7f29\u6210\u70b9\u89c6\u4e3a\u4e0e\u5706\u76f8\u4ea4\n\n            https://blog.csdn.net/SongBai1997/article/details/86599879\n            \"\"\"\n            sx1, sy1, sx2, sy2 = segment\n            cx, cy, r = circle\n            if sx1 == sx2 and sy1 == sy2:\n                return ((sx1 - cx) * (sx1 - cx) + (sy1 - cy) * (sy1 - cy)) == r * r\n\n            flag1 = (sx1 - cx) * (sx1 - cx) + (sy1 - cy) * (sy1 - cy) <= r * r\n            flag2 = (sx2 - cx) * (sx2 - cx) + (sy2 - cy) * (sy2 - cy) <= r * r\n            if flag1 and flag2:  # \u4e24\u70b9\u90fd\u5728\u5706\u5185 \u4e0d\u76f8\u4ea4\n                return False\n            if flag1 or flag2:  # \u4e00\u70b9\u5728\u5706\u5185\u4e00\u70b9\u5728\u5706\u5916 \u76f8\u4ea4\n                return True\n\n            # \u4e24\u70b9\u90fd\u5728\u5706\u5916\n\n            # \u5c06\u76f4\u7ebfp1p2\u5316\u4e3a\u76f4\u7ebf\u65b9\u7a0b\u7684\u4e00\u822c\u5f0f:Ax+By+C=0\u7684\u5f62\u5f0f\u3002\u5148\u5316\u4e3a\u4e24\u70b9\u5f0f\uff0c\u7136\u540e\u7531\u4e24\u70b9\u5f0f\u5f97\u51fa\u4e00\u822c\u5f0f\n            A = sy1 - sy2\n            B = sx2 - sx1\n            C = sx1 * sy2 - sx2 * sy1\n            # \u4f7f\u7528\u8ddd\u79bb\u516c\u5f0f\u5224\u65ad\u5706\u5fc3\u5230\u76f4\u7ebfax+by+c=0\u7684\u8ddd\u79bb\u662f\u5426\u5927\u4e8e\u534a\u5f84\n            dist1 = A * cx + B * cy + C\n            dist1 *= dist1\n            dist2 = (A * A + B * B) * r * r\n            if dist1 > dist2:  # \u5706\u5fc3\u5230\u76f4\u7ebf\u8ddd\u79bb\u5927\u4e8e\u534a\u5f84,\u4e0d\u76f8\u4ea4\n                return False\n\n            # \u9700\u8981\u5224\u65ad\u89d2op1p2\u548c\u89d2op2p1\u662f\u5426\u90fd\u4e3a\u9510\u89d2,\u90fd\u4e3a\u9510\u89d2\u5219\u76f8\u4ea4,\u5426\u5219\u4e0d\u76f8\u4ea4\n            angle1 = (cx - sx1) * (sx2 - sx1) + (cy - sy1) * (sy2 - sy1)\n            angle2 = (cx - sx2) * (sx1 - sx2) + (cy - sy2) * (sy1 - sy2)\n            if angle1 > 0 and angle2 > 0:\n                return True\n            return False\n\n        s1 = [0, 0, 0, Y]\n        s2 = [0, 0, X, 0]\n        s3 = [0, Y, X, Y]\n        s4 = [X, 0, X, Y]\n        for subset in d:\n            flag1 = False\n            flag2 = False\n            flag3 = False\n            flag4 = False\n\n            for i in d[subset]:\n                if isSegCircleCross(s1, circles[i]):\n                    flag1 = True\n                if isSegCircleCross(s2, circles[i]):\n                    flag2 = True\n                if isSegCircleCross(s3, circles[i]):\n                    flag3 = True\n                if isSegCircleCross(s4, circles[i]):\n                    flag4 = True\n            if (flag1 and flag2) or (flag1 and flag4) or (flag2 and flag3) or (flag3 and flag4):\n                return False\n        return True\n            \n\n\n\n\n",
    "submit_ts": "1722139109",
    "subm_id": "1335808116"
}