{
    "username": "aixvik",
    "submission": "class Solution {\npublic:\n    long long minimumCost(int m, int n, vector<int>& horizontalCut, vector<int>& verticalCut) {\n        sort(horizontalCut.rbegin(), horizontalCut.rend());\n    sort(verticalCut.rbegin(), verticalCut.rend());\n    \n    long long totalCost = 0;\n    int horizontalPieces = 1;  // Initially 1 piece horizontally\n    int verticalPieces = 1;    // Initially 1 piece vertically\n\n    int hIndex = 0;\n    int vIndex = 0;\n\n    while (hIndex < horizontalCut.size() && vIndex < verticalCut.size()) {\n        if (horizontalCut[hIndex] >= verticalCut[vIndex]) {\n            totalCost += static_cast<long long>(horizontalCut[hIndex]) * verticalPieces;\n            hIndex++;\n            horizontalPieces++;\n        } else {\n            totalCost += static_cast<long long>(verticalCut[vIndex]) * horizontalPieces;\n            vIndex++;\n            verticalPieces++;\n        }\n    }\n\n    // Process remaining horizontal cuts\n    while (hIndex < horizontalCut.size()) {\n        totalCost += static_cast<long long>(horizontalCut[hIndex]) * verticalPieces;\n        hIndex++;\n        horizontalPieces++;\n    }\n\n    // Process remaining vertical cuts\n    while (vIndex < verticalCut.size()) {\n        totalCost += static_cast<long long>(verticalCut[vIndex]) * horizontalPieces;\n        vIndex++;\n        verticalPieces++;\n    }\n\n    return totalCost;\n    }\n};",
    "submit_ts": "1720925953",
    "subm_id": "1320271439"
}