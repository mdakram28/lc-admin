{
    "username": "\u660e\u955c\u6b62\u6c34",
    "submission": "class SparseTable {\n    private long[][] st;\n    private int[] log;\n\n    public SparseTable(int[] nums) {\n        int n = nums.length;\n        int maxLog = (int) (Math.log(n) / Math.log(2)) + 1;\n        st = new long[maxLog][n];\n        log = new int[n + 1];\n        for (int i = 0; i < n; i++) {\n            st[0][i] = nums[i];\n        }\n        for (int i = 2; i <= n; i++) {\n            log[i] = log[i / 2] + 1;\n        }\n        for (int j = 1; j < maxLog; j++) {\n            for (int i = 0; (i + (1 << j)) <= n; i++) {\n                st[j][i] = Math.max(st[j - 1][i], st[j - 1][i + (1 << (j - 1))]);\n            }\n        }\n    }\n    public long query(int left, int right) {\n        int j = log[right - left + 1];\n        return Math.max(st[j][left], st[j][right - (1 << j) + 1]);\n    }\n}\n\nclass Solution {\n    public long[] countKConstraintSubstrings(String s, int k, int[][] queries) {\n        int n = s.length();\n        int[] a = new int[n];\n        int[] pre0 = new int[n + 1];\n        int[] pre1 = new int[n + 1];\n        for (int i = 0; i < n; i++) {\n            pre0[i + 1] = pre0[i] + (s.charAt(i) == '0' ? 1 : 0);\n            pre1[i + 1] = pre1[i] + (s.charAt(i) == '1' ? 1 : 0);\n        }\n        for (int i = 0; i < n; i++) {\n            int left = i, right = n - 1;\n            while (left <= right) {\n                int mid = (left + right) / 2;\n                if (pre0[mid + 1] - pre0[i] > k && pre1[mid + 1] - pre1[i] > k) {\n                    right = mid - 1;\n                } else {\n                    left = mid + 1;\n                }\n            }\n            a[i] = left;\n        }\n        long[] pre = new long[n + 1];\n        for (int i = 0; i < n; i++) {\n            pre[i + 1] = pre[i] + a[i];\n        }\n        SparseTable st = new SparseTable(a);\n        long[] ans = new long[queries.length];\n        for (int idx = 0; idx < queries.length; idx++) {\n            int l = queries[idx][0];\n            int r = queries[idx][1] + 1;\n            long totalPairs = (long) (r - l) * (r - l + 1) / 2;\n            int left = l, right = r - 1;\n            while (left <= right) {\n                int mid = (left + right) / 2;\n                if (st.query(l, mid) <= r) {\n                    left = mid + 1;\n                } else {\n                    right = mid - 1;\n                }\n            }\n            int num = left - l;\n            ans[idx] = totalPairs - (long) num * r + (pre[left] - pre[l]);\n        }\n        return ans;\n    }\n}\n",
    "submit_ts": "1723953432",
    "subm_id": "556417576"
}