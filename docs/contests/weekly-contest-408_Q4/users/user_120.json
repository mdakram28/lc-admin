{
    "username": "megaspazz",
    "submission": "class Solution {\n    public boolean canReachCorner(int X, int Y, int[][] circles) {\n        final int N = circles.length;\n        \n        DisjointSet djs = new DisjointSet(N);\n        for (int i = 0; i < N; ++i) {\n            for (int j = 0; j < N; ++j) {\n                if (intersects(circles[i], circles[j])) {\n                    djs.union(i, j);\n                }\n            }\n        }\n        for (int id = 0; id < N; ++id) {\n            boolean topLeft = false;\n            boolean botRight = false;\n            for (int i = 0; i < N; ++i) {\n                if (djs.find(i) != id) {\n                    continue;\n                }\n                int x = circles[i][0];\n                int y = circles[i][1];\n                int r = circles[i][2];\n                if (x - r <= 0) {\n                    topLeft = true;\n                }\n                if (y + r >= Y) {\n                    topLeft = true;\n                }\n                if (x + r >= X) {\n                    botRight = true;\n                }\n                if (y - r <= 0) {\n                    botRight = true;\n                }\n            }\n            if (topLeft && botRight) {\n                return false;\n            }\n        }\n        return true;\n    }\n    \n    private static boolean intersects(int[] a, int[] b) {\n        long xa = a[0];\n        long ya = a[1];\n        long ra = a[2];\n        long xb = b[0];\n        long yb = b[1];\n        long rb = b[2];\n        \n        long dx = xa - xb;\n        long dy = ya - yb;\n        return (ra + rb) * (ra + rb) >= dx * dx + dy * dy;\n    }\n    \n\tpublic static class DisjointSet {\n\t\tprivate int[] rank;\n\t\tprivate int[] parent;\n\n\t\tpublic DisjointSet(int n) {\n\t\t\tthis.rank = new int[n];\n\t\t\tthis.parent = new int[n];\n\n\t\t\tfor (int i = 0; i < n; ++i) {\n\t\t\t\tparent[i] = i;\n\t\t\t}\n\t\t}\n\n\t\tpublic int find(int x) {\n\t\t\tif (parent[x] != x) {\n\t\t\t\tparent[x] = find(parent[x]);\n\t\t\t}\n\t\t\treturn parent[x];\n\t\t}\n\n\t\tpublic boolean union(int x, int y) {\n\t\t\tint xr = find(x);\n\t\t\tint yr = find(y);\n\n\t\t\tif (xr == yr) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tif (rank[xr] < rank[yr]) {\n\t\t\t\tparent[xr] = yr;\n\t\t\t} else if (rank[xr] > rank[yr]) {\n\t\t\t\tparent[yr] = xr;\n\t\t\t} else {\n\t\t\t\tparent[xr] = yr;\n\t\t\t\t++rank[yr];\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\t}\n}",
    "submit_ts": "1722138765",
    "subm_id": "1335799063"
}