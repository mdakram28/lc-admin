{
    "username": "211FA04639",
    "submission": "class Solution:\n    def minimumDifference(self, nums: List[int], target: int) -> int:\n        bits = [0] * 32\n        \n        def dec(x):\n            nonlocal bits\n            for i in range(32):\n                if ((x >> i) & 1) == 0:\n                    bits[i] -= 1\n        \n        def inc(x):\n            nonlocal bits\n            for i in range(32):\n                if ((x >> i) & 1) == 0:\n                    bits[i] += 1\n        \n        def evaluate():\n            res = 0\n            for i in range(32):\n                if bits[i] == 0:\n                    res ^= (1 << i)\n            return res\n        \n        left = 0\n        n = len(nums)\n        result = float('inf')\n        for right in range(n):\n            inc(nums[right])\n            current = evaluate()\n            result = min(result, abs(current - target))\n            while left < right and current < target:\n                dec(nums[left])\n                left += 1\n                current = evaluate()\n                result = min(result, abs(current - target))\n        \n        return result\ndef is_prime(n):\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\ndef prime_factors(n):\n    factors = []\n    while n % 2 == 0:\n        factors.append(2)\n        n = n // 2\n    for i in range(3,int(math.sqrt(n))+1,2):\n        while n % i == 0:\n            factors.append(i)\n            n = n // i\n    if n > 2:\n        factors.append(n)\n    return factors\n\n# Function to check if a number is Armstrong\ndef is_armstrong(n):\n    order = len(str(n))\n    temp = n\n    sum = 0\n    while temp > 0:\n        digit = temp % 10\n        sum += digit ** order\n        temp //= 10\n    return n == sum\n\n# Function to sweep even and odd numbers from a list\ndef sweep_even_odd(numbers):\n    evens = []\n    odds = []\n    for num in numbers:\n        if num % 2 == 0:\n            evens.append(num)\n        else:\n            odds.append(num)\n    return evens, odds\n\n# Function to check if two numbers are coprime\ndef are_coprime(a, b):\n    return math.gcd(a, b) == 1",
    "submit_ts": "1717300216",
    "subm_id": "1274837420"
}