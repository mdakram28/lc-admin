{
    "username": "Rohit2593",
    "submission": "class Solution {\npublic:\n    int minimumDifference(vector<int>& nums, int k) {\n        int n = nums.size();\n        \n        vector<vector<int>> sparse(n, vector<int>(20));\n        \n        for(int i = 0; i<n; i++) {\n            sparse[i][0] = nums[i];\n        }\n        \n        vector<int> pw(n+1);\n        pw[0] = -1;\n        for(int i = 1; i<=n; i++) {\n            pw[i] = pw[i-1];\n            if(!(i & (i - 1)))\n                pw[i]++;\n        }\n        \n        for(int j = 1; j<20; j++) {\n            for(int i = 0; i<n; i++) {\n                sparse[i][j] = sparse[i][j-1];\n                int ind = i - (1 << (j - 1));\n                \n                if(ind >= 0)\n                    sparse[i][j] &= sparse[ind][j-1];\n            }\n        }\n        // return 0;\n        function<int(int, int)> query = [&](int left, int right) {\n            int sz = right - left + 1;\n            \n            int p = pw[sz];\n            int ind = left + (1 << p) - 1;\n            \n            // cout << left << ' ' << right << ' ' << sz << ' ' << p << ' ' << ind << \"\\n\";\n            // return 0;\n            int ans = sparse[right][p];\n            ans &= sparse[ind][p];\n            return ans;\n        };\n        \n        \n//         cout << query(0, 2) << \"\\n\";\n//         cout << query(0, 1) << \"\\n\";\n//         cout << query(1, 2) << \"\\n\";\n        \n//         return 0; \n        \n        \n        int ans = INT_MAX;\n        \n        for(int i = 0; i<n; i++) {\n            // just smaller: \n            \n            int left = 0, right = i;\n            int mid;\n            \n            while(left <= right) {\n                mid = (left + right) / 2;\n                \n                int curr = query(mid, i);\n                \n                if(curr == k)\n                    return 0;\n                \n                ans = min(ans, abs(k - curr));\n                \n                if(curr < k)\n                    left = mid + 1;\n                else\n                    right = mid - 1;\n            }\n            // break;\n            left = 0;\n            right = i;\n            \n            while(left <= right) {\n                mid = (left + right) / 2;\n                \n                int curr = query(mid, i);\n                \n                if(curr == k)\n                    return 0;\n                \n                ans = min(ans, abs(k - curr));\n                \n                if(curr > k)\n                    right = mid - 1;\n                else\n                    left = mid + 1;\n            }\n        }\n        \n        return ans;\n    }\n};",
    "submit_ts": "1717297462",
    "subm_id": "1274743397"
}