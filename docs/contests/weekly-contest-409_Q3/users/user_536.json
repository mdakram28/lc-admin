{
    "username": "dakshmv14",
    "submission": "class Solution {\npublic:\n    class SegmentTree {\nprivate:\n    vector<int> tree;\n    vector<int> lazy;\n    int n;\n\n    void build(int node, int start, int end) {\n        if (start == end) {\n            tree[node] = 1;\n        } else {\n            int mid = (start + end) / 2;\n            build(2 * node + 1, start, mid);\n            build(2 * node + 2, mid + 1, end);\n            tree[node] = tree[2 * node + 1] + tree[2 * node + 2];\n        }\n    }\n\n    void update_range(int l, int r, int node, int start, int end) {\n        if (lazy[node] != 0) {\n            tree[node] = 0;\n            if (start != end) {\n                lazy[2 * node + 1] = 1;\n                lazy[2 * node + 2] = 1;\n            }\n            lazy[node] = 0;\n        }\n\n        if (start > end || start > r || end < l)\n            return;\n\n        if (start >= l && end <= r) {\n            tree[node] = 0;\n            if (start != end) {\n                lazy[2 * node + 1] = 1;\n                lazy[2 * node + 2] = 1;\n            }\n            return;\n        }\n\n        int mid = (start + end) / 2;\n        update_range(l, r, 2 * node + 1, start, mid);\n        update_range(l, r, 2 * node + 2, mid + 1, end);\n        tree[node] = tree[2 * node + 1] + tree[2 * node + 2];\n    }\n\n    int query(int l, int r, int node, int start, int end) {\n        if (lazy[node] != 0) {\n            tree[node] = 0;\n            if (start != end) {\n                lazy[2 * node + 1] = 1;\n                lazy[2 * node + 2] = 1;\n            }\n            lazy[node] = 0;\n        }\n\n        if (start > end || start > r || end < l)\n            return 0;\n\n        if (start >= l && end <= r)\n            return tree[node];\n\n        int mid = (start + end) / 2;\n        int p1 = query(l, r, 2 * node + 1, start, mid);\n        int p2 = query(l, r, 2 * node + 2, mid + 1, end);\n        return p1 + p2;\n    }\n\n    public:\n        SegmentTree(int size) {\n            n = size;\n            tree.resize(4 * n, 0);\n            lazy.resize(4 * n, 0);\n            build(0, 0, n - 1);\n        }\n\n        void update(int l, int r) {\n            update_range(l, r, 0, 0, n - 1);\n        }\n\n        int prefix_sum(int idx) {\n            return query(0, idx, 0, 0, n - 1);\n        }\n    };\n    vector<int> shortestDistanceAfterQueries(int n, vector<vector<int>>& queries) {\n        SegmentTree seg(n-1);\n        vector<int>ans;\n        for(auto i:queries){\n            int a=i[0]+1,b=i[1]-1;\n            seg.update(a,b);\n            ans.push_back(seg.prefix_sum(n-1));\n        }\n        return ans;\n    }\n};",
    "submit_ts": "1722741883",
    "subm_id": "1343755779"
}