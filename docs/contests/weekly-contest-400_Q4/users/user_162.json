{
    "username": "hungt1",
    "submission": "\ntemplate <typename T, typename func = function<T(const T, const T)>>\nstruct SparseTable {\n    func calc;\n    int n;\n    vector<vector<T>> ans;\n\n    SparseTable() {}\n\n    SparseTable(const vector<T>& a, const func& f) : n(a.size()), calc(f) {\n        int last = trunc(log2(n)) + 1;\n        ans.resize(n);\n        for (int i = 0; i < n; i++){\n            ans[i].resize(last);\n        }\n        for (int i = 0; i < n; i++){\n            ans[i][0] = a[i];\n        }\n        for (int j = 1; j < last; j++){\n            for (int i = 0; i <= n - (1 << j); i++){\n                ans[i][j] = calc(ans[i][j - 1], ans[i + (1 << (j - 1))][j - 1]);    \n            }\n        }\n    }\n\n    T query(int l, int r){\n        assert(0 <= l && l <= r && r < n);\n        int k = trunc(log2(r - l + 1));\n        return calc(ans[l][k], ans[r - (1 << k) + 1][k]);\n    }\n};\n\nclass Solution {\npublic:\n    int minimumDifference(vector<int>& nums, int k) {\n        SparseTable<int> st(nums, [](int a, int b) { \n            return (a & b); \n        });        \n\n        const int INF = 1e9;\n\n        int n = nums.size();\n        int ans = INF;\n        for (int l = 0; l < n; l++) {\n            int left = l, right = n - 1;\n            int r = n - 1;\n            while (left <= right) {\n                int mid = (left + right) / 2;\n                if (st.query(l, mid) < k) {\n                    right = mid - 1;\n                    r = mid;\n                }\n                else {\n                    left = mid + 1;\n                }\n            }\n\n            ans = min(ans, abs(st.query(l, r) - k));\n            if (r - 1 >= l) {\n                ans = min(ans, abs(st.query(l, r - 1) - k));\n            }\n        }\n        \n        return ans;\n    }\n};",
    "submit_ts": "1717296319",
    "subm_id": "1274698814"
}