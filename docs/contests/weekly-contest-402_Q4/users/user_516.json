{
    "username": "yuanchenxi2022",
    "submission": "\nclass Solution:\n    def countOfPeaks(self, nums: List[int], queries: List[List[int]]) -> List[int]:\n        peak_idxs = [-math.inf]\n        bottom_idxs = []\n        nn = len(nums)\n        for ii in range(1, nn - 1):\n            num = nums[ii]\n            p_num = nums[ii - 1]\n            n_num = nums[ii + 1]\n            if num > max(p_num, n_num):\n                peak_idxs.append(ii)\n            if num < max(p_num, n_num):\n                bottom_idxs.append(ii)\n        peak_idxs.append(math.inf)\n        res = []\n\n        def contains(idx):\n            ij = bisect.bisect_left(peak_idxs, idx)\n            return peak_idxs[ij] == idx\n\n        def remove(idx):\n            ij = bisect.bisect_left(peak_idxs, idx)\n            peak_idxs.pop(ij)\n\n        def update_idx(idx):\n            if idx not in range(1, nn - 1):\n                return\n            ii = idx\n            num = nums[ii]\n            p_num = nums[ii - 1]\n            n_num = nums[ii + 1]\n            is_peak = num > max(p_num, n_num)\n            if contains(idx) and not is_peak:\n                remove(ii)\n            if not contains(idx) and is_peak:\n                bisect.insort(peak_idxs, ii)\n\n        def query(left, right):\n            if left >= right:\n                return 0\n            left_idx = bisect.bisect_right(peak_idxs, left)\n            right_idx = bisect.bisect_left(peak_idxs, right)\n            # print(left_idx, right_idx, left, right, peak_idxs)\n            return right_idx - left_idx\n\n        for action, v1, v2 in queries:\n            if action == 1:\n                res.append(query(v1, v2))\n            else:\n                nums[v1] = v2\n                update_idx(v1 - 1)\n                update_idx(v1)\n                update_idx(v1 + 1)\n        return res\n",
    "submit_ts": "1718507461",
    "subm_id": "1289652318"
}