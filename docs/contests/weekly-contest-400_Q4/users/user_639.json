{
    "username": "whoawhoawhoa",
    "submission": "class Solution {\n    static Map<Integer, Integer>[] dp;\n    static int[] arr;\n    static int k;\n    public int minimumDifference(int[] nums, int target) {\n        dp = new HashMap[nums.length];\n        arr = nums;\n        k = target;\n        int res = Integer.MAX_VALUE;\n        for (int i = 0; i < nums.length - 1; i++) {\n            res = Math.min(res, Math.abs(nums[i] - k));\n            res = Math.min(res, find(nums[i], i + 1));\n        }\n        res = Math.min(res, Math.abs(nums[nums.length - 1] - k));\n        return res;\n    }\n\n    static int find(int state, int i) {\n        if (dp[i] != null && dp[i].containsKey(state)) {\n            return dp[i].get(state);\n        }\n        // System.out.println(state + \" \" + i);\n        int res = Integer.MAX_VALUE;\n        state &= arr[i];\n        res = Math.min(res, Math.abs(state - k));\n        if (i != arr.length - 1) {\n            res = Math.min(res, find(state, i + 1));\n        }\n        if (dp[i] == null) {\n            dp[i] = new HashMap<>();\n        }\n        dp[i].put(state, res);\n        return res;\n    }\n}",
    "submit_ts": 1717298846.0
}