{
    "username": "Pras28",
    "submission": "from collections import deque, defaultdict\nimport math\n\nclass Solution:\n    def canReachCorner(self, X: int, Y: int, circles: List[List[int]]) -> bool:\n        def intersect(c1, c2):\n            x1, y1, r1 = c1\n            x2, y2, r2 = c2\n            distance = math.sqrt((x1 - x2)**2 + (y1 - y2)**2)\n            return distance <= r1 + r2\n        \n        def touches_edges(circle):\n            x, y, r = circle\n            left = x - r <= 0\n            bottom = y - r <= 0\n            right = x + r >= X\n            top = y + r >= Y\n            \n            if (left or top) and (right or bottom):\n                return None\n            \n            return [left, bottom, right, top]\n        \n        for circle in circles:\n            edges = touches_edges(circle)\n            if edges is None:\n                return False\n        \n        graph = defaultdict(list)\n        for i in range(len(circles)):\n            for j in range(i+1, len(circles)):\n                if intersect(circles[i], circles[j]):\n                    graph[i].append(j)\n                    graph[j].append(i)\n        \n        def bfs(start):\n            queue = deque([start])\n            visited = set([start])\n            edges = [False] * 4\n            \n            while queue:\n                node = queue.popleft()\n                circle_edges = touches_edges(circles[node])\n                for i in range(4):\n                    edges[i] |= circle_edges[i]\n                \n                if (edges[0] or edges[-1]) and (edges[2] or edges[1]):\n                    return True\n                \n                for neighbor in graph[node]:\n                    if neighbor not in visited:\n                        visited.add(neighbor)\n                        queue.append(neighbor)\n            \n            return False\n        \n        visited = set()\n        for i in range(len(circles)):\n            if i not in visited:\n                if bfs(i):\n                    return False\n                visited.update(set(graph[i]))\n        \n        return True",
    "submit_ts": "1722134798",
    "subm_id": "1335678755"
}