{
    "username": "victormarcilio",
    "submission": "class Solution {\npublic:\n    void aux(const vector<tuple<long long, int, int>>& squares, int depth, bitset<100> row, bitset<100> col, long long &best, int first = 0, long long total = 0) \n    {\n        if(depth == 3)\n        {\n            best = max(best, total);\n            return;\n        }\n        if (first >= squares.size())\n            return;\n        auto [val, x, y] = squares[first];\n        if(total + (3 - depth) * (-val) < best)\n            return;\n        for(int i = first; i < squares.size(); i++)\n        {\n            auto [val, x, y] = squares[i];\n            if(!row[x] && !col[y])\n            {\n                row[x] = col[y] = 1;\n                aux(squares, depth + 1, row, col, best, i + 1, total - val);\n                row[x] = col[y] = 0;\n            }\n        }\n    }\n    long long maximumValueSum(vector<vector<int>>& board) {\n        long long best = -3000000000;\n        vector<tuple<long long, int, int>> squares;\n        squares.reserve(board.size()*board[0].size());\n        for(int i = 0; i < board.size(); i++)\n            for(int j = 0; j < board[0].size(); j++)\n                squares.push_back({-board[i][j], i, j});\n        sort(begin(squares), end(squares));\n        aux(squares, 0, {}, {}, best);\n        return best;\n    }\n};",
    "submit_ts": "1723907493",
    "subm_id": "1359110292"
}