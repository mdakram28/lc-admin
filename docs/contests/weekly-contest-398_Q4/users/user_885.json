{
    "username": "shridhar_pandey",
    "submission": "from typing import List, Dict, Tuple\n\nclass Solution:\n    def __init__(self):\n        self.dp = {}\n\n    def solve(self, k: int, i: int, jump: int, can: bool) -> int:\n        if i > k + 5:\n            return 0\n\n        if jump > 31:\n            return 0\n\n        if (i, jump, can) in self.dp:\n            return self.dp[(i, jump, can)]\n\n        ans = (i == k)\n        if can:\n            ans += self.solve(k, i - 1, jump, 0)\n        if i + (1 << jump) <= k + 1:\n            ans += self.solve(k, i + (1 << jump), jump + 1, 1)\n\n        self.dp[(i, jump, can)] = ans\n        return ans\n\n    def waysToReachStair(self, k: int) -> int:\n        return self.solve(k, 1, 0, 1)\n\n# Example usage\nsolution = Solution()\nprint(solution.waysToReachStair(10))  # Output will depend on the value of k\n",
    "submit_ts": "1716090110",
    "subm_id": "1261859358"
}