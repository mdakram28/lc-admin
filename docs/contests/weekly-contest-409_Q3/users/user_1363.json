{
    "username": "Um4irS44d",
    "submission": "class Solution {\npublic:\n    vector<int> shortestDistanceAfterQueries(int totalNumberOfCities, vector<vector<int>>& queryList) {\n        // Vector to keep track of distances from each city\n        vector<int> distanceArray(totalNumberOfCities, 0);\n        \n        // Initialize distances based on the pattern\n        for (int currentCityIndex = 1; currentCityIndex < totalNumberOfCities; ++currentCityIndex) {\n            distanceArray[currentCityIndex] = distanceArray[currentCityIndex - 1] + 1;\n        }\n\n        // Set to keep track of active city indices\n        set<int> activeCityIndices;\n        for (int currentCityIndex = 0; currentCityIndex < totalNumberOfCities; ++currentCityIndex) {\n            activeCityIndices.insert(currentCityIndex);\n        }\n\n        vector<int> resultArray;\n\n        // Process each query\n        for (const auto& currentQuery : queryList) {\n            int lowerBoundIndex = currentQuery[0];\n            int upperBoundIndex = currentQuery[1];\n\n            // Find the bounds for removal\n            auto lowerBoundIterator = activeCityIndices.lower_bound(lowerBoundIndex + 1);\n            auto upperBoundIterator = activeCityIndices.lower_bound(upperBoundIndex);\n\n            // Erase the range from the set of active city indices\n            activeCityIndices.erase(lowerBoundIterator, upperBoundIterator);\n\n            // Record the number of remaining active city indices\n            resultArray.push_back(activeCityIndices.size() - 1);\n        }\n\n        return resultArray;\n    }\n};\n",
    "submit_ts": "1722743571",
    "subm_id": "1343794959"
}