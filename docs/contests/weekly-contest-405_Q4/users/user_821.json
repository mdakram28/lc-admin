{
    "username": "Oone",
    "submission": "import java.math.BigInteger;\nimport java.util.*;\nimport java.util.stream.Collectors;\n\n\npublic class Main {\n    public static void main(String[] args) {\n        int[][] meetings = {{1, 2, 6}, {1, 3, 4}, {2, 4, 6}, {2, 5, 3}, {3, 6, 6}, {3, 0, 8}, {7, 0, 2}};\n        int[][] edges = {{0, 2}, {3, 2}, {2, 5}};\n        int[] nums = {100,1,1,10,5};\n        int[] healths = {9, 5, 3, 8, 4, 7, 2, 7, 4, 5, 4, 9, 1, 4, 8, 10, 8, 10, 4, 7};\n        String[] matrix = {\"abdef\",\"abc\",\"d\",\"def\",\"ef\"};\n        String s = \"RLRL\";\n        String[] ans = {\"gfnt\", \"xn\", \"mdz\", \"yfmr\", \"fi\", \"wwncn\", \"hkdy\"};\n        Solution solution = new Solution();\n        solution.minimumCost(\"abcdef\",matrix,nums);\n    }\n}\n\nclass Solution {\n    int[][] c;\n    int[] val, fail, dp;\n    int cnt = 0;\n    Queue<Integer> q = new LinkedList<>();\n\n    void insert(String s, int num) {\n        int len = s.length();\n        int now = 0;\n        for (int i = 0; i < len; ++i) {\n            int v = s.charAt(i) - 'a';\n            if (c[now][v] == 0) c[now][v] = ++cnt;\n            now = c[now][v];\n        }\n        val[now] = num;\n    }\n\n    void build() {\n        for (int i = 0; i < 26; ++i)\n            if (c[0][i] != 0) {\n                fail[c[0][i]] = 0;\n                q.add(c[0][i]);\n            }\n        while (!q.isEmpty()) {\n            int u = q.poll();\n            for (int i = 0; i < 26; ++i)\n                if (c[u][i] != 0) {\n                    fail[c[u][i]] = c[fail[u]][i];\n                    q.add(c[u][i]);\n                } else\n                    c[u][i] = c[fail[u]][i];\n        }\n    }\n\n    void query(String s, String[] words, int[] costs) {\n        int len = s.length();\n        int now = 0;\n        for (int i = 1; i <= len; ++i) {\n            now = c[now][s.charAt(i - 1) - 'a'];\n            for (int t = now; t != 0; t = fail[t])\n                if (val[t] != 0 && dp[i - words[val[t] - 1].length()] != Integer.MAX_VALUE)\n                    dp[i] = Math.min(dp[i], dp[i - words[val[t] - 1].length()] + costs[val[t] - 1]);\n        }\n    }\n\n    public int minimumCost(String target, String[] words, int[] costs) {\n        int n = target.length();\n        dp = new int[n + 10];\n        Arrays.fill(dp, Integer.MAX_VALUE);\n        dp[0] = 0;\n        int m = words.length;\n        int mx = 0;\n        HashMap<String, Integer> map = new HashMap<>();\n        for (int i = 0; i < m; ++i) {\n            if (map.containsKey(words[i]) && costs[map.get(words[i])] > costs[i])\n                map.put(words[i], i);\n            else if (!map.containsKey(words[i])) {\n                map.put(words[i], i);\n                mx += words[i].length();\n            }\n        }\n        c = new int[mx + 10][30];\n        val = new int[mx + 10];\n        fail = new int[mx + 10];\n        for (String s : map.keySet())\n            insert(s, map.get(s) + 1);\n        build();\n        query(target, words, costs);\n        return dp[n] == Integer.MAX_VALUE ? -1 : dp[n];\n    }\n}",
    "submit_ts": "1720321412",
    "subm_id": "1312322220"
}