{
    "username": "Pankaj_lamgria",
    "submission": "class Solution {\npublic:\n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n        int n=edges1.size(),m=edges2.size();\n        n++,m++;\n        int temp1=0,temp2=0;\n        vector<int>indegre1(n,0),indegre2(m,0);\n        vector<vector<int>>adj1(n),adj2(m);\n        for(auto it:edges1){\n            indegre1[it[0]]++;\n            indegre1[it[1]]++;\n            adj1[it[0]].push_back(it[1]);\n            adj1[it[1]].push_back(it[0]);\n        }\n        for(auto it:edges2){\n            indegre2[it[0]]++;\n            indegre2[it[1]]++;\n            adj2[it[0]].push_back(it[1]);\n            adj2[it[1]].push_back(it[0]);\n        }\n        int level1=0,level2=0;\n        queue<int>q;\n        for(int i=0;i<n;i++){\n            if(indegre1[i]==1)q.push(i);\n        }\n        while(!q.empty()){\n            int s=q.size();\n            for(int i=0;i<s;i++){\n                auto node=q.front();\n                q.pop();\n                for(auto it:adj1[node]){\n                    indegre1[it]--;\n                    if(indegre1[it]==1)q.push(it);\n                }\n            }\n            if(q.size()!=0){\n                level1++;\n                temp1=2*level1;\n            }\n            if(s==2 && q.empty()){\n                level1++;\n                temp1++;\n            }\n        }\n        for(int i=0;i<m;i++){\n            if(indegre2[i]==1)q.push(i);\n        }\n        while(!q.empty()){\n   \n            int s=q.size();\n            for(int i=0;i<s;i++){\n                auto node=q.front();\n                q.pop();\n                for(auto it:adj2[node]){\n                    indegre2[it]--;\n                    if(indegre2[it]==1)q.push(it);\n                }\n            }\n            if(!q.empty()){\n                level2++; \n                temp2=level2*2;\n            }\n            if(q.empty()&& s==2){\n                level2++;\n                temp2++;\n            }\n        }\n        // cout<<level1<<\" \"<<level2;\n        if(n==2)level1=1;\n        if(m==2)level2=1;\n        temp1=max(temp1,temp2);\n        return max(level1+level2+1,temp1);\n    }\n};",
    "submit_ts": 1719719418.0
}