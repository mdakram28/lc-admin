{
    "username": "Ian McKibben",
    "submission": "using ll = long long;\n\nclass FenwickTree {\npublic:\n    FenwickTree(const vector<ll>& arr) {\n        n = arr.size();\n        tree.resize(n + 1, 0);\n        // Initialize the Fenwick Tree with the given array\n        for (ll i = 0; i < n; ++i) {\n            update(i, arr[i]);\n        }\n    }\n\n    void update(ll index, ll delta) {\n        index += 1; // Fenwick Tree is 1-based index\n        while (index <= n) {\n            tree[index] += delta;\n            index += index & -index;\n        }\n    }\n\n    ll prefix_sum(ll index) const {\n        index += 1; // Fenwick Tree is 1-based index\n        ll result = 0;\n        while (index > 0) {\n            result += tree[index];\n            index -= index & -index;\n        }\n        return result;\n    }\n\n    ll range_sum(ll left, ll right) const {\n        return prefix_sum(right) - prefix_sum(left - 1);\n    }\n\nprivate:\n    vector<ll> tree;\n    ll n;\n};\n\nclass Solution {\npublic:\n    vector<long long> countKConstraintSubstrings(string s, int k, vector<vector<int>>& queries) {\n        int n = s.size();\n        vector<ll> cnt(n, 0);\n        vector<vector<ll>> pre(n + 1, vector<ll>(2, 0));\n        for(int i = 0; i < n; i++) {\n            if (s[i] == '1') {\n                pre[i + 1][0] = pre[i][0];\n                pre[i + 1][1] = pre[i][1] + 1;\n            }\n            else {\n                pre[i + 1][0] = pre[i][0] + 1;\n                pre[i + 1][1] = pre[i][1];\n            }\n        }\n        // Get cnt array\n        int l = 0;\n        for(int i = 0; i < n; i++) {\n            vector<ll> cnts = { pre[i + 1][0] - pre[l][0], pre[i + 1][1] - pre[l][1] };\n            while(cnts[0] > k && cnts[1] > k) {\n                l++;\n                cnts = { pre[i + 1][0] - pre[l][0], pre[i + 1][1] - pre[l][1] };\n            }\n            cnt[i] = i - l + 1;\n        }\n        FenwickTree tree(cnt);\n        // for(int i = 0; i < n; i++) cout << cnt[i] << ' ';\n        // cout << endl;\n\n        vector<ll> ans;\n        for(auto &q : queries) {\n            ll tot = 0;\n            // Add first part\n            int L = q[0], R = q[1];\n            int lower = L - 1;\n            for(int j = n; j >= 1; j >>= 1) {\n                // While sum is still good, all subs are good\n                while(true) {\n                    int nind = lower + j;\n                    if (nind > R) break;\n                    vector<ll> cnts = { pre[nind + 1][0] - pre[L][0], pre[nind + 1][1] - pre[L][1] };\n                    if (cnts[0] <= k || cnts[1] <= k) lower += j;\n                    else break;\n                }\n            }\n            // cout << lower << ' '<< L << endl;\n            ll dist = lower - L + 1;\n            tot += dist * (dist + 1) / 2;\n            // Add second part\n            if (lower < R) {\n                tot += tree.range_sum(lower + 1, R);\n            }\n            ans.push_back(tot);\n        }\n        return ans;\n    }\n};",
    "submit_ts": "1723951741",
    "subm_id": "1359778971"
}