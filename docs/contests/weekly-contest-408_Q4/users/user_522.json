{
    "username": "WARLU",
    "submission": "class Solution {\n    bool intersect(vector<int>& c1,vector<int>& c2)\n    {\n        return sqrt(1ll*(c1[0]-c2[0])*(c1[0]-c2[0])+1ll*(c1[1]-c2[1])*(c1[1]-c2[1]))<=c1[2]+c2[2];\n    }\n    bool bfs(vector<vector<int>>& graph,int src,int des1,int des2){\n        int n=graph.size();\n        vector<bool> vis(n,false);\n        queue<int> qu;\n        qu.push(src);\n        vis[src]=true;\n        while(!qu.empty()){\n            int fr=qu.front();\n            qu.pop();\n            for(int v:graph[fr]){\n                if(!vis[v]){\n                    vis[v]=true;\n                    qu.push(v);\n                }\n            }\n        }\n        return vis[des1]||vis[des2];\n    }\npublic:\n    bool canReachCorner(int X, int Y, vector<vector<int>>& circles) {\n        int n=circles.size();\n        vector<vector<int>> graph(n+4);\n        for(int i=0;i<n;i++){\n            for(int j=i+1;j<n;j++){\n                if(intersect(circles[i],circles[j])){\n                    graph[i].push_back(j);\n                    graph[j].push_back(i);\n                }\n            }\n            if(circles[i][0]<=circles[i][2]){\n                graph[i].push_back(n);\n                graph[n].push_back(i);\n            }\n            if(circles[i][1]<=circles[i][2]){\n                graph[i].push_back(n+1);\n                graph[n+1].push_back(i);\n            }\n            if(X-circles[i][0]<=circles[i][2]){\n                graph[i].push_back(n+2);\n                graph[n+2].push_back(i);\n            }\n            if(Y-circles[i][1]<=circles[i][2]){\n                graph[i].push_back(n+3);\n                graph[n+3].push_back(i);\n            }\n        }\n         return !(bfs(graph,n,n+1,n+2) || bfs(graph,n+3,n+2,n+1));\n    }\n};",
    "submit_ts": "1722137733",
    "subm_id": "1335772170"
}