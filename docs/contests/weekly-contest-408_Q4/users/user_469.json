{
    "username": "lakshaygpt28",
    "submission": "struct Boundary {\n  int left = INT_MAX;\n  int right = INT_MIN;\n  int top = INT_MIN;\n  int bottom = INT_MAX;\n};\n\nclass DSU {\n  vector<int> parent;\n  vector<int> sz;\npublic:\n  DSU(int n) {\n      parent.resize(n);\n      sz.resize(n);\n      for (int i = 0; i < n; i++) {\n          parent[i] = i;\n          sz[i] = i;\n      }\n  }\n\n  bool merge(int u, int v) {\n      u = findParent(u);\n      v = findParent(v);\n\n      if (u == v) {\n          return false;\n      }\n      if (sz[u] < sz[v]) {\n          swap(u, v);\n      }\n      parent[v] = u;\n      sz[u] += sz[v];\n      return true;\n  }\n\n  int findParent(int u) {\n      if (u == parent[u]) {\n          return u;\n      }\n      parent[u] = findParent(parent[u]);\n      return parent[u];\n  }\n};\n\nclass Solution {\npublic:\n    bool canReachCorner(int X, int Y, vector<vector<int>>& circles) {\n      int n = circles.size();\n      DSU dsu(n);\n      auto intersects = [&](int &u, int &v) {\n        int x1 = circles[u][0];\n        int y1 = circles[u][1];\n        int r1 = circles[u][2];\n\n        int x2 = circles[v][0];\n        int y2 = circles[v][1];\n        int r2 = circles[v][2];\n\n        long long dist = 1LL * (x2 - x1) * (x2 - x1) + 1LL * (y2 - y1) * (y2 - y1);\n        long long radius = 1LL * (r1 + r2) * (r1 + r2);\n        return dist <= radius;\n      };\n      for (int i = 0; i < n; i++) {\n        for (int j = i + 1; j < n; j++) {\n          if (intersects(i, j)) {\n            dsu.merge(i, j);\n          }\n        }\n      }\n      unordered_map<int, Boundary> boundary;\n      for (int i = 0; i < n; i++) {\n        int par = dsu.findParent(i);\n        boundary[par].left = min(boundary[par].left, circles[i][0] - circles[i][2]);\n        boundary[par].right = max(boundary[par].right, circles[i][0] + circles[i][2]);\n        boundary[par].top = max(boundary[par].top, circles[i][1] + circles[i][2]);\n        boundary[par].bottom = min(boundary[par].bottom, circles[i][1] - circles[i][2]);\n      }\n      for (auto &[_, bound] : boundary) {\n        if (bound.left <= 0 and bound.right >= X) return false;\n        if (bound.bottom <= 0 and bound.top >= Y) return false;\n        if (bound.top >= Y and bound.right >= X) return false;\n        if (bound.left <= 0 and bound.bottom <= 0) return false;\n      }\n      return true;\n    }\n};\n\n",
    "submit_ts": "1722137506",
    "subm_id": "1335765723"
}