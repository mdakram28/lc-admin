{
    "username": "sparsh8020",
    "submission": "class Solution {\npublic:\n    vector<vector<int>> tree1, tree2;\n\n    pair<int, int> findFarthestNode(vector<vector<int>>& graph,int start) {\n        int nodeCount = graph.size();\n        queue<int> queue;\n        vector<int> distance(nodeCount, -1);\n        queue.push(start);\n        distance[start] = 0;\n        int farthestNode = start;\n        while (!queue.empty()) {\n            int node = queue.front();\n            queue.pop();\n            for (int neighbor : graph[node]) {\n                if (distance[neighbor] == -1) {\n                    distance[neighbor] = distance[node] + 1;\n                    queue.push(neighbor);\n                    if (distance[neighbor] > distance[farthestNode]) {\n                        farthestNode = neighbor;\n                    }\n                }\n            }\n        }\n        return {farthestNode, distance[farthestNode]};\n    }\n\n    int calculateDiameter(vector<vector<int>>& graph) {\n        auto [start, _] = findFarthestNode(graph,0);\n        auto [end, diameter] = findFarthestNode( graph,start);\n        return diameter;\n    }\n    int sparsh(vector<vector<int>>& edges1, vector<vector<int>>& edges2){\n                int nodeCount2 = edges2.size() + 1;\n        int nodeCount1 = edges1.size() + 1;\n        \n        tree1.resize(nodeCount1);\n        tree2.resize(nodeCount2);\n        for (const auto& edge : edges2) {\n            tree2[edge[0]].push_back(edge[1]);\n            tree2[edge[1]].push_back(edge[0]);\n        }\n        for (const auto& edge : edges1) {\n            tree1[edge[0]].push_back(edge[1]);\n            tree1[edge[1]].push_back(edge[0]);\n        }\n       \n\n        int diameter1 = calculateDiameter(tree1);\n        int diameter2 = calculateDiameter(tree2);\n\n        // Minimum possible diameter of the resulting tree\n        return max(diameter1, max(diameter2, (diameter1 + 1) / 2 + (diameter2 + 1) / 2 + 1));\n    }\n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n        return sparsh(edges1,edges2);\n    }\n};",
    "submit_ts": "1719717589",
    "subm_id": "1304395616"
}