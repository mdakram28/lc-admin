{
    "username": "daksh_72",
    "submission": "class Solution {\npublic:\n    int minFlips(vector<vector<int>>& grid) {\n        int n = grid.size(), m = grid[0].size();\n        int ans = 0;\n        vector<int> shift(3, 0);\n\n        // Central element case\n        if (n % 2 == 1 && m % 2 == 1) {\n            int midRow = n / 2, midCol = m / 2;\n            ans += grid[midRow][midCol];\n            grid[midRow][midCol] = 0;  // Set it to 0 to avoid re-processing\n        }\n\n        // Row-wise central elements\n        if (n % 2 == 1) {\n            int midRow = n / 2;\n            for (int i = 0; i < m / 2; ++i) {\n                int sm = grid[midRow][i] + grid[midRow][m - 1 - i];\n                shift[sm] += 1;\n            }\n        }\n\n        // Column-wise central elements\n        if (m % 2 == 1) {\n            int midCol = m / 2;\n            for (int i = 0; i < n / 2; ++i) {\n                int sm = grid[i][midCol] + grid[n - 1 - i][midCol];\n                shift[sm] += 1;\n            }\n        }\n\n        // Determine the number of shifts based on pairs\n        if (shift[2] % 2 == 1) {\n            ans += (shift[1] > 0) ? shift[1] : 2;\n        } else {\n            ans += shift[1];\n        }\n\n        // Quadrant-wise processing\n        for (int i = 0; i < n / 2; ++i) {\n            for (int j = 0; j < m / 2; ++j) {\n                int a = grid[i][j];\n                int b = grid[n - 1 - i][j];\n                int c = grid[i][m - 1 - j];\n                int d = grid[n - 1 - i][m - 1 - j];\n                int sm = a + b + c + d;\n\n                if (sm != 0 && sm != 4) {\n                    ans += min(sm, 4 - sm);\n                }\n            }\n        }\n\n        return ans;\n    }\n};\n",
    "submit_ts": "1722699580",
    "subm_id": "1343216012"
}