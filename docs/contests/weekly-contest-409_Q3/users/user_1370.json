{
    "username": "weilunla",
    "submission": "class Solution {\npublic:\n    vector<int> shortestDistanceAfterQueries(int n, vector<vector<int>>& queries) {\n        int m = queries.size();\n        // vector<int> dp(n, 0);\n        vector<int> res(m, 0);\n        // int temp = n - 1;\n        // for(int i = 0; i < n; i++) dp[i] = n - i - 1;\n        // for(int i = 0; i < m; i++){\n        //     int u = queries[i][0], v = queries[i][1];\n        //     if(dp[v] + 1 < dp[u]){\n        //         dp[u] = dp[v] + 1;\n        //         for(int j = u - 1; j >= 0; j--){\n        //             dp[j] = min(dp[j], dp[])\n        //         }\n        //     }\n        // }\n        unordered_set<int> node;\n        unordered_map<int, int> d;\n        int count = 0;\n        for(int i = 0; i < n; i++) node.insert(i);\n        for(int i = 0; i < m; i++){\n            int u = queries[i][0], v = queries[i][1];\n            for(int j = u + 1; j < v; j++){\n                if(d.find(j) != d.end()){\n                    int temp = d[j];\n                    d[j] = max(temp, v - 1);\n                    j = temp;\n                    continue;\n                }\n                node.erase(j);\n                //cout<<j<<\" \";\n                d[j] = v - 1;\n                //j++;\n            }\n            //cout<<endl;\n            res[i] = node.size() - 1;\n        }\n        return res;\n    }\n};",
    "submit_ts": "1722743907",
    "subm_id": "1343802418"
}