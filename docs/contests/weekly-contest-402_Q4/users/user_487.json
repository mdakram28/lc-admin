{
    "username": "vhlpZARocz",
    "submission": "class segmentTree:\n    def __init__(self, nums):\n        self.n = len(nums)\n        self.tree = [0] * 2 * self.n\n        for i in range(self.n):\n            self.tree[i + self.n] = nums[i]\n        for i in range(self.n-1, 0, -1):\n            self.tree[i] = self.tree[2*i] + self.tree[2*i+1]\n\n    def update(self, index: int, val: int) -> None:\n        index += self.n\n        self.tree[index] = val\n        while index > 1:\n            self.tree[index//2] = self.tree[index] + self.tree[index^1]\n            index //= 2\n\n    def sumRange(self, left: int, right: int) -> int:\n        left += self.n\n        right += self.n\n        cnt = 0\n        while left <= right:\n            if left % 2 == 1:\n                cnt += self.tree[left]\n                left += 1\n            if right % 2 ==0:\n                cnt += self.tree[right]\n                right -= 1\n            left //= 2\n            right //= 2\n        return cnt\n    \nclass Solution:\n    def countOfPeaks(self, nums: List[int], queries: List[List[int]]) -> List[int]:\n        n = len(nums)\n        m = len(queries)\n        \n        cnt = [0] * n\n        if nums[0] > nums[1]:\n            cnt[0] = 1\n        if nums[-1] > nums[-2]:\n            cnt[-1] = 1\n        for i in range(1, n-1):\n            if nums[i-1] < nums[i] and nums[i] > nums[i+1]:\n                cnt[i] = 1\n        \n        res = []\n        segT = segmentTree(cnt)\n        for query in queries:\n            if query[0] == 2:\n                loc, val = query[1], query[2]\n                nums[loc] = val\n                if cnt[loc] == 0 and (loc == 0 or nums[loc] > nums[loc-1]) and (loc == n-1 or nums[loc] > nums[loc+1]):\n                    cnt[loc] = 1\n                    segT.update(loc, 1)\n                elif cnt[loc] == 1 and ((loc > 0 and nums[loc] <= nums[loc-1]) or (loc < n-1 and nums[loc] <= nums[loc+1])):\n                    cnt[loc] = 0\n                    segT.update(loc, 0)\n                # left\n                if loc > 0:\n                    if cnt[loc-1] == 1 and nums[loc] >= nums[loc-1]:\n                        cnt[loc-1] = 0\n                        segT.update(loc-1, 0)\n                    elif cnt[loc-1] == 0 and nums[loc] < nums[loc-1] and (loc-1 == 0 or nums[loc - 1] > nums[loc-2]):\n                        cnt[loc-1] = 1\n                        segT.update(loc-1, 1)\n                if loc < n - 1:\n                    if cnt[loc+1] == 1 and nums[loc+1] <= nums[loc]:\n                        cnt[loc+1] = 0\n                        segT.update(loc+1, 0)\n                    elif cnt[loc+1] == 0 and nums[loc] < nums[loc + 1] and (loc + 1 == n-1 or nums[loc + 1] > nums[loc + 2]):\n                        cnt[loc + 1] = 1\n                        segT.update(loc+1, 1)\n                    \n            else:\n                left, right = query[1], query[2]\n                if left == right:\n                    res.append(segT.sumRange(left, right) - cnt[left] )\n                else:\n                    res.append(segT.sumRange(left, right) - cnt[left] - cnt[right])\n            # print(cnt)\n        return res\n        \n        \n                ",
    "submit_ts": 1718507965.0
}