{
    "username": "Sudhanshuu418",
    "submission": "import java.util.*;\n\nclass Solution {\n    public int[] twoSum(int[] nums, int target) {\n        // Arrays.sort(nums);\n        for(int i=0;i<nums.length-1;i++){\n            for(int j=i+1;j<nums.length;j++){\n            if(nums[i]+nums[j]==target)\n                return new int[]{i,j};\n            }\n        }\n        return new int[]{};\n    }\n    private static final int MOD = 1_000_000_007;\n    private static final int MAX_INVERSIONS = 400;\n\n    public int numberOfPermutations(int n, int[][] requirements) {\n        Map<Integer, Integer> endIdxToInversionCnt = new HashMap<>();\n        for (int[] req : requirements) {\n            endIdxToInversionCnt.put(req[0] + 1, req[1]);\n        }\n\n        long[][] dp = new long[n + 1][MAX_INVERSIONS + 1];\n        dp[0][0] = 1;\n\n        for (int length = 1; length <= n; length++) {\n            for (int currentInversions = 0; currentInversions <= MAX_INVERSIONS; currentInversions++) {\n                for (int newPosition = 0; newPosition < length; newPosition++) {\n                    int previousInversions = currentInversions - newPosition;\n                    if (previousInversions >= 0) {\n                        dp[length][currentInversions] = (dp[length][currentInversions] + dp[length - 1][previousInversions]) % MOD;\n                    }\n                }\n            }\n\n            if (endIdxToInversionCnt.containsKey(length)) {\n                int requiredInversions = endIdxToInversionCnt.get(length);\n                for (int currentInversions = 0; currentInversions <= MAX_INVERSIONS; currentInversions++) {\n                    if (currentInversions != requiredInversions) {\n                        dp[length][currentInversions] = 0;\n                    }\n                }\n            }\n        }\n\n        long result = 0;\n        for (int currentInversions = 0; currentInversions <= MAX_INVERSIONS; currentInversions++) {\n            result = (result + dp[n][currentInversions]) % MOD;\n        }\n\n        return (int) result;\n    }\n}\n",
    "submit_ts": 1719070166.0
}