{
    "username": "tplusd",
    "submission": "import heapq\nclass Solution:\n    def maximumValueSum(self, board: List[List[int]]) -> int:\n        \n        self.res = float('-inf')\n\n        def DFS(current,o_i,o_j,s):\n            if current ==3:\n                self.res = max(self.res,s)\n            else:\n\n                if current <=0:\n                    temp = []\n                    #heapq.heapify(temp)\n                    for i in range(len(board)):\n                        for j in range(len(board[0])):\n                            if i not in o_i and j not in o_j:\n                                val = board[i][j]\n                                temp.append((val,i,j))\n                    temp.sort(key=lambda x:-1*x[0])\n                    for k in range(4):\n                        if k <= len(temp)-1:\n                            o_i.append(temp[k][1])\n                            o_j.append(temp[k][2])\n                            DFS(current+1,o_i,o_j,s+temp[k][0])\n                            o_i.pop()\n                            o_j.pop()\n                    #k = 4\n                    #while k <= len(temp)-1 and temp[k][0] == temp[k-1][0]:\n                    #    o_i.append(temp[k][1])\n                    #    o_j.append(temp[k][2])\n                    #    DFS(current+1,o_i,o_j,s+temp[k][0])\n                    #    o_i.pop()\n                    #    o_j.pop()\n                    #    k +=1\n                elif current ==1:\n                    temp = []\n                    #heapq.heapify(temp)\n                    for i in range(len(board)):\n                        for j in range(len(board[0])):\n                            if i not in o_i and j not in o_j:\n                                val = board[i][j]\n                                temp.append((val,i,j))\n                    temp.sort(key=lambda x:-1*x[0])\n                    for k in range(2):\n                        if k <= len(temp)-1:\n                            o_i.append(temp[k][1])\n                            o_j.append(temp[k][2])\n                            DFS(current+1,o_i,o_j,s+temp[k][0])\n                            o_i.pop()\n                            o_j.pop()\n                    #k = 4\n                    #while k <= len(temp)-1 and temp[k][0] == temp[k-1][0]:\n                    #    o_i.append(temp[k][1])\n                    #    o_j.append(temp[k][2])\n                    #    DFS(current+1,o_i,o_j,s+temp[k][0])\n                    #    o_i.pop()\n                    #    o_j.pop()\n                    #    k +=1\n                elif current ==2:\n                    local_max = float('-inf')\n                    for i in range(len(board)):\n                        for j in range(len(board[0])):\n                            if i not in o_i and j not in o_j:\n                                val = board[i][j]\n                                if val>=local_max:\n                                    temp_i,temp_j = i,j\n                                    local_max = val\n                    o_i.append(temp_i)\n                    o_j.append(temp_j)\n                    DFS(current+1,o_i,o_j,s+local_max)\n                    o_i.pop()\n                    o_j.pop()\n                \n            \n        DFS(0,[],[],0)\n\n        return self.res\n\n",
    "submit_ts": "1723909652",
    "subm_id": "1359200634"
}