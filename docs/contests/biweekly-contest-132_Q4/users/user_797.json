{
    "username": "rk_02_04",
    "submission": "class Solution {\npublic:\n    int maximumLength(vector<int>& nums, int k) {\n        int maxLength=1;\n        vector<int> maxValues(k+1,-1);\n        vector<map<int, int>> valueMap(k + 1);\n        int n=nums.size();\n        int dp[n][k+1];\n        for (int i = 0; i < n; ++i) {\n        for (int j = 0; j <= k; ++j) {\n            dp[i][j] = 1;  \n        }\n    }\n\n    \n\n    for (int i = 0; i < n; ++i) {\n        for (int j = 0; j <= k; ++j) {\n            for (int l = 0; l < j; ++l) {\n                dp[i][j] = max(dp[i][j], 1 + maxValues[l]);\n            }\n            if (valueMap[j].find(nums[i]) != valueMap[j].end()) {\n                dp[i][j] = max(dp[i][j], 1 + valueMap[j][nums[i]]);\n            }\n            maxLength = max(maxLength, dp[i][j]);\n        }\n        for (int j = 0; j <= k; ++j) {\n            maxValues[j] = max(maxValues[j], dp[i][j]);\n            valueMap[j][nums[i]] = max(valueMap[j][nums[i]], dp[i][j]);\n        }\n    }\n        return maxLength;\n        \n    }\n};",
    "submit_ts": 1717862188.0
}