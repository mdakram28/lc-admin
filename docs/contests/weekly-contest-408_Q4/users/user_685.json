{
    "username": "singh_anant",
    "submission": "class Solution {\npublic:\n    int bfs(int nodes, int start, int target1, int target2, const vector<vector<int>>& adj) {\n    queue<int> q;\n    vector<int> visited(nodes + 4, 0);\n    q.push(start);\n    visited[start] = 1;\n\n    while (!q.empty())\n    {\n        int u = q.front();\n        q.pop();\n\n        for (int v : adj[u]) \n        {\n            if (!visited[v]) \n            {\n                q.push(v);\n                visited[v] = 1;\n            }\n        }\n    }\n    return (visited[target1]==1 || visited[target2]==1);\n}\n\nbool canReachCorner(int a, int b, vector<vector<int>>& temp) {\n    int len = temp.size();\n    \n    vector<vector<int>> adj(len + 4);\n\n    for (int i = 0; i < len; ++i) \n    {\n        if (temp[i][0] <= temp[i][2]) \n        {\n            adj[len].push_back(i);\n            \n            adj[i].push_back(len);\n        }\n        if (a - temp[i][0] <= temp[i][2])\n        {\n            adj[len + 2].push_back(i);\n            adj[i].push_back(len + 2);\n        }\n        if (temp[i][1] <= temp[i][2]) \n        {\n            adj[len + 1].push_back(i);\n            adj[i].push_back(len + 1);\n        }\n        if (b - temp[i][1] <= temp[i][2]) \n        {\n            adj[len + 3].push_back(i);\n            adj[i].push_back(len + 3);\n        }\n\n        for (int j = i + 1; j < len; ++j)\n        {\n            \n            if (temp[i][2] + temp[j][2]>= sqrt(pow(temp[i][0] - temp[j][0], 2) +  pow(temp[i][1] - temp[j][1], 2)))\n            {\n                adj[i].push_back(j);\n                adj[j].push_back(i);\n            }\n        }\n    }\n     return max(bfs(len + 4, len, len + 1, len + 2, adj),bfs(len + 4, len + 3, len + 2, len + 1, adj)) == 0;\n}\n};",
    "submit_ts": "1722138606",
    "subm_id": "1335795090"
}