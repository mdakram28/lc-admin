{
    "username": "brajesh_muwel17",
    "submission": "class Solution {\npublic:\n    #define INF INT32_MAX\n\nclass SegmentTree {\npublic:\n    std::vector<int> tree;\n    int n;\n\n    // Constructor\n    SegmentTree(std::vector<int>& arr) {\n        n = arr.size();\n        tree.resize(4 * n);\n        build(arr, 0, 0, n - 1);\n    }\n\n    void build(std::vector<int>& arr, int node, int start, int end) {\n        if (start == end) {\n            tree[node] = arr[start];\n        } else {\n            int mid = (start + end) / 2;\n            build(arr, 2 * node + 1, start, mid);\n            build(arr, 2 * node + 2, mid + 1, end);\n\n            tree[node] = tree[2 * node + 1] & tree[2 * node + 2];\n        }\n    }\n\n    int query(int l, int r) {\n        return query(0, 0, n - 1, l, r);\n    }\n\n    int query(int node, int start, int end, int l, int r) {\n        if (r < start || end < l) {\n            return INF;\n        }\n        if (l <= start && end <= r) {\n            return tree[node];\n        }\n        int mid = (start + end) / 2;\n        int p1 = query(2 * node + 1, start, mid, l, r);\n        int p2 = query(2 * node + 2, mid + 1, end, l, r);\n\n        return p1 & p2;\n    }\n};\n\nint minimumDifference(std::vector<int>& arr, int k) {\n    int n = arr.size();\n    SegmentTree st(arr);\n    int ans = INF;\n\n    for (int i = 0; i < n; i++) {\n        int l = i - 1, r = n - 1, mid;\n\n        while (r - l > 1) {\n            mid = (l + r) / 2;\n            if (st.query(i, mid) >= k) {\n                l = mid;\n            } else {\n                r = mid;\n            }\n        }\n\n        if (l != i - 1) {\n            ans = std::min(ans, abs(st.query(i, l) - k));\n        }\n        ans = std::min(ans, abs(k - st.query(i, r)));\n    }\n\n    return ans;\n}\n};",
    "submit_ts": 1717297830.0
}