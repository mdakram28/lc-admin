{
    "username": "sameonall",
    "submission": "class TrieNode {\npublic:\n    unordered_map<char, TrieNode*> children;\n    int minCost;\n\n    TrieNode() : minCost(2e9) {}\n};\n\nclass Trie {\npublic:\n    TrieNode* root;\n\n    Trie() {\n        root = new TrieNode();\n    }\n\n    void insert(const string& word, int cost) {\n        TrieNode* node = root;\n        for (char ch : word) {\n            if (!node->children.count(ch)) {\n                node->children[ch] = new TrieNode();\n            }\n            node = node->children[ch];\n        }\n        node->minCost = min(node->minCost, cost);\n    }\n\n    int findMinCost(const string& s, int start, vector<long long>& dp) {\n        TrieNode* node = root;\n        long long minCost = 2e9;\n        for (int i = start; i < s.size(); ++i) {\n            if (!node->children.count(s[i])) {\n                break;\n            }\n            node = node->children[s[i]];\n            if (node->minCost != 2e9) {\n                minCost = min(minCost, (long long)(node->minCost + dp[i + 1]));\n            }\n        }\n        return minCost;\n    }\n};\n\nclass Solution {\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int n = words.size();\n        Trie trie;\n        for (int i = 0; i < n; i++) {\n            trie.insert(words[i], costs[i]);\n        }\n\n        int k = target.size();\n        vector<long long> dp(k + 1, 2e9);\n        dp[k] = 0; // No cost to convert an empty suffix\n\n        for (int i = k - 1; i >= 0; --i) {\n            dp[i] = trie.findMinCost(target, i, dp);\n        }\n\n        return dp[0] == 2e9 ? -1 : dp[0];\n    }\n};",
    "submit_ts": "1720323459",
    "subm_id": "1312376092"
}