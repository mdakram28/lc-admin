{
    "username": "Krishna Sharma",
    "submission": "class Solution {\npublic:\n    long long maximumValueSum(vector<vector<int>>& board) {\n        int n = board.size();\n        int m = board[0].size();\n        \n        // Ensure there are enough columns to pick 3 distinct values\n        if (m < 3) return -1; // Edge case: Not enough columns\n\n        // Store the top 3 largest values along with their indices for each row\n        vector<vector<pair<int, int>>> topValues(n);\n\n        for (int i = 0; i < n; i++) {\n            vector<pair<int, int>> row;\n            for (int j = 0; j < m; j++) {\n                row.push_back({board[i][j], j});\n            }\n            sort(row.rbegin(), row.rend()); // Sort descending based on values\n\n            // Take the top 3 values (or less if not enough columns)\n            for (int k = 0; k < min(3, m); k++) {\n                topValues[i].push_back(row[k]);\n            }\n        }\n\n        long long ans = -1e16;\n\n        // Now select 3 different rows and consider the best possible columns\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                for (int k = j + 1; k < n; k++) {\n                    for (auto &[val1, col1] : topValues[i]) {\n                        for (auto &[val2, col2] : topValues[j]) {\n                            for (auto &[val3, col3] : topValues[k]) {\n                                // Ensure all selected columns are different\n                                if (col1 != col2 && col1 != col3 && col2 != col3) {\n                                    long long curr = 1LL * val1 + val2 + val3;\n                                    ans = max(ans, curr);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return ans;\n    }\n};\n",
    "submit_ts": "1723909471",
    "subm_id": "1359193853"
}