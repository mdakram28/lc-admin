{
    "username": "SupervisorMayHap",
    "submission": "class Trie {\n    int cost;\n    Map<Character, Trie> children;\n\n    public Trie() {\n        this.cost = Integer.MAX_VALUE / 2;;\n        this.children = new HashMap<>();\n    }\n}\n\nclass Solution {\n    public Trie root = new Trie();\n    public int v = Integer.MAX_VALUE / 2;\n    \n    public int minimumCost(String target, String[] words, int[] costs) {\n        // Build the trie\n        for (int i = 0; i < words.length; i++) {\n            Trie cur = root;\n            for (char c : words[i].toCharArray()) {\n                cur.children.putIfAbsent(c, new Trie());\n                cur = cur.children.get(c);\n            }\n            cur.cost = Math.min(cur.cost, costs[i]);\n        }\n        \n        int n = target.length();\n        Integer[] dp = new Integer[n + 5];\n        \n        dfs(0, 0, n, target.toCharArray(), dp);\n        return v == Integer.MAX_VALUE / 2 ? -1 : v;\n    }\n    \n    public int dfs(int index, int cost, int n, char[] target, Integer[] dp) {\n        if (index == n) {\n            v = Math.min(v, cost);\n            return 0;\n        }\n        if (dp[index] != null) {\n            v = Math.min(v, cost + dp[index]);\n            return dp[index];\n        }\n        if (cost >= v) {\n            return Integer.MAX_VALUE / 2;\n        }\n\n        int minV = Integer.MAX_VALUE / 2;\n        Trie cur = root;\n        for (int i = index; i < n; i++) {\n            if (!cur.children.containsKey(target[i])) {\n                break;\n            }\n            cur = cur.children.get(target[i]);\n            if (cur.cost != Integer.MAX_VALUE / 2) {\n                minV = Math.min(minV, dfs(i + 1, cost + cur.cost, n, target,  dp ) + cur.cost);\n            }\n        }\n        dp[index] = minV;\n        return minV;\n    }\n}\n    ",
    "submit_ts": "1720322220",
    "subm_id": "1312343986"
}