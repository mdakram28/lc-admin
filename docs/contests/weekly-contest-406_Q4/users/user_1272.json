{
    "username": "qn68",
    "submission": "class Solution:\n    def minimumCost(self, m: int, n: int, horizontalCut: List[int], verticalCut: List[int]) -> int:\n        # Sort the cuts in descending order by cost\n        horizontalCut.sort(reverse=True)\n        verticalCut.sort(reverse=True)\n        \n        total_cost = 0\n        \n        # Current pieces after cuts\n        horizontal_pieces = 1\n        vertical_pieces = 1\n        \n        # Process vertical and horizontal cuts together in sorted order by cost\n        i, j = 0, 0\n        while i < len(horizontalCut) or j < len(verticalCut):\n            if j >= len(verticalCut) or (i < len(horizontalCut) and horizontalCut[i] >= verticalCut[j]):\n                # Perform horizontal cut\n                total_cost += horizontalCut[i] * vertical_pieces\n                horizontal_pieces += 1\n                i += 1\n            else:\n                # Perform vertical cut\n                total_cost += verticalCut[j] * horizontal_pieces\n                vertical_pieces += 1\n                j += 1\n        \n        return total_cost\n",
    "submit_ts": "1720925304",
    "subm_id": "1320250121"
}