{
    "username": "REED_W",
    "submission": "class Solution {\n    public int maximumSumSubsequence(int[] nums, int[][] queries) {\n        return sln1(nums, queries);\n    }\n\n    static int mod = 1_000_000_007;\n\n    private int sln1(int[] nums, int[][] qs){\n        int n = nums.length;\n        int m = qs.length;\n        SegTree st = new SegTree(nums);\n        long  res =  0;\n        for(int i = 0;i<m;i++){\n            st.update(qs[i][0], qs[i][1]);\n            long[] curr = st.query(0,n-1);\n            res += curr[3];\n            res %= mod;\n        }\n        return (int)res;\n    }\n\n    class SegTree{\n        Node root;\n        class Node{\n            Node left;\n            Node right;\n            int start;\n            int end;\n            long[] val = new long[4];\n            // 0: x-----x\n            // 1: x------\n            // 2: ------x\n            // 3: -------\n        }\n        \n        SegTree(int[] nums){\n            root = build(nums, 0, nums.length-1);\n        }\n        \n        Node build(int[] nums, int x, int y){\n            if(x>y) return null;\n            Node node = new Node();\n            node.start =x; node.end = y;\n            if(x==y) {\n                node.val[0] = node.val[1] = node.val[2] = 0;\n                node.val[3] = Math.max(0, nums[x]);\n            }else{\n                int mid = x+y>>1;\n                node.left = build(nums, x, mid);\n                node.right = build(nums, mid+1, y);\n                node.val[0] = Math.max(node.left.val[0] + node.right.val[2], node.left.val[1] + node.right.val[0]);\n                node.val[1] = Math.max(node.left.val[0] + node.right.val[3], node.left.val[1] + node.right.val[1]);\n                node.val[2] = Math.max(node.left.val[2] + node.right.val[2], node.left.val[3] + node.right.val[0]);\n                node.val[3] = Math.max(node.left.val[2] + node.right.val[3], node.left.val[3] + node.right.val[1]);\n            }\n            return node;\n        }\n        \n        void update(int i, int val){\n            update(root, i, val);\n        }\n        \n        void update(Node node, int i, int val){\n            if (node.start == node.end) {\n                node.val[0] = node.val[1] = node.val[2] = 0;\n                node.val[3] = Math.max(0, val);\n            } else {\n                int mid = node.start + (node.end - node.start) / 2;\n                if (i <= mid) {\n                     update(node.left, i, val);\n                } else {\n                     update(node.right, i, val);\n                }\n                node.val[0] = Math.max(node.left.val[0] + node.right.val[2], node.left.val[1] + node.right.val[0]);\n                node.val[1] = Math.max(node.left.val[0] + node.right.val[3], node.left.val[1] + node.right.val[1]);\n                node.val[2] = Math.max(node.left.val[2] + node.right.val[2], node.left.val[3] + node.right.val[0]);\n                node.val[3] = Math.max(node.left.val[2] + node.right.val[3], node.left.val[3] + node.right.val[1]);\n            }\n        }\n        \n        \n        long[] query(int start, int end){\n            return query(root, start, end);\n        }\n        \n        long[] query(Node node, int start, int end){\n            if (node.end == end && node.start == start) {\n                return node.val;\n            } else {\n                int mid = node.start + (node.end - node.start) / 2;\n                if (end <= mid) {\n                    return query(node.left, start, end);\n                } else if (start > mid) {\n                    return query(node.right, start, end);\n                }  else {    \n                    long[] left = query(node.right, mid+1, end) ;\n                    long[] right = query(node.left, start, mid);\n                    long[] res = new long[4];\n                    res[0] = Math.max(left[0] + right[2], left[1] + right[0]);\n                    res[1] = Math.max(left[0] + right[3], left[1] + right[1]);\n                    res[2] = Math.max(left[2] + right[2], left[3] + right[0]);\n                    res[3] = Math.max(left[2] + right[3], left[3] + right[1]);\n                    return res;\n                }\n            }\n        }\n    }\n\n}",
    "submit_ts": 1716695515.0
}