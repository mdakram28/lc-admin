{
    "username": "praveenkr21uics",
    "submission": "class Solution {\nprivate:\n    const int MAX_JUMP = 31;\n    std::unordered_map<int, std::vector<std::vector<int>>> dp;\n\n    int countWays(int k, int stair, int jump, bool canMoveDown) {\n        if (stair > k + 5) return 0;  // No need to explore further\n        if (jump > MAX_JUMP) return 0;  // Maximum jump value exceeded\n\n        // Check if the result is already computed and stored in the dp\n        auto it = dp.find(stair);\n        if (it != dp.end()) {\n            auto& jumpVec = it->second;\n            if (jumpVec.size() > jump && jumpVec[jump].size() > canMoveDown) {\n                int result = jumpVec[jump][canMoveDown];\n                if (result != -1) {\n                    return result;\n                }\n            }\n        }\n\n        int ways = 0;\n        if (stair == k) {\n            ways++;  // Reached the target stair\n        }\n\n        if (canMoveDown) {\n            ways += countWays(k, stair - 1, jump, false);  // Move down one stair\n        }\n\n        if (stair + (1 << jump) <= k + 1) {\n            ways += countWays(k, stair + (1 << jump), jump + 1, true);  // Jump up 2^jump stairs\n        }\n\n        // Store the result in the dp\n        if (it == dp.end()) {\n            dp[stair] = std::vector<std::vector<int>>(MAX_JUMP + 1, std::vector<int>(2, -1));\n        }\n        dp[stair][jump][canMoveDown] = ways;\n\n        return ways;\n    }\n\npublic:\n    int waysToReachStair(int k) {\n        return countWays(k, 1, 0, true);\n    }\n};",
    "submit_ts": 1716090034.0
}