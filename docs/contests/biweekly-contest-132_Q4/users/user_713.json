{
    "username": "thirdbest",
    "submission": "class Solution {\npublic:\n    int maximumLength(vector<int>& a, int k) {\n        int n = size(a);\n        map<int, vector<int>> m;\n        for (auto i = 0; i < n; ++i) m[a[i]].push_back(i);\n        auto bs = [&](int x, int l) -> int {\n            int low = 0, high = size(m[x]) - 1, ans = n;\n            while (low <= high) {\n                int mid = (low + high) / 2;\n                if (m[x][mid] > l) {\n                    ans = m[x][mid];\n                    high = mid - 1;\n                } else low = mid + 1;\n            }\n            return ans;\n        };\n        \n        vector<vector<int>> dp(n + 1, vector<int>(k + 2, 0));\n        vector<int> mx(k + 2, 0);\n        for (auto i = n - 1; i >= 0; --i) {\n            for (auto j = 0; j <= k; ++j) {\n                // pick\n                int x = bs(a[i], i);\n                dp[i][j] = 1 + dp[x][j];\n                if (j > 0) dp[i][j] = max(dp[i][j], 1 + mx[j - 1]);\n            }\n            for (auto j = 0; j <= k; ++j) mx[j] = max(mx[j], dp[i][j]);\n        }\n        int ans = 0;\n        for (auto i = 0; i < n; ++i) {\n            ans = max(ans, dp[i][k]);\n        }\n        return ans;\n    }\n};",
    "submit_ts": 1717861814.0
}