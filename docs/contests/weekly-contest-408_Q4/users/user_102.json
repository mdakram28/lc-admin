{
    "username": "d_ananta_",
    "submission": "class Solution {\npublic:\n    bool intersect(vector<int> &a, vector<int> &b) {\n        long long dist = (long long)(a[0] - b[0]) * (a[0] - b[0]) + (long long)(a[1] - b[1]) * (a[1] - b[1]);\n        return dist <= (long long)(a[2] + b[2]) * (a[2] + b[2]);\n    }\n    int fp(int i, vector<int> &par) {\n        if(par[i] == i) return i;\n        return par[i] = fp(par[i], par);\n    }\n    bool canReachCorner(int X, int Y, vector<vector<int>>& circles) {\n        int n = circles.size();\n        vector<vector<int>> circles2 = circles;\n        for(int j = 0; j < n; j++) {\n            auto &i = circles[j];\n            if(i[0] - i[2] <= 0) circles2.push_back({0, i[1], 0, 0});\n            if(i[1] - i[2] <= 0) circles2.push_back({i[0], 0, 0, 1});\n            if(i[0] + i[2] >= X) circles2.push_back({X, i[1], 0, 2});\n            if(i[1] + i[2] >= Y) circles2.push_back({i[0], Y, 0, 3});\n        }\n        int m = circles2.size();\n        vector<int> par(m);\n        int u, v;\n        for(int i = 0; i < m; i++) {\n            par[i] = i;\n        }\n        for(int i = 0; i < m; i++) {\n            for(int j = i+1; j < m; j++) {\n                if(intersect(circles2[i], circles2[j])) {\n                    u = fp(i, par);\n                    v = fp(j, par);\n                    par[u] = v;\n                }\n            }\n        }\n        // for(int i = n; i < m; i++) {\n        //     cout << circles2[i][0] << \" \" << circles2[i][1] << \" \" << circles2[i][2] << \" \" << circles2[i][3] << \"\\n\";\n        //     cout << fp(i, par) << \"\\n\";\n        // }\n        for(int i = n; i < m; i++) {\n            for(int j = i+1; j < m; j++) {\n                u = fp(i, par);\n                v = fp(j, par);\n                if(u != v) continue;\n                if(circles2[i][3] == 0 && circles2[j][3] == 1) return 0;\n                if(circles2[i][3] == 0 && circles2[j][3] == 2) return 0;\n                if(circles2[i][3] == 3 && circles2[j][3] == 1) return 0;\n                if(circles2[i][3] == 2 && circles2[j][3] == 3) return 0;\n                \n                if(circles2[i][3] == 1 && circles2[j][3] == 0) return 0;\n                if(circles2[i][3] == 2 && circles2[j][3] == 0) return 0;\n                if(circles2[i][3] == 1 && circles2[j][3] == 3) return 0;\n                if(circles2[i][3] == 3 && circles2[j][3] == 2) return 0;\n            }\n        }\n        return 1;\n    }\n};",
    "submit_ts": "1722135896",
    "subm_id": "1335717068"
}