{
    "username": "bowobo",
    "submission": "class Solution {\npublic:\n    \n    pair<int,int> bfs(int src, vector<int> adj[], int n){\n        vector<int> vis(n+1);\n        queue<pair<int,int>> q; //{node,dis};\n        q.push({src,0});\n        vis[src]=1;\n        pair<int,int> u;\n        while(!q.empty()){\n            u=q.front();\n            q.pop();\n            for(auto x: adj[u.first]){\n                if(!vis[x]){\n                    vis[x]=1;\n                    q.push({x,u.second+1});\n                }\n            }\n        }\n        return u;\n    }\n\n    \n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n        int n = edges1.size() + 1;\n        vector<int> adj[n + 1];\n        int m = edges2.size() + 1;\n        vector<int> adj1[m + 1];\n        for(auto x: edges1){\n            adj[x[0]].push_back(x[1]);\n            adj[x[1]].push_back(x[0]);\n        }\n        for(auto x: edges2){\n            adj1[x[0]].push_back(x[1]);\n            adj1[x[1]].push_back(x[0]);\n        }\n        \n        pair<int,int> end1=bfs(1, adj, n);\n        pair<int,int> end2=bfs(end1.first, adj, n);\n        int dia1 = end2.second;\n        end1=bfs(1, adj1, m);\n        end2=bfs(end1.first, adj1, m);\n        int dia2 = end2.second;\n        int ans = max(dia1, dia2);\n        // cout << dia1 << \" \" << dia2 << \"\\n\";\n        int d1 = dia1 / 2;\n        int d2 = d1;\n        if(dia1 & 1) d2++;\n        int d3 = dia2 / 2;\n        int d4 = d3;\n        if(dia2 & 1) d4++;\n        ans = max({ans, d1 + d3 + 1, d1 + d4 + 1, d2 + d3 + 1, d2 + d4 + 1});\n        return ans;\n    }\n};",
    "submit_ts": 1719717434.0
}