{
    "username": "dfomin",
    "submission": "use std::collections::HashMap;\n\nimpl Solution {\n    pub fn min_changes(nums: Vec<i32>, k: i32) -> i32 {\n        let mut map: HashMap<i32, i32> = HashMap::new();\n        for i in 0..nums.len() / 2 {\n            let abs = (nums[i] - nums[nums.len() - i - 1]).abs();\n            *map.entry(abs).or_default() += 1;\n        }\n        let mut result = i32::MAX;\n        let mut values = map.iter().map(|(&k, &v)| (k, v)).collect::<Vec<_>>();\n        values.sort_by_key(|(k, v)| -v);\n        // println!(\"{:?}\", values);\n        for (diff, v) in values {\n            if (nums.len() as i32 - v * 2) / 2 > result {\n                // println!(\"{} {}\", nums.len() as i32 - v * 2, result);\n                break;\n            }\n            let mut cur = 0;\n            for i in 0..nums.len() / 2 {\n                let j = nums.len() - 1 - i;\n                if (nums[i] - nums[j]).abs() != diff {\n                    if diff != 0 && nums[i] < diff && nums[i] + diff > k && nums[j] < diff && nums[j] + diff > k {\n                        // println!(\"{} {} {}\", nums[i], nums[j], diff);\n                        cur += 2;\n                    } else {\n                        cur += 1;\n                    }\n                }\n            }\n            result = result.min(cur);\n        }\n        result\n    }\n}",
    "submit_ts": "1721489246",
    "subm_id": "1327447471"
}