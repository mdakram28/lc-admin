{
    "username": "txingml",
    "submission": "typedef pair<int, int> pii;\n\nbool overlap(const pii& seg1, const pii& seg2) {\n    // cout << \"overlap \" << seg1.first << ' ' << seg1.second << ' ' << seg2.first << ' ' << seg2.second  << endl;\n    if (seg1.second+1 < seg2.first) return false;\n    if (seg2.second+1 < seg1.first) return false;\n    // cout << \"overlap true\" << endl;\n    return true;\n}\nvoid add(const pii& seg, set<pii>& segs) {\n    auto it = segs.lower_bound(seg);\n    if (it != segs.end() && overlap(*it, seg)) {\n        int a = min(it->first, seg.first);\n        int b = max(it->second, seg.second);\n        segs.erase(it);\n        add(make_pair(a, b), segs);\n        return;\n    }\n    if (it != segs.begin() && overlap(*prev(it), seg)) {\n        it--;\n        int a = min(it->first, seg.first);\n        int b = max(it->second, seg.second);\n        segs.erase(it);\n        add(make_pair(a, b), segs);\n        return;\n    }\n    segs.insert(seg);\n}\n\nclass Solution {\npublic:\n    int maxTotalReward(vector<int>& rewardValues) {\n        sort(rewardValues.begin(), rewardValues.end());\n        set<pii> table;\n        table.emplace(0, 0);\n        int ret = 0;\n        for (int num : rewardValues) {\n            cur.clear();\n            for (auto& seg : table) {\n                // cout << \"raw \" << seg.first << ' ' << seg.second << ' ' << num << endl;\n                if (seg.first >= num) break;\n                // cout << seg.first << ' ' << seg.second << ' ' << num << endl;\n                int a = seg.first + num;\n                int b = min(seg.second, num-1) + num;\n                ret = max(ret, b);\n                // if (a >= rewardValues.back()) break;\n                b = min(b, rewardValues.back()-1);\n                if (a <= b) cur.emplace_back(a, b);\n            }\n            for (const pii& x : cur) {\n                // cout << \"add \" << x.first << ' ' << x.second <<  endl;\n                add(x, table);\n            }\n            // for (const auto& x : table) {\n            //     cout << x.first << \"-->\" << x.second << ' ';\n            // }\n            // cout << endl;\n        }\n        return ret;\n    }\n    vector<pii> cur;\n};",
    "submit_ts": "1717903537",
    "subm_id": "1282336721"
}