{
    "username": "agrawalji",
    "submission": "import java.util.*;\n\nclass Solution {\n    public List<Boolean> getResults(int[][] queries) {\n        List<Boolean> result = new ArrayList<>();\n        TreeSet<Integer> set = new TreeSet<>();\n        Map<Integer, Integer> pointToDistMap = new HashMap<>();\n        set.add(0);\n\n        TreeMap<Integer, TreeSet<Integer>> map = new TreeMap<>();\n        for(int q[] : queries){\n\n            if(q[0] == 1){\n                Integer lower = set.floor(q[1]);\n                Integer higher = set.ceiling(q[1]);\n\n                pointToDistMap.put(q[1], q[1] - lower);\n\n                map.computeIfAbsent(q[1]-lower, dist -> new TreeSet<>()).add(q[1]);\n\n                if(higher != null){\n                    int dist = higher - q[1];\n                    int prev =pointToDistMap.get(higher);\n                    map.get(prev).remove(higher);\n                    if(map.get(prev).isEmpty()) map.remove(prev);\n                    map.computeIfAbsent(dist, d -> new TreeSet<>()).add(higher);\n                    pointToDistMap.put(higher, dist);\n                }\n                set.add(q[1]);\n                continue;\n            }\n\n            int x = q[1];\n            int sz = q[2];\n\n            Integer key = map.ceilingKey(sz);\n            if(key == null){\n                if( x >= set.last() + sz){\n                    result.add(true);\n                }else{\n                    result.add(false);\n                }\n                continue;\n            }\n\n            result.add(search(x, sz, map.tailMap(sz), set));\n\n        }\n        return result;\n    }\n\n    private boolean search(int x, int sz, SortedMap<Integer, TreeSet<Integer>> map, TreeSet<Integer> set){\n        for(TreeSet<Integer> s  : map.values()){\n            if(s.first() <= x){\n                return true;\n            }\n        }\n        \n        Integer lower = set.floor(x);\n\n        return x - lower >= sz;\n\n    }\n}",
    "submit_ts": 1716651067.0
}