{
    "username": "anand_nitp",
    "submission": "class SegmentTree {\nprivate:\n    std::vector<int> tree;\n    int n;\n\n    void build(const std::vector<int>& nums, int node, int start, int end) {\n        if (start == end) {\n            tree[node] = nums[start];\n        } else {\n            int mid = (start + end) / 2;\n            build(nums, 2 * node, start, mid);\n            build(nums, 2 * node + 1, mid + 1, end);\n            tree[node] = tree[2 * node] & tree[2 * node + 1];\n        }\n    }\n\n    int query(int node, int start, int end, int l, int r) {\n        if (r < start || end < l) {\n            return INT_MAX; // Out of range, return all 1s (bitwise AND identity)\n        }\n        if (l <= start && end <= r) {\n            return tree[node];\n        }\n        int mid = (start + end) / 2;\n        int left = query(2 * node, start, mid, l, r);\n        int right = query(2 * node + 1, mid + 1, end, l, r);\n        return left & right;\n    }\n\npublic:\n    SegmentTree(const std::vector<int>& nums) {\n        n = nums.size();\n        tree.resize(4 * n, 0);\n        build(nums, 1, 0, n - 1);\n    }\n\n    int rangeAND(int l, int r) {\n        return query(1, 0, n - 1, l, r);\n    }\n};\n\nclass Solution {\n    \n    \npublic:\n    \n    int minimumDifference(vector<int>& nums, int k) {\n        int n = nums.size();\n        SegmentTree segTree(nums);\n        int minDiff = INT_MAX;\n\n        for (int i = 0; i < n; ++i) {\n            int low = i, high = n - 1;\n            while (low <= high) {\n                int mid = low + (high - low) / 2;\n                int currentAND = segTree.rangeAND(i, mid);\n                int diff = std::abs(k - currentAND);\n                minDiff = std::min(minDiff, diff);\n                if (currentAND < k) {\n                    high = mid - 1;\n                } else {\n                    low = mid + 1;\n                }\n            }\n        }\n\n        return minDiff ;\n        \n    }\n};",
    "submit_ts": 1717299558.0
}