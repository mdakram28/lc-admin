{
    "username": "nautankifromgju",
    "submission": "class Solution {\npublic:\n      bool bfs(const vector<vector<int>> &graph, int start, int target1, int target2) {\n        int n = graph.size();\n        vector<int> vis(n, 0);\n        queue<int> q;\n        \n        q.push(start);\n        vis[start] = 1;\n        \n        while (!q.empty()) {\n            int u = q.front();\n            q.pop();\n            \n            if (u == target1 || u == target2) {\n                return true;\n            }\n            \n            for (int v : graph[u]) {\n                if (!vis[v]) {\n                    q.push(v);\n                    vis[v] = 1;\n                }\n            }\n        }\n        return false;\n    }\n\n    bool canReachCorner(int X, int Y, const vector<vector<int>>& circles2) {\n        int num_circles = circles2.size();\n        vector<pair<int, int>> circles(num_circles);\n        vector<int> radius(num_circles);\n        vector<vector<int>> graph(num_circles + 4); \n        for (int i = 0; i < num_circles; ++i) {\n            circles[i] = {circles2[i][0], circles2[i][1]};\n            radius[i] = circles2[i][2];\n        }\n        for (int i = 0; i < num_circles; ++i) {\n            if (circles[i].first - radius[i] <= 0) {\n                graph[num_circles].push_back(i); \n                graph[i].push_back(num_circles);\n            }\n            \n            if (X - circles[i].first <= radius[i]) {\n                graph[num_circles + 2].push_back(i); \n                graph[i].push_back(num_circles + 2);\n            }\n            if (circles[i].second - radius[i] <= 0) {\n                graph[num_circles + 1].push_back(i); \n                \n                graph[i].push_back(num_circles + 1);\n            }\n            if (Y - circles[i].second <= radius[i]) {\n                graph[num_circles + 3].push_back(i); \n                graph[i].push_back(num_circles + 3);\n            }\n           \n            \n            for (int j = i + 1; j < num_circles; ++j) {\n                double distance = sqrt(pow(circles[i].first - circles[j].first, 2) + pow(circles[i].second - circles[j].second, 2));\n                if (distance <= radius[i] + radius[j]) {\n                    graph[i].push_back(j);\n                    graph[j].push_back(i);\n                }\n            }\n        }\n\nbool is_blocked = bfs(graph, num_circles, num_circles + 1, num_circles + 2);\n        is_blocked = max(is_blocked, bfs(graph, num_circles + 3, num_circles + 1, num_circles + 2));\n        \n        return !is_blocked;\n    }\n};",
    "submit_ts": "1722137214",
    "subm_id": "1335757419"
}