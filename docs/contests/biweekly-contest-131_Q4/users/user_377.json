{
    "username": "agrim07",
    "submission": "#define MOD 1000000007\n#define INF 1e9\n#define endl \"\\n\"\n#define pb push_back\n#define ppb pop_back\n#define ff first\n#define ss second\n#define sz(x) ((int)(x).size())\n#define all(x) (x).begin(), (x).end()\n\nconst int N = 5e4 + 10;\n\nclass Solution {\npublic:\n    int t[4*N];\n\n    int combine(int a, int b) {\n        return max(a, b);\n    }\n\n    void build(vector<int> &a, int v, int tl, int tr) {\n        if (tl == tr) {\n            t[v] = a[tl];\n        } else {\n            int tm = (tl + tr) / 2;\n            build(a, v*2, tl, tm);\n            build(a, v*2+1, tm+1, tr);\n            t[v] = combine(t[v*2], t[v*2+1]);\n        }\n    }\n\n    int get_max(int v, int tl, int tr, int l, int r) {\n        if (l > r)\n            return -INF;\n        if (l == tl && r == tr)\n            return t[v];\n        int tm = (tl + tr) / 2;\n        return combine(get_max(v*2, tl, tm, l, min(r, tm)), \n                       get_max(v*2+1, tm+1, tr, max(l, tm+1), r));\n    }\n\n    void update(int v, int tl, int tr, int pos, int new_val) {\n        if (tl == tr) {\n            t[v] = new_val;\n        } else {\n            int tm = (tl + tr) / 2;\n            if (pos <= tm)\n                update(v*2, tl, tm, pos, new_val);\n            else\n                update(v*2+1, tm+1, tr, pos, new_val);\n            t[v] = combine(t[v*2], t[v*2+1]);\n        }\n    }\n\n    vector<bool> getResults(vector<vector<int>>& queries) {\n        int len = queries.size(), n = min(N, 3 * len + 10);\n        vector<int> numberLine(n, -INF);\n        numberLine[0] = 0;\n        set<int> obstacles{0};\n\n        build(numberLine, 1, 0, n - 1);\n\n        vector<bool> res;\n\n        for(auto &q: queries) {\n            int type = q[0];\n\n            if(type == 1) {\n                int x = q[1];\n\n                auto it = obstacles.lower_bound(x);\n                int l, r;\n                if(it != obstacles.end()) {\n                    r = *it;\n                    numberLine[r] = (r - x);\n                    update(1, 0, n - 1, r, r - x);\n                }\n\n                it--;\n                l = *it;\n                numberLine[x] = (x - l);\n                update(1, 0, n - 1, x, x - l);\n\n                obstacles.insert(x);\n            } else {\n                int x = q[1], sz = q[2];\n                int l = *--obstacles.upper_bound(x);\n\n                int maxGap = max(get_max(1, 0, n - 1, 0, l), x - l);\n\n                res.pb(sz <= maxGap);\n            }\n        }\n\n        return res;\n    }\n};",
    "submit_ts": "1716651308",
    "subm_id": "1267637247"
}