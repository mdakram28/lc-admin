{
    "username": "nafnil",
    "submission": "class Solution {\n        public List<Integer> countOfPeaks(int[] nums, int[][] queries) {\n        int n = nums.length;\n        TreeArr treeArr = new TreeArr(n+1);\n        boolean[] f = new boolean[n];\n        List<Integer> res = new ArrayList<>();\n        for (int i = 1; i < n-1; i++) {\n            f[i] = check(nums, i);\n            if (f[i]) treeArr.update(i+1, 1);\n        }\n        for (int[] query : queries) {\n            if (query[0] == 1) {\n                int l = query[1], r = query[2];\n                if (r-l < 2) {\n                    res.add(0);\n                } else {\n                    res.add(treeArr.query(r) - treeArr.query(l+1));\n                }\n            } else {\n                int idx = query[1], v = query[2];\n                nums[idx] = v;\n                if (f[idx] && !check(nums, idx)) {\n                    f[idx] = false;\n                    treeArr.update(idx+1, -1);\n                } else if (!f[idx] && check(nums, idx)) {\n                    f[idx] = true;\n                    treeArr.update(idx+1, 1);\n                }\n\n                if (idx < n-1) {\n                    if (f[idx+1] && !check(nums, idx+1)) {\n                        f[idx+1] = false;\n                        treeArr.update(idx+2, -1);\n                    } else if (!f[idx+1] && check(nums, idx+1)) {\n                        f[idx+1] = true;\n                        treeArr.update(idx+2, 1);\n                    }\n                }\n                if (idx > 0) {\n                    if (f[idx-1] && !check(nums, idx-1)) {\n                        f[idx-1] = false;\n                        treeArr.update(idx, -1);\n                    } else if (!f[idx-1] && check(nums, idx-1)) {\n                        f[idx-1] = true;\n                        treeArr.update(idx, 1);\n                    }\n                }\n            }\n        }\n        return res;\n    }\n\n    static boolean check(int[] nums, int mid) {\n        return  (mid > 0 && mid < nums.length-1 && nums[mid] > nums[mid-1] && nums[mid] > nums[mid+1]);\n    }\n\n    static private class TreeArr{\n        private int[] tree;\n        private int len;\n        public TreeArr(int[] nums){\n            this.len = nums.length;\n            this.tree = new int[this.len+1];\n            for(int i = 0;i<this.len;i++){\n                update(i+1,nums[i]);\n            }\n        }\n        public TreeArr(int n){\n            this.len = n;\n            this.tree = new int[n+1];\n        }\n\n        public void update(int i, int delta){\n            while(i<=this.len){\n                tree[i] += delta;\n                i += lowBit(i);\n            }\n        }\n        public int query(int i){\n            int res = 0;\n            while(i>0){\n                res += tree[i];\n                i -= lowBit(i);\n            }\n            return res;\n        }\n        private int lowBit(int x){\n            return x&(-x);\n        }\n    }\n}",
    "submit_ts": 1718507152.0
}