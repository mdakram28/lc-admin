{
    "username": "rahul16875",
    "submission": "class Solution {\npublic:\n    int numberOfAlternatingGroups(vector<int>& tiles, int groupSize) {\n        int numTiles = tiles.size(); \n        int totalCount = 0; \n \n        if (groupSize == 1) { \n            return numTiles; \n        } \n \n        int currentLength = 1; \n        int index = 1; \n        while (index < numTiles + groupSize - 1) { \n            int currPos = index; \n            int prevPos = index - 1; \n \n            if (currPos >= numTiles) { \n                currPos -= numTiles; \n            } \n            if (prevPos >= numTiles) { \n                prevPos -= numTiles; \n            } \n \n            if (tiles[currPos] != tiles[prevPos]) { \n                ++currentLength; \n            } else { \n                currentLength = 1; \n            } \n \n            if (currentLength >= groupSize) { \n                ++totalCount; \n            } \n \n            ++index; \n        } \n \n        return totalCount; \n    }\n};",
    "submit_ts": "1720279554",
    "subm_id": "1311755873"
}