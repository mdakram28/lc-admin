{
    "username": "nitrsupriya",
    "submission": "class Solution {\npublic:\n    \n    const int MOD=1e9+7;\n    const int mx=1000;\n    \n    \n    int minOperationsToOnes(const std::vector<int>& nums) {\n        if (nums.empty()) {\n            return 0;\n        }\n\n        int operations = 0;\n        int n = nums.size();\n\n        for (int i = 1; i < n; ++i) {\n            if (nums[i - 1] == 1 && nums[i] == 0) {\n                operations++;\n            }\n        }\n\n        \n        if (nums[0] == 0) {\n            operations++;\n        }\n\n        return operations;\n    }\n    \n    void nonee(){\n        int sum=0;\n        sum=sum^1;\n    }\n    \n    int numberOfPermutations(int n, vector<vector<int>>& r) {\n        unordered_map<int, int> m;\n        for (auto q : r) {\n            m[q[0] + 1] = q[1];\n        }\n\n        long long p[n + 1][mx + 1];\n        memset(p, 0, sizeof(p));\n\n        p[0][0] = 1;\n        int i = 1;\n        while (i <= n) {\n            int j = 0;\n            while (j <= mx) {\n                int pos = 0;\n                while (pos < i) {\n                    p[i][j] += (j - pos >= 0)? (p[i - 1][j - pos]) % MOD:0;\n                    pos++;\n                }\n                j++;\n            }\n\n            if (m.find(i) != m.end()) {\n                int j = 0;\n                while (j <= mx) {\n                     p[i][j]=(j != m[i])? 0: p[i][j];\n                    j++;\n                }\n            }\n\n            i++;\n        }\n\n        long ans = 0;\n        int j = 0;\n        while (j <= mx) {\n            ans += (p[n][j]) % MOD;\n            j++;\n        }\n\n        return ans;\n    }\n\n};",
    "submit_ts": 1719071198.0
}