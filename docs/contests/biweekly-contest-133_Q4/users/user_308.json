{
    "username": "BenCollins",
    "submission": "class Solution {\npublic:\n    int numberOfPermutations(int n, vector<vector<int>>& requirements) {        \n        sort(requirements.begin(), requirements.end(), [](auto&r1, auto& r2) {\n            return r1[0] < r2[0];\n        });\n        \n        long long res = 1;\n        int mod = 1e9 + 7;\n        \n        for (int i=requirements.size()-1; i>=0; --i) {\n            if (requirements[i][0] == 0) {\n                if (requirements[i][1] != 0) return 0;\n                continue;\n            }\n            int dist = requirements[i][0] - (i > 0 ? requirements[i-1][0] : 0);\n            int count = requirements[i][1] - (i > 0 ? requirements[i-1][1] : 0);\n            // cout << dist << \" \" << count << endl;\n            vector<vector<int>> memo(n+1, vector<int>(401, -1));\n            long long v = c(requirements[i][0], dist, count, memo) % mod;\n            res *= v;\n            res %= mod;\n        }\n        \n        return res;\n    }\n    \n    int c(int pos, int dist, int count, vector<vector<int>>& memo) {\n        // cout << \"dfs \" << pos << \" \" << dist << \" \" << count << endl;\n        if (count < 0) return 0;\n        if (dist == 1 && count > pos) return 0;\n        if (count == 0) return 1;\n        if (dist == 1) return 1;\n        if (memo[dist][count] != -1) return memo[dist][count];\n        long long res = 0;\n        int mod = 1e9 + 7;\n        for (int i=0; i<=min(count, pos); ++i) {\n            res += c(pos-1, dist-1, count-i, memo);\n            res %= mod;\n        }\n        memo[dist][count] = res;\n        return res;\n    }\n};",
    "submit_ts": 1719068557.0
}