{
    "username": "cuicuisha",
    "submission": "class Solution {\npublic:\n    int minimumDistance(vector<vector<int>>& points) {\n        int n = (int) points.size();\n\n        std::vector<std::pair<int, int>> a1(n), a2(n), a3(n), a4(n);\n        for (int i = 0; i < n; i++) {\n            a1[i] = {points[i][0] - points[i][1], i};\n            a2[i] = {points[i][0] + points[i][1], i};\n            a3[i] = {-points[i][0] + points[i][1], i};\n            a4[i] = {-points[i][0] - points[i][1], i};\n        }\n        std::sort(a1.begin(), a1.end());\n        std::sort(a2.begin(), a2.end());\n        std::sort(a3.begin(), a3.end());\n        std::sort(a4.begin(), a4.end());\n\n        int dropIdx;\n\n        auto cal = [&]() -> int {\n            int r = n - 1, l = 0;\n            if (a1[r].second == dropIdx) { r -= 1; }\n            if (a1[l].second == dropIdx) { l += 1; }\n            int res = a1[r].first - a1[l].first;\n\n            r = n - 1, l = 0;\n            if (a2[r].second == dropIdx) { r -= 1; }\n            if (a2[l].second == dropIdx) { l += 1; }\n            res = std::max(res, a2[r].first - a2[l].first);\n\n            r = n - 1, l = 0;\n            if (a3[r].second == dropIdx) { r -= 1; }\n            if (a3[l].second == dropIdx) { l += 1; }\n            res = std::max(res, a3[r].first - a3[l].first);\n\n            r = n - 1, l = 0;\n            if (a4[r].second == dropIdx) { r -= 1; }\n            if (a4[l].second == dropIdx) { l += 1; }\n            res = std::max(res, a4[r].first - a4[l].first);\n\n            return res;\n        };\n\n        int ans = INT_MAX;\n        for (int i = 0; i < n; i++) {\n            dropIdx = i;\n            ans = std::min(ans, cal());\n        }\n\n        return ans;\n    }\n};"
}