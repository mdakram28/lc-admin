{
    "username": "sgdfbahjbhbaisdufg",
    "submission": "struct SegTreeNode {\n    int l, r;\n    int sum;\n    SegTreeNode *lnode, *rnode;\n    \n    SegTreeNode(int l, int r) : l(l), r(r), sum(0), lnode(nullptr), rnode(nullptr) {\n        assert( l <= r );\n        int mid = l + (r - l) / 2;\n        if (l != r) {\n            lnode = new SegTreeNode(l, mid);\n            rnode = new SegTreeNode(mid + 1, r);\n        }\n    }\n    \n    int Query(int qleft, int qright) {\n        assert( qleft <= qright );\n        \n        if (qright < l || r < qleft) {\n            return 0;\n        }\n        \n        if (qleft <= l && r <= qright) {\n            return sum;\n        }\n        \n        assert( l < r );\n        int ret = lnode->Query(qleft, qright) + rnode->Query(qleft, qright);\n        return ret;\n    }\n    \n    void Update(int q, int delta) {\n        assert( l <= q && q <= r );\n        sum += delta;\n        if (l != r) {\n            if (q <= lnode->r) {\n                lnode->Update(q, delta);\n            } else {\n                rnode->Update(q, delta);\n            }\n        }\n    }\n    \n    void Print() {\n        if (l == r) {\n            printf(\"%d: %d\\n\", l, sum);\n        } else {\n            lnode->Print();\n            rnode->Print();\n        }\n    }\n};\n\nclass Solution {\npublic:\n    vector<int> countOfPeaks(vector<int>& nums, vector<vector<int>>& queries) {\n        int n = nums.size();\n        SegTreeNode st(0, n - 1);\n        auto ispeak = [&](int i ) {\n            if (i == 0 || i == n - 1) return false;\n            return (nums[i] > nums[i - 1] && nums[i] > nums[i + 1]);\n        };\n        for (int i = 1; i < n - 1; ++i) {\n            if (ispeak(i)) {\n                st.Update(i, 1);\n            }\n        }\n        auto update2 = [&](int i, int delta, array<int, 3>& res) {\n            for (int j = max(0, i - 1); j <= min(n - 1, i + 1); ++j) {\n                if (ispeak(j)) {\n                    res[j - i + 1] += delta;\n                    // st.Update(i, delta);\n                }\n            }\n        };\n        // st.Print();\n        vector<int> ans;\n        for (auto & q : queries) {\n            if (q[0] ==1)  {\n                int a = st.Query(q[1], q[2]);\n                if (ispeak(q[1])) --a;\n                if (ispeak(q[2]) && q[1] != q[2]) --a;\n\n                ans.push_back(a);\n            } else {\n                array<int, 3> res {};\n                int i = q[1];\n                update2(i, -1, res);\n                nums[i] = q[2];\n                update2(i, 1, res);\n                for (int j = max(0, i - 1); j <= min(n - 1, i + 1); ++j) {\n                    // printf(\"update %d for %d\\n\", j, res[j - i + 1]);\n                    if (res[j - i + 1] != 0) {\n                        st.Update(j, res[j - i + 1]);\n                    }\n                }\n                // st.Print();\n            }\n        }\n        return ans;\n        \n    }\n};",
    "submit_ts": "1718507317",
    "subm_id": "1289647791"
}