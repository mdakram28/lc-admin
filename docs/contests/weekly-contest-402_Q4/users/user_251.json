{
    "username": "agomi123",
    "submission": "class SegmentTree {\nprivate:\n    vector<int> st;\n    vector<int> nums;\n    int n;\n\n    int left(int p) { return p << 1; }\n    int right(int p) { return (p << 1) + 1; }\n\n    int build(int p, int L, int R) {\n        if (L == R) {\n            return st[p] = isPeak(L) ? 1 : 0;\n        }\n        int mid = (L + R) / 2;\n        int left_peaks = build(left(p), L, mid);\n        int right_peaks = build(right(p), mid + 1, R);\n        return st[p] = left_peaks + right_peaks;\n    }\n\n    int isPeak(int i) {\n        if (i > 0 && i < n - 1) {\n            return nums[i - 1] < nums[i] && nums[i] > nums[i + 1];\n        }\n        return 0;\n    }\n\n    int update(int p, int L, int R, int idx) {\n        if (idx < L || idx > R) return st[p];\n        if (L == R) return st[p] = isPeak(L) ? 1 : 0;\n        \n        int mid = (L + R) / 2;\n        int left_peaks = update(left(p), L, mid, idx);\n        int right_peaks = update(right(p), mid + 1, R, idx);\n        return st[p] = left_peaks + right_peaks;\n    }\n\n    int query(int p, int L, int R, int i, int j) {\n        if (i > R || j < L) return 0;\n        if (L >= i && R <= j) return st[p];\n\n        int mid = (L + R) / 2;\n        int left_peaks = query(left(p), L, mid, i, j);\n        int right_peaks = query(right(p), mid + 1, R, i, j);\n        return left_peaks + right_peaks;\n    }\n\npublic:\n    SegmentTree(const vector<int>& input) {\n        nums = input;\n        n = nums.size();\n        st.assign(4 * n, 0);\n        build(1, 0, n - 1);\n    }\n\n    void update(int idx, int value) {\n        nums[idx] = value;\n        update(1, 0, n - 1, idx);\n        if (idx > 0) update(1, 0, n - 1, idx - 1);\n        if (idx < n - 1) update(1, 0, n - 1, idx + 1);\n    }\n\n    int query(int i, int j) {\n        return query(1, 0, n - 1, i + 1, j - 1);\n    }\n};\n\nclass Solution {\npublic:\n    \n    vector<int> countOfPeaks(vector<int>& nums, vector<vector<int>>& queries) {\n      SegmentTree st(nums);\n    vector<int> results;\n\n    for (const auto& query : queries) {\n        if (query[0] == 1) {\n            int li = query[1];\n            int ri = query[2];\n            results.push_back(st.query(li, ri));\n        } else if (query[0] == 2) {\n            int index = query[1];\n            int value = query[2];\n            st.update(index, value);\n        }\n    }\n\n    return results;\n    }\n};",
    "submit_ts": 1718506342.0
}