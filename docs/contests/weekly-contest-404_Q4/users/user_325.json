{
    "username": "kaijhsu",
    "submission": "class Solution {\npublic:\n    pair<int, int> dfs(int node, int parent, const vector<vector<int>>& adj) {\n        pair<int, int> farthest = {node, 0}; // {node, distance}\n        for (int neighbor : adj[node]) {\n            if (neighbor != parent) {\n                pair<int, int> candidate = dfs(neighbor, node, adj);\n                candidate.second += 1;\n                if (candidate.second > farthest.second) {\n                    farthest = candidate;\n                }\n            }\n        }\n        return farthest;\n    }\n\n    // Function to find the diameter of a tree given its edges\n    int findDiameter(const vector<vector<int>>& edges, int numNodes) {\n        if (numNodes == 0) return 0;\n        vector<vector<int>> adj(numNodes);\n        for (const auto& edge : edges) {\n            adj[edge[0]].push_back(edge[1]);\n            adj[edge[1]].push_back(edge[0]);\n        }\n        \n        pair<int, int> farthest = dfs(0, -1, adj);\n        pair<int, int> farthestFromFarthest = dfs(farthest.first, -1, adj);\n        \n        return farthestFromFarthest.second;\n    }\n\n\n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n        int n = edges1.size() + 1;\n        int m = edges2.size() + 1;\n        int d1 = findDiameter(edges1, n);\n        int d2 = findDiameter(edges2, m);\n        int larger = max(d1, d2);\n        int smaller = min(d1, d2);\n        larger = (larger + 1) / 2;\n        smaller = (smaller + 1) / 2;\n        return max(d1, max(d2, larger + smaller + 1));\n    }\n};",
    "submit_ts": "1719718180",
    "subm_id": "1304410771"
}