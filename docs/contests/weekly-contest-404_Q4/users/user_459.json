{
    "username": "ravindranath_21",
    "submission": "class Solution {\npublic:\n    int findDiameter(vector<vector<int>>& adj, int start) {\n        int n = adj.size();\n        vector<int> dist(n, -1);\n        queue<int> q;\n        q.push(start);\n        dist[start] = 0;\n        \n        int farthestNode = start;\n        while (!q.empty()) {\n            int node = q.front();\n            q.pop();\n            for (int neighbor : adj[node]) {\n                if (dist[neighbor] == -1) {\n                    dist[neighbor] = dist[node] + 1;\n                    q.push(neighbor);\n                    if (dist[neighbor] > dist[farthestNode]) {\n                        farthestNode = neighbor;\n                    }\n                }\n            }\n        }\n        return farthestNode;\n    }\n\n    int treeDiameter(vector<vector<int>>& edges, int n) {\n        vector<vector<int>> adj(n);\n        for (auto& edge : edges) {\n            adj[edge[0]].push_back(edge[1]);\n            adj[edge[1]].push_back(edge[0]);\n        }\n        \n        int farthestNode = findDiameter(adj, 0);\n        int diameterEnd = findDiameter(adj, farthestNode);\n        \n        vector<int> dist(n, -1);\n        queue<int> q;\n        q.push(diameterEnd);\n        dist[diameterEnd] = 0;\n        \n        int diameter = 0;\n        while (!q.empty()) {\n            int node = q.front();\n            q.pop();\n            for (int neighbor : adj[node]) {\n                if (dist[neighbor] == -1) {\n                    dist[neighbor] = dist[node] + 1;\n                    q.push(neighbor);\n                    diameter = max(diameter, dist[neighbor]);\n                }\n            }\n        }\n        return diameter;\n    }\n\n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n        int n = edges1.size() + 1;\n        int m = edges2.size() + 1;\n        int d1 = treeDiameter(edges1, n);\n        int d2 = treeDiameter(edges2, m);\n        \n        return max(max(d1, d2), (d1 + 1) / 2 + (d2 + 1) / 2 + 1);\n    }\n};\n",
    "submit_ts": "1719717345",
    "subm_id": "1304389133"
}