{
    "username": "abhishek_k11",
    "submission": "class TrieNode {\npublic:\n    unordered_map<char, TrieNode*> childNodes;\n    vector<pair<int, int>> wordEndings;\n};\n\nclass Trie {\npublic:\n    TrieNode* rootNode;\n\n    Trie() {\n        rootNode = new TrieNode();\n    }\n\n    void addWord(string word, int idx, int cost) {\n        TrieNode* currentNode = rootNode;\n        for (char ch : word) {\n            if (!currentNode->childNodes.count(ch)) {\n                currentNode->childNodes[ch] = new TrieNode();\n            }\n            currentNode = currentNode->childNodes[ch];\n        }\n        currentNode->wordEndings.push_back({idx, cost});\n    }\n};\n\nclass Solution {\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int targetSize = target.size();\n        vector<int> minCost(targetSize + 1, INT_MAX);\n        minCost[0] = 0;\n\n        Trie trie;\n        for (int idx = 0; idx < words.size(); ++idx) {\n            trie.addWord(words[idx], idx, costs[idx]);\n        }\n\n        for (int startIdx = 0; startIdx < targetSize; ++startIdx) {\n            if (minCost[startIdx] == INT_MAX) {\n                continue;\n            }\n\n            TrieNode* currentNode = trie.rootNode;\n            for (int endIdx = startIdx; endIdx < targetSize; ++endIdx) {\n                if (!currentNode->childNodes.count(target[endIdx])) {\n                    break;\n                }\n                currentNode = currentNode->childNodes[target[endIdx]];\n                for (auto& wordData : currentNode->wordEndings) {\n                    int wordLength = words[wordData.first].size();\n                    if (startIdx + wordLength <= targetSize) {\n                        minCost[startIdx + wordLength] = min(minCost[startIdx + wordLength], minCost[startIdx] + wordData.second);\n                    }\n                }\n            }\n        }\n\n        return minCost[targetSize] == INT_MAX ? -1 : minCost[targetSize];\n    }\n};\n",
    "submit_ts": "1720322684",
    "subm_id": "1312356391"
}