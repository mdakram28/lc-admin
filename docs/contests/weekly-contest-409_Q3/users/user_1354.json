{
    "username": "deepli",
    "submission": "class Solution {\n    public int[] shortestDistanceAfterQueries(int n, int[][] qu) {\n        \n        int p = qu.length;\n        \n        TreeMap<Integer, Integer> m = new TreeMap<>();\n        int[] res = new int[p];\n        \n        for(int i= 0; i < p; i++){\n            int[] q=  qu[i];\n            int x= q[0];\n            int y= q[1];\n            \n            Integer a = m.floorKey(x);\n            if(a != null){\n                \n                Integer b = m.get(a);\n                if(b >= y){\n                    if(i >= 1) res[i] = res[i-1];\n                    else res[i] = n-1;\n                    continue;\n                } \n                    \n                 \n                 \n            }\n            \n            int e = 0;\n            \n            while(true){\n                \n                boolean f = false;\n                Integer c = m.ceilingKey(x);\n\n                if(c != null){\n                    Integer d = m.get(c);\n                    \n                    \n\n                    if(y >= d){\n                        m.remove(c);\n                        e += d - c - 1;\n                    }else{\n                        f = true;\n                    }\n                }else{\n                    f = true;\n                }\n                \n                if(f){\n                    break;\n                }\n            }\n            \n            m.put(x, y);\n            // System.out.println(\"m = \" + m);\n     \n            if(i >= 1) res[i] = res[i-1] - (y -x - 1) + e;\n            else res[i] = n-1 - (y - x - 1);\n\n             \n            \n        }\n        \n        return res;\n        \n \n    }\n\n}",
    "submit_ts": "1722743202",
    "subm_id": "1343786705"
}