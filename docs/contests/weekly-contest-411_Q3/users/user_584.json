{
    "username": "viltumite",
    "submission": "class Solution {\npublic:\n    string largestPalindrome(int n, int k) {\n        if (n == 1 && (k == 6 || k == 7)) return to_string(k);\n        if (n == 2 && (k == 6 || k == 7)) return to_string(k) + to_string(k);\n        string s(n, '9');\n        if (k == 2 || k == 6) {\n            s[0] = '8';\n            s[n - 1] = '8';\n\n            if (k == 6) {\n                if(n % 2)           s[n / 2] = '8';\n                else {\n                    s[n / 2] = '7', s[n / 2 - 1] = '7';\n                }\n            }\n        } \n        else if (k == 4 || k == 8) {\n            s[0] = '8', s[n - 1] = '8';\n            if(n - 2 >= 0)      s[n - 2] = '8';\n            if(k == 8 && n - 3 >= 0)      s[n - 3] = '8';\n            if(1 < n)       s[1] = '8';\n            if(k == 8 && 2 < n)         s[2] = '8';\n\n        } \n        else if (k == 5) {\n            s[0] = '5';\n            s[n - 1] = '5';\n        } \n        else if (k == 7) {\n            return largestPalindromeDivisibleBy7(n);\n        }\n\n        return s;\n    }\n    string generatePalindrome(int n) {\n    string half = string(n / 2, '9');\n    string pal = half + (n % 2 == 1 ? \"9\" : \"\") + string(half.rbegin(), half.rend());\n    return pal;\n}\n\nbool divisibleBy7(const string& s) {\n    int mod = 0;\n    for (char c : s) mod = (mod * 10 + (c - '0')) % 7;\n    return mod == 0;\n}\n\nvoid decrementPalindrome(string& pal) {\n    int len = pal.size();\n    int i = (len - 1) / 2;\n    while (i >= 0 && pal[i] == '0') {\n        pal[i] = '9';\n        pal[len - 1 - i] = '9';\n        i--;\n    }\n    if (i >= 0) {\n        pal[i]--;\n        pal[len - 1 - i] = pal[i];\n    }\n}\n\nstring largestPalindromeDivisibleBy7(int n) {\n    string pal = generatePalindrome(n);\n    while (!divisibleBy7(pal)) decrementPalindrome(pal);\n    return pal;\n}\n};\n",
    "submit_ts": "1723952195",
    "subm_id": "1359790337"
}