{
    "username": "ANSHAB45",
    "submission": "struct TrieNode {\n    vector<TrieNode*> children;\n    int cost;\n    TrieNode() : children(26, nullptr), cost(-1) {}\n};\n\nclass Solution {\npublic:\n    TrieNode* root;\n\n    Solution() {\n        root = new TrieNode();\n    }\n\n    ~Solution() {\n        clearTrie(root);\n    }\n\n    void clearTrie(TrieNode* node) {\n        for (auto child : node->children) {\n            if (child) clearTrie(child);\n        }\n        delete node;\n    }\n\n    void insertWord(const string& word, int cost) {\n        TrieNode* node = root;\n        for (char c : word) {\n            if (!node->children[c - 'a']) {\n                node->children[c - 'a'] = new TrieNode();\n            }\n            node = node->children[c - 'a'];\n        }\n        if (node->cost == -1 || node->cost > cost)\n            node->cost = cost;\n    }\n\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        for (int i = 0; i < words.size(); ++i) {\n            insertWord(words[i], costs[i]);\n        }\n\n        int n = target.size();\n        vector<int> dp(n + 1, INT_MAX);\n        dp[0] = 0;\n\n        for (int i = 0; i < n; ++i) {\n            if (dp[i] == INT_MAX) continue;\n            TrieNode* node = root;\n            for (int j = i; j < n && node; ++j) {\n                char c = target[j];\n                node = node->children[c - 'a'];\n                if (!node) break;\n\n                if (node->cost != -1) {\n                    int nextPos = j + 1;\n                    dp[nextPos] = min(dp[nextPos], dp[i] + node->cost);\n                }\n            }\n        }\n\n        return dp[n] == INT_MAX ? -1 : dp[n];\n    }\n};\n",
    "submit_ts": "1720323698",
    "subm_id": "1312381871"
}