{
    "username": "PhoenixDD",
    "submission": "struct Trie {\n    bool isLeaf=false;\n    int cost=INT_MAX,idx=-1;\n    array<Trie*,26> children;\n    Trie() {\n        children.fill(nullptr);\n    }\n};\nauto ____ =[]() { std::ios::sync_with_stdio(0); cin.tie(0); return nullptr; }();\nclass Solution {\npublic:\n    vector<int> memo;\n    Trie *Root,*root;\n    void insert(string_view s,int cost,int idx) {\n        root=Root;\n        for(const char& c:s) {\n            if(!root->children[c-'a'])\n                root->children[c-'a']=new Trie();\n            root=root->children[c-'a'];\n        }\n        root->isLeaf=true;\n        root->idx=idx;\n        root->cost=min(root->cost,cost);\n    }\n    int dp(string_view target,vector<string>& words,vector<int>& costs,int i) {\n        if(i==target.length())\n            return 0;\n        if(memo[i]!=-1)\n            return memo[i];\n        int result=INT_MAX,sz=0;\n        Trie* r=Root;\n        while(i+sz<target.size()&&r->children[target[i+sz]-'a']) {\n            r=r->children[target[i+sz]-'a'];\n            sz++;\n            if(r->isLeaf) {\n                int res=dp(target,words,costs,i+sz);\n                if(res!=INT_MAX)\n                    result=min(result,res+r->cost);\n            }\n        }\n        return memo[i]=result;\n    }\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        memo.resize(target.size(),-1);\n        Root=new Trie();\n        for(int i=0;i<words.size();i++)\n            insert(words[i],costs[i],i);\n        int result=dp(target,words,costs,0);\n        return result==INT_MAX?-1:result;\n    }\n};",
    "submit_ts": "1720323691",
    "subm_id": "1312381708"
}