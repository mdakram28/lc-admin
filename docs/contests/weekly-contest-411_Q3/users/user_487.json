{
    "username": "carterjenglish7",
    "submission": "class Solution:\n    def largestPalindrome(self, n: int, k: int) -> str:\n        # case 1: 999999999\n        # case 2: 899999998\n        # case 3: 999999999\n        # case 4: 889999988\n        # case 5: 599999995\n        # case 6: 8999999998 (8 in middle if n odd, two 7s in middle if n even)\n        # case 7: 99999999999 % 7 = ?\n        # case 8: 888999999999888\n        # case 9: 999999999\n\n        # only difficult case is 7\n\n        # what is 10^i % 7?\n        # 1, 3, 2, 6, 4, 5, repeat\n        # suppose n odd\n        # find that x % 7 = k, want to decrement the middle index\n        # (x - j*10^i) % 7 = (x % 7) - j*10^i % 7 = 0\n        # case i = 0 mod 6: \n\n        if k == 1 or k == 3 or k == 9:\n            return ''.join(['9']*n)\n        if k == 2:\n            result = ['9']*n\n            result[0] = '8'\n            result[-1] = '8'\n            return ''.join(result)\n        if k == 4:\n            result = ['9']*n\n            result[0] = '8'\n            result[-1] = '8'\n            if n > 1:\n                result[1] = '8'\n                result[-2] = '8'\n            return ''.join(result)\n        if k == 5:\n            result = ['9']*n\n            result[0] = '5'\n            result[-1] = '5'\n            return ''.join(result)\n        if k == 8:\n            result = ['9']*n\n            result[0] = '8'\n            result[-1] = '8'\n            if n > 1:\n                result[1] = '8'\n                result[-2] = '8'\n            if n > 2:\n                result[2] = '8'\n                result[-3] = '8'\n            return ''.join(result)\n        if k == 6:\n            if n == 1:\n                return '6'\n            if n == 2:\n                return '66'\n            result = ['9']*n\n            result[0] = '8'\n            result[-1] = '8'\n            if n % 2 == 1:\n                # we've gaurentted it to be even, so all we need is sum of digits mod 3 = 0\n                # make middle digit 8 so 8 + 8 + 8 = 24\n                result[n // 2] = '8'\n            else:\n                # 8 + 8 + 7 + 7 = 30\n                result[n // 2] = '7'\n                result[n // 2 - 1] = '7'\n            return ''.join(result)\n\n        # k is 7! oh no!\n        result = ['9']*n\n        tenmods = [1, 3, 2, 6, 4, 5]\n        rem = tenmods[n % 6] - 1\n        if rem == 0:\n            return ''.join(result)\n        # do the division algorithm\n        #for i in range(n):\n           # rem = (10*rem + 9) % 7\n        \n        if n % 2 == 1:\n            midIndex = n // 2\n            thecase = midIndex % 6\n            if thecase == 1:\n                val = '5'\n            if thecase == 2:\n                val = '7'\n            if thecase == 3:\n                val = '4'\n            if thecase == 4:\n                val = '6'\n            if thecase == 5:\n                val = '4'\n            if thecase == 0:\n                val = '7'\n            result[midIndex] = val\n            return ''.join(result)\n            # 1: 4\n            # 2:\n            # subtract a multiple of 10^midIndex\n        midIndex = n // 2 - 1\n        thecase = midIndex % 6\n        if thecase == 1:\n            val = '7'\n        elif thecase == 2:\n            val = '2'\n        elif thecase == 3:\n            val = '4'\n        elif thecase == 4:\n            val = '4'\n        elif thecase == 5:\n            val = '9'\n        elif thecase == 0:\n            val = '7'\n        result[midIndex] = val\n        result[midIndex + 1] = val\n        return ''.join(result)\n",
    "submit_ts": "1723952717",
    "subm_id": "1359802947"
}