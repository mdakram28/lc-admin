{
    "username": "newbie_noob",
    "submission": "class Solution {\npublic:\n    struct TrieNode {\n    unordered_map<char, TrieNode*> children;\n    vector<pair<int, int>> costs;\n};\n\nclass Trie {\npublic:\n    TrieNode* root;\n    \n    Trie() {\n        root = new TrieNode();\n    }\n\n    void insert(const string& word, int cost) {\n        TrieNode* node = root;\n        for (char c : word) {\n            if (node->children.find(c) == node->children.end()) {\n                node->children[c] = new TrieNode();\n            }\n            node = node->children[c];\n        }\n        node->costs.emplace_back(cost, word.length());\n    }\n};\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n    int n = target.size();\n    vector<long long> dp(n+1, 1e9);\n    dp[0] = 0; \n    Trie trie;\n    for (int i = 0; i < words.size(); ++i) {\n        trie.insert(words[i], costs[i]);\n    }\n    for (int i = 0; i < n; ++i) {\n        if (dp[i]>=1e9) continue;\n        TrieNode* node = trie.root;\n        for (int j = i; j < n; ++j) {\n            if (node->children.find(target[j]) == node->children.end()) break;\n            node = node->children[target[j]];\n            for (auto it:node->costs) {\n                if (i + it.second<= n){\n                    dp[i + it.second] = min(dp[i + it.second], dp[i] + it.first);\n                }\n            }\n        }\n    }\n        if(dp[n]>=1e9)return -1;\n        return (int)dp[n];\n    }\n};",
    "submit_ts": "1720322973",
    "subm_id": "1312364039"
}