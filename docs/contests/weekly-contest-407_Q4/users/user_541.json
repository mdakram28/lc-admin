{
    "username": "wddd",
    "submission": "class Solution {\n    public long minimumOperations(int[] nums, int[] target) {\n        long ops = 0;\n\n        int[] diff = new int[nums.length];\n        int[] diffAbs = new int[nums.length];\n        for (int i = 0; i < nums.length; i++) {\n            diff[i] = target[i] - nums[i];\n            diffAbs[i] = Math.abs(diff[i]);\n        }\n\n        int offset = 1;\n        while (offset < diffAbs.length) {\n            offset <<= 1;\n        }\n\n        int[][] tree = new int[offset * 2][2];\n        for (int i = 0; i < diffAbs.length; i++) {\n            tree[i + offset][0] = diffAbs[i];\n            tree[i + offset][1] = i;\n        }\n        for (int i = offset - 1; i > 0; i--) {\n            tree[i][0] = Math.min(tree[i * 2][0], tree[i * 2 + 1][0]);\n            tree[i][1] = tree[i * 2][0] < tree[i * 2 + 1][0] ? tree[i * 2][1] : tree[i * 2 + 1][1];\n        }\n\n        int left = 0;\n        int right = 0;\n\n        while (left < diff.length && right <= diff.length) {\n            if (diff[left] == 0 && left == right) {\n                left++;\n                right++;\n            } else {\n                if (right < diff.length && diff[left] > 0 && diff[right] > 0) {\n                    right++;\n                } else if (right < diff.length && diff[left] < 0 && diff[right] < 0) {\n                    right++;\n                } else {\n                    ops += minimumOperations(diff, left, right - 1, 0, tree, offset);\n                    left = right;\n                }\n            }\n        }\n\n        return ops;\n    }\n\n    private long minimumOperations(int[] diff, int left, int right, int base, int[][] tree, int offset) {\n        if (left > right) {\n            return 0;\n        }\n\n        int[] mins = query(tree, left, right, offset);\n\n        return mins[0] - base + minimumOperations(diff, left, mins[1] - 1, mins[0], tree, offset) \n                + minimumOperations(diff, mins[1] + 1, right, mins[0], tree, offset);\n    }\n\n    private int[] query(int[][] tree, int left, int right, int offset) {\n        left += offset;\n        right += offset;\n        \n        int[] result = new int[2];\n        result[0] = Integer.MAX_VALUE;\n        while (left <= right) {\n            if (left % 2 == 1) {\n                if (tree[left][0] < result[0]) {\n                    result[0] = tree[left][0];\n                    result[1] = tree[left][1];\n                }\n                left++;\n            }\n            if (right % 2 == 0) {\n                if (tree[right][0] < result[0]) {\n                    result[0] = tree[right][0];\n                    result[1] = tree[right][1];\n                }\n                right--;\n            }\n            left >>= 1;\n            right >>= 1;\n        }\n        \n        return result;\n    }\n}",
    "submit_ts": "1721531411",
    "subm_id": "1327960252"
}