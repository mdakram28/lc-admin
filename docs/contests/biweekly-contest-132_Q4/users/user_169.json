{
    "username": "devashish59",
    "submission": "#define pb push_back\n#define ff first\n#define ss second\n#define all(x) (x).begin(),(x).end()\ntypedef long long int ll;\n\nvoid update(vector<int> &tree, int node, int start, int end, int idx, int val)\n{\n    if(start == end)\n    {\n        tree[node] = max(tree[node], val);\n    }\n    else\n    {\n        int mid = (start + end) / 2;\n        if(start <= idx and idx <= mid)\n        {\n            update(tree, 2*node, start, mid, idx, val);\n        }\n        else\n        {\n            update(tree, 2*node+1, mid+1, end, idx, val);\n        }\n        tree[node] = max(tree[2*node], tree[2*node+1]);\n    }\n}\n\nint query(vector<int> &tree, int node, int start, int end, int l, int r)\n{\n    if(r < start or end < l)\n    {\n        return 0;\n    }\n    if(l <= start and end <= r)\n    {\n        return tree[node];\n    }\n    int mid = (start + end) / 2;\n    int p1 = query(tree, 2*node, start, mid, l, r);\n    int p2 = query(tree, 2*node+1, mid+1, end, l, r);\n    return max(p1, p2);\n}\n\nclass Solution {\npublic:\n    int maximumLength(vector<int>& nums, int k)\n    {\n        int n = nums.size(), i, j;\n        set<int> st;\n        for(i=0;i<n;i++) st.insert(nums[i]);\n        int c = 0;\n        map<int, int> comp;\n        for(int x: st) comp[x] = c++;\n        vector<int> a(n);\n        for(i=0;i<n;i++) a[i] = comp[nums[i]];\n        \n        vector<vector<int>> tree(k+3, vector<int> (4*c+10, 0));\n        int dp[n][k+1];\n        memset(dp, 0, sizeof(dp));\n        for(i=0;i<n;i++)\n        {\n            for(j=0;j<=0;j++) dp[i][j] = 1;\n            //cout<<a[i]<<\" \";\n        }\n        int ans = 1;\n        for(i=0;i<n;i++)\n        {\n            for(j=0;j<=k;j++)\n            {\n                //equal\n                int q1 = query(tree[j], 1, 0, c+1, a[i], a[i]) + 1;\n                \n                dp[i][j] = max(dp[i][j], q1);\n                update(tree[j], 1, 0, c+1, a[i], dp[i][j]);\n                ans = max(ans, dp[i][j]);\n                \n                //non equal\n                if(j==0) continue;\n                int q2 = query(tree[j-1], 1, 0, c+1, a[i]+1, c+1) + 1;\n                int q3 = query(tree[j-1], 1, 0, c+1, 0, a[i]-1) + 1;\n                \n                dp[i][j] = max(dp[i][j], max(q2, q3));\n                update(tree[j], 1, 0, c+1, a[i], dp[i][j]);\n                ans = max(ans, dp[i][j]);\n            }\n        }\n        return ans;\n    }\n};",
    "submit_ts": 1717860327.0
}