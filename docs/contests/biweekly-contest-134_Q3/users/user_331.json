{
    "username": "vipbaswan",
    "submission": "class Solution {\npublic:\n    \n    bool isAlternating(int curr, int prev) {\n        if(prev == -1) {\n            return true;\n        }\n        \n        if(curr == 1) {\n            return prev == 0;\n        }\n        return prev == 1;\n    }\n    \n    int numberOfAlternatingGroups(vector<int>& colors, int k) {\n        int n = colors.size();\n        \n        vector<int> a(2*n);\n        \n        for(int i=0; i<n; i++) {\n            a[i] = colors[i];\n        }\n        for(int i=n; i<2*n; i++) {\n            a[i] = colors[i-n];\n        }\n    \n        int ans = 0, i=0, j=0, prev = -1;\n        \n        while(i<n) {\n            int sz = (j-i+1);\n            \n            // window not yet of right size\n            if(sz < k) { \n                // if everything's alternating, good to go\n                if(isAlternating(a[j], prev)) {\n                    prev = a[j];\n                    j++;\n                } else {\n                    // if pattern breaks, start again from j, reset prev\n                    i=j;\n                    prev = -1;\n                }\n                continue;\n            }\n            \n            // sz == k\n            \n            // pattern follows\n            if(isAlternating(a[j], prev)) {\n                ans++;\n                prev = a[j];\n                i++, j++;\n                continue;\n            }\n            \n            // pattern breaks, need to start again\n            prev = -1;\n            i = j;\n        }\n        \n        return ans;\n    }\n};",
    "submit_ts": "1720277534",
    "subm_id": "1311668243"
}