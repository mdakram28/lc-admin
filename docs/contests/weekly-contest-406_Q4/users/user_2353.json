{
    "username": "is_Rusty",
    "submission": "class Solution {\npublic:\n    long long minimumCost(int m, int n, vector<int>& horizontalCut, vector<int>& verticalCut) {\n        priority_queue<pair<int,int>>pq;\n        \n        for (int i = 0; i < horizontalCut.size(); ++i) {\n            pq.push({horizontalCut[i], 'H'});\n        }\n        for (int j = 0; j < verticalCut.size(); ++j) {\n            pq.push({verticalCut[j], 'V'});\n        }\n        int horizontalCuts = 1, verticalCuts = 1; \n        long long totalCost = 0;\n       while (!pq.empty()) {\n            auto it = pq.top();\n            int cost=it.first;\n            char type=it.second;\n            pq.pop();\n            \n            if (type == 'H') {\n                \n                totalCost += cost * verticalCuts;\n                horizontalCuts++;\n            } else {\n                \n                totalCost += cost * horizontalCuts;\n                verticalCuts++;\n            }\n        }\n        \n        return totalCost;\n    \n    }\n};",
    "submit_ts": "1720926474",
    "subm_id": "1320287342"
}