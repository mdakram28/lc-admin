{
    "username": "wisdompeak",
    "submission": "class Solution {\npublic:\n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) \n    {\n        int V1 = edges1.size()+1;\n        vector<vector<int>>adj1(V1);\n        for (auto edge:edges1)\n        {\n            adj1[edge[0]].push_back(edge[1]);\n            adj1[edge[1]].push_back(edge[0]);\n        }        \n        auto t1 = bfs(adj1, V1, 0);         \n        auto t2 = bfs(adj1, V1, t1.first);         \n        int a = t2.second;\n        \n                \n        \n        int V2 = edges2.size()+1;\n        vector<vector<int>>adj2(V2);\n        for (auto edge:edges2)\n        {\n            adj2[edge[0]].push_back(edge[1]);\n            adj2[edge[1]].push_back(edge[0]);\n        }\n        \n        t1 = bfs(adj2, V2, 0); \n        t2 = bfs(adj2, V2, t1.first);         \n        int b = t2.second;\n        \n        return max({(a+1)/2+(b+1)/2+1, a, b});\n        \n    }\n    \n    pair<int, int> bfs(vector<vector<int>>&adj, int V, int u) \n    { \n        vector<int>dis(V, -1);\n        queue<int> q; \n        q.push(u); \n      \n        dis[u] = 0; \n        \n        while (!q.empty()) \n        { \n            int t = q.front();       \n            q.pop(); \n            \n            for (auto it = adj[t].begin(); it != adj[t].end(); it++) \n            { \n                int v = *it; \n                if (dis[v] == -1) \n                { \n                    q.push(v);   \n                    dis[v] = dis[t] + 1; \n                } \n            } \n        } \n  \n        int maxDis = 0; \n        int nodeIdx = 0; \n          \n        for (int i = 0; i < V; i++) \n        { \n            if (dis[i] > maxDis) \n            { \n                maxDis = dis[i]; \n                nodeIdx = i; \n            } \n        } \n        return make_pair(nodeIdx, maxDis); \n    } \n    \n};",
    "submit_ts": "1719717963",
    "subm_id": "1304405268"
}