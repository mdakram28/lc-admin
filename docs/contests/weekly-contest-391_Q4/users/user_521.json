{
    "username": "peplup_world",
    "submission": "from typing import List\nimport sys\n\nclass Solution:\n    def maxDist(self, A, N):\n        minsum, maxsum, mindiff, maxdiff = A[0][0] + A[0][1], A[0][0] + A[0][1], A[0][0] - A[0][1], A[0][0] - A[0][1]\n        minsumidx = maxsumidx = mindiffidx = maxdiffidx = 0\n        for i in range(1, N):\n            sum = A[i][0] + A[i][1]\n            diff = A[i][0] - A[i][1]\n            if sum < minsum:\n                minsum = sum\n                minsumidx = i\n            elif sum > maxsum:\n                maxsum = sum\n                maxsumidx = i\n            if diff < mindiff:\n                mindiff = diff\n                mindiffidx = i\n            elif diff > maxdiff:\n                maxdiff = diff\n                maxdiffidx = i\n        idxList = [minsumidx, maxsumidx, mindiffidx, maxdiffidx]\n        ans = sys.maxsize\n        for t in idxList:\n            curr = [A[i] for i in range(len(A)) if i != t]\n            ans = min(ans, self.f(curr, len(curr)))\n        return ans\n    \n    def f(self, A, N):\n        minsum, maxsum, mindiff, maxdiff = A[0][0] + A[0][1], A[0][0] + A[0][1], A[0][0] - A[0][1], A[0][0] - A[0][1]\n        for i in range(1, N):\n            sum = A[i][0] + A[i][1]\n            diff = A[i][0] - A[i][1]\n            minsum = min(minsum, sum)\n            maxsum = max(maxsum, sum)\n            mindiff = min(mindiff, diff)\n            maxdiff = max(maxdiff, diff)\n        return max(maxsum - minsum, maxdiff - mindiff)\n\n    def minimumDistance(self, points: List[List[int]]) -> int:\n        return self.maxDist(points, len(points))\n"
}