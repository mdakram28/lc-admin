{
    "username": "zhouzl",
    "submission": "class Solution {\n    public int minimumDistance(int[][] points) {\n        int[][] a = points.clone(), b = points.clone();\n        Arrays.sort(a, Comparator.comparingInt(k -> k[0] + k[1]));\n        Arrays.sort(b, Comparator.comparingInt(k -> k[1] - k[0]));\n        int n = points.length;\n        int ans = Integer.MAX_VALUE / 2;\n        for(int i = 0; i < n; ++i) {\n            int v = 0;\n            if(Arrays.equals(points[i], a[0])) {\n                v = Math.max(v, d(a[1], a[n - 1]));\n            }else if(Arrays.equals(points[i], a[n - 1])) {\n                v = Math.max(v, d(a[0], a[n - 2]));\n            }else {\n                v = Math.max(v, d(a[0], a[n - 1]));\n            }\n            if(Arrays.equals(points[i], b[0])) {\n                v = Math.max(v, d(b[1], b[n - 1]));\n            }else if(Arrays.equals(points[i], b[n - 1])) {\n                v = Math.max(v, d(b[0], b[n - 2]));\n            }else {\n                v = Math.max(v, d(b[0], b[n - 1]));\n            }\n            ans = Math.min(ans, v);\n        }\n        return ans;\n    }\n    int d(int[] x, int[] y) {\n        return Math.abs(y[0] - x[0]) + Math.abs(y[1] - x[1]);\n    }\n}\n"
}