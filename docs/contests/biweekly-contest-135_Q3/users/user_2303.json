{
    "username": "dmitry-shulaykin",
    "submission": "use std::collections::HashMap;\n\nimpl Solution {\n    pub fn count_more(diff: i32, pd: &Vec<i32>) -> i32 {\n        let mut l = 0;\n        let mut r = pd.len();\n\n        while r - l > 1 {\n            let m = (r + l) / 2;\n            let x = pd[m];\n\n            if x < diff {\n                l = m;\n            } else {\n                r = m;\n            }\n        }\n\n        while l < pd.len() && pd[l] < diff {\n            l += 1;\n        }\n\n        // println!(\"l: {l}, r: {r}\");\n        return l as i32;\n    }\n\n    pub fn min_changes(nums: Vec<i32>, k: i32) -> i32 {\n        let mut hm = HashMap::new();\n        let mut pd = vec!();\n        for i in 0..nums.len()/2 {\n            let num = nums[i];\n            let num2 = nums[nums.len() - 1 - i];\n            let diff = num.abs_diff(num2) as i32;\n\n            match hm.get_mut(&diff) {\n                Some(v) => { *v += 1; }\n                None => {\n                    hm.insert(diff, 1);\n                }\n            }\n\n            let pos_diff = (num2.max(num)).max(k - num2.min(num));\n            pd.push(pos_diff);\n\n        }\n\n        pd.sort();\n\n        let mut ans = i32::MAX;\n\n        for (diff, count) in hm {\n            let count2 = Self::count_more(diff, &pd);\n            \n            let count1 = (nums.len() / 2) as i32 - count - count2;\n            let t = count1 + count2 * 2;\n            // println!(\"diff: {diff}, count: {count}, count1: {count1}, count2: {count2}, t={t}\");\n\n            \n            ans = ans.min(t);\n        }\n\n        ans\n    }\n}",
    "submit_ts": "1721490616",
    "subm_id": "1327487870"
}