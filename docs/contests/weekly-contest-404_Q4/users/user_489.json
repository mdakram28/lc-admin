{
    "username": "brain4real",
    "submission": "class Solution {\n    class BFSResult {\n        int farthestNode;\n        int[] distances;\n        \n        BFSResult(int farthestNode, int[] distances) {\n            this.farthestNode = farthestNode;\n            this.distances = distances;\n        }\n    }\n    private BFSResult bfs(List<List<Integer>> graph, int startNode) {\n        int n = graph.size();\n        int[] distances = new int[n];\n        Arrays.fill(distances, -1);\n        distances[startNode] = 0;\n        Queue<Integer> Q = new LinkedList<>();\n        Q.add(startNode);\n        int farthestNode = startNode;\n        \n        while (!Q.isEmpty()) {\n            int node = Q.poll();\n            for (int neighbor : graph.get(node)) {\n                if (distances[neighbor] == -1) {\n                    distances[neighbor] = distances[node] + 1;\n                    Q.add(neighbor);\n                    farthestNode = neighbor;\n                }\n            }\n        }\n        return new BFSResult(farthestNode, distances);\n    }\n\n    \n    private int findDiameter(List<List<Integer>> graph) {\n        BFSResult result1 = bfs(graph, 0);\n        BFSResult result2 = bfs(graph, result1.farthestNode);\n        return Arrays.stream(result2.distances).max().getAsInt();\n    }\n    public int minimumDiameterAfterMerge(int[][] edges1, int[][] edges2) {\n        List<List<Integer>> graph1 = new ArrayList<>();\n        List<List<Integer>> graph2 = new ArrayList<>();\n        \n        for (int i = 0; i < edges1.length + 1; i++) {\n            graph1.add(new ArrayList<>());\n        }\n        for (int[] edge : edges1) {\n            graph1.get(edge[0]).add(edge[1]);\n            graph1.get(edge[1]).add(edge[0]);\n        }\n        \n        for (int i = 0; i < edges2.length + 1; i++) {\n            graph2.add(new ArrayList<>());\n        }\n        for (int[] edge : edges2) {\n            graph2.get(edge[0]).add(edge[1]);\n            graph2.get(edge[1]).add(edge[0]);\n        }\n        int D1 = findDiameter(graph1);\n        int D2 = findDiameter(graph2);\n        int ans = Math.max(D1, Math.max(D2, (D1 + 1) / 2 + 1 + (D2 + 1) / 2));\n        \n        return ans;\n    }\n}\n",
    "submit_ts": "1719719117",
    "subm_id": "1304434132"
}