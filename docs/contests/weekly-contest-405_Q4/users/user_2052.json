{
    "username": "priyanshumandloigurukul",
    "submission": "class TrieNode {\npublic:\n    unordered_map<char, TrieNode*> mp;\n    vector<pair<int, int>> ans; \n};\n\nclass Trie {\npublic:\n    TrieNode* root;\n\n    Trie() {\n        root = new TrieNode();\n    }\n\n    void insert(const string& s, int index, int cost) {\n        TrieNode* node = root;\n        for (char c : s) {\n            if (!node->mp.count(c)) {\n                node->mp[c] = new TrieNode();\n            }\n            node = node->mp[c];\n        }\n        node->ans.emplace_back(index, cost);\n    }\n};\n\nclass Solution {\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int n = target.length();\n        vector<int> dp(n + 1, INT_MAX);\n        dp[0] = 0;\n\n        Trie trie;\n        for (int i = 0; i < words.size(); ++i) {\n            trie.insert(words[i], i, costs[i]);\n        }\n\n        for (int i = 0; i < n; ++i) {\n            if (dp[i] == INT_MAX) continue;\n\n            TrieNode* node = trie.root;\n            for (int j = i; j < n; ++j) {\n                if (!node->mp.count(target[j])) break;\n                node = node->mp[target[j]];\n                for (const auto& [index, cost] : node->ans) {\n                    dp[j + 1] = min(dp[j + 1], dp[i] + cost);\n                }\n            }\n        }\n\n        return dp[n] == INT_MAX ? -1 : dp[n];\n    }\n};",
    "submit_ts": "1720320956",
    "subm_id": "1312309418"
}