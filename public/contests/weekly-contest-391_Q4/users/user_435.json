{
    "username": "andy-lc",
    "submission": "class Solution:\n    def minimumDistance(self, points: List[List[int]]) -> int:\n        # minimize max(|xi-xj|+|yi-yj|) -> max(|xi+yi-xj-yj|,|xi-yi-xj+yj|)\n        points = [(a+b,a-b) for a,b in points]\n        maxL = [None]*len(points)\n        minL = [None]*len(points)\n        maxL[0] = points[0]\n        minL[0] = points[0]\n        for i in range(1,len(points)):\n            a,b = maxL[i-1]\n            c,d = points[i]\n            maxL[i] = (a if a >= c else c, b if b >= d else d)\n            a,b = minL[i-1]\n            minL[i] = (a if a <= c else c, b if b <= d else d)\n        maxR = [None]*len(points)\n        minR = [None]*len(points)\n        maxR[-1] = points[-1]\n        minR[-1] = points[-1]\n        for i in range(len(points)-2,-1,-1):\n            a,b = maxR[i+1]\n            c,d = points[i]\n            maxR[i] = (a if a >= c else c, b if b >= d else d)\n            a,b = minR[i+1]\n            minR[i] = (a if a <= c else c, b if b <= d else d)\n        ans = None\n        for i in range(len(points)):\n            max_ = maxR[i+1][0] if i==0 else maxL[i-1][0] if i==len(points)-1 else maxL[i-1][0] if maxL[i-1][0] >= maxR[i+1][0] else maxR[i+1][0]\n            min_ = minR[i+1][0] if i==0 else minL[i-1][0] if i==len(points)-1 else minL[i-1][0] if minL[i-1][0] <= minR[i+1][0] else minR[i+1][0]\n            resa = max_-min_\n            max_ = maxR[i+1][1] if i==0 else maxL[i-1][1] if i==len(points)-1 else maxL[i-1][1] if maxL[i-1][1] >= maxR[i+1][1] else maxR[i+1][1]\n            min_ = minR[i+1][1] if i==0 else minL[i-1][1] if i==len(points)-1 else minL[i-1][1] if minL[i-1][1] <= minR[i+1][1] else minR[i+1][1]\n            resb = max_-min_\n            res = resa if resa >= resb else resb\n            ans = ans if ans is not None and ans <= res else res\n        return ans\n            "
}