{
    "username": "rupa6",
    "submission": "template <class T>\nclass SegmentTree {\npublic:\n    vector<T> st;\n    int n;\n    T(*f)(T, T);\n    SegmentTree(T(*who)(T, T)){\n        f = who;\n    }\n    void build(int sz, T *a, T(*cur)(T, T*)){\n        n = sz;\n        st.resize(n + n + 1);\n        for (int i = 0; i<n; i++) st[n + i] = (*cur)(i, a);\n        for (int i = n - 1; i>0; i--) st[i] = (*f)(st[i << 1], st[i << 1 | 1]);\n    }\n    void modify(int id, T val){\n        for (st[id += n] = val; id>1; id >>= 1) st[id >> 1] = (*f)(st[id], st[id ^ 1]);\n    }\n    T query(int l, int r, T res){\n        ++r;\n        for (l += n, r += n; l<r; l >>= 1, r >>= 1){\n            if (l & 1) res = (*f)(res, st[l++]);\n            if (r & 1) res = (*f)(res, st[--r]);\n        }\n        return res;\n    }\n    void print(){\n        for (int i = 1; i<n + n; i++) cout << st[i] << ' '; cout << endl;\n    }\n};\n\nint n;\nint a[100010];\n\nint and_(int a, int b) { return a&b; }\nint value(int id, int* a){ return a[id]; }\n\nSegmentTree<int> mi(and_);\n\nclass Solution {\npublic:\n    long long countSubarrays(vector<int>& nums, int k) {\n        vector<int> who;\n        n=nums.size();\n        for(int i=0;i<n;i++) {\n            a[i]=nums[i];\n            who.push_back(i);\n        }\n        \n        mi.build(n,a,value);\n        int all=(1<<30)-1;\n        long long ans=0;\n        for(int i=0;i<n;i++) {\n            int low = lower_bound(who.begin(), who.begin()+i+1, k, [&](int l, int h) {\n               return mi.query(l,i,all) < h;\n            })-who.begin();\n            int high = lower_bound(who.begin(), who.begin()+i+1, k+1, [&](int l, int h) {\n               return mi.query(l,i,all) < h;\n            })-who.begin();\n            // cout<<low<<' '<<high<<endl;\n            ans+=(high-low);\n        }\n        // cout<<ans<<endl;\n        return ans;\n    }\n};",
    "submit_ts": "1720278781",
    "subm_id": "1311723947"
}