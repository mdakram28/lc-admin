{
    "username": "nyp00n",
    "submission": "class Solution {\npublic:\n    class SegmentTree {\nprivate:\n    vector<int> tree;\n    int n;\n\npublic:\n    SegmentTree(int size) {\n        n = size;\n        tree.assign(2 * n, 0);\n    }\n\n    void update(int pos, int value) {\n        pos += n;\n        tree[pos] = max(tree[pos], value);\n        for (pos /= 2; pos > 0; pos /= 2) {\n            tree[pos] = max(tree[2 * pos], tree[2 * pos + 1]);\n        }\n    }\n\n    int query(int left, int right) {\n        int res = 0;\n        left += n;\n        right += n + 1;\n        while (left < right) {\n            if (left % 2 == 1) res = max(res, tree[left++]);\n            if (right % 2 == 1) res = max(res, tree[--right]);\n            left /= 2;\n            right /= 2;\n        }\n        return res;\n    }\n};\n\n    int maximumLength(vector<int>& nums, int k) {\n        int n = nums.size();\n        if (n == 0) return 0;\n\n        vector<int> sorted_nums = nums;\n        sort(sorted_nums.begin(), sorted_nums.end());\n        sorted_nums.erase(unique(sorted_nums.begin(), sorted_nums.end()), sorted_nums.end());\n\n        unordered_map<int, int> compress;\n        for (int i = 0; i < sorted_nums.size(); ++i) {\n            compress[sorted_nums[i]] = i;\n        }\n\n        vector<vector<int>> dp(k + 1, vector<int>(n, 0));\n        vector<SegmentTree> seg_trees(k + 1, SegmentTree(sorted_nums.size() + 1000));\n        int maxii = sorted_nums.size();\n        for (int j = 0; j <= k; ++j) {\n            dp[j][0] = 1;\n            seg_trees[j].update(compress[nums[0]], dp[j][0]);\n        }\n\n        int max_length = 1;\n\n        for (int i = 1; i < n; ++i) {\n            int compressed_val = compress[nums[i]];\n            for (int j = 0; j <= k; ++j) {\n                dp[j][i] = 1;\n                dp[j][i] = max(dp[j][i], seg_trees[j].query(compressed_val, compressed_val) + 1);\n                if (j > 0) {\n                    dp[j][i] = max(dp[j][i], max(seg_trees[j-1].query(0, compressed_val - 1), seg_trees[j-1].query(compressed_val + 1, maxii)) + 1);\n                }\n\n                seg_trees[j].update(compressed_val, dp[j][i]);\n\n                max_length = max(max_length, dp[j][i]);\n            }\n        }\n\n        return max_length;\n    }\n};",
    "submit_ts": 1717860717.0
}