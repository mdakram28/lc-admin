{
    "username": "Soumyadeep_Singh2004",
    "submission": "struct TrieNode {\n    unordered_map<char, TrieNode*> children;\n    vector<pair<int, int>> wordCostPairs; // {length, cost}\n};\n\nclass Solution {\npublic:\n    void f(int i,int n,vector<string>&ans,int k,string &s)\n    {\n        if(i==n)\n        {\n            ans.push_back(s);\n            return;\n        }\n        if(k){\n            string t=s+'0';\n            f(i+1,n,ans,0,t);\n        }\n        // else\n        // {\n            string t1=s+'1';\n            f(i+1,n,ans,1,t1);\n        //}\n    }\n    int numberOfSubmatrices(vector<vector<char>>&a) {\n        int n=a.size(),m=a[0].size();\n        vector<vector<int>>v1(n,vector<int>(m,0));\n        vector<vector<int>>v2(n,vector<int>(m,0));\n        int i,j;\n        for(i=0;i<n;i++)\n        {\n            for(j=0;j<m;j++)\n            {\n                int t=0;\n                if(i>0)\n                {\n                    t=v1[i-1][j];\n                }\n                if(j>0)\n                {\n                    t+=v1[i][j-1];\n                }\n                if(i>0 && j>0)\n                {\n                    t-=v1[i-1][j-1];\n                }\n                v1[i][j]=t+(a[i][j]=='X');\n            }\n        }\n        for(i=0;i<n;i++)\n        {\n            for(j=0;j<m;j++)\n            {\n                int t=0;\n                if(i>0)\n                {\n                    t=v2[i-1][j];\n                }\n                if(j>0)\n                {\n                    t+=v2[i][j-1];\n                }\n                if(i>0 && j>0)\n                {\n                    t-=v2[i-1][j-1];\n                }\n                v2[i][j]=t+(a[i][j]=='Y');\n            }\n        }\n        int ans=0;\n        for(i=0;i<n;i++)\n        {\n            for(j=0;j<m;j++)\n            {\n                if(v1[i][j]>=1)\n                {\n                    if(v1[i][j]==v2[i][j])\n                    ans++;\n                }\n            }\n        }\n        return ans;\n    }\n    string getEncryptedString(string s, int k) {\n        string s1=s;\n        int i,l=s.length();\n        for(i=0;i<l;i++)\n        {\n            int j=(i+k)%l;\n            s1[i]=s[j];\n        }\n        return s1;\n    }\n    vector<string> validStrings(int n) {\n        vector<string>ans;\n        string s=\"\";\n        f(0,n,ans,1,s);\n        return ans;\n    }\n    int minimumCost(string t, vector<string>& w, vector<int>& c) {\n        int n = t.length();\n        vector<int> v(n + 1, INT_MAX);\n        v[0] = 0;\n\n        TrieNode* root = buildTrie(w, c);\n\n        for (int i = 0; i < n; i++) {\n            if (v[i] == INT_MAX) continue;\n            TrieNode* node = root;\n            for (int j = i; j < n; j++) {\n                char ch = t[j];\n                if (node->children.find(ch) == node->children.end()) break;\n                node = node->children[ch];\n                for (auto& p : node->wordCostPairs) {\n                    int len = p.first;\n                    int cost = p.second;\n                    if (i + len <= n) {\n                        v[i + len] = min(v[i + len], v[i] + cost);\n                    }\n                }\n            }\n        }\n\n        if(v[n]==INT_MAX)\n        return -1;\n        return v[n];\n    }\n    \n// Function to calculate the square of a number\nint square() {\n    int number = 5;\n    return number * number;\n}\n// Function to calculate the cube of a number\nint cube() {\n    int number = 3;\n    return number * number * number;\n}\n\n// Function to calculate the square root of a number\ndouble squareRoot() {\n    double number = 16.0;\n    return std::sqrt(number);\n}\n\n// Function to manipulate an array (double each element)\nvoid manipulateArray() {\n    std::vector<int> array = {1, 2, 3, 4, 5};\n\n    for (int &element : array) {\n        element *= 2;\n    }\n}\n\n// Function to concatenate two strings\nstd::string concatenateStrings() {\n    std::string str1 = \"Hello, \";\n    std::string str2 = \"world!\";\n    \n    return str1 + str2;\n}\n\n// Function to find the length of a string\nsize_t stringLength() {\n    std::string myString = \"This is a sample string.\";\n    return myString.length();\n}\nvoid abc()\n{\n    int result1 = square();\n    int result2 = cube();\n    double result3 = squareRoot();\n    \n    manipulateArray();\n\n    std::string concatenatedString = concatenateStrings();\n    size_t lengthOfString = stringLength();\n}\nvoid abc1()\n{\n    int result1 = square();\n    int result2 = cube();\n    double result3 = squareRoot();\n    \n    manipulateArray();\n\n    std::string concatenatedString = concatenateStrings();\n    size_t lengthOfString = stringLength();\n}\nvoid abc2()\n{\n    int result1 = square();\n    int result2 = cube();\n    double result3 = squareRoot();\n    \n    manipulateArray();\n\n    std::string concatenatedString = concatenateStrings();\n    size_t lengthOfString = stringLength();\n}\n// Function named abc3 with no arguments and no return value\nvoid abc3() {\n    int a = 5;\n    int b = 10;\n    int result = a + b;\n    // Perform some operations without printing\n}\n\n// Another function named abc4 with no arguments and no return value\nvoid abc4() {\n    int x = 8;\n    int y = 3;\n    int result = x * y;\n    // Perform some operations without printing\n}\n\nprivate:\n    TrieNode* buildTrie(vector<string>& w, vector<int>& c) {\n        TrieNode* root = new TrieNode();\n        for (int i = 0; i < w.size(); i++) {\n            TrieNode* node = root;\n            string word = w[i];\n            int cost = c[i];\n            for (char ch : word) {\n                if (node->children.find(ch) == node->children.end()) {\n                    node->children[ch] = new TrieNode();\n                }\n                node = node->children[ch];\n            }\n            node->wordCostPairs.push_back({word.length(), cost});\n        }\n        return root;\n    }\n};",
    "submit_ts": "1720322735",
    "subm_id": "1312357761"
}