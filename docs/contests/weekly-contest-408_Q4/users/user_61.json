{
    "username": "yangxm",
    "submission": "using i64 = long long;\n\nconstexpr int MAX = 1024;\n\nstruct Circle {\n  i64 x, y, r;\n} c[MAX];\n\nstruct DSU {\n  int p[MAX];\n\n  void Reset() { memset(p, -1, sizeof(p)); }\n\n  int Find(int x) { return p[x] < 0 ? x : p[x] = Find(p[x]); }\n\n  bool Union(int a, int b) {\n    a = Find(a);\n    b = Find(b);\n    if (a == b) {\n      return false;\n    }\n    if (p[a] > p[b]) {\n      swap(a, b);\n    }\n    p[a] += p[b];\n    p[b] = a;\n    return true;\n  }\n} dsu;\n\nconstexpr i64 Square(i64 x) { return x * x; }\n\nclass Solution {\npublic:\n    bool canReachCorner(int X, int Y, vector<vector<int>>& circles) {\n      int n = circles.size(), m = 0;\n      for (int i = 0; i < n; ++i) {\n        i64 x = circles[i][0], y = circles[i][1], r = circles[i][2];\n        c[i] = {x, y, r};\n      }\n      int src = n, dst = n + 1;\n      dsu.Reset();\n      for (int i = 0; i < n; ++i) {\n        auto [x, y, r] = c[i];\n        if (x - r <= X && y - r <= 0 && y + r >= 0) {\n          dsu.Union(src, i);\n        }\n        if (x - r <= X && x + r >= X && y - r <= Y) {\n          dsu.Union(src, i);\n        }\n        if (x - r <= 0 && x + r >= 0 && y - r <= Y) {\n          dsu.Union(i, dst);\n        }\n        if (x - r <= X && y - r <= Y && y + r >= Y) {\n          dsu.Union(i, dst);\n        }\n      }\n      for (int i = 0; i < n; ++i) {\n        for (int j = i + 1; j < n; ++j) {\n          if (Square(c[i].x - c[j].x) + Square(c[i].y - c[j].y) <= Square(c[i].r + c[j].r)) {\n            dsu.Union(i, j);\n          }\n        }\n      }\n      return dsu.Find(src) != dsu.Find(dst);\n    }\n};",
    "submit_ts": "1722137195",
    "subm_id": "1335756859"
}