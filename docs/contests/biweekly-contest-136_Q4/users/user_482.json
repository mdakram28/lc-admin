{
    "username": "upbeat-hugleuks",
    "submission": "class Solution {\npublic:\n    using PII = pair<int, int>;\n    vector<int> timeTaken(vector<vector<int>>& edges) {\n        int n = edges.size();\n        vector<vector<PII>> g(n + 1);\n        vector<int> res(n + 1);\n        for(int i = 0; i < n; i ++)\n        {\n            int a = edges[i][0];\n            int b = edges[i][1];\n            g[a].push_back({b, 1 + (b % 2 == 0)});\n            g[b].push_back({a, 1 + (a % 2 == 0)});\n        }\n        //vector<vector<int>> d(n + 1);\n        multiset<int> d[n + 1];\n        function<int(int, int)> dfs = [&](int x, int fa)\n        {\n           int mx = 0;\n           for(auto [y, v] : g[x])\n           {\n               if(y == fa) continue;\n               int tmp = v + dfs(y, x);\n               mx = max(mx, tmp);\n               d[x].insert(tmp);\n           }\n           return mx;\n        };\n        dfs(0, -1);\n        \n       /* for(int i = 0; i < n + 1; i ++)\n        {\n            for(auto t : d[i])\n                cout << t << \" \";\n            cout << \"\\n\";\n        }*/\n        \n        \n        function<void(int, int)> dfs2 = [&](int x, int fa)\n        {\n            if(fa == -1)\n            {\n    \n                int c = d[x].size();\n                int v1 = 0, v2 = 0;\n                auto it = d[x].end();\n                if(c > 0) v1 = *(-- it);\n                res[x] = v1;\n            }\n            else\n            {\n               // cout << \"hh\";\n                int c = d[x].size();\n                int v1 = 0, v2 = 0;\n                auto it = d[x].end();\n                if(c > 0) v1 = *(-- it);\n                auto it2 = d[fa].end();\n                \n                if(v1 + (1 + (x % 2 == 0)) == *(-- it2))\n                {\n                    if(d[fa].size() > 1)\n                    {\n                        v2 = *(-- it2);\n                    }\n                }\n                else{\n                    v2 = *(it2);\n                }\n                \n                res[x] = max(v1, v2 + 1 + (fa % 2 == 0));\n                d[x].insert(v2 + 1 + (fa % 2 == 0));\n            }\n            for(auto [y, v] : g[x])\n                if(y != fa) dfs2(y, x);\n        };\n        dfs2(0, -1);\n        return res;\n    }\n};",
    "submit_ts": "1722700502",
    "subm_id": "552280091"
}