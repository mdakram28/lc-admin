{
    "username": "RedHeadphone",
    "submission": "class Solution:\n    def minimumDistance(self, points: List[List[int]]) -> int:\n        n = len(points)\n        summ = [0]*n \n        diff = [0]*n\n\n        for i in range(n):\n            summ[i] = (points[i][0]+points[i][1],i)\n            diff[i] = (points[i][0]-points[i][1],i)\n        \n        summ.sort()\n        diff.sort()\n\n        l_t = None\n        ans = None\n        if summ[-1][0] - summ[0][0] > diff[-1][0] - diff[0][0]:\n            l_t = (summ[-1][1],summ[0][1])\n            ans = summ[-1][0] - summ[0][0]\n        else:\n            l_t = (diff[-1][1],diff[0][1])\n            ans = diff[-1][0] - diff[0][0]\n        # print(l_t,ans)\n        for ignore in l_t:\n            tsumm = [x for x in summ if x[1] != ignore]\n            tdiff = [x for x in diff if x[1] != ignore]\n\n            t_ans = max(\n                tsumm[-1][0] - tsumm[0][0],\n                tdiff[-1][0] - tdiff[0][0]\n            )\n            ans = min(ans, t_ans)\n        \n        return ans"
}