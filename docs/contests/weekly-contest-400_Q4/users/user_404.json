{
    "username": "andy-lc",
    "submission": "import java.lang.RuntimeException\nimport kotlin.math.abs\nimport kotlin.math.max\nimport kotlin.math.min\n\nclass Segment(val L: Int, val R: Int) {\n    var left: Segment? = null\n    var righ: Segment? = null\n    var and: Int = 0b1111111111111111111111111111111\n\n    init {\n        if (L >= R) {\n            throw RuntimeException(\"L >= R: ${L}, ${R}\")\n        }\n        val M = L + (R - L) / 2\n        if (L < M) {\n            left = Segment(L, M)\n            righ = Segment(M, R)\n        }\n    }\n\n    fun set(i: Int, v: Int) {\n        and = and.and(v)\n        val M = L + (R - L) / 2\n        if (left !== null && i < M) {\n            left!!.set(i, v)\n        }\n        if (righ !== null && M <= i) {\n            righ!!.set(i, v)\n        }\n    }\n\n    fun get(l: Int, r: Int): Int {\n        if (l <= L && R <= r) {\n            return and\n        }\n        if (R <= l || L >= r) {\n            return 0b1111111111111111111111111111111\n        }\n        return left!!.get(l, r).and(righ!!.get(l, r))\n    }\n}\n\nclass Solution {\n    fun minimumDifference(nums: IntArray, k: Int): Int {\n        val seg = Segment(0, nums.size)\n        for (i in nums.indices) {\n            seg.set(i, nums[i]);\n        }\n        var ans = Int.MAX_VALUE\n        for (l in nums.indices) {\n            var L = l + 1\n            var R = nums.size\n            while (L < R) {\n                val M = L + (R - L + 1) / 2\n                if (seg.get(l, M) >= k) {\n                    L = M\n                } else {\n                    R = M - 1\n                }\n            }\n            ans = min(ans, abs(k - seg.get(l, L)))\n            ans = min(ans, abs(k - seg.get(l, min(L + 1, nums.size))))\n        }\n        return ans\n    }\n}",
    "submit_ts": 1717298941.0
}