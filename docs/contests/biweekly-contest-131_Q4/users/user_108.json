{
    "username": "leoyu0813",
    "submission": "class Solution {\npublic:\n    vector<bool> getResults(vector<vector<int>>& queries) {\n        vector<bool> res;\n        map <int, int> dp;   // dp [i] is before i max place;\n        dp.clear ();\n        dp [0] = 0;\n        auto showLen = [&]()\n        {\n            for (auto [x, len] : dp)\n                cout << x << \" : \" << len << \"\\n\";\n            cout << \"\\n\";\n        };\n        auto adddp = [&] (int x)\n        {\n            auto it = dp.lower_bound (x);\n            --it;\n           // cout << x << \" : \" << (it->first) << \" or \" << it->second << \"\\n\";\n            dp [x] = max ((x - it->first), it->second);\n            ++it;\n            auto it2 = dp.upper_bound (x);\n            while (it2 != dp.end ())\n            {\n                int len = max (it2->first - it->first, it->second);\n                if (it2->second == len)\n                    break;\n                it2->second = len;\n                ++it2;\n                ++it;\n            }\n            //showLen ();\n        };\n        auto isOK = [&] (int x, int sz)->bool\n        {\n            auto it = dp.lower_bound (x);\n            --it;\n            int max_place = max (x - it->first, it->second);\n            //cout << sz << \" vs \" << max_place << \" : \" << it->first << \" , \" << it->second <<\"\\n\";\n            return sz <= max (x - it->first, it->second);\n        };\n        for (const vector<int>& q : queries)\n        {\n            if (q[0] == 1)\n                adddp (q[1]);\n            else\n               res.push_back (isOK (q[1], q[2]));\n        }\n        return res;\n    }\n};",
    "submit_ts": 1716650073.0
}