{
    "username": "then00bprogrammer",
    "submission": "struct Node {\n    int sum;\n    \n    Node() {\n        sum = 0;\n    }\n};\n\nclass SegmentTree {\npublic:\n    vector<Node> segTree;\n    vector<int> lazy;\n\n    SegmentTree(int n) {\n        segTree.resize(4 * n + 1);\n    }\n\n    void update(int ind, int low, int high, int i, int val) {\n        if (low == high) {\n            segTree[ind].sum = val;\n            return;\n        }\n        int mid = (low + high) >> 1;\n        if (i <= mid) {\n            update(2 * ind + 1, low, mid, i, val);\n        } else {\n            update(2 * ind + 2, mid + 1, high, i, val);\n        }\n        segTree[ind].sum = segTree[2 * ind + 1].sum + segTree[2 * ind + 2].sum;\n    }\n\n\n    int query(int ind, int low, int high, int l, int r) {\n        if (low > r || high < l || low > high) return 0;\n\n        if (low >= l && high <= r) return segTree[ind].sum;\n\n        int mid = (low + high) >> 1;\n        int left = query(2 * ind + 1, low, mid, l, r);\n        int right = query(2 * ind + 2, mid + 1, high, l, r);\n        return left + right;\n    }\n};\n\nclass Solution {\npublic:\n    vector<int> countOfPeaks(vector<int>& nums, vector<vector<int>>& queries) {\n        int n = nums.size();\n        auto isPeak = [&](int i) {\n            if (i == 0 || i == n - 1) return false;\n            return (nums[i] > nums[i - 1] && nums[i] > nums[i + 1]);\n        };\n        \n        SegmentTree sgt(n);\n        for (int i = 0; i < n; i++) {\n            if (isPeak(i)) sgt.update(0, 0, n - 1, i, 1);\n            else sgt.update(0, 0, n - 1, i, 0);\n        }\n        \n        vector<int> ans;\n        for (auto& q : queries) {\n            int type = q[0];\n            if (type == 1) {\n                int l = q[1];\n                int r = q[2];\n                ans.push_back(sgt.query(0, 0, n - 1, l + 1, r - 1));\n            } else {\n                int idx = q[1];\n                int val = q[2];\n                nums[idx] = val;\n                for (int j = max(idx - 1, 0); j <= min(idx + 1, n - 1); j++) {\n                    if (isPeak(j)) sgt.update(0, 0, n - 1, j, 1);\n                    else sgt.update(0, 0, n - 1, j, 0);\n                }\n            }\n        }\n        return ans;\n    }\n};\n",
    "submit_ts": 1718507430.0
}