{
    "username": "alex391a",
    "submission": "class Solution:\n    def minimumDifference(self, nums: List[int], k: int) -> int:\n        res = nums[0]\n        n = len(nums)\n        r = 0\n        prefix = [[0] * 32 for i in range(n + 1)]\n        \n        for i in range(n):\n            for j in range(32):\n                prefix[i + 1][j] = prefix[i][j] + ((nums[i] >> j)  & 1)\n        \n        for i in range(n):\n            curr = 0\n            r = max(i, r)\n            for j in range(32):\n                if prefix[r + 1][j] - prefix[i][j] == r - i + 1:\n                    curr |= 1 << j\n            while r < n - 1 and curr >= k:\n                r += 1\n                curr = 0\n                for j in range(32):\n                    if prefix[r + 1][j] - prefix[i][j] == r - i + 1:\n                        curr |= 1 << j\n            if r > i:\n                curr2 = 0\n                for j in range(32):\n                    if prefix[r][j] - prefix[i][j] == r - i:\n                        curr2 |= 1 << j\n                if abs(curr2 - k) < abs(res - k):\n                    res = curr2\n            \n            if abs(curr - k) < abs(res - k):\n                res = curr\n        return abs(res - k)",
    "submit_ts": "1717297923",
    "subm_id": "1274760803"
}