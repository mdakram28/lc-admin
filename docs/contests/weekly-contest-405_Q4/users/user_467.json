{
    "username": "navpreetsingh951818",
    "submission": "class TrieNode{\n    boolean isWord = false;\n    HashMap<Character,TrieNode> child = new HashMap<>();\n    String word;\n    List<String> words = new ArrayList<>();\n    int cost = Integer.MAX_VALUE;\n}\n\nclass Trie{\n    public TrieNode root = new  TrieNode();\n    \n    public void addWord(String word,int cost){\n        TrieNode curr = root;\n        for(int i =0;i<word.length();i++){\n            char ch = word.charAt(i);\n            if(!curr.child.containsKey(ch)) curr.child.put(ch, new TrieNode());\n            curr = curr.child.get(ch);       \n        }\n        curr.isWord = true;\n        curr.cost = Math.min(curr.cost,cost);\n        curr.word = word;\n    }\n    \n    public List<String> getWords(String prefix){\n        List<String> res = new ArrayList<>();\n        TrieNode curr = root;\n        \n        for(int i=0;i<prefix.length();i++){\n            char ch = prefix.charAt(i);\n            if(!curr.child.containsKey(ch)) return res;\n            curr = curr.child.get(ch);\n        }\n        _getWords(curr,res);\n        return res;\n    }\n    \n    \n    private void _getWords(TrieNode node,List<String> res){\n        if(node.isWord) res.add(node.word);\n        \n        for(Map.Entry<Character,TrieNode> childs : node.child.entrySet()){\n            _getWords(childs.getValue(),res);\n        }\n    }\n    \n    public TrieNode next(TrieNode node,char ch){\n        if(node == null) return null;\n        return node.child.getOrDefault(ch,null);\n    }\n    \n}\n\nclass Solution {\n    \n    \n    Trie tr = new Trie();\n    public int minimumCost(String target, String[] words, int[] costs) {\n        \n        int m = words.length;\n        for(int i = 0;i<m;i++){\n            tr.addWord(words[i],costs[i]);\n        }\n        \n        int[] dp = new int[target.length()];\n        \n        Arrays.fill(dp,-1);\n        \n        int res =  rec(0,target,dp);\n        if(res == Integer.MAX_VALUE) return -1;\n        return res;\n    }\n    \n    \n    private int rec(int i,String target,int[] dp){\n        int n = target.length();\n        if(i == n) return 0;\n        if(dp[i] != -1) return dp[i];\n        int res = Integer.MAX_VALUE;\n\n        TrieNode curr = tr.root;\n        for(int j = i;j<n;j++){\n            TrieNode next = tr.next(curr,target.charAt(j));\n            if(next == null){\n                break;\n            }\n            if(next.isWord){\n                Integer rc = rec(j+1,target,dp);\n                if(rc != Integer.MAX_VALUE){\n                    res = Math.min(res, next.cost+ rc);\n                }\n            }\n            \n            curr = next;\n        }\n        \n        return dp[i] = res;\n        \n    }\n}",
    "submit_ts": "1720322533",
    "subm_id": "1312352482"
}