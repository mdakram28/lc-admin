{
    "username": "jenni_mom",
    "submission": "class Solution:\n    def minimumDiameterAfterMerge(self, edges1: List[List[int]], edges2: List[List[int]]) -> int:\n        def diameter(edges):\n            n=len(edges)+1\n            d=collections.defaultdict(set)\n            for u, v in edges:                \n                d[u].add(v)\n                d[v].add(u)\n            dp=[[0,0]]*n  \n            def dfs(at, pre):\n                depth=[0,0]\n                for to in d[at]-{pre}:\n                    depth+=[dfs(to, at)[-1]+1]\n                    depth=sorted(depth)[-2:]\n                dp[at]=depth\n                return depth \n            def dfs1(at, pre):\n                a=dp[at]\n                for to in d[at]-{pre}:\n                    t=dp[to]\n                    if t[-1]+1==a[-1]:\n                        t+=[a[0]+1]\n                    else:\n                        t+=[a[-1]+1]\n                    t=sorted(t)[-2:]\n                    dp[to]=t\n                    dfs1(to, at)\n                return \n            ans=dfs(0,-1)\n            dfs1(0,-1)\n            return dp\n        res1=diameter(edges1)\n        res2=diameter(edges2)\n        res=min([x[-1] for x in res1])+min([x[-1] for x in res2])+1\n        d1=max([sum(x) for x in res1])\n        res=max(res, d1)\n        d2=max([sum(x) for x in res2])\n        res=max(res, d2)\n        return res\n            \n        \n                    \n                \n        ",
    "submit_ts": "1719719864",
    "subm_id": "1304452533"
}