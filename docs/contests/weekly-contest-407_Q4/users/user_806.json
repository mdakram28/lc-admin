{
    "username": "wzy19",
    "submission": "class Solution {\npublic:\n    int n;\n    long long solve_n(vector<int>& nums, int begin, int end) {\n        // [begin, end)\n       // cout << \"solve n\" << begin <<\" \"<< end << endl;;\n        long long res = 0;\n        vector<int> s;\n        for (int i = begin; i < end; ++i) {\n            nums[i] = -nums[i];\n            if (s.empty()) {\n                s.push_back(nums[i]);\n                res += (nums[i]);\n            } else {\n                int last = s.back();\n                if (nums[i] > last) {\n                    res += (nums[i] - last);\n                    s.push_back(nums[i]);\n                } else {\n                    while (!s.empty() && nums[i] <= s.back()) {\n                        s.pop_back();\n                    }\n                    s.push_back(nums[i]);\n                }\n            }\n        }\n        return res;\n    }\n    long long solve_p(vector<int>& nums, int begin, int end) {\n        // cout << \"solve p\" << begin << \" \" << end << endl;\n        long long res = 0;\n        vector<int> s;\n        for (int i = begin; i < end; ++i) {\n            if (s.empty()) {\n                s.push_back(nums[i]);\n                res += nums[i];\n            } else {\n                int last = s.back();\n                if (nums[i] > last) {\n                    res += (nums[i] - last);\n                    s.push_back(nums[i]);\n                } else {\n                    while (!s.empty() && nums[i] <= s.back()) {\n                        s.pop_back();\n                    }\n                    s.push_back(nums[i]);\n                }\n            }\n        }\n        return res;\n    }\n    long long minimumOperations(vector<int>& nums, vector<int>& target) {\n        n = nums.size();\n        vector<int> diff(n, 0);\n        for (int i = 0; i < n; ++i) {\n            diff[i] = target[i] - nums[i];\n        }\n        long long ans = 0;\n        int p = 0;\n        int flag = 0;\n        if (diff[0] >= 0) {\n            flag = 1;\n        } else {\n            flag = -1;\n        }\n        for (int i = 1; i < diff.size(); ++i) {\n            if (diff[i] >= 0) {\n                if (flag > 0) {\n                    continue;\n                } else {\n                    ans += solve_n(diff,p, i);\n                    p = i;\n                    flag = 1;\n                }\n            } else {\n                if (flag > 0) {\n                    ans += solve_p(diff, p, i);\n                    p = i;\n                    flag = -1;\n                } else {\n                    continue;\n                }\n            }\n        }\n        if (flag > 0) {\n            ans += solve_p(diff, p, n);\n        } else {\n            ans += solve_n(diff, p, n);\n        }\n        return ans;\n    }\n};",
    "submit_ts": "1721531587",
    "subm_id": "548387214"
}