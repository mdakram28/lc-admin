{
    "username": "raararaara",
    "submission": "using lint = long long;\nusing ii = pair<int, int>;\nusing il = pair<int, lint>;\nusing li = pair<lint, int>;\nusing ll = pair<lint, lint>;\n\nconst int mxn = 1000100, mxp = 1000001;\nconst int MOD = 998244353, inf = -1e9 - 7, INF = 1e9 + 1;\nconst lint lnf = -4e18, LNF = 5e18;\nconst double eps = 1e-10;\nconst int sqrtN = 200;\n\n#define sz(x) int(size(x))\n#define all(x) (x).begin(),(x).end()\n#define compress(x) sort(all(x)), (x).erase(unique(all(x)), (x).end())\n#define lb(x, v) (lower_bound(all(x), v) - (x).begin())\n#define ub(x, v) (upper_bound(all(x), v) - (x).begin())\n#define getName(var)  #var\nvector<lint> xl, yl;\n\n#define Yes \"Yes\\n\"\n#define No \"No\\n\"\n\nconst int dr[] = {-1, 0, 1, 0};\nconst int dc[] = {0, -1, 0, 1};\n\ninline int inRange(int r, int c, int R, int C) {\n    return 0 <= r && r < R && 0 <= c && c < C;\n}\n\nlint N, M, Q, R, C, H, K, T;\n\nvoid init() {\n\n}\n\nconst lint bound = 1e9+2;\nclass Solution {\npublic:\n    void addWays(lint n, int j, bool flg, unordered_map<lint, unordered_map<int, unordered_map<bool, int>>>& d, queue<tuple<lint, int, bool>>& q) {\n        if (d[n][j].find(flg) == d[n][j].end()) {\n            d[n][j][flg] = 0;\n            q.push(make_tuple(n, j, flg));\n        }\n    }\n\n    int waysToReachStair(int k) {\n        unordered_map<lint, unordered_map<int, unordered_map<bool, int>>> d;\n        d[1][0][false] = 1;\n\n        queue<tuple<lint, int, bool>> q;\n        q.emplace(1,0,false);\n\n        while (!q.empty()) {\n            auto [cur, cj, flg] = q.front();\n            q.pop();\n\n            int cd = d[cur][cj][flg];\n\n            lint nxt = cur + (1 << cj);\n            int nj = cj + 1;\n            if (nxt <= bound) {\n                addWays(nxt, nj, false, d, q);\n                d[nxt][nj][false] += cd;\n            }\n\n            if (cur >= 1 && !flg) {\n                addWays(cur-1, cj, true, d, q);\n                d[cur - 1][cj][true] += cd;\n            }\n        }\n\n        int ret = 0;\n        if (d.find(k) != d.end()) {\n            for(auto &[k1,v1]: d[k]) {\n                for(auto &[k2,v2]: v1) {\n                    ret += v2;\n                }\n            }\n        }\n\n        return ret;\n    }\n};",
    "submit_ts": "1716088460",
    "subm_id": "1261814607"
}