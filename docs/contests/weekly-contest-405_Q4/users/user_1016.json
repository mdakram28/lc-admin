{
    "username": "mittaludit768",
    "submission": "struct Node {\n    Node* links[26];\n    bool flag = false;\n    vector<pair<int,int> > end;\n    bool containsKey(char ch) {\n        return links[ch - 'a'] != NULL;\n    }\n    void put(char ch, Node* node) {\n        links[ch - 'a'] = node;\n    }\n    Node* get(char ch) {\n        return links[ch - 'a'];\n    }\n    void setEnd() {\n        flag = true;\n    }\n    bool isEnd() {\n        return flag;\n    }\n};\nclass Trie {\nprivate:\n    \n\npublic:\n    Node* root;\n    Trie() {\n        root = new Node();\n    }\n    void insert(string word,int idx,int cst) {\n        Node* node = root;\n        for (int i = 0; i < word.length(); i++) {\n            if (!node->containsKey(word[i])) {\n                node->put(word[i], new Node());\n            }\n            node = node->get(word[i]);\n        }\n        node->end.push_back({idx,cst});\n        node->setEnd();\n    }\n\n};\nclass Solution {\nprivate:\n    int dfs(int idx,string& target,Node* node,vector<int> &dp) {\n        if (idx>=target.size()) {\n            return 0;\n        }\n        if (dp[idx] != -1) {\n            return dp[idx];\n        }\n\n        int mn = INT_MAX;\n        Node* n = node;\n        for (int i =idx; i < target.size(); i++) {\n            char ch = target[i];\n            if (!n->containsKey(ch)) break;\n            n = n->get(ch);\n            if (n->isEnd()) {\n                for (auto j : n->end) {\n                    int l = target.size() - i - 1;\n                     int wc = j.second;\n                    int nc = dfs(i + 1, target,node,dp);\n                    if (nc != -1) {\n                        mn = min(mn, wc + nc);\n                    }\n                }\n            }\n        }\n        if(mn==INT_MAX)\n            return dp[idx]=-1;\n        return dp[idx]=mn;\n    }\n\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        Trie trie;\n        vector<int> dp(target.size()+1,-1);\n        for (int i = 0; i < words.size(); ++i) {\n            trie.insert(words[i], i, costs[i]);\n        }\n        return dfs(0, target,trie.root,dp);\n    }\n};",
    "submit_ts": "1720323273",
    "subm_id": "1312371571"
}