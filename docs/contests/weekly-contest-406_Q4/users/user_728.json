{
    "username": "sudarshandate21",
    "submission": "class Solution {\npublic:\n    long long minimumCost(int m, int n, vector<int>& horizontalCut, vector<int>& verticalCut) {\n        sort(horizontalCut.begin(), horizontalCut.end(), greater<int>());\n        sort(verticalCut.begin(), verticalCut.end(), greater<int>());\n\n        int hCuts = 1; // Number of horizontal pieces\n        int vCuts = 1; // Number of vertical pieces\n        long long totalCost = 0;\n\n        // Merge the two sorted arrays\n        int i = 0, j = 0;\n        while (i < horizontalCut.size() && j < verticalCut.size()) {\n            if (horizontalCut[i] >= verticalCut[j]) {\n                totalCost += (long long)horizontalCut[i] * vCuts;\n                hCuts++;\n                i++;\n            } else {\n                totalCost += (long long)verticalCut[j] * hCuts;\n                vCuts++;\n                j++;\n            }\n        }\n\n        // Process any remaining horizontal cuts\n        while (i < horizontalCut.size()) {\n            totalCost += (long long)horizontalCut[i] * vCuts;\n            i++;\n        }\n\n        // Process any remaining vertical cuts\n        while (j < verticalCut.size()) {\n            totalCost += (long long)verticalCut[j] * hCuts;\n            j++;\n        }\n\n        return totalCost;\n\n    }\n};",
    "submit_ts": "1720925193",
    "subm_id": "1320246225"
}