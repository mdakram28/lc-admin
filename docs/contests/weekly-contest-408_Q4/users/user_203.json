{
    "username": "scotchtape",
    "submission": "struct DSU {\n\tvector<int> p, sz;\n\tvoid init(int n){ p.resize(n); sz.assign(n, 1); iota(p.begin(), p.end(), 0); }\n\tint find_set(int v){ return v==p[v]?v:p[v]=find_set(p[v]); }\n\tbool union_sets(int a, int b){\n\t\tif ((a=find_set(a))==(b=find_set(b))) return false;\n\t\tif (sz[a] < sz[b]) swap(a, b);\n\t\tp[b]=a, sz[a]+=sz[b], sz[b]=0;\n\t\treturn true;\n\t}\n};\n\nclass Solution {\npublic:\n\n    bool canReachCorner(int X, int Y, vector<vector<int>>& C) {\n        using ll = long long;\n        int n = C.size();\n\n        DSU dsu; dsu.init(n+4);\n        int N = n+0, S = n+1, E = n+2, W = n+3;\n\n        for (int i = 0; i < n; ++i) {\n            auto &c1 = C[i];\n            ll x1 = c1[0], y1 = c1[1], r1 = c1[2];\n            if (y1+r1 >= Y) dsu.union_sets(i, N);\n            if (y1-r1 <= 0) dsu.union_sets(i, S);\n            if (x1+r1 >= X) dsu.union_sets(i, E);\n            if (x1-r1 <= 0) dsu.union_sets(i, W);\n\n            for (int j = i+1; j < n; ++j) {\n                auto &c2 = C[j];\n                \n                ll x2 = c2[0], y2 = c2[1], r2 = c2[2];\n\n                \n\n                ll D = abs(x1-x2)*abs(x1-x2) + abs(y1-y2)*abs(y1-y2);\n                ll REACH = (r1+r2)*(r1+r2);\n                if (D <= REACH) dsu.union_sets(i, j);\n            }\n        }\n\n        if (dsu.find_set(N) == dsu.find_set(S)) return false;\n        if (dsu.find_set(N) == dsu.find_set(E)) return false;\n        if (dsu.find_set(S) == dsu.find_set(W)) return false;\n        if (dsu.find_set(E) == dsu.find_set(W)) return false;\n        return true;\n    }\n};",
    "submit_ts": "1722135446",
    "subm_id": "1335701993"
}