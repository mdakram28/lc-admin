{
    "username": "ads169573",
    "submission": "class Solution {\npublic:\n    struct Edge {\n        int from;\n        int to;\n        Edge(int from, int to) : from(from), to(to) {}\n        bool operator< (const Edge &e) const {\n            if(from!=e.from) return from<e.from;\n            else return to >= e.to;\n        }\n    };\n    vector<int> shortestDistanceAfterQueries(int n, vector<vector<int>>& queries) {\n        map<int,int> mp;\n        vector<int> ret(queries.size());\n        set<pair<int,int>>s;\n        int ans=n-1;\n        for(int i=0;i<queries.size();++i){\n            int t=queries[i][1]-queries[i][0]-1,tmp=0;\n            if(t>mp[queries[i][0]]){\n                auto low = s.lower_bound({queries[i][0],0}); \n                if(low!=s.begin()){\n                    if(prev(low)->second>queries[i][0]){\n                        ret[i]=ans;\n                        continue;\n                    }\n                }\n                ans-=t;\n                mp[queries[i][0]]=t;\n                queue<pair<int,int>> tm;\n                for(;low!=s.end();++low){\n                    if(low->first>=queries[i][1]){\n                        break;              \n                    }\n                    tm.push({low->first,low->second});\n                    //tmp+=low->second-low->first-1;\n                    ans+=low->second-low->first-1;\n                }\n                while(!tm.empty()) {\n                    s.erase(tm.front());\n                    tm.pop();\n                }\n                s.insert({queries[i][0],queries[i][1]});\n            }\n            ret[i]=ans;\n        }\n        return ret;\n    }\n};",
    "submit_ts": "1722742850",
    "subm_id": "1343778543"
}