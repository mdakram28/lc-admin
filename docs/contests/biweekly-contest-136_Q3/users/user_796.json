{
    "username": "MJ_409",
    "submission": "class Solution {\npublic:\n    set<pair<int, int>> palidromicPair(int i, int j, int n, int m)\n    {\n        set<pair<int, int>> st;\n        st.insert({i,j});\n        st.insert({n-1-i,j});\n        st.insert({n-1-i,m-1-j});\n        st.insert({i,m-1-j});\n        return st;\n    }\n    int minFlips(vector<vector<int>>& grid) \n    {\n        int n = grid.size();\n        int m = grid[0].size();  \n        int ans = 0;\n        for (int i = 0; i < n / 2; i++)\n        {\n            for (int j = 0; j < m / 2; j++)\n            {\n                int one = 0;\n                int zero = 0;\n                for (auto p : palidromicPair(i, j, n, m))\n                {\n                    if (grid[p.first][p.second]) one++;\n                    else zero++;\n                }\n                ans += min(4 - one, 4 - zero);\n            }\n        }\n        if (n % 2 && m % 2)\n        {\n            if (grid[n / 2][m / 2]) ans++;\n        }\n        int op = 0;\n        int one = 0;\n        if (n % 2)\n        {\n            for (int j = 0; j < m / 2; j++)\n            {\n                if (grid[n / 2][j] != grid[n / 2][m - 1 - j]) op++;\n                else if (grid[n / 2][j]) one += 2;\n            }\n        }\n        if (m % 2)\n        {\n            for (int i = 0; i < n / 2; i++)\n            {\n                if (grid[i][m / 2] != grid[n - 1 - i][m / 2]) op++;\n                else if (grid[i][m / 2]) one += 2;\n            }\n        }\n        if (one % 4 == 2 && op == 0) ans += 2;\n        else ans += op;\n        return ans;\n    }\n};",
    "submit_ts": "1722698124",
    "subm_id": "1343170458"
}