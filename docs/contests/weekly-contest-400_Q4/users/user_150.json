{
    "username": "viraj_vrj",
    "submission": "class SegmentTree {\nprivate:\n    int n;\n    vector<int> tree;\n\n    void build(const vector<int>& data) {\n        // Initialize leaf nodes\n        for (int i = 0; i < n; ++i) {\n            tree[n + i] = data[i];\n        }\n        // Build the internal nodes\n        for (int i = n - 1; i > 0; --i) {\n            tree[i] = tree[2 * i] & tree[2 * i + 1];\n        }\n    }\n\npublic:\n    SegmentTree(const vector<int>& data) {\n        n = data.size();\n        tree.resize(2 * n);\n        build(data);\n    }\n\n    // void update(int index, int value) {\n    //     // Update the value at the specified index\n    //     int pos = n + index;\n    //     tree[pos] = value;\n    //     while (pos > 1) {\n    //         pos /= 2;\n    //         tree[pos] = tree[2 * pos] & tree[2 * pos + 1];\n    //     }\n    // }\n\n    int range_and(int left, int right) {\n        // Compute AND in the range [left, right)\n        left += n;\n        right += n;\n        int result = (1ll << 31) - 1; // Assuming 32-bit integers, start with all bits set\n\n        while (left < right) {\n            if (left % 2) {\n                result &= tree[left++];\n            }\n            if (right % 2) {\n                result &= tree[--right];\n            }\n            left /= 2;\n            right /= 2;\n        }\n\n        return result;\n    }\n};\n\n\nclass Solution {\npublic:\n    int minimumDifference(vector<int>& nums, int k) {\n        int n=nums.size();\n        SegmentTree seg_tree(nums);\n        int mind=INT_MAX;\n        for(int i=0;i<n;i++){\n            int lo=i, hi=n-1;\n            while(lo<=hi){\n                int mid=(lo+hi)/2;\n                int r=seg_tree.range_and(i,mid+1);\n                mind=min(mind,abs(k-r));\n                if(r>k) lo=mid+1;\n                else hi=mid-1;\n            }\n        }\n        return mind;\n    }\n};",
    "submit_ts": 1717297849.0
}