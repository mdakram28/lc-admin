{
    "username": "awang11",
    "submission": "typedef long long ll;\n\n// STRONGEST 1-D SEGMENT TREE\n\nll P2[31] = {1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 131072, 262144, 524288, 1048576, 2097152, 4194304, 8388608, 16777216, 33554432, 67108864, 134217728, 268435456, 536870912, 1073741824};\n\ntemplate <typename T>\nstruct ST { // implicit 1D segment tree\n    T val, add, mult;\n    ST *L, *R;\n    int lv;\n\n    ST(int lvv = 0, T vall = 0, ST* le = nullptr, ST* ri = nullptr) : lv(lvv),val(vall),L(le),R(ri),add(0),mult(1) {}\n\n    void push() {\n        if (lv == 0) return;\n        if (!(add == 0 && mult == 1)) {\n            if (L == nullptr) L = new ST<T>(lv-1);\n            if (R == nullptr) R = new ST<T>(lv-1);\n            L->val*=mult; L->val+=add*P2[lv-1];\n            R->val*=mult; R->val+=add*P2[lv-1];\n            L->mult*=mult;\n            L->add*=mult; L->add+=add;\n            R->mult*=mult;\n            R->add*=mult; R->add+=add;\n            add=0; mult=1;\n        }\n    }\n\n    // Apply f(x) = a + mx to all values in range [l,r]\n    void update(ll tl, ll tr, ll l, ll r, T a, T m) {\n        if (l > r) return;\n        if (l == tl && r == tr) {\n            val = a * (tr - tl + 1) + val * m;\n            mult *= m;\n            add *= m; add += a;\n        }\n        else {\n            if (L == nullptr) L = new ST<T>(lv-1);\n            if (R == nullptr) R = new ST<T>(lv-1);\n            push();\n            ll tm = (tl + tr) / 2;\n            L->update(tl, tm, l, min(r, tm), a, m);\n            R->update(tm + 1, tr, max(l, tm + 1), r, a, m);\n            val = L->val + R->val;\n        }\n    }\n    T query(ll tl, ll tr, ll l, ll r) {\n        if (l > r) return 0;\n        push();\n        if (l <= tl && r >= tr) return val;\n        ll tm = (tl + tr) / 2;\n        if (L == nullptr) L = new ST<T>(lv-1);\n        if (R == nullptr) R = new ST<T>(lv-1);\n        return L->query(tl, tm, l, min(r, tm))\n                +R->query(tm + 1, tr, max(l, tm + 1), r);\n    }\n    void update(ll l, ll r, T a, T m) { update(0, P2[lv]-1, l, r, a, m); }\n    ll query(ll l, ll r) { return query(0, P2[lv]-1, l, r); }\n\n    void display(int pos = 1) {\n        cout << pos << \": \" << val << \" | \" << add << \" + \" << mult << \"x\" << endl;\n        if (L!=nullptr) L->display(2*pos);\n        if (R!=nullptr) R->display(2*pos+1);\n    }\n};\n\n\nclass Solution {\npublic:\n    vector<long long> countKConstraintSubstrings(string s, int k, vector<vector<int>>& queries) {\n        vector<int> oc_0s;\n        vector<int> oc_1s;\n        ST<ll> tree = ST<ll>(17);\n        int N = s.size();\n        for (int i = 0; i < N; i++) {\n            if (s[i] == '0') oc_0s.push_back(i);\n            if (s[i] == '1') oc_1s.push_back(i);\n        }\n        for (int i = 0; i <= k; i++) {\n            oc_0s.push_back(N);\n            oc_1s.push_back(N);\n        }\n        vector<ll> danger;\n        auto cur_0 = oc_0s.begin() + k;\n        auto cur_1 = oc_1s.begin() + k;\n        for (int i = 0; i < N; i++) {\n            danger.push_back(max(*cur_0, *cur_1));\n            if (s[i] == '0') ++cur_0;\n            if (s[i] == '1') ++cur_1;\n        }\n        danger.push_back(N);\n        vector<pair<pair<int,int>,int>> Q;\n        int i = 0;\n        for (vector<int> qry : queries) {\n            Q.push_back({{qry[1], qry[0]}, i++});\n        }\n        sort(Q.begin(), Q.end());\n        vector<ll> res(Q.size());\n        int qry_idx = 0;\n        int danger_idx = 0;\n        for (int i = 0; i < N; i++) {\n            while (danger[danger_idx] <= i) ++danger_idx;\n            tree.update(1, danger_idx, 1, 1);\n            while (qry_idx < Q.size() && Q[qry_idx].first.first == i) {\n                int R = Q[qry_idx].first.first;\n                int L = Q[qry_idx].first.second;\n                ll len = R - L + 1;\n                ll def = len * (len + 1) / 2;\n                int res_idx = Q[qry_idx].second;\n                res[res_idx] = def - tree.query(L+1, R+1);\n                ++qry_idx;\n            }\n        }\n        return res;\n    }\n};",
    "submit_ts": "1723950793",
    "subm_id": "1359755175"
}