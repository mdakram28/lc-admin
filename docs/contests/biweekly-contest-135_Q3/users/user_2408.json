{
    "username": "ritanshu4k",
    "submission": "import java.util.*;\n\nclass Solution {\n    public int minChanges(int[] nums, int k) {\n        Map<Integer, List<Integer>> map = new HashMap<>();\n        List<Integer> valuesList = new ArrayList<>();\n\n        for (int i = 0; i < nums.length / 2; ++i) {\n            int a = nums[i];\n            int b = nums[nums.length - i - 1];\n            int diff = Math.abs(a - b);\n\n            int X = Math.max(Math.max(a, b), Math.max(k - a, k - b));\n\n            map.computeIfAbsent(diff, key -> new ArrayList<>()).add(X);\n            valuesList.add(X);\n        }\n\n        int ans = nums.length;  \n        Collections.sort(valuesList);\n\n        for (Map.Entry<Integer, List<Integer>> entry : map.entrySet()) {\n            int diff = entry.getKey();\n            List<Integer> values = entry.getValue();\n            int T = lowerBound(valuesList, diff);\n            T = T * 2 + (nums.length / 2 - T);\n\n            for (int X : values) {\n                if (X < diff) {\n                    T -= 2;\n                } else {\n                    T -= 1;\n                }\n            }\n\n            ans = Math.min(ans, T);\n        }\n\n        return ans;\n    }\n\n    private int lowerBound(List<Integer> list, int target) {\n        int left = 0, right = list.size();\n        while (left < right) {\n            int mid = (left + right) / 2;\n            if (list.get(mid) < target) {\n                left = mid + 1;\n            } else {\n                right = mid;\n            }\n        }\n        return left;\n    }\n}\n",
    "submit_ts": "1721490116",
    "subm_id": "1327473499"
}