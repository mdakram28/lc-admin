{
    "username": "anjali_verma067",
    "submission": "class Solution {\n    int mod=(int)(1e9+7);\n    int inversions=500;\npublic:\n    int numberOfPermutations(int n, vector<vector<int>>& requirements) {\n        vector<int>hashing(90);\n        for(int i=0;i<90;i++){\n            hashing[i]=i*i;\n        }\n                unordered_map<int, unordered_set<int>>mpp;\n        for (auto it : requirements) {\n            mpp[it[0] + 1].insert(it[1]);\n        }\n        vector<vector<long long>>permutations(n + 1, vector<long long>(inversions + 1, 0));\n        permutations[0][0] = 1;\n        for (int ind= 1;ind<= n;ind++) {\n            for (int inv = 0; inv <= inversions; inv++) {\n                for (int newPos = 0; newPos < ind; newPos++) {\n                    int prevInv = inv - newPos;\n                    if (prevInv >= 0) {\n                        permutations[ind][inv] = (permutations[ind][inv] + permutations[ind- 1][prevInv]) % mod;\n                    }\n                }\n            }\n\n            if (mpp.find(ind) !=mpp.end()) {\n                for (int inv = 0; inv <=inversions; inv++) {\n                    if (mpp[ind].find(inv) == mpp[ind].end()) {\n                        permutations[ind][inv] = 0;\n                    }\n                }\n            }\n        }\n\n        long long result = 0;\n        for (long long count : permutations[n]) {\n            result = (result + count) % mod;\n        }\n\n        return (int) result;\n\n    }\n};",
    "submit_ts": 1719070780.0
}