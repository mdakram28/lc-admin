{
    "username": "dnialh",
    "submission": "const long long MOD = 1000000009LL;\nconst int MAXN = 100000;\n\nstd::vector<long long> pb1(1, 1);\nstd::vector<long long> pb2(1, 1);\nlong long b1 = 0;\nlong long b2 = 0;\n\nvoid initialize_pbs(int x) {\n    if (b1 == 0 && b2 == 0){\n        mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());\n\n        b1 = (1000000 + rng()) % MOD;\n        b2 = b1 + 1;\n    }\n    \n    for (int i = pb1.size(); i <= x; ++i) {\n        pb1.push_back((b1 * pb1[i - 1]) % MOD);\n        pb2.push_back((b2 * pb2[i - 1]) % MOD);\n    }\n}\n\nstd::vector<long long> hashify(const std::string& s, long long base) {\n    std::vector<long long> out(s.size() + 1, 0);\n    for (size_t i = 0; i < s.size(); ++i) {\n        long long nex = base * out[i];\n        out[i + 1] = (nex + s[i]) % MOD;\n    }\n    return out;\n}\n\nlong long hashcomp2(const std::vector<long long>& h1, const std::vector<long long>& h2, int i, int j) {\n    long long out = (h1[j] - pb1[j - i] * h1[i]) % MOD;\n    long long out2 = (h2[j] - pb2[j - i] * h2[i]) % MOD;\n\n    out = (out + MOD) % MOD;\n    out2 = (out2 + MOD) % MOD;\n\n    return (out << 32) | out2;\n}\n\nclass Solution {\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        \n        int big = target.size();\n        for (const auto& w : words) {\n            big = max(big, (int) w.size());\n        }\n        \n        initialize_pbs(big + 100);\n        \n        std::unordered_map<long long, int> s;\n        std::vector<int> az;\n        for (const auto& w : words) {\n            az.push_back(w.size());\n        }\n        std::sort(az.begin(), az.end());\n        az.erase(std::unique(az.begin(), az.end()), az.end());\n        \n        assert (az.size() < 500);\n\n        int n = target.size();\n        for (size_t i = 0; i < words.size(); ++i) {\n            int z = words[i].size();\n            auto w1 = hashify(words[i], b1);\n            auto w2 = hashify(words[i], b2);\n\n            long long u = hashcomp2(w1, w2, 0, z);\n            \n            //cout << u << \" \" << costs[i] << '\\n';\n            if (s.find(u) != s.end()) {\n                s[u] = std::min(s[u], costs[i]);\n            } else {\n                s[u] = costs[i];\n            }\n        }\n        \n        int MAXCOST = 1e9;\n\n        std::vector<int> dp(n + 1, MAXCOST);\n        dp[0] = 0;\n\n        auto t1 = hashify(target, b1);\n        auto t2 = hashify(target, b2);\n\n        for (int i = 1; i <= n; ++i) {\n            for (int d : az) {\n                if (d > i) continue;\n                long long u = hashcomp2(t1, t2, i - d, i);\n                if (s.find(u) != s.end()) {\n                    dp[i] = std::min(dp[i], dp[i - d] + s[u]);\n                }\n            }\n            //cout << dp[i] << '\\n';\n        }\n\n        return dp[n] == MAXCOST ? -1 : dp[n];\n    }\n};",
    "submit_ts": "1720321089",
    "subm_id": "1312313175"
}