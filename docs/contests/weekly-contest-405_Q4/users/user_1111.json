{
    "username": "Pratt007",
    "submission": "\nclass Solution {\npublic:\n    struct TrieNode {\n        unordered_map<char, TrieNode*> children;\n        vector<pair<int, int>> wordEnds;\n    };\n\n    class Trie {\n    public:\n        TrieNode* root;\n        Trie() { root = new TrieNode(); }\n\n        void addWord(const string& word, int index, int cost) {\n            TrieNode* node = root;\n            for (char c : word) {\n                if (!node->children.count(c))\n                    node->children[c] = new TrieNode();\n                node = node->children[c];\n            }\n            node->wordEnds.push_back({index, cost});\n        }\n    };\n    \n    \n    void f(const string& tgt, const vector<string>& wrds, vector<int>& dp, const Trie& tr) {\n        int tgtLen = tgt.size();\n        for (int i = 0; i < tgtLen; ++i) {\n            if (dp[i] == INT_MAX) continue;\n\n            TrieNode* node = tr.root;\n            for (int j = i; j < tgtLen; ++j) {\n                if (!node->children.count(tgt[j])) break;\n                node = node->children[tgt[j]];\n                for (const auto& wordEnd : node->wordEnds) {\n                    int wordIdx = wordEnd.first;\n                    int wordCst = wordEnd.second;\n                    int wordLen = wrds[wordIdx].size();\n                    if (i + wordLen <= tgtLen) {\n                        dp[i + wordLen] = min(dp[i + wordLen], dp[i] + wordCst);\n                    }\n                }\n            }\n        }\n    }\n\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int n = target.size();\n        vector<int> dp(n + 1, INT_MAX);\n        dp[0] = 0;\n\n        Trie trie;\n        for (int i = 0; i < words.size(); ++i) {\n            trie.addWord(words[i], i, costs[i]);\n        }\n\n        f(target, words, dp, trie);\n\n        return dp[n] == INT_MAX ? -1 : dp[n];\n    }\n};",
    "submit_ts": "1720323773",
    "subm_id": "1312383727"
}