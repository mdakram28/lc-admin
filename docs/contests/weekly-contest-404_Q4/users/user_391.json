{
    "username": "pramana",
    "submission": "class Solution {\npublic:\n    int diam(vector<vector<int>>& edges) {\n        vector<vector<int>> adj(1e5);\n        \n        for (auto v : edges) {\n            adj[v[0]].push_back(v[1]);\n            adj[v[1]].push_back(v[0]);\n        }\n        \n        queue<int> q;\n        q.push(0);\n        vector<bool> visited(1e5, false);\n        int node = 0;\n        \n        while (!q.empty()) {\n            node = q.front();\n            visited[node] = true;\n            q.pop();\n            \n            for (auto e : adj[node]) {\n                if (!visited[e]) {\n                    q.push(e);\n                }\n            } // node should be last thing visited...\n        }\n        // cout << node << endl;\n        \n        q.push(node);\n        \n        visited = vector<bool>(1e5, false);\n        vector<int> distance(1e5, 0);\n        int out = 0;\n        \n        while (!q.empty()) {\n            int node = q.front();\n            visited[node] = true;\n            q.pop();\n            out = max(out, distance[node]);\n            \n            for (auto e : adj[node]) {\n                // cout << \" \" << e <<  \" \" << visited[e] << endl;\n                if (!visited[e]) {\n                    q.push(e);\n                    distance[e] = distance[node] + 1;\n                    // cout << \"\\t\" << distance[e] << endl;\n                }\n            }\n        }\n        \n        return out;\n    }\n    \n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n        int d1 = diam(edges1);\n        int d2 = diam(edges2);\n        return max({d1, d2, (d1 + 1) / 2 + (d2 + 1) / 2 + 1});\n    }\n};",
    "submit_ts": 1719717852.0
}