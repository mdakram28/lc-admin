{
    "username": "rajkaustuk",
    "submission": "class Solution {\n     private static final int MODULO = 1_000_000_007;\n\n    // Recursive function to explore all valid pairs\n    private long explorePairs(int pos, int maxArr1, int minArr2, int[] nums, long[][][] memo) {\n        if (pos == nums.length) return 1; // Base case: reached the end of the array\n        \n        if (memo[pos][maxArr1][minArr2] != -1) return memo[pos][maxArr1][minArr2]; // Check memoization\n        \n        long totalWays = 0;\n\n        // Iterate over possible values for arr1[pos] and arr2[pos]\n        for (int val1 = maxArr1; val1 <= nums[pos]; val1++) {\n            for (int val2 = minArr2; val2 >= 0; val2--) {\n                if (val1 + val2 == nums[pos]) {\n                    totalWays = (totalWays + explorePairs(pos + 1, val1, val2, nums, memo)) % MODULO;\n                }\n            }\n        }\n\n        memo[pos][maxArr1][minArr2] = totalWays; // Memoize result\n        return totalWays;\n    }\n\n    // Function to initiate the process of counting valid pairs\n    public int countOfPairs(int[] nums) {\n        int length = nums.length;\n\n        // Memoization table to store intermediate results\n        long[][][] memoizationTable = new long[length][51][51];\n        for (long[][] layer : memoizationTable) {\n            for (long[] row : layer) {\n                Arrays.fill(row, -1); // Initialize all values to -1\n            }\n        }\n\n        // Start exploring from the first position with initial constraints\n        return (int) explorePairs(0, 0, nums[0], nums, memoizationTable);\n    }\n}",
    "submit_ts": "1723344855",
    "subm_id": "1351543442"
}