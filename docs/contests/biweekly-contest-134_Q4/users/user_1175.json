{
    "username": "sank555",
    "submission": "class SegmentTree {\npublic:\n    SegmentTree(const vector<int>& arr) {\n        n = arr.size();\n        tree.resize(4 * n);\n        build(arr, 0, 0, n - 1);\n    }\n\n    int query(int l, int r) {\n        return _query(0, 0, n - 1, l, r);\n    }\n\nprivate:\n    int n;\n    vector<int> tree;\n\n    void build(const vector<int>& arr, int node, int start, int end) {\n        if (start == end) {\n            tree[node] = arr[start];\n        } else {\n            int mid = start + (end - start) / 2;\n            build(arr, 2 * node + 1, start, mid);\n            build(arr, 2 * node + 2, mid + 1, end);\n            tree[node] = tree[2 * node + 1] & tree[2 * node + 2];\n        }\n    }\n\n    int _query(int node, int start, int end, int l, int r) {\n        if (r < start || end < l) {\n            return INT_MAX;\n        }\n        if (l <= start && end <= r) {\n            return tree[node];\n        }\n        int mid = start + (end - start) / 2;\n        int p1 = _query(2 * node + 1, start, mid, l, r);\n        int p2 = _query(2 * node + 2, mid + 1, end, l, r);\n        return p1 & p2;\n    }\n};\n\nclass Solution {\npublic:\n    long long countSubarrays(vector<int>& nums, int k) {\n        long long cnt = 0;\n        SegmentTree st(nums);\n        for (int i = 0; i < nums.size(); ++i) {\n            int fo = INT_MAX;\n            int lo = INT_MIN;\n            int l = i;\n            int r = nums.size() - 1;\n\n            // Find the first occurrence (fo) where the AND is k\n            while (l <= r) {\n                int mid = l + (r - l) / 2;\n                int a = st.query(i, mid);\n                if (a == k) {\n                    fo = mid;\n                    r = mid - 1;\n                } else if (a > k) {\n                    l = mid + 1;\n                } else {\n                    r = mid - 1;\n                }\n            }\n\n            l = i;\n            r = nums.size() - 1;\n\n            // Find the last occurrence (lo) where the AND is k\n            while (l <= r) {\n                int mid = l + (r - l) / 2;\n                int a = st.query(i, mid);\n                if (a == k) {\n                    lo = mid;\n                    l = mid + 1;\n                }\n                if (a < k) {\n                    r = mid - 1;\n                } else {\n                    l = mid + 1;\n                }\n            }\n\n            // If there is a valid range, count the number of subarrays\n            if (fo != INT_MAX) {\n                cnt += static_cast<long long>(lo - fo + 1);\n            }\n        }\n        return cnt;\n    }\n};\n",
    "submit_ts": "1720279866",
    "subm_id": "1311768247"
}