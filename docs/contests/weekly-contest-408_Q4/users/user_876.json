{
    "username": "anshudwivedi135",
    "submission": "class Solution {\npublic:\n    int bfs(int nodes, int start, int target1, int target2, vector<vector<int>> &path) \n    {\n        queue<int> q;\n        vector<int> visited(nodes + 4, 0);\n        q.push(start);\n        visited[start] = 1;\n\n        while (!q.empty()) {\n            int top = q.front();\n            q.pop();\n\n            for (auto v : path[top]) {\n                if (!visited[v]) {\n                    q.push(v);\n                    visited[v] = 1;\n                }\n            }\n        }\n\n        return visited[target1] || visited[target2];\n    }\n\n    void setgraph(int X, int Y, vector<vector<int>>& circles, vector<pair<pair<int, int>, int>>& circles1, vector<vector<int>>& path, int n) {\n        for (int i = 0; i < n; ++i) {\n            circles1[i].first.first = circles[i][0];\n            circles1[i].first.second = circles[i][1];\n            circles1[i].second = circles[i][2];\n        }\n\n        for (int i = 0; i < n; ++i) {\n            if (circles1[i].first.first <= circles1[i].second) {\n                path[n].push_back(i);\n                path[i].push_back(n);\n            }\n\n            if (X - circles1[i].first.first <= circles1[i].second) {\n                path[n + 2].push_back(i);\n                path[i].push_back(n + 2);\n            }\n\n            if (circles1[i].first.second <= circles1[i].second) {\n                path[n + 1].push_back(i);\n                path[i].push_back(n + 1);\n            }\n\n            if (Y - circles1[i].first.second <= circles1[i].second) {\n                path[n + 3].push_back(i);\n                path[i].push_back(n + 3);\n            }\n\n            for (int j = i + 1; j < n; ++j) {\n                double distance = sqrt(pow(circles1[i].first.first - circles1[j].first.first, 2) +\n                                       pow(circles1[i].first.second - circles1[j].first.second, 2));\n\n                if ((circles1[i].second + circles1[j].second) >= distance) {\n                    path[i].push_back(j);\n                    path[j].push_back(i);\n                }\n            }\n        }\n    }\n\n    bool canReachCorner(int X, int Y, vector<vector<int>> &circles) {\n      \n        int n = circles.size();\n         vector<vector<int>> path(circles.size() + 4);\n        vector<pair<pair<int, int>, int>> circles1(n);\n        setgraph(X, Y, circles, circles1, path, n);\n\n        int none = 0;\n\n        none = max(none, bfs(n + 4, n, n + 1, n + 2, path));\n        none = max(none, bfs(n + 4, n + 3, n + 2, n + 1, path));\n\n        if (none) {\n            return false;\n        }\n\n        return true;\n    }\n};\n",
    "submit_ts": "1722139162",
    "subm_id": "1335809620"
}