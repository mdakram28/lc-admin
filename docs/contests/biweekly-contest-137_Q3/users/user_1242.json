{
    "username": "cherno",
    "submission": "class Solution {\npublic:\n    long long maximumValueSum(vector<vector<int>>& board) {\n    int m = board.size(), n = board[0].size();\n    vector<vector<pair<int, int>>> topThreeInRows(m); \n    for (int i = 0; i < m; i++) {\n        vector<pair<int, int>> rowEntries;\n        for (int j = 0; j < n; j++) {\n            rowEntries.emplace_back(board[i][j], j);\n        }\n        sort(rowEntries.rbegin(), rowEntries.rend()); \n        for (int k = 0; k < min(3, n); k++) {\n            topThreeInRows[i].push_back(rowEntries[k]);\n        }\n    }\n\n    long long maxSum = LONG_MIN;\n    for (int i = 0; i < m; i++) {\n        for (auto& cell1 : topThreeInRows[i]) {\n            for (int j = i + 1; j < m; j++) {\n                for (auto& cell2 : topThreeInRows[j]) {\n                    if (cell1.second == cell2.second) continue;\n                    for (int k = j + 1; k < m; k++) {\n                        for (auto& cell3 : topThreeInRows[k]) {\n                            if (cell3.second == cell1.second || cell3.second == cell2.second) continue; \n                            long long currentSum = (long long)cell1.first + cell2.first + cell3.first;\n                            maxSum = max(maxSum, currentSum);\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    return maxSum;\n    }\n};",
    "submit_ts": "1723908265",
    "subm_id": "556330078"
}