{
    "username": "Ashish_prajapt",
    "submission": "class Solution {\n    private static boolean bfs(List<List<Integer>> graph, int start, int target1, int target2, int n) {\n        Queue<Integer> queue = new LinkedList<>();\n        boolean[] visited = new boolean[n + 4];\n        queue.add(start);\n        visited[start] = true;\n\n        while (!queue.isEmpty()) {\n            int u = queue.poll();\n            for (int v : graph.get(u)) {\n                if (!visited[v]) {\n                    queue.add(v);\n                    visited[v] = true;\n                }\n            }\n        }\n\n        return visited[target1] || visited[target2];\n    }\n\n    // Method to check if you can reach the corners\n    public static boolean canReachCorner(int X, int Y, int[][] circles) {\n        int numCircles = circles.length;\n        List<List<Integer>> graph = new ArrayList<>(numCircles + 4);\n\n        // Initialize graph with empty lists\n        for (int i = 0; i < numCircles + 4; i++) {\n            graph.add(new ArrayList<>());\n        }\n\n        // Build the graph\n        for (int i = 0; i < numCircles; i++) {\n            int x = circles[i][0];\n            int y = circles[i][1];\n            int r = circles[i][2];\n\n            if (x <= r) {\n                graph.get(numCircles).add(i);\n                graph.get(i).add(numCircles);\n            }\n            if (X - x <= r) {\n                graph.get(numCircles + 2).add(i);\n                graph.get(i).add(numCircles + 2);\n            }\n            if (y <= r) {\n                graph.get(numCircles + 1).add(i);\n                graph.get(i).add(numCircles + 1);\n            }\n            if (Y - y <= r) {\n                graph.get(numCircles + 3).add(i);\n                graph.get(i).add(numCircles + 3);\n            }\n\n            // Check overlap with other circles\n            for (int j = i + 1; j < numCircles; j++) {\n                int xj = circles[j][0];\n                int yj = circles[j][1];\n                int rj = circles[j][2];\n                double dx = x - xj;\n                double dy = y - yj;\n                double distance = Math.sqrt(dx * dx + dy * dy);\n                if (r + rj >= distance) {\n                    graph.get(i).add(j);\n                    graph.get(j).add(i);\n                }\n            }\n        }\n\n        // Check if reachable\n        return !(bfs(graph, numCircles, numCircles + 1, numCircles + 2, numCircles + 4) || \n                 bfs(graph, numCircles + 3, numCircles + 2, numCircles + 1, numCircles + 4));\n    }\n}\n",
    "submit_ts": "1722138895",
    "subm_id": "1335802453"
}