{
    "username": "sigma-yyf",
    "submission": "#ifdef sigma-yyf\n#include \"/Users/yangyf/Desktop/cpcode/leetcode/lc_help.hpp\"\n#endif\nusing namespace std;\n\nusing ll = long long;\nusing ar2 = array<int, 2>;\nusing ar3 = array<int, 3>;\nusing ar4 = array<int, 4>;\n#define all(c) (c).begin(), (c).end()\n#define rall(x) (x).rbegin(), (x).rend() \n#define sz(x) (int)(x).size()\n#define f0(e) for(int i = 0; i < (e); ++i)\n#define f1(e) for(int i = 1; i <= (e); ++i)\n#define f2(i,e) for(int i = 0; i < (e); ++i)\n#define f3(i,a,b) for (int i=(a);i<(b);i++)\n#define r3(i,b,a) for (int i=(b)-1;i>=(a);i--)\n#define Sm(a) accumulate((a).begin(), (a).end() , 0ll)\n#define Mn(a) (*min_element((a).begin(), (a).end()))\n#define Mx(a) (*max_element((a).begin(), (a).end()))\n#define rev(a) reverse((a).begin(), (a).end())\n#define each(x,a) for(auto& x : a)\n#define mst(a,x) memset(a, x, sizeof(a))\nmt19937 mrand(random_device{}()); \nint rng(int x) { return mrand() % x;}\nint pct(long long x) {return __builtin_popcountll(x);} \nint lg(int x) {return x == 0 ? -1 : 31 - __builtin_clz(x);}\nint clg(int x) {return x <= 1 ? 0 : 32 - __builtin_clz(x - 1);}\ntemplate<class t,class u> bool cmx(t &a, const u &b){return a < b ? a = b, 1 : 0;}\ntemplate<class t,class u> bool cmn(t &a, const u &b){return b < a ? a = b, 1 : 0;}\ntemplate <class T> int lb(const vector<T> &v, const T &x) { return distance(begin(v), lower_bound(begin(v), end(v), x));}\ntemplate <class T> int rb(const vector<T> &v, const T &x) { return distance(begin(v), upper_bound(begin(v), end(v), x));}\ntemplate<class T,class A> void psum(vector<T>& s, const vector<A>&a){\n    int n=a.size(); s.assign(n + 1, 0); \n    for(int i = 0; i < n; ++i) s[i + 1] = s[i] + a[i];  \n};\ntemplate<typename T, typename F> T b_search(T l, T r, bool fst, F &&f) {\n    T c = fst ? r : l;\n    while(l<=r){T md=(l+r)/2;if(f(md)){c=md;fst?(r=md-1):(l=md+1);} else fst?(l=md+1):(r=md-1);}\n    return c;\n}\ntemplate<class A> void wt(A x) { cout << x;}\ntemplate<class H, class... T> void wt(const H& h, const T&... t) { wt(h); wt(t...);}\ntemplate<class A> void wt(vector<A>& x) {for(int i=0,n=x.size();i<n;++i) cout<<x[i]<<\" \\n\"[i==n-1];}\ntemplate<class A> void dbg(A x) { cout << x << \" \";}\ntemplate<class H, class... T> void dbg(const H& h, const T&... t) { dbg(h); dbg(t...);}\ntemplate<class A> void dbg(vector<vector<A>>& x) {each(c,x)wt(c);}\ntemplate<class A, class T> void dbg(map<A,T>& x) {for(auto&[k,v]:x){cout<<\"(\"<<k<<\": \"<<v<<\"), \";}cout<<\"\\n\";}\nbool is_vo(char c){return c=='a' || c=='e' || c=='i' || c=='o' || c=='u';}\nint s2t(string &s){return s[0]*600 + s[1]*60 + s[3]*10 + s[4] - 32208;} //s: \"HH:MM\" \nstruct fast_ios { \n    fast_ios(){ cin.tie(nullptr), ios::sync_with_stdio(false), cout << fixed << setprecision(10);};\n} fast_ios_;\n\nconst char nl = '\\n';\nconst int N = 2e5 + 5;\nint n, m, k;\n\nclass Solution {\npublic:\n    int minimumDistance(vector<vector<int>>& p) {\n    \tint c=2e9;\n        multiset<int> sx,sy;\n        each(v,p){\n        \tsx.insert(v[0]+v[1]);\n        \tsy.insert(v[0]-v[1]);\n        }\n        each(v,p){\n        \tint x=v[0],y=v[1];\n        \tsx.erase(sx.find(x+y));\n        \tsy.erase(sy.find(x-y));\n        \tint cu=max(*sx.rbegin()-*sx.begin(),(*sy.rbegin()-*sy.begin()));\n        \tcmn(c,cu);\n        \tsx.insert(x+y);\n        \tsy.insert(x-y);\n        }\n        return c;\n    }\n};\n\n#ifdef sigma-yyf\nint main(){\n    vector<int> v,a,b;\n    string s,t;\n    vector<string> sv;\n    vector<vector<int>> vv;\n    // ListNode* head = nullptr, *l1,*l2;\n    // TreeNode* root = nullptr,*p,*q;\n    // Solution so;\n    // rd(a,k);\n    // auto ans = so.;\n    // wt(ans);\n    cout<<'\\n';\n    return 0;\n}\n#endif\n"
}