{
    "username": "cmgabriellucas",
    "submission": "class Solution {\npublic:\n    int minimumDifference(vector<int>& nums, int k) {\n        int n = nums.size();\n        vector<vector<int>> pref(n + 1, vector<int>(30));\n        for (int i = 1; i <= n; ++i) {\n            for (int j = 0; j < 30; ++j) {\n                if ((nums[i-1]>>j)&1) pref[i][j] = pref[i-1][j];\n                else pref[i][j] = pref[i-1][j] + 1;\n            }\n        }\n        int ans = 2e9;\n        auto getAns = [&] (int l, int r) {\n            int mee = 0;\n            for (int i = 0; i < 30; ++i) {\n                if (pref[r][i] - pref[l-1][i] == 0) mee += (1 << i);\n            }\n            return mee;\n        };\n        for (int i = 1; i <= n; ++i) {\n            int l = 1, r = i, lst = i;\n            ans = min(ans, abs(k-getAns(i, i)));\n            while (l <= r) {\n                int md = l + (r-l+1)/2;\n                int xx = getAns(md, i);\n                ans = min(ans, abs(xx-k));\n                if (getAns(md, i) >= k) r = md - 1, lst = md;\n                else l = md + 1;\n            }\n            if (lst != 1) ans = min(ans, abs(k-getAns(lst-1,i)));\n        }\n        return ans;\n    }\n};",
    "submit_ts": 1717297179.0
}