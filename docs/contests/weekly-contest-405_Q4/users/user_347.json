{
    "username": "irfanukani",
    "submission": "struct TrieNode {\n    map<char, TrieNode*> children;\n    long long cost;\n    TrieNode() : cost(INT_MAX) {}\n};\n\nclass Solution {\n    vector<long long> dp;\n    TrieNode* root;\n\n    void insert(string word, long long cost) {\n        TrieNode* node = root;\n        for (char c : word) {\n            if (node->children.find(c) == node->children.end()) {\n                node->children[c] = new TrieNode();\n            }\n            node = node->children[c];\n        }\n        node->cost = min(node->cost, cost);\n    }\n\n    long long rec(int index, string& target) {\n        if (index == target.size()) return 0;\n        if (dp[index] != -1) return dp[index];\n\n        TrieNode* node = root;\n        long long ans = INT_MAX;\n        for (int i = index; i < target.size(); i++) {\n            if (node->children.find(target[i]) == node->children.end()) break;\n            node = node->children[target[i]];\n            if (node->cost != INT_MAX) {\n                ans = min(ans, node->cost + rec(i + 1, target));\n            }\n        }\n\n        return dp[index] = ans;\n    }\n\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        dp.assign(target.size(), -1);\n        root = new TrieNode();\n\n        for (int i = 0; i < words.size(); i++) {\n            insert(words[i], costs[i]);\n        }\n\n        long long ans = rec(0, target);\n        return ans >= INT_MAX ? -1 : ans;\n    }\n};\n",
    "submit_ts": "1720321289",
    "subm_id": "1312318800"
}