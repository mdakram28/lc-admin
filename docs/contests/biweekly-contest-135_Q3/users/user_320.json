{
    "username": "__yannick__",
    "submission": "class BIT:\n    def __init__(self, sz):\n        self.sz = sz + 1\n        self.bit = self.sz * [0]\n        \n    def add(self, i, val):\n        i += 1\n        while i < self.sz:\n            self.bit[i] += val\n            i += i & -i\n    \n    def sum(self, r):\n        r += 1\n        ans = 0\n        while r > 0:\n            ans += self.bit[r]\n            r -= r & -r\n        return ans\n    \nclass Solution:\n    def minChanges(self, nums: List[int], k: int) -> int:\n        # Value for x can be checked in O(n)\n        # Compute all differences, these are all the candidates: O(n/2) candidates\n        \n#         diffs = defaultdict(int)\n#         n = len(nums)\n#         for i in range(n//2):\n#             diff = abs(nums[i] - nums[~i])\n#             diffs[diff] += 1\n            \n#         maxi = max(diffs.values())\n\n        bit = BIT(k+1)\n        n = len(nums)\n        for i in range(n//2):\n            x, y = nums[i], nums[~i]\n            m = max(x, k-x, y, k-y)\n            diff = abs(x - y)\n            \n            # [0, diff) 1x\n            # [diff, diff] 0x\n            # (diff, m] 1x\n            # (m, k] 2x\n            \n            bit.add(0, 1)\n            bit.add(diff, -1)\n            bit.add(diff+1, 1)\n            bit.add(m+1, 1)\n            \n        minchanges = min(bit.sum(i) for i in range(k+1))\n        return minchanges\n            \n        ",
    "submit_ts": "1721488090",
    "subm_id": "1327411213"
}