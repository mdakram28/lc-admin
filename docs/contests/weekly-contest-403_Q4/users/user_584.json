{
    "username": "wo-a-6",
    "submission": "const(\n    MAX = 10000\n)\n\nfunc getUp(grid [][]int, n, m int) int {\n    res := 0\n    for i := 0; i < n; i++ {\n        for j := 0; j < m; j++ {\n            if grid[i][j] == 1 {\n                return i\n            }\n        }\n    }\n    return res\n}\n\nfunc getDown(grid [][]int, n, m int) int {\n    res := 0\n    for i := n-1; i >=0; i-- {\n        for j := 0; j < m; j++ {\n            if grid[i][j] == 1 {\n                return i\n            }\n        }\n    }\n    return res\n}\n\nfunc getLeft(grid [][]int, n, m int) int {\n    res := 0\n    for j := 0; j < m; j++ {\n        for i := 0; i < n; i++ {\n            if grid[i][j] == 1 {\n                return j\n            }\n        }\n    }\n    return res\n}\n\nfunc getRight(grid [][]int, n, m int) int {\n    res := 0\n    for j := m - 1; j >= 0; j-- {\n        for i := 0; i < n; i++ {\n            if grid[i][j] == 1 {\n                return j\n            }\n        }\n    }\n    return res\n}\n\nfunc zero(grid [][]int) bool {\n    n, m := len(grid), len(grid[0])\n    for i := 0; i < n; i++ {\n        for j := 0; j < m; j++ {\n            if grid[i][j] == 1 { return false }\n        }\n    }\n    return true\n}\n\nfunc getArea(grid [][]int) int {\n    n, m := len(grid), len(grid[0])\n    up := getUp(grid, n, m)\n    down := getDown(grid, n, m)\n    left := getLeft(grid, n, m)\n    right := getRight(grid, n, m)\n    if zero(grid) { return 0 }\n    // if up == 0 && down == 0 && left == 0 && right == 0 { return 0 }\n    // fmt.Println(up, down, left, right)\n    // fmt.Println(grid, (down - up+1) * (right - left+1))\n    return (down - up+1) * (right - left+1)\n}\n\nfunc getMJ(j0, j1 int, grid [][]int) [][]int {\n    n, m := len(grid), j1 - j0\n    res := make([][]int, n)\n    for i := 0; i < n; i++ {\n        res[i] = make([]int, m)\n    }\n    for i := 0; i < n; i++ {\n        for j := 0; j < m; j++ {\n            res[i][j] = grid[i][j0+j]\n        }\n    }\n    return res\n}\n\nfunc minimumSum(grid [][]int) int {\n    n, m := len(grid), len(grid[0])\n    res := MAX\n    for i := 1; i < n; i++ {\n        M1, M2 := grid[:i], grid[i:]\n        res = min(res, getArea(M1) + splitArea(M2))\n        res = min(res, getArea(M2) + splitArea(M1))\n        // fmt.Println(\"i\", i, getArea(M1), splitArea(M2))\n        // fmt.Println(\"i\", i, getArea(M2), splitArea(M1))\n    }\n    for j := 1; j < m; j++ {\n        M1, M2 := getMJ(0, j, grid), getMJ(j, m, grid)\n        res = min(res, getArea(M1) + splitArea(M2))\n        res = min(res, getArea(M2) + splitArea(M1))\n        // fmt.Println(\"j\", j, getArea(M1), splitArea(M2))\n        // fmt.Println(\"j\", j, getArea(M2), splitArea(M1))          \n    }\n    return res\n}\n\nfunc splitArea(grid [][]int) int {\n    res := MAX\n    n, m := len(grid), len(grid[0])\n    for i := 1; i < n; i++ {\n        M1, M2 := grid[:i], grid[i:]\n        res = min(res, getArea(M1) + getArea(M2))\n        // fmt.Println(\"s_i\", i, getArea(M1), getArea(M2))\n    }\n    for j := 1; j < m; j++ {\n        M1, M2 := getMJ(0, j, grid), getMJ(j, m, grid)\n        res = min(res, getArea(M1) + getArea(M2))\n        // fmt.Println(\"s_j\", j, M1, getArea(M1), M2, getArea(M2)) \n    }\n    return res\n}",
    "submit_ts": "1719114448",
    "subm_id": "541401918"
}