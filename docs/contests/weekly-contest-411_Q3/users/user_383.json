{
    "username": "\u4e00\u53ea\u6ce2\u65af\u732b",
    "submission": "impl Solution {\n    pub fn largest_palindrome(n: i32, k: i32) -> String {\n        let n = n as usize;\n    \n        if k == 6 && n >=5 {\n            let half = '9'.to_string().repeat(n /2 + n % 2 -2);\n            let mid = if n % 2 == 0 {\n                \"77\".to_string()\n            }else {\n                \"8\".to_string()\n            };\n            return format!(\"8{half}{mid}{half}8\");\n        }\n        \n        let mut d_mod = vec![0; n];\n        d_mod[0] = 1;\n        for i in 1..n {\n            d_mod[i] = d_mod[i - 1] * 10 % k;\n        }\n    \n        let half_n = n / 2 + n % 2;\n        for i in 0..half_n{\n            if i == n -i -1 {\n                continue;\n            }\n            d_mod[i] = (d_mod[i] + d_mod[n - i - 1]) % k;\n        }\n    \n        let mut values = vec![9; half_n];\n    \n        let mut sum = 0;\n        for i in 0..half_n {\n            sum = (sum + values[i] * d_mod[i]) % k;\n        }\n        let mut curr = half_n -1;\n        while sum != 0{\n            while d_mod[curr] == 0{\n                curr -= 1;\n            }\n    \n            values[curr] -= 1;\n            sum = (sum + k - d_mod[curr]) % k;\n            let mut pos = curr;\n            while values[pos] < 0{\n                values[pos] += 10;\n                sum = (sum + 10* d_mod[pos]) % k;\n                values[pos - 1] -= 1;\n                sum = (sum + k - d_mod[pos - 1]) % k;\n                pos -= 1;\n            }\n        }\n    \n        let first_half = values.iter().map(|&x| x.to_string()).collect::<String>();\n        let end = half_n - n % 2;\n        let next_half = values[..end].iter().rev().map(|&x| x.to_string()).collect::<String>();\n        format!(\"{}{}\", first_half, next_half)\n    }\n}\n",
    "submit_ts": "1723952142",
    "subm_id": "556409840"
}