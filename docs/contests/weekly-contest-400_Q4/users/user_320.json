{
    "username": "nqvr",
    "submission": "class Solution:\n    def minimumDifference(self, nums: List[int], k: int) -> int:\n        N = len(nums)\n        M = 30\n\n        presum = [[0 for _ in range(M)] for _ in range(N + 1)]\n\n        for i in range(N):\n            s = bin(nums[i])[2:]\n            s = \"0\" * (M - len(s)) + s\n\n            for j in range(M):\n                if s[j] == '0':\n                    presum[i + 1][j] = presum[i][j]\n                else:\n                    presum[i + 1][j] = presum[i][j] + 1\n            \n        def getand(lo, hi):\n            # [lo, hi]\n            l1 = presum[lo]\n            l2 = presum[hi + 1]\n\n            ans = 0\n            for i in range(M):\n                if l2[M - 1 - i] - l1[M - 1 - i] == hi - lo + 1:\n                    ans += 2 ** i\n            return ans\n\n        ans = abs(nums[0] - k)\n\n        lo = 0\n        hi = 0\n\n\n        for lo in range(N):\n            hi = max(hi - 1, lo)\n\n            while hi < N:\n                t = getand(lo, hi)\n                ans = min(ans, abs(t - k))\n                if t <= k:\n                    break\n                hi += 1\n\n\n        return ans\n    \n    \n    ",
    "submit_ts": "1717298041",
    "subm_id": "1274765257"
}