{
    "username": "terranw",
    "submission": "class Solution {\n    int n, nn;\n    long delta;\n    long[] tr;\n    public long minimumOperations(int[] nums, int[] tgt) {\n        n = nums.length;\n        /*\n        for (int i = 0; i < n; ++i) {\n            tgt[i] -= nums[i];\n        }\n        */\n        nn = 1;\n        while (nn < n) {\n            nn <<= 1;\n        }\n        tr = new long[(nn << 1) + 1];\n        for (int i = 0; i < n; ++i) {\n            tr[nn + i] = tgt[i] - nums[i];\n        }\n\n        int[] rig = new int[2];\n        rig[0] = n - 1;\n        rig[1] = n - 1;\n\n        long ans = 0;\n        for (int i = 0; i < n; ) {\n            long now = query(i);\n            if (now == 0) {\n                ++i;\n                continue;\n            }\n            long sgn = 1;\n            int x = 0;\n            if (now < 0) {\n                sgn = -1;\n                x = 1;\n            }\n            long t = 0;\n            while (rig[x] > i) {\n                t = query(rig[x]);\n                if (t * sgn <= 0) {\n                    --rig[x];\n                }\n                else {\n                    break;\n                }\n            }\n            if (rig[x] > i) {\n                delta = Math.min(now * sgn, t * sgn);\n                //System.out.printf(\"delta=%d, now=%d t=%d, sgn=%d\\n\", delta, now, t, sgn);\n                ans += delta;\n                delta *= -sgn;\n                //System.out.printf(\"%d~%d: delta=%d, now=%d t=%d, sgn=%d\\n\", i, rig[x], delta, now, t, sgn);\n                change(i, rig[x], 1, 0, nn - 1);\n                rig[1 - x] = Math.max(rig[1 - x], rig[x]);\n            }\n            else {\n                //System.out.printf(\"%d~%d: delta=%d, now=%d\\n\", i, i, now * sgn, now);\n                ans += now * sgn;\n                ++i;\n            }\n        }\n\n        return ans;\n    }\n\n    void change(int le, int ri, int now, int left, int right) {\n        if (left == le && right == ri) {\n            tr[now] += delta;\n            return;\n        }\n        int mid = (left + right) >> 1;\n        if (le <= mid) {\n            change(le, Math.min(ri, mid), now << 1, left, mid);\n        }\n        if (ri > mid) {\n            change(Math.max(le, mid + 1), ri, (now << 1) + 1, mid + 1, right);\n        }\n    }\n\n    long query(int id) {\n        long res = 0;\n        id += nn;\n        while (id > 0) {\n            res += tr[id];\n            id >>= 1;\n        }\n        return res;\n    }\n}",
    "submit_ts": "1721533854",
    "subm_id": "1328018116"
}