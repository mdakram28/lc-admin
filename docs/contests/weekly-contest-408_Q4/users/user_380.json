{
    "username": "datnguyen03",
    "submission": "class UnionFind:\n    def __init__(self, size):\n        self.parent = list(range(size))\n        self.rank = [0] * size\n\n    def find(self, p):\n        if self.parent[p] != p:\n            self.parent[p] = self.find(self.parent[p])\n        return self.parent[p]\n\n    def union(self, p, q):\n        rootP = self.find(p)\n        rootQ = self.find(q)\n\n        if rootP != rootQ:\n            if self.rank[rootP] > self.rank[rootQ]:\n                self.parent[rootQ] = rootP\n            elif self.rank[rootP] < self.rank[rootQ]:\n                self.parent[rootP] = rootQ\n            else:\n                self.parent[rootQ] = rootP\n                self.rank[rootP] += 1\n\n    def connected(self, p, q):\n        if p == q:\n            return True\n        return self.find(p) == self.find(q)\n\nclass Solution:\n    def canReachCorner(self, X: int, Y: int, circles: List[List[int]]) -> bool:\n        \n        def is_in_area(x, y, r):\n            return not (x + r < 0 or x - r > X or y + r < 0 or y + r > y)\n        \n        def is_top(x, y, r):\n            return y - r <= Y <= y + r\n        \n        def is_left(x, y, r):\n            return x - r <= 0 <= x + r\n        \n        def is_right(x, y, r):\n            return x - r <= X <= x + r\n        \n        def is_bottom(x, y, r):\n            return y - r <= 0 <= y + r\n        \n        def is_conflict(x1, y1, r1, x2, y2, r2):\n            distance = math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)\n\n            if distance <= r1 + r2:\n                return True\n            else:\n                return False\n        \n        top_circles = []\n        left_circles = []\n        right_circles = []\n        bottom_circles = []\n        \n        for i, (x, y, r) in enumerate(circles):\n            if is_in_area(x, y, r):\n                continue\n\n            if is_top(x, y, r):\n                top_circles.append(i)\n            if is_left(x, y, r):\n                left_circles.append(i)\n            if is_right(x, y, r):\n                right_circles.append(i)\n            if is_bottom(x, y, r):\n                bottom_circles.append(i)\n\n        # print(top_circles)\n        # print(left_circles)\n        # print(right_circles)\n        # print(bottom_circles)\n\n        \n        n = len(circles)\n        uf = UnionFind(n)\n        for i in range(n):\n            for j in range(i + 1, n):\n                x1, y1, r1 = circles[i]\n                x2, y2, r2 = circles[j]\n                \n                if not is_conflict(x1, y1, r1, x2, y2, r2):\n                    continue\n                \n                # print(i, j)\n                uf.union(i, j)\n        \n        for t in top_circles:\n            for r in right_circles:\n                if uf.connected(t, r):\n                    return False\n        \n        for l in left_circles:\n            for r in right_circles:\n                if uf.connected(l, r):\n                    return False\n                \n        for t in top_circles:\n            for b in bottom_circles:\n                if uf.connected(t, b):\n                    return False\n\n        for l in left_circles:\n            for b in bottom_circles:\n                if uf.connected(l, b):\n                    return False\n                \n        return True\n        \n        \n        \n        \n        \n        ",
    "submit_ts": "1722137218",
    "subm_id": "1335757530"
}