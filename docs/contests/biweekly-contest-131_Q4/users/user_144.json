{
    "username": "retyrn",
    "submission": "struct Node {\n    int w;\n    Node(int w_ = 0): w(w_) {}\n    ~Node() {}\n};\nstruct SegmentTree {\n    int n;\n    std::vector<Node> node;\n    #define lson(x) (x << 1)\n    #define rson(x) (x << 1 | 1)\n    SegmentTree(int n_) : n(n_ + 10), node(n << 2) {}\n    void pushup(int p) {\n        node[p].w = max(node[lson(p)].w, node[rson(p)].w);\n    }\n    void modify(int p, int l, int r, int x, int y) {\n        if (l == r) {\n            node[p].w = y;\n            return;\n        }\n        int mid = (l + r) >> 1;\n        if (x >= mid + 1) modify(rson(p), mid + 1, r, x, y);\n        else modify(lson(p), l, mid, x, y);\n        pushup(p);\n    }\n    int query(int p, int l, int r, int x, int y) {\n        if (x <= l && r <= y) {\n            return node[p].w;\n        }\n        int mid = (l + r) >> 1;\n        int res = 0;\n        if (x >= mid + 1) res = query(rson(p), mid + 1, r, x, y);\n        else if (y <= mid) res = query(lson(p), l, mid, x, y);\n        else res = max(query(lson(p), l, mid, x, mid), query(rson(p), mid + 1, r, mid + 1, y));\n        return res;\n    }\n};\n\nstring to_string(string s) { return '\"' + s + '\"'; }\nstring to_string(const char *s) { return to_string((string) s); }\nstring to_string(bool b) { return (b ? \"true\" : \"false\"); }\ntemplate<typename A, typename B>\nstring to_string(pair<A, B> p) { return \"(\" + to_string(p.first) + \", \" + to_string(p.second) + \")\"; }\ntemplate<typename A>\nstring to_string(A v) { bool first = true; string res = \"{\"; for(const auto &x : v) { if(!first) { res += \", \"; } first = false; res += to_string(x);} res += \"}\"; return res; }\nvoid debug_out() { cout << endl; }\ntemplate<typename Head, typename... Tail> void debug_out(Head H, Tail... T) { cout << \" \" << to_string(H); debug_out(T...);}\n#define dbg(...) cout << \"[\" << #__VA_ARGS__ << \"]:\", debug_out(__VA_ARGS__)\n\nclass Solution {\npublic:\n    vector<bool> getResults(vector<vector<int>>& queries) {\n        int n = queries.size();\n        vector<bool> res;\n        int m = min(50000, n * 3);\n        set<int> S = {m};\n        SegmentTree tree(m);\n        tree.modify(1, 1, m, m, m);\n        \n        for (auto& q : queries) {\n            int op = q[0];\n            if (op == 1) {\n                int x = q[1], nxt = 0, pre = 0;\n                if (x > *S.begin()) {\n                    auto it = S.upper_bound(x);\n                    nxt = *it;\n                    it --;\n                    pre = *it;\n                }\n                else {\n                    auto it = S.upper_bound(x);\n                    nxt = *it;\n                }\n                \n                tree.modify(1, 1, m, nxt, nxt - x);\n                tree.modify(1, 1, m, x, x - pre);\n                S.insert(x);\n            }\n            else {\n                int x = q[1], sz = q[2];\n                auto it = S.lower_bound(x);\n                if ((it == S.begin() ? x : x - *prev(it)) >= sz) {\n                    res.push_back(true);\n                    continue;\n                }\n                if (it == S.begin()) {\n                    res.push_back(false);\n                    continue;\n                }\n                it --;\n                auto t = tree.query(1, 1, m, 1, *it);\n                res.push_back(t >= sz);\n            }\n        }\n        return res;\n    }\n};",
    "submit_ts": 1716650434.0
}