{
    "username": "SaiSusshanth",
    "submission": "class Node:\n    def __init__(self, val):\n        self.next = None\n        self.prev = None\n        self.val = val\n        \n        \nclass linked_list:\n    def __init__(self):\n        self.head = None\n        self.end =None\n        self.l = 0\n        \n    def add(self, Node):\n        if self.head == None:\n            self.head = Node\n            self.end = Node\n        else:\n            self.end.next = Node\n            Node.prev = self.end\n            self.end = Node\n        self.l += 1\n        \n    def delete(self, node1, node2):\n        if node1.next == None: return\n        \n        while node1.next.val < node2.val:\n            temp = node1.next\n            node1.next = temp.next\n            temp.next.prev = node1\n            temp.next = None\n            self.l -= 1\n            \n    def printt(self):\n        t = self.head\n        p = []\n        while t:\n            p.append(t.val)\n            t = t.next\n        print(*p)\n    \n        \n    \n        \ndef create(arr):\n    s = set([i for i in range(len(arr))])\n    mp = {}\n    t = linked_list()\n    for i in range(len(arr)):\n        node = Node(arr[i])\n        mp[i] = node\n        t.add(node)\n    return t, mp, s   \n        \n        \ndef pop_range(i, j, t, mp):\n    t.delete(mp[i], mp[j])\n    \n    \n\nclass Solution:\n    def shortestDistanceAfterQueries(self, n: int, queries: List[List[int]]) -> List[int]:\n        t, mp, s = create([i for i in range(n)])\n        \n        res = []\n        \n        for i, j in queries:\n            pop_range(i, j, t, mp)\n            res.append(t.l - 1)\n            # t.printt()\n            # print(res[-1])\n            \n            \n        return res\n        ",
    "submit_ts": "1722743525",
    "subm_id": "1343793907"
}