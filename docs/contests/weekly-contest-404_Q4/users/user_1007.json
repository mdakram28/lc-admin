{
    "username": "parthraut45",
    "submission": "#include <vector>\n#include <queue>\n#include <algorithm>\n\nusing namespace std;\n\nclass Solution {\npublic:\n    int bfs(int start, const vector<vector<int>>& adj, int& f) {\n        int n = adj.size();\n        vector<int> dist(n, -1);\n        queue<int> q;\n        q.push(start);\n        dist[start] = 0;\n\n        f = start;\n        while (!q.empty()) {\n            int node = q.front();\n            q.pop();\n            for (int neighbor : adj[node]) {\n                if (dist[neighbor] == -1) {\n                    dist[neighbor] = dist[node] + 1;\n                    q.push(neighbor);\n                    if (dist[neighbor] > dist[f]) {\n                        f = neighbor;\n                    }\n                }\n            }\n        }\n        return dist[f];\n    }\n\n    int treeDiameter(const vector<vector<int>>& adj) {\n        int f = 0;\n        bfs(0, adj, f);\n        return bfs(f, adj, f);\n    }\n\n    int minimumDiameterAfterMerge(vector<vector<int>>& a, vector<vector<int>>& b) {\n        int n = a.size() + 1;\n        int m = b.size() + 1;\n        vector<vector<int>> c(n);\n        vector<vector<int>> d(m);\n\n        for (const auto& edge : a) {\n            c[edge[0]].push_back(edge[1]);\n            c[edge[1]].push_back(edge[0]);\n        }\n\n        for (const auto& edge : b) {\n            d[edge[0]].push_back(edge[1]);\n            d[edge[1]].push_back(edge[0]);\n        }\n\n        int e = treeDiameter(c);\n        int f = treeDiameter(d);\n\n        return max({e, f, (e + 1) / 2 + (f + 1) / 2 + 1});\n    }\n};\n",
    "submit_ts": "1719718460",
    "subm_id": "1304417807"
}