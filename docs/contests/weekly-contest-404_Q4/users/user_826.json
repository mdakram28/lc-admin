{
    "username": "SD_leetcode",
    "submission": "class Solution{\npublic:\n    \n    int index(int node, int p, vector<vector<int>>&adj){\n        \n        vector<int>vis(p,0),dis(p,0);\n        dis[node]=0;\n        \n        queue<int>q;\n        q.push(node);\n        \n        while(!q.empty()){\n            int nn = q.front();\n            q.pop();\n            \n            vis[nn]=1;\n            for(auto it: adj[nn]){\n                if(!vis[it]){\n                    q.push(it);\n                    dis[it]=1+dis[nn];\n                }\n            }  \n        }\n        int ind=0,mx=0;\n        for(int i=0; i<p; i++){\n            if(dis[i]>mx){\n                mx = dis[i];\n                ind=i;\n            }\n        } \n        return ind;\n    } \n    \n    \n    int mxDistance(int node, int qq, vector<vector<int>>&adj){\n        vector<int>vis(qq,0),dis(qq,0);\n        dis[node]=0;\n        \n        queue<int>q;\n        q.push(node);\n        \n        while(!q.empty()){\n            int nn = q.front();\n            q.pop();\n            \n            vis[nn]=1;\n            for(auto it: adj[nn]){\n                if(!vis[it]){\n                    q.push(it);\n                    dis[it]=1+dis[nn];\n                }\n            }  \n        }\n        int mx=0;\n        for(int i=0; i<qq; i++){\n            if(dis[i]>mx){\n                mx = dis[i];\n            }\n        } \n        return mx;\n    } \n    \n    \n    \n    \n        \n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2){\n        int n = edges1.size();\n        int m = edges2.size();\n        \n        //if(n==0 || m==0)return 0;\n        \n        n++;\n        m++;\n        \n        vector<vector<int>>adj1(n),adj2(m);\n        \n        for(auto it: edges1){\n            adj1[it[0]].push_back(it[1]);\n            adj1[it[1]].push_back(it[0]);\n        }\n        \n        for(auto it: edges2){\n            adj2[it[0]].push_back(it[1]);\n            adj2[it[1]].push_back(it[0]);\n        }\n        int ind1 = index(0,n,adj1);\n        int mx1 = mxDistance(ind1,n,adj1);\n        \n        int ind2 = index(0,m,adj2);\n        int mx2 = mxDistance(ind2,m,adj2);\n        \n        int ans =  (mx1+1)/2+(mx2+1)/2+1;\n        return max({ans, mx1,mx2});\n        \n    }\n};",
    "submit_ts": "1719719641",
    "subm_id": "1304446952"
}