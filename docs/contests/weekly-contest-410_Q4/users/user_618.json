{
    "username": "zzack_zack",
    "submission": "#include <iostream>\n#include <vector>\n#include <algorithm>\nusing namespace std;\n\nconst int MOD = 1e9 + 7;\n\nclass Fenwick {\npublic:\n    vector<int> tree, data;\n    int size;\n\n    Fenwick(int n) {\n        tree.resize(n + 1, 0);\n        data.resize(n + 1, 0);\n        size = n;\n    }\n\n    void update(int i, int delta) {\n        i += 1;\n        data[i] = (data[i] + delta) % MOD;\n        while (i <= size) {\n            tree[i] = (tree[i] + delta) % MOD;\n            i += i & -i;\n        }\n    }\n\n    int query(int i) {\n        i += 1;\n        int res = 0;\n        while (i >= 1) {\n            res = (res + tree[i]) % MOD;\n            i -= i & -i;\n        }\n        return res;\n    }\n};\n\n\n\nclass Solution {\npublic:\n    int countOfPairs(vector<int>& nums) {\n        int n = nums.size();\n        int maxi = *max_element(nums.begin(), nums.end());\n        Fenwick dp(maxi + 1);\n\n        for (int k = 0; k <= nums[0]; ++k) {\n            dp.update(k, 1);\n        }\n\n        for (int i = 1; i < n; ++i) {\n            for (int j = maxi; j > nums[i]; --j) {\n                int update_val = dp.data[j + 1] % MOD;\n                if (update_val != 0) {\n                    dp.update(j, (-update_val + MOD) % MOD);  \n                }\n            }\n\n            for (int j = nums[i]; j >= 0; --j) {\n                if (nums[i - 1] - nums[i] + j < 0) {\n                    int update_val = dp.data[j + 1] % MOD;\n                    if (update_val != 0) {\n                        dp.update(j, (-update_val + MOD) % MOD);  \n                    }\n                } else {\n                    int Q = dp.query(min(j, nums[i - 1] - nums[i] + j)) % MOD;\n                    dp.update(j, (Q - dp.data[j + 1] + MOD) % MOD);  \n                }\n            }\n        }\n\n        return dp.query(maxi) % MOD;\n    }\n};",
    "submit_ts": "1723348121",
    "subm_id": "1351612007"
}