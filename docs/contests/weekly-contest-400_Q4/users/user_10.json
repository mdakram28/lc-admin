{
    "username": "sheepforever",
    "submission": "class Solution {\npublic:\n    int minimumDifference(vector<int>& nums, int k) {\n        int n = nums.size();\n        vector<vector<int>> sum(30, vector<int>(n + 1, 0));\n        for (int i = 0; i < nums.size(); ++i) {\n            for (int j = 0; j < 30; ++j) {\n                if ((nums[i] >> j) & 1) {\n                    ++sum[j][i + 1];\n                }\n            }\n        }\n        for (int i = 1; i <= n; ++i) {\n            for (int j = 0; j < 30; ++j) {\n                sum[j][i] += sum[j][i - 1];\n            }\n        }\n        \n        auto eval = [&](int l, int r) {\n          int ret = 0;\n            for (int j = 0; j < 30; ++j) {\n                if (sum[j][r + 1] - sum[j][l] == r - l + 1) {\n                    ret |= 1 << j;\n                }\n            }\n            return ret;\n        };\n        \n        int right = 0;\n        long long ans = 0x3F3F3F3F3F3FLL;\n        for (int i = 0; i < n; ++i) {\n            right = max(right, i);\n            while (right + 1 < n && eval(i, right + 1) >= k) {\n                ++right;\n            }\n            \n            ans = min(ans, abs(eval(i, right) - (long long) k));\n            if (right + 1 < n) {\n                ans = min(ans, abs(eval(i, right + 1) - (long long) k));\n            }\n        }\n        return ans;\n    }\n};",
    "submit_ts": 1717296470.0
}