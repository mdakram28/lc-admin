{
    "username": "ConnectedPuddle",
    "submission": "public class Solution {\n    public bool CanReachCorner(int X, int Y, int[][] circles) {\n        int n = circles.Length;\n        DSU dsu = new DSU(n + 4);\n        for (int i = 0; i < n; i++)\n        {\n            int x = circles[i][0];\n            int y = circles[i][1];\n            int r = circles[i][2];\n            if (r >= x)\n            {\n                dsu.Merge(i, n);\n            }\n            if (y + r >= Y)\n            {\n                dsu.Merge(i, n+1);\n            }\n            if (x + r >= X)\n            {\n                dsu.Merge(i, n+2);\n            }\n            if (r >= y)\n            {\n                dsu.Merge(i, n+3);\n            }\n        }\n        for (int i = 0; i < n; i++)\n        {\n            int x = circles[i][0];\n            int y = circles[i][1];\n            int r = circles[i][2];\n            for (int j = i+1; j < n; j++)\n            {\n                int x1 = circles[j][0];\n                int y1 = circles[j][1];\n                int r1 = circles[j][2];\n                if ((x1 - x) * (x1 - x) + (y1 - y) * (y1 - y) <= (r+r1)*(r+r1))\n                {\n                    dsu.Merge(i, j);\n                }\n            }\n        }\n        // for (int i = 0; i < n+4; i++)\n        // {\n        //     Console.WriteLine(dsu.Root(i));\n        // }\n        if (\n            dsu.Root(n) == dsu.Root(n+3) ||\n            dsu.Root(n+1) == dsu.Root(n+2) ||\n            dsu.Root(n+1) == dsu.Root(n+3) || \n            dsu.Root(n) == dsu.Root(n+2)\n        )\n        {\n            return false;\n        }\n        return true;\n    }\n\n    public class DSU\n    {\n        public int[] Parents;\n        public int[] Ranks;\n        public DSU(int n)\n        {\n            Parents = new int[n];\n            Ranks = new int[n];\n            for (int i = 0; i < n; i++)\n            {\n                Parents[i] = i;\n                Ranks[i] = 1;\n            }\n        }\n\n        public int Root(int x)\n        {\n            if (x == Parents[x])\n            {\n                return x;\n            }\n            Parents[x] = Root(Parents[x]);\n            return Parents[x];\n        }\n\n        public void Merge(int x, int y)\n        {\n            int rx = Root(x);\n            int ry = Root(y);\n            if (rx == ry)\n            {\n                return;\n            }\n            if (Ranks[rx] >= Ranks[ry])\n            {\n                Parents[ry] = rx;\n                Ranks[ry] += Ranks[rx];\n            }\n            else\n            {\n                Parents[rx] = ry;\n                Ranks[rx] += Ranks[ry];\n            }\n        }\n    }\n}",
    "submit_ts": "1722137468",
    "subm_id": "1335764665"
}