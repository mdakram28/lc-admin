{
    "username": "Grind_Like_GM",
    "submission": "class Solution {\n    fun maximumValueSum(board: Array<IntArray>): Long {\n        val (rows, cols) = board.size to board[0].size\n        val bestValues = Array(rows) { LongArray(3) { Long.MIN_VALUE } }\n        val bestColumns = Array(rows) { IntArray(3) { -1 } }\n        var maxSum: Long = Long.MIN_VALUE\n\n        // Fill bestValues and bestColumns arrays\n        populateBestValuesAndColumns(board, bestValues, bestColumns)\n\n        // Iterate through all combinations of 3 distinct rows\n        for (r1 in 0 until rows) {\n            for (r2 in r1 + 1 until rows) {\n                for (r3 in r2 + 1 until rows) {\n                    maxSum = maxOf(maxSum, findMaxSum(bestValues, bestColumns, r1, r2, r3))\n                }\n            }\n        }\n\n        return maxSum\n    }\n\n    private fun populateBestValuesAndColumns(\n        board: Array<IntArray>,\n        bestValues: Array<LongArray>,\n        bestColumns: Array<IntArray>\n    ) {\n        for (i in board.indices) {\n            val colValues = getTopColumnValues(board[i])\n            updateBestValuesAndColumns(colValues, bestValues[i], bestColumns[i])\n        }\n    }\n\n    private fun getTopColumnValues(row: IntArray): List<Pair<Long, Int>> {\n        return row.mapIndexed { index, value -> value.toLong() to index }\n            .sortedByDescending { it.first }\n            .take(3)\n    }\n\n    private fun updateBestValuesAndColumns(\n        colValues: List<Pair<Long, Int>>,\n        values: LongArray,\n        columns: IntArray\n    ) {\n        colValues.forEachIndexed { index, pair ->\n            if (index < 3) {\n                values[index] = pair.first\n                columns[index] = pair.second\n            }\n        }\n    }\n\n    private fun findMaxSum(\n        bestValues: Array<LongArray>,\n        bestColumns: Array<IntArray>,\n        r1: Int,\n        r2: Int,\n        r3: Int\n    ): Long {\n        var localMaxSum = Long.MIN_VALUE\n        for (i in 0 until 3) {\n            for (j in 0 until 3) {\n                if (bestColumns[r2][j] == bestColumns[r1][i]) continue\n                for (k in 0 until 3) {\n                    if (bestColumns[r3][k] == bestColumns[r1][i] || bestColumns[r3][k] == bestColumns[r2][j]) continue\n                    localMaxSum = maxOf(localMaxSum, bestValues[r1][i] + bestValues[r2][j] + bestValues[r3][k])\n                }\n            }\n        }\n        return localMaxSum\n    }\n}\n",
    "submit_ts": "1723910365",
    "subm_id": "1359227702"
}