{
    "username": "tiwarishash",
    "submission": "class Solution {\npublic:\n    long long minimumCost(int m, int n, vector<int>& horizontalCut, vector<int>& verticalCut) {\n        // Sort the cuts in descending order\n        sort(horizontalCut.rbegin(), horizontalCut.rend());\n        sort(verticalCut.rbegin(), verticalCut.rend());\n\n        int hIndex = 0, vIndex = 0;\n        long long horizontalPieces = 1, verticalPieces = 1;\n        long long totalCost = 0;\n\n        // Use a greedy approach to always make the most expensive cut first\n        while (hIndex < horizontalCut.size() && vIndex < verticalCut.size()) {\n            if (horizontalCut[hIndex] >= verticalCut[vIndex]) {\n                totalCost += static_cast<long long>(horizontalCut[hIndex]) * verticalPieces;\n                hIndex++;\n                horizontalPieces++;\n            } else {\n                totalCost += static_cast<long long>(verticalCut[vIndex]) * horizontalPieces;\n                vIndex++;\n                verticalPieces++;\n            }\n        }\n\n        // Add the remaining cuts if there are any left\n        while (hIndex < horizontalCut.size()) {\n            totalCost += static_cast<long long>(horizontalCut[hIndex]) * verticalPieces;\n            hIndex++;\n        }\n\n        while (vIndex < verticalCut.size()) {\n            totalCost += static_cast<long long>(verticalCut[vIndex]) * horizontalPieces;\n            vIndex++;\n        }\n\n        return totalCost;\n    }\n};\n",
    "submit_ts": "1720925339",
    "subm_id": "1320251331"
}