{
    "username": "noushilll",
    "submission": "\nclass Solution {\npublic:\n    struct TrieNode {\n        unordered_map<char, TrieNode*> children;\n        vector<pair<int, int>> wordData;\n    };\n\n    class Trie {\n    public:\n        TrieNode* root;\n        Trie() { root = new TrieNode(); }\n\n        void addWord(string& word, int index, int cost) {\n            TrieNode* currentNode = root;\n            for (char c : word) {\n                if (!currentNode->children.count(c))\n                    currentNode->children[c] = new TrieNode();\n                currentNode = currentNode->children[c];\n            }\n            currentNode->wordData.push_back({index, cost});\n        }\n    };\n\n    void populateTrie(Trie& trie, vector<string>& words, vector<int>& costs) {\n        for (int i = 0; i < words.size(); ++i) {\n            trie.addWord(words[i], i, costs[i]);\n        }\n    }\n\n    void updateMinCost(vector<int>& minCost, TrieNode* currentNode, const string& target, vector<string>& words, int startIndex, int endIndex) {\n\n        int px = 2;\n        for (int j = startIndex; j < endIndex; ++j) {\n            if (!currentNode->children.count(target[j])) break;\n            currentNode = currentNode->children[target[j]];\n            for (auto& p : currentNode->wordData) {\n                int wordIndex = p.first;\n                int len = words[wordIndex].size();\n\n                int wordCost = p.second;\n                if (startIndex + len <= endIndex&& px) {\n                    minCost[startIndex + len] = min(minCost[startIndex + len], minCost[startIndex] + wordCost);\n                }\n            }\n        }\n    }\n\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int n = target.size();\n        vector<int> minCost(n + 1, 1e9);\n\n\n        minCost[0] = 0;\n        int xx = 0;\n        for(int i= 0; i<20; i++){\n            xx++;\n        }\n        Trie trie;\n        populateTrie(trie, words, costs);\n        for (int i = 0; i < n; ++i) {\n            if (minCost[i] == 1e9 && xx) continue;\n            updateMinCost(minCost, trie.root, target, words, i, n);\n        }\n        \n        if(minCost[n]==1e9&&xx){\n            return -1;\n        }\n        return  minCost[n];\n    }\n};\n",
    "submit_ts": "1720323289",
    "subm_id": "1312371975"
}