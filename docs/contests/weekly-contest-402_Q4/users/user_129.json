{
    "username": "0x3f66616e",
    "submission": "impl Solution {\n    pub fn count_of_peaks(mut nums: Vec<i32>, queries: Vec<Vec<i32>>) -> Vec<i32> {\n        let n = nums.len();\n        let mut tr = Fenwick::new(n);\n        let mut ispeak = vec![false; n];\n        for i in 1..n - 1 {\n            if nums[i - 1] < nums[i] && nums[i] > nums[i + 1] {\n                tr.inc(i, 1);\n                ispeak[i] = true;\n            }\n        }\n        \n        let mut ret = vec![];\n        for q in queries.iter() {\n            if q[0] == 1 {\n                let (l, r) = (q[1] as usize, q[2] as usize);\n                if r + 1 - l <= 2 {\n                    ret.push(0);\n                } else {\n                    ret.push(tr.query(l + 1, r));\n                }\n                //println!(\"{:?} {}\", ispeak, tr.query(l, r + 1));\n            } else {\n                let (i, v) = (q[1] as usize, q[2]);\n                nums[i] = v;\n                for j in [i.wrapping_sub(1), i, i + 1] {\n                    if j >= n {\n                        continue;\n                    }\n                    if 0 < j && j < n - 1 {\n                        let isp = nums[j - 1] < nums[j] && nums[j] > nums[j + 1];\n                        if ispeak[j] != isp {\n                            ispeak[j] = isp;\n                            if isp {\n                                tr.inc(j, 1);\n                            } else {\n                                tr.inc(j, -1);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        \n        ret\n    }\n}\n\nstruct Fenwick {\n    arr: Vec<i32>\n}\n\nimpl Fenwick {\n    pub fn new(n: usize) -> Self {\n        Self { arr: vec![0; n] }\n    }\n    // query 0..r\n    fn query_(&self, mut r: usize) -> i32 {\n        let mut ret = 0;\n        while r > 0 {\n            ret += self.arr[r - 1];\n            r &= r - 1;\n        }\n        ret\n    }\n    fn query(&self, l: usize, r: usize) -> i32 {\n        self.query_(r) - self.query_(l)\n    }\n    fn inc(&mut self, mut i: usize, v: i32) {\n        i += 1;\n        while i <= self.arr.len() {\n            self.arr[i - 1] += v;\n            i += i & !(i - 1);\n        }\n    }\n}",
    "submit_ts": "1718506462",
    "subm_id": "539775120"
}