{
    "username": "purinliang",
    "submission": "class Solution {\n    vector<vector<int>> G;\n    vector<vector<int>> sum;\n    map<vector<int>, int> dp;\n    int n, m;\n\n    int presum(int i, int j) {\n        if (i >= 0 && j >= 0) {\n            return sum[i][j];\n        }\n        return 0;\n    }\n\n    int rangesum(int u, int d, int l, int r) {\n        return presum(d, r) - presum(d, l - 1) - presum(u - 1, r) +\n               presum(u - 1, l - 1);\n    }\n\npublic:\n    int calc1(int u, int d, int l, int r) {\n        vector<int> key = {u, d, l, r};\n        if (dp.count(key)) {\n            return dp[key];\n        }\n        while (u <= d && rangesum(u, u, l, r) == 0) {\n            ++u;\n        }\n        while (u <= d && rangesum(d, d, l, r) == 0) {\n            --d;\n        }\n        if (u > d) {\n            return 0;\n        }\n        while (l <= r && rangesum(u, d, l, l) == 0) {\n            ++l;\n        }\n        while (l <= r && rangesum(u, d, r, r) == 0) {\n            --r;\n        }\n        int res = (d - u + 1) * (r - l + 1);\n        dp[key] = res;\n        return res;\n    }\n\n    int calc2(int u, int d, int l, int r) {\n        int res = (d - u + 1) * (r - l + 1);\n        for (int i = u; i + 1 <= d; ++i) {\n            int tmp = calc1(u, i, l, r) + calc1(i + 1, d, l, r);\n            res = min(res, tmp);\n        }\n        for (int j = l; j + 1 <= r; ++j) {\n            int tmp = calc1(u, d, l, j) + calc1(u, d, j + 1, r);\n            res = min(res, tmp);\n        }\n        return res;\n    }\n\n    int minimumSum(vector<vector<int>>& grid) {\n        n = grid.size();\n        m = grid[0].size();\n        G = grid;\n        sum.clear();\n        sum.resize(n);\n        dp.clear();\n        for (int i = 0; i < n; ++i) {\n            sum[i].resize(m);\n        }\n/*\ngrid =\n[[1,0,0,1],[0,0,0,0],[1,0,0,0]]\n\u6dfb\u52a0\u5230\u6d4b\u8bd5\u7528\u4f8b\n\u8f93\u51fa\n4\n\u9884\u671f\u7ed3\u679c\n3\n*/\n        for (int i = 0; i < n; ++i) {\n            for (int j = 0; j < m; ++j) {\n                sum[i][j] = G[i][j] + presum(i - 1, j) + presum(i, j - 1) -\n                            presum(i - 1, j - 1);\n            }\n        }\n        int res = n * m;\n        for (int i = 0; i + 1 < n; ++i) {\n            int tmp = calc1(0, i, 0, m - 1) + calc2(i + 1, n - 1, 0, m - 1);\n            res = min(res, tmp);\n            tmp = calc2(0, i, 0, m - 1) + calc1(i + 1, n - 1, 0, m - 1);\n            res = min(res, tmp);\n        }\n        for (int j = 0; j + 1 < m; ++j) {\n            int tmp = calc1(0, n - 1, 0, j) + calc2(0, n - 1, j + 1, m - 1);\n            res = min(res, tmp);\n            tmp = calc2(0, n - 1, 0, j) + calc1(0, n - 1, j + 1, m - 1);\n            res = min(res, tmp);\n        }\n        return res;\n    }\n};",
    "submit_ts": 1719111654.0
}