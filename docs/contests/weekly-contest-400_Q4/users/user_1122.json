{
    "username": "arunikabhattacharya22",
    "submission": "class Solution {\npublic:\n    int seg[4*100005];\nvoid build(int index,int low,int high,vector<int>& a){\n    if(low == high){\n        seg[index] =a[low];\n        return;\n    }\n    int mid =(low+high)/2;\n    build(2*index+1,low,mid,a);\n    build(2*index+2,mid+1,high,a);\n    seg[index] = seg[2*index+1] &  seg[2*index+2];\n}\nint query(int index,int low,int high,int l,int r){\n    if(low >= l && high <= r){\n        return seg[index];\n    }\n    if(high< l || low > r){\n        return INT_MAX;\n\n    }\n    int mid = (low+high)/2;\n    int left = query(2*index+1,low,mid,l,r);\n    int right = query(2*index+2,mid+1,high,l,r);\n    return left & right;\n}\n\n    int minimumDifference(vector<int>& nums, int k) {\n        int n = nums.size();\n        build(0,0,n-1,nums);\n        int ans = INT_MAX;\n    for (int i = 0; i < n; i++) {\n        int l = i - 1, r = n - 1, mid;\n\n       \n        while (r - l > 1) {\n            mid = (l + r) / 2;\n            if (query(0,0,n-1,i, mid) >=k)\n                l = mid;\n            else\n                r = mid;\n        }\n        if (l != i - 1)\n            ans = min(ans, abs(query(0,0,n-1,i, l)-k));\n        \n        ans = min(ans, abs(k -query(0,0,n-1,i, r)));\n    }\n        return ans;\n    }\n};",
    "submit_ts": 1717300009.0
}