{
    "username": "adiroy2",
    "submission": "class SegTree {\npublic:\n    SegTree(const vector<int>& peak) : n(peak.size()) {\n        tree.resize(4 * n, 0);\n        build(peak, 0, 0, n - 1);\n    }\n\n    void update(int idx, int value, const vector<int>& nums) {\n        update(0, 0, n - 1, idx, nums);\n    }\n\n    int query(int l, int r) {\n        return query(0, 0, n - 1, l, r);\n    }\n\nprivate:\n    int n;\n    vector<int> tree;\n\n    void build(const vector<int>& peak, int node, int start, int end) {\n        if (start == end) {\n            tree[node] = peak[start];\n        } else {\n            int mid = (start + end) / 2;\n            build(peak, 2 * node + 1, start, mid);\n            build(peak, 2 * node + 2, mid + 1, end);\n            tree[node] = tree[2 * node + 1] + tree[2 * node + 2];\n        }\n    }\n\n    void update(int node, int start, int end, int idx, const vector<int>& nums) {\n        if (start == end) {\n            tree[node] = (idx > 0 && idx < n - 1 && nums[idx] > nums[idx - 1] && nums[idx] > nums[idx + 1]) ? 1 : 0;\n        } else {\n            int mid = (start + end) / 2;\n            if (idx <= mid) {\n                update(2 * node + 1, start, mid, idx, nums);\n            } else {\n                update(2 * node + 2, mid + 1, end, idx, nums);\n            }\n            tree[node] = tree[2 * node + 1] + tree[2 * node + 2];\n        }\n    }\n\n    int query(int node, int start, int end, int l, int r) {\n        if (r < start || end < l) {\n            return 0;\n        }\n        if (l <= start && end <= r) {\n            return tree[node];\n        }\n        int mid = (start + end) / 2;\n        int left = query(2 * node + 1, start, mid, l, r);\n        int right = query(2 * node + 2, mid + 1, end, l, r);\n        return left + right;\n    }\n};\n\nclass Solution {\npublic:\n    vector<int> countOfPeaks(vector<int>& nums, vector<vector<int>>& queries) {\n        int n = nums.size();\n        vector<int> peak(n, 0);\n\n        for (int i = 1; i < n - 1; ++i) {\n            if (nums[i] > nums[i - 1] && nums[i] > nums[i + 1])peak[i] = 1;\n        }\n\n        SegTree segTree(peak);\n        vector<int> result;\n\n        for (auto& i: queries) {\n            if (i[0] == 1) {\n                int li = i[1], ri = i[2];\n                result.push_back(segTree.query(li + 1, ri - 1));  \n            } else if (i[0] == 2) {\n                int index = i[1], value = i[2];\n                nums[index] = value;\n\n                for (int i = max(1, index - 1); i <= min(n - 2, index + 1); ++i) {\n                    segTree.update(i, value, nums);\n                }\n            }\n        }\n\n        return result;\n    }\n};\n",
    "submit_ts": 1718507843.0
}