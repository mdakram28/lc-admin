{
    "username": "SohamKanji",
    "submission": "class Solution {\npublic:\nbool isKthBitSet(int n, int k)\n{\n    if (n & (1 << (k - 1))) return true;\n    return false;\n}\n    void buildTree(int ss, int se, int idx, vector<int>& v, vector<int>& st) {\n        if(ss==se) {\n            st[idx] = v[ss];\n            return;\n        }\n        int m = ss+(se-ss)/2;\n        buildTree(ss, m, 2*idx+1, v, st);\n        buildTree(m+1, se, 2*idx+2, v, st);\n        st[idx] = (st[2*idx+1] & st[2*idx+2]);\n    }\n    int getMax(int ss, int se, int qs, int qe, int i, vector<int>& st) {\n        if(ss>qe || se<qs) {\n            return INT_MAX;\n        }\n        if(ss>=qs && se<=qe) {\n            return st[i];\n        }\n        int m = ss + (se-ss)/2;\n        return (getMax(ss, m, qs, qe, 2*i+1, st)&getMax(m+1, se, qs, qe, 2*i+2, st));\n    }\n    long long countSubarrays(vector<int>& nums, int k) {\n        int n = nums.size();\n        vector<int> st(4*n);\n        buildTree(0, n-1, 0, nums, st);\n        long long ans = 0;\n        for(int i=0; i<n; i++) {\n            int low = i, high = n-1;\n            int left = -1;\n            while(low<=high) {\n                int mid = low + (high-low)/2;\n                int val = getMax(0, n-1, i, mid, 0, st);\n                bool flag = true;\n                for(int i=31; i>=0; i--) {\n                    int b1 = isKthBitSet(k, i+1);\n                    int b2 = isKthBitSet(val, i+1);\n                    if(b1 && !b2) {\n                        flag = false;\n                        break;\n                    }\n                }\n                if(flag) {\n                    if(val == k) {\n                        left = mid;\n                        high = mid-1;\n                    } else {\n                        low = mid+1;\n                    }\n                } else {\n                    high = mid-1;\n                }\n            }\n            if(left == -1) {\n                continue;\n            }\n            low = i;\n            high = n-1;\n            int right;\n            while(low<=high) {\n                int mid = low + (high-low)/2;\n                int val = getMax(0, n-1, i, mid, 0, st);\n                bool flag = true;\n                for(int i=31; i>=0; i--) {\n                    int b1 = isKthBitSet(k, i+1);\n                    int b2 = isKthBitSet(val, i+1);\n                    if(b1 && !b2) {\n                        flag = false;\n                        break;\n                    }\n                }\n                if(flag) {\n                    if(val == k) {\n                        right = mid;\n                    } \n                    low = mid+1;\n                } else {\n                    high = mid-1;\n                }\n            }\n            ans += right - left + 1;\n        }\n        return ans;\n    }\n};",
    "submit_ts": "1720280960",
    "subm_id": "1311808192"
}