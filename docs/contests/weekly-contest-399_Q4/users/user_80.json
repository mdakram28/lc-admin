{
    "username": "xymabinogi",
    "submission": "using i64 = long long;\n\n\ntemplate<class Info,\n    class Merge = std::plus<Info>>\nstruct SegmentTree {\n    const int n;\n    const Merge merge;\n    std::vector<Info> info;\n    SegmentTree(int n) : n(n), merge(Merge()), info(4 << std::__lg(n)) {}\n    SegmentTree(std::vector<Info> init) : SegmentTree(init.size()) {\n        std::function<void(int, int, int)> build = [&](int p, int l, int r) {\n            if (r - l == 1) {\n                info[p] = init[l];\n                return;\n            }\n            int m = (l + r) / 2;\n            build(2 * p, l, m);\n            build(2 * p + 1, m, r);\n            pull(p);\n        };\n        build(1, 0, n);\n    }\n    void pull(int p) {\n        info[p] = merge(info[2 * p], info[2 * p + 1]);\n    }\n    void modify(int p, int l, int r, int x, const Info &v) {\n        if (r - l == 1) {\n            info[p] = v;\n            return;\n        }\n        int m = (l + r) / 2;\n        if (x < m) {\n            modify(2 * p, l, m, x, v);\n        } else {\n            modify(2 * p + 1, m, r, x, v);\n        }\n        pull(p);\n    }\n    void modify(int p, const Info &v) {\n        modify(1, 0, n, p, v);\n    }\n    Info rangeQuery(int p, int l, int r, int x, int y) {\n        if (l >= y || r <= x) {\n            return Info();\n        }\n        if (l >= x && r <= y) {\n            return info[p];\n        }\n        int m = (l + r) / 2;\n        return merge(rangeQuery(2 * p, l, m, x, y), rangeQuery(2 * p + 1, m, r, x, y));\n    }\n    Info rangeQuery(int l, int r) {  //[l, r)\n        return rangeQuery(1, 0, n, l, r);\n    }\n};\n\nconstexpr i64 inf = 1LL << 50;\n\nstruct Info {\n    std::array<i64, 4> ans;\n    \n    Info() : ans{0LL, 0LL, 0LL, 0LL} {}\n    Info(i64 x, i64 y, i64 z, i64 w) : ans{x,y,z,w} {} //[l, r, neither, both]\n};\n\nInfo operator+(const Info &a, const Info &b) {\n    Info c;\n    c.ans[0] = max(a.ans[0] + max(b.ans[0], b.ans[2]), a.ans[3] + b.ans[2]);\n    c.ans[1] = max(b.ans[1] + max(a.ans[1], a.ans[2]), b.ans[3] + a.ans[2]);\n    c.ans[2] = max(a.ans[2] + max(b.ans[2], b.ans[0]), a.ans[1] + b.ans[2]);\n    c.ans[3] = max(a.ans[0] + max(b.ans[1], b.ans[3]), a.ans[3] + b.ans[1]);\n\n    for (int i = 0; i < 4; i++){\n        c.ans[i] = max(0LL, c.ans[i]);\n    }\n\n    return c;\n}\n\n\nclass Solution {\npublic:\n    int maximumSumSubsequence(vector<int>& nums, vector<vector<int>>& queries) {\n        int n = nums.size();\n        vector<Info> vec(n);\n        for (int i = 0; i < n; i++){\n            vec[i] = Info{0, 0, 0, max(0LL, (i64) nums[i])};\n        }\n        SegmentTree<Info> seg(vec);\n        i64 res = 0;\n        for (int i = 0; i < queries.size(); i++){\n            int p = queries[i][0], val = queries[i][1];\n            seg.modify(p, Info(0, 0, 0, max(0LL, (i64) val)));\n            auto cur = seg.rangeQuery(0, n);\n            i64 mx = 0;\n            for (int j = 0; j < 4; j++){\n                mx = max(mx, cur.ans[j]);\n            }\n            res += mx;\n        }\n        return res % 1000000007;\n    }\n};",
    "submit_ts": "1716693327",
    "subm_id": "1268082743"
}