{
    "username": "john801205",
    "submission": "struct UnionJoin {\n    vector<int> parents, ranks;\n    int groups;\n\n    UnionJoin(int n)\n    {\n        groups = n;\n        parents = vector<int>(n);\n        ranks = vector<int>(n, 1);\n\n        for (int i = 0; i < n; i++)\n            parents[i] = i;\n    }\n\n    int find(int i)\n    {\n        if (parents[i] != i)\n            parents[i] = find(parents[i]);\n        return parents[i];\n    }\n\n    void join(int a, int b)\n    {\n        int pa = find(a), pb = find(b);\n        if (pa == pb)\n            return;\n\n        if (ranks[pa] < ranks[pb])\n            swap(pa, pb);\n        else if (ranks[pa] == ranks[pb])\n            ranks[pa]++;\n        \n        parents[pb] = pa;\n        groups--;\n    }\n\n    int getGroups()\n    {\n        return groups;\n    }\n};\n\nclass Solution {\npublic:\n    vector<int> shortestDistanceAfterQueries(int n, vector<vector<int>>& queries) {\n        UnionJoin unionjoin(n-1);\n        vector<int> maximum(n-1);\n        for (int i = 0; i < n-1; i++)\n            maximum[i] = i;\n\n        vector<int> res;\n        for (const auto& query: queries)\n        {\n            if (unionjoin.find(query[0]) != unionjoin.find(query[1]-1))\n            {\n                for (int j = maximum[query[0]]+1; j < query[1]; j = maximum[j]+1)\n                {\n                    unionjoin.join(query[0], j);\n                }\n\n                maximum[query[0]] = max(maximum[query[0]], query[1]-1);\n            }\n            \n            res.push_back(unionjoin.getGroups());\n        }\n\n        return res;\n    }\n};",
    "submit_ts": "1722742180",
    "subm_id": "1343762925"
}