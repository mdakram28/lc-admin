{
    "username": "MerryLeopard",
    "submission": "class Solution {\n    public int minimumDifference(int[] nums, int k) {\n        int n=nums.length;\n        SegmentTree st=new SegmentTree(nums,n);\n        int ans=Integer.MAX_VALUE;\n        for (int i=0;i<n;i++){\n            int s=i,e=n-1;\n            int mid=(s+e)/2;\n            while (s+1<e){\n                mid=(s+e)/2;\n                if (st.query(0,0,n-1,i,mid)>=k)\n                    s=mid;\n                else e=mid;\n            }\n            ans=Math.min(ans,Math.abs(k-st.query(0,0,n-1,i,e)));\n            ans=Math.min(ans,Math.abs(k-st.query(0,0,n-1,i,s)));\n        }\n        return ans;\n    }\n\n}\nclass SegmentTree\n{\n    int[] tree;\n    void build(int node,int start,int end,int a[])\n    {\n        if(start==end)\n        {\n            tree[node]=a[start];\n        }\n        else\n        {\n            int mid=(start+end)/2;\n            build(2*node+1,start,mid,a);\n            build(2*node+2,mid+1,end,a);\n            tree[node]=tree[2*node+1]&tree[2*node+2];\n        }\n    }\n\n    void update(int node,int start,int end,int idx,int val,int a[])\n    {\n\n        if(start==end)\n        {\n            a[idx]=val;\n            tree[node]=val;\n        }\n\n        else\n        {\n            int mid=(start+end)/2;\n            if(idx>=start&&idx<=mid)\n            {\n                update(2*node+1,start,mid,idx,val,a);\n            }\n            else\n            {\n                update(2*node+2,mid+1,end,idx,val,a);\n            }\n            tree[node]=tree[2*node+1]&tree[2*node+2];\n        }\n    }\n    int query(int node,int start,int end,int l,int r)\n    {\n        if(l>end||start>r)\n        {\n            return Integer.MAX_VALUE;\n        }\n        if(l<=start&&r>=end)\n        {\n            return tree[node];\n        }\n        int q1,q2;\n        int mid=(start+end)/2;\n        q1=query(2*node+1,start,mid,l,r);\n        q2=query(2*node+2,mid+1,end,l,r);\n        return q1&q2;\n    }\n    SegmentTree(int[] arr,int n){\n        int x = (int) (Math.ceil(Math.log(n) / Math.log(2)));\n\n        //Maximum size of segment tree\n        int max_size = 2 * (int) Math.pow(2, x) - 1;\n        tree = new int[max_size];\n        build(0,0,n-1,arr);\n    }\n\n}",
    "submit_ts": "1717299874",
    "subm_id": "1274826627"
}