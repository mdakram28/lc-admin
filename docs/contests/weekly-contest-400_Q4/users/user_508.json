{
    "username": "ppv_07122004",
    "submission": "class Solution {\npublic:\n    #define INF INT32_MAX\n\n    // Segment Tree class to perform task optimally\n    class SegmentTree {\n    public:\n        vector<int> tree;\n        int size;\n\n        // Constructor\n        SegmentTree(vector<int>& array) {\n            size = array.size();\n            tree.resize(4 * size);\n            build(array, 0, 0, size - 1);\n        }\n\n        void build(vector<int>& array, int node, int start, int end) {\n            if (start == end) {\n                tree[node] = array[start];\n            } else {\n                int mid = (start + end) / 2;\n                build(array, 2 * node + 1, start, mid);\n                build(array, 2 * node + 2, mid + 1, end);\n                tree[node] = tree[2 * node + 1] & tree[2 * node + 2];\n            }\n        }\n\n        int query(int left, int right) {\n            return query(0, 0, size - 1, left, right);\n        }\n\n        int query(int node, int start, int end, int left, int right) {\n            if (right < start || end < left) {\n                return INF;\n            }\n            if (left <= start && end <= right) {\n                return tree[node];\n            }\n            int mid = (start + end) / 2;\n            int queryLeft = query(2 * node + 1, start, mid, left, right);\n            int queryRight = query(2 * node + 2, mid + 1, end, left, right);\n            return queryLeft & queryRight;\n        }\n    };\n\n    int closestAND(vector<int> array, int threshold) {\n        int arraySize = array.size();\n        SegmentTree segmentTree(array);\n        int result = INF;\n        for (int i = 0; i < arraySize; i++) {\n            int left = i - 1, right = arraySize - 1, mid;\n\n            // binary search implementation\n            while (right - left > 1) {\n                mid = (left + right) / 2;\n                if (segmentTree.query(i, mid) >= threshold)\n                    left = mid;\n                else\n                    right = mid;\n            }\n            if (left != i - 1)\n                result = min(result, abs(segmentTree.query(i, left) - threshold));\n            result = min(result, abs(threshold - segmentTree.query(i, right)));\n        }\n        return result;\n    }\n\n    int minimumDifference(vector<int>& nums, int k) {\n        return closestAND(nums, k);\n    }\n};\n",
    "submit_ts": 1717298680.0
}