{
    "username": "czjnbb",
    "submission": "class Solution:\n    def maxTotalReward(self, rewardValues: List[int]) -> int:\n        \n        from sortedcontainers import SortedList\n        \n        rewardValues = sorted(set(rewardValues))\n        leng = len(rewardValues)\n        \n        if leng <= 2:\n            return sum(rewardValues)\n        \n        res = rewardValues[-1]\n        \n        cover = SortedList()\n        cover.add([0, 0])\n        \n        for r in rewardValues[:-1]:\n            ps = cover.bisect_left([r, -1])\n            for s,e in list(cover[:ps]):\n                if e < r:\n                    ns, ne = s + r, e + r\n                    \n                else:\n                    ns, ne = s + r, r * 2 - 1\n                    \n                if ns > res - 1:\n                    break\n                    \n                if ne >= res - 1:\n                    return res * 2 - 1\n                    \n                \n#                 ne = min(ne, res - 1)\n                \n#                 if ne == res - 1:\n                    \n                                \n                ps2 = cover.bisect_left([ns, ne])\n                if cover[ps2-1][1] < ns - 1:\n                    cover.add([ns, ne])\n                    ps2 += 1\n                else:\n                    if ne <= cover[ps2-1][1]:\n                        continue\n                    else:\n                        cover[ps2-1][1] = ne\n                        \n                while ps2 < len(cover) and cover[ps2][0] <= ne + 1:\n                    _, ne2 = cover.pop(ps2)\n                    cover[ps2-1][1] = max(cover[ps2-1][1], ne2)\n                                \n            \n        return res + cover[-1][-1]\n        \n        ",
    "submit_ts": 1717904915.0
}