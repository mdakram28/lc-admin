{
    "username": "kind-goldbergmhn",
    "submission": "class Solution {\n    public long countSubarrays(int[] nums, int k) {\n        BinaryOperator<Long> op = Long::max;\n        return (long) (logTrick(nums).getOrDefault((long) k,0L));\n    }\n    public static Map<Long, Long> logTrick(int[] nums) {\n        Map<Long, Long> res = new HashMap<>();\n        List<long[]> dp = new ArrayList<>();\n\n        for (int pos = 0; pos < nums.length; pos++) {\n            long cur = nums[pos];\n\n            // \u66f4\u65b0dp\u4e2d\u6240\u6709\u5143\u7d20\n            for (long[] v : dp) {\n                v[2] = v[2] & cur;\n            }\n\n            dp.add(new long[]{pos, pos + 1, cur});\n\n            // \u539f\u5730\u53bb\u91cd\n            int ptr = 0;\n            for (int i = 1; i < dp.size(); i++) {\n                if (dp.get(ptr)[2] != dp.get(i)[2]) {\n                    ptr++;\n                    dp.set(ptr, dp.get(i));\n                } else {\n                    dp.get(ptr)[1] = dp.get(i)[1];\n                }\n            }\n            while (dp.size() > ptr + 1) {\n                dp.remove(dp.size() - 1);\n            }\n\n            // \u7ed3\u679c\u7edf\u8ba1\n            for (long[] v : dp) {\n                res.merge(v[2], v[1] - v[0], Long::sum);\n            }\n        }\n\n        return res;\n    }\n}",
    "submit_ts": "1720279684",
    "subm_id": "544568624"
}