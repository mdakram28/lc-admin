{
    "username": "Tree121",
    "submission": "typedef long long int ll; \nclass Solution {\npublic:\n    int segTree[4000001];\n    \n    int buildTree(vector<int> &arr,int left,int right,int in){\n        if(left == right){\n             segTree[in] = arr[left];\n             //cout << arr[left] << endl;\n             return arr[left];\n        }\n        int mid = (left + right)/2;\n        int left_sum = buildTree(arr,left,mid,2*in+1); \n        int right_sum = buildTree(arr,mid+1,right,2*in+2);\n\n        return segTree[in] = (left_sum&right_sum);\n    }\n    \n  int query(vector<int> &arr,int l,int r,int lef,int righ,int in){\n    //cout << l << \" \" << r << \" \" << lef << \" \" << righ << endl;\n     if(l >= lef && r <= righ){\n         return segTree[in];\n    }\n    else if(righ < l or r < lef){\n         // no overlap;\n         return INT_MAX;\n    }\n    else{\n         int mid = (l+r)/2;\n         int val1 = query(arr,l,mid,lef,righ,2*in+1);\n         int val2 = query(arr,mid+1,r,lef,righ,2*in+2);\n          //cout << val1 << \" \" << val2  << \" \" << endl;\n\n         return (val1&val2);\n    }\n   \n }\n\n int minimumDifference(vector<int>& nums, int k) {\n     buildTree(nums,0,nums.size()-1,0); \n     \n     int mini = INT_MAX;\n     \n     for(int i = 0;i<nums.size();i++){\n         int low = i; \n         int high = nums.size()-1;\n           \n         while(low <= high){\n               int mid = (low + high)/2; \n               int and1 = query(nums,0,nums.size()-1,i,mid,0); \n               mini = min(mini,abs(and1-k)); \n             \n              if(and1 > k){\n                    low = mid+1; \n              }\n              else if(and1 < k){\n                   high = mid-1; \n             }\n             else{\n                  return 0; \n             }\n               \n         }  \n     }\n     \n     return mini; \n        \n  }\n};",
    "submit_ts": "1717298892",
    "subm_id": "1274794813"
}