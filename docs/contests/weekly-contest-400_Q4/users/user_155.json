{
    "username": "philip2207",
    "submission": "class Solution {\n    public int minimumDifference(int[] nums, int k) {\n        int diff = Integer.MAX_VALUE;\n        \n        int[] bits = new int[32];\n        int l = 0;\n        for (int r = 0; r < nums.length; r++) {\n            int num = nums[r];\n            diff = Math.min(diff, Math.abs(k - num));\n            mergeBits(bits, num, 1);\n            // System.out.println(Arrays.toString(bits));\n            \n            int mergedNum = getNum(bits, l, r);\n            // System.out.println(mergedNum);\n            diff = Math.min(diff, Math.abs(k - mergedNum));\n            \n            while (mergedNum < k && l < r) {\n                mergeBits(bits, nums[l], -1);\n                \n                l++;\n                mergedNum = getNum(bits, l, r);\n                \n                diff = Math.min(diff, Math.abs(k - mergedNum));\n            }\n        }\n        return diff;\n    }\n    \n    private void mergeBits(int[] bits, int num, int merge) {\n        int i = 0;\n        while (num > 0) {\n            if (num % 2 == 1) {\n                bits[i] += merge;\n            }\n            num >>= 1;\n            i++;\n        }\n    }\n    \n    private int getNum(int[] bits, int l, int r) {\n        int num = 0;\n        int expectedBits = r - l + 1;\n        for (int i = 31; i >= 0; i--) {\n            num <<= 1;\n            if (bits[i] == expectedBits) {\n                num += 1;\n            }\n        }\n        return num;\n    }\n}",
    "submit_ts": "1717296972",
    "subm_id": "1274725530"
}