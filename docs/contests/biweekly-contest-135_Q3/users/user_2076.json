{
    "username": "anupammalviya",
    "submission": "import java.util.*;\n\npublic class Solution {\n    public static int minChanges(int[] nums, int k) {\n        Map<Integer, List<Integer>> differenceMap = new HashMap<>();\n        List<Integer> maxValueList = new ArrayList<>();\n        int size = nums.length;\n\n        for (int i = 0; i < size / 2; ++i) {\n            int firstNum = nums[i];\n            int secondNum = nums[size - i - 1];\n            int difference = Math.abs(firstNum - secondNum);\n            int maxValue = Math.max(Math.max(firstNum, secondNum), Math.max(k - firstNum, k - secondNum));\n\n            differenceMap.computeIfAbsent(difference, x -> new ArrayList<>()).add(maxValue);\n            maxValueList.add(maxValue);\n        }\n\n        int minChanges = size;\n        Collections.sort(maxValueList);\n\n        for (Map.Entry<Integer, List<Integer>> entry : differenceMap.entrySet()) {\n            int difference = entry.getKey();\n            List<Integer> values = entry.getValue();\n            int lowerBoundIndex = lowerBound(maxValueList, difference);\n            int changesRequired = lowerBoundIndex * 2 + (size / 2 - lowerBoundIndex);\n\n            for (int value : values) {\n                if (value < difference) {\n                    changesRequired -= 2;\n                } else {\n                    changesRequired -= 1;\n                }\n            }\n\n            minChanges = Math.min(minChanges, changesRequired);\n        }\n\n        return minChanges;\n    }\n\n    private static int lowerBound(List<Integer> list, int value) {\n        int low = 0, high = list.size();\n        while (low < high) {\n            int mid = (low + high) / 2;\n            if (list.get(mid) < value) {\n                low = mid + 1;\n            } else {\n                high = mid;\n            }\n        }\n        return low;\n    }\n}",
    "submit_ts": "1721490102",
    "subm_id": "1327473067"
}