{
    "username": "Abhi_Srivastava",
    "submission": "#include <ext/pb_ds/assoc_container.hpp> \nusing namespace __gnu_pbds; \ntypedef tree<int, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update> ordered_set;\n\nclass Solution {\npublic:\n    bool isPeak(vector<int>& nums, int ind) {\n        if (ind <= 0 || ind + 1 >= nums.size())\n            return 0;\n        return ((nums[ind] > nums[ind - 1]) && (nums[ind] > nums[ind + 1]));\n    }\n    vector<int> countOfPeaks(vector<int>& nums, vector<vector<int>>& queries) {\n        ordered_set st;\n        vector<int> res;\n        for (int i = 0; i < nums.size(); i++)\n            if (isPeak(nums, i))\n                st.insert(i);\n        for (auto x : queries) {\n            if (x[0] == 1) {\n                int ans = st.order_of_key(x[2] + 1) - st.order_of_key(x[1]);\n                if (isPeak(nums, x[1]))\n                    ans--;\n                if (x[1] != x[2] && isPeak(nums, x[2]))\n                    ans--;\n                res.push_back(ans);\n            }\n            else {\n                nums[x[1]] = x[2];\n                for (int i = x[1] - 1; i < x[1] + 2; i++) {\n                    if (st.find(i) != st.end()) \n                        st.erase(st.find_by_order(st.order_of_key(i)));\n                    if (isPeak(nums, i))\n                        st.insert(i);\n                }     \n            }\n        }\n        return res;\n    }\n};",
    "submit_ts": "1718507373",
    "subm_id": "1289649541"
}