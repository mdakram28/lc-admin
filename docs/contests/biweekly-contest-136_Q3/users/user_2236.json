{
    "username": "anshulusr",
    "submission": "class Solution:\n    def minFlips(self, grid: List[List[int]]) -> int:\n        # fix quadrants\n        flips = 0\n        row_count = len(grid)\n        col_count = len(grid[0])\n        for row_idx in range(row_count // 2):\n            for col_idx in range(col_count // 2):\n                sum = grid[row_idx][col_idx] + grid[row_idx][col_count - 1 - col_idx] + grid[row_count - 1 - row_idx][col_idx] + grid[row_count - 1 - row_idx][col_count - 1 - col_idx]\n                flips += min(sum, 4 - sum)\n        # fix center element\n        if row_count % 2 == 1 and col_count % 2 == 1:\n            if grid[row_count // 2][col_count // 2] == 1:\n                flips += 1\n        middle_flip_made = False\n        sum = 0\n        # fix middle row\n        if row_count % 2 == 1:\n            for i in range(col_count // 2):\n                sum += grid[row_count // 2][i]\n                if grid[row_count // 2][i] != grid[row_count // 2][col_count - 1 - i]:\n                    middle_flip_made = True\n                    flips += 1\n        # fix middle col\n        if col_count % 2 == 1:\n            for i in range(row_count // 2):\n                sum += grid[i][col_count // 2]\n                if grid[i][col_count // 2] != grid[row_count - 1 - i][col_count // 2]:\n                    grid[0] and grid[1]\n                    middle_flip_made = True\n                    flips += 1\n        print(sum, flips,middle_flip_made)\n        if sum % 2 == 1 and not middle_flip_made:\n            flips += 2\n        return flips\n\n",
    "submit_ts": "1722700049",
    "subm_id": "1343230118"
}