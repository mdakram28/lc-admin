{
    "username": "abc225666",
    "submission": "class Solution {\npublic:\n    void build_child_spread(int current, int parent,\n                            vector<pair<int, int>>& child_spread,\n                            vector<pair<int, int>>& second_child_spread,\n                            vector<vector<int>>& adjs) {\n        pair<int, int> max_spread = {0, -1};\n        pair<int, int> second_spread = {0, -1};\n        for (int next_node : adjs[current]) {\n            if (next_node == parent) {\n                continue;\n            }\n            build_child_spread(next_node, current, child_spread,\n                               second_child_spread, adjs);\n\n            int spread_time = 0;\n            if (next_node % 2) {\n                spread_time = 1;\n            } else {\n                spread_time = 2;\n            }\n\n            int total_spread = spread_time + child_spread[next_node].first;\n\n            // max_spread = max(max_spread, spread_time +\n            // child_spread[next_node]);\n            if (total_spread > max_spread.first) {\n                second_spread = max_spread;\n                max_spread = {total_spread, next_node};\n            } else if (total_spread > second_spread.first) {\n                second_spread = {total_spread, next_node};\n            }\n        }\n\n        child_spread[current] = max_spread;\n        second_child_spread[current] = second_spread;\n    }\n\n    void build_up_spread(int current, int parent,\n                         vector<pair<int, int>>& child_spread,\n                         vector<pair<int, int>>& second_child_spread,\n                         vector<int>& up_spread, vector<vector<int>>& adjs) {\n        int spread_time = 0;\n        if (parent % 2) {\n            spread_time = 1;\n        } else {\n            spread_time = 2;\n        }\n\n        if (parent != -1) {\n            if (child_spread[parent].second != current) {\n                up_spread[current] =\n                    spread_time +\n                    max(up_spread[parent], child_spread[parent].first);\n            } else {\n                up_spread[current] =\n                    spread_time +\n                    max(up_spread[parent], second_child_spread[parent].first);\n            }\n        }\n\n        for (int next_node : adjs[current]) {\n            if (next_node == parent) {\n                continue;\n            }\n            build_up_spread(next_node, current, child_spread,\n                            second_child_spread, up_spread, adjs);\n        }\n    }\n\n    vector<int> timeTaken(vector<vector<int>>& edges) {\n        int n = 0;\n\n        for (auto& edge : edges) {\n            n = max(n, edge[0] + 1);\n            n = max(n, edge[1] + 1);\n        }\n\n        vector<pair<int, int>> max_child_spread(n);\n        vector<pair<int, int>> second_child_spread(n);\n        vector<int> up_spread(n);\n        vector<vector<int>> adjs(n);\n\n        for (auto& edge : edges) {\n            adjs[edge[0]].push_back(edge[1]);\n            adjs[edge[1]].push_back(edge[0]);\n        }\n\n        // dfs first to build child spread\n        build_child_spread(0, -1, max_child_spread, second_child_spread, adjs);\n\n        build_up_spread(0, -1, max_child_spread, second_child_spread, up_spread,\n                        adjs);\n\n        vector<int> ans;\n        for (int i = 0; i < n; ++i) {\n            // cout << \"up: \" << up_spread[i]\n            //      << \", max_child: \" << max_child_spread[i].first << \" \"\n            //      << max_child_spread[i].second\n            //      << \", second_child: \" << second_child_spread[i].first << \" \"\n            //      << second_child_spread[i].second << \"\\n\";\n            int current_ans = max(up_spread[i], max_child_spread[i].first);\n            ans.push_back(current_ans);\n        }\n\n        return ans;\n    }\n};",
    "submit_ts": "1722700026",
    "subm_id": "1343229459"
}