{
    "username": "bald_eagle",
    "submission": "class Solution {\n    public long minimumCost(int m, int n, int[] horizontalCut, int[] verticalCut) {\n        List<int[]> cuts = new ArrayList<>();\n        \n        for (int i = 0; i < horizontalCut.length; i++) {\n            cuts.add(new int[]{horizontalCut[i], 'h'});\n        }\n        \n        for (int j = 0; j < verticalCut.length; j++) {\n            cuts.add(new int[]{verticalCut[j], 'v'});\n        }\n        \n        cuts.sort((a, b) -> b[0] - a[0]);\n        \n        int horizontalPieces = 1; \n        int verticalPieces = 1;\n        long totalCost = 0; \n        \n        for (int[] cut : cuts) {\n            int cost = cut[0];\n            char type = (char) cut[1];\n            \n            if (type == 'h') {\n                totalCost += (long) cost * verticalPieces;\n                horizontalPieces++;\n            } else {\n                totalCost += (long) cost * horizontalPieces;\n                verticalPieces++;\n            }\n            \n        }\n        \n        return totalCost;\n    }\n}",
    "submit_ts": "1720925841",
    "subm_id": "1320267894"
}