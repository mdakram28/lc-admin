{
    "username": "CapLevi10",
    "submission": "class Solution {\n    \n    int calculateMaxLenWithDiff(vector<vector<int>>& dp, vector<int>& prevMaxLenWithDiff, int i, int diff) {\n    int maxLen = 1;\n    for (int prevDiff = 0; prevDiff < diff; prevDiff++) {\n        maxLen = max(maxLen, 1 + prevMaxLenWithDiff[prevDiff]);\n    }\n    return maxLen;\n}\n\nint calculateMaxLenWithNumAndDiff(vector<unordered_map<int, int>>& prevMaxLenWithNumAndDiff, int num, int diff) {\n    if (prevMaxLenWithNumAndDiff[diff].find(num) != prevMaxLenWithNumAndDiff[diff].end()) {\n        return 1 + prevMaxLenWithNumAndDiff[diff][num];\n    }\n    return 1;\n}\n    \npublic:\n    int maximumLength(vector<int>& nums, int maxDiff) {\n    int n = nums.size();\n    vector<vector<int>> dp(n, vector<int>(maxDiff + 1, 1));\n    int maxLen = 1;\n\n    auto updateMaxLen = [&](int len) {\n        maxLen = max(maxLen, len);\n    };\n\n    vector<int> prevMaxLenWithDiff(maxDiff + 1, -1);\n    vector<unordered_map<int, int>> prevMaxLenWithNumAndDiff(maxDiff + 1);\n\n    for (int i = 0; i < n; i++) {\n        for (int diff = 0; diff <= maxDiff; diff++) {\n            int maxLenWithDiff = calculateMaxLenWithDiff(dp, prevMaxLenWithDiff, i, diff);\n            int maxLenWithNumAndDiff = calculateMaxLenWithNumAndDiff(prevMaxLenWithNumAndDiff, nums[i], diff);\n            dp[i][diff] = max(maxLenWithDiff, maxLenWithNumAndDiff);\n            updateMaxLen(dp[i][diff]);\n        }\n        for (int diff = 0; diff <= maxDiff; diff++) {\n            prevMaxLenWithDiff[diff] = max(prevMaxLenWithDiff[diff], dp[i][diff]);\n            prevMaxLenWithNumAndDiff[diff][nums[i]] = max(prevMaxLenWithNumAndDiff[diff][nums[i]], dp[i][diff]);\n        }\n    }\n\n        return maxLen;\n    }\n\n};",
    "submit_ts": 1717861943.0
}