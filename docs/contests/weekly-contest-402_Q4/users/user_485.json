{
    "username": "alissanguyen",
    "submission": "/**\n * @param {number[]} nums\n * @param {number[][]} queries\n * @return {number[]}\n */\nvar countOfPeaks = function(nums, queries) {\n    class SegmentTree {\n        constructor(nums) {\n            this.nums = nums;\n            this.n = nums.length;\n            this.tree = new Array(4 * this.n).fill(0);\n            this.build(0, 0, this.n - 1);\n        }\n\n        build(node, start, end) {\n            if (start === end) {\n                if (start > 0 && start < this.n - 1 && this.nums[start - 1] < this.nums[start] && this.nums[start] > this.nums[start + 1]) {\n                    this.tree[node] = 1;\n                } else {\n                    this.tree[node] = 0;\n                }\n            } else {\n                const mid = Math.floor((start + end) / 2);\n                const leftChild = 2 * node + 1;\n                const rightChild = 2 * node + 2;\n                this.build(leftChild, start, mid);\n                this.build(rightChild, mid + 1, end);\n                this.tree[node] = this.tree[leftChild] + this.tree[rightChild];\n            }\n        }\n\n        update(node, start, end, idx) {\n            if (start === end) {\n                if (start > 0 && start < this.n - 1 && this.nums[start - 1] < this.nums[start] && this.nums[start] > this.nums[start + 1]) {\n                    this.tree[node] = 1;\n                } else {\n                    this.tree[node] = 0;\n                }\n            } else {\n                const mid = Math.floor((start + end) / 2);\n                const leftChild = 2 * node + 1;\n                const rightChild = 2 * node + 2;\n                if (start <= idx && idx <= mid) {\n                    this.update(leftChild, start, mid, idx);\n                } else {\n                    this.update(rightChild, mid + 1, end, idx);\n                }\n                this.tree[node] = this.tree[leftChild] + this.tree[rightChild];\n            }\n        }\n\n        query(node, start, end, l, r) {\n            if (r < start || end < l) {\n                return 0;\n            }\n            if (l <= start && end <= r) {\n                return this.tree[node];\n            }\n            const mid = Math.floor((start + end) / 2);\n            const leftChild = 2 * node + 1;\n            const rightChild = 2 * node + 2;\n            const leftQuery = this.query(leftChild, start, mid, l, r);\n            const rightQuery = this.query(rightChild, mid + 1, end, l, r);\n            return leftQuery + rightQuery;\n        }\n    }\n\n    const segmentTree = new SegmentTree(nums);\n    const result = [];\n\n    for (const query of queries) {\n        if (query[0] === 1) {\n            const [_, left, right] = query;\n            result.push(segmentTree.query(0, 0, segmentTree.n - 1, left + 1, right - 1));\n        } else if (query[0] === 2) {\n            const [_, index, value] = query;\n            nums[index] = value;\n            segmentTree.update(0, 0, segmentTree.n - 1, index);\n            if (index > 0) {\n                segmentTree.update(0, 0, segmentTree.n - 1, index - 1);\n            }\n            if (index < nums.length - 1) {\n                segmentTree.update(0, 0, segmentTree.n - 1, index + 1);\n            }\n        }\n    }\n\n    return result;\n};",
    "submit_ts": "1718506446",
    "subm_id": "1289619324"
}