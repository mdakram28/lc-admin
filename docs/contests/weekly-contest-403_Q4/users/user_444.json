{
    "username": "_priyanshu_101_",
    "submission": "class Solution {\npublic:\n    \n    int get (int r, int c, vector <vector<int>> grid) {\n        int n = grid.size(), m = grid[0].size();\n        vector <int> up(n);\n        int minrow = INT_MAX, maxrow = INT_MIN, mincol = INT_MAX, maxcol = INT_MIN;\n        for (int i = 0; i < n; i ++) {\n            for (int j = 0; j < m; j ++) {\n                if (i <= r && j <= c) grid[i][j] = 0;\n                if (grid[i][j] == 1) {\n                    minrow = min(minrow, i);\n                    maxrow = max(maxrow, i);\n                    maxcol = max(maxcol, j);\n                    mincol = min(mincol, j);\n                }\n                if (minrow != INT_MAX) {\n                    up[i] = (maxrow - minrow + 1) * (maxcol - mincol + 1);\n                }\n            }\n        }\n        minrow = INT_MAX, maxrow = INT_MIN, mincol = INT_MAX, maxcol = INT_MIN;\n        int ans = n * m;\n        ans = min(ans, up[n - 1]);\n        for (int i = n - 1; i >= 0; i --) {\n            for (int j = m - 1; j >= 0; j --) {\n                if (grid[i][j] == 1) {\n                    minrow = min(minrow, i);\n                    maxrow = max(maxrow, i);\n                    maxcol = max(maxcol, j);\n                    mincol = min(mincol, j);\n                }\n                \n            }\n            if (i > 0 && minrow != INT_MAX) {\n                ans = min(ans, up[i - 1] +  (maxrow - minrow + 1) * (maxcol - mincol + 1));\n            }\n        }\n        minrow = INT_MAX, maxrow = INT_MIN, mincol = INT_MAX, maxcol = INT_MIN;\n        vector <int> left(m);\n        for (int j = 0; j < m; j ++) {\n            for (int i = 0; i < n; i ++) {\n                 if (grid[i][j] == 1) {\n                    minrow = min(minrow, i);\n                    maxrow = max(maxrow, i);\n                    maxcol = max(maxcol, j);\n                    mincol = min(mincol, j);\n                }\n                if (minrow != INT_MAX)\n                    left[j] = (maxrow - minrow + 1) * (maxcol - mincol + 1);\n            }   \n        }\n        minrow = INT_MAX, maxrow = INT_MIN, mincol = INT_MAX, maxcol = INT_MIN;\n        for (int j = m - 1; j >= 0; j --) {\n            for (int i = n - 1; i >= 0; i --) {\n                if (grid[i][j] == 1) {\n                    minrow = min(minrow, i);\n                    maxrow = max(maxrow, i);\n                    maxcol = max(maxcol, j);\n                    mincol = min(mincol, j);\n                }\n            }\n            if (j > 0 && minrow != INT_MAX) {\n                 ans = min(ans, left[j - 1] +  (maxrow - minrow + 1) * (maxcol - mincol + 1));\n            }\n        }\n        return ans;\n    }\n    \n    int minimumSum(vector<vector<int>>& grid) {\n        int n = grid.size(), m = grid[0].size();\n        vector <vector<int>> minrow(n, vector <int> (m, INT_MAX));\n        vector <vector<int>> mincol(n, vector <int> (m, INT_MAX));\n        vector <vector<int>> maxrow(n, vector <int> (m, INT_MIN));\n        vector <vector<int>> maxcol(n, vector <int> (m, INT_MIN));\n        int ans = get(- 1, -1, grid);\n        ans = min(ans, n * m);\n        for (int i = 0; i < n; i ++) {\n            for (int j = 0; j < m; j ++) {\n                if (grid[i][j] == 1) {\n                    minrow[i][j] = maxrow[i][j] = i;\n                    mincol[i][j] = maxcol[i][j] = j;\n                }\n                if (j - 1 >= 0) {\n                    minrow[i][j] = min(minrow[i][j], minrow[i][j - 1]);\n                    mincol[i][j] = min(mincol[i][j], mincol[i][j - 1]);\n                    maxrow[i][j] = max(maxrow[i][j], maxrow[i][j - 1]);\n                    maxcol[i][j] = max(maxcol[i][j], maxcol[i][j - 1]);\n                }\n                if (i - 1 >= 0) {\n                    minrow[i][j] = min(minrow[i][j], minrow[i - 1][j]);\n                    mincol[i][j] = min(mincol[i][j], mincol[i - 1][j]);\n                    maxrow[i][j] = max(maxrow[i][j], maxrow[i - 1][j]);\n                    maxcol[i][j] = max(maxcol[i][j], maxcol[i - 1][j]);\n                }\n                if (minrow[i][j] == INT_MAX && mincol[i][j] == INT_MAX) {\n                    continue;\n                }\n                int cur = (i - minrow[i][j] + 1) * (j - mincol[i][j] + 1) + get(i, j, grid);\n                ans = min(ans, cur);\n            }\n        }\n        // cout << minrow[n - 1][m - 1] << ' ' << maxrow[n - 1][m - 1] << ' ' << mincol[n - 1][m - 1] << ' ' << maxcol[n - 1][m - 1] << '\\n';\n        ans = min(ans, (maxrow[n - 1][m - 1] - minrow[n - 1][m - 1] + 1) * (maxcol[n - 1][m - 1] - mincol[n - 1][m - 1] + 1));\n        return ans;\n    }\n};",
    "submit_ts": 1719113340.0
}