{
    "username": "SkinnySnakeLimb",
    "submission": "class Solution:\n    def timeTaken(self, edges: List[List[int]]) -> List[int]:\n        n = 0\n        for v1, v2, in edges:\n            n = max(n, v1, v2)\n        n += 1\n\n        graph = [[] for _ in range(n)]\n\n        for v1, v2 in edges:\n            graph[v1].append(v2)\n            graph[v2].append(v1)\n\n        times = [0] * n\n        ret = [-1] * n\n\n        def dfs(node, parent):\n            ret = 2 - (node % 2)\n            for nei in graph[node]:\n                if nei == parent:\n                    continue\n                ret = max(ret, 2 - (node % 2) + dfs(nei, node))\n\n            times[node] = ret\n\n            return ret\n\n        vis = [False] * n\n        def reroot(node, parent, biggestOther = 0):\n            if vis[node]:\n                return\n            vis[node] = True\n\n            hp = []\n            for nei in graph[node]:\n                if nei == parent:\n                    continue\n                heappush(hp, times[nei])\n                if len(hp) > 2:\n                    heappop(hp)\n\n            rval = 0\n            for nei in graph[node]:\n                if nei == parent:\n                    rval = max(rval, 2 - (parent % 2) + biggestOther)\n                    continue\n\n                rval = max(rval, times[nei])\n                \n                nbo = (0 if parent == None else biggestOther + 2 - (parent % 2))\n                if len(hp) <= 1:\n                    nbo = max(nbo, 0)\n                elif hp[1] == times[nei]:\n                    nbo = max(nbo, hp[0])\n                else:\n                    nbo = max(nbo, hp[1])\n\n                reroot(nei, node, nbo)\n\n            ret[node] = rval\n                \n        dfs(0, None)\n        reroot(0, None)\n\n        return ret",
    "submit_ts": "1722700244",
    "subm_id": "1343235993"
}