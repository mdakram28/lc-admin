{
    "username": "IceKnight1093",
    "submission": "template<class T, T unit = T()>\nstruct SegTree {\n\tT f(T a, T b) { return a+b; }\n\tvector<T> s; int n;\n\tSegTree(int _n = 0, T def = unit) : s(2*_n, def), n(_n) {}\n\tvoid update(int pos, T val) {\n\t\tfor (s[pos += n] = val; pos /= 2;)\n\t\t\ts[pos] = f(s[pos * 2], s[pos * 2 + 1]);\n\t}\n\tT query(int b, int e) {\n\t\tT ra = unit, rb = unit;\n\t\tfor (b += n, e += n; b < e; b /= 2, e /= 2) {\n\t\t\tif (b % 2) ra = f(ra, s[b++]);\n\t\t\tif (e % 2) rb = f(s[--e], rb);\n\t\t}\n\t\treturn f(ra, rb);\n\t}\n};\n\nclass Solution {\npublic:\n    vector<int> countOfPeaks(vector<int>& a, vector<vector<int>>& qu) {\n        int n = a.size();\n        SegTree<int> seg(n);\n        auto upd = [&] (int i) {\n            if (i <= 0 or i >= n-1) return;\n            if (a[i] > a[i-1] and a[i] > a[i+1]) seg.update(i, 1);\n        };\n        for (int i = 1; i+1 < n; ++i) {\n            if (a[i] > a[i-1] and a[i] > a[i+1]) upd(i);\n        }\n        vector<int> res;\n        for (auto Q : qu) {\n            int type = Q[0];\n            if (type == 1) {\n                int l = Q[1], r = Q[2];\n                if (l+1 < r) res.push_back(seg.query(l+1, r));\n                else res.push_back(0);\n            }\n            else {\n                int i = Q[1], x = Q[2];\n                seg.update(i, 0);\n                if (i+1 < n) seg.update(i+1, 0);\n                if (i > 0) seg.update(i-1, 0);\n                \n                a[i] = x;\n                upd(i-1); upd(i); upd(i+1);\n            }\n        }\n        return res;\n    }\n};",
    "submit_ts": "1718505712",
    "subm_id": "1289591911"
}