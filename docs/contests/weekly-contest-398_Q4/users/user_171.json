{
    "username": "MeetBrahmbhatt",
    "submission": "constexpr int32_t MOD = 1e9 + 7;\n// constexpr int32_t MOD = 998244353;\n\nstruct Mint {\n    int val;\n    Mint(long long v = 0) {\n        if (v < 0) {\n            v = v % MOD + MOD;\n        }\n        if (v >= MOD) {\n            v %= MOD;\n        }\n        val = v;\n    }\n    static int mod_inv(int a, int m = MOD) {\n        int g = m, r = a, x = 0, y = 1;\n        while (r != 0) {\n            int q = g / r;\n            g %= r; swap(g, r);\n            x -= q * y; swap(x, y);\n        }\n        return x < 0 ? x + m : x;\n    }\n    explicit operator int() const {\n        return val;\n    }\n    Mint& operator+=(const Mint &other) {\n        val += other.val;\n        if (val >= MOD) val -= MOD;\n        return *this;\n    }\n    Mint& operator-=(const Mint &other) {\n        val -= other.val;\n        if (val < 0) val += MOD;\n        return *this;\n    }\n    typedef unsigned long long ull;\n    ull fast_mod(ull a, ull b, ull M = MOD) {\n        long long ret = a * b - M * ull(1.L / M * a * b);\n        return ret + M * (ret < 0) - M * (ret >= (long long)M);\n    }\n    Mint& operator*=(const Mint &other) {\n        val = fast_mod((ull) val, other.val);\n        return *this;\n    }\n    Mint& operator/=(const Mint &other) {\n        return *this *= other.inv();\n    }\n    friend Mint operator+(const Mint &a, const Mint &b) { return Mint(a) += b; }\n    friend Mint operator-(const Mint &a, const Mint &b) { return Mint(a) -= b; }\n    friend Mint operator*(const Mint &a, const Mint &b) { return Mint(a) *= b; }\n    friend Mint operator/(const Mint &a, const Mint &b) { return Mint(a) /= b; }\n    Mint& operator++() {\n        val = val == MOD - 1 ? 0 : val + 1;\n        return *this;\n    }\n    Mint& operator--() {\n        val = val == 0 ? MOD - 1 : val - 1;\n        return *this;\n    }\n    Mint operator++(int32_t) { Mint before = *this; ++*this; return before; }\n    Mint operator--(int32_t) { Mint before = *this; --*this; return before; }\n    Mint operator-() const {\n        return val == 0 ? 0 : MOD - val;\n    }\n    bool operator==(const Mint &other) const { return val == other.val; }\n    bool operator!=(const Mint &other) const { return val != other.val; }\n    Mint inv() const {\n        return mod_inv(val);\n    }\n    Mint pow(long long p) const {\n        assert(p >= 0);\n        Mint a = *this, result = 1;\n\n        while (p > 0) {\n            if (p & 1)\n                result *= a;\n\n            a *= a;\n            p >>= 1;\n        }\n        return result;\n    }\n    friend ostream& operator<<(ostream &stream, const Mint &m) {\n        return stream << m.val;\n    }\n    friend istream& operator >> (istream &stream, Mint &m) {\n        return stream >> m.val;\n    }\n};\n\nconst int32_t N = 100;\nMint FAC[N+1], INV[N+1];\nbool done = false;\n\nvoid calc() {\n    if (done) {\n        return;\n    }\n    done = true;    \n   FAC[0] = 1;\n   for (int i = 1; i <= N; i++) {\n      FAC[i] = (FAC[i - 1] * i);\n   }\n   INV[N] = INV[N].mod_inv(FAC[N].val, MOD);\n   for (int i = N - 1; i >= 0; i--) {\n      INV[i] = (INV[i + 1] * (i + 1));\n   }\n}\nMint ncr(int n, int r) {\n   if (r < 0) return 0;\n   if (n < r) return 0;\n   if (r == 0) return 1;\n   Mint a = FAC[n] * INV[r] * INV[n - r];\n   return a;\n}\nclass Solution {\npublic:\n    int waysToReachStair(int k) {\n        calc();\n        int ans = 0;\n        \n        auto get = [&] (int jumps, int back) {\n            assert(back <= jumps + 1);\n            return ncr(jumps + 1, back).val;\n        };\n        \n        for (int i = 0; i < 32; i++) {\n            long long cur = (1LL << i);\n            for (int j = 0; j <= i + 1; j++) {\n                if (cur - j == k) {\n                    ans += get(i, j);\n                }\n            }\n        }\n        return ans;\n    }\n};",
    "submit_ts": 1716087795.0
}