{
    "username": "zhouxiaozhoueric",
    "submission": "class TrieNode:\n    def __init__(self):\n        self.children = {}\n        self.min_cost = float('inf')  # Use infinity as the initial cost\n\nclass Trie:\n    def __init__(self):\n        self.root = TrieNode()\n    \n    def insert(self, word, cost):\n        node = self.root\n        # Insert the word in reverse to facilitate easy suffix matching\n        for char in reversed(word):\n            if char not in node.children:\n                node.children[char] = TrieNode()\n            node = node.children[char]\n        # Store the minimum cost for the word at the end node\n        node.min_cost = min(node.min_cost, cost)\n        \n    def find_min_cost_to_form_target(self, target):\n        n = len(target)\n        dp = [float('inf')] * (n + 1)\n        dp[0] = 0  # Cost to form an empty string is zero\n        \n        for i in range(1, n + 1):\n            node = self.root\n            # Explore the trie backward from the current position in target\n            for j in range(i, 0, -1):\n                char = target[j - 1]\n                if char not in node.children:\n                    break\n                node = node.children[char]\n                if node.min_cost != float('inf'):\n                    dp[i] = min(dp[i], dp[j - 1] + node.min_cost)\n        \n        return dp[n] if dp[n] != float('inf') else -1\n\nclass Solution:\n    def minimumCost(self, target: str, words: List[str], costs: List[int]) -> int:\n        trie = Trie()\n        for word, cost in zip(words, costs):\n            trie.insert(word, cost)\n        return trie.find_min_cost_to_form_target(target)",
    "submit_ts": "1720322036",
    "subm_id": "1312338972"
}