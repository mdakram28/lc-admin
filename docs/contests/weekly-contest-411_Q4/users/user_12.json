{
    "username": "tiger2005",
    "submission": "class Solution {\npublic:\n  vector<long long> countKConstraintSubstrings(string s, int k, vector<vector<int>>& queries) {\n    int n = s.size(), q = queries.size();\n    vector<int> fin(n + 1);\n    int x = 0, y = 0;\n    for (int l = 0, r = -1; l < n;) {\n      while (r != n - 1 && (((s[r + 1] == '0' ? x : y) < k) || ((s[r + 1] == '0' ? y : x) <= k)))\n        (s[++ r] == '0' ? x : y) ++;\n      fin[l] = r + 1;\n      -- (s[l ++] == '0' ? x : y);\n    }\n\n    vector<long long> tr1(n + 1), tr2(n + 1);\n    auto add = [&] (vector<long long> &t, int a, long long x) {\n      while (a <= n) {\n        t[a] += x;\n        a += a & (-a);\n      }\n    };\n\n    auto que = [&] (vector<long long> &t, int a) {\n      long long res = 0;\n      while (a) {\n        res += t[a];\n        a -= a & (-a);\n      }\n      return res;\n    };\n\n    vector<long long> ans(q);\n    vector<vector<pair<int, int>>> rs(n);\n    for (int i = 0; i < q; i ++) {\n      int l = queries[i][0], r = queries[i][1];\n      rs[l].emplace_back(r, i);\n    }\n\n    for (int i = n - 1; i >= 0; i --) {\n      add(tr1, fin[i], 1);\n      add(tr2, fin[i], fin[i]);\n      for (auto [r, id]: rs[i]) {\n        int num = que(tr1, r);\n        long long R = que(tr2, r) + 1ll * (r - i + 1 - num) * (r + 1);\n        long long L = 1ll * (i + r) * (r - i + 1) / 2;\n        ans[id] = R - L;\n      }\n    }\n    return ans;\n  }\n};",
    "submit_ts": "1723949473",
    "subm_id": "556392996"
}