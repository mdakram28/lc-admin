{
    "username": "dry4",
    "submission": "class Solution {\n    private static final int MOD = 1000000007;\n    private static final int MAX_INVERSIONS = 400;\n    \n\n    private Map<Integer, Integer> buildRequirementsMap(int[][] requirements) {\n        Map<Integer, Integer> reqMap = new HashMap<>();\n        for (int[] req : requirements) {\n            reqMap.put(req[0] + 1, req[1]);  \n        }\n        return reqMap;\n    }\n\n    private long[][] computePerm(int n, Map<Integer, Integer> reqMap) {\n        long[][] pre = new long[n + 1][MAX_INVERSIONS + 1];\n        pre[0][0] = 1;\n\n        for (int i = 1; i <= n; i++) {\n            for (int inv = 0; inv <= MAX_INVERSIONS; inv++) {\n                for (int k = 0; k < i; k++) {\n                    int prevInv = inv - k;\n                    if (prevInv >= 0) {\n                        pre[i][inv] = (pre[i][inv] + pre[i - 1][prevInv]) % MOD;\n                    }\n                }\n            }\n\n            if (reqMap.containsKey(i)) {\n                int targetInv = reqMap.get(i);\n                for (int inv = 0; inv <= MAX_INVERSIONS; inv++) {\n                    if (inv != targetInv) {\n                        pre[i][inv] = 0;\n                    }\n                }\n            }\n        }\n\n        return pre;\n    }\n\n    private int solve(int n, long[][] permCounts) {\n        long ans = 0;\n        \n        for (long count : permCounts[n]) {\n            ans = (ans + count) % MOD;\n        }\n        \n        return (int) ans;\n    }\n    \n    public int numberOfPermutations(int n, int[][] requirements) {\n        Map<Integer, Integer> map = buildRequirementsMap(requirements);\n        long[][] permCounts = computePerm(n, map);\n        return solve(n, permCounts);\n    }\n}",
    "submit_ts": 1719071300.0
}