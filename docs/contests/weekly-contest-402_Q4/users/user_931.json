{
    "username": "SSD9797",
    "submission": "class SegmentTree1:\n    def __init__(self, nums: List[int]):\n        # TC: O(n) Space: O(n)\n        self.n = len(nums)\n        self.tree = [0] * 2 * self.n\n        for i in range(self.n):\n            self.tree[i + self.n] = nums[i]\n        for i in range(self.n-1, 0, -1):\n            self.tree[i] = self.tree[2*i] + self.tree[2*i+1]\n        #print('hiii' ,self.tree)\n\n    def update(self, index: int, val: int) -> None:\n        # TC: O(log(n))\n        index += self.n\n        self.tree[index] = val\n        while index > 1:\n            self.tree[index//2] = self.tree[index] + self.tree[index^1]\n            index //= 2\n        #print('updatee' ,self.tree)\n\n\n    def sumRange(self, left: int, right: int) -> int:\n        # TC: O(log(n))\n        left += self.n\n        right += self.n\n        res = 0\n        while left <= right:\n            if left & 1:\n                # if left odd:\n                res += self.tree[left]\n                left += 1\n            if right & 1 ==0:\n                # if right even\n                res += self.tree[right]\n                right -= 1\n            left //= 2\n            right //= 2\n        return res\n        \n\n# Your NumArray object will be instantiated and called as such:\n# obj = NumArray(nums)\n# obj.update(index,val)\n# param_2 = obj.sumRange(left,right)\n\n\nclass Solution:\n    def countOfPeaks(self, nums: List[int], queries: List[List[int]]) -> List[int]:\n        n = len(nums)\n        is_peak = [0]*n\n        \n        def check_peak(idx):\n            if nums[idx]>nums[idx-1] and nums[idx]>nums[idx+1]:\n                return 1\n            else:\n                return 0\n        \n        for i in range(1, n-1):\n            is_peak[i] = check_peak(i)\n        #print('peak ', is_peak)\n        st = SegmentTree1(is_peak)\n        ans = []\n        for q in queries:\n            typ = q[0]\n            \n            if typ==2:\n                nums[q[1]] = q[2]\n                if q[1]>0 and q[1]<n-1:\n                    idx = q[1]\n                    st.update(idx, check_peak(q[1]))\n                if q[1]-1>0 and q[1]-1<n-1:\n                    idx = q[1]-1\n                    st.update(idx, check_peak(q[1]-1))\n                if q[1]+1>0 and q[1]+1<n-1:\n                    idx = q[1]+1\n                    st.update(idx, check_peak(q[1]+1))\n            else:\n                ans.append(st.sumRange(q[1]+1, q[2]-1))\n            #print(nums)\n        return ans\n        \n        \n        \n        ",
    "submit_ts": 1718508517.0
}