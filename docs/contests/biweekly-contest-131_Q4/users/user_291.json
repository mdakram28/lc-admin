{
    "username": "krism_lsy",
    "submission": "class Node:\n    def __init__(self, l, r):\n        self.left = None\n        self.right = None\n        self.l = l\n        self.r = r\n        self.mid = (l + r) >> 1\n        self.v = 0\n        self.add = 0\n\n\nclass SegmentTree:\n    def __init__(self):\n        self.root = Node(1, int(10**5))\n\n    def modify(self, l, r, v, node=None):\n        if l > r:\n            return\n        if node is None:\n            node = self.root\n        if node.l >= l and node.r <= r:\n            node.v = v\n            node.add = v\n            return\n        self.pushdown(node)\n        if l <= node.mid:\n            self.modify(l, r, v, node.left)\n        if r > node.mid:\n            self.modify(l, r, v, node.right)\n        self.pushup(node)\n\n    def query(self, l, r, node=None):\n        if l > r:\n            return 0\n        if node is None:\n            node = self.root\n        if node.l >= l and node.r <= r:\n            return node.v\n        self.pushdown(node)\n        v = 0\n        if l <= node.mid:\n            v = max(v, self.query(l, r, node.left))\n        if r > node.mid:\n            v = max(v, self.query(l, r, node.right))\n        return v\n\n    def pushup(self, node):\n        node.v = max(node.left.v, node.right.v)\n\n    def pushdown(self, node):\n        if node.left is None:\n            node.left = Node(node.l, node.mid)\n        if node.right is None:\n            node.right = Node(node.mid + 1, node.r)\n        if node.add:\n            node.left.v = node.add\n            node.right.v = node.add\n            node.left.add = node.add\n            node.right.add = node.add\n            node.add = 0\nfrom sortedcontainers import SortedList\nclass Solution:\n    def getResults(self, queries: List[List[int]]) -> List[bool]:\n        # print('---------------')\n        a=SortedList([0,10**5])\n        tree = SegmentTree()\n        n=len(queries)\n        res=[]\n       \n        for i in range(n):\n            if queries[i][0]==1:\n                x=queries[i][1]\n                idx=bisect_left(a,x)\n                # print('modify',x,idx,a)\n                tree.modify(x, a[idx], a[idx]-x)\n                tree.modify(a[idx-1]+1, x, x-a[idx-1])\n                # print('nodify',x,a[idx])\n                # print('nodify',a[idx-1],x)\n                a.add(x)\n                # print(tree.query(1,2))\n            else:\n                x,sz=queries[i][1],queries[i][2]\n                idx=bisect_left(a,x)\n                # print('ans1=',x-a[idx-1])\n                # print('ans2=',1,a[idx-1],tree.query(1,a[idx-1]))\n                ans1=x-a[idx-1]\n                ans2=tree.query(1,a[idx-1])\n                # print(x,sz,'idx=',idx,ans1,ans2,a)\n                # print('ans=',max(ans1,ans2))\n                res.append(max(ans1,ans2)>=sz)\n        return res\n                \n                \n                \n        ",
    "submit_ts": 1716651557.0
}