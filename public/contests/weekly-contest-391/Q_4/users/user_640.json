{
    "username": "LeetCoding_Pro",
    "submission": "class Solution\n{\n    public int minimumDistance(int[][] ps)\n    {\n        int minDist = Integer.MAX_VALUE;\n        List<Integer> sums = new ArrayList<>();\n        List<Integer> diffs = new ArrayList<>();\n        for (int[] p : ps)\n        {\n            sums.add(p[0] + p[1]);\n            diffs.add(p[0] - p[1]);\n        }\n        Collections.sort(sums);\n        Collections.sort(diffs);\n        int[] sumAndDiff1 = helper(ps, new int[]{-1, -1});\n        int dist1 = Math.max(sumAndDiff1[0], sumAndDiff1[1]);\n        minDist = Math.min(minDist, dist1);\n        if (sumAndDiff1[0] >= sumAndDiff1[1])\n        {\n            if (sums.get(0) < sums.get(1))\n            {\n                int[] nop = null;\n                for (int[] p : ps)\n                {\n                    if (p[0] + p[1] == sums.get(0))\n                    {\n                        nop = p;\n                        break;\n                    }\n                }\n                int[] sumAndDiff2 = helper(ps, nop);\n                int dist2 = Math.max(sumAndDiff2[0], sumAndDiff2[1]);\n                minDist = Math.min(minDist, dist2);\n            }\n            if (sums.get(sums.size() - 1) > sums.get(sums.size() - 2))\n            {\n                int[] nop = null;\n                for (int[] p : ps)\n                {\n                    if (p[0] + p[1] == sums.get(sums.size() - 1))\n                    {\n                        nop = p;\n                        break;\n                    }\n                }\n                int[] sumAndDiff3 = helper(ps, nop);\n                int dist3 = Math.max(sumAndDiff3[0], sumAndDiff3[1]);\n                minDist = Math.min(minDist, dist3);\n            }\n        }\n        if (sumAndDiff1[0] <= sumAndDiff1[1])\n        {\n            if (diffs.get(0) < diffs.get(1))\n            {\n                int[] nop = null;\n                for (int[] p : ps)\n                {\n                    if (p[0] - p[1] == diffs.get(0))\n                    {\n                        nop = p;\n                        break;\n                    }\n                }\n                int[] sumAndDiff4 = helper(ps, nop);\n                int dist4 = Math.max(sumAndDiff4[0], sumAndDiff4[1]);\n                minDist = Math.min(minDist, dist4);\n            }\n            if (diffs.get(diffs.size() - 1) > diffs.get(diffs.size() - 2))\n            {\n                int[] nop = null;\n                for (int[] p : ps)\n                {\n                    if (p[0] - p[1] == diffs.get(diffs.size() - 1))\n                    {\n                        nop = p;\n                        break;\n                    }\n                }\n                int[] sumAndDiff5 = helper(ps, nop);\n                int dist5 = Math.max(sumAndDiff5[0], sumAndDiff5[1]);\n                minDist = Math.min(minDist, dist5);\n            }\n        }\n        return minDist;\n    }\n    \n    private int[] helper(int[][] ps, int[] nop)\n    {\n        List<Integer> sums = new ArrayList<>();\n        List<Integer> diffs = new ArrayList<>();\n        boolean alreadyRemed = false;\n        for (int[] p : ps)\n        {\n            if (p[0] == nop[0] && p[1] == nop[1] && !alreadyRemed)\n            {\n                alreadyRemed = true;\n                continue;\n            }\n            sums.add(p[0] + p[1]);\n            diffs.add(p[0] - p[1]);\n        }\n        Collections.sort(sums);\n        Collections.sort(diffs);\n        return new int[]{sums.get(sums.size() - 1) - sums.get(0), diffs.get(diffs.size() - 1) - diffs.get(0)};\n    }\n}"
}