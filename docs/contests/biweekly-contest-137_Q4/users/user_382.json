{
    "username": "Ethan Gu",
    "submission": "class Solution {\npublic:\n    int transform(int i, int j, int m) {\n        return m*max(i, j) + min(i, j);\n    }\n    long long maximumValueSum(vector<vector<int>>& board) {\n        int m = board.size(), n = board[0].size();\n        vector<set<pair<long long, int>>> row_maxes(m);\n        vector<set<pair<long long, int>>> col_3_maxes(n);\n        vector<set<pair<long long, int>>> top_3(m*m);\n        multiset<vector<long long>> pre_top_3;\n        for (int j = 0; j < n; j++) {\n            for (int i = 0; i < m; i++) {\n                col_3_maxes[j].insert({board[i][j], i});\n                if (col_3_maxes[j].size() > 3) {\n                    col_3_maxes[j].erase(col_3_maxes[j].begin());\n                }\n            }\n            auto it = col_3_maxes[j].begin();\n            pair<long long, int> cur = *it;\n            pre_top_3.insert({cur.first, cur.second, j});\n            it++;\n            cur = *it;\n            pre_top_3.insert({cur.first, cur.second, j});\n            it++;\n            cur = *it;\n            pre_top_3.insert({cur.first, cur.second, j});\n        }\n        for (int i = 0; i < m; i++) {\n            for (int j = i+1; j < m; j++) {\n                auto it = pre_top_3.rbegin();\n                vector<long long> cur = *it;\n                unordered_set<int> seen;\n                for (int k = 0; k < 3; k++) {\n                    while (cur[1] == i || cur[1] == j || seen.count(cur[2])) {\n                        it++;\n                        cur = *it;\n                    }\n                    top_3[transform(i, j, m)].insert({cur[0], cur[2]});\n                    seen.insert(cur[2]);\n                }\n            }\n        }\n        for (int i = 0; i < m; i++) {\n            for (int j = 0; j < n; j++) {\n                row_maxes[i].insert({board[i][j], j});\n            }\n        }\n        long long res = -1e10;\n        for (int i = 0; i < m; i++) {\n            pair<long long, int> cur_1 = *row_maxes[i].rbegin();\n            for (int j = 0; j < m; j++) {\n                if (i == j) {\n                    continue;\n                }\n                auto it = row_maxes[j].rbegin();\n                while ((*it).second == cur_1.second) {\n                    it++;\n                }\n                pair<long long, int> cur_2 = *it;\n                it = top_3[transform(i, j, m)].rbegin();\n                while ((*it).second == cur_1.second || (*it).second == cur_2.second) {\n                    it++;\n                }\n                pair<long long, int> cur_3 = *it;\n                res = max(res, cur_1.first+cur_2.first+cur_3.first);\n            }\n        }\n        return res;\n    }\n};",
    "submit_ts": "1723909714",
    "subm_id": "1359203002"
}