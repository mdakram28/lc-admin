{
    "username": "donavern",
    "submission": "class Solution {\n    void add(vector<pair<int,int>>& inc, vector<pair<int,int>>& dec, \n        const vector<int>& nums, const vector<int>& target, const int left, const int right)\n    {\n        const int n = nums.size();\n\n        bool started{};\n        bool increasing{};\n        int curr{left}, start{left};\n\n        // cout << left <<\",\"<<right<<endl;\n        while(curr <= right)\n        {\n            if(!started)\n            {\n                if(nums[curr] < target[curr])\n                    increasing = true;\n                else if(nums[curr] > target[curr])\n                    increasing = false;\n                else\n                {\n                    ++curr;\n                    start = curr;\n                    continue;\n                }\n\n                ++curr;\n                started = true;\n            }\n            else\n            {\n                if(increasing)\n                {\n                    if(nums[curr] >= target[curr])\n                    {\n                        // cout << \" add \" << start<<\",\"<<curr-1<<endl;\n                        inc.push_back({start,curr-1});\n                        start = curr;\n                        started = false;\n                    }\n                    else\n                        ++curr;\n                }\n                else\n                {\n                    if(nums[curr] <= target[curr])\n                    {\n                        // cout << \" add \" << start<<\",\"<<curr-1<<endl;\n                        dec.push_back({start,curr-1});\n                        start = curr;\n                        started = false;\n                    }\n                    else\n                        ++curr;\n                }\n            }\n        }\n\n        if(started)\n        {\n            if(nums[right] < target[right])\n                inc.push_back({start,curr-1});\n\n            else\n                dec.push_back({start,curr-1});\n        }\n    }\npublic:\n    long long minimumOperations(vector<int>& nums, vector<int>& target) {\n        // i want to find subarrays where i can increment or decrement fully\n        // then do that by the min diff, then split the rest\n        // hash?\n\n        const int n = nums.size();\n\n        vector<pair<int,int>> inc, dec;\n        add(inc,dec,nums,target,0,n-1);\n\n        long long result{};\n\n        for(int i{}; i < inc.size(); ++i)\n        {\n            const int left = inc[i].first, right = inc[i].second;\n            \n            // find out the most I can increment by, if the subarray will reduce or split\n            long long minDiff = INT_MAX;\n\n            for(int i{left}; i <= right; ++i)\n            {\n                minDiff = min(minDiff,static_cast<long long>(target[i]-nums[i]));\n            }\n\n            // cout << \"inc \" << left <<\",\"<<right<<\" by \"<<minDiff<<endl;\n\n            for(int i{left}; i <= right; ++i)\n            {\n                nums[i] += minDiff;\n            }\n\n            result += minDiff;\n\n            // for(const int i : nums)\n            // {\n            //     cout << i << \",\";\n            // }\n            // cout << endl;\n\n            add(inc,dec,nums,target,left,right);\n        }\n\n        for(int i{}; i < dec.size(); ++i)\n        {\n            const int left = dec[i].first, right = dec[i].second;\n            \n            // find out the most I can increment by, if the subarray will reduce or split\n            long long minDiff = INT_MAX;\n\n            for(int i{left}; i <= right; ++i)\n            {\n                minDiff = min(minDiff,static_cast<long long>(nums[i]-target[i]));\n            }\n\n            // cout << \"dec \" << left <<\",\"<<right<<\" by \" << minDiff<<endl;\n\n            for(int i{left}; i <= right; ++i)\n            {\n                nums[i] -= minDiff;\n            }\n\n            result += minDiff;\n\n            add(inc,dec,nums,target,left,right);\n        }\n\n        // for(const int i : nums)\n        // {\n        //     cout << i << \",\";\n        // }\n\n        return result;\n    }\n};",
    "submit_ts": "1721533003",
    "subm_id": "1327999063"
}