{
    "username": "ayush_kt05",
    "submission": "#pragma GCC optimize (\"Ofast\")\n#pragma GCC target (\"sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx\")\n#pragma GCC optimize (\"-ffloat-store\")\n#pragma GCC optimize (\"O3\", \"unroll-loops\")\n\n#include<bits/stdc++.h>\nusing namespace std;\n\nclass Solution {\npublic:\n    long long countSubarrays(vector<int>& nums, int k) {\n        int arraySize = nums.size();\n        long long subarrayCount = 0;\n        \n        unordered_map<long long, long long> previousResults;\n\n        for (int index = 0; index < arraySize; ++index) {\n            unordered_map<long long, long long> currentResults;\n\n            if (nums[index] == k) {\n                ++subarrayCount;\n                //cout << \"Element equals k at index \" << index << \", incrementing subarrayCount: \" << subarrayCount << endl;\n            }\n            currentResults[nums[index]] = 1;\n\n            for (auto& [andResult, frequency] : previousResults) {\n                long long newAndResult = andResult & nums[index];\n                if (newAndResult == k) {\n                    subarrayCount += frequency;\n                    //cout << \"Found subarray with AND result equal to k, index: \" << index << \", frequency: \" << frequency << \", subarrayCount: \" << subarrayCount << endl;\n                }\n                currentResults[newAndResult] += frequency;\n                //cout << \"Updating currentResults: newAndResult: \" << newAndResult << \", frequency: \" << currentResults[newAndResult] << endl;\n            }\n\n            previousResults = currentResults;\n          \n        }\n        \n        return subarrayCount;\n    }\n};\n\nauto init = []() {\n    ios::sync_with_stdio(0);\n    cin.tie(0);\n    cout.tie(0);\n    return 'c';\n}();\n\n",
    "submit_ts": "1720278987",
    "subm_id": "1311732586"
}