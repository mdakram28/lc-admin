{
    "username": "Klu_2100031404",
    "submission": "import java.util.ArrayList;\nimport java.util.List;\n\nclass Solution {\n    class SegmentTree {\n        int[] tree;\n        int size;\n\n        public SegmentTree(int length) {\n            size = length;\n            tree = new int[4 * length];\n        }\n\n        public void build(int[] peakArray, int start, int end, int nodeIndex) {\n            if (start == end) {\n                tree[nodeIndex] = peakArray[start];\n            } else {\n                int mid = (start + end) / 2;\n                build(peakArray, start, mid, 2 * nodeIndex + 1);\n                build(peakArray, mid + 1, end, 2 * nodeIndex + 2);\n                tree[nodeIndex] = tree[2 * nodeIndex + 1] + tree[2 * nodeIndex + 2];\n            }\n        }\n\n        public void update(int start, int end, int updateIndex, int value, int nodeIndex) {\n            if (start == end) {\n                tree[nodeIndex] = value;\n            } else {\n                int mid = (start + end) / 2;\n                if (updateIndex <= mid) {\n                    update(start, mid, updateIndex, value, 2 * nodeIndex + 1);\n                } else {\n                    update(mid + 1, end, updateIndex, value, 2 * nodeIndex + 2);\n                }\n                tree[nodeIndex] = tree[2 * nodeIndex + 1] + tree[2 * nodeIndex + 2];\n            }\n        }\n\n        public int query(int start, int end, int left, int right, int nodeIndex) {\n            if (right < start || left > end) {\n                return 0;\n            }\n            if (left <= start && right >= end) {\n                return tree[nodeIndex];\n            }\n            int mid = (start + end) / 2;\n            int leftQueryResult = query(start, mid, left, right, 2 * nodeIndex + 1);\n            int rightQueryResult = query(mid + 1, end, left, right, 2 * nodeIndex + 2);\n            return leftQueryResult + rightQueryResult;\n        }\n    }\n\n    private boolean isPeak(int[] nums, int index) {\n        if (index <= 0 || index >= nums.length - 1) return false;\n        return nums[index] > nums[index - 1] && nums[index] > nums[index + 1];\n    }\n\n    public List<Integer> countOfPeaks(int[] nums, int[][] queries) {\n        int length = nums.length;\n        int[] peakArray = new int[length];\n        for (int i = 1; i < length - 1; i++) {\n            peakArray[i] = isPeak(nums, i) ? 1 : 0;\n        }\n        SegmentTree segmentTree = new SegmentTree(length);\n        segmentTree.build(peakArray, 0, length - 1, 0);\n\n        List<Integer> result = new ArrayList<>();\n        for (int[] query : queries) {\n            if (query[0] == 1) {\n                int leftIndex = query[1];\n                int rightIndex = query[2];\n                result.add(segmentTree.query(0, length - 1, leftIndex + 1, rightIndex - 1, 0));\n            } else if (query[0] == 2) {\n                int index = query[1];\n                int newValue = query[2];\n                nums[index] = newValue;\n                for (int i = index - 1; i <= index + 1; i++) {\n                    if (i > 0 && i < length - 1) {\n                        peakArray[i] = isPeak(nums, i) ? 1 : 0;\n                        segmentTree.update(0, length - 1, i, peakArray[i], 0);\n                    }\n                }\n            }\n        }\n        return result;\n    }\n}\n",
    "submit_ts": 1718509337.0
}