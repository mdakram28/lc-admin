{
    "username": "Baozii",
    "submission": "\n\nclass SparseTable:\n    def __init__(self, nums: List[int], func: Callable):\n        self.func = func\n        self.st = [nums]\n        i, n = 1, len(nums)\n        while i << 1 <= n:\n            pre = self.st[-1]\n            self.st.append([func(pre[j], pre[j + i]) for j in range(n - (i << 1) + 1)])\n            i <<= 1\n\n    def query(self, begin: int, end: int):\n        lg = (end - begin + 1).bit_length() - 1\n        return self.func(self.st[lg][begin], self.st[lg][end - (1 << lg) + 1])\n\n\nclass Solution:\n    def countKConstraintSubstrings(self, s: str, k: int, queries: List[List[int]]) -> List[int]:\n        n = len(s)\n        a = [0] * n\n        pre0 = [0]\n        pre1 = [0]\n        for i in range(n):\n            pre0.append(pre0[-1])\n            pre1.append(pre1[-1])\n            if s[i] == \"0\":\n                pre0[-1] += 1\n            else:\n                pre1[-1] += 1\n\n        for i in range(n):\n            left, right = i, n - 1\n            while left <= right:\n                mid = (left + right) // 2\n                if pre0[mid + 1] - pre0[i] > k and pre1[mid + 1] - pre1[i] > k:\n                    right = mid - 1\n                else:\n                    left = mid + 1\n            a[i] = left\n        ans = list()\n        pre = list(accumulate(a, initial=0))\n        st = SparseTable(a, max)\n        for l, r in queries:\n            r += 1\n            t = (r - l) * (r - l + 1) // 2\n            left, right = l, r - 1\n            while left <= right:\n                mid = (left + right) // 2\n                if st.query(l, mid) <= r:\n                    left = mid + 1\n                else:\n                    right = mid - 1\n            num = left - l\n            ans.append(t - (num * r - (pre[left] - pre[l])))\n        return ans\n\n",
    "submit_ts": "1723952443",
    "subm_id": "1359796398"
}