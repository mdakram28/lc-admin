{
    "username": "21211A6643",
    "submission": "class Solution:\n    def minimumCost(self, target: str, words: List[str], costs: List[int]) -> int:\n        from collections import defaultdict\n        word_cost_map = defaultdict(list)\n\n        for word, cost in zip(words, costs):\n            word_cost_map[word].append(cost)\n\n        n = len(target)\n        dp = [float('inf')] * (n + 1)\n        dp[0] = 0\n\n        for i in range(1, n + 1):\n            for word, cost_list in word_cost_map.items():\n                word_len = len(word)\n                if i >= word_len and target[i - word_len:i] == word:\n                    min_cost = min(cost_list) \n                    dp[i] = min(dp[i], dp[i - word_len] + min_cost)\n\n        return dp[n] if dp[n] != float('inf') else -1",
    "submit_ts": "1720321178",
    "subm_id": "1312315692"
}