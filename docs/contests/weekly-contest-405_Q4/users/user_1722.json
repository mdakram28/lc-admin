{
    "username": "sribhargav1345",
    "submission": "struct TrieNode {\n\n    unordered_map<char,TrieNode*> child;\n    int cost;\n    \n    TrieNode() : cost(INT_MAX) {}\n};\n\nvoid InsertWord(TrieNode* root, const std::string& word, int cost) {\n    TrieNode* node = root;\n    for (char c : word) {\n        if (node->child.find(c) == node->child.end()) {\n            node->child[c] = new TrieNode();\n        }\n        node = node->child[c];\n    }\n    node->cost = min(node->cost, cost);\n}\n\nclass Solution {\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n\n        int n = target.length();\n        TrieNode* root = new TrieNode();\n\n        for(int i=0;i<words.size();i++){\n            InsertWord(root, words[i], costs[i]);\n        }\n\n        vector<int> dp(n+1,INT_MAX);\n        dp[0] = 0;\n\n        for(int i=0;i<n;i++) \n        {\n            if (dp[i] == INT_MAX) continue; \n\n            TrieNode* node = root;\n            for(int j=i;j<n;j++) \n            {\n                if (node->child.find(target[j]) == node->child.end()) break;\n                node = node->child[target[j]];\n\n                if (node->cost != INT_MAX) {\n                    dp[j+1] = min(dp[j+1],dp[i]+node->cost);\n                }\n            }\n        }\n\n        if(dp[n]==INT_MAX) return -1;\n        return dp[n];\n\n    }\n};",
    "submit_ts": "1720323984",
    "subm_id": "1312388834"
}