{
    "username": "Vipin Baswan",
    "submission": "class Solution {\npublic:\n    \n    bool checkDiv7(string& s, int j) {\n        int n = s.length();\n        \n        // base case\n        if(j == 1) {\n            int num = stoi(s.substr(0, 2));\n            return num%7 == 0;\n        }\n        \n        // double the last digit by 2, subtract from the remaining number and recurse\n        int dig = s[j] - '0';\n        \n        int num = stoi(s.substr(j-2, 2));\n        num -= (2*dig);\n        \n        char j_1 = s[j-1], j_2 = s[j-2];\n        s[j-1] = (num%10) + '0';\n        num = num/10;\n        s[j-2] = (num%10) + '0';\n        \n        bool ans = checkDiv7(s, j-1);\n        \n        s[j-1] = j_1;\n        s[j-2] = j_2;\n        \n        return ans;\n    }\n    \n    string one(int n) {\n        return string(n, '9');\n    }\n    \n    string two(int n) {\n        string ans(n, '9');\n        ans[0] = ans[n-1] = '8';\n        return ans;\n    }\n    \n    string three(int n) {\n        return string(n, '9');\n    }\n    \n    string four(int n) {\n        if(n <= 4) {\n            return string(n, '8');\n        }\n        string ans(n, '9');\n        ans[0] = ans[1] = ans[n-1] = ans[n-2] = '8';\n        return ans;\n    }\n    \n    string five(int n) {\n        string ans(n, '9');\n        ans[0] = ans[n-1] = '5';\n        return ans;\n    }\n    \n    string six(int n) {\n        if(n <= 2) {\n            return string(n, '6');\n        }\n        string ans(n, '9');\n        \n        ans[0] = ans[n-1] = '8';\n        \n        if(n%2 != 0) {\n            ans[n/2] = '8';\n            return ans;\n        }\n        ans[(n/2)-1] = ans[n/2] = '7';\n        return ans;\n    }\n    \n    string seven(int n) {\n        if(n <= 2) {\n            return string(n, '7');\n        }\n        string ans(n, '9');\n        \n        if(n%2 != 0) {\n            // keep reducing middle digit by 1 and check each number\n            int curr = 9;\n            while(curr >= 0) {\n                ans[n/2] = curr + '0';\n                bool isDiv = checkDiv7(ans, n-1);\n                if(isDiv) {\n                    return ans;\n                }\n                curr--;\n            }\n            return string(n, '7');\n        }\n        // keep reducing middle two digits by 1 each and check each number\n        int curr = 9;\n        while(curr >= 0) {\n            ans[n/2] = ans[(n/2)-1] = curr + '0';\n            bool isDiv = checkDiv7(ans, n-1);\n            if(isDiv) {\n                return ans;\n            }\n            curr--;\n        }\n        return string(n, '7');\n    }\n    \n    \n    string eight(int n) {\n        if(n <= 6) {\n            return string(n, '8');\n        }\n        \n        string ans(n, '9');\n        ans[0] = ans[1] = ans[2] = ans[n-1] = ans[n-2] = ans[n-3] = '8';\n        return ans;\n    }\n    \n    string nine(int n) {\n        return string(n, '9');\n    }\n    \n    string largestPalindrome(int n, int k) {\n        switch(k) {\n            case 1: return one(n);\n            case 2: return two(n);\n            case 3: return three(n);\n            case 4: return four(n);\n            case 5: return five(n);\n            case 6: return six(n);\n            case 7: return seven(n);\n            case 8: return eight(n);\n            case 9: return nine(n);\n        }\n        \n        return string(n, '0');\n    }\n};",
    "submit_ts": "1723953165",
    "subm_id": "1359814114"
}