{
    "username": "Puneet7373",
    "submission": "class Solution {\npublic:\n    int diameter(vector<vector<int>>& adj, int i, int& far) {\n        int n = adj.size();\n        vector<int> dist(n, -1);\n        dfs(adj, i, 0, dist, far);\n        return dist[far];\n    }\n\n    void dfs(vector<vector<int>>& adj, int node, int d, vector<int>& dist, int& far) {\n        dist[node] = d;\n        if (d > dist[far]) {\n            far = node;\n        }\n        for (int x : adj[node]) {\n            if (dist[x] == -1) {\n                dfs(adj, x, d + 1, dist, far);\n            }\n        }\n    }\n    int minimumDiameterAfterMerge(vector<vector<int>>& v1, vector<vector<int>>& v2) {\n        int n = v1.size();\n        int m = v2.size();\n\n        vector<vector<int>> adj1(n + 1);\n        vector<vector<int>> adj2(m + 1);\n        for (const auto& x : v1) {\n            int u = x[0];\n            int v = x[1];\n            adj1[u].push_back(v);\n            adj1[v].push_back(u);\n        }\n        for (const auto& x : v2) {\n            int u = x[0];\n            int v = x[1];\n            adj2[u].push_back(v);\n            adj2[v].push_back(u);\n        }\n\n        int far1 = 0;\n        diameter(adj1, 0, far1);\n        int d1 = diameter(adj1, far1, far1);\n\n        int far2 = 0;\n        diameter(adj2, 0, far2);\n        int d2 = diameter(adj2, far2, far2);\n\n        int maxx = max(d1, d2);\n        maxx = max(maxx, (d1 + 1) / 2 + (d2 + 1) / 2 + 1);\n\n        return maxx;\n    }\n    \n};\n",
    "submit_ts": "1719718749",
    "subm_id": "1304425137"
}