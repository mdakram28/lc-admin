{
    "username": "jeremyzhang96",
    "submission": "class Solution:\n    def countOfPeaks(self, nums: List[int], queries: List[List[int]]) -> List[int]:\n        # \u7ebf\u6bb5\u6811\n        n = len(nums)\n        seg = defaultdict(int)\n\n        # nums[i]\u662f\u5426\u662f\u5cf0\u503c\u5143\u7d20\n        def isPeak(i):\n            return int(0 < i < n - 1 and nums[i - 1] < nums[i] > nums[i + 1])\n\n        # \u5efa\u6811\n        def build(l, r):\n            if l == r:\n                seg[(l, r)] = isPeak(l)\n            else:\n                mid = l + r >> 1\n                seg[(l, r)] = build(l, mid) + build(mid + 1, r)\n            return seg[(l, r)]\n        \n        # \u5c06[l, r]\u4e2dx\u7684\u503c\u6539\u4e3aval\n        def update(l, r, x, val):\n            if x < l or x > r:\n                return seg[(l, r)]\n            if l == r:\n                seg[(l, r)] = val\n            else:\n                mid = l + r >> 1\n                seg[(l, r)] = update(l, mid, x, val) + update(mid + 1, r, x, val)\n            return seg[(l, r)]\n\n        # \u533a\u95f4\u548c\u67e5\u8be2\n        def get(l, r, x, y):\n            if x > y or x > r or y < l:\n                return 0\n            if x <= l and y >= r:\n                return seg[(l, r)]\n            mid = l + r >> 1\n            return get(l, mid, x, y) + get(mid + 1, r, x, y)\n\n        build(0, n - 1)\n        ans = []\n        for typ, a, b in queries:\n            if typ == 1:\n                ans.append(get(0, n - 1, a + 1, b - 1))\n            else:\n                nums[a] = b\n                update(0, n - 1, a - 1, isPeak(a - 1))\n                update(0, n - 1, a, isPeak(a))\n                update(0, n - 1, a + 1, isPeak(a + 1))\n        return ans",
    "submit_ts": "1718506951",
    "subm_id": "539778285"
}