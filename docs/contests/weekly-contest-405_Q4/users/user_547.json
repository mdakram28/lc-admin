{
    "username": "priyanshupatel1044",
    "submission": "class TrieNode {\npublic:\n    vector<TrieNode*> children;\n    vector<pair<int, int>> wordInfo; // (word length, word index)\n    \n    TrieNode() : children(26, nullptr) {}\n};\n\nclass Solution {\nprivate:\n    void insertWord(TrieNode* root, const string& word, int index) {\n        TrieNode* node = root;\n        for (char c : word) {\n            if (!node->children[c - 'a']) {\n                node->children[c - 'a'] = new TrieNode();\n            }\n            node = node->children[c - 'a'];\n        }\n        node->wordInfo.emplace_back(word.length(), index);\n    }\n\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int n = target.size();\n        vector<long long> dp(n + 1, LLONG_MAX);\n        dp[0] = 0;\n\n        TrieNode* root = new TrieNode();\n        for (int i = 0; i < words.size(); ++i) {\n            insertWord(root, words[i], i);\n        }\n\n        for (int i = 0; i < n; ++i) {\n            if (dp[i] == LLONG_MAX) continue;\n\n            TrieNode* node = root;\n            for (int j = i; j < n; ++j) {\n                if (!node->children[target[j] - 'a']) break;\n                node = node->children[target[j] - 'a'];\n                for (const auto& [len, idx] : node->wordInfo) {\n                    if (j - i + 1 == len) {\n                        dp[j + 1] = min(dp[j + 1], dp[i] + costs[idx]);\n                    }\n                }\n            }\n        }\n\n        return dp[n] == LLONG_MAX ? -1 : dp[n];\n    }\n};",
    "submit_ts": "1720321805",
    "subm_id": "1312332749"
}