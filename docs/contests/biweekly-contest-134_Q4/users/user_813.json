{
    "username": "pandeyGRocks",
    "submission": "typedef long long ll;\nconst ll mxn = 1e6 + 5;\nll setVal;\n \n\nclass Solution {\npublic:\n    vector <ll> segTree;\n    \n    ll query(ll tl, ll tr, ll l, ll r, ll v){\n        if(tl > r || tr < l){\n            return setVal;\n        }\n\n        if(tl >= l && tr <= r){\n            return segTree[v];\n        }\n\n        ll mid = (tl + tr) / 2;\n\n        ll q1 = query(tl, mid, l, r, 2 * v + 1);\n        ll q2 = query(mid + 1, tr, l, r, 2 * v + 2);\n\n        return q1 & q2;\n    }\n\n    void update(ll tl, ll tr, ll v, ll id, ll val){\n        if(tl > tr) return;\n\n        if(tl == tr){\n            segTree[v] = val;\n            return;\n        }\n\n        ll mid = (tl + tr) / 2;\n\n        if(id <= mid){\n            update(tl, mid, 2 * v + 1, id, val);\n        }\n        else{\n            update(mid + 1, tr, 2 * v + 2, id, val);\n        }\n\n        segTree[v] = segTree[2 * v + 1] & segTree[2 * v + 2];\n    }\n    \n    ll getLowerBound(ll i, vector <int> &a, ll n, int k){\n        \n        ll lo = 0;\n        ll hi = i;\n        \n        ll ans = -1;\n        \n        while(lo <= hi){\n            ll mid = (lo + hi) >> 1;\n            \n            ll qr = query(0, n - 1, mid, i, 0);\n            \n            if(qr > k){\n                hi = mid - 1;\n            }\n            else if(qr < k){\n                lo = mid + 1;\n            }\n            else{\n                hi = mid - 1;\n                ans = mid;\n            }\n        }\n        \n        return ans;\n    }\n    \n    ll getUpperBound(ll i, vector <int> &a, ll n, int k){\n        \n        ll lo = 0;\n        ll hi = i;\n        \n        ll ans = -1;\n        \n        while(lo <= hi){\n            ll mid = (lo + hi) >> 1;\n            \n            ll qr = query(0, n - 1, mid, i, 0);\n            \n            \n            if(qr > k){\n                hi = mid - 1;\n            }\n            else if(qr < k){\n                lo = mid + 1;\n            }\n            else{\n                lo = mid + 1;\n                ans = mid;\n            }\n        }\n        \n        return ans;\n    }\n    \n    long long countSubarrays(vector<int>& a, int k) {\n        \n        ll multiplier = 1ll;\n        setVal = 0;\n        for(int i = 0; i < 35; ++i){\n            setVal += multiplier;\n            multiplier *= 2ll;\n        }\n        \n        ll n = a.size();\n        segTree.resize(4 * n);\n        for(int i = 0; i < 4 * n; ++i){\n            segTree[i] = setVal;\n        }\n        \n        \n        for(ll i = 0; i < n; ++i){\n            update(0, n - 1, 0, i, a[i]);\n        }\n        \n        // for(int i = 0; i < 4 * n; ++i){\n        //     cout << segTree[i] << \" \";\n        // }\n        // cout << \"\\n\";\n        \n        long long ans = 0;\n        \n        for(ll i = 0; i < n; ++i){\n            \n            ll lb = getLowerBound(i, a, n, k);\n            ll ub = getUpperBound(i, a, n, k);\n            \n            if(lb == -1) continue;\n            \n            // cout << i << \" -> \" << lb << \" \" << ub << \"\\n\";\n            \n            ans += (ub - lb + 1);\n        }\n        \n        // cout << \"\\n\\n\";\n        \n        return ans;\n    }\n};",
    "submit_ts": "1720279687",
    "subm_id": "1311761126"
}