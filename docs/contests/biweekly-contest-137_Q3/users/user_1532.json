{
    "username": "Bhanuteja Jogu",
    "submission": "#define ROW first\n#define COL second\nclass Solution {\npublic:\n    long long maximumValueSum(vector<vector<int>>& grid) {\n        int rows = grid.size();\n        int cols = grid[0].size();\n        long long maxSum = LLONG_MIN;\n        vector<pair<int, pair<int, int>>> cellValues;\n        for (int r = 0; r < rows; r++) {\n            for (int c = 0; c < cols; c++) {\n                cellValues.push_back({grid[r][c], {r, c}});\n            }\n        }\n        \n        sort(cellValues.rbegin(), cellValues.rend());\n        int maxCandidates = min(2 * (rows + cols) + 10, rows * cols);\n        for (int i = 0; i < maxCandidates; i++) {\n            for (int j = i + 1; j < maxCandidates; j++) {  \n                for (int k = j + 1; k < maxCandidates; k++) {  \n                    long long currentSum ;\n                    int row1 = cellValues[i].second.ROW;\n                    int col1 = cellValues[i].second.COL;\n                    int row2 = cellValues[j].second.ROW;\n                    int col2 = cellValues[j].second.COL;\n                    int row3 = cellValues[k].second.ROW;\n                    int col3 = cellValues[k].second.COL;\n                    if (row1 == row2 || row2 == row3 || row1 == row3) continue;\n                    if (col1 == col2 || col2 == col3 || col1 == col3) continue;\n                    currentSum = 1LL * cellValues[i].first + cellValues[j].first + cellValues[k].first;\n                    maxSum = max(maxSum, currentSum);\n                }\n            }\n        } \n        return maxSum;\n    }\n};\n",
    "submit_ts": "1723910364",
    "subm_id": "1359227611"
}