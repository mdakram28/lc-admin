{
    "username": "tomarint",
    "submission": "impl Solution {\n    pub fn minimum_difference(nums: Vec<i32>, k: i32) -> i32 {\n        let n = nums.len();\n        let mut cbits = vec![vec![0; 32]; n + 1];\n        for i in 0..n {\n            for j in 0..31 {\n                cbits[i + 1][j] = cbits[i][j] + ((nums[i] >> j) & 1);\n            }\n        }\n        let mut ans = i32::MAX;\n\n        // [l, r) \u306e AND \u5024\u3092\u6c42\u3081\u308b\n        fn and_value(cbits: &Vec<Vec<i32>>, l: usize, r: usize) -> i32 {\n            let mut and_value = 0;\n            for j in 0..31 {\n                if cbits[r][j] - cbits[l][j] == r as i32 - l as i32 {\n                    and_value |= 1 << j;\n                }\n            }\n            and_value\n        }\n\n        for i in 0..n {\n            ans = ans.min((nums[i] - k).abs());\n            // AND[i..r) \u304c k \u4ee5\u4e0b\u306b\u306a\u308b\u6700\u5927\u306e r \u3092\u6c42\u3081\u308b\n            let mut l = i + 1;\n            let mut r = n;\n            while r > l {\n                let m = (l + r) / 2;\n                let value = and_value(&cbits, i, m);\n                if value <= k {\n                    r = m;\n                } else {\n                    l = m + 1;\n                }\n            }\n            let value = and_value(&cbits, i, r);\n            ans = ans.min((value - k).abs());\n            if i + 1 < r {\n                let value = and_value(&cbits, i, r - 1);\n                ans = ans.min((value - k).abs());\n            }\n        }\n        ans\n    }\n}",
    "submit_ts": 1717298452.0
}