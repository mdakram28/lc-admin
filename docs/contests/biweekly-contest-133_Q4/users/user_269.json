{
    "username": "gagahuhu118",
    "submission": "class Solution {\npublic:\n    Solution() {\n        cin.tie(NULL);\n        cout.tie(NULL);\n        ios_base :: sync_with_stdio(false);\n    }\n    int numberOfPermutations(int n, vector<vector<int>>& requirements) {\n        int MOD=1e9+7;\n        int MAX_INVERSIONS=400;\n        unordered_map<int, int> reqMap;\n        for (const auto& req : requirements) {\n            reqMap[req[0] + 1] = req[1];\n        }\n        vector<vector<long>> permCounts(n + 1, vector<long>(MAX_INVERSIONS + 1, 0));\n        permCounts[0][0] = 1;\n        for (int length = 1; length <= n; length++) {\n            for (int inv = 0; inv <= MAX_INVERSIONS; inv++) {\n                for (int newPos = 0; newPos < length; newPos++) {\n                    int prevInv = inv - newPos;\n                    if (prevInv >= 0) {\n                        permCounts[length][inv] = (permCounts[length][inv] + permCounts[length - 1][prevInv]) % MOD;\n                    }\n                }\n            }\n            if (reqMap.find(length) != reqMap.end()) {\n                int targetInv = reqMap[length];\n                for (int inv = 0; inv <= MAX_INVERSIONS; inv++) {\n                    if (inv != targetInv) {\n                        permCounts[length][inv] = 0;\n                    }\n                }\n            }\n        }\n        long result = 0;\n        for (long count : permCounts[n]) {\n            result = (result + count) % MOD;\n        }\n        return static_cast<int>(result);\n    }\n};",
    "submit_ts": "1719069994",
    "subm_id": "1296811794"
}