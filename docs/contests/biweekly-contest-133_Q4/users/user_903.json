{
    "username": "frvnkliu",
    "submission": "class Solution {\nconst int MOD = 1000000007;\npublic:\n    int numberOfPermutations(int n, vector<vector<int>>& requirements) {\n        sort(requirements.begin(), requirements.end(), [](const vector<int>& a, const vector<int>& b) {\n            return a[0] < b[0];\n        });\n        int dp[301][401] = {0};\n        \n        dp[0][0] = 1;\n        int z = 0;\n        int m = requirements.size();\n        \n        if(requirements[0][0] == 0){\n            if(requirements[0][1]) return 0;\n            z++;\n        }\n        \n        for (int i = 1; i <= n; i++) {\n            for (int j = 0; j <= min(i * (i - 1) / 2, 400); j++) {\n                for (int k = 0; k <= min(j, i - 1); ++k) {\n                    dp[i][j] += dp[i - 1][j - k];\n                    dp[i][j] %= MOD;\n                }\n            }\n            \n            if(z<m && requirements[z][0] == i-1){\n                int req_inv = requirements[z][1];\n                for(int j = 0; j <= min(i * (i - 1) / 2, 400); j++){\n                    if(j!= req_inv) dp[i][j] = 0;\n                }\n                z++;\n            }\n        }\n        //intersection\n        return dp[n][requirements[m-1][1]];\n    }\n};",
    "submit_ts": 1719071502.0
}