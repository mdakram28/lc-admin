{
    "username": "yzkkai",
    "submission": "class Solution {\npublic:\n    vector<int> timeTaken(vector<vector<int>>& edges) {\n        int n = edges.size() + 1;\n        vector<vector<int>> adj(n);\n        for (const auto& edge : edges) {\n            int u = edge[0], v = edge[1];\n            adj[u].emplace_back(v);\n            adj[v].emplace_back(u);\n        }\n\n        vector<int> mx(n);\n        auto dfs1 = [&](auto& self, int cur, int par) -> void {\n            for (int nxt : adj[cur]) {\n                if (nxt == par) continue;\n                self(self, nxt, cur);\n                mx[cur] = max(mx[cur], mx[nxt] + 2 - nxt % 2);\n\n            }\n        };\n        dfs1(dfs1, 0, -1);\n        \n        vector<int> ans = mx;\n        auto dfs2 = [&](auto& self, int cur, int par, int pre) -> void {\n            ans[cur] = max(ans[cur], pre);\n\n            if (size(adj[cur]) == 1 + (cur != 0)) {\n                for (int nxt : adj[cur])\n                    if (nxt != par)\n                        self(self, nxt, cur, pre + 2 - cur % 2);\n                return;\n            }\n\n            vector<pair<int, int>> tmp;\n            for (int i = 0; i < size(adj[cur]); ++i) {\n                if (adj[cur][i] == par) continue;\n                int nxt = adj[cur][i];\n                tmp.emplace_back(mx[nxt] + 2 - nxt % 2, adj[cur][i]);\n            }\n            sort(tmp.rbegin(), tmp.rend());\n\n            for (int i = 0; i < size(adj[cur]); ++i) {\n                if (adj[cur][i] == par) continue;\n                if (adj[cur][i] != tmp[0].second)\n                    self(self, adj[cur][i], cur, max(pre, tmp[0].first) + 2 - cur % 2);\n                else\n                    self(self, adj[cur][i], cur, max(pre, tmp[1].first) + 2 - cur % 2);\n            }\n        };\n\n        dfs2(dfs2, 0, -1, 0);\n\n        return ans;\n    }\n};",
    "submit_ts": "1722699873",
    "subm_id": "1343224940"
}