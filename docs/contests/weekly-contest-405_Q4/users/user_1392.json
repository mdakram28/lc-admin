{
    "username": "jatin0403",
    "submission": "class TrieNode{\npublic: \n    unordered_map<char,TrieNode*> children;\n    vector<pair<int,int>> ends;\n};\nclass Trie {\npublic:\n    TrieNode* root;\n    Trie() {\n        root = new TrieNode();\n    }\n    void insert(string s, int i, int cost){\n        TrieNode* curr = root;\n        for(char c : s){\n            if(!curr->children.count(c)){\n                curr->children[c] = new TrieNode();\n            }\n            curr = curr -> children[c];\n        }\n        curr->ends.push_back({i,cost});\n    }\n};\n\n\nclass Solution {\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int n = target.size();\n        vector<int> dp(n+1,INT_MAX);\n        dp[0]=0;\n        Trie helper;\n        for(int i=0;i<words.size();++i){\n            helper.insert(words[i],i,costs[i]);\n        }\n        for(int i=0;i<n;++i){\n            if(dp[i]==INT_MAX) continue;\n            TrieNode* curr = helper.root;\n            for(int j=i;j<n;++j){\n                if(!curr->children.count(target[j])) break;\n                curr = curr->children[target[j]];\n                for(auto &e : curr->ends){\n                    int wordL = words[e.first].size();\n                    if(i+wordL<=n) dp[i+wordL] = min(dp[i+wordL], dp[i] + e.second);\n                }\n            }\n        }\n        return dp[n] == INT_MAX? -1 : dp[n];\n    }\n};\n",
    "submit_ts": "1720323175",
    "subm_id": "1312369155"
}