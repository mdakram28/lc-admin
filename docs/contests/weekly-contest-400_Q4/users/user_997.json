{
    "username": "Agorz",
    "submission": "class Solution {\nstruct segmenttree {\n    int n;\n    vector<int> st;\n\n    void init(int _n) {\n        this->n = _n;\n        st.resize(4 * n, 0);\n    }\n\n    void build(int start, int ending, int node, vector<int> &v) {\n        if (start == ending) {\n            st[node] = v[start];\n            return;\n        }\n        int mid = (start + ending) / 2;\n        build(start, mid, 2 * node + 1, v);\n        build(mid + 1, ending, 2 * node + 2, v);\n        st[node] = st[node * 2 + 1] & st[node * 2 + 2];\n    }\n\n    int query(int start, int ending, int l, int r, int node) {\n        if (start > r || ending < l) return INT_MAX; \n        if (start >= l && ending <= r) return st[node];\n        int mid = (start + ending) / 2;\n        int q1 = query(start, mid, l, r, 2 * node + 1);\n        int q2 = query(mid + 1, ending, l, r, 2 * node + 2);\n        return q1 & q2;\n    }\n\n    void update(int start, int ending, int node, int index, int value) {\n        if (start == ending) {\n            st[node] = value;\n            return;\n        }\n        int mid = (start + ending) / 2;\n        if (index <= mid) {\n            update(start, mid, 2 * node + 1, index, value);\n        }\n        else {\n            update(mid + 1, ending, 2 * node + 2, index, value);\n        }\n        st[node] = st[node * 2 + 1] & st[node * 2 + 2];\n    }\n\n    void build(vector<int> &v) {\n        build(0, n - 1, 0, v);\n    }\n\n    int query(int l, int r) {\n        return query(0, n - 1, l, r, 0);\n    }\n\n    void update(int x, int y) {\n        update(0, n - 1, 0, x, y);\n    }\n};\npublic:\n    int minimumDifference(vector<int>& nums, int k) {\n        int n = nums.size();\n        segmenttree t;\n        t.init(n);\n        t.build(nums);\n\n        int res = INT_MAX;\n        for(int i =0;i<n;i++){\n            res=min(res,abs(nums[i]-k));\n        }\n        for (int i=0;i<n;i++) {\n            int lo=i, hi=n-1;\n            while (lo<=hi) {\n                int mid = (lo + hi) / 2;\n                int ans =t.query(i,mid);\n                if (ans<=k) {\n                    res=min(res,abs(ans-k));\n                    hi = mid - 1;\n                    // if(hi-1>=0){\n                    //     ans=ans&nums[hi-1];\n                    //     res = min(res, abs(ans-k));\n                    // }\n                    // if(hi+1<=n-1){\n                    //     ans=ans&nums[hi+1];\n                    //     res = min(res, abs(ans-k));\n                    // }\n                } else {\n                    res=min(res,abs(ans-k));\n                    lo=mid + 1;\n                //     if(lo+1<=n-1){\n                //         ans=ans&nums[lo+1];\n                //         res=min(res,abs(ans-k));\n                //     }\n                //     if(lo-1>=0){\n                //         ans=ans&nums[lo-1];\n                //         res=min(res,abs(ans-k));\n                //     }\n                }\n            }\n        }\n        return res;\n    }\n};",
    "submit_ts": 1717299353.0
}