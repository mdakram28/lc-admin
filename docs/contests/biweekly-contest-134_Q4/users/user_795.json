{
    "username": "jackieckc",
    "submission": "#include <bits/stdc++.h>\n\nusing namespace std;\n\ntemplate <typename T> class SegTree {\npublic:\n  SegTree(int n) : n_(n) {\n    int sz = ceil(log2(n));\n    sz = 2 * pow(2, sz) - 1;\n    tree_ = vector<T>(sz);\n  }\n\n  T Query(int l, int r) { return query_util(0, l, r, 0, n_ - 1); }\n\n  void Update(int i, T val) { update_util(0, 0, n_ - 1, i, val); }\n\nprivate:\n  T query_util(int i, int qL, int qR, int l, int r) {\n    if (l >= qL && r <= qR) {\n      return tree_[i];\n    }\n    if (l > qR || r < qL) {\n      return (1LL<<32) - 1;\n    }\n    int m = (l + r) / 2;\n    return query_util(2 * i + 1, qL, qR, l, m) &\n           query_util(2 * i + 2, qL, qR, m + 1, r);\n  }\n\n  void update_util(int i, int l, int r, int pos, T val) {\n    if (pos < l || pos > r) {\n      return;\n    }\n    if (l == r) {\n      tree_[i] = val;\n      return;\n    }\n    int m = (l + r) / 2;\n    update_util(2 * i + 1, l, m, pos, val);\n    update_util(2 * i + 2, m + 1, r, pos, val);\n    tree_[i] = tree_[2 * i + 1] & tree_[2 * i + 2];\n  }\n\n  int n_;\n  vector<T> tree_;\n};\n\nclass Solution {\npublic:\n    long long countSubarrays(vector<int>& nums, int k) {\n        int n = nums.size();\n        SegTree<int> st(n);\n        for (int i = 0; i < n; i++) {\n            st.Update(i, nums[i]);\n        }\n        long long res = 0;\n        for (int i = 0; i < n; i++) {\n            // cout << \" --- \" << endl << endl;;\n            // cout << i << \" << i \" << endl;\n            int a = -1, b = -1;\n            {\n                int s = 0, e = i;\n                while (s < e) {\n                    int m = s + (e - s) / 2;\n                    int v = st.Query(m, i);\n                    // cout << \"q \" << m << \" to \" << i << \" v \" << v << endl; \n                    if (v >= k) {\n                        e = m;\n                    } else {\n                        s = m + 1;\n                    }\n                }\n                // cout << \" a result s \" << s << \" to \" << i << \" = \" <<st.Query(s, i) << endl;\n                if (st.Query(s, i) == k) {\n                    a = s;\n                }\n            }\n            {\n                int s = 0, e = i;\n                while (s < e) {\n                    int m = s + (e - s) / 2;\n                    int v = st.Query(m, i);\n                    if (v > k) {\n                        e = m;\n                    } else {\n                        s = m + 1;\n                    }\n                }\n                if (st.Query(s, i) == k) {\n                    // cout << \" b result s \" << s << \" to \" << i << \" = \" <<st.Query(s, i) << endl;\n                    b = s;\n                } else if (s - 1 >= 0) {\n                    s -= 1;\n                    // cout << \" b result s \" << s << \" to \" << i << \" = \" <<st.Query(s, i) << endl;\n                    if (st.Query(s, i) == k) {\n                        b = s;\n                    }\n                }\n            }\n            if (a != -1 && b != -1) {\n                // cout << a << \" a \" << b << \" b \" << i << endl;\n                res += b - a + 1;\n            }\n        }\n        return res;\n    }\n};",
    "submit_ts": "1720279664",
    "subm_id": "1311760233"
}