{
    "username": "fatalerror-i",
    "submission": "class Solution:\n    def timeTaken(self, edges: List[List[int]]) -> List[int]:\n        n = len(edges) + 1\n        g = [[] for _ in range(n)]\n        for u, v in edges:\n            g[u].append(v)\n            g[v].append(u)\n            \n        dur = [0] * n\n        def dfs(u, pa, t):\n            d = 0\n            for v in g[u]:\n                if v == pa:\n                    continue\n                dfs(v, u, t + (1 if u % 2 == 1 else 2))\n                d = max(d, dur[v] + (1 if v % 2 == 1 else 2))\n            dur[u] = d\n        \n        ans = [0] * n\n        dfs(0, -1, 0)\n        ans[0] = dur[0]\n        # print(dur)\n        \n        def reroot(u, pa, other):\n            # print(u, pa, other)\n            ts = [dur[v] + (1 if v % 2 == 1 else 2) for v in g[u] if v != pa]\n            pmax = list(accumulate(ts, max, initial=0))\n            smax = list(accumulate(reversed(ts), max, initial=0))[::-1]\n            idx = 0                \n            for v in g[u]:\n                if v == pa:\n                    continue\n                mx = max(pmax[idx], smax[idx+1], other) + (1 if u % 2 == 1 else 2)\n                ans[v] = max(dur[v], mx)\n                reroot(v, u, mx)\n                idx += 1\n                \n        reroot(0, -1, 0)\n        return ans",
    "submit_ts": "1722699366",
    "subm_id": "552275320"
}