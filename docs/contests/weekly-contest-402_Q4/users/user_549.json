{
    "username": "ganesh-utla",
    "submission": "class Solution:\n    def countOfPeaks(self, arr: List[int], queries: List[List[int]]) -> List[int]:\n        \n        N = len(arr)\n        res = [0] * (4 * N + 1)\n\n        def constructSegTreeHelper(i, l, r):\n            if l==r:\n                if l==0 or l==N-1:\n                    res[i] = 0\n                elif l >= 1 and arr[l-1] < arr[l] and l+1 < N and arr[l+1] < arr[l]:\n                    res[i] = 1\n                else:\n                    res[i] = 0\n                return res[i]\n            m = (l + r) // 2\n            left = constructSegTreeHelper(2*i+1, l, m)\n            right = constructSegTreeHelper(2*i+2, m+1, r)\n            res[i] = left + right\n            return res[i]\n\n        def updateSegTree(i, ind, l, r, x):\n            if l==r and r==ind:\n                arr[ind] = x\n                if l==0 or l==N-1:\n                    res[i] = 0\n                elif l >= 1 and arr[l-1] < arr[l] and l+1 < N and arr[l+1] < arr[l]:\n                    res[i] = 1\n                else:\n                    res[i] = 0\n                return\n            m = (l + r) // 2\n            left = 2*i+1\n            right = 2*i+2\n            if l <= ind <= m:\n                updateSegTree(left, ind, l, m, x)\n            else:\n                updateSegTree(right, ind, m+1, r, x)\n            res[i] = res[left] + res[right]\n        \n        def verifyRangeSegTree(i, x, y, l, r):\n            if y < l or r < x: return\n            if l==r:\n                if l==0 or l==N-1:\n                    res[i] = 0\n                elif l >= 1 and arr[l-1] < arr[l] and l+1 < N and arr[l+1] < arr[l]:\n                    res[i] = 1\n                else:\n                    res[i] = 0\n                return\n            m = (l + r) // 2\n            left = 2*i+1\n            right = 2*i+2\n            verifyRangeSegTree(left, x, y, l, m)\n            verifyRangeSegTree(right, x, y, m+1, r)\n            res[i] = res[left] + res[right]\n\n        def find(i, l, r, x, y):\n            if r < x or y < l: return 0\n\n            if x <= l and r <= y:\n                return res[i]\n\n            m = (l + r) // 2\n            left = find(2*i+1, l, m, x, y)\n            right = find(2*i+2, m+1, r, x, y)\n            mx = left + right\n            return mx\n        \n        constructSegTreeHelper(0, 0, N-1)\n        \n        ans = []\n        for q in queries:\n            if q[0]==1:\n                if q[2]-q[1] <= 1:\n                    ans.append(0)\n                else:\n                    ans.append(find(0, 0, N-1, q[1]+1, q[2]-1))\n            else:\n                updateSegTree(0, q[1], 0, N-1, q[2])\n                verifyRangeSegTree(0, max(0, q[1]-1), min(N-1, q[1]+1), 0, N-1)\n        \n        return ans\n\n\n",
    "submit_ts": "1718507860",
    "subm_id": "1289664650"
}