{
    "username": "crapatx18",
    "submission": "class Solution {\npublic:\n    long long minimumCost(int m, int n, vector<int>& horizontalCut, vector<int>& verticalCut) {\n        vector<pair<int,char>> total;\n        priority_queue<int> pq;\n        for(int i=0;i<horizontalCut.size();i++) pq.push(horizontalCut[i]);\n        for(int i=0;i<verticalCut.size();i++) pq.push(verticalCut[i]);\n        sort(horizontalCut.begin(),horizontalCut.end());\n        sort(verticalCut.begin(),verticalCut.end());\n        reverse(horizontalCut.begin(),horizontalCut.end());\n        reverse(horizontalCut.begin(),horizontalCut.end());\n        for(int i=0;i<horizontalCut.size();i++) total.push_back({horizontalCut[i],'h'});\n        for(int i=0;i<verticalCut.size();i++) total.push_back({verticalCut[i],'v'});\n         sort(total.begin(),total.end());\n        reverse(total.begin(),total.end());\n        long long  h=1,v=1,cost=0;\n        for(int i=0;i<total.size();i++){\n            if(total[i].second=='h'){\n                cost+=total[i].first*v;++h;\n            }\n            else if(total[i].second=='v'){\n                cost+=total[i].first*h;++v;\n            }\n            else {\n                cost+=0;continue;\n            }\n            \n        }\n        return cost;\n        \n    }\n};",
    "submit_ts": "1720926389",
    "subm_id": "1320284791"
}