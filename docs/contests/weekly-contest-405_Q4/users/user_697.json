{
    "username": "abbymyz123",
    "submission": "from typing import List\nimport sys\n\nclass TrieNode:\n    def __init__(self):\n        self.children = {}\n        self.cost = sys.maxsize\n\nclass Trie:\n    def __init__(self):\n        self.root = TrieNode()\n    \n    def insert(self, word, cost):\n        node = self.root\n        for char in word:\n            if char not in node.children:\n                node.children[char] = TrieNode()\n            node = node.children[char]\n        node.cost = min(node.cost, cost)  # store the minimum cost at the end of the word\n        \nclass Solution:\n    def minimumCost(self, target: str, words: List[str], costs: List[int]) -> int:\n        trie = Trie()\n    \n        # Insert words and their costs into the Trie\n        for word, cost in zip(words, costs):\n            trie.insert(word, cost)\n\n        n = len(target)\n        dp = [sys.maxsize] * (n + 1)\n        dp[0] = 0  # cost to make an empty string is 0\n\n        # Populate dp array\n        for i in range(n):\n            if dp[i] == sys.maxsize:\n                continue  # Skip if no way to construct up to i\n            node = trie.root\n            for j in range(i, n):\n                if target[j] in node.children:\n                    node = node.children[target[j]]\n                    if node.cost != sys.maxsize:\n                        dp[j + 1] = min(dp[j + 1], dp[i] + node.cost)\n                else:\n                    break\n\n        return dp[n] if dp[n] != sys.maxsize else -1\n                    \n        ",
    "submit_ts": "1720323000",
    "subm_id": "1312364764"
}