{
    "username": "Astatine08",
    "submission": "from typing import List\nfrom collections import deque\nimport math\n\nclass Solution:\n    def bfs(self, g: List[List[int]], s: int, t1: int, t2: int, n: int) -> bool:\n        q = deque([s])\n        v = [False] * (n + 4)\n        v[s] = True\n        \n        while q:\n            u = q.popleft()\n            for i in g[u]:\n                if not v[i]:\n                    q.append(i)\n                    v[i] = True\n        \n        return v[t1] or v[t2]\n    \n    def canReachCorner(self, X: int, Y: int, circles: List[List[int]]) -> bool:\n        nc = len(circles)\n        g = [[] for _ in range(nc + 4)]\n        \n        for i in range(nc):\n            x, y, r = circles[i]\n            if x <= r:\n                g[nc].append(i)\n                g[i].append(nc)\n            if X - x <= r:\n                g[nc + 2].append(i)\n                g[i].append(nc + 2)\n            if y <= r:\n                g[nc + 1].append(i)\n                g[i].append(nc + 1)\n            if Y - y <= r:\n                g[nc + 3].append(i)\n                g[i].append(nc + 3)\n            \n            for j in range(i + 1, nc):\n                xj, yj, rj = circles[j]\n                d = math.sqrt((x - xj) ** 2 + (y - yj) ** 2)\n                if r + rj >= d:\n                    g[i].append(j)\n                    g[j].append(i)\n        \n        blocked = False\n        blocked |= self.bfs(g, nc, nc + 1, nc + 2, nc + 4)\n        blocked |= self.bfs(g, nc + 3, nc + 2, nc + 1, nc + 4)\n        \n        return not blocked\n",
    "submit_ts": "1722138302",
    "subm_id": "1335787242"
}