{
    "username": "fuwutu",
    "submission": "class Solution:\n    def timeTaken(self, edges: List[List[int]]) -> List[int]:\n        n = len(edges) + 1\n        adj = [[] for _ in range(n)]\n        for u, v in edges:\n            adj[u].append(v)\n            adj[v].append(u)\n        p = [-1] * n\n        p[0] = -2\n        a = [0]\n        i = 0\n        while i < len(a):\n            u = a[i]\n            i += 1\n            for v in adj[u]:\n                if p[v] == -1:\n                    p[v] = u\n                    a.append(v)\n        children = [[] for _ in range(n)]\n        t = [0] * n\n        for i in reversed(range(1, n)):\n            v = a[i]\n            u = p[v]\n            t[u] = max(t[u], t[v] + 2 - v % 2)\n            children[u].append((v, t[v] + 2 - v % 2))\n        res = [0] * n\n        res[0] = t[0]\n        q = [0] * n\n        for u in a:\n            ch = children[u]\n            count = len(ch)\n            if count > 1:\n                ch.sort(key=lambda x: -x[1])\n                for v, _ in ch:\n                    if v == ch[0][0]:\n                        q[v] = max(q[u], ch[1][1]) + 2 - u % 2\n                    else:\n                        q[v] = max(q[u], ch[0][1]) + 2 - u % 2\n            elif count == 1:\n                v, _ = ch[0]\n                q[v] = q[u] + 2 - u % 2\n            res[u] = max(t[u], q[u])\n        return res",
    "submit_ts": "1722698208",
    "subm_id": "552269852"
}