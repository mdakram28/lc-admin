{
    "username": "kvedula2004",
    "submission": "class Solution:\n    def countKConstraintSubstrings(self, s: str, k: int, queries: List[List[int]]) -> List[int]:\n        rangeQ = [0 for i in range(len(s))]\n        freqQ = [0 for i in range(len(s))]\n        pt1, pt2 = -1,0\n        numOnes = 0\n        for i in range(len(s)):\n            pt1 += 1\n            if pt1 == 0:\n                numOnes = int(s[0] == '1')\n            else:\n                numOnes -= int(s[pt1-1] == '1')\n            while pt2 < len(s)-1:\n                if min(numOnes, pt2-pt1+1-numOnes) <= k:\n                    pt2, numOnes = pt2+1, numOnes+int(s[pt2+1] == '1')\n                else:\n                    break\n            if pt2 != len(s)-1 or min(numOnes, pt2-pt1+1-numOnes) > k:\n                rangeQ[pt1] = pt2-1\n            else:\n                rangeQ[pt1] = pt2\n        prefixQ = [0 for i in range(len(s)+1)]\n        for i in range(1, len(s)+1):\n            prefixQ[i] = prefixQ[i-1]+rangeQ[i-1]\n        print(rangeQ)\n        print(prefixQ)\n        def ansQ(start, end):\n            bStart, bEnd = start, len(s)-1\n            bFind = 0\n            if rangeQ[bStart] >= end:\n                return (end-start+2)*(end-start+1)//2\n            \n            while bEnd - bStart > 1:\n                mid = (bEnd+bStart)//2\n                if rangeQ[mid] < end:\n                    bStart = mid\n                else:\n                    bEnd = mid\n            if rangeQ[bStart] >= end:\n                bFind = bStart\n            else:\n                bFind = bEnd\n            return (end-bFind+2)*(end-bFind+1)//2+prefixQ[bFind]-prefixQ[start]-(bFind-3+start)*(bFind-start)//2\n        \n        qAns = []\n        for q in queries:\n            qAns.append(ansQ(q[0], q[1]))\n        return qAns\n            \n                \n            ",
    "submit_ts": "1723953569",
    "subm_id": "1359824941"
}