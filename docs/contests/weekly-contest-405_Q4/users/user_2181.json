{
    "username": "kummariv",
    "submission": "class TrieNode {\n    Map<Character, TrieNode> children;\n    int cost;\n\n    public TrieNode() {\n        this.children = new HashMap<>();\n        this.cost = Integer.MAX_VALUE; // Initialize with max value\n    }\n}\n\nclass Trie {\n    TrieNode root;\n\n    public Trie() {\n        this.root = new TrieNode();\n    }\n\n    public void insert(String word, int cost) {\n        TrieNode node = root;\n        for (char c : word.toCharArray()) {\n            node.children.putIfAbsent(c, new TrieNode());\n            node = node.children.get(c);\n        }\n        node.cost = Math.min(node.cost, cost); // Store the minimum cost for the word\n    }\n\n    public TrieNode getRoot() {\n        return root;\n    }\n}\n\n\nclass Solution {\n    public int minimumCost(String target, String[] words, int[] costs) {\n        int n = target.length();\n        int[] dp = new int[n + 1];\n        Arrays.fill(dp, Integer.MAX_VALUE);\n        dp[0] = 0;\n\n        Trie trie = new Trie();\n        for (int i = 0; i < words.length; i++) {\n            trie.insert(words[i], costs[i]);\n        }\n\n        for (int i = 0; i < n; i++) {\n            if (dp[i] == Integer.MAX_VALUE) continue;\n\n            TrieNode node = trie.getRoot();\n            for (int j = i; j < n; j++) {\n                if (!node.children.containsKey(target.charAt(j))) break;\n\n                node = node.children.get(target.charAt(j));\n                if (node.cost != Integer.MAX_VALUE) {\n                    dp[j + 1] = Math.min(dp[j + 1], dp[i] + node.cost);\n                }\n            }\n        }\n\n        return dp[n] == Integer.MAX_VALUE ? -1 : dp[n];\n    }\n}",
    "submit_ts": "1720324126",
    "subm_id": "1312392208"
}