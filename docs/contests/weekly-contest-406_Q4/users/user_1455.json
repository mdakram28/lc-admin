{
    "username": "SSKeerthireddy",
    "submission": "class Solution {\npublic:\n    long long minimumCost(int m, int n, vector<int>& horizontalCut, vector<int>& verticalCut) {\n        if(m==1&& n==1)\n         return 0;\n        \n   sort(horizontalCut.begin(), horizontalCut.end(), greater<int>());\n    sort(verticalCut.begin(), verticalCut.end(), greater<int>());\n\n    long long h_pieces = 1;\n    long long v_pieces = 1;\n    long long totalCost = 0;\n\n    size_t hIndex = 0, vIndex = 0;\n\n    while (hIndex < horizontalCut.size() && vIndex < verticalCut.size()) {\n        if (horizontalCut[hIndex] > verticalCut[vIndex]) {\n            totalCost += static_cast<long long>(horizontalCut[hIndex]) * v_pieces;\n            h_pieces++;\n            hIndex++;\n        } else {\n            totalCost += static_cast<long long>(verticalCut[vIndex]) * h_pieces;\n            v_pieces++;\n            vIndex++;\n        }\n    }\n\n    while (hIndex < horizontalCut.size()) {\n        totalCost += static_cast<long long>(horizontalCut[hIndex]) * v_pieces;\n        h_pieces++;\n        hIndex++;\n    }\n\n    while (vIndex < verticalCut.size()) {\n        totalCost += static_cast<long long>(verticalCut[vIndex]) * h_pieces;\n        v_pieces++;\n        vIndex++;\n    }\n\n    return totalCost;\n    }\n};",
    "submit_ts": "1720925968",
    "subm_id": "1320271914"
}