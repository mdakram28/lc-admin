{
    "username": "hs180002",
    "submission": "class Solution {\npublic:\n\n\n\nstruct TrieNode {\n    TrieNode* children[26];\n    int cost;\n\n    TrieNode() : cost(INT_MAX) {\n        fill(begin(children), end(children), nullptr);\n    }\n};\n\nclass Trie {\npublic:\n    TrieNode* root;\n\n    Trie() {\n        root = new TrieNode();\n    }\n\n    void insert(const string& word, int cost) {\n        TrieNode* node = root;\n        for (char c : word) {\n            int index = c - 'a';\n            if (!node->children[index]) {\n                node->children[index] = new TrieNode();\n            }\n            node = node->children[index];\n        }\n        node->cost = min(node->cost, cost);\n    }\n};\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int n = target.size();\n    vector<int> dp(n + 1, INT_MAX);\n    dp[0] = 0;\n\n    Trie trie;\n    for (size_t i = 0; i < words.size(); ++i) {\n        trie.insert(words[i], costs[i]);\n    }\n\n    queue<int> q;\n    q.push(0);\n\n    while (!q.empty()) {\n        int i = q.front();\n        q.pop();\n\n        TrieNode* node = trie.root;\n        for (int j = i; j < n; ++j) {\n            int index = target[j] - 'a';\n            if (node->children[index]) {\n                node = node->children[index];\n                if (node->cost != INT_MAX && dp[i] != INT_MAX) {\n                    int newCost = dp[i] + node->cost;\n                    if (newCost < dp[j + 1]) {\n                        dp[j + 1] = newCost;\n                        q.push(j + 1);\n                    }\n                }\n            } else {\n                break;\n            }\n        }\n    }\n\n    return dp[n] == INT_MAX ? -1 : dp[n];\n    }\n};",
    "submit_ts": "1720322841",
    "subm_id": "1312360510"
}