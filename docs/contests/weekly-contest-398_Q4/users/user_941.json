{
    "username": "hritikkm211074leet",
    "submission": "class Solution {\n    private val memo = mutableMapOf<Triple<Int, Int, Boolean>, Int>()\n\n    private fun findWays(target: Int, currentStep: Int, jumpPower: Int, canJumpBack: Boolean): Int {\n        val key = Triple(currentStep, jumpPower, canJumpBack)\n        \n                                if (currentStep > target + 5) return 0\n        if (jumpPower > 31) return 0\n          \n                                if (memo.containsKey(key)) return memo[key]!!\n  var ways = if (currentStep == target) 1 else 0\n        if (canJumpBack) ways += findWays(target, currentStep - 1, jumpPower, false)\n        \n                                    if (currentStep + (1 shl jumpPower) <= target + 1) ways += findWays(target, currentStep + (1 shl jumpPower), jumpPower + 1, true)\n         \n        \n\n        memo[key] = ways\n        \n         \n                                    return ways\n                          }\n\n                                fun waysToReachStair(targetStep: Int): Int {\n        \n        \n                                              return findWays(targetStep, 1, 0, true)\n    }\n}\n",
    "submit_ts": "1716089920",
    "subm_id": "1261854666"
}