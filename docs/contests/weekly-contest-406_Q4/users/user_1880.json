{
    "username": "Lavish_munjal25",
    "submission": "class Solution {\n    public long minimumCost(int m, int n, int[] horizontalCut, int[] verticalCut) {\n         int h = horizontalCut.length;\n        int v = verticalCut.length;\n\n        // Create an array to hold all cuts with their type (horizontal or vertical)\n        int[][] cuts = new int[h + v][2];\n        \n        for (int i = 0; i < h; i++) {\n            cuts[i] = new int[]{horizontalCut[i], 0}; // 0 indicates horizontal cut\n        }\n        \n        for (int i = 0; i < v; i++) {\n            cuts[h + i] = new int[]{verticalCut[i], 1}; // 1 indicates vertical cut\n        }\n        \n        // Sort the cuts based on cost in descending order\n        Arrays.sort(cuts, (a, b) -> Integer.compare(b[0], a[0]));\n        \n        long totalCost = 0;\n        int horizontalPieces = 1;\n        int verticalPieces = 1;\n        \n        // Apply the cuts\n        for (int[] cut : cuts) {\n            if (cut[1] == 0) { // Horizontal cut\n                totalCost += cut[0] * verticalPieces;\n                horizontalPieces++;\n            } else { // Vertical cut\n                totalCost += cut[0] * horizontalPieces;\n                verticalPieces++;\n            }\n        }\n        \n        return totalCost;\n    }\n}",
    "submit_ts": "1720925819",
    "subm_id": "1320267215"
}