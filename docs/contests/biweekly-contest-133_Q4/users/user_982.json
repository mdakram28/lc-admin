{
    "username": "singh_deopa",
    "submission": "class Solution {\n    int mod = 1000000007;\n    \n    int dfs(vector<vector<int>>& dp, vector<int>& pos, int n, int k) {\n        if (k == 0) {\n            for (int i = 0; i <= n; i++) {\n                if (pos[i] > 0) {\n                    return 0;\n                }\n            }\n            \n            return 1;\n        }\n        \n        if (n == -1) {\n            return (k == 0) ? 1 : 0;\n        }\n        \n        if (pos[n] != -1 && pos[n] != k) {\n            return 0;\n        }\n        \n        int& cur = dp[n][k];\n        \n        if (cur != -1) {\n            return cur;\n        }\n        \n        cur = 0;\n        \n        for (int i = 0; i <= n && k - i >= 0; i++) {\n            cur += dfs(dp, pos, n - 1, k - i);\n            cur %= mod;\n        }\n        \n        // cout << n << \" \" << k << \" \" << cur << \"\\n\";\n        \n        return cur;\n    }\npublic:\n    int numberOfPermutations(int n, vector<vector<int>>& req) {\n        int m = (int) req.size();\n\n        sort(req.begin(), req.end());\n        \n        for (int i = 1; i < m; i++) {\n            if (req[i][1] < req[i - 1][1]) {\n                return 0;\n            }\n        }\n        \n        vector<int> pos(n, -1);\n        \n        for (int i = 0; i < m; i++) {\n            pos[req[i][0]] = req[i][1];\n        }\n        \n        vector<vector<int>> dp(n + 1, vector<int>(pos[n - 1] + 1, -1));\n        \n        // return pos[n - 1];\n        return dfs(dp, pos, n - 1, pos[n - 1]);\n    }\n};",
    "submit_ts": 1719071433.0
}