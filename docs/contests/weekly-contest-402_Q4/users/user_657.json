{
    "username": "hakonleung",
    "submission": "class SegmentTree_Simple {\n    constructor(size, mergeVal) {\n        this.size = size\n        this.mergeVal = mergeVal\n        this.tree = {}\n    }\n    modify (lazy, l, r, idx = 0, tl = 0, tr = this.size - 1) {\n        if (tl > r || tr < l) return\n        if (tl >= l && tr <= r) return this.tree[idx] = lazy\n        this.modify(lazy, l, r, (idx << 1) + 1, tl, (tl + tr) >> 1)\n        this.modify(lazy, l, r, (idx << 1) + 2, ((tl + tr) >> 1) + 1, tr)\n        this.tree[idx] = this.mergeVal(\n            this.tree[(idx << 1) + 1],\n            this.tree[(idx << 1) + 2]\n        )\n    }\n    query (l, r, idx = 0, tl = 0, tr = this.size - 1) {\n        if (tl > r || tr < l) return 0\n        if (tl >= l && tr <= r) return this.tree[idx] || 0\n        return this.mergeVal(\n            this.query(l, r, (idx << 1) + 1, tl, (tl + tr) >> 1),\n            this.query(l, r, (idx << 1) + 2, ((tl + tr) >> 1) + 1, tr)\n        )\n    }\n}\n\n\n/**\n * @param {number[]} nums\n * @param {number[][]} queries\n * @return {number[]}\n */\nvar countOfPeaks = function(nums, queries) {\n    const st = new SegmentTree_Simple(nums.length, (a, b) => (a || 0) + (b || 0))\n    const check = i => {\n        if (i <= 0 || i >= nums.length - 1) return false\n        const v = nums[i]\n        return v > nums[i - 1] && v > nums[i + 1]\n    }\n    const update = i => st.modify(check(i) ? 1 : 0, i, i)\n    const query = (a, b) => {\n        let v = st.query(a, b)\n        if (check(a)) v -= 1\n        if (a !== b && check(b)) v -= 1\n        return v\n    }\n    nums.forEach((v, i) => update(i))\n    const ans = []\n    queries.forEach(([op, a, b]) => {\n        if (op === 1) return ans.push(query(a, b))\n        nums[a] = b\n        update(a)\n        update(a - 1)\n        update(a + 1)\n    })\n    return ans\n};",
    "submit_ts": 1718507840.0
}