{
    "username": "anuragbnrj",
    "submission": "class Solution {\npublic:\n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n//         int n = edges1.size();\n//         vector<vector<int>> graph1(n);\n//         for (auto edge : edges1) {\n//             int u = edge[0];\n//             int v = edge[1];\n//             graph1[u].push_back(v);\n//             graph1[v].push_back(u);\n//         }\n        \n//         int m = edges2.size();\n//         vector<vector<int>> graph2(m);\n//         for (auto edge : edges2) {\n//             int u = edge[0];\n//             int v = edge[1];\n//             graph2[u].push_back(v);\n//             graph2[v].push_back(u);\n//         }\n        \n        int dia1 = treeDiameter(edges1);\n        int dia2 = treeDiameter(edges2);\n        \n        int farthest1;\n        if (dia1 % 2 == 0) {\n            farthest1 = dia1 / 2;\n        } else {\n            farthest1 = (dia1 / 2) + 1;\n        }\n        \n        int farthest2;\n        if (dia2 % 2 == 0) {\n            farthest2 = dia2 / 2;\n        } else {\n            farthest2 = (dia2 / 2) + 1;\n        }\n        \n        int ans = max({dia1, dia2, farthest1 + farthest2 + 1});\n        \n        return ans;\n    }\n    \n    int treeDiameter(vector<vector<int>>& edges) {\n        int n = edges.size() + 1;\n        vector<vector<int>> adj(n);\n\n        for (const auto& edge : edges) {\n            adj[edge[0]].push_back(edge[1]);\n            adj[edge[1]].push_back(edge[0]);\n        }\n\n        pair<int, int> first_bfs = bfs(0, adj);\n        \n        pair<int, int> second_bfs = bfs(first_bfs.first, adj);\n\n        return second_bfs.second;\n    }\n    \n\n    pair<int, int> bfs(int start, const vector<vector<int>>& adj) {\n        int n = adj.size();\n        vector<int> distance(n, -1);\n        queue<int> q;\n\n        q.push(start);\n        distance[start] = 0;\n\n        int farthest_node = start;\n        int max_distance = 0;\n\n        while (!q.empty()) {\n            int node = q.front();\n            q.pop();\n\n            for (int neighbor : adj[node]) {\n                if (distance[neighbor] == -1) {\n                    distance[neighbor] = distance[node] + 1;\n                    q.push(neighbor);\n\n                    if (distance[neighbor] > max_distance) {\n                        max_distance = distance[neighbor];\n                        farthest_node = neighbor;\n                    }\n                }\n            }\n        }\n\n        return {farthest_node, max_distance};\n    }\n    \n\n};",
    "submit_ts": 1719719489.0
}