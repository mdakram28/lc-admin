{
    "username": "1214367903",
    "submission": "class Solution:\n    def minimumDistance(self, points: List[List[int]]) -> int:\n        diffs = [(p[0] - p[1], i) for i, p in enumerate(points)]\n        sums = [(p[0] + p[1], i) for i, p in enumerate(points)]\n        diffs.sort()\n        sums.sort()\n        ans = float('inf')\n        for i in range(len(points)):\n            idx = 0\n            while idx < len(diffs) and diffs[idx][1] == i:\n                idx += 1\n            min_diff = diffs[idx][0]\n            idx = 0\n            while idx < len(sums) and sums[idx][1] == i:\n                idx += 1\n            min_sum = sums[idx][0]\n            idx = len(diffs) - 1\n            while idx >= 0 and diffs[idx][1] == i:\n                idx -= 1\n            max_diff = diffs[idx][0]\n            idx = len(sums) - 1\n            while idx >= 0 and sums[idx][1] == i:\n                idx -= 1\n            max_sum = sums[idx][0]\n            ans = min(ans, max(max_sum - min_sum, max_diff - min_diff))\n        return ans"
}