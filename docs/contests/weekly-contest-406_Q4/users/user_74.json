{
    "username": "Amoghhh07",
    "submission": "class Solution {\n    public long minimumCost(int m, int n, int[] horizontalCut, int[] verticalCut) {\n        // Sort horizontal cuts in descending order\n        Integer[] hCuts = Arrays.stream(horizontalCut).boxed().toArray(Integer[]::new);\n        Arrays.sort(hCuts, Collections.reverseOrder());\n        \n        // Sort vertical cuts in descending order\n        Integer[] vCuts = Arrays.stream(verticalCut).boxed().toArray(Integer[]::new);\n        Arrays.sort(vCuts, Collections.reverseOrder());\n        \n        int hIndex = 0;\n        int vIndex = 0;\n        int horizontalPieces = 1;\n        int verticalPieces = 1;\n        long totalCost = 0;\n\n        // Perform cuts until all cuts are used\n        while (hIndex < hCuts.length && vIndex < vCuts.length) {\n            if (hCuts[hIndex] >= vCuts[vIndex]) {\n                totalCost += (long) hCuts[hIndex] * verticalPieces;\n                horizontalPieces++;\n                hIndex++;\n            } else {\n                totalCost += (long) vCuts[vIndex] * horizontalPieces;\n                verticalPieces++;\n                vIndex++;\n            }\n        }\n\n        // If there are remaining horizontal cuts\n        while (hIndex < hCuts.length) {\n            totalCost += (long) hCuts[hIndex] * verticalPieces;\n            hIndex++;\n        }\n\n        // If there are remaining vertical cuts\n        while (vIndex < vCuts.length) {\n            totalCost += (long) vCuts[vIndex] * horizontalPieces;\n            vIndex++;\n        }\n\n        return totalCost;\n    }\n}",
    "submit_ts": "1720924931",
    "subm_id": "1320236512"
}