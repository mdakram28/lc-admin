{
    "username": "ratanmamdekar",
    "submission": "class Solution {\n    public List<Integer> countOfPeaks(int[] nums, int[][] queries) {\n        int n = nums.length;\n        \n        int[] BIT1= constructBIT(n);\n        int[] BIT2 =constructBIT(n);\n \n        List<Integer> list = new ArrayList<>();\n        for(int i=1;i<n-1;i++){\n            if(nums[i]>nums[i-1] && nums[i]>nums[i+1]){\n                updateRange(BIT1, BIT2, n, 1, i, i);\n            }\n        }\n        \n        for(int[] query : queries){\n            if(query[0]==2){\n                int i = query[1];\n                // i\n                if(i>0 && i<n-1){\n                    boolean wasPeak = nums[i]>nums[i-1] && nums[i]>nums[i+1];\n                    // nums[i] = query[2];\n                    boolean isPeak = query[2]>nums[i-1] && query[2]>nums[i+1];\n                    if(wasPeak){\n                        if(!isPeak){\n                            updateRange(BIT1, BIT2, n, -1, i, i);\n                        }\n                    }else{\n                        if(isPeak){\n                            updateRange(BIT1, BIT2, n, 1, i, i);\n                        }\n                    }\n                }\n                \n                \n                //i-1\n                if(i-1>0){\n                    boolean wasPeak = nums[i-1]>nums[i-2] && nums[i-1]>nums[i];\n                    // nums[i] = query[2];\n                    boolean isPeak = nums[i-1]>nums[i-2] && nums[i-1]>query[2];\n                    if(wasPeak){\n                        if(!isPeak){\n                            updateRange(BIT1, BIT2, n, -1, i-1, i-1);\n                        }\n                    }else{\n                        if(isPeak){\n                            updateRange(BIT1, BIT2, n, 1, i-1, i-1);\n                        }\n                    }\n                }\n                \n                //i+1\n                if(i+1<n-1){\n                    boolean wasPeak = nums[i+1]>nums[i+2] && nums[i+1]>nums[i];\n                    // nums[i] = query[2];\n                    boolean isPeak = nums[i+1]>nums[i+2] && nums[i+1]>query[2];\n                    if(wasPeak){\n                        if(!isPeak){\n                            updateRange(BIT1, BIT2, n, -1, i+1, i+1);\n                        }\n                    }else{\n                        if(isPeak){\n                            updateRange(BIT1, BIT2, n, 1, i+1, i+1);\n                        }\n                    }\n                }\n                \n                \n                \n                nums[i] = query[2];\n                \n            }else{\n                int l = query[1]+1;\n                int r = query[2]-1;\n                if(l>r){\n                    list.add(0);\n                }else{\n                    list.add(rangeSum(l, r, BIT1, BIT2));    \n                }\n                \n            }\n        }\n        \n        return list;\n    }\n    \n    static int[] constructBIT(int n)\n    {\n        int[] BIT = new int[n + 1];\n        for (int i = 1; i <= n; i++)\n            BIT[i] = 0;\n \n        return BIT;\n    }\n    \n    static void updateRange(int BIT1[], int BIT2[],\n                            int n, int val, int l, int r)\n    {\n        updateBIT(BIT1, n, l, val);\n        updateBIT(BIT1, n, r + 1, -val);\n \n        updateBIT(BIT2, n, l, val * (l - 1));\n        updateBIT(BIT2, n, r + 1, -val * r);\n    }\n    \n    static int rangeSum(int l, int r, int BIT1[],\n                        int BIT2[])\n    {\n        return sum(r, BIT1, BIT2)\n            - sum(l - 1, BIT1, BIT2);\n    }\n    \n    static int sum(int x, int BIT1[], int BIT2[])\n    {\n        return (getSum(BIT1, x) * x)\n            - getSum(BIT2, x);\n    }\n    \n    static void updateBIT(int BIT[], int n, int index,\n                          int val)\n    {\n        index = index + 1;\n \n        while (index <= n) {\n            BIT[index] += val;\n            index += index & (-index);\n        }\n    }\n    \n    static int getSum(int BIT[], int index)\n    {\n        int sum = 0;\n        index = index + 1;\n \n        while (index > 0) {\n            sum += BIT[index];\n            index -= index & (-index);\n        }\n        return sum;\n    }\n    \n}",
    "submit_ts": 1718507629.0
}