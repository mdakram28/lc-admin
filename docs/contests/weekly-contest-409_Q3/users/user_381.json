{
    "username": "zen-dijkstra7pa",
    "submission": "\n\nclass Solution {\n\n//    public static void main(String[] args) {\n//        Solution so = new Solution();\n//        System.out.println(Arrays.toString(so.shortestDistanceAfterQueries(5, new int[][]{{2, 4}, {0, 2}, {0, 4}})));\n//    }\n\n    public int[] shortestDistanceAfterQueries(int n, int[][] queries) {\n        SegmentTreeUpdate tr = new SegmentTreeUpdate(new int[n]);\n        int m = queries.length;\n        int[] ans = new int[m];\n        int i = 0;\n        int v = n - 1;\n        for (int[] query : queries) {\n            int x = query[0], y = query[1];\n            int sm = tr.sum(x + 1, y - 1);\n            if (-sm < y - x - 1) {\n                tr.update(x + 1, y - 1, -1);\n                v -= sm + (y - x - 1);\n            }\n            ans[i++] = v;\n        }\n        return ans;\n    }\n\n    /**\n     * \u9759\u6001\u7ebf\u6bb5\u6811 (\u5e26\u61d2\u6807\u8bb0\uff0c\u8986\u76d6\u5f0f\u533a\u95f4\u4fee\u6539\u4e3a)\n     * \u652f\u6301\uff1a\u5355\u70b9\u4fee\u6539 / \u5355\u70b9\u67e5\u8be2 / \u533a\u95f4\u6c42\u548c / \u8986\u76d6\u5f0f\u533a\u95f4\u4fee\u6539\n     */\n    class SegmentTreeUpdate {\n        int[] nums, tree, lazy;\n        boolean[] updated;\n        int n;\n\n        public SegmentTreeUpdate(int[] nums) {\n            this.nums = nums;\n            this.n = nums.length;\n            this.tree = new int[4 * n];\n            this.lazy = new int[4 * n];\n            this.updated = new boolean[4 * n];\n            build(0, n - 1, 1);\n        }\n\n        public void add(int i, int x) { // \u5355\u70b9\u4fee\u6539(\u9a71\u52a8): \u589e\u91cf\u5f0f nums[i] += x\n            add(i, x, 0, n - 1, 1);\n        }\n\n        public void update(int i, int x) { // \u5355\u70b9\u4fee\u6539(\u9a71\u52a8): \u8986\u76d6\u5f0f nums[i] = x\n            update(i, x, 0, n - 1, 1);\n        }\n\n        public int query(int i) { // \u5355\u70b9\u67e5\u8be2 (\u9a71\u52a8): \u67e5\u8be2 nums[i]\n            return query(i, 0, n - 1, 1);\n        }\n\n        public void update(int l, int r, int x) { // \u533a\u95f4\u4fee\u6539(\u9a71\u52a8): \u8986\u76d6\u5f0f [l,r] \u533a\u95f4\u6240\u6709\u5143\u7d20\u6539\u4e3ax\n            if (l > r) {\n                return;\n            }\n            update(l, r, x, 0, n - 1, 1);\n        }\n\n        public int sum(int l, int r) { // \u533a\u95f4\u67e5\u8be2(\u9a71\u52a8): nums[l]~nums[r]\u4e4b\u548c\n            if (l > r) return 0;\n            return sum(l, r, 0, n - 1, 1);\n        }\n\n        public int min(int l, int r) { // \u533a\u95f4\u67e5\u8be2 (\u9a71\u52a8): \u67e5\u8be2[l,r]\u4e2d\u7684\u6700\u5c0f\u503c\n            return min(l, r, 0, n - 1, 1);\n        }\n\n        public int max(int l, int r) { // \u533a\u95f4\u67e5\u8be2 (\u9a71\u52a8): \u67e5\u8be2[l,r]\u4e2d\u7684\u6700\u5927\u503c\n            return max(l, r, 0, n - 1, 1);\n        }\n\n        // \u5355\u70b9\u4fee\u6539: \u589e\u91cf\u5f0f \u4ee4nums[idx] += x\u3002\u4fee\u6539\u53f6\u5b50\u7ed3\u70b9\uff0c\u65e0\u5173\u6807\u8bb0\u3002\n        private void add(int idx, int x, int s, int t, int i) {\n            if (s == t) {\n                tree[i] += x; // \u589e\u91cf\u66f4\u65b0\n                return;\n            }\n            int c = s + (t - s) / 2;\n            if (updated[i]) pushDown(s, c, t, i); // \u662f\u5426\u63a8\u9001\u6807\u8bb0\n            if (idx <= c) add(idx, x, s, c, i * 2);\n            else add(idx, x, c + 1, t, i * 2 + 1);\n            pushUp(i); // \u540e\u5e8f\u52a8\u4f5c\uff0c\u81ea\u5e95\u5411\u4e0a\u66f4\u65b0\u7ed3\u70b9\u533a\u95f4\u548c tree[i]\n        }\n\n        // \u5355\u70b9\u4fee\u6539: \u8986\u76d6\u5f0f \u4ee4nums[idx] = x\u3002\u4fee\u6539\u53f6\u5b50\u7ed3\u70b9\uff0c\u65e0\u5173\u6807\u8bb0\u3002\n        private void update(int idx, int x, int s, int t, int i) {\n            if (s == t) {\n                tree[i] = x; // \u8986\u76d6\u66f4\u65b0\n                return;\n            }\n            int c = s + (t - s) / 2;\n            if (updated[i]) pushDown(s, c, t, i); // \u662f\u5426\u63a8\u9001\u6807\u8bb0\n            if (idx <= c) update(idx, x, s, c, i * 2);\n            else update(idx, x, c + 1, t, i * 2 + 1);\n            pushUp(i);  // \u540e\u5e8f\u52a8\u4f5c\uff0c\u81ea\u5e95\u5411\u4e0a\u66f4\u65b0\u7ed3\u70b9\u533a\u95f4\u548c tree[i]\n        }\n\n        // \u5355\u70b9\u67e5\u8be2 (\u5177\u4f53): \u67e5\u8be2 nums[i]\uff0c\u5c3e\u9012\u5f52\n        private int query(int idx, int s, int t, int i) {\n            if (s == t) return tree[i];\n            int c = s + (t - s) / 2;\n            if (updated[i]) pushDown(s, c, t, i); // \u5f53\u524d\u7ed3\u70b9\u61d2\u60f0\u6807\u8bb0\u4e0d\u4e3a0\n            if (idx <= c) return query(idx, s, c, i * 2);\n            else return query(idx, c + 1, t, i * 2 + 1);\n        }\n\n        // \u533a\u95f4\u4fee\u6539: \u8986\u76d6\u5f0f [l,r] \u533a\u95f4\u6240\u6709\u5143\u7d20\u6539\u4e3ax\n        private void update(int l, int r, int x, int s, int t, int i) {\n            if (l <= s && t <= r) { // \u5f53\u524d\u7ed3\u70b9\u4ee3\u8868\u7684\u533a\u95f4\u5728\u6240\u6c42\u533a\u95f4\u4e4b\u5185\n                tree[i] = (t - s + 1) * x; // \u7ed3\u70b9i\u7684\u533a\u95f4\u548c\u7b49\u4e8et-s+1\u4e2ax\n                if (s != t) { // \u7ed3\u70b9i\u4e0d\u662f\u53f6\u5b50\u7ed3\u70b9\n                    lazy[i] = x; // \u66f4\u65b0\u61d2\u6807\u8bb0\n                    updated[i] = true; // \u66f4\u65b0updated\n                }\n                return;\n            }\n            int c = s + (t - s) / 2;\n            if (updated[i]) pushDown(s, c, t, i); // \u662f\u5426\u63a8\u9001\u6807\u8bb0\n            if (l <= c) update(l, r, x, s, c, i * 2);\n            if (r > c) update(l, r, x, c + 1, t, i * 2 + 1);\n            pushUp(i); // \u540e\u5e8f\u52a8\u4f5c\uff0c\u81ea\u5e95\u5411\u4e0a\u66f4\u65b0\u7ed3\u70b9\u533a\u95f4\u548c tree[i]\n        }\n\n        // \u533a\u95f4\u67e5\u8be2: \u6c42 nums[l]~nums[r]\u4e4b\u548c\n        private int sum(int l, int r, int s, int t, int i) {\n            if (l <= s && t <= r) return tree[i]; // \u5f53\u524d\u7ed3\u70b9\u4ee3\u8868\u7684\u533a\u95f4\u5728\u6240\u8981\u6c42\u7684\u533a\u95f4\u4e4b\u5185\n            int c = s + (t - s) / 2, sum = 0;\n            if (updated[i]) pushDown(s, c, t, i); // \u662f\u5426\u63a8\u9001\u6807\u8bb0\n            if (l <= c) sum += sum(l, r, s, c, i * 2);\n            if (r > c) sum += sum(l, r, c + 1, t, i * 2 + 1);\n            return sum;\n        }\n\n        // \u533a\u95f4\u67e5\u8be2: \u67e5\u8be2[l,r]\u4e2d\u7684\u6700\u5c0f\u503c\n        private int min(int l, int r, int s, int t, int i) {\n            if (s == t) return tree[i]; // \u53f6\u5b50\u7ed3\u70b9\n            int c = s + (t - s) / 2, lmin = Integer.MAX_VALUE, rmin = Integer.MAX_VALUE;\n            if (updated[i]) pushDown(s, c, t, i); // \u662f\u5426\u63a8\u9001\u6807\u8bb0\n            if (l <= c) lmin = min(l, r, s, c, i * 2);\n            if (r > c) rmin = min(l, r, c + 1, t, i * 2 + 1);\n            return Math.min(lmin, rmin);\n        }\n\n        // \u533a\u95f4\u67e5\u8be2: \u67e5\u8be2[l,r]\u4e2d\u7684\u6700\u5927\u503c\n        private int max(int l, int r, int s, int t, int i) {\n            if (s == t) return tree[i];\n            int c = s + (t - s) / 2, lmax = Integer.MIN_VALUE, rmax = Integer.MIN_VALUE;\n            if (updated[i]) pushDown(s, c, t, i);\n            if (l <= c) lmax = max(l, r, s, c, i * 2);\n            if (r > c) rmax = max(l, r, c + 1, t, i * 2 + 1);\n            return Math.max(lmax, rmax);\n        }\n\n        // \u6784\u5efa\u7ebf\u6bb5\u6811(tree\u6570\u7ec4)\n        private void build(int s, int t, int i) {\n            if (s == t) { // s: start,nums\u5f53\u524d\u7ed3\u70b9\u533a\u95f4\u8d77\u70b9\u4e0b\u6807\uff0ct: terminal,nums\u5f53\u524d\u7ed3\u70b9\u533a\u95f4\u672b\u5c3e\u4e0b\u6807\n                tree[i] = nums[s];\n                return;\n            }\n            int c = s + (t - s) / 2;\n            build(s, c, i * 2);\n            build(c + 1, t, i * 2 + 1);\n            pushUp(i);  // \u540e\u5e8f\u52a8\u4f5c\uff0c\u81ea\u5e95\u5411\u4e0a\u66f4\u65b0\u7ed3\u70b9\u533a\u95f4\u548c tree[i]\n        }\n\n        // pushup: \u66f4\u65b0 tree[i]\n        private void pushUp(int i) {\n            tree[i] = tree[i * 2] + tree[i * 2 + 1];\n        }\n\n        // pushdown: \u66f4\u65b0\u5f53\u524d\u7ed3\u70b9\u53ca\u5176\u5de6\u53f3\u5b50\u7ed3\u70b9\u7684\u61d2\u6807\u8bb0\u548cupdated\n        private void pushDown(int s, int c, int t, int i) {\n            tree[i * 2] = (c - s + 1) * lazy[i]; // \u66f4\u65b0\u5176\u5de6\u5b50\u7ed3\u70b9\u7684\u533a\u95f4\u548c\n            lazy[i * 2] = lazy[i]; // \u4f20\u9012\u61d2\u6807\u8bb0(\u8986\u76d6\u5f0f\u6807\u8bb0)\n            updated[i * 2] = true;\n            tree[i * 2 + 1] = (t - c) * lazy[i];\n            lazy[i * 2 + 1] = lazy[i];\n            updated[i * 2 + 1] = true;\n            lazy[i] = 0; // \u91cd\u7f6e\u5f53\u524d\u7ed3\u70b9\u61d2\u60f0\u6807\u8bb0\u503c\n            updated[i] = false; // \u91cd\u7f6e\u5f53\u524d\u7ed3\u70b9updated[i]\u4e3afalse\n        }\n    }\n}",
    "submit_ts": "1722741481",
    "subm_id": "552338478"
}