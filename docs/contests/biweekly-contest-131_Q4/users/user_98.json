{
    "username": "wenboz",
    "submission": "class Solution {\n    public List<Boolean> getResults(int[][] queries) {\n        int n = queries.length;\n        var ts = new TreeSet<Integer>();\n        ts.add(0);\n        for(int i = 0; i < n; i++){\n            if(queries[i][0] == 1){\n                ts.add(queries[i][1]);\n            }\n        }\n        int end = Math.min(50000, 3*n) + 1;\n        var seg = new SegmentTreeMax(end + 1);\n        ts.add(end);\n        int last = 0;\n        for(int i : ts){\n            seg.update(i, i - last);\n            last = i;\n        }\n        var dq = new ArrayDeque<Boolean>();\n        for(int i = n - 1; i >= 0; i--){\n            if(queries[i][0] == 1){\n                int cur = queries[i][1];\n                int next = ts.higher(cur);\n                int prev = ts.lower(cur);\n                seg.update(cur, 0);\n                seg.update(next, next - prev);\n                ts.remove(cur);\n            }\n            else{\n                int fl = ts.floor(queries[i][1]);\n                dq.push(seg.query(0, fl) >= queries[i][2] || queries[i][1] - fl >= queries[i][2]);\n            }\n        }\n        var res = new ArrayList<Boolean>();\n        while(!dq.isEmpty())\n            res.add(dq.pop());\n        return res;\n        \n    }\n    \n    public class SegmentTreeMax {\n\n    int N;\n    long[] seg;\n\n    public SegmentTreeMax(int n){\n        N = Math.max(1, Integer.highestOneBit(n - 1) << 1);\n        seg = new long[2*N];\n    }\n\n    public SegmentTreeMax(int[] nums){\n        N = Math.max(1, Integer.highestOneBit(nums.length - 1) << 1);\n        seg = new long[2*N];\n        for(int i = 0; i < nums.length; i++){\n            seg[i + N] = nums[i];\n        }\n        for(int i = N - 1; i > 0; i--){\n            seg[i] = Math.min(seg[2*i], seg[2*i + 1]);\n        }\n    }\n\n    long query(int ql, int qh){\n        return query(0, N - 1, 1, ql, qh);\n    }\n    long query(int l, int h, int i, int ql, int qh){\n        if(h < ql || l > qh)\n            return 0;\n        if(l >= ql && h <= qh){\n            return seg[i];\n        }\n        int m = l + (h - l)/2;\n        return Math.max(query(l, m, 2*i, ql, qh), query(m + 1, h, 2*i + 1, ql, qh));\n    }\n\n    void update(int i, long v){\n        i += N;\n        seg[i] = v;\n        while(i > 1){\n            i /= 2;\n            seg[i] = Math.max(seg[2*i], seg[2*i + 1]);\n        }\n    }\n\n}\n\n}",
    "submit_ts": 1716650294.0
}