{
    "username": "Hughstudy",
    "submission": "class Solution {\n    public int[] shortestDistanceAfterQueries(int n, int[][] queries) {\n        int[] res = new int[queries.length];\n        TreeSet<int[]> set = new TreeSet<>((a, b) -> (Integer.compare(a[0], b[0])));\n        int cur = n - 1;\n        for (int i = 0; i < queries.length; ++i) {\n            int[] floor = set.floor(queries[i]);\n            if (floor != null && floor[1] >= queries[i][1]) {\n                res[i] = cur;\n                continue;\n            }\n            int[] higher = set.ceiling(queries[i]);\n            while (higher != null) {\n                if (higher[1] <= queries[i][1]) {\n                    cur += higher[1] - higher[0] - 1;\n                    set.remove(higher);\n                    higher = set.higher(queries[i]);\n                } else {\n                    break;\n                }\n            }\n            cur -= queries[i][1] - queries[i][0] - 1;\n            set.add(queries[i]);\n            res[i] = cur;\n        }\n        return res;\n    }\n}",
    "submit_ts": "1722740849",
    "subm_id": "552334145"
}