{
    "username": "deepakganwani",
    "submission": "class Solution {\npublic:\n    pair<int, int> dfs(vector<int>*gr, int nd, int p, int d) {\n        int cur=d, nod=nd;\n        for(auto&c:gr[nd]) {\n            if(c==p) continue;\n            auto t=dfs(gr, c, nd, d+1);\n            if(t.second>=cur) {\n                cur=t.second;\n                nod=t.first;\n            }\n        }\n        pair<int, int> ans={nod, cur};\n        return ans;\n    }\n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n        int m=edges2.size()+1, n=edges1.size()+1;\n        vector<int> gr1[n], gr2[m];\n        for(auto&t:edges1) {\n            gr1[t[0]].push_back(t[1]);\n            gr1[t[1]].push_back(t[0]);\n        }\n        for(auto&t:edges2) {\n            gr2[t[0]].push_back(t[1]);\n            gr2[t[1]].push_back(t[0]);\n        }\n        int end1=dfs(gr1, 0, -1, 0).first;\n        int dis1=dfs(gr1, end1, -1, 0).second;\n        int end2=dfs(gr2, 0, -1, 0).first;\n        int dis2=dfs(gr2, end2, -1, 0).second;\n        int ans=max({dis1, dis2, ((dis1+1)/2)+((dis2+1)/2)+1});\n        return ans;\n    }\n};",
    "submit_ts": 1719718544.0
}