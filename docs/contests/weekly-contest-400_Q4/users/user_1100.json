{
    "username": "AA_007",
    "submission": "class SegmentTree{\n   \nvector<int> sgtree;\n\n  public:\n \n  SegmentTree(int n){\n     sgtree.resize(4*n+1);\n     \n     \n }\n \n \n void build(int index,int low,int high,vector<int> &arr){\n     if(low==high){\n         sgtree[index]=arr[low];\n         return ;\n     }\n     \n     int mid=(low+high)/2;\n     \n     build(2*index+1,low,mid,arr);\n     build(2*index+2,mid+1,high,arr);\n     \n     sgtree[index]=(sgtree[2*index+1]&sgtree[2*index+2]);\n     \n     \n }\n \n int query(int index,int low,int high,int l,int h){\n     if(low>h||l>high)\n     return INT_MAX;\n     \n    else if(l<=low&&high<=h)\n     return sgtree[index];\n     \n     \n     else{\n         int mid=(low+high)/2;\n         \n         return (query(2*index+1,low,mid,l,h)&query(2*index+2,mid+1,high,l,h));\n     }\n }\n \n void update(int index,int low,int high,int i,int val){\n     if(low==high){\n         sgtree[index]=val;\n         return ;\n     }\n     \n     int mid=(low+high)/2;\n     \n     if(i<=mid)\n     update(2*index+1,low,mid,i,val);\n     \n     else\n     update(2*index+2,mid+1,high,i,val);\n     \n     sgtree[index]=sgtree[2*index+1]&sgtree[2*index+2];\n }\n};\nclass Solution {\npublic:\n    int minimumDifference(vector<int>& nums, int k) {\n        int n=nums.size();\n        SegmentTree sg(n);\n        \n        \n        sg.build(0,0,n-1,nums);\n        int finalans=INT_MAX;\n        \n        for(auto i:nums)\n            finalans=min(finalans,abs(i-k));\n        \n        for(int i=0;i<n;i++){\n            int lo=i,hi=n-1;\n            \n            int ans=n-1;\n            \n            while(lo<=hi){\n                int mid=(lo+hi)/2;\n                \n                int andp=sg.query(0,0,n-1,i,mid);\n                \n                if(andp>=k){\n                    ans=mid;\n                    lo=mid+1;\n                }\n                else{\n                    hi=mid-1;\n                }\n            }\n            // cout<<i<<\" \"<<ans<<endl;\n            // cout<<sg.query(0,0,n-1,i,ans)<<endl;\n           finalans=min(finalans,abs(k-sg.query(0,0,n-1,i,ans)));\n           if(ans!=n-1)\n             finalans=min(finalans,abs(k-sg.query(0,0,n-1,i,ans+1)));  \n            \n        }\n        \n        \n        return finalans;\n    }\n};",
    "submit_ts": 1717300222.0
}