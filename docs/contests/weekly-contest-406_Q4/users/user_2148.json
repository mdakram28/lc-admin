{
    "username": "adibhai0845R",
    "submission": "class Solution {\n    public long minimumCost(int m, int n, int[] horizontalCut, int[] verticalCut) {\n         PriorityQueue<Long> h = new PriorityQueue<>(Collections.reverseOrder());\n        PriorityQueue<Long> v = new PriorityQueue<>(Collections.reverseOrder());\n\n        for (long po : horizontalCut) {\n            h.offer(po);\n        }\n\n        for (long lo : verticalCut) {   v.offer(lo);\n        }\n        long ui = 0;\n        long ki = 1;\n        long pi = 1;\n\n        while (!h.isEmpty() && !v.isEmpty()) {\n            if (h.peek() > v.peek()) {\n                ui += h.poll() *pi;\n                ki++;\n            } else {             ui += v.poll() * ki;  pi++;\n            }\n        }\n\n        while (!h.isEmpty()) {\n            ui += h.poll() *pi;\n        }\n        while (!v.isEmpty()) {   ui += v.poll() * ki;\n        }\n\n        return ui;\n    }\n}",
    "submit_ts": "1720926062",
    "subm_id": "1320274775"
}