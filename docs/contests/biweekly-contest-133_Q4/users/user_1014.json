{
    "username": "rajnarayansharma110",
    "submission": "#define MOD 1000000007\n#define MAX_INVERSIONS 400\n\nvoid initializeReqMap(int *reqMap, int size) {\n    for (int i = 0; i <= size; i++) {\n        reqMap[i] = -1;\n    }\n}\n\nint numberOfPermutations(int n, int** requirements, int requirementsSize, int* requirementsColSize) {\n    int reqMap[n + 1];\n    initializeReqMap(reqMap, n);\n    for (int i = 0; i < requirementsSize; i++) {\n        int key = requirements[i][0] + 1;\n        int value = requirements[i][1];\n        reqMap[key] = value;\n    }\n    long **permCounts = (long **)malloc((n + 1) * sizeof(long *));\n    for (int i = 0; i <= n; i++) {\n        permCounts[i] = (long *)calloc(MAX_INVERSIONS + 1, sizeof(long));\n    }\n    permCounts[0][0] = 1;\n    for (int length = 1; length <= n; length++) {\n        for (int inv = 0; inv <= MAX_INVERSIONS; inv++) {\n            for (int newPos = 0; newPos < length; newPos++) {\n                int prevInv = inv - newPos;\n                if (prevInv >= 0) {\n                    permCounts[length][inv] = (permCounts[length][inv] + permCounts[length - 1][prevInv]) % MOD;\n                }\n            }\n        }\n        if (reqMap[length] != -1) {\n            int targetInv = reqMap[length];\n            for (int inv = 0; inv <= MAX_INVERSIONS; inv++) {\n                if (inv != targetInv) {\n                    permCounts[length][inv] = 0;\n                }\n            }\n        }\n    }\n    long result = 0;\n    for (int i = 0; i <= MAX_INVERSIONS; i++) {\n        result = (result + permCounts[n][i]) % MOD;\n    }\n    return (int)result;\n}",
    "submit_ts": 1719071194.0
}