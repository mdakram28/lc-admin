{
    "username": "math_pi",
    "submission": "class TrieNode {\npublic:\n    map<char, TrieNode*> children;\n    vector<pair<int, int>> word_ends;\n};\n\nclass Trie {\npublic:\n    TrieNode* root;\n\n    Trie() {\n        root = new TrieNode();\n    }\n\n    void insert(string word, int index, int cost) {\n        TrieNode* node = root;\n        for (char c : word) {\n            if (!node->children.count(c)) {\n                node->children[c] = new TrieNode();\n            }\n            node = node->children[c];\n        }\n        node->word_ends.push_back({index, cost});\n    }\n};\nclass HashedString {\n  private:\n\t// change M and B if you want\n\tstatic const long long M = 1e9 + 9;\n\tstatic const long long B = 9973;\n\n\t// pow[i] contains B^i % M\n\tstatic vector<long long> pow;\n\n\t// p_hash[i] is the hash of the first i characters of the given string\n\tvector<long long> p_hash;\n\n  public:\n\tHashedString(const string &s) : p_hash(s.size() + 1) {\n\t\twhile (pow.size() < s.size()) { pow.push_back((pow.back() * B) % M); }\n\n\t\tp_hash[0] = 0;\n\t\tfor (int i = 0; i < s.size(); i++) {\n\t\t\tp_hash[i + 1] = ((p_hash[i] * B) % M + s[i]) % M;\n\t\t}\n\t}\n\n\tlong long get_hash(int start, int end) {\n\t\tlong long raw_val =\n\t\t    (p_hash[end + 1] - (p_hash[start] * pow[end - start + 1]));\n\t\treturn (raw_val % M + M) % M;\n\t}\n};\nvector<long long> HashedString::pow = {1};\nclass Solution {\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int n = target.size();\n        vector<int> f(n + 1, INT_MAX);\n        f[0] = 0;\n\n        Trie t;\n        for (int i = 0; i < words.size(); ++i) {\n            t.insert(words[i], i, costs[i]);\n        }\n\n        for (int i = 0; i < n; ++i) {\n            if (f[i] == INT_MAX) {\n                continue;\n            }\n\n            TrieNode* node = t.root;\n            for (int j = i; j < n; ++j) {\n                if (!node->children.count(target[j])) {\n                    break;\n                }\n                node = node->children[target[j]];\n                for (auto& p : node->word_ends) {\n                    int word_len = words[p.first].size();\n                    if (i + word_len <= n) {\n                        f[i + word_len] = min(f[i + word_len], f[i] + p.second);\n                    }\n                }\n            }\n        }\n\n        if(f[n]==INT_MAX)return -1;\n        return f[n];\n    }\n};",
    "submit_ts": "1720322751",
    "subm_id": "1312358172"
}