{
    "username": "Shreehari_S",
    "submission": "class Solution:\n    def canReachCorner(self, w: int, h: int, cir: List[List[int]]) -> bool:\n        def bfs(g, s, t1, t2, n):\n            q=deque()\n            vis=[0]*(n+4)\n            q.append(s)\n            vis[s]=1\n\n            while q:\n                u=q.popleft()\n                for v in g[u]:\n                    if not vis[v]:\n                        q.append(v)\n                        vis[v]=1\n\n            return vis[t1] or vis[t2]\n        \n        n=len(cir)\n        c=[((cir[i][0], cir[i][1]), cir[i][2]) for i in range(n)]\n        g=[[] for _ in range(n+4)]\n\n        for i in range(n):\n            x, y=c[i][0]\n            r=c[i][1]\n\n            if x<=r:\n                g[n].append(i)\n                g[i].append(n)\n            if w-x<=r:\n                g[n+2].append(i)\n                g[i].append(n+2)\n            if y<=r:\n                g[n+1].append(i)\n                g[i].append(n+1)\n            if h-y<=r:\n                g[n+3].append(i)\n                g[i].append(n+3)\n\n        for i in range(n):\n            for j in range(i+1, n):\n                d=sqrt((c[i][0][0]-c[j][0][0])**2+(c[i][0][1]-c[j][0][1])**2)\n                if c[i][1]+c[j][1] >= d:\n                    g[i].append(j)\n                    g[j].append(i)\n\n        return not (bfs(g, n, n+1, n+2, n+4) or bfs(g, n+3, n+2, n+1, n+4))\n",
    "submit_ts": "1722138473",
    "subm_id": "1335791670"
}