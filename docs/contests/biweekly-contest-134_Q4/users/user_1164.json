{
    "username": "danzhi",
    "submission": "class Solution {\n      public static long countSubarrays(int[] nums, int k) {\n    int n = nums.length;\n    long ans = 0;\n    int ib = 0;\n    // int x = (1 << 30) - 1 - k;\n    List<Integer> zbits = new ArrayList<>();\n    for (int j = 0; j < 30; j++) {\n      if ((k & (1 << j)) == 0) {\n        zbits.add(j);\n      }\n    }\n    while (ib < n) {\n      while (ib < n && (nums[ib] & k) != k) {\n        ib++;\n      }\n      if (ib >= n) {\n        break;\n      }\n      int ie = ib + 1;\n      while (ie < n && (nums[ie] & k) == k) {\n        ie++;\n      }\n      // consider [ib, ie). A qualified sub-array would contain at least one 0 for each bit\n      // not set in k --- at least one 0 for each bit set in x.\n      long x = func(ib, ie, nums, zbits);\n      // System.out.format(\"  ib:%d ie:%d x:%d\\n\", ib, ie, x);\n      ans += x;\n      ib = ie;\n    }\n    return ans;\n  }\n\n  static long func(int l, int r, int[] nums, List<Integer> zbits) {\n    int m = zbits.size();\n    int[] zcnt = new int[m];\n    int ie = l;\n    long ans = 0;\n    for (int i = l; i < r; i++) {\n      while (ie < r && !isOk(zcnt)) {\n        for (int j = 0; j < m; j++) {\n          int h = zbits.get(j);\n          if ((nums[ie] & (1 << h)) == 0) {\n            zcnt[j]++;\n          }\n        }\n        ie++;\n      }\n      if (!isOk(zcnt)) {\n        break;\n      }\n      // System.out.format(\"    i:%d ie:%d zcnt:%s\\n\", i, ie, Utils.traceIn(zcnt));\n      ans += r - ie + 1;\n      // phase out i\n      for (int j = 0; j < m; j++) {\n        int h = zbits.get(j);\n        if ((nums[i] & (1 << h)) == 0) {\n          zcnt[j]--;\n        }\n      }\n      // System.out.format(\"    i:%d ie:%d zcnt:%s\\n\", i, ie, Utils.traceIn(zcnt));\n    }\n    return ans;\n  }\n\n  static boolean isOk(int[] cnt) {\n    for (int v : cnt) {\n      if (v == 0) {\n        return false;\n      }\n    }\n    return true;\n  }\n}",
    "submit_ts": "1720280866",
    "subm_id": "1311804853"
}