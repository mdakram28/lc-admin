{
    "username": "bugmonk1001",
    "submission": "class Solution {\n    public int maximumLength(int[] nums, int maxChanges) {\n        int n = nums.length;\n        int[][] dp = new int[n][maxChanges + 1];\n        for (int[] row : dp) {\n            Arrays.fill(row, 1);\n        }\n\n        int maxLength = 1;\n        int[] maxChangesUsed = new int[maxChanges + 1];\n        Arrays.fill(maxChangesUsed, -1);\n\n        List<Map<Integer, Integer>> numCountsByChanges = new ArrayList<>();\n        for (int changes = 0; changes <= maxChanges; changes++) {\n            numCountsByChanges.add(new HashMap<>());\n        }\n\n        for (int i = 0; i < n; i++) {\n            int currentNum = nums[i];\n            for (int changes = 0; changes <= maxChanges; changes++) {\n                for (int usedChanges = 0; usedChanges < changes; usedChanges++) {\n                    dp[i][changes] = Math.max(dp[i][changes], 1 + maxChangesUsed[usedChanges]);\n                }\n                \n                if (numCountsByChanges.get(changes).containsKey(currentNum)) {\n                    dp[i][changes] = Math.max(dp[i][changes], 1 + numCountsByChanges.get(changes).get(currentNum));\n                }\n                maxLength = Math.max(maxLength, dp[i][changes]);\n            }\n\n            for (int changes = 0; changes <= maxChanges; changes++) {\n                maxChangesUsed[changes] = Math.max(maxChangesUsed[changes], dp[i][changes]);\n                numCountsByChanges.get(changes).put(currentNum,\n                        Math.max(numCountsByChanges.get(changes).getOrDefault(currentNum, -1), dp[i][changes]));\n            }\n        }\n\n        return maxLength;\n    }\n}",
    "submit_ts": 1717862399.0
}