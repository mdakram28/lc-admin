{
    "username": "Ansari_Irfan",
    "submission": "class Solution {\npublic:\n    int treeDiameter(vector<vector<int>>& edges) {\n        int n = edges.size() + 1;\n        vector<vector<int>> adjacency_list(n);\n        for (auto& edge : edges) {\n            adjacency_list[edge[0]].push_back(edge[1]);\n            adjacency_list[edge[1]].push_back(edge[0]);\n        }\n        \n        auto bfs = [&](int start) {\n            vector<int> dist(n, -1);\n            queue<int> q;\n            q.push(start);\n            dist[start] = 0;\n            int farthestNode = start;\n            while (!q.empty()) {\n                int node = q.front(); q.pop();\n                for (int neighbor : adjacency_list[node]) {\n                    if (dist[neighbor] == -1) {\n                        dist[neighbor] = dist[node] + 1;\n                        q.push(neighbor);\n                        if (dist[neighbor] > dist[farthestNode]) {\n                            farthestNode = neighbor;\n                        }\n                    }\n                }\n            }\n            return make_pair(farthestNode, dist[farthestNode]);\n        };\n        \n        auto first_bfs_result = bfs(0);\n        auto second_bfs_result = bfs(first_bfs_result.first);\n        return second_bfs_result.second;\n    }\n\n    vector<int> findTreeCenters(vector<vector<int>>& edges) {\n        int n = edges.size() + 1;\n        vector<vector<int>> adjacency_list(n);\n        vector<int> degree(n, 0);\n        for (auto& edge : edges) {\n            adjacency_list[edge[0]].push_back(edge[1]);\n            adjacency_list[edge[1]].push_back(edge[0]);\n            degree[edge[0]]++;\n            degree[edge[1]]++;\n        }\n        \n        queue<int> leaves;\n        for (int i = 0; i < n; ++i) {\n            if (degree[i] == 1) {\n                leaves.push(i);\n            }\n        }\n        \n        int remainingNodes = n;\n        while (remainingNodes > 2) {\n            int leavesCount = leaves.size();\n            remainingNodes -= leavesCount;\n            for (int i = 0; i < leavesCount; ++i) {\n                int leaf = leaves.front(); leaves.pop();\n                for (int neighbor : adjacency_list[leaf]) {\n                    if (--degree[neighbor] == 1) {\n                        leaves.push(neighbor);\n                    }\n                }\n            }\n        }\n        \n        vector<int> centers;\n        while (!leaves.empty()) {\n            centers.push_back(leaves.front());\n            leaves.pop();\n        }\n        \n        return centers;\n    }\n    \n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n        if (edges1.size() == 0 && edges2.size() == 0) return 1;\n        if (edges1.size() == 0 || edges2.size() == 0) return 2;\n        \n        int diameter1 = treeDiameter(edges1);\n        int diameter2 = treeDiameter(edges2);\n        \n        vector<int> centers1 = findTreeCenters(edges1);\n        vector<int> centers2 = findTreeCenters(edges2);\n        \n        int minDiameter = INT_MAX;\n        for (int center1 : centers1) {\n            for (int center2 : centers2) {\n                int newDiameter = max({diameter1, diameter2, (diameter1 + 1) / 2 + (diameter2 + 1) / 2 + 1});\n                minDiameter = min(minDiameter, newDiameter);\n            }\n        }\n        \n        return minDiameter;\n    }\n};",
    "submit_ts": 1719719880.0
}