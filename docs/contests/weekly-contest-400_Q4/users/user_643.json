{
    "username": "birenamanta",
    "submission": "class Solution {\n    class SegmentTree {\n        int[] tree;\n        int size;\n\n        // Constructor\n        public SegmentTree(int[] array) {\n            size = array.length;\n            tree = new int[4 * size];\n            build(array, 0, 0, size - 1);\n        }\n\n        // Function to build the Segment Tree\n        public void build(int[] array, int node, int start, int end) {\n            if (start == end) {\n                tree[node] = array[start];\n            } else {\n                int mid = (start + end) / 2;\n                build(array, 2 * node + 1, start, mid);\n                build(array, 2 * node + 2, mid + 1, end);\n                tree[node] = tree[2 * node + 1] & tree[2 * node + 2];\n            }\n        }\n\n        // Overloading query function to be used recursively\n        public int query(int left, int right) {\n            return query(0, 0, size - 1, left, right);\n        }\n\n        // query function to get bitwise AND of the range\n        public int query(int node, int start, int end, int left, int right) {\n            if (right < start || end < left) {\n                return Integer.MAX_VALUE; // Return maximum value if outside the range\n            }\n            if (left <= start && end <= right) {\n                return tree[node]; // Return node value if range is completely within the query range\n            }\n            int mid = (start + end) / 2;\n            int leftQuery = query(2 * node + 1, start, mid, left, right);\n            int rightQuery = query(2 * node + 2, mid + 1, end, left, right);\n            return leftQuery & rightQuery; // Return bitwise AND of children nodes\n        }\n    }\n\n    public int minimumDifference(int[] array, int target) {\n        int length = array.length;\n        SegmentTree segmentTree = new SegmentTree(array);\n        int minDiff = Integer.MAX_VALUE;\n        for (int i = 0; i < length; i++) {\n            int left = i - 1, right = length - 1, mid;\n            // Binary search implementation\n            while (right - left > 1) {\n                mid = (left + right) / 2;\n                if (segmentTree.query(i, mid) >= target)\n                    left = mid;\n                else\n                    right = mid;\n            }\n            if (left != i - 1)\n                minDiff = Math.min(minDiff, Math.abs(segmentTree.query(i, left) - target));\n            minDiff = Math.min(minDiff, Math.abs(target - segmentTree.query(i, right)));\n        }\n        return minDiff;  \n    }\n}\n",
    "submit_ts": 1717299465.0
}