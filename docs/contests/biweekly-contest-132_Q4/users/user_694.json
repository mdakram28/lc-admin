{
    "username": "dibas1",
    "submission": "class Solution {\npublic:\n    map<int,int> next;\n    int maximumLength(vector<int>& nums, int k) {\n        int n = nums.size();\n        int ans=1;\n// //         vector<vector<int>> dp(n,vector<int>(k+1,1));\n// //         for(int x=0;x<=k;++x) dp[0][x]=1;\n// //         for(int i=1;i<n;++i){\n// //             for(int j=0;j<i;++j){                \n// //         // for(int x=0;x<=k;++x) dp[i][x]=1;\n// //                 if(nums[i]==nums[j]){\n// //                     for(int x=0;x<=k;++x) {\n// //                         dp[i][x]=max(dp[i][x],1+dp[j][x]);\n// //                     }\n// //                 }\n// //                 else {\n// //                     for(int x=1;x<=k;++x) {\n// //                         dp[i][x]=max(dp[i][x],1+dp[j][x-1]);\n// //                     }\n// //                 }\n// //             }\n// //         }\n// // //         vector<int> c(n,0);\n// // //         for(int i=1;i<n;++i) {\n// // //             c[i]=c[i-1]+(nums[i]!=nums[i-1]);\n// // //         }\n        \n// //         for(int i=0;i<n;++i){\n// //             for(int j=0;j<=k;++j){\n// //                 ans=max(ans,dp[i][j]);\n// //             }\n// //         }\n//         //Knapsack\n        vector<pair<int,int>> v;\n        int last = nums[0], c=1;\n        for(int i=1;i<n;++i){\n            if(nums[i]==nums[i-1]){\n                c++;\n            }\n            else {\n                v.push_back({last,c});\n                last = nums[i];\n                c=1;\n            }\n        }\n        v.push_back({last,c});\n        vector<vector<vector<int>>> dp(v.size(),vector<vector<int>>(k+1,{0,1}));\n        \n//         // next.clear();\n        \n//         //try the knapsack\n        map<int,int> m,next;\n        for(int i=v.size()-1;i>=0;--i){\n            if(m.count(v[i].first)) next[i]=m[v[i].first];\n            m[v[i].first]=i;\n        }\n        for(int i=0;i<=k;++i){\n            dp[v.size()-1][i]={0,v[v.size()-1].second};\n            ans = max(ans,v[v.size()-1].second);\n        }\n        for(int i=v.size()-2;i>=0;--i){\n            \n            for(int j=0;j<=k;++j){\n                dp[i][j][1]=v[i].second;\n              if(next.count(i)){\n                  dp[i][j][0]=dp[next[i]][j][0];\n                  dp[i][j][1]=v[i].second+dp[next[i]][j][1];\n              }\n                dp[i][j][0]=max(dp[i][j][0],max(dp[i+1][j][0],dp[i+1][j][1]));\n                \n                if(j!=0){\n                dp[i][j][1]=max(dp[i][j][1],v[i].second+max(dp[i+1][j-1][0],dp[i+1][j-1][1]));\n                }\n                ans = max(ans,max(dp[i][j][0],dp[i][j][1]));\n                // cout << v[i].first << \" \" << dp[i][j][0] << \" \"<<dp[i][j][1]<<\"\\n\";\n            }\n        }\n        \n        \n        \n//         vector<int> c(n,0);\n//         for(int i=1;i<n;++i) {\n//             c[i]=c[i-1]+(nums[i]!=nums[i-1]);\n//         }\n        return ans;\n    }\n    \n//     int solve(int i, vector<pair<int,int>> &v,int k, vector<vector<vector<int>>> &dp){\n//         if(i==v.size()) return 0;\n//         if(dp[i][k]!=-1) return dp[i][k];\n        \n//         int ans = 0;\n//         // for(int j=i+1;j<v.size();++j){\n//         //     if(v[j].first==v[i].first) {\n//         //         ans = max(ans,solve(j,v,k,dp));\n//         //     }\n//         //     else if(k>0){\n//         //         ans = max(ans,solve(j,v,k-1,dp));\n//         //     }\n//         // }\n//         ans[i]\n//         return dp[i][k] = v[i].second+ans;\n//     }\n};",
    "submit_ts": 1717862215.0
}