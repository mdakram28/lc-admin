{
    "username": "yaamarjeet",
    "submission": "struct TrieNode {\n    TrieNode *p[28];\n    int cost = 1e9;\n\n    TrieNode(int c) {\n        cost = c;\n        for (int i = 0; i <= 27; i++)\n            p[i] = NULL;\n    }\n};\n\nstruct PrefixTrie {\n    TrieNode *root = new TrieNode(1e9);\n    bool add(int cost, string &word) {\n        TrieNode *r = root;\n        for (int i = 0; i < word.size(); i++) {\n            if (r->p[word[i] - 'a'] == NULL)\n                r->p[word[i] - 'a'] = new TrieNode(1e9);\n\n            r = r->p[word[i] - 'a'];\n        }\n\n        int final = cost;\n        final = min(final, r->cost);\n        r->cost = final;\n        return 1;\n    }\n\n};\n\nclass Solution {\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        for (int i = 0; i < costs.size(); i++) {\n            trie.add(costs[i], words[i]);\n        }\n\n        n = target.size();\n        for (int i = 0; i < n; i++)\n            mem[i] = -1;\n\n        this->target = target;\n        int cur = dp_fun(0);\n        if (cur >= int(1e9))\n            cur = -1;\n        return cur;\n    }\n\n        PrefixTrie trie;\n    int n, mem[50000];\n    string target;\n\n    int dp_fun(int i) {\n        if (i == n)\n            return bool(0);\n\n        if (mem[i] != -1)\n            return mem[i];\n        int cur = 7 + 1e9;\n        int _ = i;\n\n        TrieNode *root = trie.root;\n        for (; i < n; i++) {\n            if (root->p[target[i] - 'a'] == NULL)\n                break;\n\n            root = root->p[target[i] - 'a'];\n            if (root->cost < 1e9)\n                cur = min(cur, root->cost + dp_fun(i + 1));\n        }\n\n        return mem[_] = cur;\n    }\n};",
    "submit_ts": "1720322564",
    "subm_id": "1312353257"
}