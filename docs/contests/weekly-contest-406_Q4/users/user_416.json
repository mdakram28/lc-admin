{
    "username": "KTS-o7",
    "submission": "class Solution {\npublic:\n    long long minimumCost(int m, int n, vector<int>& horizontalCut, vector<int>& verticalCut) {\n           std::ios::sync_with_stdio(false);\n        priority_queue<pair<int, char>, vector<pair<int, char>>> pq;\n        for (int cost : horizontalCut) {\n            pq.push({cost, 'H'});\n        }\n        for (int cost : verticalCut) {\n            pq.push({cost, 'V'});\n        }\n        long long int horizontalPieces = 1; \n        long long int verticalPieces = 1;   \n        long long int totalCost = 0;\n        while (!pq.empty()) {\n            auto cut = pq.top();\n            pq.pop();\n            \n            if (cut.second == 'H') {\n\n                totalCost += cut.first * verticalPieces;\n                ++horizontalPieces;\n            } else {\n                totalCost += cut.first * horizontalPieces;\n                ++verticalPieces;\n            }\n        }\n        return totalCost;\n    }\n\n};",
    "submit_ts": "1720925499",
    "subm_id": "1320256776"
}