{
    "username": "Hanafubuki",
    "submission": "class Solution:\n    def minimumDiameterAfterMerge(self, edges1: List[List[int]], edges2: List[List[int]]) -> int:\n\n        g1 = defaultdict(set)\n        g2 =defaultdict(set)\n        for x, y in edges1:\n            g1[x].add(y)\n            g1[y].add(x)\n        \n        for x, y in edges2:\n            g2[x].add(y)\n            g2[y].add(x)\n\n        def bfs(g, root):\n            vis = {root}\n            q = deque([root])\n            h = 0\n            u = None\n            while q:\n                for _ in range(len(q)):\n                    u = q.popleft()\n                    for v in g[u]:\n                        if v not in vis:\n                            vis.add(v)\n                            q.append(v)\n                h += 1\n            return u, h - 1\n        \n        u1, _ = bfs(g1, 0)\n        _, h1 = bfs(g1, u1)\n        u2, _ = bfs(g2, 0)\n        _, h2 = bfs(g2, u2)\n\n        # print(h1, h2)\n        # h1, h2 = min(h1, h2), max(h1, h2)\n\n        # if (h1 + 1) <= h2 // 2:\n        #     return h2\n\n        # return h2 + 1\n        \n\n        return max(h1, h2, (h1 + 1) // 2 + (h2 + 1) // 2 + 1)\n\n\n\n                ",
    "submit_ts": "1719719572",
    "subm_id": "1304445224"
}