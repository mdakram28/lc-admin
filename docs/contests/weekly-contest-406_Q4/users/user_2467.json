{
    "username": "akbar19",
    "submission": "class Solution {\n    class Cut{\n        long val;\n        int dir;\n        public Cut(long val,int dir){\n            this.val=val;\n            this.dir=dir;\n        }\n        public long getVal(){\n            return -val;\n        }\n    }\n    public long minimumCost(int m, int n, int[] horizontalCut, int[] verticalCut) {\n        int hp=1,vp=1;\n        PriorityQueue<Cut> pq=new PriorityQueue<>(Comparator.comparing(Cut::getVal));\n        for(int cut:horizontalCut)\n            pq.add(new Cut(cut,0));\n        for(int cut:verticalCut)\n            pq.add(new Cut(cut,1));\n        long ans=0;\n        while(!pq.isEmpty()){\n            Cut cut=pq.poll();\n            if(cut.dir==0){\n                ans+=(cut.val*vp);\n                hp++;\n            } else {\n                ans+=(cut.val*hp);\n                vp++;\n            }\n        }\n        return ans;\n    }\n}",
    "submit_ts": "1720926835",
    "subm_id": "1320297708"
}