{
    "username": "154775258",
    "submission": "class Solution {\npublic:\n    long long minimumCost(int m, int n, vector<int>& horizontalCut, vector<int>& verticalCut) {\n        priority_queue<pair<int,int>> p;\n        for(int i = 0;i < horizontalCut.size();++i){\n            p.push({horizontalCut[i], 1});\n        }\n        for(int i = 0;i < verticalCut.size();++i){\n            p.push({verticalCut[i], 2});\n        }\n        int c1 = 1,c2 = 1;\n        long long ans = 0;\n        while(!p.empty()){\n            auto tmp = p.top();\n            int a = tmp.first;\n            int cnt = tmp.second;\n            p.pop();\n            if(cnt == 1)ans += c2 * a, c1++;\n            else ans += c1 * a, c2++;\n            //cout << ans << ' ' << c1 << ' ' << c2 << '\\n';\n        }\n        return ans;\n    }\n};",
    "submit_ts": "1720925574",
    "subm_id": "1320259254"
}