{
    "username": "\u7693\u9996\u4e0d\u5026.GRH",
    "submission": "# -*- coding: utf-8 -*-\nfrom typing import List, Tuple, Optional\nfrom collections import deque, Counter\nfrom queue import PriorityQueue\nimport math\nfrom functools import lru_cache\nfrom sortedcontainers import SortedDict, SortedSet\nimport random\nimport copy\nimport sys\nsys.setrecursionlimit(9999999)\n\nMOD = 10**9 + 7\n\n\n\nINF = 10**12\n\n\nclass Solution:\n    def maximumValueSum(self, board: List[List[int]]) -> int:\n\n        g = board\n        m = len(g)\n        n = len(g[0])\n\n        col_sum_pre = [[0]*n for i in range(m)]\n        for j in range(n):\n            col_sum_pre[0][j] = g[0][j]\n\n        for i in range(1, m):\n            for j in range(n):\n                col_sum_pre[i][j] = max(g[i][j],  col_sum_pre[i-1][j])\n\n\n        col_sum_suf = [[0]*n for i in range(m)]\n        for j in range(n):\n            col_sum_suf[m-1][j] = g[m-1][j]\n\n        for i in range(m-2, -1, -1):\n            for j in range(n):\n                col_sum_suf[i][j] = max(g[i][j], col_sum_suf[i+1][j])\n\n\n\n        def get_mj_mi_pre(arr):\n            major = [None]*n\n            minor = [None]*n\n\n            major[0] = (0, arr[0])        # idx, val\n            minor[0] = (-1, -INF)\n\n            for j in range(1, n):\n                major[j] = major[j-1]\n                minor[j] = minor[j-1]\n\n                if arr[j] > major[j][1]:\n                    minor[j] = major[j]\n                    major[j] = (j, arr[j])\n                else:\n                    if arr[j] > minor[j][1]:\n                        minor[j] = (j, arr[j])\n\n            return major, minor\n\n        def get_mj_mi_suf(arr):\n            major = [None] * n\n            minor = [None] * n\n\n            major[n-1] = (n-1, arr[n-1])  # idx, val\n            minor[n-1] = (-1, -INF)\n\n            for j in range(n-2, -1, -1):\n                major[j] = major[j + 1]\n                minor[j] = minor[j + 1]\n\n                if arr[j] > major[j][1]:\n                    minor[j] = major[j]\n                    major[j] = (j, arr[j])\n                else:\n                    if arr[j] > minor[j][1]:\n                        minor[j] = (j, arr[j])\n\n            return major, minor\n\n\n\n        ans = -INF\n        for mid in range(1, m-1):\n\n            arr1 = col_sum_pre[mid-1]\n            arr2 = col_sum_suf[mid+1]\n\n            major1_pre, minor1_pre = get_mj_mi_pre(arr1)\n            major2_pre, minor2_pre = get_mj_mi_pre(arr2)\n\n            major1_suf, minor1_suf = get_mj_mi_suf(arr1)\n            major2_suf, minor2_suf = get_mj_mi_suf(arr2)\n\n\n            for jj in range(n):\n                mid_v = g[mid][jj]\n\n                # both left\n                if jj-1 >= 1:\n                    for a in [major1_pre[jj-1], minor1_pre[jj-1]]:\n                        for b in [major2_pre[jj-1], minor2_pre[jj-1]]:\n                            if a[0] != b[0]:\n                                ans = max(ans, a[1]+b[1]+mid_v)\n\n                # both right\n                if jj+1 <= n-2:\n                    for a in [major1_suf[jj+1], minor1_suf[jj+1]]:\n                        for b in [major2_suf[jj+1], minor2_suf[jj+1]]:\n                            if a[0] != b[0]:\n                                ans = max(ans, a[1]+b[1]+mid_v)\n\n                # left and right\n                if jj-1 >= 0 and jj+1 <= n-1:\n                    ans = max(ans, mid_v + major1_pre[jj-1][1] + major2_suf[jj+1][1])\n                    ans = max(ans, mid_v + major2_pre[jj-1][1] + major1_suf[jj+1][1])\n\n        return ans\n",
    "submit_ts": "1723908749",
    "subm_id": "556332637"
}