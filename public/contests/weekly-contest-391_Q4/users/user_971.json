{
    "username": "dumbunny8128",
    "submission": "class Solution:\n    '''Notes\n    * n = 1e5, so O(N Log N) is needed.\n    * Removing any point ... \n    '''\n    def minimumDistance(self, points: List[List[int]]) -> int:\n        points1 = [(i, x, y) for i, (x, y) in enumerate(points)]\n        points2 = [(i, x, y) for i, (x, y) in enumerate(points)]\n        points1.sort(key=lambda triplet: triplet[1] + triplet[2])\n        points2.sort(key=lambda triplet: triplet[1] - triplet[2])\n        n = len(points)\n        \n        # print(f'points={points}')\n        # print(f'points1={points1}')\n        # print(f'points2={points2}')\n        \n        def getDist(triplet1, triplet2):\n            i1, x1, y1 = triplet1\n            i2, x2, y2 = triplet2\n            return abs(x2 - x1) + abs(y2 - y1)\n        \n        def getMaxDist(triplets, replaceIdx) -> int:\n            if replaceIdx == triplets[0][0]:\n                return getDist(triplets[1], triplets[n - 1])\n            elif replaceIdx == triplets[n - 1][0]:\n                return getDist(triplets[0], triplets[n - 2])\n            else:\n                return getDist(triplets[0], triplets[n - 1])\n\n        badIdxs = set([points1[0][0], points1[n - 1][0], points2[0][0], points2[n - 1][0]])\n        # print(f'badIdxs={badIdxs}')\n        bestDist = math.inf\n        for idx in badIdxs:\n            dist = max(getMaxDist(points1, idx), getMaxDist(points2, idx))\n            bestDist = min(bestDist, dist)\n        return bestDist\n\n        dist1 = getMaxDist(points1)\n        dist2 = getMaxDist(points2)\n        return max(dist1, dist2)\n        \n        points.sort()\n        n = len(points)\n        bestDist = 0\n        \n        def getWorst(skipIdx1: int, skipIdx2: int) -> (int, int, int):\n            worstI = -1\n            worstJ = -1\n            worstDist = -1\n            for i in range(n):\n                if i in (skipIdx1, skipIdx2):\n                    continue\n                x0, y0 = points[i]\n                for j in range(i + 1, n):\n                    if j in (skipIdx1, skipIdx2):\n                        continue\n                    x1, y1 = points[j]\n                    dist = abs(x1 - x0) + abs(y1 - y0)\n                    if worstDist < dist:\n                        worstDist = dist\n                        worstI = i\n                        worstJ = j\n            return worstDist, worstI, worstJ\n        dist1, i1, j1 = getWorst(-1, -1)\n        dist2, i2, j2 = getWorst(i1, -1)\n        dist3, i2, j2 = getWorst(j1, -1)\n        return min(dist2, dist3)\n        \n        \n        \n        "
}