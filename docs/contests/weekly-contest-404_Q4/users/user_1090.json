{
    "username": "zcimrn",
    "submission": "namespace {\n    void f2(\n        std::vector<std::vector<int>>& c,\n        std::vector<int>& d,\n        std::vector<int>& h,\n        int v,\n        int p,\n        int cur,\n        int& ans\n    ) {\n        d[v] = cur;\n        \n        int th = 1;\n        int h1 = -1;\n        int h2 = -1;\n        \n        for (int u : c[v]) {\n            if (u == p) {\n                continue;\n            }\n            \n            f2(c, d, h, u, v, cur + 1, ans);\n            \n            th = std::max(th, h[u] + 1);\n            \n            if (h[u] >= h1) {\n                h2 = h1;\n                h1 = h[u];\n            } else if (h[u] >= h2) {\n                h2 = h[u];\n            }\n        }\n        \n        h[v] = th;\n        ans = std::max(ans, d[v] + h[v] - 1);\n        \n        if (h2 != -1) {\n            ans = std::max(ans, h1 + h2 + 1);\n        }\n    }\n    \n    int f(vector<vector<int>>& edges) {\n        int n = edges.size() + 2;\n        std::vector<std::vector<int>> c(n);\n        for (const auto& e : edges) {\n            c[e[0]].push_back(e[1]);\n            c[e[1]].push_back(e[0]);\n        }\n\n        std::vector<int> d(n);\n        std::vector<int> h(n);\n        int ans = 0;\n        \n        f2(c, d, h, 0, -1, 1, ans);\n        \n        return ans;\n    }\n}\n\nclass Solution {\npublic:\n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n        int d1 = f(edges1);\n        int d2 = f(edges2);\n        \n        return std::max(std::max(d1 - 1, d2 - 1), d1 / 2 + d2 / 2 + 1);\n    }\n};",
    "submit_ts": "1719719593",
    "subm_id": "1304445757"
}