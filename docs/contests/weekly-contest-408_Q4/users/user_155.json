{
    "username": "sgdfbahjbhbaisdufg",
    "submission": "#define ll long long\n\nstruct UnionFind {\n    vector<int> p;\n    \n    UnionFind(int n) {\n        for (int i = 0; i < n; ++i) {\n            p.push_back(i);\n        }\n    }\n    \n    int Find(int i) {\n        if (p[i] != i) {\n            p[i] = Find(p[i]);\n        }\n        return p[i];\n    }\n    \n    void DoUnion(int i, int j) {\n        int rti = Find(i), rtj = Find(j);\n        if (rti != rtj) {\n            p[rti] = rtj;\n        }\n    }\n};\n\nclass Solution {\npublic:\n    bool canReachCorner(int X, int Y, vector<vector<int>>& circles) {\n        auto sq = [](int x) -> ll {\n            return (ll)x * x;\n        };\n        auto checkint = [&](int i, int j) {\n            ll dsq = sq(circles[i][0] - circles[j][0]) + sq(circles[i][1] - circles[j][1]);\n            ll rsum = circles[i][2] + circles[j][2];\n            ll rsumsq = sq(rsum);\n            // printf(\"%d %d %d %d\\n\", dsq, rsum, rsumsq, (int)(dsq < rsumsq));\n            return dsq <= rsumsq;\n        };\n        \n//         checkint(0, 4);\n        \n//         return true;\n        \n        auto getintrect = [&](int i) {\n            int x = circles[i][0], y = circles[i][1], r = circles[i][2];\n            return tuple<int, int, int, int> {\n                x - r <= 0, x + r >= X, y - r <= 0, y + r >= Y\n            };\n        };\n        \n        int n = circles.size();\n        UnionFind dsu(n);\n        for (int i = 0; i < n; ++i) {\n            for (int j = i + 1; j < n; ++j) {\n                if (checkint(i, j)) {\n                    dsu.DoUnion(i, j);\n                }\n            }\n        }\n        \n        unordered_map<int, tuple<int, int, int, int>> intrect;\n        for (int i = 0; i < n; ++i) {\n            int rt = dsu.Find(i);\n            auto & [xl, xu, yl, yu] = intrect[rt];\n            \n            auto [cxl, cxu, cyl, cyu] = getintrect(i);\n            xl = xl || cxl;\n            xu = xu || cxu;\n            yl = yl || cyl;\n            yu = yu || cyu;\n            \n            if (xl && xu || xl && yl || \n               xu && yu ||\n               yl && yu) {\n                return false;\n            }\n            \n            // printf(\"%d : %d | %d %d %d | %d %d %d %d | %d %d %d %d\\n\", i, rt, circles[i][0], circles[i][1], circles[i][2], cxl, cxu, cyl, cyu, xl, xu, yl, yu);\n        }\n        \n        return true;\n    }\n};\n\n/*\n\n8\n5\n[[4,4,1],[3,1,1],[7,1,1],[2,1,1],[4,2,1],[5,1,1],[7,2,1]]\n1327\n130581\n[[1196,113906,6],[329,14800,324],[1058,128057,64],[656,95310,556],[1253,67521,29],[972,28739,335],[688,30299,160],[243,94739,95]]\n*/",
    "submit_ts": "1722135439",
    "subm_id": "1335701745"
}