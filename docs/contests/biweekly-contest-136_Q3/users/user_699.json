{
    "username": "festive-cori0ld",
    "submission": "use std::cmp::{max, min};\nuse std::collections::{HashMap, HashSet};\nuse std::mem::swap;\nuse std::ops::Sub;\n\n\nstruct DFS {\n    grid : Vec<Vec<i32>>,\n    vis : Vec<Vec<bool>>,\n    n : usize,\n    m : usize,\n}\n\nimpl DFS {\n    fn Run(&mut self) -> i32 {\n        let mut cnt = vec![0; 3];\n        let mut ans = 0;\n        for i in 0..self.n {\n            for j in 0..self.m {\n                let (z, o) = self.dfs(i, j);\n                if z + o == 4 {\n                    ans += min(4 - z, 4 - o);\n                    continue;\n                }\n\n                if z + o == 2 {\n                    cnt[o as usize] += 1;\n                    continue;\n                }\n\n                if z == 0 && o == 1 {\n                    ans += 1;\n                    continue;\n                }\n\n                if z + o > 0 {\n                    //println!(\"{}, {} : {}, {}\", i, j, z, o);\n                }\n            }\n        }\n\n        \n        ans += cnt[1];\n        if cnt[2] % 2 == 1 && cnt[1] == 0 {\n            ans += 2;\n        }\n\n        ans\n    }\n\n    fn dfs(&mut self, i : usize, j : usize) -> (i32, i32) {\n\n        if self.vis[i][j] {\n            return (0, 0);\n        }\n        self.vis[i][j] = true;\n\n        let dj = self.m - j - 1;\n        let di = self.n - i - 1;\n\n        let (mut a1, mut b1) = self.dfs(i, dj);\n        let (a2, b2) = self.dfs(di, j);\n\n        if self.grid[i][j] == 0 {\n            a1 += 1;\n        } else {\n            b1 += 1;\n        }\n\n        (a1 + a2, b1 + b2)\n    }\n}\n\nimpl Solution {\n    pub fn min_flips(grid: Vec<Vec<i32>>) -> i32 {\n        let n = grid.len();\n        let m = grid[0].len();\n        let mut f = DFS {\n            grid,\n            vis: vec![vec![false; m]; n],\n            n: n,\n            m: m,\n        };\n\n        f.Run()\n    }\n}",
    "submit_ts": "1722698185",
    "subm_id": "552269745"
}