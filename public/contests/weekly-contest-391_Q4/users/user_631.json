{
    "username": "saikaushik333",
    "submission": "class Solution {\n    public int minimumDistance(int[][] points) {\n        int res = Integer.MAX_VALUE;\n        TreeMap<Integer,Integer> sumMap = new TreeMap<>();\n        TreeMap<Integer,Integer> diffMap = new TreeMap<>();\n        for(int[] p:points) {\n            int diff = p[0]-p[1];\n            int sum = p[0]+p[1];\n            sumMap.put(sum, sumMap.getOrDefault(sum,0)+1);\n            diffMap.put(diff, diffMap.getOrDefault(diff,0)+1);\n        }\n        for(int[] p:points) {\n            int diff = p[0]-p[1];\n            int sum = p[0]+p[1];\n            if(sumMap.get(sum)==1) {\n                sumMap.remove(sum);\n            } else {\n                sumMap.put(sum, sumMap.get(sum)-1);\n            }\n            \n            if(diffMap.get(diff)==1) {\n                diffMap.remove(diff);\n            } else {\n                diffMap.put(diff, diffMap.get(diff)-1);\n            }\n            \n            int dist = Math.max(sumMap.lastKey()-sumMap.firstKey(), diffMap.lastKey()-diffMap.firstKey());\n            res = Math.min(res, dist);\n            \n            sumMap.put(sum, sumMap.getOrDefault(sum,0)+1);\n            diffMap.put(diff, diffMap.getOrDefault(diff,0)+1);\n        }\n        return res;\n    }\n}"
}