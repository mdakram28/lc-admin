{
    "username": "alexlin87",
    "submission": "import java.util.*;\n\nclass Solution {\n    private int[] dp;\n    private Trie trie;\n    public int minimumCost(String target, String[] words, int[] costs) {\n        trie = new Trie();\n        for(int i = 0; i < words.length; i++) {\n            trie.insert(words[i], costs[i]);\n        }\n        int n = target.length();\n        dp = new int[n + 1];\n        Arrays.fill(dp, Integer.MAX_VALUE);\n        dp[n] = 0;\n        compute(target, 0);\n        return dp[0];\n    }\n    private int compute(String t, int idx) {\n        if(dp[idx] == Integer.MAX_VALUE) {\n            TrieNode curr = trie.root;\n            for(int i = idx; i < t.length(); i++) {\n                char currChar = t.charAt(i);\n                curr = curr.children.getOrDefault(currChar, null);\n                if(curr == null) {\n                    break;\n                }\n                if(curr.isWord) {\n                    int w = compute(t, i + 1);\n                    if(w >= 0) {\n                        dp[idx] = Math.min(dp[idx], curr.cost + w);\n                    }\n                }\n            }\n        }\n        if(dp[idx] == Integer.MAX_VALUE) {\n            dp[idx] = -1;\n        }\n        return dp[idx];\n    }\n}\nclass TrieNode {\n    char c;\n    Map<Character, TrieNode> children;\n    boolean isWord;\n\n    int cost = 10005;\n\n    public TrieNode() {\n        this.children = new HashMap<>();\n    }\n\n    public TrieNode(char c) {\n        this.c = c;\n        this.children = new HashMap<>();\n    }\n    public Map<Character, TrieNode> getChildren() {\n        return this.children;\n    }\n\n    public void setEndOfWord() {\n        this.isWord = true;\n    }\n\n    public boolean getEndOfWord() {\n        return this.isWord;\n    }\n}\nclass Trie {\n    TrieNode root;\n\n    public Trie() {\n        this.root = new TrieNode();\n    }\n\n    public void insert(String word, int cost) {\n        TrieNode currNode = root;\n        for(int i = 0; i < word.length(); i++) {\n            char currChar = word.charAt(i);\n            if(!currNode.getChildren().containsKey(currChar)) {\n                TrieNode newNode = new TrieNode(currChar);\n                currNode.getChildren().put(currChar, newNode);\n            }\n            currNode = currNode.getChildren().get(currChar);\n\n            if(i == word.length() - 1) {\n                currNode.setEndOfWord();\n                currNode.cost = Math.min(currNode.cost, cost);\n            }\n        }\n    }\n\n    public boolean search(String word) {\n        TrieNode currNode = root;\n        for(int i = 0; i < word.length(); i++) {\n            char currChar = word.charAt(i);\n            if(!currNode.getChildren().containsKey(currChar)) {\n                return false;\n            }\n            currNode = currNode.getChildren().get(currChar);\n\n            if(i == word.length() - 1 && !currNode.getEndOfWord()) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public boolean startsWith(String prefix) {\n        TrieNode currNode = root;\n        for(int i = 0; i < prefix.length(); i++) {\n            char currChar = prefix.charAt(i);\n            if(!currNode.getChildren().containsKey(currChar)) {\n                return false;\n            }\n            currNode = currNode.getChildren().get(currChar);\n        }\n        return true;\n    }\n}",
    "submit_ts": "1720322129",
    "subm_id": "1312341491"
}