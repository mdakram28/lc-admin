{
    "username": "satyamkant2805",
    "submission": "class Solution {\n    class Diameter_of_tree {\n        /////////////// 0 based indexing /////////////////\n        vector<int> dist;\n        vector<int> vis;\n        void dfs(vector<int> adj[], int node, int curr_dist) {\n            vis[node] = 1;\n            dist[node] = curr_dist;\n            for (auto &it : adj[node]) {\n                if (!vis[it]) {\n                    dfs(adj, it, curr_dist + 1);\n                }\n            }\n        }\n\n      public:\n        int get_dia(vector<int> adj[], int n) {\n            vis = vector<int>(n, 0);\n            dist = vector<int>(n, 0);\n            dfs(adj, 0, 0);\n            int node1 = -1;\n            int mx = INT_MIN;\n            for (int i = 0; i < n; i++) {\n                if (mx < dist[i]) {\n                    mx = dist[i];\n                    node1 = i;\n                }\n            }\n\n            vis.assign(n, 0);\n            dist.assign(n, 0);\n            dfs(adj, node1, 0);\n            int node2 = -1;\n            mx = INT_MIN;\n            for (int i = 0; i < n; i++) {\n                if (mx < dist[i]) {\n                    mx = dist[i];\n                    node2 = i;\n                }\n            }\n\n            return mx;\n        }\n    };\n\npublic:\n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n        Diameter_of_tree cal;\n        int n = edges1.size() + 1;\n        int m = edges2.size() + 1;\n        vector<int> adj1[n],adj2[m];\n            \n        for(auto &it:edges1){\n            int u = it[0],v = it[1];\n            adj1[u].push_back(v);\n            adj1[v].push_back(u);\n        }\n        \n        for(auto &it:edges2){\n            int u = it[0],v = it[1];\n            adj2[u].push_back(v);\n            adj2[v].push_back(u);\n        }\n        \n        int len1 = cal.get_dia(adj1,n);\n        int len2 = cal.get_dia(adj2,m);\n        int ans = 1;\n        // cout<<len1<<\" \"<<len2<<endl;\n        \n        \n            ans += (len1/2 + len1%2);\n        \n        \n        \n            ans += (len2/2 + len2%2);\n        \n        \n        if(ans < max(len1,len2)){\n            // cout<<\"HJI\";\n            ans = max(len2,len1);\n        }\n        \n        return ans;\n    }\n};\n// 1 2 3 4 5 6 7\n// 1 2",
    "submit_ts": "1719719129",
    "subm_id": "1304434423"
}