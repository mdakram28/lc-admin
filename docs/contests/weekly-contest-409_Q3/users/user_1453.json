{
    "username": "musofadi_warrior",
    "submission": "class segtree:\n    def __init__(self, data):\n        self.segtree = [0]*len(data)*4\n        self.data = data\n        self.lazy = [None]*len(data)*4\n    \n    def build(self, idx, l, r):\n        if l == r:\n            self.segtree[idx] = 1\n            return\n        mid = (l+r)//2\n        self.build(2*idx+1, l, mid)\n        self.build(2*idx+2, mid+1, r)\n        self.segtree[idx] = self.segtree[2*idx+1] + self.segtree[2*idx+2]\n    \n    def query(self, idx, tl, tr, l, r):\n        if self.lazy[idx] is not None:\n            self.propagate(idx, l, r)\n        if tr<l or tl>r:\n            return 0\n        if l>=tl and tr>=r:\n            return self.segtree[idx]\n        mid = (l+r)//2\n        left = self.query(2*idx+1, tl, tr, l, mid)\n        right = self.query(2*idx+2, tl, tr, mid+1, r)\n        return left + right\n    \n    def update_range(self, idx, seg_left, seg_right, update_left, update_right):\n        if self.lazy[idx] is not None:\n            self.propagate(idx, seg_left, seg_right)\n        \n        if seg_right < update_left or seg_left > update_right:\n            return\n        \n        if update_left <= seg_left and seg_right <= update_right:\n            self.segtree[idx] = 0\n            if seg_left != seg_right:\n                self.lazy[2*idx+1] = 0\n                self.lazy[2*idx+2] = 0\n            return\n        \n        mid = (seg_left + seg_right) // 2\n        self.update_range(2*idx+1, seg_left, mid, update_left, update_right)\n        self.update_range(2*idx+2, mid+1, seg_right, update_left, update_right)\n        \n        self.segtree[idx] = self.segtree[2*idx+1] + self.segtree[2*idx+2]\n    \n    def propagate(self, idx, l, r):\n        self.segtree[idx] = 0 if self.lazy[idx] == 0 else (r - l + 1)\n        if l != r:\n            self.lazy[2*idx+1] = self.lazy[idx]\n            self.lazy[2*idx+2] = self.lazy[idx]\n        self.lazy[idx] = None\n\nclass Solution:\n    def shortestDistanceAfterQueries(self, n: int, queries: List[List[int]]) -> List[int]:\n        res = []\n        cities = [i for i in range(n)]\n        cur = n-1\n        st = segtree(cities)\n        st.build(0, 0, len(cities)-1)\n\n        for x, y in queries:\n            st.update_range(0, 0, len(st.data)-1, x+1, y-1)\n            # print(st.segtree)\n            res.append(st.query(0, 0, n-1, 0, n-1)-1)\n        return res\n            \n        ",
    "submit_ts": "1722743963",
    "subm_id": "1343803754"
}