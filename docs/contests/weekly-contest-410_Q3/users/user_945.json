{
    "username": "SuwnooKim",
    "submission": "#include <vector>\n#include <iostream>\nusing namespace std;\n\nclass Solution {\npublic:\n    int countOfPairs(vector<int>& nums) {\n        const int MOD = 1e9 + 7;\n        int n = nums.size();\n        \n        // Maximum possible value for each arr1 and arr2 element is 50\n        int maxValue = 50;\n        \n        // Initialize the DP table\n        vector<vector<vector<int>>> dp(n, vector<vector<int>>(maxValue + 1, vector<int>(maxValue + 1, 0)));\n        \n        // Base case initialization\n        for (int j = 0; j <= nums[0]; ++j) {\n            int k = nums[0] - j;\n            if (k >= 0 && k <= maxValue) {\n                dp[0][j][k] = 1;\n            }\n        }\n        \n        // Fill the DP table\n        for (int i = 1; i < n; ++i) {\n            for (int j = 0; j <= nums[i]; ++j) {\n                int k = nums[i] - j;\n                if (k < 0 || k > maxValue) continue;\n                \n                // Calculate dp[i][j][k]\n                for (int prevJ = 0; prevJ <= maxValue; ++prevJ) {\n                    int prevK = nums[i - 1] - prevJ;\n                    if (prevK < 0 || prevK > maxValue) continue;\n                    \n                    // Ensure monotonic constraints\n                    if (j >= prevJ && k <= prevK) {\n                        dp[i][j][k] = (dp[i][j][k] + dp[i - 1][prevJ][prevK]) % MOD;\n                    }\n                }\n            }\n        }\n        \n        // Sum up the results for the last index\n        int result = 0;\n        for (int j = 0; j <= maxValue; ++j) {\n            int k = nums[n - 1] - j;\n            if (k >= 0 && k <= maxValue) {\n                result = (result + dp[n - 1][j][k]) % MOD;\n            }\n        }\n        \n        return result;\n    }\n};\n",
    "submit_ts": "1723345213",
    "subm_id": "1351551028"
}