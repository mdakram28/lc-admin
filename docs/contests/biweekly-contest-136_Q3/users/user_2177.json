{
    "username": "pranay360",
    "submission": "from typing import List\n\nclass Solution:\n    def minFlips(self, grid: List[List[int]]) -> int:\n        num_rows = len(grid)  # Total number of rows\n        num_cols = len(grid[0])  # Total number of columns\n        \n        flips_needed = 0\n        \n        # Iterate over each 2x2 block in the grid\n        row_idx = 0\n        while row_idx < num_rows // 2:\n            col_idx = 0\n            while col_idx < num_cols // 2:\n                block = [\n                    grid[row_idx][col_idx],\n                    grid[num_rows - row_idx - 1][col_idx],\n                    grid[row_idx][num_cols - col_idx - 1],\n                    grid[num_rows - row_idx - 1][num_cols - col_idx - 1]\n                ]\n                \n                num_ones = sum(block)  # Count of 1s in the 2x2 block\n                \n                # Calculate the minimum flips to make all elements the same\n                flips_needed += min(num_ones, 4 - num_ones)\n                \n                col_idx += 1\n            row_idx += 1\n        \n        possible_flips = 0\n        middle_ones_count = 0\n        \n        # Process the middle row if the number of rows is odd\n        middle_row = num_rows // 2\n        if num_rows % 2:\n            col_idx = 0\n            while col_idx < num_cols // 2:\n                left = grid[middle_row][col_idx]\n                right = grid[middle_row][num_cols - col_idx - 1]\n                \n                flips_needed += int(left != right)\n                possible_flips += int(left != right)\n                middle_ones_count += (left == 1) * int(left == right)\n                \n                col_idx += 1\n        \n        # Process the middle column if the number of columns is odd\n        middle_col = num_cols // 2\n        if num_cols % 2:\n            row_idx = 0\n            while row_idx < num_rows // 2:\n                top = grid[row_idx][middle_col]\n                bottom = grid[num_rows - row_idx - 1][middle_col]\n                \n                flips_needed += int(top != bottom)\n                possible_flips += int(top != bottom)\n                middle_ones_count += (top == 1) * int(top == bottom)\n                \n                row_idx += 1\n        \n        # Check the central element if both dimensions are odd\n        if num_rows % 2 and num_cols % 2:\n            center = grid[num_rows // 2][num_cols // 2]\n            flips_needed += center\n        \n        # Adjust flips_needed if no possible flips and count of 1s in the middle is odd\n        flips_needed += (possible_flips == 0) * (middle_ones_count % 2) * 2\n        \n        return flips_needed\n",
    "submit_ts": "1722699698",
    "subm_id": "1343219587"
}