{
    "username": "ltf0501",
    "submission": "class Solution {\npublic:\n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n        vector<vector<int>> g;\n        auto get_dia = [&](vector<vector<int>> &edges) {\n            int n = int(edges.size()) + 1;\n            g.clear();\n            g.resize(n);\n            //cout << \"n = \" << n << '\\n';\n            for (int i = 0; i + 1 < n; i++) {\n                int x = edges[i][0], y = edges[i][1];\n                //cout << \"x = \" << x << \", y = \" << y << '\\n';\n                g[x].push_back(y), g[y].push_back(x);\n            }\n            \n            vector<int> dis(n, 0);\n            int r = -1;\n            \n            auto Dfs = [&](auto self, int u, int fa, int d)->void {\n                dis[u] = d;\n                //cout << u << \": \" << d << '\\n';\n                if (r == -1 || d > dis[r]) r = u;\n                for (int v : g[u]) {\n                    if (v == fa) continue;\n                    self(self, v, u, d + 1);\n                }\n            };\n            Dfs(Dfs, 0, -1, 0);\n            fill(dis.begin(), dis.end(), 0);\n            int x = r;\n            Dfs(Dfs, x, -1, 0);\n                        //cout << x << ' ' << r << '\\n';\n\n            return dis[r];\n            return 0;\n            \n        };\n        \n        int x = get_dia(edges1);\n        int y = get_dia(edges2);\n        //cout << x << ' ' << y << '\\n';\n        int ans = max({x, y, (x + 1) / 2 + (y + 1) / 2 + 1});\n        return ans;\n    }\n};",
    "submit_ts": 1719716308.0
}