{
    "username": "psshrivathsa784",
    "submission": "def check(bits, k, x):\n    flag = True\n    num = 0\n    for i in range(32):\n        if bits[i] == x:\n            num |= (1<<i)\n    return (num == k)\n\n\nclass Solution:\n    def countSubarrays(self, l: List[int], k: int) -> int:\n        n = len(l)\n        v = l[::]\n\n        for i in range(n):\n            v[i] &= k\n        \n        suff = [0 for i in range(n)] # for i gives the max poss cont ind for k\n        last = n-1\n\n        # print(v)\n        for i in range(n-1,-1,-1):\n\n            if v[i] != k:\n                last = i-1\n\n            suff[i] = last\n\n        # print(suff)\n\n        p1 = 0\n        p2 = 0\n        bits = [0 for i in range(32)]\n\n        ans = 0\n\n        while p1<=p2 and p2<n:\n            if v[p2] != k:\n                p2 += 1\n                p1 = p2\n                bits = [0 for i in range(32)]\n            \n            else:\n                for j in range(0,32):\n                    if ((1<<j)&l[p2]):\n                        bits[j] += 1\n\n                while p1<=p2 and check(bits, k, p2-p1+1):\n                    ans += suff[p2]-p2+1\n                    # print(p1,p2,ans)\n\n                    for j in range(0,32):\n                        if ((1<<j)&l[p1]):\n                            bits[j] -= 1\n\n                    p1 += 1\n                p2 += 1\n\n                # print(bits[:6])\n\n        return ans",
    "submit_ts": "1720279688",
    "subm_id": "1311761174"
}