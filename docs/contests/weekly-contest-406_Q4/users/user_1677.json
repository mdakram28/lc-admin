{
    "username": "kar_24sod",
    "submission": "class Solution {\npublic:\nstatic bool cmp(int x,int y)\n{\n    return x>y;\n}\n    long long minimumCost(int m, int n, vector<int>& horizontalCut, vector<int>& verticalCut) {    \n    int hz=1;\n    int vr=1;\n    sort(verticalCut.begin(),verticalCut.end(),cmp);\n    sort(horizontalCut.begin(),horizontalCut.end(),cmp);\n    int h=0,v=0;\n    long long ans=0;\n    while (v<verticalCut.size() and h<horizontalCut.size())\n    {\n        if(verticalCut[v]>horizontalCut[h])\n        {\n         ans+=verticalCut[v]*vr; // to minimize cost utilize highest cost if vertical cut is there horizontal partitions inc\n         hz++;\n         v++;\n        }\n        else{\n        ans+=horizontalCut[h]*hz; // if horizontal cuts are there vertical partition inc\n        vr++;\n        h++;\n        }\n    }\n    while(h<horizontalCut.size())\n    {\n        ans+=horizontalCut[h]*hz;\n        vr++;\n        h++;\n\n    }\n      while(v<verticalCut.size())\n    {\n        ans+=verticalCut[v]*vr;\n        hz++;\n        v++;\n    }\n    return ans;\n    }\n};",
    "submit_ts": "1720925856",
    "subm_id": "1320268394"
}