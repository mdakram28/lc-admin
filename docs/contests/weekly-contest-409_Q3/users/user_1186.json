{
    "username": "jzcheng",
    "submission": "class Solution {\n    public int[] shortestDistanceAfterQueries(int n, int[][] queries) {\n        TreeMap<Integer, Integer> treeMap = new TreeMap<>();\n        int[] res = new int[queries.length];\n        int currLen = n - 1;\n        for (int i = 0; i < queries.length; i++) {\n            int x = queries[i][0], y = queries[i][1];\n            if (treeMap.floorKey(x) != null && treeMap.floorEntry(x).getValue() >= y) {\n                res[i] = currLen;\n            } else {\n                int prevCnt = 0;\n                int start = x;\n                while(treeMap.ceilingKey(x) != null && treeMap.ceilingEntry(x).getValue() <= y) {\n                    Map.Entry<Integer, Integer> entry = treeMap.ceilingEntry(x);\n                    prevCnt += entry.getKey() - start + 1;\n                    start = entry.getValue();\n                    treeMap.remove(entry.getKey());\n                }\n                \n                \n                treeMap.put(x, y);\n                if (prevCnt != 0) {\n                    currLen -= (prevCnt + y - start) - 1 ;\n                } else {\n                    currLen -= y - x - 1;\n                }\n                res[i] = currLen;\n            }\n        }\n        return res;\n    }\n}",
    "submit_ts": "1722743361",
    "subm_id": "1343790216"
}