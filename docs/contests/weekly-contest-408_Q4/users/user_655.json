{
    "username": "yashmaini",
    "submission": "class Solution {\n   public int bfs(List<List<Integer>> graph, int start, int target1, int target2, int nodes) {\n        Queue<Integer> queue = new LinkedList<>();\n        boolean[] visited = new boolean[nodes + 4];\n        queue.add(start);\n        visited[start] = true;\n        \n        while (!queue.isEmpty()) {\n            int u = queue.poll();\n            for (int v : graph.get(u)) {\n                if (!visited[v]) {\n                    queue.add(v);\n                    visited[v] = true;\n                }\n            }\n        }\n        return visited[target1] || visited[target2] ? 1 : 0;\n    }\n    \n    public boolean canReachCorner(int X, int Y, int[][] circles2) {\n        List<int[]> circles = new ArrayList<>(circles2.length);\n        List<List<Integer>> graph = new ArrayList<>(circles2.length + 4);\n        \n        int numCircles = circles2.length;\n        \n        for (int i = 0; i < numCircles; ++i) {\n            circles.add(new int[]{circles2[i][0], circles2[i][1], circles2[i][2]});\n        }\n        \n        for (int i = 0; i < numCircles + 4; i++) {\n            graph.add(new ArrayList<>());\n        }\n        \n        for (int i = 0; i < numCircles; ++i) {\n            if (circles.get(i)[0] <= circles.get(i)[2]) {\n                graph.get(numCircles).add(i);\n                graph.get(i).add(numCircles);\n            }\n            if (X - circles.get(i)[0] <= circles.get(i)[2]) {\n                graph.get(numCircles + 2).add(i);\n                graph.get(i).add(numCircles + 2);\n            }\n            if (circles.get(i)[1] <= circles.get(i)[2]) {\n                graph.get(numCircles + 1).add(i);\n                graph.get(i).add(numCircles + 1);\n            }\n            if (Y - circles.get(i)[1] <= circles.get(i)[2]) {\n                graph.get(numCircles + 3).add(i);\n                graph.get(i).add(numCircles + 3);\n            }\n            for (int j = i + 1; j < numCircles; ++j) {\n                double distance = Math.sqrt(Math.pow(circles.get(i)[0] - circles.get(j)[0], 2) +\n                                            Math.pow(circles.get(i)[1] - circles.get(j)[1], 2));\n                int radiusSum = circles.get(i)[2] + circles.get(j)[2];\n                if (radiusSum >= distance) {\n                    graph.get(i).add(j);\n                    graph.get(j).add(i);\n                }\n            }\n        }\n        \n        int isBlocked = 0;\n        isBlocked = Math.max(isBlocked, bfs(graph, numCircles, numCircles + 1, numCircles + 2, numCircles + 4));\n        isBlocked = Math.max(isBlocked, bfs(graph, numCircles + 3, numCircles + 2, numCircles + 1, numCircles + 4)); \n        \n        return isBlocked == 0;\n    }\n} ",
    "submit_ts": "1722137587",
    "subm_id": "1335768050"
}