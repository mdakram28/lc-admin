{
    "username": "incognitosin007",
    "submission": "from typing import List\n\nclass TrieNode:\n    def __init__(self):\n        self.children = {}\n        self.min_cost = float('inf')\n\nclass Solution:\n    def build_trie(self, words: List[str], costs: List[int]) -> TrieNode:\n        root = TrieNode()\n        for word, cost in zip(words, costs):\n            node = root\n            for char in word:\n                if char not in node.children:\n                    node.children[char] = TrieNode()\n                node = node.children[char]\n            node.min_cost = min(node.min_cost, cost)  \n        return root\n    \n    def minimumCost(self, target: str, words: List[str], costs: List[int]) -> int:\n        trie = self.build_trie(words, costs)\n        dp = [float('inf')] * (len(target) + 1)\n        dp[0] = 0\n        \n        for i in range(len(target)):\n            if dp[i] == float('inf'):\n                continue\n            \n            node = trie\n            for j in range(i, len(target)):\n                if target[j] not in node.children:\n                    break \n                node = node.children[target[j]]\n                if node.min_cost < float('inf'):\n                    dp[j + 1] = min(dp[j + 1], dp[i] + node.min_cost)\n        \n        return -1 if dp[len(target)] == float('inf') else dp[len(target)]",
    "submit_ts": "1720323677",
    "subm_id": "1312381358"
}