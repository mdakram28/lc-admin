{
    "username": "ekeshwar2407",
    "submission": "// class Solution {\n// public:\n    \n//     struct Node{\n//         map<char,Node*>m;\n//         vector<vector<int>>end;\n//     };\n    \n//     void insert(int i, int cost, Node* root, string &word)\n//     {\n//         int n=word.size();\n//         for(int j=0;j<n;j++)\n//         {\n//             // cout<<j<<endl;\n//             if(root->m[word[j]]==NULL)\n//             {    \n//                 Node* x=new Node();\n//                 root->m[word[j]]=x;\n//             }\n//             root=root->m[word[j]];\n//         }\n//         root->end.push_back({i,cost});\n//     }\n    \n//     int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n//         int n=target.size();\n//         Node* root=new Node;\n        \n//         // if(root->m.find('a')==root->m.end()) cout<<\"YOO\"<<endl;\n        \n//         for(int i=0;i<words.size();i++)\n//         {\n//             insert(i,costs[i],root,words[i]);\n//         }\n        \n//         vector<int>dp(n+1,-1);\n        \n//         dp[0]=0;\n//         for(int i=0;i<n;i++)\n//         {\n//             if(dp[i]==-1) continue;\n//             Node* node=root;\n//             for(int j=i;j<n;j++)\n//             {\n//                 if(node->m.find(target[j])==node->m.end()) break;\n//                 else node=node->m[target[j]];\n//                 for(auto x : node->end)\n//                 {\n//                     int index=x[0]; int cost=x[1];\n//                     int y=words[index].size();\n//                     if (i+y<=n && dp[i+y]!=-1) dp[i+y]=min(dp[i+y],dp[i]+cost);\n//                     else if(i+y<=n) dp[i+y]=dp[i]+cost;\n\n//                 }\n//             }\n//         }\n//         return dp[n];\n//     }\n// };\n\n\nclass Solution {\npublic:\n    struct TrieNode \n    {\n        unordered_map<char,TrieNode*>children;\n        vector<pair<int,int>>endWords;\n    };\n\n    class Trie {\n    public:\n        TrieNode* root;\n        Trie()\n        { \n            root = new TrieNode(); \n        }\n\n        void insert(string& word, int idx, int cost) {\n            TrieNode* curr=root;\n            for(char ch:word) {\n                if(!curr->children.count(ch))\n                    curr->children[ch]=new TrieNode();\n                curr = curr->children[ch];\n            }\n            curr->endWords.push_back({idx, cost});\n        }\n    };\n\n    int minimumCost(string tgt, vector<string>& wds, vector<int>& csts) {\n        int sz=tgt.size();\n        vector<int>dp(sz+1, INT_MAX);\n        dp[0]=0;\n\n        Trie trie;\n        for(int i=0;i<wds.size();++i) {\n            trie.insert(wds[i],i,csts[i]);\n        }\n\n        for(int i=0;i<sz;i++) \n        {\n            if(dp[i]==INT_MAX) continue;\n            TrieNode* node=trie.root;\n            for(int j=i;j<sz;j++) \n            {\n                if(!node->children.count(tgt[j])) break;\n                node=node->children[tgt[j]];\n                for(auto& p : node->endWords) \n                {\n                    int wIdx=p.first;\n                    int wCost=p.second;\n                    int len=wds[wIdx].size();\n                    if(i+len<=sz) \n                    {\n                        dp[i+len]=min(dp[i+len],dp[i]+wCost);\n                    }\n                }\n            }\n        }\n\n        return dp[sz]==INT_MAX?-1:dp[sz];\n    }\n};\n",
    "submit_ts": "1720324097",
    "subm_id": "1312391518"
}