{
    "username": "ayaaniqbal403",
    "submission": "class Solution {\n    public long minimumCost(int m, int n, int[] horizontalCut, int[] verticalCut) {\n         // Sort horizontalCut and verticalCut in descending order\n    Arrays.sort(horizontalCut);\n    Arrays.sort(verticalCut);\n    \n    int hIndex = horizontalCut.length - 1;\n    int vIndex = verticalCut.length - 1;\n    \n    int hSegments = 1;\n    int vSegments = 1;\n    \n    long totalCost = 0;\n    \n    // While there are cuts to make\n    while (hIndex >= 0 || vIndex >= 0) {\n        if (vIndex < 0 || (hIndex >= 0 && horizontalCut[hIndex] >= verticalCut[vIndex])) {\n            // Make a horizontal cut\n            totalCost += (long)horizontalCut[hIndex] * vSegments;\n            hSegments++;\n            hIndex--;\n        } else {\n            // Make a vertical cut\n            totalCost += (long)verticalCut[vIndex] * hSegments;\n            vSegments++;\n            vIndex--;\n        }\n    }\n    \n    return totalCost;\n    }\n}",
    "submit_ts": "1720925289",
    "subm_id": "1320249604"
}