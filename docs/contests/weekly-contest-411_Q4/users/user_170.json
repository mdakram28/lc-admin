{
    "username": "\u758f\u6c50",
    "submission": "# \u5bf9\u6bcf\u4e00\u4f4d\u7ed3\u675f\u7684\uff0c\u7b97\u4e00\u4e2a\u5de6\u754c\n\nclass Solution:\n    def countKConstraintSubstrings(self, s: str, k: int, queries: List[List[int]]) -> List[int]:\n        n = len(s)\n        # calc every left of element\n        left = [0 for i in range(n)]\n        l, c0, c1 = 0, 0, 0\n        for r in range(n):\n            if s[r] == '0':\n                c0 += 1\n            else:\n                c1 += 1\n            while c0 > k and c1 > k:\n                if s[l] == '0':\n                    c0 -= 1\n                else:\n                    c1 -= 1\n                l += 1\n            left[r] = l\n        # print(left)\n\n        # cnt\n        cnt = [r - left[r] + 1 for r in range(n)]\n        cntAttrL = [0 for i in range(n+1)]\n        for i in range(n):\n            cntAttrL[i+1] = cntAttrL[i] + cnt[i]\n\n        # caculate queries\n        qn = len(queries)\n        res = [0 for qi in range(qn)]\n        for qi in range(qn):\n            ll, rr = queries[qi]\n            cur = 0\n            # before ll part, use [ll, r]; after ll part, use [left[r], r]\n            pos = bisect.bisect(left, ll)\n            # print(left, ll, pos, (pos-ll) * (pos-ll+1) // 2, cntAttrL[rr+1] - cntAttrL[pos])\n            if pos <= rr:\n                # left part, not including pos, r in [ll, pos), cnt in [1, pos-ll+1)\n                cur += (pos-ll) * (pos-ll+1) // 2\n                # right part, including pos\n                cur += cntAttrL[rr+1] - cntAttrL[pos]\n            else:\n                cur += (rr-ll+1) * (rr-ll+2) // 2\n            res[qi] = cur\n        return res",
    "submit_ts": "1723953563",
    "subm_id": "556418502"
}