{
    "username": "eternalding",
    "submission": "class Solution:\n    def get_maxdist_point(self, points):\n        min_sum = max_sum = (points[0][0] + points[0][1])\n        min_diff = max_diff = (points[0][0] - points[0][1])\n        minsum_point, maxsum_point, mindiff_point, maxdiff_point = 0, 0, 0, 0\n\n        for i, (S, E) in enumerate(points):\n            if i == 0:\n                continue\n            cur_sum = (S + E)\n            cur_diff = (S - E)\n            if cur_sum > max_sum:\n                max_sum = cur_sum\n                maxsum_point = i\n            elif cur_sum < min_sum:\n                min_sum = cur_sum\n                minsum_point = i\n            if cur_diff > max_diff:\n                max_diff = cur_diff\n                maxdiff_point = i\n            elif cur_diff < min_diff:\n                min_diff = cur_diff\n                mindiff_point = i\n            \n        if (max_sum - min_sum) >= (max_diff - min_diff):\n            return (max_sum - min_sum), (maxsum_point, minsum_point)\n        else:\n            return (max_diff - min_diff), (maxdiff_point, mindiff_point)\n        \n        \n        \n        \n    def minimumDistance(self, points: List[List[int]]) -> int:\n\n        cur_maxdist, (p1, p2) = self.get_maxdist_point(points)\n        # Try remove p1\n        nop1_points = [point for idx, point in enumerate(points) if idx != p1]\n        nop1_maxdist, _ = self.get_maxdist_point(nop1_points)\n        # Try remove p2\n        nop2_points = [point for idx, point in enumerate(points) if idx != p2]\n        nop2_maxdist, _ = self.get_maxdist_point(nop2_points)\n        \n        return min(nop1_maxdist, nop2_maxdist)\n        \n        \n        "
}