{
    "username": "Bhuvan_Parewa",
    "submission": "vector<int>sub;\nbool comp(int &i, int &j) {\n    return (sub[i] > sub[j]);\n}\nclass Solution {\npublic:\n    int solve(int v, int p, vector<int>g[], vector<int>&price) {\n        sub[v] = price[v];\n        int mx = 0;\n        for (auto to : g[v]) {\n            if (to == p)continue;\n            mx = max(mx, solve(to, v, g, price));\n        }\n        sub[v] += mx;\n        return sub[v];\n    }\n    void reroot(int v, int p, vector<int>g[], vector<int>&price, int &ans, vector<int>&dp) {\n        int tmp = sub[v];\n\n        for (auto to : g[v]) {\n            if (to == p)continue;\n\n            int mx = 0;\n            int j = 0; //to ensure we are checking just two childs\n            for (auto it : g[v]) {\n                if (it == to) {\n                    continue;\n                    j++;\n                }\n                mx = max(mx, sub[it]);\n                j++;\n                if (j > 2)break;\n            }\n            sub[v] = mx + price[v];\n            dp[to] = max(sub[to] - price[to], mx + price[v]);\n            reroot(to, v, g, price, ans, dp);\n            sub[v] = tmp;\n        }\n\n    }\n\n    vector<int> maxOutput(int n, vector<vector<int>>& edges, vector<int>& price) {\n        vector<int>g[n];\n\n        for (auto it : edges) {\n            g[it[0]].push_back(it[1]);\n            g[it[1]].push_back(it[0]);\n        }\n        sub = vector<int>(n);\n        vector<int>dp(n);// dpi denotes the answer if i is root\n        solve(0, -1, g, price);\n\n        for (int i = 0; i < n; i++) {\n            sort(g[i].begin(), g[i].end(), comp);\n        }\n\n        int ans = 0;\n        dp[0] = sub[0] - price[0];\n        reroot(0, -1, g, price, ans, dp);\n        return dp   ;\n    }\n\n\n    vector<int> timeTaken(vector<vector<int>>& edges) {\n        int n = edges.size() + 1;\n        vector<int> price(n);\n        for (int i = 0; i < n; i++)\n            if (i & 1)\n                price[i] = 1;\n            else\n                price[i] = 2;\n\n\n        return maxOutput(n, edges, price);\n    }\n\n};",
    "submit_ts": "1722700466",
    "subm_id": "1343242734"
}