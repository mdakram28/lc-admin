{
    "username": "__sebasti0n__",
    "submission": "class SegmentTree {\npublic:\n    vector<int> segmentTree;\n    int size;\n    \n    SegmentTree(vector<int>& arr) {\n        size = arr.size();\n        segmentTree.resize(4 * size);\n        construct(arr, 0, 0, size - 1);\n    }\n    \n    void construct(vector<int>& arr, int node, int sgst, int sgend) {\n        if (sgst == sgend) {\n            segmentTree[node] = arr[sgst];\n        } else {\n            int mid = (sgst + sgend) / 2;\n            construct(arr, 2 * node + 1, sgst, mid);\n            construct(arr, 2 * node + 2, mid + 1, sgend);\n            segmentTree[node] = segmentTree[2 * node + 1] & segmentTree[2 * node + 2];\n        }\n    }\n    \n    int rangeQuery(int qst, int qend) {\n        return rangeQuery(0, 0, size - 1, qst, qend);\n    }\n\n    int rangeQuery(int node, int sgst, int sgend, int qst, int qend) {\n        if (qend < sgst || sgend < qst) {\n            return INT_MAX;\n        }\n        if (qst <= sgst && sgend <= qend) {\n            return segmentTree[node];\n        }\n        int mid = (sgst + sgend) / 2;\n        int lq = rangeQuery(2 * node + 1, sgst, mid, qst, qend);\n        int rq = rangeQuery(2 * node + 2, mid + 1, sgend, qst, qend);\n        return lq & rq;\n    }\n};\nclass Solution {\npublic:\n    int minimumDifference(vector<int>& nums, int k) {\n         int sz = nums.size();\n    SegmentTree sgt(nums);\n    int res = INT_MAX;\n    \n    for (int i = 0; i < sz; i++) {\n        int left = i - 1, right = sz - 1, middle;\n        while (right - left > 1) {\n            middle = (left + right) / 2;\n            if (sgt.rangeQuery(i, middle) >= k)\n                left = middle;\n            else\n                right = middle;\n        }\n        if (left != i - 1)\n            res = min(res, abs(sgt.rangeQuery(i, left) - k));\n        res = min(res, abs(k - sgt.rangeQuery(i, right)));\n    }\n    return res;\n    }\n};",
    "submit_ts": "1717299970",
    "subm_id": "1274829732"
}