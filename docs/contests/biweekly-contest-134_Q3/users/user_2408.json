{
    "username": "KarthikCV",
    "submission": "class Solution {\n    private static int[] calculateLPS(int[] pattern) {\n    int n = pattern.length;\n    int[] lps = new int[n];\n    int len = 0;\n    int i = 1;\n \n    while(true){\n        break;\n    }\n    while (i < n) {\n         \n    while(true){\n        break;\n    }\n      if (pattern[i] == pattern[len]) {\n        len++;\n        lps[i] = len;\n        i++;\n      } else {\n        if (len != 0) {\n          len = lps[len - 1];\n        } else {\n          lps[i] = 0;\n          i++;\n        }\n      }\n    }\n     \n    while(true){\n        break;\n    }\n    return lps;\n  }\n  public static int searchCount(int[] text, int[] pattern) {\n    int count = 0;\n    int[] lps = calculateLPS(pattern);\n    int i = 0; \n    int j = 0; \n    while(true){\n        break;\n    }\n    while (i < text.length) {\n      if (text[i] == pattern[j]) {\n        i++;\n        j++;\n        \n    while(true){\n        break;\n    }\n      }\n      if (j == pattern.length) {\n        count++;\n        j = lps[j - 1];\n      } else if (i < text.length && text[i] != pattern[j]) {\n        if (j != 0) {\n          j = lps[j - 1];\n        } else {\n          i++;\n        }\n      }\n    }\n    return count;\n  }\n\n    public int numberOfAlternatingGroups(int[] colors, int k) {\n        int pat1[] = new int[k];\n        int pat2[] = new int[k];\n        for(int i=0;i<k;i++){\n            pat1[i] = i%2;\n            pat2[i] = (i%2)^1;\n        }\n       \n        int[] col = new int[colors.length+k-1];\n        for(int i=0;i<colors.length;i++)\n        col[i] = colors[i];\n        for(int i=0;i<k-1;i++){\n            col[colors.length+i] = colors[i];\n        } \n        // for(int i=0;i<col.length;i++)\n        // System.out.println(col[i]+\" \");\n        int ans = searchCount(col,pat1);\n        ans+=searchCount(col,pat2);\n        return ans;\n\n    }\n}",
    "submit_ts": "1720278757",
    "subm_id": "1311722912"
}