{
    "username": "lcs2019022",
    "submission": "class Solution {\npublic:\n    void build(int s, int e, int index, vector<int>&tree,vector<int>&a){\n \n        if(s > e) return ;\n\n        if(s==e){\n            tree[index] = a[s];\n            return;\n        }\n\n        int mid = s + (e-s)/2;\n\n        build(s,mid, 2 * index,tree,a);\n        build(mid+1 , e , 2*index+1,tree,a);\n\n        tree[index] = tree[2*index] & tree[2*index+1];\n    }\n    \n    int query(int s, int e, int index, int qs, int qe, vector<int>&tree){\n\n       if(qe < s || qs > e) return INT_MAX;\n       if(s>=qs && e  <= qe) return tree[index]; \n       int mid = s + (e-s)/2;\n\n       return query(s,mid, 2*index , qs, qe,tree) &\n              query(mid+1,e,2*index+1,qs,qe,tree);\n    }\n    \n    int minimumDifference(vector<int>& a, int k) {\n        int n = a.size();\n        int s = 0;\n        int e = n-1;\n        int index = 1;\n        vector<int>tree(4*n + 10);\n        build(s,e,index,tree,a);\n        \n        int res = INT_MAX;\n        \n        for (int i = 0; i < n; i++) {\n            int l = i - 1, h = n - 1;\n\n            while (h - l > 1) {\n                int mid = (l + h) / 2;\n                int val = query(s,e,index,i,mid,tree);\n                if ( val < k)\n                    h = mid;\n                else\n                    l = mid;\n            }\n            int v1 = query(s,e,index,i,l,tree);\n            int v2 = query(s,e,index,i,h,tree);\n            if (l != i - 1){\n                res = min(res, abs(k - v1));\n            }\n            res = min(res, abs(k - v2));\n        }\n        return res;\n    }\n};",
    "submit_ts": "1717298572",
    "subm_id": "1274783733"
}