{
    "username": "LarryNY",
    "submission": "class Solution:\n    def canReachCorner(self, X: int, Y: int, circles: List[List[int]]) -> bool:\n        new_circles = []\n        for x, y, r in circles:\n            if y - r > Y or x - r > X:\n                continue\n            new_circles.append([x, y, r])\n        circles = new_circles\n        \n        N = len(circles)\n        \n        for x, y, r in circles:\n            if x * x + y * y <= r * r:\n                return False\n            if (x - X) * (x - X) + (y - Y) * (y - Y) <= r * r:\n                return False\n        \n        reachable = [False] * N\n        q = collections.deque()\n        for index, (x, y, r) in enumerate(circles):\n            if x - r <= 0:\n                q.append(index)\n                reachable[index] = True\n        \n        #print(circles)\n        while len(q) > 0:\n            now = q.popleft()\n            x1, y1, r1 = circles[now]\n            \n            if x1 + r1 >= X:\n                return False\n            if y1 - r1 <= 0:\n                return False\n            \n            for i in range(N):\n                if reachable[i]:\n                    continue\n                \n                x2, y2, r2 = circles[i]\n                if (x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2) <= (r1 + r2) * (r1 + r2):\n                    reachable[i] = True\n                    q.append(i)\n            \n        reachable = [False] * N\n        q = collections.deque()\n        for index, (x, y, r) in enumerate(circles):\n            if y - r <= 0:\n                q.append(index)\n                reachable[index] = True\n        \n        while len(q) > 0:\n            now = q.popleft()\n            x1, y1, r1 = circles[now]\n            \n            if y1 + r1 >= Y:\n                return False\n            if x1 - r1 <= 0:\n                return False\n            \n            for i in range(N):\n                if reachable[i]:\n                    continue\n                \n                x2, y2, r2 = circles[i]\n                if (x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2) <= (r1 + r2) * (r1 + r2):\n                    reachable[i] = True\n                    q.append(i)\n\n        reachable = [False] * N\n        q = collections.deque()\n        for index, (x, y, r) in enumerate(circles):\n            if y + r >= Y:\n                q.append(index)\n                reachable[index] = True\n        \n        while len(q) > 0:\n            now = q.popleft()\n            x1, y1, r1 = circles[now]\n            \n            if x1 + r1 >= X:\n                return False\n            if y1 - r1 <= 0:\n                return False\n            \n            for i in range(N):\n                if reachable[i]:\n                    continue\n                \n                x2, y2, r2 = circles[i]\n                if (x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2) <= (r1 + r2) * (r1 + r2):\n                    reachable[i] = True\n                    q.append(i)\n\n        return True\n",
    "submit_ts": "1722135824",
    "subm_id": "1335714805"
}