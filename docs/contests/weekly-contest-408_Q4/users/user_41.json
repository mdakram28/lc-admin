{
    "username": "enzoar",
    "submission": "class Solution {\npublic:\n    vector<int> par, sz;\n    void build(int n) {\n        par.assign(n + 10, 0); \n        sz.assign(n + 10, 1); \n        for (int i = 0; i < n + 10; i++) par[i] = i; \n    }\n    int find(int u) { return par[u] = (u == par[u] ? u : find(par[u])); }\n    bool unite(int u, int v) {\n        u = find(u); \n        v = find(v); \n        if (u == v) return false; \n        if (sz[u] > sz[v]) swap(u, v); \n        sz[v] += sz[u]; \n        par[u] = v; \n        return true; \n    }\n    bool same(int u, int v) { return find(u) == find(v); }\n    \n    long long dist(long long x1, long long y1, long long x2, long long y2) {\n        long long dx = x2 - x1; \n        long long dy = y2 - y1; \n        return dx * dx + dy * dy; \n    }\n    \n    bool canReachCorner(int X, int Y, vector<vector<int>>& c) {\n        int n = c.size(); \n        build(n);\n        \n        int up = n, down = n + 1, left = n + 2, right = n + 3;\n        for (int i = 0; i < n; i++) {\n            long long x1 = c[i][0], y1 = c[i][1], r1 = c[i][2]; \n            for (int j = i + 1; j < n; j++) {\n                long long x2 = c[j][0], y2 = c[j][1], r2 = c[j][2]; \n                \n                if (dist(x1, y1, x2, y2) <= (r1 + r2) * (r1 + r2)) {\n                    unite(i, j); \n                }\n                \n            }\n            if (x1 <= r1) unite(i, left); \n            if (X - x1 <= r1) unite(i, right); \n            if (y1 <= r1) unite(i, down);\n            if (Y - y1 <= r1) unite(i, up); \n        }\n        \n        bool ret = 0; \n        ret |= same(up, down); \n        ret |= same(left, right); \n        ret |= same(left, down); \n        ret |= same(up, right); \n        return !ret; \n    }\n};",
    "submit_ts": "1722136327",
    "subm_id": "1335730963"
}