{
    "username": "zeekhan2082",
    "submission": "class Solution {\npublic:\n    #define ll long long\n    \n    int calculateSubarrayValue(int left, int right, vector<vector<int>>& prefixSums) {\n        int length = (right - left + 1);\n        int result = 0;\n        \n        for (int bit = 0; bit < 30; ++bit) {\n            int count = prefixSums[right][bit];\n            if (left > 0) {\n                count -= prefixSums[left - 1][bit];\n            }\n            if (count == length) {\n                result += (1 << bit);\n            }\n        }\n        return result;\n    }\n    \n    int findStartIndex(int currentIndex, vector<vector<int>>& prefixSums, int arraySize, int targetValue) {\n        int low = currentIndex, high = arraySize - 1;\n        int index = -1;\n        \n        if (calculateSubarrayValue(low, low, prefixSums) < targetValue) {\n            return -1;\n        }\n        \n        while (low <= high) {\n            int mid = (low + high) / 2;\n            int value = calculateSubarrayValue(currentIndex, mid, prefixSums);\n            \n            if (value > targetValue) {\n                low = mid + 1;\n            } else if (value == targetValue) {\n                index = mid;\n                high = mid - 1;\n            } else {\n                high = mid - 1;\n            }\n        }\n        return index;\n    }\n    \n    int findEndIndex(int currentIndex, vector<vector<int>>& prefixSums, int arraySize, int targetValue) {\n        int low = currentIndex, high = arraySize - 1;\n        int index = -1;\n        \n        if (calculateSubarrayValue(low, low, prefixSums) < targetValue) {\n            return -1;\n        }\n        \n        while (low <= high) {\n            int mid = (low + high) / 2;\n            int value = calculateSubarrayValue(currentIndex, mid, prefixSums);\n            \n            if (value > targetValue) {\n                low = mid + 1;\n            } else if (value == targetValue) {\n                index = mid;\n                low = mid + 1;\n            } else {\n                high = mid - 1;\n            }\n        }\n        return index;\n    }\n    \n    long long countSubarrays(vector<int>& nums, int targetValue) {\n        int arraySize = nums.size();\n        vector<vector<int>> prefixSums(arraySize, vector<int>(30, 0));\n        \n        // Calculate prefix sums for each bit position\n        for (int i = 0; i < arraySize; ++i) {\n            for (int bit = 0; bit < 30; ++bit) {\n                prefixSums[i][bit] = (nums[i] >> bit) & 1;\n                if (i > 0) {\n                    prefixSums[i][bit] += prefixSums[i - 1][bit];\n                }\n            }\n        }\n        \n        ll totalSubarrays = 0LL;\n        \n        for (int i = 0; i < arraySize; ++i) {\n            int startIndex = findStartIndex(i, prefixSums, arraySize, targetValue);\n            int endIndex = findEndIndex(i, prefixSums, arraySize, targetValue);\n            \n            if (startIndex == -1 || endIndex == -1) {\n                continue;\n            }\n            \n            totalSubarrays += 1LL * endIndex - 1LL * startIndex + 1LL;\n        }\n        \n        return totalSubarrays;\n    }\n};\n",
    "submit_ts": "1720277896",
    "subm_id": "1311685056"
}