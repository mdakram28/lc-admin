{
    "username": "arignote",
    "submission": "class Solution {\n\n    public List<Integer> numberOfAlternatingGroups(int[] colors, int[][] queries) {\n        NumArray count = new NumArray(new int[colors.length + 1]), sum = new NumArray(new int[colors.length + 1]);\n        TreeSet<Integer> set = new TreeSet<>();\n        for (int i = 0; i < colors.length; i++) {\n            if (colors[i] == colors[(i + 1) % colors.length]) {\n                add(i, colors.length, set, count, sum);\n            }\n        }\n        ArrayList<Integer> list = new ArrayList<>();\n        for (int[] query : queries) {\n            if (query[0] == 1) {\n                list.add(set.isEmpty() ? colors.length : sum.sumRange(query[1], colors.length) - (query[1] - 1) * count.sumRange(query[1], colors.length));\n            } else if (colors[query[1]] != query[2]) {\n                colors[query[1]] = query[2];\n                if (query[2] == colors[(query[1] - 1 + colors.length) % colors.length]) {\n                    add((query[1] - 1 + colors.length) % colors.length, colors.length, set, count, sum);\n                } else {\n                    remove((query[1] - 1 + colors.length) % colors.length, colors.length, set, count, sum);\n                }\n                if (query[2] == colors[(query[1] + 1) % colors.length]) {\n                    add(query[1], colors.length, set, count, sum);\n                } else {\n                    remove(query[1], colors.length, set, count, sum);\n                }\n            }\n        }\n        return list;\n    }\n\n    private void add(int x, int n, TreeSet<Integer> set, NumArray count, NumArray sum) {\n        set.add(x);\n        if (set.size() == 1) {\n            count.update(n, 1);\n            sum.update(n, n);\n        }\n        int prev = set.lower(x) == null ? set.last() : set.lower(x), next = set.higher(x) == null ? set.first() : set.higher(x);\n        count.update(set.size() == 2 ? n : (next - prev + n) % n, -1);\n        sum.update(set.size() == 2 ? n : (next - prev + n) % n, set.size() == 2 ? -n : -(next - prev + n) % n);\n        count.update((x - prev + n) % n, 1);\n        sum.update((x - prev + n) % n, (x - prev + n) % n);\n        count.update((next - x + n) % n, 1);\n        sum.update((next - x + n) % n, (next - x + n) % n);\n    }\n\n    private void remove(int x, int n, TreeSet<Integer> set, NumArray count, NumArray sum) {\n        if (set.size() == 1) {\n            count.update(n, -1);\n            sum.update(n, -n);\n        }\n        int prev = set.lower(x) == null ? set.last() : set.lower(x), next = set.higher(x) == null ? set.first() : set.higher(x);\n        count.update(set.size() == 2 ? n : (next - prev + n) % n, 1);\n        sum.update(set.size() == 2 ? n : (next - prev + n) % n, set.size() == 2 ? n : (next - prev + n) % n);\n        count.update((x - prev + n) % n, -1);\n        sum.update((x - prev + n) % n, -(x - prev + n) % n);\n        count.update((next - x + n) % n, -1);\n        sum.update((next - x + n) % n, -(next - x + n) % n);\n        set.remove(x);\n    }\n\n    class NumArray {\n        private int[] tree;\n        private int[] nums;\n\n        public NumArray(int[] nums) {\n            this.tree = new int[nums.length + 1];\n            this.nums = nums;\n            for (int i = 0; i < nums.length; i++) {\n                add(i + 1, nums[i]);\n            }\n        }\n\n        public void update(int index, int val) {\n            add(index + 1, val);\n            nums[index] = val;\n        }\n\n        public int sumRange(int left, int right) {\n            return prefixSum(right + 1) - prefixSum(left);\n        }\n\n        private int lowBit(int x) {\n            return x & -x;\n        }\n\n        private void add(int index, int val) {\n            while (index < tree.length) {\n                tree[index] += val;\n                index += lowBit(index);\n            }\n        }\n\n        private int prefixSum(int index) {\n            int sum = 0;\n            while (index > 0) {\n                sum += tree[index];\n                index -= lowBit(index);\n            }\n            return sum;\n        }\n    }\n}",
    "submit_ts": "1722742463",
    "subm_id": "1343769573"
}