{
    "username": "non_deterministic",
    "submission": "#define lld long long\n#define rep(i,a,n) for(lld i = (a); i <= (n); ++i)\n#define repI(i,a,n) for(int i = (a); i <= (n); ++i)\n#define repD(i,a,n) for(lld i = (a); i >= (n); --i)\n#define repDI(i,a,n) for(int i = (a); i >= (n); --i)\n#define all(c) (c).begin(), (c).end()\n#define sz(a) ((int)a.size())\n\n#define Error(x...) { cout << \"(\" << #x << \")\" << \" = ( \"; printIt(x); }\ntemplate <typename T1> void printIt(T1 t1) { cout << t1 << \" )\" << endl; }\ntemplate <typename T1, typename... T2>\nvoid printIt(T1 t1, T2... t2) { cout << t1 << \" , \"; printIt(t2...); }\n#define errorpair(a) cout<<#a<<\" = ( \"<<((a).first)<<\" , \"<<((a).second)<<\" )\\n\";\n\nclass Solution {\npublic:\n    vector<int> timeTaken(vector<vector<int>>& edges) {\n        int n = edges.size() + 1;\n        vector<vector<array<int, 2>>> adj(n);\n        for(auto x : edges) {\n            adj[x[0]].push_back({x[1], 1 + (x[1] % 2 == 0)});\n            adj[x[1]].push_back({x[0], 1 + (x[0] % 2 == 0)});\n        }\n        auto dijkstraDisArray = [&](int src) {\n            vector<int> dis(n, 1e9);\n            dis[src] = 0;\n            priority_queue<array<int, 2>, vector<array<int, 2>>, greater<array<int, 2>>> pq;\n            pq.push({0, src});\n            while(!pq.empty()) {\n                auto [d, u] = pq.top();\n                pq.pop();\n                if(dis[u] < d) continue;\n                for(auto [v, w] : adj[u]) {\n                    if(dis[v] > dis[u] + w) {\n                        dis[v] = dis[u] + w;\n                        pq.push({dis[v], v});\n                    }\n                }\n            }\n            // Error(src);\n            // repI(i, 0, n - 1) {\n            //     Error(i, dis[i]);\n            // }\n            return dis;\n        };\n        vector<int> dis1 = dijkstraDisArray(0);\n        int mxInd = max_element(all(dis1)) - dis1.begin();\n        vector<int> dis2 = dijkstraDisArray(mxInd);\n        int OtherMxInd = max_element(all(dis2)) - dis2.begin();\n        vector<int> dis3 = dijkstraDisArray(OtherMxInd);\n        // Error(mxInd, OtherMxInd);\n        vector<int> ans(n);\n        repI(i, 0, n - 1) {\n            ans[i] = max(dis2[i] + (mxInd % 2 == 0) - (i % 2 == 0), dis3[i] + (OtherMxInd % 2 == 0) - (i % 2 == 0));\n        }\n        return ans;\n    }\n};",
    "submit_ts": "1722698085",
    "subm_id": "1343169129"
}