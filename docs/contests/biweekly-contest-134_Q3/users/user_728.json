{
    "username": "_Knight_11",
    "submission": "class Solution { \npublic: \n    bool cmp(vector<int> &a, vector<int> &b){\n        return b[0] < a[0];\n    }\n    int maxSubArraySum(int a[], int size)\n    {\n        int mx = INT_MIN, m = 0;\n\n        for (int i = 0; i < size; i++) {\n            m = m + a[i];\n            if (mx < m)\n                mx = m;\n\n            if (m < 0)\n                m = 0;\n        }\n        return mx;\n    }\n    int numberOfAlternatingGroups(vector<int>& nums, int k) { \n        int N = nums.size(); \n        int count = 0; \n \n        if (k == 1) { \n            return N; \n        } \n \n        int len = 1; \n        int i = 1; \n        while (i < N + k - 1) { \n            int curr = i; \n            int prev = i - 1; \n \n            if (curr >= N) { \n                curr -= N; \n            } \n            if (prev >= N) { \n                prev -= N; \n            } \n \n            if (nums[curr] != nums[prev]) { \n                len++;\n            } else { \n                len = 1; \n            } \n \n            if (len >= k) { \n                count++; \n            } \n \n            i++;\n        } \n \n        return count; \n    } \n};",
    "submit_ts": "1720279674",
    "subm_id": "1311760603"
}