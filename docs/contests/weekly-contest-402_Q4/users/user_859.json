{
    "username": "Prabhat_007",
    "submission": "\nclass SegmentTree {\n    vector<int> tree;\n    vector<int>& nums;\n    int n;\npublic:\n    SegmentTree(vector<int>& nums) : nums(nums) {\n        n = nums.size();\n        tree.resize(4 * n);\n        build(0, n - 1, 0);\n    }\n\n    void build(int start, int end, int node) {\n        if (start == end) {\n            tree[node] = isPeak(start);\n            return;\n        }\n        int mid = (start + end) / 2;\n        build(start, mid, 2 * node + 1);\n        build(mid + 1, end, 2 * node + 2);\n        tree[node] = tree[2 * node + 1] + tree[2 * node + 2];\n    }\n\n    int isPeak(int i) {\n        if (i <= 0 || i >= n - 1) return 0;\n        return nums[i - 1] < nums[i] && nums[i] > nums[i + 1];\n    }\n\n    int query(int left, int right) {\n        return query(0, n - 1, left, right, 0);\n    }\n\n    int query(int start, int end, int left, int right, int node) {\n        if (left > end || right < start) return 0;\n        if (left <= start && right >= end) return tree[node];\n        int mid = (start + end) / 2;\n        int leftQuery = query(start, mid, left, right, 2 * node + 1);\n        int rightQuery = query(mid + 1, end, left, right, 2 * node + 2);\n        return leftQuery + rightQuery;\n    }\n\n    void update(int index, int value) {\n        nums[index] = value;\n        update(0, n - 1, index, 0);\n        if (index > 0) update(0, n - 1, index - 1, 0); \n        if (index < n - 1) update(0, n - 1, index + 1, 0); \n    }\n\n    void update(int start, int end, int index, int node) {\n        if (start == end) {\n            tree[node] = isPeak(index);\n            return;\n        }\n        int mid = (start + end) / 2;\n        if (index <= mid) {\n            update(start, mid, index, 2 * node + 1);\n        } else {\n            update(mid + 1, end, index, 2 * node + 2);\n        }\n        tree[node] = tree[2 * node + 1] + tree[2 * node + 2];\n    }\n};\n\nclass Solution {\npublic:\n    vector<int> countOfPeaks(vector<int>& nums, vector<vector<int>>& queries) {\n        SegmentTree st(nums);\n        vector<int> result;\n\n        for (auto query : queries) {\n            if (query[0] == 1) {\n                int li = query[1], ri = query[2];\n                if (li + 1 <= ri - 1) { \n                    result.push_back(st.query(li + 1, ri - 1));\n                } else {\n                    result.push_back(0);\n                }\n            } else if (query[0] == 2) { \n                int index = query[1], val = query[2];\n                st.update(index, val);\n            }\n        }\n\n        return result;\n    }\n};\n\n\n",
    "submit_ts": 1718507739.0
}