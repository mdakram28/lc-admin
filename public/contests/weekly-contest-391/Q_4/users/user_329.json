{
    "username": "user0224B",
    "submission": "/*\n- maxDist = \n    - some leftmost point in a row to some rightmost point in a row\n    - some topmost point in a col to some bottommost point in a col\n- removing one point in (p1, p2), where dist(p1,p2) == maxDist\n- map<int, pair<int,int>> := <x, <minY, maxY>>\n\n- maxOf\n    - x1-x2 + y1-y2\n        - maxOf(x+y) - minOf(x+y)\n    - x2-x1 + y1-y2\n        - maxOf(x-y) - minOf(x-y)\n*/\n\nclass Solution {\npublic:\n    int minimumDistance(vector<vector<int>>& points) {\n        int n = points.size();\n        vector<int> sortI1(n);\n        iota(begin(sortI1), end(sortI1), 0);\n        auto sortI2(sortI1);\n        sort(begin(sortI1), end(sortI1), [&](int i1, int i2) {\n            return points[i1][0] + points[i1][1] < points[i2][0] + points[i2][1];\n        });\n        \n        sort(begin(sortI2), end(sortI2), [&](int i1, int i2) {\n            return points[i1][0] - points[i1][1] < points[i2][0] - points[i2][1];\n        });\n        \n        auto dist = [&](int i1, int i2) {\n            return abs(points[i1][0] - points[i2][0]) + abs(points[i1][1] - points[i2][1]);\n        };\n        \n        auto calRes = [&](int remove) {\n            int i1Min = sortI1[0] == remove ? sortI1[1] : sortI1[0];\n            int i1Max = sortI1[n-1] == remove ? sortI1[n-2] : sortI1[n-1];\n            int i2Min = sortI2[0] == remove ? sortI2[1] : sortI2[0];\n            int i2Max = sortI2[n-1] == remove ? sortI2[n-2] : sortI2[n-1];\n            return max(dist(i1Min, i1Max), dist(i2Min, i2Max));\n        };\n        \n        return min({calRes(sortI1[0]), calRes(sortI1[n-1]), calRes(sortI2[0]), calRes(sortI2[n-1])});\n    }\n};"
}