{
    "username": "harsh2111",
    "submission": "from collections import defaultdict\nfrom typing import List, Tuple\nimport math\n\ndef find_parent(i: Tuple[int, int, int], parent: dict, rank: dict) -> Tuple[int, int, int]:\n    if parent[i] != i:\n        parent[i] = find_parent(parent[i], parent, rank)\n    return parent[i]\n\ndef union(x: Tuple[int, int, int], y: Tuple[int, int, int], parent: dict, rank: dict) -> None:\n    rootX = find_parent(x, parent, rank)\n    rootY = find_parent(y, parent, rank)\n    if rootX != rootY:\n        if rank[rootX] > rank[rootY]:\n            parent[rootY] = rootX\n        elif rank[rootX] < rank[rootY]:\n            parent[rootX] = rootY\n        else:\n            parent[rootY] = rootX\n            rank[rootX] += 1\n\ndef check(circle: List[int], X: int, Y: int) -> List[Tuple[int, int, int]]:\n    x, y, r = circle\n    boundaries = []\n    if y - r <= 0:  # touches or crosses the bottom boundary\n        boundaries.append((-1, -1, 4))\n    if y + r >= Y:  # touches or crosses the top boundary\n        boundaries.append((-1, -1, 2))\n    if x + r >= X:  # touches or crosses the right boundary\n        boundaries.append((-1, -1, 3))\n    if x - r <= 0:  # touches or crosses the left boundary\n        boundaries.append((-1, -1, 1))\n    return boundaries\n\nclass Solution:\n    def canReachCorner(self, X: int, Y: int, circles: List[List[int]]) -> bool:\n        # Initialize the parent and rank dictionaries\n        parent = {}\n        rank = {}\n        \n        # Create a parent entry and rank for each circle\n        for circle in circles:\n            parent[tuple(circle)] = tuple(circle)  # parent of itself\n            rank[tuple(circle)] = 0\n\n        # Define boundary representatives\n        left = (-1, -1, 1)\n        up = (-1, -1, 2)\n        right = (-1, -1, 3)\n        down = (-1, -1, 4)\n        \n        # Initialize boundaries in parent dictionary\n        boundaries = [left, up, right, down]\n        for boundary in boundaries:\n            parent[boundary] = boundary\n            rank[boundary] = 0\n        \n        # Union circles that are touching each other\n        for i in range(len(circles)):\n            for j in range(i + 1, len(circles)):\n                circle1 = circles[i]\n                circle2 = circles[j]\n                dist_centre = math.sqrt((circle1[0] - circle2[0]) ** 2 + (circle1[1] - circle2[1]) ** 2)\n                radius_sum = circle1[2] + circle2[2]\n                if dist_centre <= radius_sum:\n                    union(tuple(circle1), tuple(circle2), parent, rank)\n        \n        # Union circles with boundaries they touch\n        for circle in circles:\n            boundaries = check(circle, X, Y)\n            for boundary in boundaries:\n                if boundary:\n                    union(tuple(circle), boundary, parent, rank)\n        \n        # Check if the start and end corners are connected through any boundary\n        if (find_parent(left, parent, rank) == find_parent(right, parent, rank) or\n            find_parent(up, parent, rank) == find_parent(down, parent, rank) or\n            find_parent(left, parent, rank) == find_parent(down, parent, rank) or\n            find_parent(up, parent, rank) == find_parent(right, parent, rank)):\n            return False\n        else:\n            return True\n\n",
    "submit_ts": "1722138804",
    "subm_id": "1335800122"
}