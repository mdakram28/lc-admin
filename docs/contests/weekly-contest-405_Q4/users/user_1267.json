{
    "username": "Sunil_Kumar_Kalagarla",
    "submission": "class Solution:\n    class TrieNode:\n        def __init__(self):\n            self.children = {}\n            self.cost = float('inf')\n            self.is_end = False\n\n    class Trie:\n        def __init__(self):\n            self.root = Solution.TrieNode()\n        \n        def insert(self, word, cost):\n            node = self.root\n            for char in word:\n                if char not in node.children:\n                    node.children[char] = Solution.TrieNode()\n                node = node.children[char]\n            node.is_end = True\n            node.cost = min(node.cost, cost)\n\n    def minimumCost(self, target: str, words: List[str], costs: List[int]) -> int:\n        n = len(target)\n        \n        # Build the Trie\n        trie = Solution.Trie()\n        for word, cost in zip(words, costs):\n            trie.insert(word, cost)\n        \n        # DP array\n        dp = [float('inf')] * (n + 1)\n        dp[0] = 0\n\n        # Dynamic programming with Trie matching\n        for i in range(n):\n            if dp[i] == float('inf'):\n                continue\n            node = trie.root\n            for j in range(i, n):\n                if target[j] not in node.children:\n                    break\n                node = node.children[target[j]]\n                if node.is_end:\n                    dp[j + 1] = min(dp[j + 1], dp[i] + node.cost)\n        \n        return dp[n] if dp[n] != float('inf') else -1",
    "submit_ts": "1720323202",
    "subm_id": "1312369834"
}