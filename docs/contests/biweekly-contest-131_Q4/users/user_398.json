{
    "username": "admiring-shockleyzns",
    "submission": "from sortedcontainers import SortedList\nclass Solution:\n    def getResults(self, queries: List[List[int]]) -> List[bool]:\n        def lowbit(x):\n            # \u53d6\u4e8c\u8fdb\u5236\u4e2d\u6700\u4f4e\u4f4d\u7684 1\n            return x & (-x)\n        ans = []\n        n = len(queries)\n        x_L = set()\n        x_L.add(0)\n        s = set()\n        s.add(0)\n        for i in range(n):\n            if queries[i][0] == 1:\n                x = queries[i][1]\n                x_L.add(x)\n                s.add(x)\n            else:\n                x, length = queries[i][1], queries[i][2]\n                x_L.add(x)\n\n\n        def build():\n            # \u5efa\u7acb\u6811\u72b6\u6570\u7ec4\n            for i in range(len(L)):\n                # \u6bcf\u4e2a\u6570\u636e\u8fdb\u884c\u66f4\u65b0\u64cd\u4f5c\n                update(i + 1, L[i])\n\n        def update(x, val):\n            # \u5355\u70b9\u66f4\u65b0\n            while x <= n:\n                BIT_L[x] = max(BIT_L[x], val)\n                x += lowbit(x)\n\n        def query_pre(x):\n            # \u67e5\u8be2\u524d\u7f00\u6700\u5927\u503c\n            res = 0\n            while x > 0:\n                res = max(res, BIT_L[x])\n                x -= lowbit(x)\n            return res\n\n\n        x_L.add(10**5)\n        x_L = sorted(x_L)\n        dic = dict()\n        for i, num in enumerate(x_L):\n            dic[num] = i\n        L = [0]\n        for i in range(1, len(x_L)):\n            L.append(x_L[i] - x_L[i - 1])\n        sorted_L = SortedList(x_L)\n\n        \n\n\n        for i in range(n):\n            if queries[i][0] == 2:\n                x, length = queries[i][1], queries[i][2]\n                if x not in s:\n                    left = 0\n                    right = len(sorted_L)\n                    while left < right:\n                        middle = (left + right + 1) // 2\n                        if sorted_L[middle] <= x:\n                            left = middle\n                        else:\n                            right = middle - 1\n                    if sorted_L[left] == x:\n                        num = sorted_L[left + 1]\n                        idx = dic[num]\n                        L[idx] = max(L[idx], num - sorted_L[left - 1])\n                        sorted_L.remove(sorted_L[left])\n        #     print(i, sorted_L)\n        # print(sorted_L, s)\n        n = len(L)\n        BIT_L = [0] * (n + 1)  # \u6784\u5efa\u6811\u72b6\u6570\u7ec4\n        build()\n\n        def f(num):\n            left = 0\n            right = len(sorted_L)\n            while left < right:\n                middle = (left + right + 1) // 2\n                if sorted_L[middle] <= x:\n                    left = middle\n                else:\n                    right = middle - 1\n            num = sorted_L[left + 1]\n            idx = dic[num]\n            update(idx + 1, num - sorted_L[left - 1])\n            sorted_L.remove(sorted_L[left])\n\n        ans = []\n        for i in range(len(queries) - 1, -1, -1):\n            if queries[i][0] == 1:\n                x = queries[i][1]\n                f(x)\n            else:\n                x, length = queries[i][1], queries[i][2]\n                left = 0\n                right = len(sorted_L) - 1\n                while left < right:\n                    middle = (left + right + 1) // 2\n                    if sorted_L[middle] <= x:\n                        left = middle\n                    else:\n                        right = middle - 1\n                # print(sorted_L, x, left)\n                if x - sorted_L[left] >= length:\n                    ans.append(True)\n                else:\n                    idx = dic[sorted_L[left]]\n                    res = query_pre(idx + 1)\n                    ans.append(res >= length)\n        ans = ans[::-1]\n        return ans\n                \n\n",
    "submit_ts": "1716651817",
    "subm_id": "534776541"
}