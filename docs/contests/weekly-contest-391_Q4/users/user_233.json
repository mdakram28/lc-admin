{
    "username": "GoldenShadow5",
    "submission": "class Solution {\n    public int minimumDistance(int[][] points) {\n        int n = points.length;\n        int[][] s = new int[n][2];\n        int[][] d = new int[n][2];\n        for(int i = 0; i < n; i++) {\n            s[i][0] = points[i][0]+points[i][1];\n            s[i][1] = i;\n            d[i][0] = points[i][0]-points[i][1];\n            d[i][1] = i;\n        }\n        Arrays.sort(s, new Comparator<int[]>() {\n            @Override\n            public int compare(int[] o1, int[] o2) {\n                return o1[0]-o2[0];\n            }\n        });\n        Arrays.sort(d, new Comparator<int[]>() {\n            @Override\n            public int compare(int[] o1, int[] o2) {\n                return o1[0]-o2[0];\n            }\n        });\n        int min = Integer.MAX_VALUE;\n        for(int i = 0; i < n; i++) {\n            int cur = 0;\n            if(s[0][1] == i) {\n                cur = Math.max(cur, s[n-1][0]-s[1][0]);\n            } else if(s[n-1][1] == i) {\n                cur = Math.max(cur, s[n-2][0]-s[0][0]);\n            } else {\n                cur = Math.max(cur, s[n-1][0]-s[0][0]);\n            }\n            if(d[0][1] == i) {\n                cur = Math.max(cur, d[n-1][0]-d[1][0]);\n            } else if(d[n-1][1] == i) {\n                cur = Math.max(cur, d[n-2][0]-d[0][0]);\n            } else {\n                cur = Math.max(cur, d[n-1][0]-d[0][0]);\n            }\n            min = Math.min(min, cur);\n        }\n        return min;\n    }\n}"
}