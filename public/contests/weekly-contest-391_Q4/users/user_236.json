{
    "username": "PhoenixDD",
    "submission": "class Solution {\npublic:\n    int minimumDistance(vector<vector<int>>& points) {\n        sort(points.begin(),points.end());\n        vector<pair<int,int>> sum,diff;\n        for(int i=0;i<points.size();i++)\n            sum.push_back({points[i][0]+points[i][1],i}),diff.push_back({points[i][0]-points[i][1],i});\n        sort(sum.begin(),sum.end());\n        sort(diff.begin(),diff.end());\n        int result=INT_MAX;\n        unordered_set<int> possible={sum[0].second,sum.back().second,diff[0].second,diff.back().second};\n        // for(auto &[a,b]:sum)\n        //     cout<<a<<\" \"<<b<<\", \";\n        // cout<<endl;\n        // for(auto &[a,b]:diff)\n        //     cout<<a<<\" \"<<b<<\", \";\n        // cout<<endl;\n        for(auto &i:possible) {\n            int sL=sum.front().second==i?sum[1].first:sum[0].first;\n            int sR=sum.back().second==i?sum[sum.size()-2].first:sum.back().first;\n            int dL=diff.front().second==i?diff[1].first:diff[0].first;\n            int dR=diff.back().second==i?diff[diff.size()-2].first:diff.back().first;\n            result=min(result,max(dR-dL,sR-sL));\n        }\n        return result;\n    }\n};"
}