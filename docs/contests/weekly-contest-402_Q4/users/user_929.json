{
    "username": "catnipan",
    "submission": "\nclass SegTree:\n    def __init__(self, arr):\n        self.n = len(arr)\n        self.tree = [0] * (2 * self.n)\n        for i in range(self.n):  \n            self.tree[self.n + i] = arr[i];  \n        \n        for i in range(self.n - 1, 0, -1):  \n            self.tree[i] = self.tree[i << 1] + self.tree[i << 1 | 1];  \n\n    def updateTreeNode(self, p, value):  \n        self.tree[p + self.n] = value;  \n        p = p + self.n;  \n        i = p; \n        while i > 1 : \n            self.tree[i >> 1] = self.tree[i] + self.tree[i ^ 1];  \n            i >>= 1;  \n\n    def query(self, l, r) :  \n        res = 0;  \n        l += self.n; \n        r += self.n; \n        \n        while l < r : \n        \n            if (l & 1) : \n                res += self.tree[l];  \n                l += 1\n        \n            if (r & 1) : \n                r -= 1; \n                res += self.tree[r];  \n                \n            l >>= 1; \n            r >>= 1\n        \n        return res; \n\nclass Solution:\n    def countOfPeaks(self, nums, queries):\n        peak = [0] * len(nums)\n        for i in range(1, len(nums) - 1):\n            if nums[i - 1] < nums[i] and nums[i] > nums[i + 1]:\n                peak[i] += 1\n        ST = SegTree(peak)        \n        ans = []\n        \n        def getSubArr(i):\n            nonlocal nums\n            sub = []\n            for d in range(-2, 3):\n                ii = i + d\n                if 0 <= ii and ii < len(nums):\n                    sub.append(nums[ii])\n                else:    \n                    sub.append(None)\n            return sub\n        def compute(arr):\n            peak = [0] * 3\n            for i in range(3):\n                ii = i + 1\n                if arr[ii - 1] is None or arr[ii] is None or arr[ii + 1] is None:\n                    continue\n                if arr[ii] > max(arr[ii - 1], arr[ii + 1]):\n                    peak[i] += 1\n            return peak                    \n        \n        for t, x, y in queries:\n            if t == 2:\n                idx, newVal = x, y\n                nums[idx] = newVal\n                sa = getSubArr(idx)\n                pa = compute(sa)\n                for pi in range(3):\n                    targetIdx = idx + pi - 1\n                    pv = pa[pi]\n                    if 0 <= targetIdx and targetIdx < len(nums):\n                        ST.updateTreeNode(targetIdx, pv)\n            else:                        \n                l, r = x + 1, y\n                ans.append(ST.query(l, r))\n        return ans \n                ",
    "submit_ts": 1718508520.0
}