{
    "username": "sudhanshu_090",
    "submission": "class Solution {\npublic:\n    void furthest(vector<vector<int>> &adj, int node, int dist, vector<int> &distance, vector<bool> &vis){\n        vector<int> neigh = adj[node];\n        distance[node] = dist;\n        vis[node] = true;\n        for (int i{};i<neigh.size();i++){\n            if (vis[neigh[i]])\n                continue;\n            furthest(adj,neigh[i],dist+1,distance,vis);\n        }\n    }\n    void dfs(vector<vector<int>> &adj, int node, int dist, vector<int> &dist1, vector<bool> &vis){\n        vector<int> neigh = adj[node];\n        dist1[node] = max(dist1[node] , dist);\n        vis[node] = true;\n        for (int i{};i<neigh.size();i++){\n            if (vis[neigh[i]])\n                continue;\n            dfs(adj,neigh[i],dist+1,dist1,vis);\n        }\n    }\n    \n    //-------------------------------\n    \n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n        int n = edges1.size()+1;\n        vector<vector<int>> adj1(n);\n\n        for (int i{};i<n-1;i++){\n            int a = edges1[i][0];\n            int b = edges1[i][1];\n            adj1[a].push_back(b);\n            adj1[b].push_back(a);\n        }\n\n        vector<int> distance1(n,0);\n        vector<bool> vis1(n,false);\n        furthest(adj1,0,0,distance1,vis1);\n\n        int x1;\n        int maxdist1 = -1;\n        for (int i{};i<n;i++){\n            if (distance1[i] >= maxdist1){\n                x1 = i;\n                maxdist1 = distance1[i];\n            }\n            vis1[i] = false;\n            distance1[i] = 0;\n        }\n\n        int y1;\n        maxdist1 = -1;\n        furthest(adj1,x1,0,distance1,vis1);\n        for (int i{};i<n;i++){\n            if (distance1[i] >= maxdist1){\n                y1 = i;\n                maxdist1 = distance1[i];\n            }\n            vis1[i] = false;\n            distance1[i] = 0;\n        }\n\n        //x and y are extremeties\n        vector<int> dist11(n,0);\n        dfs(adj1,x1,0,dist11,vis1);\n        for (int i{};i<n;i++)\n            vis1[i] = false;\n        dfs(adj1,y1,0,dist11,vis1);\n        int q1 = dist11[x1];\n\n        //---------------------------------------------------------------------------\n        n = edges2.size()+1;\n        vector<vector<int>> adj2(n);\n\n        for (int i{};i<n-1;i++){\n            int a = edges2[i][0];\n            int b = edges2[i][1];\n            adj2[a].push_back(b);\n            adj2[b].push_back(a);\n        }\n\n        vector<int> distance2(n,0);\n        vector<bool> vis2(n,false);\n        furthest(adj2,0,0,distance2,vis2);\n\n        int x2;\n        int maxdist2 = -1;\n        for (int i{};i<n;i++){\n            if (distance2[i] >= maxdist2){\n                x2 = i;\n                maxdist2 = distance2[i];\n            }\n            vis2[i] = false;\n            distance2[i] = 0;\n        }\n\n        int y2;\n        maxdist2 = -1;\n        furthest(adj2,x2,0,distance2,vis2);\n        for (int i{};i<n;i++){\n            if (distance2[i] >= maxdist2){\n                y2 = i;\n                maxdist2 = distance2[i];\n            }\n            vis2[i] = false;\n            distance2[i] = 0;\n        }\n\n        //x and y are extremeties\n        vector<int> dist12(n,0);\n        dfs(adj2,x2,0,dist12,vis2);\n        for (int i{};i<n;i++)\n            vis2[i] = false;\n        dfs(adj2,y2,0,dist12,vis2);\n        int q2 = dist12[x2];\n\n        \n        //--------------------------------------------------\n        int maxii11 = INT_MAX;\n        for (int i{};i<dist11.size();i++){\n            //cout<<dist11[i]<<endl;\n            maxii11 = min(maxii11 , dist11[i]);\n        }\n        int maxii22 = INT_MAX;\n        for (int i{};i<dist12.size();i++){\n            //cout<<dist12[i]<<endl;\n            maxii22 = min(maxii22 , dist12[i]);\n        }\n        \n        int ans = max({q1,q2,maxii11 + maxii22 + 1});\n        return ans;\n    }\n};",
    "submit_ts": 1719718468.0
}