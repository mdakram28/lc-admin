{
    "username": "des1pe0ra2do4",
    "submission": "class Solution:\n    def shortestDistanceAfterQueries(self, n: int, queries: List[List[int]]) -> List[int]:\n        tree = [0] * (4 * n)\n        lazy = [0] * (4 * n)\n\n        def modify(L, R, l, r, o, v, mark=0):\n            if r < L or l > R:\n                return\n            if L <= l and r <= R:\n                tree[o] = v\n                lazy[o] = mark\n                return\n            spread(o)\n            mid = (l + r) // 2\n            modify(L, R, l, mid, 2 * o, v, mark)\n            modify(L, R, mid + 1, r, 2 * o + 1, v, mark)\n            tree[o] = tree[2 * o] + tree[2 * o + 1]\n        \n        def spread(o):\n            if lazy[o]:\n                v = lazy[o]\n                lazy[2 * o] = v\n                lazy[2 * o + 1] = v\n                tree[2 * o] = 0\n                tree[2 * o + 1] = 0\n                lazy[o] = 0\n        \n        def query(L, R, l, r, o):\n            if r < L or l > R:\n                return 0\n            if L <= l and r <= R:\n                return tree[o]\n            spread(o)\n            mid = (l + r) // 2\n            left = query(L, R, l, mid, 2 * o)\n            right = query(L, R, mid + 1, r, 2 * o + 1)\n            return left + right\n        \n        for i in range(n):\n            modify(i, i, 0, n - 1, 1, 1)\n        ans = []\n        for u, v in queries:\n            modify(u + 1, v - 1, 0, n - 1, 1, 0, 1)\n            ans.append(tree[1] - 1)\n        return ans",
    "submit_ts": "1722743540",
    "subm_id": "552351395"
}