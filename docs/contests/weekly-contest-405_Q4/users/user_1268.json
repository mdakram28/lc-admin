{
    "username": "shyamkinjarapu9103",
    "submission": "class Solution { \npublic: \n    struct TrieNode { \n        unordered_map<char, TrieNode*> child; \n        vector<pair<int, int>> wend;  \n    }; \n \n    class Trie { \n    public: \n        TrieNode* root; \n        Trie() { root = new TrieNode(); } \n \n        void insert(string& word, int index, int cost) { \n            TrieNode* node = root; \n            for (char c : word) { \n                if (!node->child.count(c)) \n                    node->child[c] = new TrieNode(); \n                node = node->child[c]; \n            } \n            node->wend.push_back({index, cost}); \n        } \n    }; \n \n    int minimumCost(string target, vector<string>& words, vector<int>& costs) { \n        int n = target.size(); \n        vector<int> dp(n + 1, INT_MAX); \n        dp[0] = 0; \n \n        Trie trie; \n        for (int i = 0; i < words.size(); ++i) { \n            trie.insert(words[i], i, costs[i]); \n        } \n \n        for (int i = 0; i < n; ++i) { \n            if (dp[i] == INT_MAX) continue; \n \n            TrieNode* node = trie.root; \n            for (int j = i; j < n; ++j) { \n                if (!node->child.count(target[j])) break; \n                node = node->child[target[j]]; \n                for (auto& p : node->wend) { \n                    int wind = p.first; \n                    int wcos = p.second; \n                    int len = words[wind].size(); \n                    if (i + len <= n) { \n                        dp[i + len] = min(dp[i + len], dp[i] + wcos); \n                    } \n                } \n            } \n        } \n \n        return dp[n] == INT_MAX ? -1 : dp[n]; \n    } \n};",
    "submit_ts": "1720323809",
    "subm_id": "1312384585"
}