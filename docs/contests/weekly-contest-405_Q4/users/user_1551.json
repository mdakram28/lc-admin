{
    "username": "halllllllis",
    "submission": "#include <bits/stdc++.h>\n#include <ext/pb_ds/assoc_container.hpp>\n#include <ext/pb_ds/tree_policy.hpp>\n\nusing namespace std;\nusing namespace __gnu_pbds;\n\ntemplate <typename T>\nusing ordered_set = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;\n\n#define ll long long int\n#define IOS ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);\n#define vt vector<ll>v;\n#define cYes cout<<\"YES\"<<'\\n';\n#define cNo cout<<\"NO\"<<'\\n';\n#define INPUT int t;cin>>t;while(t--)\n#define vl vector<ll>\n#define pii pair<int,int>\n#define pll pair<ll,ll>\n#define pb push_back\n#define F first\n#define S second\n#define forx3(x, start, stop, step) for (long long x = start; x < (long long)(stop); x += step)\n#define forx(x, start, stop) forx3(x, start, stop, 1)\n#define forx2(x, stop) forx(x, 0, stop)\n#define forr(x,start,stop) for (long long x = start; x >= (long long)(stop); x -= 1)\n#define all(a) a.begin(), a.end()\n#define error(args...) { string _s = #args; replace(_s.begin(), _s.end(), ',', ' '); stringstream _ss(_s); istream_iterator<string> _it(_ss); err(_it, args); }\nvoid err(istream_iterator<string> it) {\n    cout << '\\n';\n}\ntemplate<typename T, typename... Args>\nvoid err(istream_iterator<string> it, T a, Args... args) {\n    cout << *it << \" = \" << a << ' ';\n    err(++it, args...);\n}\nstatic constexpr ll MOD  = 1e9+7;\n\nll modPow(ll base, ll exp, ll mod) {\n    ll res = 1;\n    base %= mod;\n    while (exp > 0) {\n        if (exp & 1) res = (res * base) % mod;\n        exp >>= 1;\n        base = (base * base) % mod;\n    }\n    return res;\n}\n\nclass Solution {\n    struct Trie {\n        Trie* children[26];\n        vector<int> costs;\n        Trie() {\n            for(int i = 0; i < 26; i++) {\n                this->children[i] = nullptr;\n            }\n        }\n    };\n\n    Trie* root;\n\n    void insert(const string& s, int c) {\n        Trie* temp = root;\n        for(char ch : s) {\n            int idx = ch - 'a';\n            if(temp->children[idx] == nullptr) temp->children[idx] = new Trie();\n            temp = temp->children[idx];\n        }\n        temp->costs.push_back(c);\n    }\n\n    vector<int> dp;\n\n    void dfs(Trie* node, int startIdx, const string& target) {\n        Trie* temp = node;\n        for(int i = startIdx; i < target.size(); i++) {\n            int idx = target[i] - 'a';\n            if(temp->children[idx] == nullptr) break;\n            temp = temp->children[idx];\n            for(int cost : temp->costs) {\n                dp[i + 1] = min(dp[i + 1], dp[startIdx] + cost);\n            }\n        }\n    }\n\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int n = target.size();\n        dp.resize(n + 1, INT_MAX);\n        dp[0] = 0;\n\n        root = new Trie();\n        for(int i = 0; i < words.size(); ++i) {\n            insert(words[i], costs[i]);\n        }\n\n        for(int i = 0; i < n; ++i) {\n            if(dp[i] == INT_MAX) continue;\n            dfs(root, i, target);\n        }\n\n        return dp[n] == INT_MAX ? -1 : dp[n];\n    }\n};\n",
    "submit_ts": "1720324760",
    "subm_id": "1312407520"
}