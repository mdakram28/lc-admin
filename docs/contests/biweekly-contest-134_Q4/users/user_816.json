{
    "username": "jiu-ren-36",
    "submission": "class Solution {\npublic:\n    using ll = long long;\n    vector<int> tree;\n    vector<int> A;\n    void build(int cur, int l, int r)\n    {\n        if(l == r)\n        {\n            // cout << l << '\\n';\n            tree[cur] = A[l];\n            return;\n        }\n        int mid = l + (r - l) / 2;\n        build(cur * 2, l, mid);\n        build(cur*2 + 1, mid + 1, r);\n        tree[cur] = tree[cur * 2] & tree[cur * 2 + 1];\n    }\n\n    int query(int cur, int l, int r, int ql, int qr)\n    {\n        if(ql <= l && qr >= r)\n        {\n            return tree[cur];\n        }\n        int mid = l + (r - l) / 2;\n        int ans = (1 << 30) - 1;\n        if(mid >= ql)\n        {\n            ans = ans & query(cur * 2, l, mid, ql, qr);\n        }\n        if(mid < qr)\n        {\n            ans = ans & query(cur * 2 + 1, mid + 1, r, ql, qr);\n        }\n        return ans;\n    }\n    long long countSubarrays(vector<int>& nums, int k) {\n        ll res = 0;\n        int n = nums.size();\n        A = nums;\n        tree = vector<int>(n*4+100,0);\n        build(1, 0, n - 1);\n        for(int i = 0; i < n; i++) {\n            int l = 0, r = i;\n            while(l < r) {\n                int mid = (l + r + 1) / 2;\n                if(query(1, 0, n - 1, mid, i) > k) r = mid - 1;\n                else l = mid;\n            }\n            if(query(1, 0, n - 1, l, i) != k) continue;\n            int ll = 0, rr = l;\n            while(ll < rr) {\n                int mid = (ll + rr) / 2;\n                if(query(1, 0, n - 1, mid, i) < k) ll = mid + 1;\n                else rr = mid;\n            }\n            res += l - ll + 1;\n        }\n        return res;\n    }\n};",
    "submit_ts": "1720279551",
    "subm_id": "544567969"
}