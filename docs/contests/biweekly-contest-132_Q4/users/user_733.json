{
    "username": "shiva0102",
    "submission": "class Solution {\npublic:\n    int maximumLength(std::vector<int>& nums, int k) { \n        int n = nums.size(); \n        std::vector<std::vector<int>> dp(n, std::vector<int>(k + 1, 1)); \n        int ans = 1; \n        std::vector<int> vk(k + 1, -1); \n        std::vector<std::map<int, int>> vkm(k + 1); \n        \n        int i = 0;\n        while (i < n) {\n            int j1 = 0;\n            while (j1 <= k) {\n                int l = 0;\n                while (l < j1) {\n                    dp[i][j1] = std::max(dp[i][j1], 1 + vk[l]); \n                    l++;\n                } \n                if (vkm[j1].find(nums[i]) != vkm[j1].end()) { \n                    dp[i][j1] = std::max(dp[i][j1], 1 + vkm[j1][nums[i]]); \n                } \n                ans = std::max(ans, dp[i][j1]); \n                j1++;\n            } \n            int j2 = 0;\n            while (j2 <= k) {\n                vk[j2] = std::max(vk[j2], dp[i][j2]); \n                vkm[j2][nums[i]] = std::max(vkm[j2][nums[i]], dp[i][j2]); \n                j2++;\n            } \n            i++;\n        } \n        return ans; \n    }\n};",
    "submit_ts": "1717862340",
    "subm_id": "1281820145"
}