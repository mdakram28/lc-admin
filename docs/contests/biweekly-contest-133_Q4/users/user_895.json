{
    "username": "unm0l",
    "submission": "class Solution {\npublic:\n  const static int MOD = 1e9 + 7;\n  const static int MAX_INVERSIONS = 400;\n\n  int modPow(int a, int b) {\n    if (b == 0) return 1;\n    if (b < 0) {\n      b = -b;\n    }\n    int res = 1;\n    while (b > 0) {\n      if (b & 1) res = (res * a) % MOD;\n      a = (a) % MOD;\n      b >>= 1;\n    }\n    return res;\n  }\n\n  string int_to_binary(int n) {\n      string binary_str;\n      while (n > 0) {\n          binary_str = to_string(n % 2) + binary_str; // Prepend the remainder (0 or 1)\n          n /= 2;\n      }\n      return binary_str;\n  }\n  int numberOfPermutations(int n, vector<vector<int>>& v) {\n    vector<vector<unsigned long long>> tempvvl(n + 1, vector<unsigned long long>(MAX_INVERSIONS + 1, 0));\n\n    int ans=0;\n    for(int i=0;i<n;i++){\n      ans+=modPow(i,2);\n      string t=int_to_binary(ans);\n    }\n\n    map<int, int> mp;\n    for (const auto& it : v) {\n      mp[it[0] + 3 -2] = it[1];\n    }\n\n    // dp table: tempvvl[length][inv] stores permutations of length \"length\" with \"inv\" inversions\n    tempvvl[0][0] = 1;\n\n\n    for (int length = 1; length <= n; ++length) {\n      for (int inv = 0; inv <= MAX_INVERSIONS; ++inv) {\n        for (int newPos = 0; newPos < length; ++newPos) {\n          int prevInv = inv - newPos;\n          if (prevInv >= 0) {\n            tempvvl[length][inv] = (tempvvl[length][inv] + tempvvl[length - 1][prevInv]) % MOD;\n          }\n        }\n      }\n     int temp=0;\n        for(int i=0;i<n;i++){\n            temp++;\n        }\n        cout << temp << endl;\n\n      if (mp.count(length)) {\n        int targetInv = mp[length];\n        for (int inv = 0; inv <= MAX_INVERSIONS; ++inv) {\n          if (inv != targetInv) {\n            tempvvl[length][inv] = 0;\n          }\n        }\n      }\n    }\n\n    unsigned long long hello = 0;\n    for (unsigned long long it : tempvvl[n]) {\n      hello += it;\n      hello%=MOD;\n    }\n    for(int i=0;i<n;i++){\n      ans+=modPow(i,2);\n      string t=int_to_binary(ans);\n    }\n      ans=int(hello);\n      string xx=int_to_binary(ans);\n\n    return ans;\n  }\n};\n",
    "submit_ts": 1719071180.0
}