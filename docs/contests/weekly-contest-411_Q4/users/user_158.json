{
    "username": "Srikkanth R",
    "submission": "struct BIT {\n    vector<long long> v;\n    int sz;\n    BIT(int n) : sz(n) {\n        v.resize(n + 1, 0);\n    }\n    void add(int pos, int val) {\n        for (;pos<=sz;pos+=(pos&(-pos))) {\n            v[pos] += val;\n        }\n    }\n    long long qry(int pos) {\n        long long ans = 0;\n        for (;pos>0;pos-=pos&(-pos)) {\n            ans += v[pos];\n        }\n        return ans;\n    }\n    long long qry(int ell, int arr) {\n        return qry(arr) - qry(ell - 1);\n    }\n};\n\nclass Solution {\npublic:\n    vector<long long> countKConstraintSubstrings(string s, int k, vector<vector<int>>& queries) {\n        int n = s.size();\n        vector<int> nxt(n);\n        int rv = -1, zc = 0, oc = 0;\n        for (int i=0;i<n;++i) {\n            while (rv < n && (zc <= k || oc <= k)) {\n                rv += 1;\n                if (rv == n) break;\n                if (s[rv] == '0') zc++;\n                else oc++;\n            }\n            nxt[i] = rv;\n            if (s[i] == '0') zc--;\n            else oc--;\n            rv = max(rv, i);\n        }\n        // invalid intervals -- [i, nxt[i] ] through [i, r]\n        // if nxt[i] > r then ignore\n        // if nxt[i] <= r then we add r - nxt[i] + 1;\n        BIT s1(n), sv(n);\n        vector<array<int, 3> > q;\n        int qi = 0;\n        for (auto &vec : queries) {\n            q.push_back({vec[1], vec[0], qi});\n            qi += 1;\n        }\n        vector<long long> ret(qi);\n        sort(q.begin(), q.end());\n        vector<vector<int> > modify(n + 1);\n        for (int i=0;i<n;++i) {\n            modify[nxt[i]].push_back(i);\n        }\n        int rgot = -1;\n        for (auto &a : q) {\n            int ell = a[1], arr = a[0], ind = a[2];\n            while (rgot < arr) {\n                rgot += 1;\n                for (auto &i : modify[rgot]) {\n                    s1.add(i + 1, 1);\n                    sv.add(i + 1, rgot);\n                }\n            } \n            long long A = s1.qry(ell + 1, arr + 1);\n            long long B = sv.qry(ell + 1, arr + 1);\n            long long C = (arr + 1) * A - B;\n            long long tot = arr - ell + 1;\n            tot = (tot * (tot + 1)) / 2;\n            ret[ind] = tot - C;\n        }\n        return ret;\n    }\n};",
    "submit_ts": "1723953458",
    "subm_id": "1359821805"
}