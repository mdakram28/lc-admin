{
    "username": "type-z",
    "submission": "class Solution {\n    public long minimumCost(int m, int n, int[] horizontalCut, int[] verticalCut) {\n        Arrays.sort(horizontalCut);\n        Arrays.sort(verticalCut);\n\n        int hIndex = horizontalCut.length - 1;\n        int vIndex = verticalCut.length - 1;\n\n        long totalCost = 0;\n        int horizontalPieces = 1;\n        int verticalPieces = 1;\n\n        while (hIndex >= 0 && vIndex >= 0) {\n            if (horizontalCut[hIndex] > verticalCut[vIndex]) {\n                totalCost += (long) horizontalCut[hIndex] * verticalPieces;\n                horizontalPieces++;\n                hIndex--;\n            } else {\n                totalCost += (long) verticalCut[vIndex] * horizontalPieces;\n                verticalPieces++;\n                vIndex--;\n            }\n        }\n\n        while (hIndex >= 0) {\n            totalCost += (long) horizontalCut[hIndex] * verticalPieces;\n            hIndex--;\n        }\n\n        while (vIndex >= 0) {\n            totalCost += (long) verticalCut[vIndex] * horizontalPieces;\n            vIndex--;\n        }\n\n        return totalCost;\n    }\n\n    // class Cut implements Comparable<Cut> {\n    //     int cost;\n    //     boolean isHorizontal;\n        \n    //     Cut(int cost, boolean isHorizontal) {\n    //         this.cost = cost;\n    //         this.isHorizontal = isHorizontal;\n    //     }\n        \n    //     @Override\n    //     public int compareTo(Cut other) {\n    //         return other.cost - this.cost; // Sort by cost in descending order\n    //     }\n    // }\n}",
    "submit_ts": "1720925436",
    "subm_id": "546439429"
}