{
    "username": "hard_k",
    "submission": "class Solution {\npublic:\n    long long  minCostToCutCake(int m, int n, vector<int>& horizontalCut, vector<int>& verticalCut) {\n    \n    sort(horizontalCut.begin(), horizontalCut.end(),greater<int>());\n    sort(verticalCut.begin(), verticalCut.end(),greater<int>());\n\n    long long h_pieces = 1; \n    long long v_pieces = 1;\n    long long total_cost = 0;\n\n    int i = 0, j = 0;\n    while (i < horizontalCut.size() && j < verticalCut.size()) {\n        if (horizontalCut[i] >= verticalCut[j]) {\n            total_cost += horizontalCut[i] * v_pieces;\n            h_pieces++;\n            i++;\n        } else {\n            total_cost += verticalCut[j] * h_pieces;\n            v_pieces++;\n            j++;\n        }\n    }\n\n    \n    while (i < horizontalCut.size()) {\n        total_cost += horizontalCut[i] * v_pieces;\n        h_pieces++;\n        i++;\n    }\n\n    \n    while (j < verticalCut.size()) {\n        total_cost += verticalCut[j] * h_pieces;\n        v_pieces++;\n        j++;\n    }\n\n    return total_cost;\n}\n    long long minimumCost(int m, int n, vector<int>& horizontalCut, vector<int>& verticalCut) {\n        return minCostToCutCake(m,n,horizontalCut,verticalCut);\n    }\n};",
    "submit_ts": "1720926594",
    "subm_id": "1320290765"
}