{
    "username": "cflee",
    "submission": "class Solution {\n    // Adapted from https://github.com/andrewass/kalgos/blob/bb566af25107ed7afe6447668e67afb02d32968e/src/main/kotlin/datastructures/rangequery/BinaryIndexedTree.kt\n    class BinaryIndexedTree(private val capacity: Int) {\n        private val tree = LongArray(capacity + 1)\n\n        fun getSum(ind: Int): Long {\n            var index = ind\n            var sum = 0L\n            while (index >= 1) {\n                sum += tree[index]\n                index -= index and -index\n            }\n            return sum\n        }\n\n        fun addValue(ind: Int, value: Long) {\n            var index = ind\n            while (index <= capacity) {\n                tree[index] += value\n                index += index and -index\n            }\n        }\n    }\n\n    fun countOfPeaks(nums: IntArray, queries: Array<IntArray>): List<Int> {\n        val tree = BinaryIndexedTree(nums.size)\n        fun isPeak(index: Int) = index - 1 >= 0 && index + 1 < nums.size && nums[index] > nums[index - 1] && nums[index] > nums[index + 1]\n        nums.forEachIndexed { index, num ->\n            if (isPeak(index)) {\n                tree.addValue(index + 1, 1)\n            }\n        }\n        val answer = mutableListOf<Int>()\n        queries.forEach { query ->\n            if (query[0] == 1) {\n                if (query[2] - query[1] <= 1) {\n                    answer.add(0)\n                } else {\n                    val result = tree.getSum(query[2] - 1 + 1) - tree.getSum(query[1] + 1)\n                    answer.add(result.toInt())\n                }\n            } else if (query[0] == 2) {\n                val index = query[1]\n                val prevLeft = isPeak(index - 1)\n                val prevCenter = isPeak(index)\n                val prevRight = isPeak(index + 1)\n                nums[index] = query[2]\n                val newLeft = isPeak(index - 1)\n                val newCenter = isPeak(index)\n                val newRight = isPeak(index + 1)\n                fun process(prev: Boolean, new: Boolean, index: Int) {\n                    if (prev && !new) {\n                        tree.addValue(index + 1, -1)\n                    } else if (!prev && new) {\n                        tree.addValue(index + 1, 1)\n                    }\n                }\n                process(prevLeft, newLeft, index - 1)\n                process(prevCenter, newCenter, index)\n                process(prevRight, newRight, index + 1)\n            }\n        }\n        return answer\n    }\n}",
    "submit_ts": "1718508396",
    "subm_id": "1289680086"
}