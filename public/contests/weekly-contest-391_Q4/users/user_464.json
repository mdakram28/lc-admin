{
    "username": "gifted-elionhqc",
    "submission": "class Solution {\n    public int minimumDistance(int[][] points) {\n        // A - B  \u6700\u5927\u8ddd\u79bb\n        // A - C\n        // A - D\n        // B - C\n        // B - D\n        // C - D\n\n        // \u79fb\u9664\u7684\u5c31\u662f\u9020\u6210\u6700\u5927\u8ddd\u79bb\u7684\u4e24\u4e2a\u70b9\u4e4b\u95f4\u7684\u4e00\u4e2a\u70b9\uff0c  \u79fb\u9664\u540e\u518d\u8ba1\u7b97\u6700\u5927\u66fc\u54c8\u987f\u8ddd\u79bb\n\n        // \u4e24\u70b9\u8ddd\u79bb\uff1a abs(x1-x2) + (y1-y2)\n        // 1.                    = (x1 + y1) + -1*(x2 + y2)\n        // 2. x2 - x1 + y1 - y2  = -1*(x1 - y1) + (x2 - y2)\n        // 3. x1 - x2 + y2 - y1  =  (x1-y1) + -1*(x2-y2)\n        // 4. x2 - x1 -y1 + y2   =  -1*(x1+y1) + (x2+y2)\n        List<List<Integer>> dp = new ArrayList<>();\n        // \u8ba1\u7b97 x+y, x-y  //-x+y, -x-y\n        for (int index = 0; index < points.length; ++index) {\n            dp.add(new ArrayList<>(Arrays.asList(points[index][0] + points[index][1],\n                    points[index][0] - points[index][1], index)));\n        }\n\n        // \u5206\u522b\u5bf9x+y\u548cx-y\u6392\u5e8f\n        dp.sort(Comparator.comparingInt(left -> left.get(0)));\n        int add = Math.abs(dp.get(0).get(0) - dp.get(points.length - 1).get(0));\n        int addP1 = dp.get(0).get(2);\n        int addP2 = dp.get(points.length - 1).get(2);\n        \n        dp.sort(Comparator.comparingInt(left -> left.get(1)));\n        int min = Math.abs(dp.get(0).get(1) - dp.get(points.length - 1).get(1));\n        int minP1 = dp.get(0).get(2);\n        int minP2 = dp.get(points.length - 1).get(2);\n        \n        int removeP1;\n        int removeP2;\n        if (add >= min) {\n            removeP1 = addP1;\n            removeP2 = addP2;\n        } else {\n            removeP1 = minP1;\n            removeP2 = minP2;\n        }\n        \n        // \u5206\u522b\u53bb\u6389removeP1\u548cremoveP2\u8ba1\u7b97\n        List<List<Integer>> revPoints = new ArrayList<>();\n        for (int index = 0; index < points.length; ++index) {\n            if (index == removeP1) {\n                continue;\n            }\n            revPoints.add(new ArrayList<>(Arrays.asList(points[index][0], points[index][1])));\n        }\n        int res1 = iter_maxDistance(revPoints);\n        revPoints.clear();\n        for (int index = 0; index < points.length; ++index) {\n            if (index == removeP2) {\n                continue;\n            }\n            revPoints.add(new ArrayList<>(Arrays.asList(points[index][0], points[index][1])));\n        }\n        int res2 = iter_maxDistance(revPoints);\n        return Math.min(res1, res2);\n    }\n\n    public int iter_maxDistance(List<List<Integer>> points) {\n        List<List<Integer>> dp = new ArrayList<>();\n        // \u8ba1\u7b97 x+y, x-y  //-x+y, -x-y\n        for (int index = 0; index < points.size(); ++index) {\n            dp.add(new ArrayList<>(Arrays.asList(points.get(index).get(0) + points.get(index).get(1),\n                    points.get(index).get(0) - points.get(index).get(1), index)));\n        }\n        dp.sort(Comparator.comparingInt(left -> left.get(0)));\n        int add = Math.abs(dp.get(0).get(0) - dp.get(points.size() - 1).get(0));\n        dp.sort(Comparator.comparingInt(left -> left.get(1)));\n        int min = Math.abs(dp.get(0).get(1) - dp.get(points.size() - 1).get(1));\n        return Math.max(add, min);\n    }\n}"
}