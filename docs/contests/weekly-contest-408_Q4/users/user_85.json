{
    "username": "Ivan_len",
    "submission": "class Solution {\npublic:\n    bool canReachCorner(long long X, long Y, vector<vector<int>>& c) {\n        vector<vector<long long>> circles(c.size(), vector<long long>(c[0].size()));\n        for (int i = 0; i < c.size(); i++) {\n            for (int j = 0; j < 3; j++) circles[i][j] = c[i][j];\n        }\n        auto intersect = [&](int i, int j) {\n            // cout << i << ' ' << j << '\\n';\n            long long dist = (circles[i][0] - circles[j][0]) * (circles[i][0] - circles[j][0]);\n            dist += (circles[i][1] - circles[j][1]) * (circles[i][1] - circles[j][1]);\n            // cout << dist <<' ' << (circles[i][2] + circles[j][2]) * (circles[i][2] + circles[j][2]) << '\\n';\n            return dist <= (circles[i][2] + circles[j][2]) * (circles[i][2] + circles[j][2]);\n        };\n        auto cross = [&](int i, long long x, long long y) {\n            long long dist = (circles[i][0] - x) * (circles[i][0] - x);\n            dist += (circles[i][1] - y) * (circles[i][1] - y);\n            return dist <= (circles[i][2]) * (circles[i][2]);\n        };\n        auto intersectup = [&](int i) {\n            if (circles[i][1] > Y) {\n                if (cross(i, 0, Y)) return true;\n            }\n            else if (cross(i, 0, circles[i][1])) return true;\n            if (circles[i][0] > X) {\n                if (cross(i, X, Y)) return true;\n            }\n            else if (cross(i, circles[i][0], Y)) return true;\n            return false;\n        };\n        auto intersectdown = [&](int i) {\n            if (circles[i][1] > Y) {\n                if (cross(i, X, Y)) return true;\n            }\n            else if (cross(i, X, circles[i][1])) return true;\n            if (circles[i][0] > X) {\n                if (cross(i, X, 0)) return true;\n            }\n            else if (cross(i, circles[i][0], 0)) return true;\n            return false;\n        };\n\n        int n = circles.size();\n        vector<int> vis(n, 0);\n        queue<int> q;\n        for (int i = 0; i < n; i++) {\n            if (intersectup(i)) q.push(i);\n        }\n        while (!q.empty()) {\n            int cur = q.front();\n            // cout << cur << '\\n';\n            q.pop();\n            if (vis[cur]) continue;\n            if (intersectdown(cur)) return false;\n            vis[cur] = true;\n            for (int i = 0; i < n; i++) {\n                if (intersect(i, cur) && !vis[i]) q.push(i);\n            }\n        }\n        return true;\n    }\n};",
    "submit_ts": "1722135318",
    "subm_id": "1335697634"
}