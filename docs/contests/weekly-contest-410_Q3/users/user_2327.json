{
    "username": "cjal14",
    "submission": "class Solution {\n    int m = (int)(Math.pow(10,9))+7;\n    Map<String, Integer> comboMap = new HashMap<>();\n\n    private int findValidCombos(int[] nums, int index, int firstStart, int secondStart) {\n        if(index == nums.length) {\n            return 1;\n        }\n\n        StringBuilder sb = new StringBuilder();\n        sb.append(index);\n        sb.append(\"*\");\n        sb.append(firstStart);\n        sb.append(\"*\");\n        sb.append(secondStart);\n        String key = sb.toString();\n\n        if(comboMap.containsKey(key)) {\n            return comboMap.get(key);\n        }\n\n        int res = 0;\n\n        int num = nums[index];\n\n        for(int i = firstStart; i <= num; i++) {\n            int firstArrStart = i;\n            int secondArrStart = num - i;\n\n            if(secondArrStart > secondStart) {\n                // invalid, violates non-increasing\n                continue;\n            }\n\n            res += findValidCombos(nums, index+1, firstArrStart, secondArrStart);\n            res %= m;\n        }\n\n        int retVal = res % m;\n        comboMap.put(key, retVal);\n        return retVal;\n    }\n\n    public int countOfPairs(int[] nums) {\n        // [1 4 5]\n        //\n        // [0 3 5]\n        // [1 1 0]\n\n        int start = nums[0];\n\n        int possibilities = 0;\n\n        // find possible range\n        for(int i = 0; i <= start; i++) {\n            int firstArrStart = i;\n            int secondArrStart = start - i;\n\n            possibilities += findValidCombos(nums, 1, firstArrStart, secondArrStart);\n            possibilities %= m;\n        }\n\n        return possibilities % m;\n    }\n}",
    "submit_ts": "1723346586",
    "subm_id": "1351580821"
}