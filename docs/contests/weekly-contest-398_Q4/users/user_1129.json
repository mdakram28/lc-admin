{
    "username": "Animeshz916",
    "submission": "class Solution {\n\npublic:\n\n    int ways(int k, int c, int jump, bool op1, unordered_map<int,unordered_map<int,unordered_map<int,int>>>& dp) {\n        \nif (dp[c][jump].find(op1)!=dp[c][jump].end()) return dp[c][jump][op1];\n        int ans = 0;\n\n        if (!op1) {\n            ans += ways(k,c-1,jump,true, dp);\n                   //if (k==3 && c==1) cout << ans << \" \" << jump<<endl;\n        }\n\n        if (c+(1<<jump)-1 > k) return dp[c][jump][op1] = (c == k)+ans;\n\n        ans += ways(k, c+(1<<jump), jump+1, false, dp);\n\n        return dp[c][jump][op1] = (c == k) + ans;\n\n    }\n\n    \n\n    int waysToReachStair(int k) {\n\n        // if (k == 0) return 2;\n\n        // if (k == 1) return 4;\n\n        // if (k == 2) return 4;\n\n        // if (k == 3) return 3;  // but we're having 4\n\n        unordered_map<int,unordered_map<int,unordered_map<int,int>>> dp;\n\n        return ways(k, 1, 0, false, dp);\n\n    }\n\n};",
    "submit_ts": 1716090014.0
}