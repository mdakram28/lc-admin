{
    "username": "emayecs",
    "submission": "class Solution:\n    def timeTaken(self, edges: List[List[int]]) -> List[int]:\n        n = len(edges) + 1\n        times = [0] * n\n        root = 0\n        adj = defaultdict(list)\n        for a, b in edges:\n            adj[a].append(b)\n            adj[b].append(a)\n        \n        max_heights = []\n        for _ in range(n):\n            max_heights.append([])\n\n        def h(node, parent):\n            max_height = 0\n            for neighbor in adj[node]:\n                if neighbor == parent:\n                    continue\n                height = 0\n                if neighbor % 2 == 0:\n                    height = 2 + h(neighbor, node)\n                else:\n                    height = 1 + h(neighbor, node)\n                max_height = max(max_height, height)\n                max_heights[node].append((height, neighbor))\n            max_heights[node].sort()\n            return max_height\n\n        h(0, None)\n\n        times[0] = max_heights[0][-1][0]\n\n        def h1(node, parent, dist):\n            times[node] = max(dist, 0 if len(max_heights[node]) == 0 else max_heights[node][-1][0])\n            weight = 2 if node % 2 == 0 else 1\n            for neighbor in adj[node]:\n                dist_t = dist\n                if neighbor == parent:\n                    continue\n                if neighbor == max_heights[node][-1][1]:\n                    # neighbor already has maximum height\n                    if len(max_heights[node]) > 1:\n                        dist_t = max(dist_t, max_heights[node][-2][0])\n                else:\n                    dist_t = max(dist_t, max_heights[node][-1][0])\n                h1(neighbor, node, weight + dist_t)\n\n        h1(0, None, 0)\n\n        return times",
    "submit_ts": "1722700687",
    "subm_id": "1343249608"
}