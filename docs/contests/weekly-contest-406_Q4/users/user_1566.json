{
    "username": "Anish_27",
    "submission": "class Solution {\npublic:\n    long long minimumCost(int m, int n, vector<int>& horizontalCut, vector<int>& verticalCut) {\n        vector<pair<int, char>> arr;\n\n        for(int i=0; i<horizontalCut.size(); i++) \n            arr.push_back({horizontalCut[i], 'H'});\n        for(int j=0; j<verticalCut.size(); j++) \n            arr.push_back({verticalCut[j], 'V'});\n        sort(arr.begin(), arr.end(), [](const pair<int, char>& a, const pair<int, char>& b) {\n            return a.first > b.first;\n        });\n\n        long long horPieces = 1;\n        long long vertPieces = 1;\n        long long cost = 0;\n\n        for (const auto& cut : arr) {\n            if (cut.second == 'H') {\n                cost += cut.first*vertPieces;\n                ++horPieces;\n            } else {\n                cost += cut.first*horPieces;\n                ++vertPieces;\n            }\n        }\n\n        return cost;\n    }\n};",
    "submit_ts": "1720926331",
    "subm_id": "1320283004"
}