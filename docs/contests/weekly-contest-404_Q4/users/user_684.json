{
    "username": "junruiw",
    "submission": "class Solution {\n    int dfs(int u, int fa, vector<int>& d, vector<vector<int>>& E) {\n        int c = u;\n        for (int v : E[u]) {\n            if (v == fa) continue;\n            d[v] = d[u] + 1;\n            int farthest = dfs(v, u, d, E);\n            if (d[farthest] > d[c]) c = farthest;\n        }\n        return c;\n    }\n\n    int diameter(vector<vector<int>>& edges) {\n        int n = edges.size() + 1;\n        vector<int> d(n);\n        vector<vector<int>> E(n);\n        for (auto& e : edges) {\n            E[e[0]].push_back(e[1]);\n            E[e[1]].push_back(e[0]);\n        }\n        int c = dfs(0, -1, d, E);\n        fill(d.begin(), d.end(), 0);\n        d[c] = 0;\n        int farthest = dfs(c, -1, d, E);\n        return d[farthest];\n    }\n\npublic:\n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n        int d1 = diameter(edges1);\n        int d2 = diameter(edges2);\n        \n        int max_d = max(d1, d2);\n        int min_d = min(d1, d2);\n        max_d = max_d/2 + max_d%2;\n        min_d = min_d/2 + min_d%2;\n        if(max_d > min_d + 1)\n            return max(d1, d2);\n        else\n            return max_d+min_d+1;\n    }\n};",
    "submit_ts": "1719718939",
    "subm_id": "1304429802"
}