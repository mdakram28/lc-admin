{
    "username": "ProveMeRight",
    "submission": "#define INF INT32_MAX\nclass Solution {\npublic:\n    \n    \n\nclass SegmentTree {\npublic:\n    vector<int> tree;\n    int size;\n\n    // Constructor\n    SegmentTree(vector<int>& input)\n    {\n        size = input.size();\n        tree.resize(4 * size);\n        build(input, 0, 0, size - 1);\n    }\n\n    // Function to build the Segment Tree\n    void build(vector<int>& input, int node, int start, int end)\n    {\n        if (start == end) {\n            tree[node] = input[start];\n        }\n        else {\n            int mid = (start + end) / 2;\n            build(input, 2 * node + 1, start, mid);\n            build(input, 2 * node + 2, mid + 1, end);\n            tree[node] = tree[2 * node + 1] & tree[2 * node + 2];\n        }\n    }\n\n    // Overloading query function to be used recursively\n    int query(int left, int right)\n    {\n        return query(0, 0, size - 1, left, right);\n    }\n\n    // query function to get bitwise AND of the range\n    int query(int node, int start, int end, int left, int right)\n    {\n        if (right < start || end < left) {\n            return INF;\n        }\n        if (left <= start && end <= right) {\n            return tree[node];\n        }\n        int mid = (start + end) / 2;\n        int p1 = query(2 * node + 1, start, mid, left, right);\n        int p2 = query(2 * node + 2, mid + 1, end, left, right);\n        return p1 & p2;\n    }\n};\n\nint closestAND(vector<int> input, int target)\n{\n    int length = input.size();\n    SegmentTree st(input);\n    int result = INF;\n    for (int i = 0; i < length; i++) {\n        int left = i - 1, right = length - 1, mid;\n        while (right - left > 1) {\n            mid = (left + right) / 2;\n            if (st.query(i, mid) >= target)\n                left = mid;\n            else\n                right = mid;\n        }\n        if (left != i - 1)\n            result = min(result, abs(st.query(i, left) - target));\n        result = min(result, abs(target - st.query(i, right)));\n    }\n    return result;\n}\n    int minimumDifference(vector<int>& nums, int k) {\n        int val = closestAND(nums,k);\n       return val;\n    }\n};",
    "submit_ts": 1717298741.0
}