{
    "username": "Ethan-ZYF",
    "submission": "\nclass Solution:\n    def minimumDiameterAfterMerge(self, edges1: List[List[int]], edges2: List[List[int]]) -> int:\n        def diameter(n, edges):\n            g = defaultdict(list)\n            for u, v in edges:\n                g[u].append(v)\n                g[v].append(u)\n            diam = 0\n\n            def dfs(u, p):\n                nonlocal diam\n                h = []\n                for v in g[u]:\n                    if v == p:\n                        continue\n                    h.append(dfs(v, u))\n                h.sort()\n                if len(h) == 0:\n                    return 1\n                if len(h) == 1:\n                    diam = max(diam, h[0])\n                    return h[0] + 1\n                diam = max(diam, h[-1] + h[-2])\n                return h[-1] + 1\n\n            dfs(0, -1)\n            return diam\n\n        n1 = len(edges1) + 1\n        n2 = len(edges2) + 1\n        diam1 = diameter(n1, edges1)\n        diam2 = diameter(n2, edges2)\n        level1 = (diam1 + 1) // 2\n        level2 = (diam2 + 1) // 2\n        # print(level1, level2)\n        # print(diam1, diam2)\n        return max(level1 + level2 + 1, max(diam1, diam2))",
    "submit_ts": 1719717404.0
}