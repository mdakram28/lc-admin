{
    "username": "U_U",
    "submission": "\nclass Trie\n{\npublic:\n    int Cost;\n    Trie* Arr[27];    \n    \n    Trie()\n    {\n        Cost = INT_MAX;\n        for (int i = 0; i < 27; ++i)\n        {\n            Arr[i] = NULL;\n        }        \n    }\n};\n\nclass Solution {\npublic:\n    int64_t res = LLONG_MAX;\n    Trie root;\n    vector<int> dp;\n    int pos;\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        \n        for (int i = 0; i < words.size(); ++i) \n        {\n            reverse(words[i].begin(), words[i].end());\n            Insert(&root, words[i], 0, costs[i]);\n        }\n        dp = vector<int>(target.size(), INT_MAX);\n\n        string cur = \"\";\n        for (int j = 0; j < target.size(); ++j)\n        {\n            pos = j;\n            cur += target[j];\n            Search(&root, cur, cur.size() - 1);\n            //cout << cur << \",\" << dp[pos] << endl;\n        }\n\n\n        if (dp.back() == INT_MAX) return -1;\n        return dp.back();\n    }\n\n    void Search(Trie* pNode, string& s, int index)\n    {                      \n\n        if (index != -1)\n        {\n        //    cout << \"Search,\" << index << \",\" << s[index] << \",\" << pNode->Cost << \",\" << pNode << endl;\n        }\n        if (pNode->Cost != INT_MAX)\n        {\n            if (index >= 0)\n            {\n                if (dp[index] != INT_MAX)\n                {\n                    dp[pos] = min(dp[pos], dp[index] + pNode->Cost);\n                }\n            }\n            else\n            {                \n                dp[pos] = min(dp[pos], pNode->Cost);\n            }\n        }\n        if (index < 0) return;\n        \n        int charIndex = 0;\n        if (s[index] >= 'a' && s[index] <= 'z')\n        {\n           charIndex = s[index] - 'a';\n        }\n        else if (s[index] == ' ')\n        {\n          charIndex = 26;\n        }\n        else return;\n                    \n        if (pNode->Arr[charIndex] == NULL) return;\n                \n        Search(pNode->Arr[charIndex], s, index - 1);\n    }\n\n    void Insert(Trie* pNode, string& s, int index, int cost)\n    {                        \n        if (index == s.size())\n        {                        \n            pNode->Cost = min(pNode->Cost, cost);        \n            return;\n        }\n        \n        int charIndex = 0;\n        if (s[index] >= 'a' && s[index] <= 'z')\n        {\n            charIndex = s[index] - 'a';\n        }\n        else if (s[index] == ' ')\n        {\n            charIndex = 26;\n        }\n        else return;\n        \n        if (pNode->Arr[charIndex] == NULL)\n        {\n            pNode->Arr[charIndex] = new Trie();\n        }\n        \n        Insert(pNode->Arr[charIndex], s, index + 1, cost);\n    }\n};",
    "submit_ts": "1720321705",
    "subm_id": "1312330103"
}