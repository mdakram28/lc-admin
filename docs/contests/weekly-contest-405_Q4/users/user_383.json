{
    "username": "hemanth00405",
    "submission": "class TrieNode:\n    def __init__(self):\n        self.children = {}\n        self.cost = float('inf')\n        self.is_word = False\n\nclass Trie:\n    def __init__(self):\n        self.root = TrieNode()\n\n    def insert(self, word: str, cost: int):\n        node = self.root\n        for char in word:\n            if char not in node.children:\n                node.children[char] = TrieNode()\n            node = node.children[char]\n        node.is_word = True\n        node.cost = min(node.cost, cost)  # Ensure the minimum cost is stored\n\n    def search(self, target: str, start: int) -> List[Tuple[int, int]]:\n        node = self.root\n        matches = []\n        for i in range(start, len(target)):\n            if target[i] not in node.children:\n                break\n            node = node.children[target[i]]\n            if node.is_word:\n                matches.append((i + 1, node.cost))  # (end_index, cost)\n        return matches\n\nclass Solution:\n    def minimumCost(self, target: str, words: List[str], costs: List[int]) -> int:\n        n = len(target)\n        dp = [float('inf')] * (n + 1)\n        dp[0] = 0\n\n        # Build the Trie\n        trie = Trie()\n        for word, cost in zip(words, costs):\n            trie.insert(word, cost)\n        \n        # DP Transition using Trie\n        for i in range(n):\n            if dp[i] == float('inf'):\n                continue\n            matches = trie.search(target, i)\n            for end_index, cost in matches:\n                dp[end_index] = min(dp[end_index], dp[i] + cost)\n        \n        return dp[n] if dp[n] != float('inf') else -1",
    "submit_ts": "1720320663",
    "subm_id": "1312301054"
}