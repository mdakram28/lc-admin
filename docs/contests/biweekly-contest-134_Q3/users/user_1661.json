{
    "username": "horiseun",
    "submission": "class Solution {\npublic:\n  struct Node {\n    int l, r, lv, rv;\n    bool alternating;\n    Node *lft, *rht;\n    Node(int tl, int tr, vector<int> &v): l(tl), r(tr), lv(0), rv(0), alternating(false) {\n      if (l + 1 != r) {\n        lft = new Node(l, (l + r) / 2, v);\n        rht = new Node((l + r) / 2, r, v);\n        if (lft->rv != rht->lv) {\n          alternating = lft->alternating & rht->alternating;\n        }\n        lv = lft->lv;\n        rv = rht->rv;\n      } else {\n        lft = rht = NULL;\n        lv = rv = v[l];\n        alternating = true;\n      }\n    }\n  };\n  \n  bool query(Node *x, int l, int r) {\n    if (r <= x->l || x->r <= l) {\n      return true;\n    }\n    if (l <= x->l && x->r <= r) {\n      return x->alternating;\n    }\n    bool lret = query(x->lft, l, r), rret = query(x->rht, l, r);\n    if (lret & rret) {\n      if (r <= x->lft->l || x->lft->r <= l) {\n        return rret;\n      }\n      if (r <= x->rht->l || x->rht->r <= l) {\n        return lret;\n      }\n      if (x->lft->rv != x->rht->lv) {\n        return true;\n      }\n      return false;\n    }\n    return false;\n  }\n  \n  int numberOfAlternatingGroups(vector<int>& colours, int k) {\n    for (int i = 0; i < k - 1; i++) {\n      colours.push_back(colours[i]);\n    }\n    Node *root = new Node(0, colours.size(), colours);\n    int ans = 0;\n    for (int i = k - 1; i < colours.size(); i++) {\n      ans += query(root, i - k + 1, i + 1);\n    }\n    return ans;\n  }\n};",
    "submit_ts": "1720276946",
    "subm_id": "1311640409"
}