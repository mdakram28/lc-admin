{
    "username": "jzz2002",
    "submission": "template<class Info, class Tag>\nstruct LazySegmentTree {\n\tint n;\n\tstd::vector<Info> info;\n\tstd::vector<Tag> tag;\n\tLazySegmentTree() : n(0) {}\n\tLazySegmentTree(int n_, Info v_ = Info()) {\n\t\tinit(n_, v_);\n\t}\n\ttemplate<class T>\n\tLazySegmentTree(std::vector<T> init_) {\n\t\tinit(init_);\n\t}\n\tvoid init(int n_, Info v_ = Info()) {\n\t\tinit(std::vector(n_ + 1, v_));\n\t}\n\ttemplate<class T>\n\tvoid init(std::vector<T> init_) {\n\t\tn = init_.size() - 1;\n\t\tinfo.assign(4 << std::__lg(n + 1), Info());\n\t\ttag.assign(4 << std::__lg(n + 1), Tag());\n\t\tauto build = [&](auto build, int u, int l, int r) -> void {\n\t\t\tif (l == r) {\n\t\t\t\tinfo[u] = {init_[l]};\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tint mid = l + r >> 1;\n\t\t\tbuild(build, u << 1, l, mid);\n\t\t\tbuild(build, u << 1 | 1, mid + 1, r);\n\t\t\tpushup(u);\n\t\t};\n\t\tbuild(build, 1, 0, n);\n\t}\n\tvoid pushup(int u) {\n\t\tinfo[u] = info[u << 1] + info[u << 1 | 1];\n\t}\n\tvoid apply(int u, const Tag &v) {\n\t\tinfo[u].apply(v);\n\t\ttag[u].apply(v);\n\t}\n\tvoid pushdown(int u) {\n\t\tapply(u << 1, tag[u]);\n\t\tapply(u << 1 | 1, tag[u]);\n\t\ttag[u] = Tag();\n\t}\n\tvoid modify(int u, int l, int r, int x, const Info &v) {\n\t\tif (l == r) {\n\t\t\tinfo[u] = v;\n\t\t\treturn;\n\t\t}\n\t\tint mid = l + r >> 1;\n\t\tpushdown(u);\n\t\tif (x <= mid) {\n\t\t\tmodify(u << 1, l, mid, x, v);\n\t\t} else {\n\t\t\tmodify(u << 1 | 1, mid + 1, r, x, v);\n\t\t}\n\t\tpushup(u);\n\t}\n\tvoid modify(int p, const Info &v) {\n\t\tmodify(1, 0, n, p, v);\n\t}\n\tvoid rangeApply(int u, int l, int r, int x, int y, const Tag &v) {\n\t\tif (r < x || l > y) {\n\t\t\treturn;\n\t\t}\n\t\tif (l >= x && r <= y) {\n\t\t\tapply(u, v);\n\t\t\treturn;\n\t\t}\n\t\tint mid = l + r >> 1;\n\t\tpushdown(u);\n\t\trangeApply(u << 1, l, mid, x, y, v);\n\t\trangeApply(u << 1 | 1, mid + 1, r, x, y, v);\n\t\tpushup(u);\n\t}\n\tvoid Apply(int p, const Tag &v) {\n\t\trangeApply(1, 0, n, p, p, v);\n\t}\n\tvoid rangeApply(int l, int r, const Tag &v) {\n\t\trangeApply(1, 0, n, l, r, v);\n\t}\n\tInfo rangeQuery(int u, int l, int r, int x, int y) {\n\t\tif (r < x || l > y) {\n\t\t\treturn Info();\n\t\t}\n\t\tif (x <= l && r <= y) {\n\t\t\treturn info[u];\n\t\t}\n\t\tint mid = l + r >> 1;\n\t\tpushdown(u);\n\t\tif (y <= mid) {\n\t\t\treturn rangeQuery(u << 1, l, mid, x, y);\n\t\t} else if (x > mid) {\n\t\t\treturn rangeQuery(u << 1 | 1, mid + 1, r, x, y);\n\t\t}\n\t\tauto left = rangeQuery(u << 1, l, mid, x, y);\n\t\tauto right = rangeQuery(u << 1 | 1, mid + 1, r, x, y);\n\t\treturn left + right;\n\t}\n\tInfo Query(int p) {\n\t\treturn rangeQuery(1, 0, n, p, p);\n\t}\n\tInfo rangeQuery(int l, int r) {\n\t\treturn rangeQuery(1, 0, n, l, r);\n\t}\n};\n\nstruct Tag {\n\t\n\tvoid apply(const Tag &t) {\n\t\t\n\t}\n};\n\nstruct Info {\n\tint x = 0;\n\tvoid apply(const Tag &t) {\n\t\t\n\t}\n};\n\nInfo operator+(const Info &a, const Info &b) {\n\treturn {max(a.x, b.x)};\n}\nclass Solution {\npublic:\n    vector<bool> getResults(vector<vector<int>>& queries) {\n        set<int> pos;\n        pos.insert(0);\n        pos.insert(1e9);\n        int N = min((int)5e4, 3 * (int)queries.size());\n        LazySegmentTree<Info, Tag> tr(N + 1);\n        vector<bool> ans;\n        for (auto V : queries) {\n            if (V.size() == 2) {\n                int x = V[1];\n                pos.insert(x);\n                auto pre = *--pos.lower_bound(x);\n                tr.modify(x, {x - pre});\n             //   cout << \"zzzzzzzzzz  \" << x << \" \" << x - pre - 1 << endl;\n                auto suf = *pos.upper_bound(x);\n                if (suf != 1e9) {\n                    tr.modify(suf, {suf - x});\n                //    cout << \"xxxxxxxxxxxx \" << suf << \" \" << suf - x - 1 << endl;\n                }\n            } else {\n                int x = V[1], sz = V[2];\n                int mx = tr.rangeQuery(0, x).x;\n                if (pos.find(x) == pos.end()) {\n                    auto pre = *--pos.lower_bound(x);\n                    mx = max(mx, x - pre);\n                }\n             //   cout << \"mx = \" << mx << \"   \" << \"sz = \" << sz << endl;\n                ans.push_back(mx >= sz);\n            }\n        }\n     //   cout << endl << endl;\n        return ans;\n    }\n};",
    "submit_ts": 1716649279.0
}