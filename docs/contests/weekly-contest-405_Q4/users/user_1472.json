{
    "username": "shubhamphpefy",
    "submission": "class TrieNode {\npublic:\n    vector<TrieNode*> children;\n    int minCost;\n    \n    TrieNode() : children(26, nullptr), minCost(INT_MAX) {}\n};\n\nclass Solution {\nprivate:\n    TrieNode* buildTrie(vector<string>& words, vector<int>& costs) {\n        TrieNode* root = new TrieNode();\n        for (int i = 0; i < words.size(); i++) {\n            TrieNode* node = root;\n            for (char c : words[i]) {\n                if (!node->children[c - 'a']) {\n                    node->children[c - 'a'] = new TrieNode();\n                }\n                node = node->children[c - 'a'];\n            }\n            node->minCost = min(node->minCost, costs[i]);\n        }\n        return root;\n    }\n\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int n = target.length();\n        vector<long long> dp(n + 1, LLONG_MAX);\n        dp[0] = 0;\n        \n        TrieNode* root = buildTrie(words, costs);\n        \n        for (int i = 0; i < n; i++) {\n            if (dp[i] == LLONG_MAX) continue;\n            \n            TrieNode* node = root;\n            for (int j = i; j < n; j++) {\n                if (!node->children[target[j] - 'a']) break;\n                node = node->children[target[j] - 'a'];\n                if (node->minCost != INT_MAX) {\n                    if (dp[i] + node->minCost < dp[j + 1]) {\n                        dp[j + 1] = dp[i] + node->minCost;\n                    }\n                }\n            }\n        }\n        \n        return dp[n] == LLONG_MAX ? -1 : (int)dp[n];\n    }\n};",
    "submit_ts": "1720323390",
    "subm_id": "1312374354"
}