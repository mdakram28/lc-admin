{
    "username": "AndreasHzz",
    "submission": "class Solution {\n    HashMap<Integer, HashMap<Integer, Integer>> memo = new HashMap<>();\n    HashMap<Integer,List<Integer>> map = new HashMap<>();\n    HashMap<Integer,Integer> parent = new HashMap<>();\n    int[] res;\n    public int[] timeTaken(int[][] edges) {\n        res = new int[edges.length+1];\n        for(int[] e:edges){\n            int r = e[0];\n            int l = e[1];\n            if(!map.containsKey(r))map.put(r, new ArrayList<>());\n            if(!map.containsKey(l))map.put(l, new ArrayList<>());\n            map.get(r).add(l);\n            map.get(l).add(r);\n        }\n        \n       \n        helper(0, -1);\n         //System.out.println(parent);\n        helper2(0);\n        return res;\n    }\n\n    public int helper(int root, int prev){\n        List<Integer> list = map.get(root);\n        parent.put(root, prev);\n        int max = -1;\n        int maxId = -1;\n        int secondMax = -1;\n        int secondMaxId = -1;\n        for(int n:list){\n            if(n!=prev){\n                if(n%2==0){\n                    int val = 2;\n                    val+=helper(n, root);\n                    if(val>=max){\n                        secondMax = max;\n                        secondMaxId = maxId;\n                        max=val;\n                        maxId = n;\n                    }else if(val>=secondMax){\n                        secondMax = val;\n                        secondMaxId = n;\n                    }\n                }else{\n                    int val = 1;\n                    val+=helper(n, root);\n                    //System.out.println(helper(n, root));\n                    if(val>=max){\n                        secondMax = max;\n                        secondMaxId = maxId;\n                        max=val;\n                        maxId = n;\n                    }else if(val>=secondMax){\n                        secondMax = val;\n                        secondMaxId = n;\n                    }\n                }\n            }\n        }\n        if(!memo.containsKey(root))memo.put(root, new HashMap<>());\n        if(maxId!=-1)memo.get(root).put(maxId, max);\n        if(secondMaxId!=-1)memo.get(root).put(secondMaxId, secondMax);\n        if(max==-1)return 0;\n        return max;\n    }\n\n    public void helper2(int root){\n        \n        int max = 0;\n        int p = parent.getOrDefault(root,-1);\n        int pmax = 0;\n        //if(root==1)System.out.println(p);\n        if(p!=-1){\n            //find max of parent\n            int val = p%2==0?2:1;\n            max = Math.max(val,max);\n            for(int n:memo.get(p).keySet()){\n                if(n!=root){\n                    max=Math.max(max, val+memo.get(p).get(n));\n                    \n                }\n            }\n            pmax = max;\n        }\n        memo.get(root).put(p, pmax);\n        if(root==2)System.out.println(p);\n        for(int n:map.get(root)){\n            if(n==p)continue;\n            max = Math.max(max, memo.get(root).getOrDefault(n,-1));\n            helper2(n);\n        }\n        \n        res[root]=max;\n        \n    }\n}",
    "submit_ts": "1722700768",
    "subm_id": "1343252359"
}