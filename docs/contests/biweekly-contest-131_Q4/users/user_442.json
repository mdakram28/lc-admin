{
    "username": "txingml",
    "submission": "const int block = 224;\nint state[block], ma[block];\nint val[block * block];\nclass Solution {\npublic:\n    vector<bool> getResults(vector<vector<int>>& queries) {\n        for (int i = 0; i < block; i++) {\n            state[i] = i*block;\n            ma[i] = i*block + block - 1;\n        }\n        int m = queries.size();\n        vector<bool> ret;\n        ret.reserve(m);\n        set<int> obs;\n        obs.insert(block*block-1);\n        for (const auto& q : queries) {\n            int x = q[1];\n            // cout << val[9] << endl;\n            // cout << q[0] << ' ' << q[1] << endl;\n            if (q[0] == 1) {\n                auto it = obs.insert(x).first;\n                // cout << \"hello\" << endl;\n                // cout << *it << endl;\n                int y = *next(it) + 1;\n                x++;\n                int a = x/block;\n                int tmp = 1;\n                if (x % block != 0) {\n                    if (state[a] != -1) {\n                        for (int i = 0; i < block; i++) {\n                            val[a*block + i] = state[a] + i;\n                        }\n                        state[a] = -1;\n                    }\n                    // cout << \"a\" <<endl;\n                    while (x < y && x % block != 0) {\n                        val[x] = tmp;\n                        // cout << x << ' ' << val[x] << endl;\n                        x++;\n                        tmp++;\n                    }\n                    // cout << \"b\" << endl;\n                    ma[a] = -1;\n                    for (int i = 0; i < block; i++) {\n                        ma[a] = max(val[a*block+i], ma[a]);\n                    }\n                }\n                if (x == y) continue;\n                while (x+block <= y) {\n                    state[x/block] = tmp;\n                    ma[x/block] = tmp + block - 1;\n                    tmp += block;\n                    x += block;\n                }\n                if (x == y) continue;\n                int b = x / block;\n                if (state[b] != -1) {\n                    for (int i = 0; i < block; i++) {\n                        val[b * block + i] = state[b] + i;\n                    }\n                    state[b] = -1;\n                }\n                while (x < y) {\n                    val[x] = tmp;\n                    x++;\n                    tmp++;\n                }\n                ma[b] = -1;\n                for (int i = 0; i < block; i++) {\n                    ma[b] = max(val[b*block+i], ma[b]);\n                } \n                \n            } else {\n                int sz = q[2];\n                if (sz > x) {\n                    ret.push_back(false);\n                    continue;\n                }\n                x++;\n                int i = 0;\n                int tmp = 0;\n                while (i + block <= x && tmp < sz) {\n                    tmp = max(tmp, ma[i/block]);\n                    i += block;\n                }\n                if (i != x) {\n                    if (state[i/block] == -1) {\n                        for (; i < x && tmp < sz; i++) {\n                            // cout << i << ' ' << val[i] << endl;\n                            tmp = max(tmp, val[i]);\n                        }\n                    } else {\n                        tmp = max(tmp, state[i/block] + (x-1) % block);\n                    }\n\n                }\n\n                ret.push_back(sz <= tmp);\n            }\n        }\n        return ret;\n        \n        \n    }\n};",
    "submit_ts": 1716652453.0
}