{
    "username": "goelharshit",
    "submission": "import java.util.Arrays;\n\nclass Solution {\n    class TrieNode {\n        TrieNode[] children = new TrieNode[26];\n        int cost = Integer.MAX_VALUE;\n    }\n\n    private TrieNode root;\n\n    public Solution() {\n        root = new TrieNode();\n    }\n\n    private void insert(String word, int cost) {\n        TrieNode node = root;\n        for (char c : word.toCharArray()) {\n            if (node.children[c - 'a'] == null) {\n                node.children[c - 'a'] = new TrieNode();\n            }\n            node = node.children[c - 'a'];\n        }\n        node.cost = Math.min(node.cost, cost);\n    }\n\n    public int minimumCost(String target, String[] words, int[] costs) {\n        int n = target.length();\n        int[] dp = new int[n + 1];\n        Arrays.fill(dp, Integer.MAX_VALUE);\n        dp[0] = 0; \n\n        for (int i = 0; i < words.length; i++) {\n            insert(words[i], costs[i]);\n        }\n\n        for (int i = 0; i < n; i++) {\n            if (dp[i] == Integer.MAX_VALUE) continue; \n\n            TrieNode node = root;\n            for (int j = i; j < n; j++) {\n                char c = target.charAt(j);\n                if (node.children[c - 'a'] == null) break;  \n                node = node.children[c - 'a'];\n                if (node.cost != Integer.MAX_VALUE) {\n                    dp[j + 1] = Math.min(dp[j + 1], dp[i] + node.cost);\n                }\n            }\n        }\n\n        return dp[n] == Integer.MAX_VALUE ? -1 : dp[n];\n    }\n}\n",
    "submit_ts": "1720320739",
    "subm_id": "1312303227"
}