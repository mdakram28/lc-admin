{
    "username": "aryansingh027",
    "submission": "#include <unordered_map>\n#include <vector>\n\nclass Solution {\npublic:\n    long long recursion(int ind, int cnt, std::unordered_map<int, int>& map, std::vector<std::vector<long long>>& dp, long long mod) {\n        if (ind == 0) {\n            if (cnt == 0) {\n                return 1;\n            } else {\n                return 0;\n            }\n        }\n        if (dp[ind][cnt] != -1) {\n            return dp[ind][cnt];\n        }\n        long long count = 0;\n        if (map.count(ind - 1)) {\n            int val = map[ind - 1];\n            for (int num = 0; num <= ind; num++) {\n                int contri = ind - num;\n                if (cnt >= contri) {\n                    int reqCnt = cnt - contri;\n                    if (reqCnt == val) {\n                        count += recursion(ind - 1, reqCnt, map, dp, mod);\n                        count %= mod;\n                    }\n                }\n            }\n        } else {\n            for (int num = 0; num <= ind; num++) {\n                int contri = ind - num;\n                if (cnt >= contri) {\n                    int reqCnt = cnt - contri;\n                    count += recursion(ind - 1, reqCnt, map, dp, mod);\n                    count %= mod;\n                }\n            }\n        }\n        return dp[ind][cnt] = count;\n    }\n\n    int numberOfPermutations(int n, std::vector<std::vector<int>>& req) {\n        long long mod = 1e9 + 7;\n        std::unordered_map<int, int> map;\n        int m = req.size();\n        for (int i = 0; i < m; i++) {\n            int end = req[i][0];\n            int cnt = req[i][1];\n            map[end] = cnt;\n        }\n        std::vector<std::vector<long long>> dp(n, std::vector<long long>(401, -1));\n        int ind = n - 1;\n        int cnt = map[n - 1];\n        return static_cast<int>(recursion(ind, cnt, map, dp, mod));\n    }\n};",
    "submit_ts": 1719071945.0
}