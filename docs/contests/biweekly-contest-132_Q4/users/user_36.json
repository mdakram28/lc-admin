{
    "username": "Rhacoal",
    "submission": "class Solution {\npublic:\n    int maximumLength(vector<int>& nums, int k) {\n        // i indices, end at j, max length\n        // int dp[51][5001]{};\n        map<int, int> m[51]; // value -> max length\n        set<pair<int, int>> s[51]; // max length -> value\n        auto update = [&](int i, int key, int value) {\n            if (auto it = m[i].find(key); it == m[i].end()) {\n                m[i].emplace(key, value);\n                s[i].emplace(value, key);\n            } else {\n                s[i].erase(make_pair(it->second, it->first));\n                it->second = value;\n                s[i].emplace(it->second, it->first);\n            }\n        };\n        update(0, nums[0], 1);\n        for (int r = 1; r < nums.size(); ++r) {\n            // indices with same value: keep i\n            // else: i + 1\n            for (int i = min(k, r); i >= 0; --i) {\n                // 1. no add\n                int len = 1;\n                if (auto it = m[i].find(nums[r]); it != m[i].end()) {\n                    // yes\n                    len = it->second + 1;\n                }\n                // 2. add\n                if (i > 0) {\n                    int prev_len = [&]() {\n                        if (!s[i - 1].empty()) {\n                            auto it = prev(s[i - 1].end());\n                            if (it->second != nums[r]) {\n                                return it->first;\n                            }\n                            if (it == s[i - 1].begin()) {\n                                return 0;\n                            }\n                            it = prev(it);\n                            return it->first;\n                        }\n                        return 0;\n                    }();\n                    len = max(len, prev_len + 1);\n                }\n                update(i, nums[r], len);\n            }\n        }\n        int ret = 1;\n        for (int i = 0; i <= k; ++i) {\n            if (!s[i].empty()) {\n                ret = max(ret, prev(s[i].end())->first);\n            }\n        }\n        return ret;\n    }\n};",
    "submit_ts": 1717858828.0
}