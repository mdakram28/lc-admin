{
    "username": "yashgandhi156",
    "submission": "class Solution {\npublic:\n    int numberOfAlternatingGroups(vector<int>& colors, int k) {\n    int n = colors.size();\n    if (n < k) return 0;\n\n    int count = 0;\n    int altCount = 1;  // Number of alternating tiles in current window\n\n    // Initialize the alternating count for the first k-1 elements\n    for (int i = 1; i < k; ++i) {\n        if (colors[i] != colors[i - 1]) {\n            ++altCount;\n        } else {\n            altCount = 1;\n        }\n    }\n\n    // Check the initial window\n    if (altCount == k) {\n        ++count;\n    }\n\n    // Use a sliding window to check the rest of the array\n    for (int i = k; i < n + k - 1; ++i) {\n        // Check if the new element maintains the alternating pattern\n        if (colors[i % n] != colors[(i - 1) % n]) {\n            ++altCount;\n        } else {\n            altCount = 1;\n        }\n\n        // Check if we have a valid alternating window\n        if (altCount >= k) {\n            ++count;\n        }\n    }\n\n    return count;\n        \n    }\n};",
    "submit_ts": "1720278561",
    "subm_id": "1311714484"
}