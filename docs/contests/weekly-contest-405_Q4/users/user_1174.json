{
    "username": "swapniltyagi17",
    "submission": "class node {\npublic:\n    vector<node*> child;\n    int value;\n    bool terminal;\n\n    node() : child(26, nullptr) {\n        value = 1e9;\n        terminal = false;\n    }\n};\n\nclass TrieTree {\npublic:\n    node* root;\n\n    TrieTree() {\n        root = new node();\n    }\n\n    void addWord(const string& word, int cost) {\n        node* n = root;\n        for (char c : word) {\n            if (!n->child[c - 'a'])  n->child[c - 'a'] = new node();\n            n = n->child[c - 'a'];\n        }\n        n->value = min(cost, n->value);\n        n->terminal = true;\n    }\n\n    node* getRoot() {\n        return root;\n    }\n};\n\nclass Solution {\n\n    void fn(vector<int> &dp, TrieTree &t, string &target, int n){\n\n        dp[0] = 0;\n        for (int i = 0; i < n; ++i) {\n            if (dp[i] == 1e9) continue;\n            node* no = t.getRoot();\n            for (int j = i; j < n; ++j) {\n                char c = target[j];\n                if (!no->child[c - 'a']) break;\n                no = no->child[c - 'a'];\n                if (no->terminal) {\n                    dp[j + 1] = min(dp[j + 1], dp[i] + no->value);\n                }\n            }\n        }\n    }\n\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int n = target.size();\n        vector<int> dp(n + 1, 1e9);\n        TrieTree t;\n\n        for (int i = 0; i < words.size(); ++i) t.addWord(words[i], costs[i]);\n        \n        fn(dp,t,target,n);\n\n        if(dp[n]!=1e9) return dp[n];\n        return -1;\n    }\n};",
    "submit_ts": "1720322718",
    "subm_id": "1312357297"
}