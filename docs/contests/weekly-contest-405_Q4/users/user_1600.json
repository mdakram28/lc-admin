{
    "username": "deepatiwari048",
    "submission": "#include <vector>\n#include <string>\n#include <climits>\n#include <unordered_map>\n#include <algorithm>\n\nusing namespace std;\n\nclass TrieNode {\npublic:\n    unordered_map<char, TrieNode*> children;\n    int cost;\n    \n    TrieNode() : cost(-1) {}\n};\n\nclass Trie {\npublic:\n    TrieNode* root;\n\n    Trie() {\n        root = new TrieNode();\n    }\n\n    void insert(const string &word, int cost) {\n        TrieNode* node = root;\n        for (char c : word) {\n            if (!node->children[c]) {\n                node->children[c] = new TrieNode();\n            }\n            node = node->children[c];\n        }\n        node->cost = node->cost == -1 ? cost : min(node->cost, cost);\n    }\n\n    int getCost(const string &word) {\n        TrieNode* node = root;\n        for (char c : word) {\n            if (!node->children[c]) {\n                return -1;\n            }\n            node = node->children[c];\n        }\n        return node->cost;\n    }\n\n    TrieNode* getRoot() {\n        return root;\n    }\n};\n\nclass Solution {\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        Trie trie;\n        int n = target.size();\n        for (int i = 0; i < words.size(); i++) {\n            trie.insert(words[i], costs[i]);\n        }\n\n        vector<int> dp(n + 1, INT_MAX);\n        dp[0] = 0;\n\n        for (int i = 0; i < n; i++) {\n            if (dp[i] == INT_MAX) continue;\n            TrieNode* node = trie.getRoot();\n            for (int j = i; j < n; j++) {\n                if (!node->children.count(target[j])) break;\n                node = node->children[target[j]];\n                if (node->cost != -1) {\n                    dp[j + 1] = min(dp[j + 1], dp[i] + node->cost);\n                }\n            }\n        }\n\n        return dp[n] == INT_MAX ? -1 : dp[n];\n    }\n};\n",
    "submit_ts": "1720323652",
    "subm_id": "1312380775"
}