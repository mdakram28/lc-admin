{
    "username": "tiger212",
    "submission": "class Solution {\n    vector<int> st;\n    // Segment Tree \n    // `t[root]` contains stats of range [l, r]\n    // `i` is in the range [l, r]\n    void update(int idx, int l, int r, int i, int val) {\n        if (l == r) {\n            st[idx] = val;\n            return;\n        }\n        int m = (l + r) / 2;\n        if (i <= m)\n            update(idx << 1, l, m, i, val);\n        else\n            update(2 * idx + 1, m + 1, r, i, val);\n        st[idx] = st[idx << 1] + st[2 * idx + 1];\n    }\n    int query(int idx, int l, int r, int ql, int qr) { // query range [ql,qr]\n        if (l == ql && r == qr)\n            return st[idx];\n        int m = (l + r) / 2;\n        if (qr <= m)  {\n            return query(idx * 2, l, m, ql, qr);\n        }\n        else if (ql > m) {\n            return query(idx * 2 +1, m + 1, r, ql, qr);\n        }\n        else {\n            return query(idx * 2, l, m, ql, m) + query(idx * 2 + 1, m+1, r, m+1, qr);\n        }\n    }\npublic:\n    vector<int> countOfPeaks(vector<int>& nums, vector<vector<int>>& queries) {\n        int n = nums.size();\n        st.assign(2 << (32 - __builtin_clz(n)), 0);\n        for (int i = 1; i < n - 1; ++i) {\n            if (nums[i] > nums[i-1] && nums[i] > nums[i+1])\n                update(1, 0, n-1, i, 1);\n        }\n        vector<int> ret;\n        for (auto& q: queries) {\n            if (q[0] == 1) {\n                int tmp = query(1, 0, n-1, q[1], q[2]);\n                if (q[1] > 0 && q[1] < n-1 && nums[q[1]] > nums[q[1]-1] && nums[q[1]] > nums[q[1]+1])\n                    --tmp;\n                if (q[2] > 0 && q[2] < n-1 && nums[q[2]] > nums[q[2]-1] && nums[q[2]] > nums[q[2]+1])\n                    --tmp;\n                tmp = max(tmp, 0);\n                ret.push_back(tmp);\n            }\n            else {\n                nums[q[1]] = q[2];\n                for (int i = q[1] - 1; i < q[1] + 2; ++i) {\n                    if (i <= 0 || i >= n-1) continue;\n                    if (i > 0 && i < n-1 && nums[i] > nums[i-1] && nums[i] > nums[i+1])\n                        update(1, 0, n-1, i, 1);\n                    else\n                        update(1, 0, n-1, i, 0);\n                }\n            }\n        }\n        return ret;\n    }\n};",
    "submit_ts": "1718507638",
    "subm_id": "539782574"
}