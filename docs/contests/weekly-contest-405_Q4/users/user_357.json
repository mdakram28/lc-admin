{
    "username": "xianglaniunan",
    "submission": "class Solution {\n    int INF = Integer.MAX_VALUE / 2;\n    public int minimumCost(String target, String[] words, int[] costs) {\n        TreeMap<String, Integer> map = new TreeMap<>();\n        int m = words.length;\n        Trie root = new Trie();\n        for(int i = 0; i < m; i++)\n        {\n            map.put(words[i], Math.min(map.getOrDefault(words[i], costs[i]), costs[i]));\n            root.insert(words[i], costs[i]);\n        }\n        int n = target.length();\n        int[] dp = new int[n + 1];\n        Arrays.fill(dp, INF);\n        dp[0] = 0;\n        Queue<Trie> q = new LinkedList<>();\n        for(int i = 0; i < n; i++)\n        {\n            int c = target.charAt(i) - 'a';\n            q.offer(root);\n            int size = q.size();\n            while(size-- > 0)\n            {\n                Trie node = q.poll();\n                if(node.child[c] != null)\n                {\n                    node = node.child[c];\n                    if(node.weight >= 0)\n                    {\n                        dp[i + 1] = Math.min(dp[i + 1], dp[i + 1 - node.depth] + node.weight);\n                    }\n                    q.offer(node);\n                }\n            }\n        }\n        \n        // for(int i = 0; i < n; i++)\n        // {\n        //     for(String s : map.keySet())\n        //     {\n        //         int len = s.length();\n        //         if(same(target, i, s))\n        //         {\n        //             // System.out.printf(\"dp[i+1-len]=%d\\n\", dp[i + 1 - len] );\n        //             dp[i + 1] = Math.min(dp[i + 1], dp[i + 1 - len] + map.get(s));\n        //         }\n        //     }\n        // }\n        // System.out.println(Arrays.toString(dp));\n        return dp[n] == INF ? -1 : dp[n];\n    }\n    \n    class Trie\n    {\n        Trie[] child = new Trie[26];\n        int INF = Integer.MAX_VALUE / 2;\n        int weight = -1;\n        int depth = 0;\n        \n        void insert(String str, int w)\n        {\n            Trie root = this;\n            for(char c : str.toCharArray())\n            {\n                if(root.child[c - 'a'] == null) root.child[c - 'a'] = new Trie();\n                root = root.child[c - 'a'];\n            }\n            if(root.weight < 0) root.weight = w;\n            else root.weight = Math.min(root.weight, w);\n            root.depth = str.length();\n        }\n    }\n    \n    boolean same(String target, int pos, String suffix)\n    {\n        int len = suffix.length();\n        \n        if(len > pos + 1) return false;\n        // System.out.printf(\"[same][target=%s][pos=%d][suffix=%s]\\n\", target, pos, suffix);\n        for(int i = len - 1; i >= 0; i--)\n        {\n            if(target.charAt(pos) != suffix.charAt(i))\n            {\n                return false;\n            }\n            pos--;\n        }\n        return true;\n    }\n}",
    "submit_ts": "1720321620",
    "subm_id": "1312327741"
}