{
    "username": "glas15",
    "submission": "#define all(v) v.begin(), v.end()\n\nclass Solution {\npublic:\n    vector<int> maxD(vector<vector<int>>& p) {\n        int n = p.size();\n        vector<pair<int, int>> s(n), d(n);\n        for (int i = 0; i < n; i++) {\n            s[i] = {p[i][0] + p[i][1], i};\n            d[i] = {p[i][0] - p[i][1], i};\n        }\n        sort(all(s));\n        sort(all(d));\n        int a = s.back().first - s.front().first;\n        int b = d.back().first - d.front().first;\n        if (a > b) {\n            return { a, s.front().second, s.back().second };\n        } else { \n            return { b, d.front().second, d.back().second };\n        }\n    }\n    int minimumDistance(vector<vector<int>>& p) {\n        vector<int> mxD = maxD(p);\n        \n        vector<vector<int>> p1(all(p)), p2(all(p));\n        p1.erase(p1.begin() + mxD[1]);\n        p2.erase(p2.begin() + mxD[2]);\n        \n        return min(maxD(p1)[0], maxD(p2)[0]);\n    }\n};"
}