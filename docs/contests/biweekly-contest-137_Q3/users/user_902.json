{
    "username": "Kawchar Husain",
    "submission": "class Solution {\nprivate:\n    long long solve(int i, int c1, int c2, int n, vector<vector<vector<long long>>> &dp, vector<vector<int>> &mx_id, vector<vector<int>>& board) {\n        if(i == board.size()) {\n            return -1e15;\n        }\n        if(dp[i][c1][c2] != -1) {\n            return dp[i][c1][c2];\n        }\n        long long mx = -1e15;\n        if(c1 == n) {\n            for(int cur = 0; cur < 3; cur++) {\n                int id = mx_id[i][cur];\n                // cout << 1LL * board[i][id] + solve(i + 1, id, c2, n, dp, mx_id, board) << \" ?\\n\";\n                mx = max(mx, 1LL * board[i][id] + solve(i + 1, id, c2, n, dp, mx_id, board));\n            }\n        } else if(c2 == n) {\n            for(int cur = 0; cur < 3; cur++) {\n                int id = mx_id[i][cur];\n                if(id == c1) continue;\n                mx = max(mx, 1LL * board[i][id] + solve(i + 1, c1, id, n, dp, mx_id, board));\n            }\n        } else {\n            for(int cur = 0; cur < 3; cur++) {\n                int id = mx_id[i][cur];\n                if(id == c1 || id == c2) continue;\n                mx = max(mx, 1LL * board[i][id]);\n            }\n            // mx = max(mx, solve(i + 1, c1, c2, n, dp, mx_id, board));\n            // return dp[i][c1][c2] = mx;\n        }\n        mx = max(mx, solve(i + 1, c1, c2, n, dp, mx_id, board));\n        return dp[i][c1][c2] = mx;\n    }\npublic:\n    long long maximumValueSum(vector<vector<int>>& board) {\n        int n = board.size();\n        int m = board[0].size();\n        long long ans = 0;\n        vector<vector<int>> mx_id(n);\n        for(int i = 0; i < n; i++) {\n            int mx = INT_MIN, id = -1;\n            for(int j = 0; j < m; j++) {\n                if(board[i][j] >= mx) {\n                    mx = board[i][j];\n                    id = j;\n                }\n            }\n            mx_id[i].push_back(id);\n            mx = INT_MIN;\n            int id1 = -1;\n            for(int j = 0; j < m; j++) {\n                if(j == id)\n                    continue;\n                if(board[i][j] >= mx) {\n                    mx = board[i][j];\n                    id1 = j;\n                }\n            }\n            mx_id[i].push_back(id1);\n\n            mx = INT_MIN;\n            int id2 = -1;\n            for(int j = 0; j < m; j++) {\n                if(j == id || j == id1)\n                    continue;\n                if(board[i][j] >= mx) {\n                    mx = board[i][j];\n                    id2 = j;\n                }\n            }\n            mx_id[i].push_back(id2);\n\n            // cout << i << \"--> \";\n            // for(auto x : mx_id[i]) cout << x << \", \";\n            // cout << \"\\n\";\n        }\n\n        vector<vector<vector<long long>>> dp(n + 1, vector<vector<long long>>(m + 1, vector<long long>(m + 1, -1)));\n        //solve(int i, int c1, int c2, int n, dp, mx_id, board) {\n        ans = solve(0, m, m, m, dp, mx_id, board);\n        return ans;\n    }\n};",
    "submit_ts": "1723909983",
    "subm_id": "1359212914"
}