{
    "username": "Yawn_Sean",
    "submission": "class FenwickTree:\n    def __init__(self, n):\n        self.n = n\n        self.bit = [0] * n\n\n    def sum(self, r):\n        res = 0\n        while r >= 0:\n            res += self.bit[r]\n            r = (r & (r + 1)) - 1\n        return res\n\n    def rsum(self, l, r):\n        return self.sum(r) - self.sum(l - 1)\n\n    def add(self, idx, delta):\n        while idx < self.n:\n            self.bit[idx] += delta\n            idx = idx | (idx + 1)\n\nclass Solution:\n    def countKConstraintSubstrings(self, s: str, k: int, queries: List[List[int]]) -> List[int]:\n        n = len(s)\n        \n        q = len(queries)\n        ans = [0] * q\n        \n        tmp = [[] for _ in range(n)]\n        for i in range(q):\n            tmp[queries[i][0]].append(i)\n            tmp[queries[i][1]].append(~i)\n\n        def solve(nums):\n            ans = [0] * q\n            fen_cnt = FenwickTree(n + 1)\n            fen_sum = FenwickTree(n + 1)\n            for i in range(n - 1, -1, -1):\n                for q_idx in tmp[i]:\n                    if q_idx < 0:\n                        q_idx = ~q_idx\n                        r = queries[q_idx][1]\n                        ans[q_idx] -= (r + 1) * fen_cnt.rsum(r + 1, n)\n                fen_cnt.add(nums[i], 1)\n                fen_sum.add(nums[i], nums[i])\n                for q_idx in tmp[i]:\n                    if q_idx >= 0:\n                        r = queries[q_idx][1]\n                        ans[q_idx] += (r + 1) * fen_cnt.rsum(r + 1, n)\n                        ans[q_idx] += fen_sum.rsum(i, r)\n                        ans[q_idx] -= (i + r) * (r - i + 1) // 2\n            return ans\n        \n        right = [0] * n\n        l, r = 0, 0\n        c = 0\n        while l < n:\n            while r < n and c + (s[r] == '0') <= k:\n                if s[r] == '0':\n                    c += 1\n                r += 1\n            right[l] = r\n            if s[l] == '0':\n                c -= 1\n            l += 1\n        \n        res = solve(right)\n        for i in range(q):\n            ans[i] += res[i]\n        \n        l, r = 0, 0\n        c = 0\n        while l < n:\n            while r < n and c + (s[r] == '1') <= k:\n                if s[r] == '1':\n                    c += 1\n                r += 1\n            right[l] = r\n            if s[l] == '1':\n                c -= 1\n            l += 1\n        \n        res = solve(right)\n        for i in range(q):\n            ans[i] += res[i]\n        \n        l, r = 0, 0\n        c0 = c1 = 0\n        while l < n:\n            while r < n and c0 + (s[r] == '0') <= k and c1 + (s[r] == '1') <= k:\n                if s[r] == '1':\n                    c1 += 1\n                else:\n                    c0 += 1\n                r += 1\n            right[l] = r\n            if s[l] == '1':\n                c1 -= 1\n            else:\n                c0 -= 1\n            l += 1\n        \n        res = solve(right)\n        for i in range(q):\n            ans[i] -= res[i]\n        return ans",
    "submit_ts": "1723950026",
    "subm_id": "1359735185"
}