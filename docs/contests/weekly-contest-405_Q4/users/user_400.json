{
    "username": "dongzhi0",
    "submission": "#pragma GCC optimize(\"Ofast,unroll-loops\")\n#pragma GCC target(\"avx2,tune=native\")\n\nauto _ = [](){ return cin.tie(0)->sync_with_stdio(0); }();\n\nclass Solution {\npublic:\n    int solve(string_view &t, unordered_map<string_view,int> &m, vector<int> &dp, int i = 0) {\n        if (i >= t.length()) return 0;\n        if (dp[i] != -1) return dp[i];\n        int ans = 1e9;\n        // for (int j = 0; j < wv.size(); j++) {\n        //     if (t.substr(i, wv[j].length()) == wv[j]) {\n        //         ans = min(ans, costs[j] + solve(t, wv, costs, dp, i+wv[j].length()));\n        //     }\n        // }\n        for (auto &[v, s] : m) {\n            if (t.substr(i, v.length()) == v) {\n                ans = min(ans, s + solve(t, m, dp, i+v.length()));\n            }\n        }\n        return dp[i] = ans;\n    }\n    \n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int n = target.length();\n        auto t = string_view(target);\n        unordered_map<string_view, int> m;\n        // vector<string_view> wv;\n        // for (auto &w : words) wv.push_back(string_view(w));\n        for (int i = 0; i < words.size(); i++) {\n            auto v = string_view(words[i]);\n            if (m.find(v) == m.end()) {\n                m[v] = costs[i];\n            } else {\n                m[v] = min(m[v], costs[i]);\n            }\n        }\n        vector<int> dp(n, -1);\n        int ans = solve(t, m, dp);\n        return ans == 1e9 ? -1 : ans;\n    }\n};",
    "submit_ts": "1720321736",
    "subm_id": "1312330920"
}