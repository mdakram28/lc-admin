{
    "username": "harttle",
    "submission": "/**\n * @param {number} k\n * @return {number}\n */\nvar waysToReachStair = function(K) {\n    let queue = new Map([[1, 1]])\n    let ans = 0\n    if (K === 1) ans = 1\n    if (K === 0) ans = 1\n    for (let j = 0; queue.size; j++) {\n        // console.log(`j=${j}`)\n        const nqueue = new Map()\n        for (const [i, count] of queue) {\n            add(nqueue, i + 2 ** j, count)\n            if (i > 0) {\n                add(nqueue, i - 1 + 2 ** j, count)\n            }\n        }\n        queue = nqueue\n        ans += get(nqueue, K)\n        ans += get(nqueue, K + 1)\n    }\n    return ans\n    function add(map, key, diff) {\n        if (key > K + 1) return\n        map.set(key, get(map, key) + diff)\n    }\n    function get(map, key) {\n        return map.get(key) || 0\n    }\n};\n/*\n * Template from contest.js\n * Github: https://github.com/harttle/contest.js\n * Website: https://harttle.land/contest.js/\n */\n// src/heap.ts\nvar Heap = class {\n  constructor(data = [], compare = (lhs, rhs) => lhs < rhs ? -1 : lhs > rhs ? 1 : 0) {\n    if (typeof data === \"function\") {\n      compare = data;\n      data = [];\n    }\n    this.data = [null, ...data];\n    this.lt = (i, j) => compare(this.data[i], this.data[j]) < 0;\n    for (let i = this.size(); i > 0; i--)\n      this.heapify(i);\n  }\n  size() {\n    return this.data.length - 1;\n  }\n  push(v) {\n    this.data.push(v);\n    let i = this.size();\n    while (i >> 1 !== 0 && this.lt(i, i >> 1))\n      this.swap(i, i >>= 1);\n  }\n  pop() {\n    this.swap(1, this.size());\n    const top = this.data.pop();\n    this.heapify(1);\n    return top;\n  }\n  top() {\n    return this.data[1];\n  }\n  heapify(i) {\n    while (true) {\n      let min = i;\n      const [l, r, n] = [i * 2, i * 2 + 1, this.data.length];\n      if (l < n && this.lt(l, min))\n        min = l;\n      if (r < n && this.lt(r, min))\n        min = r;\n      if (min !== i) {\n        this.swap(i, min);\n        i = min;\n      } else\n        break;\n    }\n  }\n  clear() {\n    this.data = [null];\n  }\n  swap(i, j) {\n    const d = this.data;\n    [d[i], d[j]] = [d[j], d[i]];\n  }\n};\nvar RemovableHeap = class {\n  constructor(data = [], cmp) {\n    this.heap = new Heap(data, cmp);\n    this.counts = new Map();\n    this._size = 0;\n    for (let i = 1; i < this.heap.data.length; i++) {\n      this.count(this.heap.data[i], 1);\n    }\n  }\n  size() {\n    return this._size;\n  }\n  top() {\n    this._normalize();\n    return this.heap.top();\n  }\n  pop() {\n    this._normalize();\n    if (this.heap.size() < 1)\n      return void 0;\n    const top = this.heap.pop();\n    this.count(top, -1);\n    return top;\n  }\n  push(num) {\n    this.count(num, 1);\n    this.heap.push(num);\n  }\n  remove(num) {\n    if (Number(this.counts.get(num)) > 0) {\n      this.count(num, -1);\n    }\n  }\n  has(value) {\n    return this.counts.get(value) > 0;\n  }\n  count(num, diff = 1) {\n    var _a;\n    const count = (_a = this.counts.get(num)) != null ? _a : 0;\n    this.counts.set(num, count + diff);\n    this._size += diff;\n  }\n  _normalize() {\n    while (this.heap.size() && !this.counts.get(this.heap.top())) {\n      this.heap.pop();\n    }\n  }\n};\nvar RemovableDoubleHeap = class {\n  constructor(data = [], cmp = (lhs, rhs) => lhs < rhs ? -1 : lhs > rhs ? 1 : 0) {\n    this.min = new RemovableHeap(data, cmp);\n    this.max = new RemovableHeap(data, (lhs, rhs) => -cmp(lhs, rhs));\n  }\n  popMin() {\n    const min = this.min.pop();\n    this.max.remove(min);\n    return min;\n  }\n  popMax() {\n    const max = this.max.pop();\n    this.min.remove(max);\n    return max;\n  }\n  remove(num) {\n    this.min.remove(num);\n    this.max.remove(num);\n  }\n  size() {\n    return this.min.size();\n  }\n  push(num) {\n    this.min.push(num);\n    this.max.push(num);\n  }\n};\nvar PriorityQueue = class extends RemovableHeap {\n  offer(value) {\n    return this.push(value);\n  }\n  poll() {\n    return this.pop();\n  }\n  peek() {\n    return this.top();\n  }\n};",
    "submit_ts": 1716090152.0
}