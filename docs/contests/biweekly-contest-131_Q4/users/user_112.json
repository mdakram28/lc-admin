{
    "username": "mridho2828",
    "submission": "class Solution {\npublic:\n\n    static const int MAX = 50001;\n\n    int segTree[MAX*4 + 10];\n\n    void update(int id, int l, int r, int pos, int val) {\n        if (l == r) {\n            segTree[id] = val;\n            return;\n        } \n\n        int mid = (l+r) >> 1;\n        if (pos <= mid) {\n            update(id<<1, l, mid, pos, val);\n        } else {\n            update(id<<1|1, mid+1, r, pos, val);\n        }\n        segTree[id] = max(segTree[id<<1], segTree[id<<1|1]);\n    }\n\n    int query(int id, int l, int r, int x, int y) {\n        // printf(\"l = %d, r = %d, segTree = %d\\n\", l, r, segTree[id]);\n        if (x <= l && r <= y) {\n            return segTree[id];\n        }\n        int mid = (l+r)>>1;\n        int ret = 0;\n        if (x <= mid) {\n            ret = max(ret, query(id<<1, l, mid, x, y));\n        }\n        if (y > mid) {\n            ret = max(ret, query(id<<1|1, mid+1, r, x, y));\n        }\n        return ret;\n    }\n\n    vector<bool> getResults(vector<vector<int>>& queries) {\n        set<int> blocks, reverseBlocks;\n        blocks.insert(0);\n        reverseBlocks.insert(0);\n        vector<bool> ans;\n        update(1, 0, MAX, 0, MAX);\n        for (vector<int> q : queries) {\n            int type = q[0], x = q[1];\n            // printf(\"type = %d, x = %d\\n\", type, x);\n            if (type == 1) {\n                auto upbo = blocks.upper_bound(x);\n                auto lobo = reverseBlocks.upper_bound(-x);\n                if (upbo == blocks.end()) {\n                    int a = -*lobo;\n                    // printf(\"a = %d, x = %d\\n\", a, x);\n                    update(1, 0, MAX, a, x-a);\n                    update(1, 0, MAX, x, MAX);\n                } else {\n                    int a = -*lobo;\n                    int b = *upbo;\n                    // printf(\"a = %d, x = %d, b = %d\\n\", a, x, b);\n                    update(1, 0, MAX, a, x-a);\n                    update(1, 0, MAX, x, b-x);\n                }\n                blocks.insert(x);\n                reverseBlocks.insert(-x);\n            } else {\n                int sz = q[2];\n                int maxPos = x - sz;\n                // printf(\"sz = %d, maxPos = %d\\n\", sz, maxPos);\n                if (maxPos < 0) {\n                    ans.push_back(0);\n                } else {\n                    int res = query(1, 0, MAX, 0, maxPos);\n                    // printf(\"res = %d\\n\", res);\n                    ans.push_back(res >= sz);\n                }\n            }\n        }\n        return ans;\n    }\n};",
    "submit_ts": 1716650420.0
}