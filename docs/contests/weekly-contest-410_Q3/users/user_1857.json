{
    "username": "Kamaleswari_P",
    "submission": "from typing import List\n\nclass Solution:\n    def countOfPairs(self, nums: List[int]) -> int:\n        MOD = 10**9 + 7\n        n = len(nums)\n        \n        # Initialize dp array: dp[i][j] is the number of ways to build a valid sequence\n        # up to index i with arr1[i] = j\n        dp = [[0] * 51 for _ in range(n)]\n        \n        # Base case: the first element\n        for j in range(nums[0] + 1):\n            dp[0][j] = 1\n        \n        # Fill the dp table\n        for i in range(1, n):\n            for j in range(nums[i] + 1):  # arr1[i] can be from 0 to nums[i]\n                dp[i][j] = sum(dp[i-1][k] for k in range(j + 1) if nums[i] - j <= nums[i-1] - k) % MOD\n        \n        # Result is the sum of all possible dp[n-1][j] for the last element\n        return sum(dp[-1]) % MOD\n\n# Example usage:\nsol = Solution()\nprint(sol.countOfPairs([2,3,2]))  # Output: 4\nprint(sol.countOfPairs([5,5,5,5]))  # Output: 126\nprint(sol.countOfPairs([42,34,15,6]))  # Efficient calculation for larger inputs\n",
    "submit_ts": "1723346071",
    "subm_id": "1351569578"
}