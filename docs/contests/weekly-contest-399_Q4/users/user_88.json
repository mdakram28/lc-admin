{
    "username": "papaya",
    "submission": "#include <bits/stdc++.h>\nusing namespace std ; \n\ntypedef long long int64 ; \n\nstruct Segment_Tree { \n    struct Node {          \n        // int64 sum ; // lazy variable \n        vector< vector<int64>> f ; \n        Node() { \n            f.assign( 2 , vector< int64> ( 2 , 0 ) ) ; \n        }\n    } ; \n    vector< Node > t ; \n    int n ; \n\n    inline int L( int u ) { return u << 1 ; }\n    inline int R( int u ) { return ( u << 1 ) | 1 ; }  \n    void init( int tn ) { \n        vector<int64> a( tn, 0 ) ;\n        init( tn , a ) ; \n    } \n    void init( int tn , vector<int64> & a ) { \n        n = tn ;         \n        t.resize( n * 4 + 10 ) ;         \n        build_tree( 1 ,  0 , tn - 1 , a ) ; \n    } \n    void combine( int u ) {\n      \n        auto put = [&]( int v1 , int v2 ) { \n            auto &ret = t[u].f[v1][v2] ; \n            ret = 0 ; \n            for( int e = 0 ; e < 2 ; e++ ) {\n                for( int k = 0 ; k < 2 ; k++ ) {\n                    \n                    if( e == 1 && k == 1 ) {\n                        continue ; \n                    }\n\n                    auto ans_left = t[ L(u) ].f[v1][e] ;\n                    auto ans_right = t[ R(u) ].f[k][v2] ;\n                    auto t_ans = ans_left + ans_right ; \n                    ret = max( ret , t_ans ) ; \n                }\n            }\n        } ; \n        for( int v1 = 0 ; v1 < 2 ; v1++ ) {\n            for( int v2 = 0 ; v2 < 2 ; v2++ ) {                 \n                put( v1 , v2  ) ;                 \n            }\n        }\n    } ; \n    \n    inline void one_set( int u , int64 val ) { \n        auto &f = t[u].f ;\n\n        f[1][1] = val ; \n        \n        f[ 0 ] [ 1 ] = f[1][0] = 0 ; \n        f[ 0 ] [ 0 ] = 0 ; \n    }\n    void build_tree( int u , int s , int e , vector<int64> & a ) {\n\n        if( s == e ) {\n            auto val = a[s] ; \n            one_set( u , val ) ; \n            return ; \n        }\n        int mid = ( s + e ) / 2 ; \n        build_tree( L(u) , s , mid , a ) ; \n        build_tree( R(u) , mid + 1 , e , a ) ;    \n        combine( u ) ;  \n    }\n\n    void _set( int u , int left , int right , int x , int64 val ) {\n\n        if( left == right )  { // cotain [left,right], mark it            \n            // cout << \"u : \" << u << \" left: \" << left << \" \" << right << \" x; \" << x << \" \" << val << \"\\n\" ; \n\n            one_set( u , val ) ; \n            return ; \n        } \n        int mid = ( left + right ) >> 1 ; \n        if( x <= mid ) {\n            _set( L(u) ,  left , mid , x , val ) ; \n        }\n        if( x > mid  ) {\n            _set( R(u) , mid + 1 , right , x ,  val ) ; \n        }\n        combine( u ) ;\n    }\n    void set( int x ,  int64 val ) {\n        return _set( 1 , 0 , n - 1 , x ,  val ) ; \n    }\n    int64 qeury( ) { \n        auto &f = t[1].f ; \n        vector<int64> b = { f[0][0] , f[0][1] , f[1][0] , f[1][1] } ; \n        return *max_element( b.begin() , b.end() )  ; \n    }\n} ; \n\nclass Solution {\npublic:\n    vector<int64> a ; \n    int n ; \n    Segment_Tree t ; \n\n    int maximumSumSubsequence(vector<int>& nums, vector<vector<int>>& queries) {\n        a = {} ; \n        for( auto x : nums ) {\n            a.emplace_back( x ) ; \n        }\n        n = a.size() ; \n        t.init( n , a ) ; \n\n        int64 MOD = 1e9 + 7 ; \n        int64 ans = 0 ; \n        for( auto &p  : queries ) { \n            int pos = p[0] , val = p[1] ; \n            t.set( pos , val ) ; \n\n            ans += t.qeury() ;\n            \n        }\n        return ans % MOD ; \n    }\n};\n\n\n\n\nint main2( )  { \n    Solution  t; \n\n    vector<int> a ;\n    int n ; \n\n    vector<int> nums ; \n    vector< vector<int>> queries ; \n    nums = { 3,5,9 } ; \n    queries = { { 1 , -2} , { 0 , -3 } } ; \n    \n    nums = { 0 , -1 } ; \n    queries = { { 0 , -5} } ; \n\n    auto ans = t.maximumSumSubsequence( nums , queries ) ; \n    cout << ans << \"\\n\" ;\n\n\n    return 0 ; \n}\n",
    "submit_ts": 1716693826.0
}