{
    "username": "plus2047",
    "submission": "class Solution {\npublic:\n    int minimumDifference(vector<int>& nums, int k) {\n        const int n = nums.size(), m = 31;\n        int res = INT_MAX;\n        vector<int> cnt(m);\n        for(int left = 0, right = 0; right < n; right++) {\n            int curr = update(cnt, nums[right], 1, right - left + 1);\n            res = min(res, abs(curr - k));\n            while(left < right and curr < k) {\n                curr = update(cnt, nums[left], -1, right - left);\n                left++;\n                res = min(res, abs(curr - k));\n            }\n        }\n        return res;\n    }\n    int update(vector<int>& cnt, int x, int flag, int size) {\n        int curr = 0;\n        for(int i = 0; i < int(cnt.size()); i++) {\n            cnt[i] += flag * ((x >> i) & 1);\n            if(cnt[i] == size) {\n                curr |= 1 << i;\n            }\n        }\n        return curr;\n    }\n};",
    "submit_ts": 1717297516.0
}