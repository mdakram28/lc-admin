{
    "username": "Abhyuday Shukla",
    "submission": "class Solution {\n    public long maximumValueSum(int[][] board) {\n        Set<Integer> s = new HashSet<>();\n        int[][][] newBoard = new int[board.length][3][2];\n        PriorityQueue<int[]> pq = new PriorityQueue<>((a, b)->(b[0]-a[0]));\n        for(int i=0; i<board.length; i++) {\n            pq.clear();\n            for(int j=0; j<board[0].length; j++) {\n                pq.offer(new int[]{board[i][j], j});\n            }\n            for(int j=0; j<3; j++) {\n                int[] arr = pq.poll();\n                newBoard[i][j][0] = arr[0];\n                newBoard[i][j][1] = arr[1];\n            }\n        }\n        Map<String, Long> memo = new HashMap<>();\n        return calc(s, 0, newBoard, memo);\n    }\n    \n    public long calc(Set<Integer> used, int row, int[][][] board, Map<String, Long> memo) {\n        \n        int n = board.length;\n        if(row>=n || used.size()==3) return 0;\n        String key = row + \":\" + used.toString();\n        if(memo.containsKey(key)) return memo.get(key);\n        int set = used.size();\n        long adding = Long.MIN_VALUE;\n        for(int i=0; i<3; i++) {\n            if(!used.contains(board[row][i][1])) {\n                used.add(board[row][i][1]);\n                adding = Math.max(adding, (long)board[row][i][0] + calc(used, row+1, board, memo));\n                used.remove(board[row][i][1]);\n            }\n        }\n        long notAdd = Long.MIN_VALUE;\n        if((3-set)<=(n-row-1)) notAdd = calc(used, row+1, board, memo);\n        \n        long ans = Math.max(adding, notAdd);\n        memo.put(key, ans);\n\n        return ans;\n    }\n}",
    "submit_ts": "1723910156",
    "subm_id": "1359219467"
}