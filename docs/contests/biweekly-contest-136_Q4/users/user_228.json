{
    "username": "zhang-yuan-long",
    "submission": "\nclass Solution {\npublic:\n\n    int Dist(int v) {\n        return v % 2 ? 1 : 2;\n    }\n\n    int DFS0(int node, int par)\n    {\n        for (auto it : edges[node]) {\n            if (it == par) {\n                continue;\n            }\n            auto d = DFS0(it, node) + Dist(it);\n            if (d > vp[node][0]) {\n\n                vp[node][1] = vp[node][0];\n                vp[node][0] = d;\n            }\n            else if (d > vp[node][1]) {\n                vp[node][1] = d;\n            }\n        }\n        return rec[node] = vp[node][0];\n    }\n\n    void DFS1(int node, int par, int fromPar)\n    {\n        for (auto it : edges[node]) {\n            if (it == par) {\n                continue;\n            }\n            auto son = rec[it] + Dist(it);\n\n            int v = max(fromPar, son == vp[node][0] ? vp[node][1] : vp[node][0]);\n            \n            DFS1(it, node, v + Dist(node));\n            \n        }\n        \n        fromPar = max(fromPar, vp[node][0]);\n        \n        result[node] = fromPar;\n    }\n\n\n    vector<int> timeTaken(vector<vector<int>>& e) {\n        for (auto& it : e) {\n            edges[it[0]].push_back(it[1]);\n            edges[it[1]].push_back(it[0]);\n        }\n\n        result.resize(e.size() + 1);\n        DFS0(0, -1);\n        DFS1(0, -1, 0);\n        return std::move(result);\n    }\n\n    int rec[100010];\n    vector<int> edges[100010];\n    int vp[100010][2] {};\n    vector<int> result;\n    \n};",
    "submit_ts": "1722699683",
    "subm_id": "552276721"
}