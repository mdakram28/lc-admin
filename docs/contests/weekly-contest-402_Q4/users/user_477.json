{
    "username": "nocturne_",
    "submission": "import java.util.ArrayList;\nimport java.util.List;\n\nclass Solution {\n\n    class SegmentTree {\n        private int[] tree;\n        private int[] arr;\n        private int n;\n\n        public SegmentTree(int[] nums) {\n            n = nums.length;\n            arr = new int[n];\n            System.arraycopy(nums, 0, arr, 0, n);\n            tree = new int[4 * n];\n            buildTree(1, 0, n - 1);\n        }\n\n        private void buildTree(int node, int start, int end) {\n            if (start == end) {\n                tree[node] = arr[start];\n                return;\n            }\n            int mid = (start + end) / 2;\n            buildTree(2 * node, start, mid);\n            buildTree(2 * node + 1, mid + 1, end);\n            tree[node] = tree[2 * node] + tree[2 * node + 1];\n        }\n\n        public void update(int i, int val) {\n            updateUtil(1, 0, n - 1, i, val);\n        }\n\n        private void updateUtil(int node, int start, int end, int i, int val) {\n            if (start == end) {\n                tree[node] = val;\n                arr[i] = val;\n                return;\n            }\n            int mid = (start + end) / 2;\n            if (i <= mid) {\n                updateUtil(2 * node, start, mid, i, val);\n            } else {\n                updateUtil(2 * node + 1, mid + 1, end, i, val);\n            }\n            tree[node] = tree[2 * node] + tree[2 * node + 1];\n        }\n\n        public int query(int l, int r) {\n            return queryUtil(1, 0, n - 1, l, r);\n        }\n\n        private int queryUtil(int node, int start, int end, int l, int r) {\n            if (l > end || r < start) {\n                return 0;\n            }\n            if (l <= start && end <= r) {\n                return tree[node];\n            }\n            int mid = (start + end) / 2;\n            int left = queryUtil(2 * node, start, mid, l, r);\n            int right = queryUtil(2 * node + 1, mid + 1, end, l, r);\n            return left + right;\n        }\n    }\n\n\n    public List<Integer> countOfPeaks(int[] nums, int[][] queries) {\n        SegmentTree tree = new SegmentTree(new int[nums.length + 5]);\n        for (int i = 1; i < nums.length - 1; i++) {\n            if (nums[i] > nums[i - 1] && nums[i] > nums[i + 1]) {\n                tree.update(i, 1);\n            }\n        }\n\n        List<Integer> result = new ArrayList<>();\n        for (int[] query : queries) {\n            if (query[0] == 1) {\n                result.add(tree.query(query[1] + 1, query[2] - 1));\n            } else {\n                nums[query[1]] = query[2];\n                for (int i = Math.max(0, query[1] - 1); i <= Math.min(nums.length - 1, query[1] + 1); i++) {\n                    if (i - 1 >= 0 && i + 1 < nums.length && nums[i] > nums[i - 1] && nums[i] > nums[i + 1]) {\n                        tree.update(i, 1);\n                    } else {\n                        tree.update(i, 0);\n                    }\n                }\n            }\n        }\n\n        return result;\n    }\n}",
    "submit_ts": "1718507639",
    "subm_id": "539782578"
}