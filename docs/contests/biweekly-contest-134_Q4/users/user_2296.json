{
    "username": "SanskarDhyani",
    "submission": "class Solution {\npublic:\n    long long countSubarrays(vector<int>& nums, int k) {\n    //     int n = nums.size();\n    // int count = 0;\n\n    // for (int i = 0; i < n; ++i) {\n    //     int currentAND = ~0;  // Set all bits to 1\n    //     for (int j = i; j < n; ++j) {\n    //         currentAND &= nums[j];\n    //         if (currentAND == k) {\n    //             count++;\n    //         } else if (currentAND < k) {\n    //             break;  // No point in continuing if AND has already dropped below k\n    //         }\n\n    int n = nums.size();\n        long long count = 0;\n        unordered_map<long long, long long> prevResults;\n        \n        for (int i = 0; i < n; ++i) {\n            unordered_map<long long, long long> currResults;\n            \n            if (nums[i] == k) {\n                ++count;\n            }\n            currResults[nums[i]] = 1;\n\n            for (auto& [value, frequency] : prevResults) {\n                long long newAndResult = value & nums[i];\n                if (newAndResult == k) {\n                    count += frequency;\n                }\n                currResults[newAndResult] += frequency;\n            }\n            \n            prevResults = currResults;\n        }\n        return count;\n        }\n    // }\n\n    // return count;\n    // }\n};",
    "submit_ts": "1720278662",
    "subm_id": "1311718889"
}