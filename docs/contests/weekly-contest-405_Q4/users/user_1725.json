{
    "username": "ektasiwach",
    "submission": "#include <vector>\n#include <string>\n#include <iostream>\n#include <unordered_map>\n#include <climits>\n\nusing namespace std;\n\nclass Solution {\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int n = target.length();\n        vector<int> dp(n + 1, INT_MAX);\n        dp[0] = 0; // Cost to form an empty string is 0\n\n        // Create a map for words and their minimum costs\n        unordered_map<string, int> wordCostMap;\n        for (int i = 0; i < words.size(); ++i) {\n            if (wordCostMap.find(words[i]) == wordCostMap.end() || costs[i] < wordCostMap[words[i]]) {\n                wordCostMap[words[i]] = costs[i];\n            }\n        }\n\n        // Update the dp array\n        for (int i = 0; i < n; ++i) {\n            if (dp[i] == INT_MAX) continue;\n\n            for (const auto& [word, cost] : wordCostMap) {\n                int len = word.length();\n                if (i + len <= n && target.compare(i, len, word) == 0) {\n                    dp[i + len] = min(dp[i + len], dp[i] + cost);\n                }\n            }\n        }\n\n        return dp[n] == INT_MAX ? -1 : dp[n];\n    }\n};",
    "submit_ts": "1720320992",
    "subm_id": "1312310442"
}