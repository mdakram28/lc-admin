{
    "username": "tejas_mishr",
    "submission": "\nclass TrieNode {\npublic:\n    int cost;\n    unordered_map<char, TrieNode*> child;\n    TrieNode() : cost(INT_MAX) {}\n};\n\nclass Trie {\npublic:\n    TrieNode* root;\n    Trie() {root = new TrieNode();}\n    \n    void insert(const string& word, int cost) {\n        TrieNode* nd = root;\n        for (char c : word) {\n            if (!nd->child.count(c)) nd->child[c] = new TrieNode();\n            nd = nd->child[c];\n        }\n        nd->cost = min(nd->cost, cost);\n    }\n};\n\nclass Solution {\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        vector<int> dp(target.size() + 1, INT_MAX);\n        dp[0] = 0;\n        Trie trie;\n        for (int i = 0; i < words.size(); i++) trie.insert(words[i], costs[i]);\n        for (int i = 0; i < target.size(); i++) {\n            if (dp[i] == INT_MAX) {\n                continue;\n            }\n            TrieNode* nd = trie.root;\n            for (int j = i; j < target.size(); ++j) {\n                if (!nd->child.count(target[j])) {\n                    break;\n                }\n                nd = nd->child[target[j]];\n                if (nd->cost != INT_MAX) dp[j + 1] = min(dp[i] + nd->cost, dp[j + 1]);\n            }\n        }\n        int ans=((dp[(target.size())] == INT_MAX) ? -1 : dp[target.size()]);\n        return ans;\n    }\n};\n    \n",
    "submit_ts": "1720322576",
    "subm_id": "1312353571"
}