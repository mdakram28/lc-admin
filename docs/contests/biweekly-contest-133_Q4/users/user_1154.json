{
    "username": "cassioaugusto01",
    "submission": "from typing import List, Dict\nfrom collections import defaultdict\n\nclass Solution:\n    MOD = 10**9 + 7\n    MAX_INV = 400\n\n    def numberOfPermutations(self, n: int, requisitos: List[List[int]]) -> int:\n        r = defaultdict(int)\n        for req in requisitos:\n            r[req[0] + 1] = req[1]\n        \n        pc = [[0] * (self.MAX_INV + 1) for _ in range(n + 1)]\n        pc[0][0] = 1\n\n        for length in range(1, n + 1):\n            self.atualizar_pc(pc, length)\n            self.validar_requisitos(pc, r, length)\n\n        resultado = sum(pc[n]) % self.MOD\n        return resultado\n\n    def atualizar_pc(self, pc: List[List[int]], length: int) -> None:\n        for inversions in range(self.MAX_INV + 1):\n            for pos in range(length):\n                prev_inversions = inversions - pos\n                if prev_inversions >= 0:\n                    pc[length][inversions] = (pc[length][inversions] + pc[length - 1][prev_inversions]) % self.MOD\n\n    def validar_requisitos(self, pc: List[List[int]], r: Dict[int, int], length: int) -> None:\n        if length in r:\n            target_inversions = r[length]\n            for inversions in range(self.MAX_INV + 1):\n                if inversions != target_inversions:\n                    pc[length][inversions] = 0\n\n# Exemplo de uso:\nsol = Solution()\nprint(sol.numberOfPermutations(3, [[2, 2], [0, 0]]))  # Sa\u00edda: 2\nprint(sol.numberOfPermutations(3, [[2, 2], [1, 1], [0, 0]]))  # Sa\u00edda: 1\nprint(sol.numberOfPermutations(2, [[0, 0], [1, 0]]))  # Sa\u00edda: 1",
    "submit_ts": 1719071986.0
}