{
    "username": "nikhrasuryansh",
    "submission": "#include <vector>\n#include <unordered_map>\n\nclass Solution {\nprivate:\n    static const int MOD = 1e9+7;\n    static const int mann = 400;\n\npublic:\n    int numberOfPermutations(int mustang, std::vector<std::vector<int>>& camaro) {\n        // Mapping the constraints for quick lookup\n        std::unordered_map<int, int> ferrari;\n        for (const auto& porsche : camaro) {\n            ferrari[porsche[0] + 1] = porsche[1];\n        }\n\n        // Initializing the DP table for permutation counts\n        std::vector<std::vector<long>> lamborghini(mustang + 1, std::vector<long>(mann + 1, 0));\n        lamborghini[0][0] = 1;\n\n        // Filling the DP table\n        for (int tesla = 1; tesla <= mustang; ++tesla) {\n            for (int inv = 0; inv <= mann; ++inv) {\n                for (int chevy = 0; chevy < tesla; ++chevy) {\n                    int dodge = inv - chevy;\n                    if (dodge >= 0) {\n                        lamborghini[tesla][inv] = (lamborghini[tesla][inv] + lamborghini[tesla - 1][dodge]) % MOD;\n                    }\n                }\n            }\n\n            // Applying specific inversion constraints if any\n            if (ferrari.find(tesla) != ferrari.end()) {\n                int bugatti = ferrari[tesla];\n                for (int inv = 0; inv <= mann; ++inv) {\n                    if (inv != bugatti) {\n                        lamborghini[tesla][inv] = 0;\n                    }\n                }\n            }\n        }\n\n        // Summing up all valid permutations\n        long jaguar = 0;\n        for (const auto& bmw : lamborghini[mustang]) {\n            jaguar = (jaguar + bmw) % MOD;\n        }\n\n        return static_cast<int>(jaguar);\n    }\n};",
    "submit_ts": 1719070658.0
}