{
    "username": "Arnav",
    "submission": "class Solution {\npublic:\n    long long maximumValueSum(vector<vector<int>>& board) {\n        int m = board.size();\n        int n = board[0].size();\n        \n        // Helper function to get top 3 values with positions from a list of pairs\n        auto getTop3 = [](vector<pair<int, int>>& values) {\n            sort(values.rbegin(), values.rend());\n            if (values.size() > 3) values.resize(3);\n            return values;\n        };\n        \n        // Get top 3 values for each row\n        vector<vector<pair<int, int>>> topRowValues(m);\n        for (int i = 0; i < m; ++i) {\n            vector<pair<int, int>> rowValues;\n            for (int j = 0; j < n; ++j) {\n                rowValues.emplace_back(board[i][j], j);\n            }\n            topRowValues[i] = getTop3(rowValues);\n        }\n        \n        // Get top 3 values for each column\n        vector<vector<pair<int, int>>> topColValues(n);\n        for (int j = 0; j < n; ++j) {\n            vector<pair<int, int>> colValues;\n            for (int i = 0; i < m; ++i) {\n                colValues.emplace_back(board[i][j], i);\n            }\n            topColValues[j] = getTop3(colValues);\n        }\n        \n        long long maxSum = LLONG_MIN;\n        \n        // Check combinations of top 3 values from rows and columns\n        for (int r1 = 0; r1 < m; ++r1) {\n            for (int r2 = r1 + 1; r2 < m; ++r2) {\n                for (int r3 = r2 + 1; r3 < m; ++r3) {\n                    for (const auto& [val1, c1] : topRowValues[r1]) {\n                        for (const auto& [val2, c2] : topRowValues[r2]) {\n                            if (c2 == c1) continue;  // Same column\n                            for (const auto& [val3, c3] : topRowValues[r3]) {\n                                if (c3 == c1 || c3 == c2) continue;  // Same column\n                                long long currentSum = static_cast<long long>(val1) + val2 + val3;\n                                maxSum = max(maxSum, currentSum);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        \n        return maxSum;\n    }\n};",
    "submit_ts": "1723909546",
    "subm_id": "1359196659"
}