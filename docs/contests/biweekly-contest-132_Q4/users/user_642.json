{
    "username": "sairaman1525",
    "submission": "class Solution {\npublic:\n    int maximumLength(vector<int>& nums, int k) { \n        int n = nums.size();\n        int ans = 1;\n        \n        // dp[i][j] represents the maximum length of a good subsequence ending at index i with at most j differing consecutive elements.\n        vector<vector<int>> dp(n, vector<int>(k + 1, 1));\n        \n        // v[j] keeps track of the maximum length of a good subsequence with at most j differing consecutive elements up to the current index.\n        vector<int> v(k + 1, -1);\n        \n        // mp[j][t] keeps track of the maximum length of a good subsequence with at most j differing consecutive elements up to the current index where the last element is t.\n        vector<map<int, int>> mp(k + 1);\n        \n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j <= k; j++) {\n                for (int p = 0; p < j; p++) {\n                    dp[i][j] = max(dp[i][j], 1 + v[p]);\n                }\n                \n                if (mp[j].find(nums[i]) != mp[j].end()) {\n                    dp[i][j] = max(dp[i][j], 1 + mp[j][nums[i]]);\n                }\n                \n                ans = max(ans, dp[i][j]);\n            }\n            \n            for (int j = 0; j <= k; j++) {\n                int t = nums[i];\n                v[j] = max(v[j], dp[i][j]);\n                mp[j][t] = max(mp[j][t], dp[i][j]);\n            }\n        }\n        \n        return ans;\n    }\n};\n",
    "submit_ts": "1717861909",
    "subm_id": "1281805711"
}