{
    "username": "michaelzhan1",
    "submission": "class Solution:\n    \n    \n    def canReachCorner(self, X: int, Y: int, circles: List[List[int]]) -> bool:\n        def checkClose(circle1, circle2):\n            if (circle2[0] - circle1[0]) ** 2 + (circle2[1] - circle1[1]) ** 2 <= (circle2[2] + circle1[2]) ** 2:\n                return True\n            return False\n        n = len(circles)\n        \n        graph = defaultdict(list)\n        for i in range(n):\n            for j in range(i + 1, n):\n                if checkClose(circles[i], circles[j]):\n                    graph[tuple(circles[i])].append(tuple(circles[j]))\n                    graph[tuple(circles[j])].append(tuple(circles[i]))\n        \n        # node representing wall:\n        left_node = (-1, 0, 0)\n        right_node = (1, 0, 0)\n        top_node = (0, 1, 0)\n        bot_node = (0, -1, 0)\n        for i in range(n):\n            x, y, r = circles[i]\n            node = tuple(circles[i])\n            \n            if r >= x: # left\n                graph[node].append(left_node)\n                graph[left_node].append(node)\n            if r >= y: # bot\n                graph[node].append(bot_node)\n                graph[bot_node].append(node)\n            if r >= X - x: # right\n                graph[node].append(right_node)\n                graph[right_node].append(node)\n            if r >= Y - y: # top\n                graph[node].append(top_node)\n                graph[top_node].append(node)\n                \n        visited = set()\n        \n        def traverse(node, start):\n            \n            if node[2] == 0 and node != start:\n                if node == left_node and start == right_node:\n                    return True\n                if node == right_node and start == left_node:\n                    return True\n                if node == left_node and start == bot_node:\n                    return True\n                if node == bot_node and start == left_node:\n                    return True\n                if node == top_node and start == bot_node:\n                    return True\n                if node == bot_node and start == top_node:\n                    return True\n                if node == top_node and start == right_node:\n                    return True\n                if node == right_node and start == top_node:\n                    return True\n\n            \n            visited.add(node)\n            for nxt in graph[node]:\n                if nxt not in visited:\n                    if traverse(nxt, start):\n                        return True\n            return False\n        \n        visited = set()\n        if traverse(left_node, left_node):\n            return False\n        visited = set()\n        if traverse(right_node, right_node):\n            return False\n        visited = set()\n        if traverse(bot_node, bot_node):\n            return False\n        return True\n        \n        \n        \n        \n        \n        ",
    "submit_ts": "1722138408",
    "subm_id": "1335790001"
}