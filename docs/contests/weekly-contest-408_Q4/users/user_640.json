{
    "username": "buriburizaemon17",
    "submission": "#include<bits/stdc++.h>\n\nclass Solution {\npublic:\n    int bfs(vector<vector<int>>& graph, int src, int tgt1, int tgt2, int n) {\n        queue<int> q;\n        vector<int> vis(n + 4, 0);\n        q.push(src);\n        vis[src] = 1;\n\n        while (!q.empty()) {\n            int u = q.front();\n            q.pop();\n            for (int v : graph[u]) {\n                if (!vis[v]) {\n                    q.push(v);\n                    vis[v] = 1;\n                }\n            }\n        }\n        return vis[tgt1] || vis[tgt2];\n    }\n\n    bool canReachCorner(int X, int Y, vector<vector<int>>& circles2) {\n        int n = circles2.size();\n        vector<pair<pair<int, int>, int>> circles(n);\n        vector<vector<int>> graph(n + 4);\n\n        for (int i = 0; i < n; ++i) {\n            circles[i] = {{circles2[i][0], circles2[i][1]}, circles2[i][2]};\n        }\n\n        for (int i = 0; i < n; ++i) {\n            if (circles[i].first.first <= circles[i].second) {\n                graph[n].push_back(i);\n                graph[i].push_back(n);\n            }\n            if (X - circles[i].first.first <= circles[i].second) {\n                graph[n + 2].push_back(i);\n                graph[i].push_back(n + 2);\n            }\n            if (circles[i].first.second <= circles[i].second) {\n                graph[n + 1].push_back(i);\n                graph[i].push_back(n + 1);\n            }\n            if (Y - circles[i].first.second <= circles[i].second) {\n                graph[n + 3].push_back(i);\n                graph[i].push_back(n + 3);\n            }\n            for (int j = i + 1; j < n; ++j) {\n                double dist = sqrt(pow(circles[i].first.first - circles[j].first.first, 2) +\n                                   pow(circles[i].first.second - circles[j].first.second, 2));\n                if (circles[i].second + circles[j].second >= dist) {\n                    graph[i].push_back(j);\n                    graph[j].push_back(i);\n                }\n            }\n        }\n\n        int block = 0;\n        block = max(block, bfs(graph, n, n + 1, n + 2, n + 4)); // bottom-left corner\n        block = max(block, bfs(graph, n + 3, n + 2, n + 1, n + 4)); // top-right corner\n\n        return !block;\n    }\n};\n\n",
    "submit_ts": "1722137536",
    "subm_id": "1335766600"
}