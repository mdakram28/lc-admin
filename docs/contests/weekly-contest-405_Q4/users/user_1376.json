{
    "username": "shubhambhatt037",
    "submission": "class Solution {\npublic:\n    struct TrieNode {\n        unordered_map<char, TrieNode*> next;\n        vector<pair<int, int>> wordCost;\n    };\n\n    class Trie {\n    public:\n    \n        TrieNode* root;\n        Trie() { root = new TrieNode(); }\n\n        void addWord(const string& word, int index, int cost) {\n            TrieNode* node = root;\n            for (char c : word) {\n                if (!node->next.count(c))\n                    node->next[c] = new TrieNode();\n                node = node->next[c];\n            }\n            node->wordCost.push_back({index, cost});\n        }\n\n        TrieNode* getRoot() {\n            return root;\n        }\n    };\n\n    void buildTrie(Trie& trie, const vector<string>& words, const vector<int>& costs) {\n        for (int i = 0; i < words.size(); ++i) {\n            trie.addWord(words[i], i, costs[i]);\n        }\n    }\n\n    int findMinCost(TrieNode* root, const string& target, const vector<string>& words, vector<int>& dp) {\n        int targetLength = target.size();\n        \n        for (int i = 0; i < targetLength; ++i) {\n            if (dp[i] == INT_MAX) continue;\n\n            TrieNode* node = root;\n            for (int j = i; j < targetLength; ++j) {\n                if (!node->next.count(target[j])) break;\n                node = node->next[target[j]];\n                for (auto& wc : node->wordCost) {\n                    int wordIdx = wc.first;\n                    int wordCost = wc.second;\n                    int wordLen = words[wordIdx].size();\n                    if (i + wordLen <= targetLength) {\n                        dp[i + wordLen] = min(dp[i + wordLen], dp[i] + wordCost);\n                    }\n                }\n            }\n        }\n\n        return dp[targetLength];\n    }\n\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int targetLength = target.size();\n        vector<int> dp(targetLength + 1, INT_MAX);\n        dp[0] = 0;\n\n        Trie trie;\n        buildTrie(trie, words, costs);\n\n        int result = findMinCost(trie.getRoot(), target, words, dp);\n        return result == INT_MAX ? -1 : result;\n    }\n};\n",
    "submit_ts": "1720324056",
    "subm_id": "1312390530"
}