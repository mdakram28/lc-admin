{
    "username": "johmm",
    "submission": "class Solution:\n    def largestPalindrome(self, n: int, k: int) -> str:\n        if k == 1 or k == 3 or k == 9:\n            return \"9\" * n\n        if k == 2:\n            if n > 2:\n                return \"8\" + (\"9\" * (n-2)) + \"8\"\n            else:\n                return \"8\"* n\n        if k == 4:\n            if n > 4:\n                return \"88\" + (\"9\" * (n-4)) + \"88\"\n            return \"8\" * n\n        if k == 8:\n            if n > 6:\n                return \"888\" + (\"9\" * (n - 6)) + \"888\"\n            else:\n                return \"8\" * n\n        if k == 6:\n            if n <= 2:\n                return n * \"6\"\n            if n == 3:\n                return \"888\"\n            if n == 4:\n                return \"8778\"\n            else:\n                if n % 2 == 0:\n                    remainder = (16 + (9 * (n - 4))) % 3\n                    if remainder == 0:\n                        return \"8\" + (\"9\" * (n-2)) + \"8\"\n                    elif remainder == 1:\n                        return \"8\" + ((\"9\" * ((n-4)//2)) + \"77\" + (\"9\" * ((n-4)//2))) + \"8\"\n                    else:\n                        return \"8\" + ((\"9\" * ((n-4)//2)) + \"88\" + (\"9\" * ((n-4)//2))) + \"8\"\n                else:\n                    remainder = (16 + (9 * (n - 3))) % 3\n                    if remainder == 0:\n                        return \"8\" + (\"9\" * (n-2)) + \"8\"\n                    elif remainder == 1:\n                        return \"8\" + ((\"9\" * ((n-3)//2)) + \"8\" + (\"9\" * ((n-3)//2))) + \"8\"\n                    else:\n                        return \"8\" + ((\"9\" * ((n-3)//2)) + \"7\" + (\"9\" * ((n-3)//2))) + \"8\"\n        if k == 5:\n            if n == 1:\n                return \"5\"\n            return \"5\" + (\"9\" * (n-2)) + \"5\"\n\n        \n        if k == 7:\n            if n <= 2:\n                return \"7\" * n\n            if n % 2:\n                poss = []\n                for i in range(10):\n                    poss.append(\"9\" * ((n-1)//2) + str(i) + \"9\" * ((n-1)//2))\n            else:\n                poss = []\n                for i in range(10):\n                    poss.append(\"9\" * ((n-2)//2) + str(i) + str(i) + \"9\" * ((n-2)//2))\n\n            def is_divisible_by_7(num_str):\n                if not num_str.isdigit():\n                    return False  # Not a valid number string\n\n                if len(num_str) <= 18:  # Can safely use built-in modulo for smaller numbers\n                    return int(num_str) % 7 == 0\n\n                # For larger numbers, use the division rule for 7\n                running_remainder = 0\n                for digit in num_str:\n                    running_remainder = (running_remainder * 10 + int(digit)) % 7\n\n                return running_remainder == 0\n\n\n            \n            for i in poss[::-1]:\n                if is_divisible_by_7(i):\n                    return i\n\n            \n        \n        \n        ",
    "submit_ts": "1723953034",
    "subm_id": "1359810666"
}