{
    "username": "Chirag Goel",
    "submission": "class Solution {\npublic:\n    long long maximumValueSum(vector<vector<int>>& board) {\n        int n=board.size(),m=board[0].size();\n        // vector<pair<long long int,long long int>> sorted_row;\n        // for(int i=0;i<n;i++){\n        //     long long int s=0;\n        //     for(int j=0;j<m;j++){\n        //         s+=board[i][j];\n        //     }\n        //     sorted_row.push_back({s,i});\n        // }\n        // sort(sorted_row.begin(),sorted_row.end());\n        // vector<vector<int>> new_b;\n        // for(auto it: sorted_row){\n        //     new_b.push_back(board[it.second]);\n        // }\n        // vector<pair<long long int,long long int>> sorted_col;\n        // for(int i=0;i<m;i++){\n        //     long long int s=0;\n        //     for(int j=0;j<n;j++){\n        //         s+=new_b[j][i];\n        //     }\n        //     sorted_col.push_back({s,i});\n        // }\n        // sort(sorted_col.begin(),sorted_col.end());\n        // vector<vector<int>> ans(n, vector<int>(m));\n        // for (int i = 0; i < n; ++i) {\n        //     for (int j = 0; j < m; ++j) {\n        //         ans[i][j] = new_b[i][sorted_col[j].second];\n        //     }\n        // }\n        // vector<vector<vector<long long int>>> dp1(n,vector<vector<long long int>>(m,vector<long long int>(m, 0)));\n        long long int dp1[n][m][m];\n        memset(dp1, 0, sizeof(dp1));\n        for(int i = n-1; i>=0;i--){\n            for(int j = 0;j<m;j++){\n                for(int k = 0; k<m;k++){\n                    dp1[i][j][k] = LONG_MIN;\n                    if(i+1<n) dp1[i][j][k]=max(dp1[i][j][k],dp1[i+1][j][k]);\n                    for(int f = 0; f<m;f++){\n                        if(f!=j&&f!=k)dp1[i][j][k] = max(dp1[i][j][k], board[i][f]*1LL);\n                    }\n                }\n            }\n        }\n        vector<vector<long long int>> dp2(n,vector<long long int>(m,0));\n        for(int i = n-2; i>=0;i--){\n            for(int j = 0; j<m;j++){\n                dp2[i][j] = LONG_MIN;\n                if(i+1<n-1)dp2[i][j] = dp2[i+1][j];\n                for(int k = 0; k<m;k++){\n                    if(k!=j){\n                        dp2[i][j] = max(dp2[i][j],(board[i][k]*1LL+dp1[i+1][j][k]));\n                    }\n                }\n            }\n        }\n        long long int cans = LONG_MIN;\n        for(int i = n-3;i>=0;i--){\n            for(int j = 0; j<m;j++){\n                cans = max(cans,(board[i][j]*1LL + dp2[i+1][j]));\n            }\n        }\n        return cans;\n    }\n};",
    "submit_ts": "1723909672",
    "subm_id": "1359201403"
}