{
    "username": "Vatsal__",
    "submission": "import java.util.*;\n\npublic class Solution {\n    public int minChanges(int[] nums, int maxVal) {\n        Map<Integer, List<Integer>> diffToMaxList = new HashMap<>();\n        List<Integer> maxList = new ArrayList<>();\n\n        int n = nums.length;\n        int halfN = n / 2;\n\n        for (int i = 0; i < halfN; i++) {\n            int left = nums[i];\n            int right = nums[n - i - 1];\n            int difference = Math.abs(left - right);\n            int maxValue = Math.max(left, Math.max(right, Math.max(maxVal - left, maxVal - right)));\n\n            diffToMaxList.computeIfAbsent(difference, x -> new ArrayList<>()).add(maxValue);\n            maxList.add(maxValue);\n        }\n\n        int minChanges = n;\n        Collections.sort(maxList);\n        \n        for (Map.Entry<Integer, List<Integer>> entry : diffToMaxList.entrySet()) {\n            int currentDiff = entry.getKey();\n            List<Integer> valueList = entry.getValue();\n\n            int changes = computeLowerBound(maxList, currentDiff) * 2 + (halfN - computeLowerBound(maxList, currentDiff));\n\n            for (int value : valueList) {\n                if (value < currentDiff) {\n                    changes -= 2;\n                } else {\n                    changes -= 1;\n                }\n            }\n\n            minChanges = Math.min(minChanges, changes);\n        }\n\n        return minChanges;\n    }\n\n    private int computeLowerBound(List<Integer> sortedList, int target) {\n        int start = 0;\n        int end = sortedList.size();\n\n        while (start < end) {\n            int mid = start + (end - start) / 2;\n\n            if (sortedList.get(mid) < target) {\n                start = mid + 1;\n            } else {\n                end = mid;\n            }\n        }\n        return start;\n    }\n}\n",
    "submit_ts": "1721490150",
    "subm_id": "1327474487"
}