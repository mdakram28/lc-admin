{
    "username": "VirajAshar",
    "submission": "class Solution {\npublic:\n    int buildTree(vector<int> &v, vector<int> &tree, int n, int start, int end, int tn) {\n        if(start == end) {\n            if(start - 1 >= 0 && end + 1 < n)\n                return tree[tn] = (v[start-1] < v[start] && v[start] > v[start+1]);\n            else\n                return tree[tn] = 0;\n        }\n        \n        int mid = (start + end) / 2;\n        int leftAns = buildTree(v, tree, n, start, mid, tn*2);\n        int rightAns = buildTree(v, tree, n, mid+1, end, tn*2 + 1);\n        \n        return tree[tn] = (leftAns + rightAns);\n    }\n    \n    int updateTree(vector<int> &tree, int n, int start, int end, int left, int right, int tn, int val) {\n        // start...end left...right\n        // left...right start...end\n        if(end < left || right < start)\n            return tree[tn];\n        \n        // left...start..end...right\n        else if(left <= start && end <= right)\n            return tree[tn] = val;\n        \n        else {\n            int mid = (start + end) / 2;\n            int leftAns = updateTree(tree, n, start, mid, left, right, tn*2, val);\n            int rightAns = updateTree(tree, n, mid+1, end, left, right, tn*2 + 1, val);\n\n            return tree[tn] = (leftAns + rightAns);\n        }\n    }\n    \n    int fetch(vector<int> &tree, int n, int start, int end, int left, int right, int tn) {\n        if(end < left || right < start || left > right)\n            return 0;\n        else if(left <= start && end <= right)\n            return tree[tn];\n        else\n        {\n            int mid = (start + end) / 2;\n            int leftAns = fetch(tree, n, start, mid, left, right, tn*2);\n            int rightAns = fetch(tree, n, mid+1, end, left, right, tn*2 + 1);\n            \n            return leftAns + rightAns;\n        }\n    }\n    \n    vector<int> countOfPeaks(vector<int>& v, vector<vector<int>>& q) {\n        int n = v.size();\n        \n        vector<int> tree(n*32, 0);\n        \n        buildTree(v, tree, n, 0, n-1, 1);\n        \n        \n        // for(int i = 0; i < n; i++)\n        // {\n        //     for(int j = i; j < n; j++)\n        //     {\n        //         cout << fetch(tree, n, 0, n-1, i, j, 1) << ' ';\n        //     }\n        //     cout << endl;\n        // }\n        // cout << endl;\n        \n        vector<int> ans;\n        for(auto e : q) {\n            if(e[0] == 2) {\n                int idx = e[1], val = e[2];\n                // cout << idx << ' ' << val << \"#\\n\";\n                v[idx] = val;\n                if(idx+2 < n){\n                    if(v[idx+1] > v[idx] && v[idx+1] > v[idx+2])\n                        updateTree(tree, n, 0, n-1, idx+1, idx+1, 1, 1);\n                    else \n                        updateTree(tree, n, 0, n-1, idx+1, idx+1, 1, 0);\n                }\n                if(idx-2 >= 0) {\n                    if(v[idx-1] > v[idx] && v[idx-1] > v[idx-2])\n                        updateTree(tree, n, 0, n-1, idx-1, idx-1, 1, 1);\n                    else\n                        updateTree(tree, n, 0, n-1, idx-1, idx-1, 1, 0);\n                }\n                if(idx + 1 < n && idx - 1 >= 0) {\n                    if(v[idx] > v[idx-1] && v[idx] > v[idx+1]) {\n                        // cout << \"Updated idx as 1\\n\";\n                        updateTree(tree, n, 0, n-1, idx, idx, 1, 1);\n                    }\n                    else\n                        updateTree(tree, n, 0, n-1, idx, idx, 1, 0);\n                }\n                // for(int i = 0; i < n; i++)\n                // {\n                //     for(int j = i; j < n; j++)\n                //     {\n                //         cout << fetch(tree, n, 0, n-1, i, j, 1) << ' ';\n                //     }\n                //     cout << endl;\n                // }\n                // cout << endl;\n            } else {\n                int left = e[1] + 1, right = e[2] - 1;\n                int smallAns = fetch(tree, n, 0, n-1, left, right, 1);\n                ans.push_back(smallAns);\n            }\n        }\n        \n        return ans;\n    }\n};",
    "submit_ts": 1718509131.0
}