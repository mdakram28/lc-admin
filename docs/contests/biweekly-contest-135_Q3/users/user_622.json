{
    "username": "RockStar_14",
    "submission": "class Solution {\n    public int minChanges(int[] arr, int k) {\n        Map<Integer, Integer> map = new HashMap<>();\n        int n = arr.length;\n        for(int i = 0 ; i * 2 < n ; i++) {\n            int diff = Math.abs(arr[i] - arr[n - 1 - i]);\n            map.put(diff, map.getOrDefault(diff, 0) + 1);\n        }\n        PriorityQueue<Integer> pq = new PriorityQueue<>((a, b) -> map.get(b) - map.get(a));\n        for(int key : map.keySet()) {\n            pq.add(key);\n        }\n        int ans = n;\n        while(!pq.isEmpty() && ans > n / 2 - map.get(pq.peek())) {\n            int diff = pq.poll();\n            // System.out.println(diff);\n            int val = getMinChange(arr, k, diff, n);\n            // System.out.println(val);\n            ans = Math.min(ans, val);\n        }\n        return ans ;\n    }\n\n    private int getMinChange(int [] arr, int k, int diff, int n) {\n        int change = 0;\n        for(int i = 0 ; i * 2 < n ; i++) {\n            if(diff != Math.abs(arr[i] - arr[n - 1 - i])) {\n                if((arr[i] + diff <= k || arr[i] - diff >= 0) || (arr[n - 1 - i] + diff <= k || arr[n - 1 - i] - diff >= 0))\n                    change ++;\n                else change += 2;\n            }\n        }\n        return change;\n    }\n}",
    "submit_ts": "1721488789",
    "subm_id": "1327433251"
}