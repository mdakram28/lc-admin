{
    "username": "u-day",
    "submission": "\n\nclass TrieNode {\npublic:\n    unordered_map<char, TrieNode*> children;\n    int cost;\n\n    TrieNode() {\n        cost = INT_MAX; // Initialize cost to a large value\n    }\n};\n\nclass Trie {\npublic:\n    TrieNode* root;\n\n    Trie() {\n        root = new TrieNode();\n    }\n\n    void add(string word, int cost) {\n        TrieNode* node = root;\n        for (char c : word) {\n            if (node->children.find(c) == node->children.end()) {\n                node->children[c] = new TrieNode();\n            }\n            node = node->children[c];\n        }\n        node->cost = min(node->cost, cost);\n    }\n\n    int findCost(string substring) {\n        TrieNode* node = root;\n        for (char c : substring) {\n            if (node->children.find(c) == node->children.end()) {\n                return INT_MAX;\n            }\n            node = node->children[c];\n        }\n        return node->cost;\n    }\n};\n\nclass Solution {\npublic:\n    int minimumCost(string s, vector<string>& words, vector<int>& costs) {\n\n        Trie* trie = new Trie();\n        for (int i = 0; i < words.size(); ++i) {\n            trie->add(words[i], costs[i]);\n        }\n\n        int n = s.size();\n        vector<int> dp(n + 1, INT_MAX);\n        dp[0] = 0;\n\n        for (int i = 0; i < n; ++i) {\n            if (dp[i] == INT_MAX) {\n                continue;\n            }\n            TrieNode* node = trie->root;\n            for (int j = i; j < n; ++j) {\n                char c = s[j];\n                if (node->children.find(c) == node->children.end()) {\n                    break;\n                }\n                node = node->children[c];\n                if (node->cost != INT_MAX) {\n                    dp[j + 1] = min(dp[j + 1], dp[i] + node->cost);\n                }\n            }\n        }\n\n        return dp[n] != INT_MAX ? dp[n] : -1;\n    }\n};\n\n",
    "submit_ts": "1720322108",
    "subm_id": "1312340893"
}