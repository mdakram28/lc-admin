{
    "username": "MeetBrahmbhatt",
    "submission": "class Solution {\npublic:\n    int numberOfSubstrings(string s) {\n        int n = (int) s.size();\n        int ans = 0;\n\n        for (int i = 0; i < n; i++) {\n            if (s[i] == '0') {\n                continue;\n            }\n            int ptr = i;\n            while (ptr < n and s[ptr] == '1') {\n                ptr++;\n                ans += (ptr - i);\n            }\n            i = ptr - 1;\n        }\n        vector<int> nxt(n + 1, n);\n        \n        for (int i = n - 2; i >= 0; i--) {\n            nxt[i] = nxt[i + 1];\n            if (s[i + 1] == '0') {\n                nxt[i] = i + 1;\n            }\n        }\n        \n        auto get = [&] (int ones, int zeros, int extra) {\n            int need = max(0, zeros * zeros - ones);\n            return max(0, extra - need + 1);\n        };\n\n        for (int len = 1; len * len <= n; len++) {\n            int R = 0;\n            int cnt = 0;\n            for (int L = 0; L < n; L++) {\n                while (R < n and cnt < len) {\n                    cnt += s[R++] == '0';\n                }\n                if (cnt == len) {\n                    int ones = (R - L) - cnt;\n                    int extra = nxt[R - 1] - (R - 1) - 1;\n                    ans += get(ones, cnt, extra);\n                }\n                cnt -= s[L] == '0';\n            }\n        }\n\n        return ans;\n    }\n};",
    "submit_ts": "1722136571",
    "subm_id": "1335738552"
}