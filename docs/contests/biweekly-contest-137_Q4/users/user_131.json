{
    "username": "lm105013",
    "submission": "class Solution:\n    def maximumValueSum(self, board: List[List[int]]) -> int:\n        m, n = len(board), len(board[0])\n\n        rows = [[] for _ in range(m)]\n\n        cols = [[] for _ in range(n)]\n\n\n        idxes = defaultdict(list)\n\n        for i in range(m):\n            for j in range(n):\n                num = -board[i][j]\n                rows[i].append(num)\n                cols[j].append(num)\n                idxes[num].append((i, j))\n                if len(rows[i]) > 3:\n                    rows[i].sort()\n                    rem = rows[i].pop()\n                    ri, rj = idxes[rem].pop()\n                    cols[rj].remove(rem)\n                if len(cols[j]) > 3:\n                    cols[j].sort()\n                    rem = cols[j].pop()\n                    for ri, rj in idxes[rem]:\n                        if rj == j: break\n                    idxes[rem].remove((ri, rj))\n                    rows[ri].remove(rem)\n        \n        arr = []\n\n        for num in sorted(idxes.keys()):\n            for coor in idxes[num]:\n                arr.append((-num, coor))\n\n        def dfs(i, r1=-1, c1=-1, r2=-1, c2=-1):\n            if i == len(arr):\n                return -inf\n            val, coor = arr[i]\n            r, c = coor\n            if r2 != -1 and r not in (r1, r2) and c not in (c1, c2):\n                return val\n            res = dfs(i+1, r1, c1, r2, c2)\n            if r1 == -1:\n                res = max(res, val + dfs(i+1, r, c, r2, c2))\n            elif r2 == -1 and r != r1 and c != c1:\n                res = max(res, val + dfs(i+1, r1, c1, r, c))\n            return res\n        \n        return dfs(0)",
    "submit_ts": "1723908052",
    "subm_id": "1359136092"
}