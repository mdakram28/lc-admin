{
    "username": "Fasdr",
    "submission": "class Solution {\n    public boolean canReachCorner(int X, int Y, int[][] circles) {\n        int n = circles.length;\n        // n - left, n + 1 - right\n        UnionFind uf = new UnionFind(n + 2);\n        for (int i = 0; i < n; i++) {\n            if (blocksLeft(circles[i], X, Y)) {\n                uf.union(n, i);\n                // System.out.println(\"left\");\n            }\n                \n            if (blocksRight(circles[i], X, Y)){\n                uf.union(n + 1, i);\n                // System.out.println(\"right\");\n            }\n        }\n        \n        for (int i = 0; i < n - 1; i++) {\n            for (int j = i + 1; j < n; j++) {\n                if (connected(circles[i], circles[j])) \n                    uf.union(i, j);\n            }\n        }\n        \n        return uf.find(n) != uf.find(n + 1);\n    }\n    \n    private boolean blocksLeft(int[] circle, int X, int Y) {\n        long x = circle[0], y = circle[1], r = circle[2];\n        long rSq = r * r;\n        long dx = 0 - x;\n        long dy = 0;\n        if (y > Y)\n            dy = y - Y;\n        else if (y < 0)\n            dy = y;\n        if (dx * dx + dy * dy <= rSq)\n            return true;\n        dy = Y - y;\n        dx = 0;\n        if (x > X)\n            dx = x - X;\n        else if (x < 0)\n            dx = x;\n        if (dx * dx + dy * dy <= rSq)\n            return true;\n        return false;\n    }\n    \n    private boolean blocksRight(int[] circle, int X, int Y) {\n        long x = circle[0], y = circle[1], r = circle[2];\n        long rSq = r * r;\n        long dx = X - x;\n        long dy = 0;\n        if (y > Y)\n            dy = y - Y;\n        else if (y < 0)\n            dy = y;\n        if (dx * dx + dy * dy <= rSq)\n            return true;\n        dy = 0 - y;\n        dx = 0;\n        if (x > X)\n            dx = x - X;\n        else if (x < 0)\n            dx = x;\n        if (dx * dx + dy * dy <= rSq)\n            return true;\n        return false;\n    }\n    \n    private boolean connected(int[] cr1, int[] cr2) {\n        long x1 = cr1[0], y1 = cr1[1], r1 = cr1[2];\n        long x2 = cr2[0], y2 = cr2[1], r2 = cr2[2];\n        long distSq = (y1 - y2) * (y1 - y2) + (x1 - x2) * (x1 - x2);\n        long rSq = (r1 + r2) * (r1 + r2);\n        return distSq <= rSq;\n    }\n}\n\nclass UnionFind {\n    public int[] root;\n    public int n;\n    \n    public UnionFind(int n) {\n        this.n = n;\n        root = new int[n];\n        for (int i = 0; i < n; i++)\n            root[i] = i;\n    }\n    \n    public int find(int u) {\n        return root[u] == u ? u : (root[u] = find(root[u]));\n    }\n    \n    public void union(int u, int v) {\n        u = find(u);\n        v = find(v);\n        root[v] = u;\n    }\n    \n}",
    "submit_ts": "1722138829",
    "subm_id": "1335800778"
}