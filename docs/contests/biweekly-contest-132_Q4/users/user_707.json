{
    "username": "shingaladevarsh",
    "submission": "class Solution {\n    fun maximumLength(nums: IntArray, k: Int): Int {\n    val n = nums.size\n    val dp = Array(n) { IntArray(k + 1) { 1 } }\n    var ans = 1\n    val vk = IntArray(k + 1) { -1 }\n    val numOccurrences = Array<MutableMap<Int, Int>>(k + 1) { HashMap() }\n\n    for (i in 0 until n) {\n        for (j in 0..k) {\n            for (l in 0 until j) {\n                dp[i][j] = max(dp[i][j], 1 + vk[l])\n            }\n\n            if (numOccurrences[j].containsKey(nums[i])) {\n                dp[i][j] = max(dp[i][j], 1 + numOccurrences[j][nums[i]]!!)\n            }\n\n            ans = max(ans, dp[i][j])\n        }\n\n        for (j in 0..k) {\n            vk[j] = max(vk[j], dp[i][j])\n            numOccurrences[j][nums[i]] = max(numOccurrences[j].getOrDefault(nums[i], 0), dp[i][j])\n        }\n    }\n    return ans\n}\n}",
    "submit_ts": 1717862363.0
}