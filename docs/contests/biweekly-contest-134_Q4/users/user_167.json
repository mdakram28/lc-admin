{
    "username": "LCalGaib",
    "submission": "class Solution {\npublic:\n    long long countSubarrays(vector<int>& nums, int k) {\n        int n = nums.size();\n\n        vector<array<int, 30>> P(n);\n        for (int i = 0; i < n; ++i) {\n            auto a = nums[i];\n            for (int j = 0; j < 30; ++j) {\n                if (1 << j & a) ++P[i][j];\n                if (i > 0) P[i][j] += P[i - 1][j];\n            }\n        }\n\n        // P[i][j] = # of set j-th bits in the subarray nums[0:i + 1]\n\n        // computes &A[l : r + 1]\n        const auto get_subarray_and = [&](auto l, auto r) {\n            int res = 0, required = r - l + 1;\n            for (int i = 0; i < 30; ++i) {\n                if (P[r][i] - (l == 0 ? 0 : P[l - 1][i]) == required)\n                    res += 1 << i;\n            }\n            return res;\n        };\n\n        const auto bs1 = [&](auto i) {\n            int l = i, r = n - 1;\n\n            const auto ok = [&](auto m) {\n                return get_subarray_and(i, m) >= k;\n            };\n\n            while (l < r) {\n                auto m = l + (r - l) / 2;\n                if (ok(m)) l = m + 1;\n                else r = m;\n            }\n\n            return ok(l) ? l : l - 1;\n        };\n        \n        const auto bs2 = [&](auto i) {\n            int l = i, r = n - 1;\n\n            const auto ok = [&](auto m) {\n                return get_subarray_and(i, m) <= k;\n            };\n\n            while (l < r) {\n                auto m = l + (r - l) / 2;\n                if (ok(m)) r = m;\n                else l = m + 1;\n            }\n\n            return l;\n        };\n\n\n        auto res = 0LL;\n        for (int i = 0; i < n; ++i) {\n            auto a = bs2(i);\n            auto b = bs1(i);\n            res += a >= 0 && b < n && a <= b && get_subarray_and(i, a) == k ? b - a + 1 : 0;\n        }\n\n        return res;\n    }\n};",
    "submit_ts": "1720278189",
    "subm_id": "1311698368"
}