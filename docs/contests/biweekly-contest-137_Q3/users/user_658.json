{
    "username": "xylu",
    "submission": "class Solution {\npublic:\n    long long maximumValueSum(vector<vector<int>>& board) {\n        int n = board.size(), m = board[0].size();\n        vector mx(n, vector(m, vector<long long>(m, -1e9)));\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                int t = -1e9;\n                for (int k = j; k < m; k++) {\n                    t = max(t, board[i][k]);\n                    mx[i][j][k] = t;\n                }\n            }\n        }\n        vector dp(n+1, vector(3, vector(m+1, vector<long long>(m+1, -1e12))));\n        auto dfs = [&](auto &&f, int i, int c, int a, int b) -> long long {\n            if (i == n) return -1e10;\n            if (dp[i][c][a][b] != -1e12) return dp[i][c][a][b];\n            long long ans = f(f, i+1, c, a, b);\n            if (c == 0) {\n                for (int j = 0; j < m; j++) {\n                    ans = max(ans, f(f, i+1, c+1, j, b) + board[i][j]);\n                }\n            } else if (c == 1) {\n                for (int j = 0; j < m; j++) {\n                    if (j == a) continue;\n                    ans = max(ans, f(f, i+1, c+1, min(a, j), max(a, j)) + board[i][j]);\n                }\n            } else {\n                if (a > 0) ans = max(ans, mx[i][0][a-1]);\n                if (a < b-1) ans = max(ans, mx[i][a+1][b-1]);\n                if (b < m-1) ans = max(ans, mx[i][b+1][m-1]);\n            }\n            return dp[i][c][a][b] = ans;\n        };\n        return dfs(dfs, 0, 0, m, m);\n    }\n};",
    "submit_ts": "1723906303",
    "subm_id": "556317594"
}