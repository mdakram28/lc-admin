{
    "username": "zen-dijkstra7pa",
    "submission": "class Fenwick:\n    __slots__ = 'tree'\n\n    def __init__(self, n: int):\n        self.tree = [0] * n\n\n    # \u628a\u4e0b\u6807\u4e3a i \u7684\u5143\u7d20\u589e\u52a0 1\n    def add(self, i: int, val: int) -> None:\n        while i < len(self.tree):\n            self.tree[i] += val\n            i += i & -i\n\n    # \u8fd4\u56de\u4e0b\u6807\u5728 [1,i] \u7684\u5143\u7d20\u4e4b\u548c\n    def pre(self, i: int) -> int:\n        res = 0\n        while i > 0:\n            res += self.tree[i]\n            i &= i - 1\n        return res\nclass Solution:\n    def countOfPeaks(self, nums: List[int], queries: List[List[int]]) -> List[int]:\n        n = len(nums)\n        tr = Fenwick(n + 1)\n        ans = []\n\n        def check(idx: int) -> bool:\n            return nums[idx - 1] < nums[idx] and nums[idx] > nums[idx + 1]\n\n        for i in range(1, n - 1):\n            if check(i):\n                tr.add(i, 1)\n\n        for x, y, z in queries:\n            if x == 1:\n                if z - y < 2:\n                    ans.append(0)\n                    continue\n                v = tr.pre(z - 1) - tr.pre(y)\n                ans.append(v)\n            else:\n                v = nums[y]\n                for index in (y - 1, y, y + 1):\n                    if 0 < index < n - 1:\n                        flag = check(index)\n                        nums[y] = z\n                        if check(index) != flag:\n                            if flag:\n                                tr.add(index, -1)\n                            else:\n                                tr.add(index, 1)\n                        nums[y] = v\n                nums[y] = z\n        return ans",
    "submit_ts": 1718507543.0
}