{
    "username": "\u5927\u667a\u82e5\u611a",
    "submission": "class Solution {\n    private boolean check(byte[] num, int k) {\n        if (k == 1 || k == 2 || k == 3 || k == 4 || k == 5 || k == 8 || k == 9) {\n            return true;\n        }\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < num.length; ++i) {\n            sb.append(num[i]+\"\");\n        }\n        java.math.BigInteger bi = new java.math.BigInteger(sb.toString());\n        boolean res = bi.mod(java.math.BigInteger.valueOf(k)) == java.math.BigInteger.ZERO;\n        // System.out.println(\"check:\"+bi+\",res:\"+res);\n        return res;\n    }\n\n    private boolean dfs(byte[] num, int depth, int k) {\n        if (depth > num.length - 1 - depth) {\n            if(check(num, k)) {\n                return true;\n            }\n            return false;\n        }\n        for (byte i = 9; i >= 0; --i) {\n            num[depth] = num[num.length - 1 - depth] = i;\n            if(dfs(num, depth + 1, k)) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    public String largestPalindrome(int n, int k) {\n        boolean hasRun = false;\n        byte[] num = new byte[n];\n        if (k == 6) {\n            if (n == 1) {\n                return \"6\";\n            }\n            if (n == 2) {\n                return \"66\";\n            }\n        }\n        if (k == 7) {\n            if (n == 1) {\n                return \"7\";\n            }\n            if (n == 2) {\n                return \"77\";\n            }\n        }\n        if (k == 4) {\n            if (n == 1) {\n                return \"8\";\n            }\n            if (n == 2) {\n                return \"88\";\n            }\n            if (n == 3) {\n                return \"888\";\n            }\n            hasRun = true;\n            num[0] = num[n - 1] = 8;\n            num[1] = num[n - 2] = 8;\n            dfs(num, 2, k);\n        }\n        if (k == 8) {\n            if (n == 1) {\n                return \"8\";\n            }\n            if (n == 2) {\n                return \"88\";\n            }\n            if (n == 3) {\n                return \"888\";\n            }\n            if (n == 4) {\n                return \"8888\";\n            }\n            if (n == 5) {\n                return \"88888\";\n            }\n            if (n == 6) {\n                return \"888888\";\n            }\n            hasRun = true;\n            num[0] = num[n - 1] = 8;\n            num[1] = num[n - 2] = 8;\n            num[2] = num[n - 3] = 8;\n            dfs(num, 3, k);\n        }\n        if (!hasRun) {\n            byte[] st = {0, 9, 8, 9, 8, 5, 8, 9, 8, 9};\n            num[0] = num[n - 1] = st[k];\n            dfs(num, 1, k);\n        }\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < n; ++i) {\n            sb.append(num[i]+\"\");\n        }\n        return sb.toString();\n    }\n}",
    "submit_ts": "1723953503",
    "subm_id": "556418088"
}