{
    "username": "sohanpatharla",
    "submission": "class Solution {\n    static class TrieNode {\n        Map<Character, TrieNode> children = new HashMap<>();\n        List<Integer> indices = new ArrayList<>();\n    }\n\n    static class Trie {\n        TrieNode root = new TrieNode();\n\n        void insert(String word, int index) {\n            TrieNode node = root;\n            for (char c : word.toCharArray()) {\n                node.children.putIfAbsent(c, new TrieNode());\n                node = node.children.get(c);\n            }\n            node.indices.add(index);\n        }\n\n        void searchAndUpdateDP(String target, int start, int[] dp, String[] words, int[] costs) {\n            TrieNode node = root;\n            for (int i = start; i < target.length(); i++) {\n                node = node.children.get(target.charAt(i));\n                if (node == null) {\n                    break;\n                }\n                for (int index : node.indices) {\n                    int nextIndex = i + 1;\n                    int cost = costs[index];\n                    if (dp[start] != Integer.MAX_VALUE) {\n                        dp[nextIndex] = Math.min(dp[nextIndex], dp[start] + cost);\n                    }\n                }\n            }\n        }\n    }\n\n    public int minimumCost(String target, String[] words, int[] costs) {\n        int n = target.length();\n        int[] dp = new int[n + 1];\n        Arrays.fill(dp, Integer.MAX_VALUE);\n        dp[0] = 0;\n\n        Trie trie = new Trie();\n        for (int i = 0; i < words.length; i++) {\n            trie.insert(words[i], i);\n        }\n\n        for (int i = 0; i < n; i++) {\n            if (dp[i] == Integer.MAX_VALUE) continue;\n            trie.searchAndUpdateDP(target, i, dp, words, costs);\n        }\n\n        return dp[n] == Integer.MAX_VALUE ? -1 : dp[n];\n    }\n}",
    "submit_ts": "1720323746",
    "subm_id": "1312383033"
}