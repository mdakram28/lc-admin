{
    "username": "\u7693\u9996\u4e0d\u5026.GRH",
    "submission": "\n# -*- coding: utf-8 -*-\nfrom typing import List, Tuple, Optional\nfrom collections import deque, Counter\nfrom queue import PriorityQueue\nimport math\nfrom functools import lru_cache\nfrom sortedcontainers import SortedDict, SortedSet\nimport random\nimport copy\nimport sys\nsys.setrecursionlimit(9999999)\n\nMOD = 10**9 + 7\n\n\n\n\nclass FenwickTree:\n    # \u533a\u95f4\u4e0b\u6807\u662f[0,1,2,......n]\n    def __init__(self, n):\n        self.n = n\n        self.sum_seg = [0] * (self.n + 1)       # \u5206\u6bb5\u5b58\u50a8\u7684\u533a\u95f4\u548c sum_seg[x]\u8868\u793a\u7684\u662fx\u4f4d\u7f6e\u7ed3\u5c3e\uff0c\u957f\u5ea6\u4e3ax&(-x)\u7684\u533a\u95f4\u4e2d\u7684\u6570\u503c\u7684\u548c\n\n    # \u83b7\u53d6x\u4f4d\u7f6e\u7684\u539f\u59cb\u6570\u503c\n    def get_orig_val(self, x):\n        x += 1\n        if x < 1 or x > self.n:\n            raise IndexError(f'error idx = {x}')\n\n        ans = self.sum_seg[x]\n        lca = x & (x-1)         # \u6700\u8fd1\u516c\u5171\u7956\u5148\n        x -= 1\n        while x != lca:\n            ans -= self.sum_seg[x]\n            x &= (x-1)\n        return ans\n\n\n    # \u83b7\u53d6\u533a\u95f4[0, end]\u7684\u6570\u503c\u548c\n    def __get_sum_with_end(self, end):     # \u8fd9\u91ccend\u662f\u5185\u90e8\u5750\u6807\uff0c\u4e0d\u662f\u5916\u90e8\u5750\u6807\n        ans = 0\n        while end:\n            ans += self.sum_seg[end]\n            end &= (end - 1)\n        return ans\n\n    # \u83b7\u53d6\u533a\u95f4\u7684\u6570\u636e\u548c\n    def get_sum(self, start, end):\n        start, end = start+1, end+1\n        if not (1 <= start <= end <= self.n):\n            raise IndexError(f'bad range {(start-1, end-1)}')\n\n        if start == 1:\n            return self.__get_sum_with_end(end)\n        return self.__get_sum_with_end(end) - self.__get_sum_with_end(start-1)\n\n    # \u66f4\u65b0x\u4f4d\u7f6e\u6570\u503c\u4e3aval\n    def update_val(self, x, val):\n        orig_val = self.get_orig_val(x)\n        x += 1\n\n        delta = val - orig_val\n        while x <= self.n:\n            self.sum_seg[x] += delta\n            x += x & (-x)\n\n    # x\u4f4d\u7f6e\u589e\u52a0\u6570\u503cdelta\n    def add_val(self, x, delta):\n        x += 1\n        while x <= self.n:\n            self.sum_seg[x] += delta\n            x += x & (-x)\n\n\nclass Solution:\n    def countKConstraintSubstrings(self, s: str, k: int, queries: List[List[int]]) -> List[int]:\n\n        n = len(s)\n        seg_len = [0] * n\n\n        jj = -1\n\n        c0 = 0\n        c1 = 0\n        for ii in range(n):\n\n\n\n            while jj+1 < n:\n                nc0 = c0\n                nc1 = c1\n                if s[jj+1] == '0':\n                    nc0 += 1\n                else:\n                    nc1 += 1\n\n                if nc0 > k and nc1 > k:\n                    break\n\n                c0 = nc0\n                c1 = nc1\n                jj += 1\n\n            seg_len[ii] = jj-ii+1\n\n            if s[ii] == '0':\n                c0 -= 1\n            else:\n                c1 -= 1\n\n\n        t = FenwickTree(n+5)\n        for ii in range(n):\n            t.add_val(ii, seg_len[ii])\n\n\n        # print(seg_len)\n\n\n        ans = []\n        for st, ed in queries:\n\n            l, r = st, ed\n            p = None\n            while l <= r:\n                mid = (l+r) >> 1\n\n                pos = mid + seg_len[mid] - 1\n                if pos > ed:\n                    p = mid\n                    r = mid - 1\n                else:\n                    l = mid + 1\n\n\n            val = None\n            if p is None:\n                val = t.get_sum(st, ed)\n            else:\n                val = 0\n                if p-1 >= st:\n                    val += t.get_sum(st, p-1)\n\n                #    p, p+1, ....... ed\n                #   ed-p+1, ed-(p+1)+1, .... ed-ed+1\n                A = ed-p+1\n                B = 1\n                k = A-B+1\n\n                val += ((A+B)*k) // 2\n\n\n            ans.append(val)\n\n        return ans\n",
    "submit_ts": "1723952714",
    "subm_id": "556413239"
}