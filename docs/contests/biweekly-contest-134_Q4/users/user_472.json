{
    "username": "rain-sure",
    "submission": "class Solution {\npublic:\n    long long countSubarrays(vector<int>& nums, int k) {\n        int n = nums.size();\n        long long res = 0;\n        vector s(n + 1, vector<int>(31));\n        for(int i = 1; i <= n; i ++) {\n            for(int j = 0; j < 31; j ++) {\n                s[i][j] = s[i - 1][j];\n                if(nums[i - 1] >> j & 1) {\n                    s[i][j] ++;\n                }\n            }\n        }\n        auto get([&](int l, int r) {\n            long long res = 0;\n            for(int i = 0; i <= 30; i ++) {\n                int cnt = s[r][i] - s[l - 1][i];\n                if(cnt >= (r - l + 1)) {\n                    res += (1ll << i);\n                }\n            }\n            return res;\n        });\n        for(int i = 1; i <= n; i ++) {\n            int l = i, r = n;\n            while(l < r) {\n                int mid = (l + r + 1) >> 1;\n                if(get(i, mid) >= k) l = mid;\n                else r = mid - 1;\n            }\n            if(get(i, l) == k) {\n                int R = l;\n                l = i, r = n;\n                while(l < r) {\n                    int mid = (l + r) >> 1;\n                    if(get(i, mid) <= k) r = mid;\n                    else l = mid + 1;\n                }\n                if(get(i, l) == k) {\n                    res += (R - l + 1);\n                }\n            }\n        }\n        return res;\n    }\n};",
    "submit_ts": "1720279054",
    "subm_id": "544565727"
}