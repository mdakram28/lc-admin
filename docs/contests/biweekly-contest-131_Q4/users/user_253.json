{
    "username": "erel3",
    "submission": "const int sz = 50010;\nclass Solution {\n    int t[4 * sz];\n    int td[4 * sz];\n    \n    void build(int v, int tl, int tr) {\n        if (tl == tr) {\n            t[v] = tl;\n            td[v] = 0;\n            return;\n        }\n        int tm = (tl + tr) >> 1;\n        build(v * 2 + 1, tl, tm);\n        build(v * 2 + 2, tm + 1, tr);\n        t[v] = max(t[v * 2 + 1], t[v * 2 + 2]);\n        td[v] = 0;\n    }\n    \n    void push(int v, int tl, int tr) {\n        td[v * 2 + 1] += td[v];\n        td[v * 2 + 2] += td[v];\n        td[v] = 0;\n        t[v] = max(t[v * 2 + 1] - td[v * 2 + 1], t[v * 2 + 2] - td[v * 2 + 2]);\n    }\n    \n    int get(int v, int tl, int tr, int p) {\n        if (tl == tr) return t[v] - td[v];\n        push(v, tl, tr);\n        int tm = (tl + tr) >> 1;\n        if (p <= tm) {\n            return get(v * 2 + 1, tl, tm, p);\n        } else {\n            return get(v * 2 + 2, tm + 1, tr, p);            \n        }\n    }\n    \n    void dec(int v, int tl, int tr, int lf, int rg, int d) {\n        if (tr < lf || rg < tl) return;\n        if (lf <= tl && tr <= rg) {\n            td[v] += d;\n            return;\n        }\n        push(v, tl, tr);\n        int tm = (tl + tr) >> 1;\n        dec(v * 2 + 1, tl, tm, lf, rg, d);\n        dec(v * 2 + 2, tm + 1, tr, lf, rg, d);\n        t[v] = max(t[v * 2 + 1] - td[v * 2 + 1], t[v * 2 + 2] - td[v * 2 + 2]);\n    }\n    \n    int mx(int v, int tl, int tr, int lf, int rg) {\n        if (tr < lf || rg < tl) return 0;\n        if (lf <= tl && tr <= rg) {\n            return t[v] - td[v];\n        }\n        push(v, tl, tr);\n        int tm = (tl + tr) >> 1;\n        return max(mx(v * 2 + 1, tl, tm, lf, rg),\n        mx(v * 2 + 2, tm + 1, tr, lf, rg));\n    }\n    \npublic:\n    vector<bool> getResults(vector<vector<int>>& queries) {\n        vector<bool> ans;\n        set<int> st;\n        st.insert(sz - 5);\n        build(0, 0, sz - 1);\n        for (int i = 0; i < queries.size(); i++) {\n            if (queries[i][0] == 1) {\n                int v = get(0, 0, sz - 1, queries[i][1]);\n\n                int rg = *st.lower_bound(queries[i][1]);\n                dec(0, 0, sz - 1, queries[i][1], rg - 1, v);\n                st.insert(queries[i][1]);\n                \n                // for (int j = 0; j < 10; j++) {\n                //     cout << get(0, 0, sz - 1, j) << \" \";\n                // } cout << endl;\n                \n            } else {\n                int x = mx(0, 0, sz - 1, 0, queries[i][1] - 1);\n                // cout << x << endl;\n                ans.push_back(\n                    x >= queries[i][2] - 1\n                );\n            }\n        }\n        return ans;\n    }\n};",
    "submit_ts": 1716651237.0
}