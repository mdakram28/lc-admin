{
    "username": "lucasomee006",
    "submission": "class TrieNode:\n \n    def __init__(self, char, cost=float('inf'), is_end=False):\n \n        self.char = char\n    \n        self.is_end = is_end\n \n        self.cost = cost\n \n        self.children = {}\nclass Trie:\n    def __init__(self):\n        self.root = TrieNode(\"\")\n    \n    def insert(self, word, cost):\n        node = self.root\n \n        for i, char in enumerate(word):\n            if char in node.children:\n                node = node.children[char]\n            else:\n                new_node = TrieNode(char)\n                node.children[char] = new_node\n                node = new_node\n        node.is_end = True\n        node.cost = min(node.cost, cost)\n         \n        \n\nclass Solution:\n    def minimumCost(self, target: str, words: List[str], costs: List[int]) -> int:\n        \"\"\"\n        \n        \n        -Go through the array\n        -At each index, look to the right and find the best \n        maybe:\n        -Make words into a trie, storing each cost as a part of the trie\n        -For each thing in target, keep iterating through the trie\n        \n        #construct a trie, go through the trie with words. At each stage, either pick or don't pick the current trie\n        \n        \n        -check if you can construct a string with a certain cost, then b.s. on the cost\n        \"\"\"\n        word = Trie()\n        for i in range(0, len(words)):\n            word.insert(words[i], costs[i])\n        \n        wordsDict = {words[i]: costs[i] for i in range(len(words))}\n        for i in range(len(words)):\n            wordsDict[words[i]] = min(costs[i], wordsDict[words[i]])\n       \n        @cache\n        def dp(i): #i is the one that the word starts at\n            \n            if i >= len(target):\n                return 0\n            best = float('inf')\n            node = word.root\n            \n            for j in range(i, len(target)):\n                if target[j] not in node.children:\n                    break\n                node = node.children[target[j]]\n                if not node.is_end:\n                    continue\n                \n                best = min(best, node.cost + dp(j+1))\n                \n                \n                \n#                 if target[i:j] in wordsDict:\n#                     best = min(best, wordsDict[target[i:j]]+dp(j))\n                    \n            if best == float('inf') and i == 0:\n                return -1\n            return best\n        #binary search on the required cost?\n        #then you would have to \n        return dp(0)\n",
    "submit_ts": "1720323818",
    "subm_id": "1312384790"
}