{
    "username": "david-c",
    "submission": "#include <iostream>\n#include <memory>\n#include <string>\n#include <utility>\n#include <vector>\n\nusing namespace std;\n\nconst uint64_t inf = 500000005;\n\nclass Trie {\n  const char A = 'a', Z = 'z';\n  const int n = Z - A + 1;\n\n  vector<shared_ptr<Trie>> children;\n  uint64_t _cost;\n  bool is_terminal;\n\n  void insert(const string& s, size_t idx, uint64_t cost) {\n    if (idx == s.length()) {\n      _cost = min(_cost, cost);\n      is_terminal = true;\n    } else {\n      if (!children[s[idx] - A]) children[s[idx] - A] = make_shared<Trie>();\n      children[s[idx] - A]->insert(s, idx + 1, cost);\n    }\n  }\n\n public:\n  Trie() : children(n), _cost(inf), is_terminal(false) {}\n\n  void find(const string& s, int i0, size_t idx, vector<uint64_t>& dp) {\n    if (is_terminal) dp[i0] = min(dp[i0], dp[idx] + _cost);\n    if (idx != s.length() && children[s[idx] - A])\n      children[s[idx] - A]->find(s, i0, idx + 1, dp);\n  }\n\n  void insert(const string& s, uint64_t cost) { insert(s, 0, cost); }\n};\n\nclass Solution {\n public:\n  int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n    const int n = words.size();\n    Trie t;\n    vector<uint64_t> dp(target.size() + 1, inf);\n    dp[target.size()] = 0;\n    for (int i = 0; i < n; ++i) t.insert(words[i], costs[i]);\n    for (int i = target.size() - 1; i >= 0; --i) t.find(target, i, i, dp);\n    return dp[0] < inf ? dp[0] : -1;\n  }\n};",
    "submit_ts": "1720324282",
    "subm_id": "1312395827"
}