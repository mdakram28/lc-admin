{
    "username": "meakc",
    "submission": "class TrieNode {\npublic:\n    unordered_map<char, TrieNode*> children;\n    int cost;\n    vector<pair<int,int>>results;\n    TrieNode() : cost(-1) {}\n};\n\nclass Trie {\npublic:\n    TrieNode* root;\n    Trie() {\n        root = new TrieNode();\n    }\n\n    void insert(string& word, int index, int cost) { \n            TrieNode* node = root; \n            for (char c : word) { \n                if (!node->children.count(c)) \n                    node->children[c] = new TrieNode(); \n                node = node->children[c]; \n            } \n            node->results.push_back({index, cost}); \n        } \n\n    vector<pair<int, int>> search(const string& target, int start) {\n        vector<pair<int, int>> results;\n        TrieNode* node = root;\n        for (int i = start; i < target.size(); ++i) {\n            if (!node->children.count(target[i])) break;\n            node = node->children[target[i]];\n            if (node->cost != -1) {\n                results.push_back({i + 1, node->cost});\n            }\n        }\n        return results;\n    }\n};\n\nclass Solution {\npublic:\n    \n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int n = target.size();\n        vector<int> dp(n + 1, INT_MAX);\n        dp[0] = 0;\n\n        Trie trie;\n        for (int i = 0; i < words.size(); ++i) {\n            trie.insert(words[i],i, costs[i]);\n        }\n\n        for (int i = 0; i < n; ++i) {\n            if (dp[i] == INT_MAX) continue;\n            TrieNode* root = trie.root; \n            for (int j = i; j < n; ++j) { \n                if (!root->children.count(target[j])) break; \n                root = root->children[target[j]]; \n                for (auto val : root->results) { \n                    int ind = val.first , cost = val.second; \n                    int len = words[ind].size(); \n                    if (i + len <= n) { \n                        dp[i+len]=min(dp[i+len],dp[i]+cost); \n                    } \n                }\n            }\n        }\n        return dp[n] == INT_MAX ? -1 : dp[n];\n    }\n};",
    "submit_ts": "1720324247",
    "subm_id": "1312394982"
}