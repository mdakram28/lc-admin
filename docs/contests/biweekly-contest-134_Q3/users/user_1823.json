{
    "username": "power1011",
    "submission": "class Solution {\npublic:\n    int numberOfAlternatingGroups(vector<int>& colors, int k) {\n        // dp[i]\n        // if colors[i] is 0 then dp[i] is the longest alternative group that end with colors[i]\n        // if colors[i-1] == colors[i] then dp[i] is 1\n        // else if colors[i-2] == colors[i] then dp[i] = 2 + dp[i-2]\n        // else dp[i] = 2 + dp[i-2]\n        // i-2, i-1, i\n        //       0   0 => dp[i] is 1\n        //   0   1   0 => dp[i] is 2 + dp[i-2]\n        //   1   1   0 => dp[i] is 2\n        \n        // dp[0 ~ 2*n -1]\n        // sample 2\n        // n = 7\n        // 0,1,0,0,1,0,1\n        \n        // 0,1,0,0,1,0,1,0,1,0,0,1,0,1\n        //         v             v\n        //         1 2 3 4 5 6 7           \n        // dp[0 ~ 2*n -1]\n        // count the numbeer of dp[i]>=k from i = n to 2*n -1\n        \n        vector<int> dp(colors.size() * 2);\n        int n = colors.size();\n        colors.resize(2*n);\n        std::copy(colors.begin(), colors.begin()+n, colors.begin()+n);\n        int ans = 0;\n        for(int i=0;i<n*2;++i)\n        {\n            if(i == 0)\n            {\n                dp[i] = 1;\n            }\n            else if(i==1)\n            {\n                dp[i] = colors[i] == colors[i-1]?1:2;\n            }\n            else\n            {\n                if(colors[i-1] == colors[i])\n                {\n                    dp[i] = 1;\n                }\n                else if(colors[i-2] == colors[i])\n                {\n                    dp[i] = dp[i-2] + 2;\n                }\n                else\n                {\n                    dp[i] = 2;\n                }\n            }\n            if(i>=n)\n            {\n                ans += dp[i] >= k;\n            }\n        }\n        return ans;\n    }\n};",
    "submit_ts": "1720277717",
    "subm_id": "1311676749"
}