{
    "username": "talib5",
    "submission": "class TrieNode {\npublic:\n    vector<TrieNode*> child;\n    int cost;\n    bool isEnd;\n\n    TrieNode() : child(26, nullptr), cost(INT_MAX), isEnd(false) {}\n};\n\nclass Trie {\npublic:\n    TrieNode* root;\n\n    Trie() {\n        root = new TrieNode();\n    }\n\n    void insert(const string& word, int cost) {\n        TrieNode* node = root;\n        for (char c : word) {\n            if (!node->child[c - 'a']) {\n                node->child[c - 'a'] = new TrieNode();\n            }\n            node = node->child[c - 'a'];\n        }\n        node->cost = min(cost, node->cost);\n        node->isEnd = true;\n    }\n\n    TrieNode* getRoot() {\n        return root;\n    }\n};\n\nclass Solution {\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        Trie trie;\n        int len = target.size();\n        vector<int> minCost(len + 1, INT_MAX);\n\n        for (int i = 0; i < words.size(); ++i) {\n            trie.insert(words[i], costs[i]);\n        }\n\n        minCost[0] = 0;\n\n        for (int i = 0; i < len; ++i) {\n            if (minCost[i] == INT_MAX) continue;\n\n            TrieNode* node = trie.getRoot();\n            for (int j = i; j < len; ++j) {\n                char ch = target[j];\n                if (!node->child[ch - 'a']) break;\n                node = node->child[ch - 'a'];\n                if (node->isEnd) {\n                    minCost[j + 1] = min(minCost[j + 1], minCost[i] + node->cost);\n                }\n            }\n        }\n\n        return minCost[len] == INT_MAX ? -1 : minCost[len];\n    }\n};",
    "submit_ts": "1720322323",
    "subm_id": "1312346812"
}