{
    "username": "AntonPolyansky",
    "submission": "from collections import deque\nclass Solution:\n    def minimumDifference(self, nums: List[int], k: int) -> int:\n        q = deque()\n        digits = [0] * 32\n        cur = 0\n        res = 10**10\n        for n in nums:\n            while len(q) and cur <= k:\n                lst = q.popleft()\n                i = 0\n                while lst > 0:\n                    digits[i] -= lst & 0x01\n                    lst >>= 1\n                    i += 1\n                cur = 0\n                for i in range(len(digits)):\n                    cur |=  (1 << i) if (digits[i] == len(q)) else 0\n                res = min(res,abs(cur - k)) \n            tmp = n\n            q.append(n)\n            i = 0\n            while tmp > 0:\n                digits[i] += tmp & 0x01 \n                tmp >>= 1\n                i += 1\n            cur = 0\n            for i in range(len(digits)):\n                cur |=  (1 << i) if (digits[i] == len(q)) else 0\n            \n            res = min(res,abs(cur - k))\n            \n        while len(q) and cur <= k:\n            lst = q.popleft()\n            i = 0\n            while lst > 0:\n                digits[i] -= lst & 0x01\n                lst >>= 1\n                i += 1\n            cur = 0\n            for i in range(len(digits)):\n                cur |=  (1 << i) if (digits[i] == len(q)) else 0\n            res = min(res,abs(cur - k))             \n\n        return res\n",
    "submit_ts": 1717299568.0
}