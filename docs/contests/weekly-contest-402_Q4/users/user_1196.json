{
    "username": "huaiyan",
    "submission": "class Solution:\n    class SegmentTree:\n        def __init__(self, nums):\n            self.n = len(nums)\n            self.tree = [0] * (4 * self.n)\n            self.build(nums)\n            self._data = nums\n\n        def build(self, nums):\n            for i in range(self.n):\n                self.tree[self.n + i] = nums[i]\n            for i in range(self.n - 1, 0, -1):\n                self.tree[i] = self.tree[i << 1] + self.tree[i << 1 | 1]\n\n        def update(self, idx, val):\n            self._data[idx] = val\n            idx += self.n\n            self.tree[idx] = val\n            while idx > 1:\n                idx >>= 1\n                self.tree[idx] = self.tree[idx << 1] + self.tree[idx << 1 | 1]\n\n        def query(self, l, r):\n            l += self.n\n            r += self.n\n            res = 0\n            while l <= r:\n                if l & 1:\n                    res += self.tree[l]\n                    l += 1\n                if not r & 1:\n                    res += self.tree[r]\n                    r -= 1\n                l >>= 1\n                r >>= 1\n            return res\n\n\n    def countOfPeaks(self, nums: List[int], queries: List[List[int]]) -> List[int]:\n        check_peak = [0] * len(nums)\n        for i in range(len(nums)):\n            if i > 0 and i < len(nums) - 1 and nums[i] > nums[i - 1] and nums[i] > nums[i + 1]:\n                check_peak[i] = 1\n        tree = self.SegmentTree(check_peak)\n        result = []\n        for each in queries:\n            if each[0] == 1:\n                result.append(tree.query(each[1] + 1, each[2] - 1))\n            else:\n                index = each[1]\n                value = each[2]\n                if index == 0:\n                    if check_peak[1] == 1 and value >= nums[1]:\n                        tree.update(1, 0)\n                    if check_peak[1] == 0 and value < nums[1] and nums[1] > nums[2]:\n                        tree.update(1, 1)\n                elif index == len(nums) - 1:\n                    if check_peak[index - 1] == 1 and value >= nums[index - 1]:\n                        tree.update(index - 1, 0)\n                    if check_peak[index - 1] == 0 and value < nums[index - 1] and nums[index - 1] > nums[index - 2]:\n                        tree.update(index - 1, 1)\n                else:\n                    if check_peak[index] == 1 and (value <= nums[index + 1] or value <= nums[index - 1]):\n                        tree.update(index, 0)\n                    if check_peak[index] == 0 and value > nums[index - 1] and value > nums[index + 1]:\n                        tree.update(index, 1)\n                    if check_peak[index - 1] == 1 and value >= nums[index - 1]:\n                        tree.update(index - 1, 0)\n                    if check_peak[index + 1] == 1 and value >= nums[index + 1]:\n                        tree.update(index + 1, 0)\n                if index> 1 and check_peak[index - 1] == 0 and nums[index - 1] > value and nums[index - 1] > nums[index - 2]:\n                    tree.update(index - 1, 1)\n                if index < len(nums) - 2 and check_peak[index + 1] == 0 and  nums[index + 1] > value and nums[index + 1] > nums[index + 2]:\n                    tree.update(index + 1, 1)\n                nums[index] = value\n        return result\n",
    "submit_ts": 1718509179.0
}