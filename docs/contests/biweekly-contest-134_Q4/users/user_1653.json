{
    "username": "boAshraf",
    "submission": "class Solution {\nprivate:\n    vector<int> tree;\n    int n;\n\n    void buildTree(vector<int>& arr, int treeIndex, int l, int r) {\n        if (l == r) {\n            tree[treeIndex] = arr[l];\n        } else {\n            int mid = l + (r - l) / 2;\n            int leftChild = 2 * treeIndex + 1;\n            int rightChild = 2 * treeIndex + 2;\n            buildTree(arr, leftChild, l, mid);\n            buildTree(arr, rightChild, mid + 1, r);\n            tree[treeIndex] = tree[leftChild] & tree[rightChild];\n        }\n    }\n\n    int rangeAnd(int treeIndex, int l, int r, int queryL, int queryR) {\n        if (l > queryR || r < queryL) {\n            return ~0;  // Return all 1s for the AND operation\n        }\n        if (l >= queryL && r <= queryR) {\n            return tree[treeIndex];\n        }\n        int mid = l + (r - l) / 2;\n        int leftChild = 2 * treeIndex + 1;\n        int rightChild = 2 * treeIndex + 2;\n        int leftAnd = rangeAnd(leftChild, l, mid, queryL, queryR);\n        int rightAnd = rangeAnd(rightChild, mid + 1, r, queryL, queryR);\n        return leftAnd & rightAnd;\n    }\n\npublic:\n    void build(vector<int>& arr) {\n        n = arr.size();\n        tree.resize(4 * n+1);\n        buildTree(arr, 0, 0, n - 1);\n    }\n\n    int query(int queryL, int queryR) {\n        return rangeAnd(0, 0, n - 1, queryL, queryR);\n    }\n    long long countSubarrays(vector<int>& v, int k) {\n         n = v.size();\n        build(v);\n        vector<vector<int>> pre(n, vector<int>(30));\n        for (int i = 0; i < n; i++) {\n            if (i) pre[i] = pre[i - 1];\n            for (int b = 0; b < 30; b++) {\n                if (((v[i] >> b) & 1) == 0) pre[i][b]++;\n            }\n        }\n        long long ans = 0;\n        for (int i = 0; i < n; i++) {\n            int l = i, r = n - 1, mid, idx1 = -1;\n            while(l<=r){\n                mid=(l+r)/2;\n                if(query(i,mid)>k)l=mid+1;\n                else idx1=mid,r=mid-1;\n            }\n            if(idx1==-1||query(i,idx1)!=k)continue;\n            l=idx1,r=n-1;int idx2=-1;\n            while(l<=r){\n                mid=(l+r)/2;\n                if(query(i,mid)<k)r=mid-1;\n                else idx2=mid,l=mid+1;\n            }\n//            cout<<i<<' '<<idx1<<' '<<idx2<<'\\n';\n            int sz=idx2-idx1+1;\n            ans+=sz;\n        }\n\n        return ans;\n    }\n};",
    "submit_ts": "1720280354",
    "subm_id": "1311786216"
}