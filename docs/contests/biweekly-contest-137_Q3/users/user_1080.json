{
    "username": "smoker",
    "submission": "class Solution {\n    public long maximumValueSum(int[][] board) {\n        int m = board.length, n = board[0].length;\n        long[][][] row = new long[m][3][3];\n        for(int i = 0; i < m; i++) for(int j = 0; j < 3; j++) Arrays.fill(row[i][j], Integer.MIN_VALUE / 2);\n        long[][][] pre = new long[m + 1][3][3];\n        for(int i = 0; i <= m; i++) for(int j = 0; j < 3; j++) Arrays.fill(pre[i][j], Integer.MIN_VALUE / 2);\n        for(int i = 0; i < m; i++) {\n            for(int j = 0; j < n; j++) {\n                row[i] = max(new long[][]{row[i][0], row[i][1], row[i][2], new long[]{board[i][j], i, j}});\n            }\n            pre[i + 1] = preMax(pre[i], row[i]);\n        }\n        System.out.println(pre[3][0][0] + \" \" + pre[3][1][0] + \" \" + pre[3][2][0]);\n        long res = Long.MIN_VALUE;\n        for(int i = m - 1; i > 1; i--) {\n            for(int j = i - 1; j > 0; j--) {\n                for(int k = j - 1; k >= 0; k--) {\n                    for(int i1 = 0; i1 < 3; i1++) {\n                        for(int j1 = 0; j1 < 3; j1++) {\n                            for(int k1 = 0; k1 < 3; k1++) {\n                                if(row[i][i1][2] != row[j][j1][2] && row[j][j1][2] != row[k][k1][2] && row[i][i1][2] != row[k][k1][2])\n                                    res = Math.max(res, row[i][i1][0] + row[j][j1][0] + row[k][k1][0]);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        return res;\n    }\n    private long[][] max(long[][] a) {\n        long[][] res = new long[3][3];\n        Arrays.sort(a, new Comparator<long[]>() {\n            @Override\n            public int compare(long[] o1, long[] o2) {\n                return (int)(o1[0] - o2[0]);\n            }\n        });\n        res[0] = a[3];\n        res[1] = a[2];\n        res[2] = a[1];\n        return res;\n    }\n    private long[][] preMax(long[][] a, long[][] b) {\n        long[][] res = new long[3][3];\n        List<long[]> list = new ArrayList<>();\n        for(long[] t: a) list.add(t);\n        for(long[] t: b) list.add(t);\n        Collections.sort(list, new Comparator<long[]>() {\n            @Override\n            public int compare(long[] o1, long[] o2) {\n                return (int)(o2[0] - o1[0]);\n            }\n        });\n        res[0] = list.get(0);\n        res[1] = list.get(1);\n        res[2] = list.get(2);\n        return res;\n    }\n}",
    "submit_ts": "1723909730",
    "subm_id": "556337712"
}