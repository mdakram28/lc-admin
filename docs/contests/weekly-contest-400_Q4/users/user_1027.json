{
    "username": "octaneal",
    "submission": "class SparseTable:\n    def __init__(self, array):\n        self.array = array\n        self.n = len(array)\n        self.build_sparse_table()\n\n    def build_sparse_table(self):\n        self.log = [0] * (self.n + 1)\n        for i in range(2, self.n + 1):\n            self.log[i] = self.log[i // 2] + 1\n        \n        self.k = self.log[self.n] + 1\n        self.table = [[0] * self.k for _ in range(self.n)]\n        \n        for i in range(self.n):\n            self.table[i][0] = self.array[i]\n        \n        j = 1\n        while (1 << j) <= self.n:\n            i = 0\n            while (i + (1 << j) - 1) < self.n:\n                self.table[i][j] = self.table[i][j-1] & self.table[i + (1 << (j - 1))][j - 1]\n                i += 1\n            j += 1\n\n    def range_and_query(self, L, R):\n        j = self.log[R - L + 1]\n        return self.table[L][j] & self.table[R - (1 << j) + 1][j]\n\nclass Solution:\n    def minimumDifference(self, nums: List[int], k: int) -> int:\n        \n                        \n                    \n                    \n        \n        n = len(nums)\n        \n        sp_tb = SparseTable(nums)\n        \n        pref = [[0 for _ in range(n + 1)] for _ in range(31)]\n        \n        \n#         x = 1\n#         for bit in range(30):\n            \n#             for i in range(n):\n#                 if nums[i] & x:\n#                     pref[bit][i + 1] = pref[bit][i] + 1 \n            \n            # x *= 2\n        # print('----')\n        cur = float('inf')\n        for i in range(n):\n            cur = min(cur, abs(nums[i] - k))\n        \n        for i in range(n):\n            a = i\n            b = n - 1\n\n            while a <= b:\n                m = (a + b) // 2\n                \n                # if m == i:\n                #     break\n\n                # r = 0\n                # y = 1\n                # for bit in range(30):\n                #     if (pref[bit][m+1] - pref[bit][i]) == (m - i + 1):\n                #         r |= y\n                #     y *= 2\n                # print('aaaa', cur, r, abs(k - r))\n                r = sp_tb.range_and_query(i, m)\n                cur = min(cur, abs(k - r))\n\n                if r > k:\n                    a = m + 1\n                else:\n                    b = m - 1\n                    \n        return cur\n    \n            ",
    "submit_ts": 1717299743.0
}