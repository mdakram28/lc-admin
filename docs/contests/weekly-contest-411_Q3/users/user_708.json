{
    "username": "NVPChqDsXX",
    "submission": "class Solution {\npublic:\n    \n    int nonZeroNextModTable[100001][7];\n    char memoTable[100001][7];\n    int nextModTable[100001][7];\n    char nonZeroMemoTable[100001][7];\n    // char nonZeroMemoTable[100001][9];\n    \n    \n    string largestPalindrome(int length, int k) {\n        if (k == 1 || k == 3 || k == 9) {\n            return string(length, '9');\n        }\n        \n        \n        \n        if (k == 5) {\n            if (length == 1) {\n                return \"5\";\n            }\n            string result(length, '9');\n            result[0] = '5';\n            result[length - 1] = '5';\n            return result;\n        }\n        if (k == 8) {\n            if (length <= 5) {\n                return string(length, '8');\n            }\n            string result(length, '9');\n            result[0] = '8';\n            result[length - 1] = '8';\n            result[1] = '8';\n            result[length - 2] = '8';\n            result[2] = '8';\n            result[length - 3] = '8';\n            return result;\n        }\n        if (k == 4) {\n            if (length <= 3) {\n                return string(length, '8');\n            }\n            string result(length, '9');\n            result[0] = '8';\n            result[length - 1] = '8';\n            result[1] = '8';\n            result[length - 2] = '8';\n            return result;\n        }\n        \n        if (k == 2) {\n            if (length == 1) {\n                return \"8\";\n            }\n            string result(length, '9');\n            result[0] = '8';\n            result[length - 1] = '8';\n            return result;\n        }\n\n        if (k == 6) {\n            if (length == 1) {\n                return \"6\";\n            }\n            if (length == 2) {\n                return \"66\";\n            }\n            if (length == 3) {\n                return \"888\";\n            }\n            string result(length, '9');\n            result[0] = '8';\n            result[length - 1] = '8';\n            if (length % 2 == 1) {\n                result[length / 2] = '8';\n            } else {\n                result[length / 2] = '7';\n                result[(length / 2) - 1] = '7';\n            }\n            return result;\n        }\n        if (k == 7) {\n            if (length == 1) {\n                return \"7\";\n            }\n            // fill(&memoTable[0][1], &memoTable[0][1] + sizeof(memoTable), 0);\n            // fill(&nonZeroMemoTable[0][1], &nonZeroMemoTable[0][1] + sizeof(nonZeroMemoTable), 0);\n            fill(&memoTable[0][0], &memoTable[0][0] + sizeof(memoTable), 0);\n            fill(&nonZeroMemoTable[0][0], &nonZeroMemoTable[0][0] + sizeof(nonZeroMemoTable), 0);\n\n            for (int digit = 1; digit < 10; ++digit) {\n                memoTable[1][digit % 7] = '0' + digit;\n                if (digit != 0) {\n                    nonZeroMemoTable[1][digit % 7] = '0' + digit;\n                }\n            }\n\n            int modBase = 10 % 7;\n            for (int i = 0; i <= 100000 - 2; ++i) {\n                for (int j = 0; j < 7; ++j) { \n                    if ((i == 0 && j != 0) || (i > 0 && memoTable[i][j] == 0)) {\n                        continue;\n                    }\n                    for (int newDigit = 9; newDigit >= 0; --newDigit) { \n                        int newMod = (modBase * newDigit + newDigit + j * 10) % 7;\n                        if (memoTable[i + 2][newMod] == 0 || memoTable[i + 2][newMod] < '0' + newDigit) {\n                            memoTable[i + 2][newMod] = '0' + newDigit;\n                            nextModTable[i + 2][newMod] = j;\n                        }\n                        if (newDigit == 0) continue;\n                        if (nonZeroMemoTable[i + 2][newMod] == 0 || nonZeroMemoTable[i + 2][newMod] < '0' + newDigit) {\n                            nonZeroMemoTable[i + 2][newMod] = '0' + newDigit;\n                            nonZeroNextModTable[i + 2][newMod] = j;\n                        }\n                        // if (nonZeroMemoTable[i + 2][newMod] == 0 || nonZeroMemoTable[i + 2][newMod] < '0' + newDigit) {\n                        //     nonZeroMemoTable[i + 2][newMod] = '0' + newDigit;\n                        //     nonZeroNextModTable[i + 2][newMod] = j;\n                        // }\n                    }\n                }\n                modBase = (modBase * 10) % 7;\n            }\n            int remainingLength = length;\n            string frontPart(1, nonZeroMemoTable[remainingLength][0]);\n            string backPart(1, nonZeroMemoTable[remainingLength][0]);\n            int mod = nonZeroNextModTable[remainingLength][0];\n            remainingLength -= 2;\n            while (remainingLength) {\n                frontPart += memoTable[remainingLength][mod];\n                if (remainingLength > 1) backPart += memoTable[remainingLength][mod];\n                else break;\n                mod = nextModTable[remainingLength][mod];\n                remainingLength -= 2;\n            }\n            reverse(backPart.begin(), backPart.end());\n            string finalResult = frontPart + backPart;\n            return finalResult;\n        }\n        return \"\";\n    }\n};\n",
    "submit_ts": "1723952482",
    "subm_id": "1359797285"
}