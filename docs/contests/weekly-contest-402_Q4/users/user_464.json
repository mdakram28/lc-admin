{
    "username": "riveryth7",
    "submission": "class SegTree:\n    def __init__(self):\n        self.size = 0\n        self.array = []\n        self.lazy_array = []\n\n    def init(self, length):\n        self.size = 1\n        while self.size < length:\n            self.size *= 2\n        self.array = [0] * (2 * self.size + 1)\n        self.lazy_array = [0] * (2 * self.size + 1)\n\n    def update_single(self, index, amount):\n        index += self.size - 1\n        original = self.array[index]\n        increment = amount - original\n        while index > 0:\n            self.array[index] += increment\n            index //= 2\n\n    def update_range(self, left, right, increment):\n        self._update_range_helper(left, right, 1, self.size, 1, increment)\n\n    def _update_range_helper(self, left, right, range_left, range_right, node_index, increment):\n        if left == range_left and right == range_right:\n            self.lazy_array[node_index] += increment\n            return\n        mid = (range_left + range_right) // 2\n        self.lazy_array[node_index * 2] += self.lazy_array[node_index]\n        self.lazy_array[node_index * 2 + 1] += self.lazy_array[node_index]\n        self.lazy_array[node_index] = 0\n        if right <= mid:\n            self._update_range_helper(left, right, range_left, mid, node_index * 2, increment)\n        elif left > mid:\n            self._update_range_helper(left, right, mid + 1, range_right, node_index * 2 + 1, increment)\n        else:\n            self._update_range_helper(left, mid, range_left, mid, node_index * 2, increment)\n            self._update_range_helper(mid + 1, right, mid + 1, range_right, node_index * 2 + 1, increment)\n        self.array[node_index] = self.array[node_index * 2] + self.array[node_index * 2 + 1] + self.lazy_array[node_index * 2] * (mid - range_left + 1) + self.lazy_array[node_index * 2 + 1] * (range_right - mid)\n\n    def query(self, left, right):\n        return self._query_helper(left, right, 1, self.size, 1)\n\n    def _query_helper(self, left, right, range_left, range_right, node_index):\n        if left == range_left and right == range_right:\n            return self.array[node_index] + (range_right - range_left + 1) * self.lazy_array[node_index]\n        mid = (range_left + range_right) // 2\n        result = 0\n        self.lazy_array[node_index * 2] += self.lazy_array[node_index]\n        self.lazy_array[node_index * 2 + 1] += self.lazy_array[node_index]\n        self.lazy_array[node_index] = 0\n        if right <= mid:\n            result = self._query_helper(left, right, range_left, mid, node_index * 2)\n        elif left > mid:\n            result = self._query_helper(left, right, mid + 1, range_right, node_index * 2 + 1)\n        else:\n            result = self._query_helper(left, mid, range_left, mid, node_index * 2) + self._query_helper(mid + 1, right, mid + 1, range_right, node_index * 2 + 1)\n        self.array[node_index] = self.array[node_index * 2] + self.array[node_index * 2 + 1] + self.lazy_array[node_index * 2] * (mid - range_left + 1) + self.lazy_array[node_index * 2 + 1] * (range_right - mid)\n        return result\n\nclass Solution:\n    def countOfPeaks(self, numbers, queries):\n        tree = SegTree()\n        length = len(numbers)\n        tree.init(length + 5)\n        answer = []\n        for i in range(1, length - 1):\n            tree.update_single(i + 1, numbers[i] > numbers[i - 1] and numbers[i] > numbers[i + 1])\n        for query in queries:\n            if query[0] == 1:\n                if query[2] - query[1] <= 1:\n                    answer.append(0)\n                    continue\n                answer.append(tree.query(query[1] + 1 + 1, query[2] + 1 - 1))\n            else:\n                numbers[query[1]] = query[2]\n                if query[1] > 0 and query[1] < length - 1:\n                    tree.update_single(query[1] + 1, numbers[query[1]] > numbers[query[1] - 1] and numbers[query[1]] > numbers[query[1] + 1])\n                if query[1] - 1 > 0 and query[1] - 1 < length - 1:\n                    tree.update_single(query[1] - 1 + 1, numbers[query[1] - 1] > numbers[query[1] - 1 - 1] and numbers[query[1] - 1] > numbers[query[1] - 1 + 1])\n                if query[1] + 1 > 0 and query[1] + 1 < length - 1:\n                    tree.update_single(query[1] + 1 + 1, numbers[query[1] + 1] > numbers[query[1] + 1 - 1] and numbers[query[1] + 1] > numbers[query[1] + 1 + 1])\n        return answer",
    "submit_ts": 1718506632.0
}