{
    "username": "Shing Yan Li",
    "submission": "from sortedcontainers import SortedList\n\nfrom math import ceil, log2\n\nclass segment_tree:\n    # merge(left, right): function used to merge the two halves\n    # basef(value): function applied on individual values\n    # basev: identity for merge function, merger(value, basev) = value\n    # update(node_value, old, new): function to update the nodes\n    def __init__(self, array, merge=lambda x,y:x+y, basef=lambda x:x, basev = 0):\n        self.merge = merge\n        self.basef = basef\n        self.basev = basev\n        self.n = len(array)\n        self.array = array\n        self.tree = [0] * ( 2**ceil(log2(len(array))+1) - 1 )\n        self.build(array)\n    \n    def __str__(self):\n        return ' '.join([str(x) for x in self.tree])\n\n    def _build_util(self, l, r, i, a):\n        if(l==r):\n            self.tree[i] = self.basef(a[l])\n            return self.tree[i]\n        mid = (l+r)//2\n        self.tree[i] = self.merge(self._build_util(l,mid, 2*i+1, a), self._build_util(mid+1, r, 2*i+2, a))\n        return self.tree[i]\n\n    def build(self, a):\n        self._build_util(0, len(a)-1, 0, a)\n\n    def _query_util(self, i, ln, rn, l, r):\n        if ln>=l and rn<=r:\n            return self.tree[i]\n        if ln>r or rn<l:\n            return self.basev\n        return self.merge( self._query_util( 2*i+1, ln, (ln+rn)//2, l, r ), self._query_util( 2*i+2, (ln+rn)//2+1, rn, l, r ) )\n\n    def query(self, l, r):\n        return self._query_util( 0, 0, self.n-1, l, r )\n\n    def _update_util(self, i, ln, rn, x, v):\n        if x>=ln and x<=rn:\n            if ln != rn:\n                self._update_util( 2*i+1, ln, (ln+rn)//2, x, v )\n                self._update_util( 2*i+2, (ln+rn)//2 + 1, rn, x, v )\n                self.tree[i] = self.merge(self.tree[2*i+1], self.tree[2*i+2])\n            else:\n                self.tree[i] = self.basef(v)\n\n    def update(self, x, v):\n        self._update_util( 0, 0, self.n-1, x, v )   \n        self.array[x] =v         \n\nclass Solution:\n    def countKConstraintSubstrings(self, s: str, k: int, queries: List[List[int]]) -> List[int]:\n        count = [0] * len(s)\n        l, r = 0, 0\n        freq = [0, 0]\n        while r < len(s):\n            freq[int(s[r])] += 1\n            while freq[0] > k and freq[1] > k:\n                count[l] = r - l\n                freq[int(s[l])] -= 1\n                l += 1\n            r += 1\n        while l < len(s):\n            count[l] = len(s) - l\n            l += 1\n        qmap = {}\n        for i in range(len(queries)):\n            qmap[(queries[i][0], queries[i][1])] = i\n        qlist = [[] for _ in range(len(s))]\n        for q in queries:\n            qlist[q[1]].append(q[0])\n        ans = [0] * len(queries)\n        slist = SortedList()\n        slist2 = SortedList()\n        seg = segment_tree([0] * len(s))\n        seg2 = segment_tree([0] * len(s))\n        for i in range(len(s)):\n            slist.add((count[i] + i, i))\n            if len(qlist[i]) == 0:\n                continue\n            index = slist.bisect_right((i + 1, len(s)))\n            for _ in range(index):\n                num, j = slist.pop(0)\n                seg.update(j, num)\n                slist2.add(j)\n            for q in qlist[i]:\n                ans[qmap[(q, i)]] = (i - q + 1) * (i - q + 2) // 2 + seg.query(q, i) - (len(slist2) - slist2.bisect_left(q)) * (i + 1)\n        return ans",
    "submit_ts": "1723953412",
    "subm_id": "1359820585"
}