{
    "username": "ADITYA_SHARMA1605",
    "submission": "import java.util.Arrays;\nimport java.util.Collections;\n\nclass Solution {\n    public long minimumCost(int m, int n, int[] horizontalCut, int[] verticalCut) {\n        Long[] horizontalCutObj = Arrays.stream(horizontalCut).mapToLong(i -> i).boxed().toArray(Long[]::new);\n        Long[] verticalCutObj = Arrays.stream(verticalCut).mapToLong(i -> i).boxed().toArray(Long[]::new);\n        \n        Arrays.sort(horizontalCutObj, Collections.reverseOrder());\n        Arrays.sort(verticalCutObj, Collections.reverseOrder());\n        \n        long hPieces = 1;\n        long vPieces = 1;\n        long totalCost = 0;\n        \n        int i = 0, j = 0;\n        while (i < horizontalCutObj.length && j < verticalCutObj.length) {\n            if (horizontalCutObj[i] >= verticalCutObj[j]) {\n                totalCost += horizontalCutObj[i] * vPieces;\n                hPieces++;\n                i++;\n            } else {\n                totalCost += verticalCutObj[j] * hPieces;\n                vPieces++;\n                j++;\n            }\n        }\n        \n        while (i < horizontalCutObj.length) {\n            totalCost += horizontalCutObj[i] * vPieces;\n            i++;\n        }\n        \n        while (j < verticalCutObj.length) {\n            totalCost += verticalCutObj[j] * hPieces;\n            j++;\n        }\n        \n        return totalCost;\n    }\n    \n    \n}\n",
    "submit_ts": "1720925064",
    "subm_id": "1320241484"
}