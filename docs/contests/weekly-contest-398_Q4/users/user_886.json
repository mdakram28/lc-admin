{
    "username": "Kalpit_5",
    "submission": "import java.util.HashMap;\nimport java.util.Map;\nimport java.util.Vector;\n\nclass Solution {\n    Map<Integer, Vector<Vector<Integer>>> memo = new HashMap<>();\n\n    private int findWays(int target, int position, int jumpPower, boolean isJumpAllowed) {\n        if (position > target + 5) {\n            return 0;\n        }\n\n        if (jumpPower > 31) {\n            return 0;\n        }\n\n        if (memo.containsKey(position) && memo.get(position).get(jumpPower).get(isJumpAllowed ? 1 : 0) != -1) {\n            return memo.get(position).get(jumpPower).get(isJumpAllowed ? 1 : 0);\n        }\n\n        int countWays = (position == target) ? 1 : 0;\n        if (isJumpAllowed) {\n            countWays += findWays(target, position - 1, jumpPower, false);\n        }\n        if (position + (1 << jumpPower) <= target + 1) {\n            countWays += findWays(target, position + (1 << jumpPower), jumpPower + 1, true);\n        }\n\n        if (!memo.containsKey(position)) {\n            memo.put(position, new Vector<>(32));\n            for (int i = 0; i < 32; i++) {\n                memo.get(position).add(new Vector<>(2));\n                for (int j = 0; j < 2; j++) {\n                    memo.get(position).get(i).add(-1);\n                }\n            }\n        }\n\n        memo.get(position).get(jumpPower).set(isJumpAllowed ? 1 : 0, countWays);\n\n        return countWays;\n    }\n\n    public int waysToReachStair(int target) {\n        return findWays(target, 1, 0, true);\n    }\n}\n",
    "submit_ts": "1716089806",
    "subm_id": "1261851781"
}