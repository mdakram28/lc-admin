{
    "username": "Java_Programmer_Ketan",
    "submission": "class Solution{\n    public List<Boolean> getResults(int[][] queries) {\n        int N = 0;\n        for(int[] q: queries) N = Math.max(N,q[1]);\n//        long[] sa = new long[N+2];\n//        for(int i=0;i<sa.length;i++){\n//            sa[i] = i+1;\n//        }\n        List<Boolean> answers = new ArrayList<>();\n        TreeSet<Integer> treeSet = new TreeSet<>();\n        MassAddMaximumSegmentTree sg = new MassAddMaximumSegmentTree(N+2);\n        for(int i=0;i<N+2;i++) sg.addToRange(i,i,i);\n        for(int[] q: queries){\n            int x = q[1];\n            if(q[0] == 2){\n                int sz = q[2];\n                long M = sg.getMaximumInRange(0,x);\n                if(M >= sz) answers.add(true);\n                else if(M == sz - 1){\n                    if(sg.getMaximumInRange(x,x) != M) answers.add(true);\n                    else{\n                        Integer PREV = treeSet.floor(x);\n                        if(PREV != null){\n                            if(sg.getMaximumInRange(0,PREV)+1 >= sz) answers.add(true);\n                            else answers.add(false);\n                        }\n                        else answers.add(false);\n                    }\n                }\n                else answers.add(false);\n            }\n            else{\n                Integer NEXT = treeSet.ceiling(x);\n                int next;\n                if(NEXT == null) next = N+1;\n                else next = NEXT;\n                sg.addToRange(x,next-1,-1*(sg.getMaximumInRange(x,x)));\n                treeSet.add(x);\n            }\n        }\n        return answers;\n    }\n}\nclass MassAddMaximumSegmentTree {\n    long[] segmentArray;\n    long[] lazy;\n    int length;\n\n    public MassAddMaximumSegmentTree(int n){\n        this.length = n;\n        int height = (int)Math.ceil(Math.log(length)/Math.log(2));\n        int lengthOfSegmentTree = 2*(1<<height)-1;\n        this.segmentArray = new long[lengthOfSegmentTree];\n        this.lazy = new long[lengthOfSegmentTree];\n    }\n\n    public void addToRange(int left, int right, long value){\n        add(0,length-1,0,left,right,value);\n    }\n    private long add(int ss, int se, int si, int qs, int qe, long value){\n        if(se<qs || qe<ss) return segmentArray[si];\n        if(ss != se) propagate(si);\n        if(qs<=ss && se<=qe){\n            lazy[si] += value;\n            return segmentArray[si] = segmentArray[si]+value;\n        }\n        int mid = (ss+se)>>1;\n        return segmentArray[si] = Math.max(add(ss,mid,2*si+1,qs,qe,value),add(mid+1,se,2*si+2,qs,qe,value));\n    }\n\n    public long getMaximumInRange(int left, int right){\n        return getMax(0,length-1,0,left,right);\n    }\n\n    private long getMax(int ss, int se, int si, int qs, int qe){\n        if(se<qs || qe<ss) return Long.MIN_VALUE;\n        if(ss != se) propagate(si);\n        if(qs<=ss && se<=qe) return segmentArray[si];\n        int mid = (ss+se)>>1;\n        return Math.max(getMax(ss,mid,2*si+1,qs,qe), getMax(mid+1,se,2*si+2,qs,qe));\n    }\n\n\n    private void propagate(int si){\n        if(lazy[si]!=0){\n            segmentArray[2*si+1] += lazy[si];\n            segmentArray[2*si+2] += lazy[si];\n            lazy[2*si+1] += lazy[si];\n            lazy[2*si+2] += lazy[si];\n            lazy[si] = 0;\n        }\n    }\n\n    public void print(){\n        System.out.println(\"SA: \" + Arrays.toString(segmentArray));\n        System.out.println(\"Lazy: \" + Arrays.toString(lazy));\n    }\n}\n\n",
    "submit_ts": "1716650082",
    "subm_id": "1267605830"
}