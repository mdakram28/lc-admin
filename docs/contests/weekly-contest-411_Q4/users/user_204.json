{
    "username": "newhar",
    "submission": "class Solution {\npublic:\n    vector<long long> countKConstraintSubstrings(string s, int k, vector<vector<int>>& queries) {\n        int n = s.size();\n        int f[n];\n        for(int i = 0, cnt0 = 0, cnt1 = 0, ri = -1; i < n; ++i) {\n            while(ri < n && (cnt0 <= k || cnt1 <= k)) {\n                ++ri;\n                if(ri == n) break;\n                else if(s[ri] == '0') ++cnt0;\n                else ++cnt1;\n            }\n            f[i] = ri;\n            if(s[i] == '0') --cnt0;\n            else --cnt1;\n        }\n        long long sums[n];\n        sums[0] = f[0];\n        for(int i = 1; i < n; ++i) {\n            sums[i] = sums[i-1] + f[i] - i;\n        }\n        vector<long long> ret;\n        for(const auto& q : queries) {\n            int L = q[0], R = q[1];\n            int l = L, r = R;\n            while(l < r) {\n                int mid = (l + r) / 2;\n                if(f[mid] <= R) {\n                    l = mid + 1;\n                } else {\n                    r = mid;\n                }\n            }\n            long long d = R - l + 1, res = d * (d + 1ll) / 2ll;\n            if(l > L) {\n                res += sums[l-1];\n                if(L > 0) {\n                    res -= sums[L-1];\n                }\n            }\n            ret.push_back(res);\n        }\n        return ret;\n    }\n};",
    "submit_ts": "1723951136",
    "subm_id": "556403485"
}