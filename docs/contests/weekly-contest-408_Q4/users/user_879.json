{
    "username": "AyushPratapSingh73",
    "submission": "\nclass Solution {\n    private boolean dfsUsingStack(int[][] graph, int start, int end1, int end2, int nodes) {\n        Stack<Integer> stack = new Stack<>();\n        boolean[] visited = new boolean[nodes];\n        stack.push(start);\n        visited[start] = true;\n\n        while (!stack.isEmpty()) {\n            int current = stack.pop();\n            if (current == end1 || current == end2) {\n                return true;\n            }\n\n            for (int i = 0; i < nodes; ++i) {\n                if (graph[current][i] != 0 && !visited[i]) {\n                    stack.push(i);\n                    visited[i] = true;\n                }\n            }\n        }\n        return false;\n    }\n\n    public boolean canReachCorner(int X, int Y, int[][] circles) {\n        int numCircles = circles.length;\n        int[][] graph = new int[numCircles + 4][numCircles + 4];\n\n        for (int i = 0; i < numCircles; ++i) {\n            int x = circles[i][0];\n            int y = circles[i][1];\n            int radius = circles[i][2];\n\n           \n            if (x <= radius) {\n                graph[numCircles][i] = 1;\n                graph[i][numCircles] = 1;\n            }\n            if (X - x <= radius) {\n                graph[numCircles + 2][i] = 1;\n                graph[i][numCircles + 2] = 1;\n            }\n            if (y <= radius) {\n                graph[numCircles + 1][i] = 1;\n                graph[i][numCircles + 1] = 1;\n            }\n            if (Y - y <= radius) {\n                graph[numCircles + 3][i] = 1;\n                graph[i][numCircles + 3] = 1;\n            }\n\n           \n            for (int j = i + 1; j < numCircles; ++j) {\n                int dx1 = x - circles[j][0];\n                int dy1 = y - circles[j][1];\n                double distance = Math.sqrt(dx1 * dx1 + dy1 * dy1);\n                int combinedRadii = radius + circles[j][2];\n                if (combinedRadii >= distance) {\n                    graph[i][j] = 1;\n                    graph[j][i] = 1;\n                }\n            }\n        }\n\n        \n        boolean isBlocked = dfsUsingStack(graph, numCircles, numCircles + 1, numCircles + 2, numCircles + 4) ||\n                            dfsUsingStack(graph, numCircles + 3, numCircles + 2, numCircles + 1, numCircles + 4);\n\n        return !isBlocked;\n    }\n}\n",
    "submit_ts": "1722138572",
    "subm_id": "1335794184"
}