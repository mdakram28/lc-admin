{
    "username": "jindal1203",
    "submission": "class Solution {\npublic:\n    int numberOfPermutations(int n, vector<vector<int>>& requirements) {\n        sort(requirements.begin(), requirements.end());\n    \n        const int MOD = 1e9+7;\n        const int MAX_INVERSIONS = 400;\n        vector<vector<int>> dp(n + 1, vector<int>(MAX_INVERSIONS + 1, 0));\n        dp[0][0] = 1;\n\n        int current_req_index = 0;\n        vector<int> current_req = requirements[current_req_index];\n\n        for (int i = 1; i <= n; ++i) {\n            for (int k = 0; k <= MAX_INVERSIONS; ++k) {\n                dp[i][k] = 0;\n                for (int j = 0; j < i; ++j) {\n                    if (k >= (i - 1 - j)) {\n                        dp[i][k] = (dp[i][k] + dp[i - 1][k - (i - 1 - j)]) % MOD;\n                    }\n                }\n            }\n\n            if (current_req_index < requirements.size() && current_req[0] == i - 1) {\n                int endi = current_req[0];\n                int cnti = current_req[1];\n\n                for (int k = 0; k <= MAX_INVERSIONS; ++k) {\n                    if (k != cnti) {\n                        dp[i][k] = 0;\n                    }\n                }\n\n                current_req_index++;\n                if (current_req_index < requirements.size()) {\n                    current_req = requirements[current_req_index];\n                }\n            }\n        }\n\n        return dp[n][requirements.back()[1]];\n    }\n};",
    "submit_ts": "1719070945",
    "subm_id": "1296835491"
}