{
    "username": "sepehry",
    "submission": "\nclass Trie:\n    def __init__(self):\n        self.a = [None] * 26\n        self.is_word = False\n        self.cost = float('inf')\n\n    def add(self, w, cost):\n        node = self\n        for c in w:\n            i = ord(c) - ord('a')\n            node2 = node.a[i]\n            if node2 is None:\n                node2 = Trie()\n                node.a[i] = node2\n            node = node2\n        node.is_word = True\n        node.cost = min(node.cost, cost)\n\n    def nex(self, c):\n        i = ord(c) - ord('a')\n        return self.a[i]\n\n\nclass Solution:\n    def minimumCost(self, target: str, words: List[str], costs: List[int]) -> int:\n        St = set(target)\n        Sw = set(''.join(words))\n        if not (St <= Sw):\n            return -1\n\n        if len(St) == 1:\n            z = target[0]\n            C = []\n            for ww, cc in zip(words, costs):\n                ss = set(ww)\n                if len(ss) == 1 and ss.pop() == z:\n                    C.append((len(ww), cc))\n            C.sort()\n\n            @functools.lru_cache(None)\n            def dp(m):\n                if m == 0:\n                    return 0\n                vvv = float('inf')\n                for m1, c1 in C:\n                    if m1 > m:\n                        break\n                    vvv = min(vvv, c1 + dp(m - m1))\n                return vvv\n\n            sol = dp(len(target))\n            dp.cache_clear()\n            if sol == float('inf'):\n                return -1\n            return sol\n\n        T = Trie()\n        for ww, cc in zip(words, costs):\n            T.add(ww, cc)\n        n = len(target)\n\n        @functools.lru_cache(None)\n        def dp(i):\n            if i == n:\n                return 0\n            node = T\n            vvv = float('inf')\n            for j in range(i, n):\n                node = node.nex(target[j])\n                if node is None:\n                    break\n                elif node.is_word:\n                    vvv = min(vvv, node.cost + dp(j + 1))\n            return vvv\n\n        sol = dp(0)\n        dp.cache_clear()\n        if sol == float('inf'):\n            return -1\n        return sol\n",
    "submit_ts": "1720324082",
    "subm_id": "1312391167"
}