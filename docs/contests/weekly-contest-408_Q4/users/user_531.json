{
    "username": "niteshsaxena03",
    "submission": "/**\n * @param {number} X\n * @param {number} Y\n * @param {number[][]} circles\n * @return {boolean}\n */\nvar canReachCorner = function(X, Y, circles) {\n    const bfs = (graph, start, target1, target2, nodes) => {\n        const queue = [start];\n        const visited = new Array(nodes + 4).fill(0);\n        visited[start] = 1;\n\n        while (queue.length > 0) {\n            const u = queue.shift();\n            for (const v of graph[u]) {\n                if (!visited[v]) {\n                    queue.push(v);\n                    visited[v] = 1;\n                }\n            }\n        }\n        return visited[target1] || visited[target2];\n    };\n\n    const numCircles = circles.length;\n    const graph = Array.from({ length: numCircles + 4 }, () => []);\n\n    for (let i = 0; i < numCircles; ++i) {\n        const [x, y, r] = circles[i];\n        if (x <= r) {\n            graph[numCircles].push(i);\n            graph[i].push(numCircles);\n        }\n        if (X - x <= r) {\n            graph[numCircles + 2].push(i);\n            graph[i].push(numCircles + 2);\n        }\n        if (y <= r) {\n            graph[numCircles + 1].push(i);\n            graph[i].push(numCircles + 1);\n        }\n        if (Y - y <= r) {\n            graph[numCircles + 3].push(i);\n            graph[i].push(numCircles + 3);\n        }\n        for (let j = i + 1; j < numCircles; ++j) {\n            const [xj, yj, rj] = circles[j];\n            const distance = Math.sqrt((x - xj) ** 2 + (y - yj) ** 2);\n            const radiusSum = r + rj;\n            if (radiusSum >= distance) {\n                graph[i].push(j);\n                graph[j].push(i);\n            }\n        }\n    }\n\n    let isBlocked = 0;\n    isBlocked = Math.max(isBlocked, bfs(graph, numCircles, numCircles + 1, numCircles + 2, numCircles + 4)); // Check for bottom-left corner\n    isBlocked = Math.max(isBlocked, bfs(graph, numCircles + 3, numCircles + 2, numCircles + 1, numCircles + 4)); // Check for top-right corner\n\n    return isBlocked === 0;\n};\n",
    "submit_ts": "1722136857",
    "subm_id": "1335746993"
}