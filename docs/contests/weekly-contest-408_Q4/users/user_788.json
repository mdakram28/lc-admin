{
    "username": "UserNameZ",
    "submission": "class Solution {\n   public:\n    int f[1001];\n    int g[1001][4];\n    int c[1001][3];\n    int find(int a) {\n        if (f[a] == a) return a;\n        return f[a] = find(f[a]);\n    }\n    int unon(int a, int b) {\n        int p = find(a);\n        int q = find(b);\n        if (p == q) return 0;\n        g[q][0] = min(g[p][0], g[q][0]);\n        g[q][1] = max(g[p][1], g[q][1]);\n        g[q][2] = min(g[p][2], g[q][2]);\n        g[q][3] = max(g[p][3], g[q][3]);\n        f[p] = q;\n        return 0;\n    }\n\n    int calc(int a, int b) {\n        long long x = abs(c[a][0] - c[b][0]);\n        long long y = abs(c[a][1] - c[b][1]);\n        long long z = c[a][2] + c[b][2];\n        bool ret = (z * z >= x * x + y * y);\n        return ret;\n    }\n    bool canReachCorner(int X, int Y, vector<vector<int>>& circles) {\n        int i, j, n = circles.size();\n        for (i = 0; i < n; i++) {\n            f[i] = i;\n            c[i][0] = circles[i][0];\n            c[i][1] = circles[i][1];\n            c[i][2] = circles[i][2];\n            g[i][0] = c[i][0] - c[i][2];\n            g[i][1] = c[i][0] + c[i][2];\n            g[i][2] = c[i][1] - c[i][2];\n            g[i][3] = c[i][1] + c[i][2];\n        }\n        for (i = 0; i < n; i++)\n            for (j = i + 1; j < n; j++)\n                if (calc(i, j))\n                    unon(i, j);\n        for (i = 0; i < n; i++) {\n            if (g[i][0] <= 0 && g[i][1] >= X) return 0;\n            if (g[i][2] <= 0 && g[i][3] >= Y) return 0;\n            if (g[i][3] >= Y && g[i][1] >= X) return 0;\n            if (g[i][2] <= 0 && g[i][0] <= 0) return 0;\n        }\n        return 1;\n    }\n};",
    "submit_ts": "1722137116",
    "subm_id": "1335754645"
}