{
    "username": "btcmoon",
    "submission": "class Solution {\n    private class Point implements Comparable<Point> {\n        int value;\n        int index;\n\n        public Point(int value, int index) {\n            this.value = value;\n            this.index = index;\n        }\n\n        @Override\n        public int compareTo(Point other) {\n            if (this.value != other.value) {\n                return Integer.compare(this.value, other.value);\n            } else {\n                return Integer.compare(this.index, other.index);\n            }\n        }\n    }\n\n    \n    public int minimumDistance(int[][] points) {\n        List<Point> t1 = new ArrayList<>();\n        List<Point> t2 = new ArrayList<>();\n        for (int i = 0; i < points.length; i++) {\n            t1.add(new Point(points[i][0] - points[i][1], i));\n            t2.add(new Point(points[i][0] + points[i][1], i));\n        }\n\n        TreeSet<Point> sl1 = new TreeSet<>(t1);\n        TreeSet<Point> sl2 = new TreeSet<>(t2);\n\n        int ans = Integer.MAX_VALUE;\n        for (int i = 0; i < points.length; i++) {\n            Point a = new Point(points[i][0] - points[i][1], i);\n            Point b = new Point(points[i][0] + points[i][1], i);\n\n            sl1.remove(a);\n            sl2.remove(b);\n\n            Point maxSl1 = sl1.last();\n            Point minSl1 = sl1.first();\n            Point maxSl2 = sl2.last();\n            Point minSl2 = sl2.first();\n\n            ans = Math.min(Math.max(maxSl1.value - minSl1.value, maxSl2.value - minSl2.value), ans);\n\n            sl1.add(a);\n            sl2.add(b);\n        }\n\n        return ans;\n        \n    }\n}"
}