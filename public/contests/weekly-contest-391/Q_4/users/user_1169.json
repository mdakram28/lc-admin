{
    "username": "iwa2no",
    "submission": "class Solution {\npublic:\n    int calc(vector<int> a, vector<int> b) {\n        return abs(a[0]-b[0])+abs(a[1]-b[1]);\n    }\n    bool check(int x, vector<vector<int>>& p){\n        return false;\n    }\n    int minimumDistance(vector<vector<int>>& p) {\n        int n = p.size();\n        vector<int> sum(n), dif(n);\n        for (int i = 0; i < n; i++){\n            int x = p[i][0], y = p[i][1];\n            sum[i] = x + y;\n            dif[i] = x - y;\n        }\n        // int lo = 0, hi = 4 * (1e8 + 2);\n        // while (lo < hi) {\n        //     int mid = (lo + hi) / 2;\n        //     if (check(mid,p)) hi = mid;\n        //     else lo = mid + 1;\n        // }\n        // return lo;\n        \n        int ans = INT_MAX;\n        \n        multiset<int> s1,s2;\n        for (auto& x : sum) s1.insert(x);\n        for (auto& x : dif) s2.insert(x);\n        for (int i = 0; i < n; i++){\n            s1.erase(s1.find(sum[i]));\n            s2.erase(s2.find(dif[i]));\n            ans = min(ans, max(*(--s1.end()) - *s1.begin(), *(--s2.end()) - *s2.begin()));\n            \n            s1.insert(sum[i]);\n            s2.insert(dif[i]);\n        }\n        \n        return ans;\n    }\n};"
}