{
    "username": "pcwuu",
    "submission": "class Solution {\npublic:\n    int n, m;\n    int dp[30][30][30][30][4];\n    \n    \n    int sol(int r1, int r2, int c1, int c2, int rec, vector<vector<int>>&grid) {\n       /* if(rec == 0) {\n            for(int i = r1; i <= r2; i++)\n                for(int j = c1; j <= c2; j++)\n                    if(grid[i][j]) {\n                        return 1000;\n                    }\n            return 0;\n        }*/\n        \n        if(dp[r1][r2][c1][c2][rec] != -1)\n            return dp[r1][r2][c1][c2][rec];\n        \n        if(rec == 1) {\n            int a = r2 + 1, b = r1 - 1, c = c2 + 1, d = c1 - 1;\n\n            for(int i = r1; i <= r2; i++)\n                for(int j = c1; j <= c2; j++) {\n                    if(grid[i][j]) {\n                        a = min(a, i);\n                        b = max(b, i);\n                        c = min(c, j);\n                        d = max(d, j);\n                    }\n                }\n            if(a == r2 + 1)\n                return dp[r1][r2][c1][c2][rec] = 0;\n            return dp[r1][r2][c1][c2][rec] = (b - a + 1) * (d - c + 1);\n        }\n    \n        if(r1 == r2 && c1 == c2) \n            return dp[r1][r2][c1][c2][rec] = (grid[r1][r2])? 1 : 0;\n        \n        \n        int ret = 1000;\n        \n        for(int i = r1; i < r2; i++) {\n            ret = min(ret, sol(r1, i, c1, c2, 1, grid) + sol(i + 1, r2, c1, c2, rec - 1, grid));\n            ret = min(ret, sol(r1, i, c1, c2, rec - 1, grid) + sol(i + 1, r2, c1, c2, 1, grid));\n        }\n        \n        for(int i = c1; i < c2; i++) {\n            ret = min(ret, sol(r1, r2, c1, i, 1, grid) + sol(r1, r2, i + 1, c2, rec - 1, grid));\n            ret = min(ret, sol(r1, r2, c1, i, rec - 1, grid) + sol(r1, r2, i + 1, c2, 1, grid));            \n        }\n        return dp[r1][r2][c1][c2][rec] = ret;\n    }\n    \n    int minimumSum(vector<vector<int>>& grid) {\n        \n        memset(dp, -1, sizeof(dp));\n        \n        n = grid.size();\n        m = grid[0].size();\n        return sol(0, n - 1, 0, m - 1, 3, grid);\n    }\n};",
    "submit_ts": 1719113863.0
}