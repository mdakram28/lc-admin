{
    "username": "\u65cc\u5e74",
    "submission": "class Solution {\npublic:\n    long long maximumValueSum(vector<vector<int>>& board) {\n        long long n = board.size();\n        long long m = board[0].size();\n        vector<vector<pair<long long, long long>>> top3(n, vector<pair<long long, long long>>(3, {-1e9, -1}));\n        for (int i = 0; i < n; ++i) {\n            vector<pair<long long, long long>> temp;\n            for (int j = 0; j < m; ++j) {\n                temp.push_back({board[i][j], j});\n            }\n            sort(temp.rbegin(), temp.rend());\n            for (int k = 0; k < 3 && k < m; ++k) {\n                top3[i][k] = temp[k];\n            }\n        }\n        long long mx = -3e9;\n\n        // \u679a\u4e3e\u6240\u6709\u884c\u7ec4\u5408\n        for (int i1 = 0; i1 < n; ++i1) {\n            for (int i2 = i1 + 1; i2 < n; ++i2) {\n                for (int i3 = i2 + 1; i3 < n; ++i3) {\n                    for (auto& p1 : top3[i1]) {\n                        for (auto& p2 : top3[i2]) {\n                            for (auto& p3 : top3[i3]) {\n                                if (p1.second != p2.second && p1.second != p3.second && p2.second != p3.second) {\n                                    mx = max(mx, p1.first + p2.first + p3.first);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        return mx;\n    }\n};",
    "submit_ts": "1723907452",
    "subm_id": "556325616"
}