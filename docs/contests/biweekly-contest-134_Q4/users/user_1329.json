{
    "username": "yuchen_724",
    "submission": "class Solution:\n    def countSubarrays(self, nums: List[int], k: int) -> int:\n        ans = 0\n        remainder = []\n        val = k\n        while val>=1:\n            remainder.append(val%2)\n            val = val//2\n        \n        check = []\n        j = 1\n        for num in nums:\n            if num<k:\n                isgood = False\n            elif num==k:\n                isgood = True\n            else:    \n                val = num\n                isgood = True\n                for i in range(len(remainder)):\n                    if val%2<remainder[i]:\n                        isgood = False\n                        break\n                    val = val//2\n            \n            if isgood:\n                if len(check)<j:\n                    check.append([num])\n                else:\n                    check[-1].append(num)\n            else:\n                if j==len(check):\n                    j += 1\n        \n        print(check)\n        for element in check:\n            operate = []\n            for i,val in enumerate(element):\n                if val == k:\n                    for val_now in operate:\n                        ans += val_now[1]*(len(element)-i)\n                    ans += len(element)-i\n                    operate = []\n                    continue\n                \n                operate.append([val,1])\n                new_operate = []\n                for val_now in operate:\n                    n = (val_now[0])&val\n                    if n == k:\n                        ans += val_now[1]*(len(element)-i)\n                    else:\n                        l = 0\n                        h = len(new_operate)\n                        while l<h:\n                            m = (l+h)//2\n                            if new_operate[m][0] < n:\n                                l = m+1\n                            elif new_operate[m][0] > n:\n                                h = m-1\n                            else:\n                                l = m\n                                break\n                        \n                        if l>=len(new_operate) or new_operate[l][0] != n:\n                            new_operate.insert(l,[n,val_now[1]])\n                        else:\n                            new_operate[l][1] += val_now[1]\n                operate = new_operate.copy()\n\n        \n        return ans\n                \n            \n            \n        \n        ",
    "submit_ts": "1720279912",
    "subm_id": "1311769976"
}