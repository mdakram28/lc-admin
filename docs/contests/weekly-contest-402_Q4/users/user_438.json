{
    "username": "shuohe",
    "submission": "class MyTree:\n    def __init__(self, size):\n        self.size = size\n        self.tree = [0] * (size + 1)\n\n    def update(self, index, delta):\n        while index <= self.size:\n            self.tree[index] += delta\n            index += index & -index\n\n    def query(self, index):\n        total = 0\n        while index > 0:\n            total += self.tree[index]\n            index -= index & -index\n        return total\n\n    def range_query(self, left, right):\n        return self.query(right) - self.query(left - 1)\n\nclass Solution:\n    def countOfPeaks(self, nums: List[int], queries: List[List[int]]) -> List[int]:\n        def is_peak(arr, i):\n            return 0 < i < len(arr) - 1 and arr[i - 1] < arr[i] > arr[i + 1]\n\n        n = len(nums)\n        myTree = MyTree(n)\n        peak_status = [0] * n\n\n        for i in range(1, n - 1):\n            if is_peak(nums, i):\n                peak_status[i] = 1\n                myTree.update(i + 1, 1) \n\n        result = []\n\n        for query in queries:\n            if query[0] == 1: \n                _, left, right = query\n                if left + 1 < right:\n                    count = myTree.range_query(left + 2, right) \n                else:\n                    count = 0\n                result.append(count)\n            elif query[0] == 2: \n                _, index, value = query\n                nums[index] = value\n                for i in range(max(1, index - 1), min(n - 1, index + 2)):\n                    was_peak = peak_status[i]\n                    curr = is_peak(nums, i)\n                    if was_peak != curr:\n                        myTree.update(i + 1, 1 if curr else -1)\n                        peak_status[i] = 1 if curr else 0\n\n        return result\n\n\n\n",
    "submit_ts": 1718507578.0
}