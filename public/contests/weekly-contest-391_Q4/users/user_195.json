{
    "username": "jiegec",
    "submission": "impl Solution {\n    pub fn minimum_distance(points: Vec<Vec<i32>>) -> i32 {\n        let mut sums = vec![];\n        let mut subs = vec![];\n        for point in &points {\n            sums.push(point[0] + point[1]);\n            subs.push(point[0] - point[1]);\n        }\n\n        let mut max_sum_i = 0;\n        for i in 0..sums.len() {\n            if sums[i] > sums[max_sum_i] {\n                max_sum_i = i;\n            }\n        }\n\n        let mut min_sum_i = 0;\n        for i in 0..sums.len() {\n            if sums[i] < sums[min_sum_i] {\n                min_sum_i = i;\n            }\n        }\n\n        let mut max_sub_i = 0;\n        for i in 0..subs.len() {\n            if subs[i] > subs[max_sub_i] {\n                max_sub_i = i;\n            }\n        }\n\n        let mut min_sub_i = 0;\n        for i in 0..subs.len() {\n            if subs[i] < subs[min_sub_i] {\n                min_sub_i = i;\n            }\n        }\n\n        let mut res = None;\n        for i in [max_sum_i, min_sum_i, max_sub_i, min_sub_i] {\n            let mut new_max_sum = None;\n            for j in 0..sums.len() {\n                if j != i && (new_max_sum.is_none() || new_max_sum.unwrap() < sums[j]) {\n                    new_max_sum = Some(sums[j]);\n                }\n            }\n\n            let mut new_min_sum = None;\n            for j in 0..sums.len() {\n                if j != i && (new_min_sum.is_none() || new_min_sum.unwrap() > sums[j]) {\n                    new_min_sum = Some(sums[j]);\n                }\n            }\n\n            let mut new_max_sub = None;\n            for j in 0..subs.len() {\n                if j != i && (new_max_sub.is_none() || new_max_sub.unwrap() < subs[j]) {\n                    new_max_sub = Some(subs[j]);\n                }\n            }\n\n            let mut new_min_sub = None;\n            for j in 0..subs.len() {\n                if j != i && (new_min_sub.is_none() || new_min_sub.unwrap() > subs[j]) {\n                    new_min_sub = Some(subs[j]);\n                }\n            }\n\n            let new_res = std::cmp::max(\n                new_max_sum.unwrap() - new_min_sum.unwrap(),\n                new_max_sub.unwrap() - new_min_sub.unwrap(),\n            );\n            if res.is_none() || res.unwrap() > new_res {\n                res = Some(new_res);\n            }\n        }\n\n        res.unwrap()\n    }\n}\n"
}