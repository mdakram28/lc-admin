{
    "username": "Mohan Kumar",
    "submission": "\n#define lli long long int\n\nclass Solution {\npublic:\n    long long maximumValueSum(vector<vector<int>>& board) {\n        lli n = board.size();\n        lli m = board[0].size();\n\n        vector<vector<lli>> options(n, vector<lli>(3, 0));\n\n        for (int i = 0; i < n; ++i) {\n            vector<lli> indices(m);\n            iota(indices.begin(), indices.end(), 0);\n            sort(indices.begin(), indices.end(), [&board, i](lli a, lli b) {\n                return board[i][a] > board[i][b];\n            });\n            options[i][0] = indices[0];\n            options[i][1] = indices[1];\n            options[i][2] = indices[2];\n        }\n\n        lli maxSum = LLONG_MIN;\n\n        for (int r1 = 0; r1 < n - 2; ++r1) {\n            for (int r2 = r1 + 1; r2 < n - 1; ++r2) {\n                for (int r3 = r2 + 1; r3 < n; ++r3) {\n\n                    for (int c1 : options[r1]) {\n                        for (int c2 : options[r2]) {\n                            if (c2 == c1)\n                                continue;\n                            for (int c3 : options[r3]) {\n                                if (c3 == c1 || c3 == c2)\n                                    continue;\n                                lli sum = board[r1][c1];\n                                sum += board[r2][c2];\n                                sum+= board[r3][c3];\n                                maxSum = max(maxSum, sum);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return maxSum;\n    }\n};",
    "submit_ts": "1723908273",
    "subm_id": "1359145659"
}