{
    "username": "wanghy012",
    "submission": "import numpy as np\nclass Solution:\n    def minimumCost(self, target: str, words: List[str], costs: List[int]) -> int:\n        mywords = {}\n        lengths = set([])\n        for i in range(len(words)):\n            lengths.add(len(words[i]))\n            if words[i] in mywords:\n                mywords[words[i]] = min(mywords[words[i]],costs[i])\n            else:\n                mywords[words[i]] = costs[i]\n        words = sorted(list(mywords.keys()))\n        lengths = sorted(list(lengths))\n        for w in words[::-1]:\n            for l in lengths:\n                if l >= len(w):\n                    break\n                if w[:l] in mywords and w[l:] in mywords:\n                    if mywords[w[:l]] + mywords[w[l:]] <= mywords[w]:\n                        mywords.pop(w)\n                        break\n        lengths = set([])\n        for w in mywords:\n            lengths.add(len(w))\n        lengths = sorted(list(lengths))\n        dp = [0]*(len(target)+ 1)\n        for i in range(len(target)):\n            c = np.inf\n            for l in lengths:\n                if l > i+1:\n                    break\n                m = target[i-l+1:i+1]\n                if m in mywords:\n                    if l == i+1 and mywords[m] >= c:\n                        mywords.pop(m)\n                        break\n                    c = min(c, dp[i-l+1] + mywords[m])\n            dp[i+1] = c\n        if dp[-1] == np.inf:\n            return -1\n        return dp[-1]",
    "submit_ts": "1720323854",
    "subm_id": "1312385652"
}