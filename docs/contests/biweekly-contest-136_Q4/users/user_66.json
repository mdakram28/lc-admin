{
    "username": "garyjhu",
    "submission": "import java.util.ArrayList;\nimport java.util.List;\n\nclass Solution {\n    public int[] timeTaken(int[][] edges) {\n        int n = edges.length + 1;\n        List<Integer>[] adj = new List[n];\n        for (int i = 0; i < n; i++) adj[i] = new ArrayList<>();\n        for (int[] e : edges) {\n            adj[e[0]].add(e[1]);\n            adj[e[1]].add(e[0]);\n        }\n        int[] max = new int[n];\n        int[] maxi = new int[n];\n        int[] sMax = new int[n];\n        dfs(adj, 0, -1, max, maxi, sMax);\n        int[] res = new int[n];\n        solve(adj, 0, -1, res, max, maxi, sMax, 0);\n        return res;\n    }\n\n    private void dfs(List<Integer>[] adj, int v, int parent, int[] max, int[] maxi, int[] sMax) {\n        for (int w : adj[v]) {\n            if (w == parent) continue;\n            dfs(adj, w, v, max, maxi, sMax);\n            int add = w % 2 == 1 ? 1 : 2;\n            if (max[w] + add > max[v]) {\n                sMax[v] = max[v];\n                max[v] = max[w] + add;\n                maxi[v] = w;\n            }\n            else if (max[w] + add > sMax[v]) sMax[v] = max[w] + add;\n        }\n    }\n\n    private void solve(List<Integer>[] adj, int v, int parent, int[] res, int[] max, int[] maxi, int[] sMax, int use) {\n        res[v] = Math.max(max[v], use);\n        int add = v % 2 == 1 ? 1 : 2;\n        for (int w : adj[v]) {\n            if (w == parent) continue;\n            if (maxi[v] == w) solve(adj, w, v, res, max, maxi, sMax, Math.max(sMax[v], use) + add);\n            else solve(adj, w, v, res, max, maxi, sMax, Math.max(max[v], use) + add);\n        }\n    }\n}\n",
    "submit_ts": "1722698155",
    "subm_id": "1343171521"
}