{
    "username": "shivam_jaiswal_11",
    "submission": "#include <bits/stdc++.h>\nusing namespace std;\n\n#define ll long long \n\nstruct Node\n{\nNode* links[26];\nint mcst=INT_MAX;\nbool flag=false;\nint cntEndWith=0;\nint cntPrefix=0;\nvoid increaseEnd()\n{\n    cntEndWith++;\n}\nvoid increasePrefix()\n{\n    cntPrefix++;\n}\nvoid deleteEnd()\n{\n    cntEndWith--;\n}\nvoid reducePrefix()\n{\n    cntPrefix--;\n}\nbool contains_key(char ch)\n{\n    return (links[ch-'a']!=NULL);\n}\nvoid put(char ch,Node* node)\n{\n    links[ch-'a']=node;\n}\nNode* get(char ch)\n{\n    return links[ch-'a'];\n}\nvoid setEnd()\n{\n    flag=true;\n}\nint getEnd()\n{\n    return cntEndWith;\n}\nint getPrefix()\n{\n    return cntPrefix;\n}\n\n};\n\nclass trie\n{\n    public:\n        \n        Node* root;\n        trie()\n        {\n            root=new Node();\n        }\n        \n        // time_complexity=O(len(word)\n        void insert(string &word,int cost)\n        {\n            Node* node=root;\n            for (int i = 0; i < word.length(); i++)\n            {\n                if(!node->contains_key(word[i]))\n                {\n                    node->put(word[i],new Node());\n                }\n                node=node->get(word[i]);\n                node->increasePrefix();\n            }\n            node->increaseEnd();\n            node->setEnd();\n            node->mcst = min(node->mcst, cost);\n        }\n\n        bool search(string &word)\n        {\n            Node* node =root;\n            for (int i = 0; i < word.length(); i++)\n            {\n                if(!node->contains_key(word[i])){return false;}\n                node=node->get(word[i]);\n            }\n            return node->flag;\n            \n        }\n\n        bool startsWith(string &word)\n        {\n            Node* node =root;\n            for (int i = 0; i < word.length(); i++)\n            {\n                if(!node->contains_key(word[i])){return false;}\n                node=node->get(word[i]);\n            }\n            return true;\n        }\n\n        int countWordsEqualTo(string &word)\n        {\n            Node* node=root;\n            for (int i = 0; i < word.length(); i++)\n            {\n                if(node->contains_key(word[i]))\n                {\n                    node=node->get(word[i]);\n                }\n                else{return 0;}\n            }\n            return node->getEnd();\n        }\n\n        \n        int countWordsStartingWith(string &word)\n        {\n            Node* node=root;\n            for (int i = 0; i < word.length(); i++)\n            {\n                if(node->contains_key(word[i]))\n                {\n                    node=node->get(word[i]);\n                }\n                else{return 0;}\n            }\n            return node->getPrefix();\n        }\n\n        void erase(string &word)\n        {\n            Node* node=root;\n            for (int i = 0; i < word.length(); i++)\n            {\n                if(node->contains_key(word[i]))\n                {\n                    node=node->get(word[i]);\n                    node->reducePrefix();\n                }\n                else{return;}\n            }\n            node->deleteEnd();\n        }\n};\n\nclass Solution {\npublic:\n    int minimumCost(string tg, vector<string>& wd, vector<int>& cst)\n    {\n        int n=tg.length();\n        int m=wd.size();\n        trie* t=new trie();\n        int c=0;\n        for(auto i:wd)\n        {\n            t->insert(i,cst[c]);\n            c++;\n        }\n        vector<int> memo(n + 1, INT_MAX);\n        memo[0]=0;\n        for (int i = 0; i <= n; i++)\n        {\n            if(memo[i]!=INT_MAX)\n            {\n                Node* node=t->root;\n                for (int j = i; j < n; ++j) {\n                    if (node->links[tg[j]-'a']){\n                        node = node->links[tg[j]-'a'];\n                        if (node->mcst != INT_MAX) {\n                            memo[j + 1] = min(memo[j + 1], memo[i] + node->mcst);\n                        }\n                    }\n                    else{\n                        break;\n                    }\n                }\n            }\n        }\n        if(memo[n]==INT_MAX)\n        {\n            return -1;\n        }\n        return memo[n];\n        \n        \n    }\n};\n",
    "submit_ts": "1720322274",
    "subm_id": "1312345434"
}