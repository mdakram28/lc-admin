{
    "username": "alchyuan",
    "submission": "class Solution:\n    def countKConstraintSubstrings(self, s: str, k: int, queries: List[List[int]]) -> List[int]:\n        n = len(s)\n\n        def make_idx(target):\n            idx = []\n            total = cur = i = 0\n            for j in range(n):\n                total += s[j] == target\n                while total - cur > k:\n                    cur += s[i] == target\n                    i += 1\n                idx.append(i)\n            return idx\n        \n        idx0 = make_idx('0')\n        idx1 = make_idx('1')\n        idx01 = list(map(max, idx0, idx1))\n        p0 = list(accumulate(idx0, initial=0))\n        p1 = list(accumulate(idx1, initial=0))\n        p01 = list(accumulate(idx01, initial=0))\n\n        res = []\n        #correct = []\n        for l, r in queries:\n            # [l, m) <= l\n            # [m, r] > l\n            m = bisect_right(idx0, l, lo=l, hi=r+1)\n            zeros = (r - l + 1) * (l + r + 2) // 2 - ((m - l) * l + p0[r+1] - p0[m])\n            m = bisect_right(idx1, l, lo=l, hi=r+1)\n            ones = (r - l + 1) * (l + r + 2) // 2 - ((m - l) * l + p1[r+1] - p1[m])\n            m = bisect_right(idx01, l, lo=l, hi=r+1)\n            zeros_n_ones = (r - l + 1) * (l + r + 2) // 2 - ((m - l) * l + p01[r+1] - p01[m])\n\n            res.append( ones + zeros - zeros_n_ones )\n            \n\n\n            # cnt = 0\n            # for i in range(l, r + 1):\n            #     for j in range(i, r + 1):\n            #         ss = s[i:j+1]\n            #         zeros = ss.count('0')\n            #         ones = j - i + 1 - zeros\n            #         cnt += zeros <= k or ones <= k\n            # correct.append(cnt)\n\n        #print(idx0)\n        #print(correct)\n        return res\n        # 1. do for 0\n        # 1. idx0 array\n\n\n        # cnt number of 0's\n        # cnt number of 1's\n        # cnt number of 0s and 1s\n        # PIE ?\n        \n        # p[j] - p[i] <= k, left <= i <= j <= right, number of (i,j) that satisfies\n        # for fixed j how many i satisfies? sliding window\n\n        # 1 2 2 3 4 ... ([i, j] all work)\n        # sum j + 1 - max(i[j], left), j in [l, r]\n        # = sum max(i[j], left) - sum j\n        # = sum max(i[j], left) - (r-l+1) * (l + r) / 2\n        # (J - max(...) FIXIT)\n\n        # bisect to find k\n        # k is number of vals where left >= i[j]\n        # = k*left + sum left - ..\n        # (number of subarrays in [l,r] that satisfy k-constraint)\n\n        # 0 and 1:\n        # sum j - max(i3[j], left), j in [l, r]\n        # compute i3[i] = max(i[i], i2[i])",
    "submit_ts": "1723952542",
    "subm_id": "1359798678"
}