{
    "username": "dishhaa03",
    "submission": "#include <vector>\n#include <string>\n#include <algorithm>\n\nusing namespace std;\n\nclass TrieNode {\npublic:\n    TrieNode* children[26];\n    int minCost; // to store minimum cost to reach here\n\n    TrieNode() {\n        for (int i = 0; i < 26; ++i) {\n            children[i] = nullptr;\n        }\n        minCost = 1e9; // initialize to a large number\n    }\n};\n\nclass Solution {\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        TrieNode* root = new TrieNode();\n        \n        // Insert words into Trie with their costs\n        for (int i = 0; i < words.size(); ++i) {\n            insertWord(root, words[i], costs[i]);\n        }\n        \n        int n = target.length();\n        vector<int> dp(n + 1, 1e9);\n        dp[0] = 0; // base case: no cost to construct an empty substring\n        \n        for (int i = 0; i < n; ++i) {\n            TrieNode* curr = root;\n            for (int j = i; j < n; ++j) {\n                int idx = target[j] - 'a';\n                if (curr->children[idx] == nullptr) break; // no matching prefix found\n                curr = curr->children[idx];\n                dp[j + 1] = min(dp[j + 1], dp[i] + curr->minCost);\n            }\n        }\n        \n        return dp[n] == 1e9 ? -1 : dp[n];\n    }\n    \nprivate:\n    void insertWord(TrieNode* root, string& word, int cost) {\n        TrieNode* curr = root;\n        for (char ch : word) {\n            int idx = ch - 'a';\n            if (curr->children[idx] == nullptr) {\n                curr->children[idx] = new TrieNode();\n            }\n            curr = curr->children[idx];\n        }\n        curr->minCost = min(curr->minCost, cost);\n    }\n};\n",
    "submit_ts": "1720324732",
    "subm_id": "1312406672"
}