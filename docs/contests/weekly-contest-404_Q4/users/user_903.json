{
    "username": "Fabian0",
    "submission": "class Solution {\n    public int minimumDiameterAfterMerge(int[][] edges1, int[][] edges2) {\n        treeDiameter(edges1);\n        int s1 = max;\n        max = 0;\n        adj.clear();visited.clear();\n        treeDiameter(edges2);\n        int s2 = max;\n        // System.out.println(s1 +\"   \"+ s2);\n        \n        if(s1==0&&s2==0)return 1;\n        \n        int x1 = (s1+1)/2;\n        int x2 = (s2+1)/2;\n         // System.out.println(s1 +\"   \"+ s2);\n        \n    \n        \n        int res =  x1+x2+1;\n        \n        return Math.max(res, Math.max(s1, s2));\n        \n//         if(s1== 0)return s2+1;\n//         if(s2 == 0)return s1+1;\n        \n//         s1++;\n//         s2++;\n        \n        \n        \n//         if(s1==2 && s2==2)return 3;\n        \n//         // if(s1 == s2)return s1+1;\n        \n//         return Math.max(s1,s2);\n        \n        // return -1;  0-1-2\n    }\n    \n    \n    int max = 0;\n    Map<Integer, Set<Integer>> adj = new HashMap<>();\n\n    public int treeDiameter(int[][] edges) {\n\n        for(int[] edge : edges){\n            adj.computeIfAbsent(edge[0], c->new HashSet<>()).add(edge[1]);\n            adj.computeIfAbsent(edge[1], c->new HashSet<>()).add(edge[0]);\n        }\n        dfs(0);\n        return max;\n    }\n\n    Set<Integer> visited = new HashSet<>();\n\n    private int dfs(int start){\n        if(visited.contains(start))return 0;\n        visited.add(start);\n\n        int best = 0;\n\n        if(adj.containsKey(start)==false || adj.get(start).isEmpty())return 0;\n\n        PriorityQueue<Integer> pq = new PriorityQueue<>();\n\n        for(int child : adj.get(start)){\n            int res = dfs(child);\n            pq.offer(res);\n            if(pq.size()>2)pq.poll();\n        }\n\n        if(pq.size()==2){\n            int n1 = pq.poll();\n            int n2 = pq.peek();\n            max = Math.max(max, n1+n2);\n            return n2 + 1;\n        }else{ //must be size 1\n            int n1 = pq.peek();\n            max = Math.max(max, n1);\n            return n1 + 1; \n        }//0-1-2\n\n        \n    }\n}",
    "submit_ts": "1719719447",
    "subm_id": "1304442162"
}