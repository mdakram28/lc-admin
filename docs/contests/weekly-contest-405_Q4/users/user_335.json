{
    "username": "shukhratutaboev",
    "submission": "public class Solution {\n    private class TrieNode {\n        public Dictionary<char, TrieNode> children = new Dictionary<char, TrieNode>();\n        public List<int> wordIndices = new List<int>();\n    }\n\n    public int MinimumCost(string target, string[] words, int[] costs) {\n        TrieNode rootNode = new TrieNode();\n        for (int index = 0; index < words.Length; index++) {\n            TrieNode currentNode = rootNode;\n            foreach (char character in words[index]) {\n                if (!currentNode.children.ContainsKey(character)) {\n                    currentNode.children[character] = new TrieNode();\n                }\n                currentNode = currentNode.children[character];\n            }\n            currentNode.wordIndices.Add(index);\n        }\n\n        int targetLength = target.Length;\n        int[] minCost = new int[targetLength + 1];\n        Array.Fill(minCost, int.MaxValue);\n        minCost[0] = 0;\n\n        for (int position = 0; position < targetLength; position++) {\n            if (minCost[position] == int.MaxValue) continue;\n\n            TrieNode currentNode = rootNode;\n            for (int subPosition = position; subPosition < targetLength; subPosition++) {\n                if (!currentNode.children.ContainsKey(target[subPosition])) break;\n\n                currentNode = currentNode.children[target[subPosition]];\n                foreach (int wordIndex in currentNode.wordIndices) {\n                    int wordLength = words[wordIndex].Length;\n                    int cost = costs[wordIndex];\n                    if (position + wordLength <= targetLength) {\n                        minCost[position + wordLength] = Math.Min(minCost[position + wordLength], minCost[position] + cost);\n                    }\n                }\n            }\n        }\n\n        return minCost[targetLength] == int.MaxValue ? -1 : minCost[targetLength];\n    }\n}\n",
    "submit_ts": "1720322148",
    "subm_id": "1312341988"
}