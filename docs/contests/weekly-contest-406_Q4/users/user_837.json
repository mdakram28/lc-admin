{
    "username": "VamsiKrishnaRavinuthala",
    "submission": "def vk(m, n, horizontalCut, verticalCut):\n    horizontalCut.sort(reverse=True)\n    verticalCut.sort(reverse=True)\n    \n    h_ptr, v_ptr = 0, 0\n    \n    h_segments, v_segments = 1, 1\n    \n    total_cost = 0\n    \n    while h_ptr < len(horizontalCut) and v_ptr < len(verticalCut):\n        if horizontalCut[h_ptr] >= verticalCut[v_ptr]:\n            total_cost += horizontalCut[h_ptr] * v_segments\n            h_segments += 1\n            h_ptr += 1\n        else:\n            total_cost += verticalCut[v_ptr] * h_segments\n            v_segments += 1\n            v_ptr += 1\n    \n    while h_ptr < len(horizontalCut):\n        total_cost += horizontalCut[h_ptr] * v_segments\n        h_segments += 1\n        h_ptr += 1\n    \n    while v_ptr < len(verticalCut):\n        total_cost += verticalCut[v_ptr] * h_segments\n        v_segments += 1\n        v_ptr += 1\n    \n    return total_cost\nclass Solution:\n    def minimumCost(self, m: int, n: int, horizontalCut: List[int], verticalCut: List[int]) -> int:\n        return vk(m,n,horizontalCut,verticalCut)",
    "submit_ts": "1720925281",
    "subm_id": "1320249330"
}