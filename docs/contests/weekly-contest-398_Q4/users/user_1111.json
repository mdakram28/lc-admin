{
    "username": "SUVU01",
    "submission": "class Solution {\npublic:\n    #define ll long long\n    int jump;\n    map<pair<int, pair<int, int>>, int> mp;\n    ll ways(ll n, ll jump, int prev, int &k)\n    {\n        if(n >= k)\n        {\n            if(n - k >= 2)\n                return 0;\n            if(!prev)\n                return mp[{n, {jump, prev}}] = 1 + ways(n - 1, jump, 1, k);\n            else\n                return 0;\n        }\n        if(mp.find({n, {jump, prev}}) != mp.end())\n            return mp[{n, {jump, prev}}];\n        if(n == k)\n            return mp[{n, {jump, prev}}] = 1 + ways(n - 1, jump, 1, k);\n        if(prev or !n)\n            return mp[{n, {jump, prev}}] = ways(n + pow(2LL, jump), jump + 1, 0, k);\n        else\n            return mp[{n, {jump, prev}}] = ways(n - 1, jump, 1, k) + ways(n + pow(2LL, jump), jump + 1, 0, k);\n            \n    }\n    int waysToReachStair(int k) {\n        if(k == 0)\n            return 2;\n        if(k == 1)\n            return 4;\n        mp.clear();\n        return ways(1, 0, 0, k);\n    }\n};",
    "submit_ts": 1716089370.0
}