{
    "username": "Mrdagger",
    "submission": "#ifndef dhruvtyagi18\n#define dhruvtyagi18\n\ndef dhruv_ka_function4(self):\n    pass\ndef tyagi_function4(self):\n    pass\ndef dummy_function(self):\n    pass\ndef dummy_function2(self):\n    pass\ndef dummy_function3(self):\n    pass\ndef dummy_function4(self):\n    pass\n\n\n\nclass SegmentTree:\n    def __init__(self, arr):\n        self.len_arr = len(arr)\n        self.arr = arr\n        self.tree = [0] * (4 * self.len_arr)\n        self.build_tree(0, 0, self.len_arr - 1)\n    \n    def build_tree(self, node, start, end):\n        if start == end:\n            if 0 < start < self.len_arr - 1 and self.arr[start - 1] < self.arr[start] > self.arr[start + 1]:\n                self.tree[node] = 1\n        else:\n            mid = (start + end) // 2\n            left_child = 2 * node + 1\n            right_child = 2 * node + 2\n            self.build_tree(left_child, start, mid)\n            self.build_tree(right_child, mid + 1, end)\n            self.tree[node] = self.tree[left_child] + self.tree[right_child]\n    \n    def update_tree(self, idx, val, node, start, end):\n        if start == end:\n            self.arr[idx] = val\n            if 0 < idx < self.len_arr - 1 and self.arr[idx - 1] < self.arr[idx] > self.arr[idx + 1]:\n                self.tree[node] = 1\n            else:\n                self.tree[node] = 0\n        else:\n            mid = (start + end) // 2\n            left_child = 2 * node + 1\n            right_child = 2 * node + 2\n            if start <= idx <= mid:\n                self.update_tree(idx, val, left_child, start, mid)\n            else:\n                self.update_tree(idx, val, right_child, mid + 1, end)\n            self.tree[node] = self.tree[left_child] + self.tree[right_child]\n    \n    def query_tree(self, L, R, node, start, end):\n        if R < start or end < L:\n            return 0\n        if L <= start and end <= R:\n            return self.tree[node]\n        mid = (start + end) // 2\n        left_child = 2 * node + 1\n        right_child = 2 * node + 2\n        left_query = self.query_tree(L, R, left_child, start, mid)\n        right_query = self.query_tree(L, R, right_child, mid + 1, end)\n        return left_query + right_query\n\n\nclass Solution(object):\n    def countOfPeaks(self, arr, queries):\n        seg_tree = SegmentTree(arr)\n        results = []\n\n        for query in queries:\n            if query[0] == 1:\n                li, ri = query[1], query[2]\n                results.append(seg_tree.query_tree(li + 1, ri - 1, 0, 0, seg_tree.len_arr - 1))\n            elif query[0] == 2:\n                idx, val = query[1], query[2]\n                arr[idx] = val\n                for i in range(max(1, idx - 1), min(seg_tree.len_arr - 1, idx + 1) + 1):\n                    seg_tree.update_tree(i, arr[i], 0, 0, seg_tree.len_arr - 1)\n        \n        return results\n#endif\n\n",
    "submit_ts": 1718509320.0
}