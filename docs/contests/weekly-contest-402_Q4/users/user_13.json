{
    "username": "alephinfinity1",
    "submission": "int n;\nint bit[100010];\n\nvoid incr(int idx, int val) {\n    for (; idx < n; idx += idx & -idx) {\n        bit[idx] += val;\n    }\n}\n\nint sum(int l, int r) {\n    l--;\n    int ans = 0;\n    for (; r > l; r -= r & -r) {\n        ans += bit[r];\n    }\n    if (l == 0) { return ans; }\n    for (; l > r; l -= l & -l) {\n        ans -= bit[l];\n    }\n    \n    return ans;\n}\n\nclass Solution {\npublic:\n    vector<int> countOfPeaks(vector<int>& nums, vector<vector<int>>& queries) {\n        n = (int) size(nums);\n        for (int i = 0; i < n + 7; i++) { bit[i] = 0; }\n        \n        auto apex = [&](int idx) {\n            return idx > 0 && idx < n-1 && nums[idx] > nums[idx+1] && nums[idx] > nums[idx-1];\n        };\n        \n        for (int i = 1; i < n - 1; i++) {\n            if (apex(i)) {\n                incr(i, 1);\n            }\n        }\n        \n        vector<int> ans;\n        for (auto const& q : queries) {\n            if (q[0] == 1) {\n                if (q[2] - q[1] < 2) {\n                    ans.push_back(0);\n                } else {\n                    ans.push_back(sum(q[1]+1, q[2]-1));\n                }\n            } else {\n                bool was[3] = {apex(q[1]-1), apex(q[1]), apex(q[1]+1)};\n                nums[q[1]] = q[2];\n                \n                if (was[0] && !apex(q[1]-1)) { incr(q[1]-1, -1); }\n                else if (!was[0] && apex(q[1]-1)) { incr(q[1]-1, 1); }\n                \n                if (was[1] && !apex(q[1])) { incr(q[1], -1); }\n                else if (!was[1] && apex(q[1])) { incr(q[1], 1); }\n                \n                if (was[2] && !apex(q[1]+1)) { incr(q[1]+1, -1); }\n                else if (!was[2] && apex(q[1]+1)) { incr(q[1]+1, 1); }\n            }\n        }\n        \n        return ans;\n    }\n};",
    "submit_ts": 1718505840.0
}