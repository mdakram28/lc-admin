{
    "username": "nirajk24",
    "submission": "class Solution {\npublic:\n    int minimumDistance(vector<vector<int>>& points) {\n        int n = points.size();\n        multiset<int> sum;\n        multiset<int> diff;\n        \n        for (int i = 0; i < n; i++) {\n            sum.insert(points[i][0] + points[i][1]);\n            diff.insert(points[i][0] - points[i][1]);\n        }\n\n        // Sorting both the vectors\n        // sort(sum.begin(), sum.end());\n        // sort(diff.begin(), diff.end());\n        \n        int ans = max(*sum.rbegin() - *sum.begin(), *diff.rbegin() - *diff.begin());\n        for(int i = 0; i < n; i++){\n            int s = points[i][0] + points[i][1];\n            int d = points[i][0] - points[i][1];\n            \n            auto it = sum.find(s);\n            sum.erase(it);\n            auto it2 = diff.find(d);\n            diff.erase(it2);\n            int x = max(*sum.rbegin() - *sum.begin(), *diff.rbegin() - *diff.begin());\n            ans = min(x, ans);\n            sum.insert(s);\n            diff.insert(d);\n        }\n\n        return ans;\n        \n    }\n};"
}