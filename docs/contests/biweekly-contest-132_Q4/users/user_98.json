{
    "username": "rushinshah_",
    "submission": "class Solution {\npublic:\n    int maximumLength(vector<int>& nums, int k) {\n        int n = nums.size();\n        int dp[n + 1][k + 1];\n        memset(dp, 0, sizeof dp);\n        int ans = 1;\n        map<pair<int, int>, int> m;\n        vector<int> max_sub(k + 1, 0);\n        for(int i = 1; i <= n; i++){\n            vector<int> max_sub1 = max_sub;\n            for(int j = 0; j <= k; j++){\n                dp[i][j] = 1;\n                if(m.find({nums[i - 1], j}) != m.end()){\n                    dp[i][j] = m[{nums[i - 1], j}] + 1;\n                }\n                if(j > 0) dp[i][j] = max(dp[i][j], max_sub[j - 1] + 1);\n                \n                ans = max(ans, dp[i][j]);\n               \n                max_sub1[j] = max(max_sub[j], dp[i][j]);\n    \n                m[{nums[i - 1], j}] = dp[i][j];\n            }\n            max_sub = max_sub1;\n            \n        }\n        \n        return ans;\n    }\n};",
    "submit_ts": 1717859633.0
}