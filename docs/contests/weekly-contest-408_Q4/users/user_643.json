{
    "username": "abhishek1821",
    "submission": "class Solution {\npublic:\n    int f(vector<vector<int>>&g, int s,int tar1,int tar2,int nodes){\n         queue<int> q;\n         vector<int> vis(nodes+4, 0);\n         q.push(s);\n         vis[s] = 1;\n    \n        while(!q.empty()){\n          int e = q.front();\n             q.pop();\n         for(int v : g[e]){\n            if (!vis[v]){\n                q.push(v);\n                vis[v] = 1;\n            }\n         }\n       }\n        \n        return vis[tar1] || vis[tar2];\n    }\n\n    bool canReachCorner(int X, int Y, vector<vector<int>>& circles){\n         int n = circles.size();\n         vector<pair<pair<int, int>,int>> cirs(n);\n         vector<vector<int>> g(n+4);\n         int ncircles = n;\n        \n        for(int i=0;i<ncircles;i++){\n            cirs[i].first.first=circles[i][0];\n            cirs[i].first.second=circles[i][1];\n            cirs[i].second=circles[i][2];\n        \n        }\n        \n        for(int i=0;i<ncircles;i++){    \n            if(cirs[i].first.first <= cirs[i].second){\n                g[ncircles].push_back(i);\n                g[i].push_back(ncircles);\n            }\n            if(X-cirs[i].first.first <= cirs[i].second){\n                g[ncircles + 2].push_back(i);\n                g[i].push_back(ncircles + 2);\n            }\n            if(cirs[i].first.second <= cirs[i].second){\n                g[ncircles + 1].push_back(i);\n                g[i].push_back(ncircles + 1);\n            }\n            if(Y-cirs[i].first.second <= cirs[i].second){\n                g[ncircles + 3].push_back(i);\n                g[i].push_back(ncircles + 3);\n            }\n            \n        for(int j=i+1;j<ncircles;j++){\n                double dist = sqrt(pow(cirs[i].first.first-cirs[j].first.first,2) +\n                                   pow(cirs[i].first.second-cirs[j].first.second,2));\n                int rsum = cirs[i].second + cirs[j].second;\n                if (rsum >= dist) {\n                    g[i].push_back(j);\n                    g[j].push_back(i);\n                }\n            }\n        }\n        \n     int check = 0;\n     check = max(check, f(g,ncircles,ncircles + 1,ncircles + 2,ncircles + 4)); \n     check = max(check, f(g,ncircles+3,ncircles + 2,ncircles + 1,ncircles + 4));\n    \n        if(check) return false;\n        return true;\n    }\n};",
    "submit_ts": "1722137820",
    "subm_id": "1335774638"
}