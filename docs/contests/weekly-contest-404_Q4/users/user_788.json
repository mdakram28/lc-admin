{
    "username": "pratik_9998",
    "submission": "class Solution {\npublic:\n    vector<vector<int>> adj;\n    vector<int> ans;\n\n    void dfs(int node,int parent,int level){\n      ans[node] = level;\n      for(auto it : adj[node]){\n        if(it != parent){\n          dfs(it,node,level+1);\n        }\n      }\n    }\n    \n    void dfs2(int node,vector<int>& dist,int par){\n      for(auto it : adj[node]){\n          if(it!=par){\n              dist[it] = dist[node]+1;\n              dfs2(it,dist,node);\n          }\n      }\n    }\n    \n    int minimumDiameterAfterMerge(vector<vector<int>>& ed1, vector<vector<int>>& ed2) {\n        int n = ed1.size()+1;\n        int m = ed2.size()+1;\n        \n        adj.resize(n);\n        ans.resize(n,0);\n        \n        for(auto it : ed1){\n            int u = it[0];\n            int v = it[1];\n            adj[u].push_back(v);\n            adj[v].push_back(u);\n        }\n        \n        dfs(0,-1,0); //node,parent,level\n        int left_node = max_element(ans.begin(),ans.end())-ans.begin();\n        dfs(left_node,-1,0);\n        int right_node = max_element(ans.begin(),ans.end())-ans.begin();\n        int d1 = *max_element(ans.begin(),ans.end());\n        \n        vector<int> dist1(n,0),dist2(n,0);\n        dist1[left_node] = 0;\n        dist2[right_node] = 0;\n        dfs2(left_node,dist1,-1);\n        dfs2(right_node,dist2,-1);\n        \n        ans.clear();\n        adj.clear();\n        adj.resize(m);\n        ans.resize(m,0);\n        \n        for(auto it : ed2){\n            int u = it[0];\n            int v = it[1];\n            adj[u].push_back(v);\n            adj[v].push_back(u);\n        }\n        \n        dfs(0,-1,0); //node,parent,level\n        left_node = max_element(ans.begin(),ans.end())-ans.begin();\n        dfs(left_node,-1,0);\n        right_node = max_element(ans.begin(),ans.end())-ans.begin();\n        int d2 = *max_element(ans.begin(),ans.end());\n        \n        vector<int> dist3(m,0),dist4(m,0);\n        dist3[left_node] = 0;\n        dist4[right_node] = 0;\n        dfs2(left_node,dist3,-1);\n        dfs2(right_node,dist4,-1);\n        \n        int min1 = 1e9,min2 = 1e9;\n        \n        for(int i=0;i<n;i++){\n            min1 = min(min1,max(dist1[i],dist2[i]));\n        }\n        \n        for(int i=0;i<m;i++){\n            min2 = min(min2,max(dist3[i],dist4[i]));\n        }\n        \n        cout<<min1<<\" \"<<min2<<endl;\n        \n        return max({d1,d2,min1+min2+1});\n        \n    }\n};",
    "submit_ts": "1719719499",
    "subm_id": "1304443437"
}