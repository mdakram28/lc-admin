{
    "username": "yoasobi",
    "submission": "class Solution {\npublic:\n    struct Node{\n        Node*ch[26]={};\n        int cost=1e9;\n        Node(){}\n        Node(int c):cost(c){\n            \n        }\n    };\n    void addWord(Node*r, string &s, int cost){\n        for(auto c:s){\n            if(!r->ch[c-'a']) r->ch[c-'a']=new Node();\n            r=r->ch[c-'a'];\n        }\n        r->cost=min(r->cost, cost);\n    }\n    int find(Node*r, Node*root, string &s, int i, vector<int>&dp){\n        int n=s.length();\n        if(i==n) return 1e9;\n        if(root==r&&dp[i]!=1e9) return dp[i];\n        // if(dp.find(i)!=dp.end()&&dp[i].find(r)!=dp[i].end()){\n        //     return dp[i][r];\n        // }\n        int ret=1e9;\n        if(!r->ch[s[i]-'a']) return 1e9;\n        if(r->ch[s[i]-'a']->cost<1e9){\n            \n            ret=i<n-1?find(root, root, s, i+1, dp):0;\n            ret+=r->ch[s[i]-'a']->cost;\n            \n        }\n        int rrr=min(ret, find(r->ch[s[i]-'a'], root, s, i+1, dp));\n        if(r==root)dp[i]=rrr;\n        return rrr;\n    }\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        // unordered_map<string, int>cst;\n        int n=words.size();\n        Node*root=new Node();\n        for(int i=0;i<n;i++){\n            addWord(root, words[i], costs[i]);\n            // if(cst.find(words[i])==cst.end())cst[words[i]]=costs[i];\n            // else cst[words[i]]=min(cst[words[i]], costs[i]);\n        }\n        int m=target.size();\n        // unordered_map<int, unordered_map<Node*, int>>dp;\n        vector<int>dp(m, 1e9);\n        int ans=find(root, root, target, 0, dp);\n        return ans==1e9?-1:ans;\n    }\n};",
    "submit_ts": "1720323705",
    "subm_id": "1312382038"
}