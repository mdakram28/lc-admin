{
    "username": "zeekhan2082",
    "submission": "const int MOD = 1e9+ 7 ; ;\nconst int MAX_INV = 400;\n\nclass Solution {\npublic:\n\n\n    \n    // int n;\n    // unordered_map<int, int> mp;\n    // vector<vector<vector<long>>> dp;\n\n//     long rec(int length, int inv, int maxLen) {\n//         if (length == 0) return inv == 0 ? 1 : 0;\n//         if (inv < 0) return 0;\n//         if (dp[length][inv][maxLen] != -1) return dp[length][inv][maxLen];\n\n//         long ans = 0;\n//         for (int pos = 0; pos < length; ++pos) {\n//             int prev = inv - pos;\n//             if (prev >= 0) {\n//                 ans = (ans + rec(length - 1, prev, maxLen)) % MOD;\n//             }\n//         }\n\n//         if (mp.count(length)) {\n//             int ri = mp[length];\n//             if (inv != ri) {\n//                 ans = 0;\n//             }\n//         }\n\n//         return dp[length][inv][maxLen] = ans;\n//     }\n\n    \n    \n    int numberOfPermutations(int n, vector<vector<int>>& arr) {\n//         n = nx;\n//         mp.clear();\n//         for (int i = 0 ; i < (int)arr.size() ; i++) {\n//             mp[arr[i][0] + 1] = arr[i][1];\n//         }\n        \n//         dp.assign(n + 1, vector<vector<long>>(MAX_INV + 1, vector<long>(n + 1, -1)));\n\n//         long ans = 0;\n//         for (int inv = 0; inv <= MAX_INV; ++inv) {\n//             ans = (ans + rec(n, inv, n)) % MOD;\n//         }\n\n//         return (int)ans;    \n        unordered_map<int, int> mp;\n         for (int i = 0 ; i < (int)arr.size() ; i++) {\n            mp[arr[i][0] + 1] = arr[i][1];\n        }\n        vector<vector<long>> dp(n + 1, vector<long>(MAX_INV + 1, 0));\n        dp[0][0] = 1;\n        // for (int len = 1; len <= n; len++) {\n        //     for (int inv = 0; inv <= MAX_INV; inv++) {\n        //         for (int pos = 0; pos < len; pos++) {\n        //             int prevInv = inv - pos;\n        //             if (prevInv >= 0) {\n        //                 dp[len][inv] = (dp[len][inv] + dp[len - 1][prevInv]) % MOD;\n        //             }\n        //         }\n        //     }\n        //     if (mp.count(len)) {\n        //         int targetInv = mp[len];\n        //         for (int inv = 0; inv <= MAX_INV; inv++) {\n        //             if (inv != targetInv) {\n        //                 dp[len][inv] = 0;\n        //             }\n        //         }\n        //     }\n        // }\n        // long ans = 0;\n        // for (long count : dp[n]) {\n        //     ans = (ans + count) % MOD;\n        // }\n        // return (int)res;\n        \n        for (int i = 1; i <= n; i++) {\n            for (int j = 0; j <= MAX_INV; ++j) {\n                for (int pos = 0; pos < i; pos++) {\n                    int prev = j - pos;\n                    if (prev >= 0) {\n                        dp[i][j] = (dp[i][j] + dp[i - 1][prev]) % MOD;\n                    }\n                }\n            }\n\n\n            if (mp.count(i)) {\n                int ri = mp[i];\n                for (int inv = 0; inv <= MAX_INV; inv++) {\n                    if (inv != ri) {\n                        dp[i][inv] = 0;\n                    }\n                }\n            }\n        }\n\n        long ans = 0;\n        for (long count : dp[n]) {\n            ans = (ans + count) % MOD;\n        }\n\n        return (int)ans;\n\n    }\n};",
    "submit_ts": 1719071878.0
}