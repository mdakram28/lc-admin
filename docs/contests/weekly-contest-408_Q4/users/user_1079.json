{
    "username": "joesthetic69",
    "submission": "#include <iostream>\n#include <vector>\n#include <cmath>\n\nusing namespace std;\n\nclass Solution {\n/*public:\n    bool isInsideCircle(int x, int y, const vector<vector<int>>& circles) {\n        for (const auto& circle : circles) {\n            int cx = circle[0], cy = circle[1], r = circle[2];\n            if ((x - cx) * (x - cx) + (y - cy) * (y - cy) <= r * r) {\n                return true;\n            }\n        }\n        return false;\n    }\n    bool dfs(int x, int y, int X, int Y, vector<vector<int>>& visited, const vector<vector<int>>& circles) {\n        if (x < 0 || y < 0 || x > X || y > Y || visited[x][y] || isInsideCircle(x, y, circles)) {\n            return false;\n        }\n        if (x == X && y == Y) {\n            return true;\n        }\n        visited[x][y] = 1;\n        if (dfs(x + 1, y, X, Y, visited, circles) ||\n            dfs(x, y + 1, X, Y, visited, circles) || \n            dfs(x - 1, y, X, Y, visited, circles) || \n            dfs(x, y - 1, X, Y, visited, circles)) { \n            return true;\n        }\n\n        return false;\n    }\n\n    bool canReachCorner(int X, int Y, vector<vector<int>>& circles) {\n        vector<vector<int>> visited(X + 1, vector<int>(Y + 1, 0));\n        return dfs(0, 0, X, Y, visited, circles);\n    }*/\n    public:\n    bool canReachCorner(int X, int Y, vector<vector<int>>& circles) {\n        return isPathPossible(X, Y, circles);\n    }\n\nprivate:\n    bool isPathPossible(int X, int Y, vector<vector<int>>& circles) {\n        int numCircles = circles.size();\n        vector<vector<int>> graph(numCircles + 4);\n\n        for (int i = 0; i < numCircles; i++) {\n            // Connect circles to the virtual edges\n            if (circles[i][0] <= circles[i][2]) {\n                graph[numCircles].push_back(i);\n                graph[i].push_back(numCircles);\n            }\n            if (X - circles[i][0] <= circles[i][2]) {\n                graph[numCircles + 2].push_back(i);\n                graph[i].push_back(numCircles + 2);\n            }\n            if (circles[i][1] <= circles[i][2]) {\n                graph[numCircles + 1].push_back(i);\n                graph[i].push_back(numCircles + 1);\n            }\n            if (Y - circles[i][1] <= circles[i][2]) {\n                graph[numCircles + 3].push_back(i);\n                graph[i].push_back(numCircles + 3);\n            }\n            // Connect overlapping circles\n            for (int j = i + 1; j < numCircles; ++j) {\n                double distance = sqrt(pow(circles[i][0] - circles[j][0], 2) + pow(circles[i][1] - circles[j][1], 2));\n                int radiusSum = circles[i][2] + circles[j][2];\n                if (radiusSum >= distance) {\n                    graph[i].push_back(j);\n                    graph[j].push_back(i);\n                }\n            }\n        }\n\n        // Check for connectivity to the virtual edges\n        bool isBlocked = false;\n        isBlocked = isBlocked || bfs(graph, numCircles, numCircles + 1, numCircles + 2, numCircles + 4);\n        isBlocked = isBlocked || bfs(graph, numCircles + 3, numCircles + 2, numCircles + 1, numCircles + 4);\n\n        return !isBlocked;\n    }\n\n    bool bfs(vector<vector<int>>& graph, int start, int target1, int target2, int numNodes) {\n        queue<int> nodeQueue;\n        vector<bool> visited(numNodes + 4, false);\n        nodeQueue.push(start);\n        visited[start] = true;\n\n        while (!nodeQueue.empty()) {\n            int currentNode = nodeQueue.front();\n            nodeQueue.pop();\n\n            for (int neighbor : graph[currentNode]) {\n                if (!visited[neighbor]) {\n                    nodeQueue.push(neighbor);\n                    visited[neighbor] = true;\n                }\n            }\n        }\n\n        return visited[target1] || visited[target2];\n    }\n};\n\n",
    "submit_ts": "1722138535",
    "subm_id": "1335793250"
}