{
    "username": "light_44",
    "submission": "#include <vector>\n#include <algorithm>\n#include <iostream>\nusing namespace std;\n\nclass Solution {\npublic:\n    int calculateTreeDiameter(const vector<vector<int>>& edges, int n) {\n        if (n <= 1) return 0;\n        \n        vector<vector<int>> adj(n);\n        \n        for (auto& edge : edges) {\n            int u = edge[0], v = edge[1];\n            adj[u].push_back(v);\n            adj[v].push_back(u);\n        }\n        \n        function<void(int, int, vector<bool>&, vector<int>&)> dfs = [&](int node, int parent, vector<bool>& visited, vector<int>& distances) {\n            visited[node] = true;\n            \n            for (int neighbor : adj[node]) {\n                if (!visited[neighbor] && neighbor != parent) {\n                    distances[neighbor] = distances[node] + 1;\n                    dfs(neighbor, node, visited, distances);\n                }\n            }\n        };\n        \n        int maxDiameter = 0;\n        vector<bool> visited(n, false);\n        vector<int> distances(n, 0);\n        \n        dfs(0, -1, visited, distances);\n        \n        int farthestNode = max_element(distances.begin(), distances.end()) - distances.begin();\n        \n        fill(visited.begin(), visited.end(), false);\n        fill(distances.begin(), distances.end(), 0);\n        \n        dfs(farthestNode, -1, visited, distances);\n        \n        maxDiameter = *max_element(distances.begin(), distances.end());\n        \n        return maxDiameter;\n    }\n    \n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n        int a = calculateTreeDiameter(edges1, edges1.size() + 1);\n        int b = calculateTreeDiameter(edges2, edges2.size() + 1);\n        // if(a == 0 && b == 0)\n        //     return 1; \n        // else if(a == 0)\n        //     return 1 + b; \n        // else if(b == 0)\n        //     return 1 + a;\n        cout<<a<<\" \"<<b<<endl; \n        if(a % 2 == 1 && b % 2 == 1)\n        {\n            int x = max(a, b); \n            int y = min(a, b); \n            if(((y+1)/2 + 1) > x / 2)\n                return 1 + (a+1)/2 + (b+1)/2;\n            else \n                return x;\n        }\n        else if(a % 2 == 1)\n        {\n            if(a > b)\n            {\n                int x = a; \n                int y = b; \n                if((y/2+1) > x/2)\n                    return 1 + y/2 + (x+1)/ 2;\n                else \n                    return x; \n            }\n            else\n            {\n                int x = b; \n                int y = a; \n                if((y+1)/2 + 1 > x / 2)\n                    return 1 + x/2 + (y+1)/2;\n                else \n                    return x; \n            }\n        }\n        else if(b % 2 == 1)\n        {\n            if(b > a)\n            {\n                int x = b; \n                int y = a; \n                if((y/2+1) > x/2)\n                    return 1 + y/2 + (x+1)/ 2;\n                else \n                    return x; \n            }\n            else\n            {\n                int x = a; \n                int y = b; \n                if(((y+1)/2 + 1) > x / 2)\n                    return 1 + x/2 + (y+1)/2;\n                else \n                    return x; \n            }\n        }\n        else\n        {\n            if(a > b)\n            {\n                if((b/2 + 1) > a/2)\n                    return 1 + a/2 + b/2; \n                else \n                    return a;\n            }\n            else\n            {\n                if((a/2 + 1) > b / 2)\n                    return 1 + a/2 + b/2; \n                else \n                    return b; \n            }\n        }\n        return -1; \n    }\n};\n",
    "submit_ts": "1719719071",
    "subm_id": "1304433021"
}