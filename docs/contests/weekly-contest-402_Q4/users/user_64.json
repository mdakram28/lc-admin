{
    "username": "waakaaka",
    "submission": "template <typename T, typename K = int>\nstruct Fenwick {\n\tint n;\n\tvector<T> bit;\n\tFenwick() {} // For vector<Fenwick>.\n\tFenwick(int _n) : n(_n), bit(n + 1) {}\n\t/* 0 <= p < INT_MAX - 1. */\n\tvoid update(int p, T v) {\n\t\tfor (++p; p <= n; p += p & -p) bit[p] += v;\n\t}\n\t/* INT_MIN <= p < n. */\n\tT query(int p) {\n\t\tT ret{};\n\t\tfor (++p; p > 0; p -= p & -p) ret += bit[p];\n\t\treturn ret;\n\t}\n\t/* Must be addition! INT_MIN < l <= r < n. */\n\tT query(int l, int r) { return query(r) - query(l - 1); }\n\t/* Assume all values >= 0 in array.\n\tFind first ret in 0..n-1 so that sum[0..ret] >= k (or -1 if not exist). */\n\tint findFirst(T k) {\n\t\tint ret = 0, maxBit = 31 - __builtin_clz(n);\n\t\tfor (int i = maxBit; i >= 0; --i) {\n\t\t\tint p = ret + (1 << i);\n\t\t\tif (p <= n && bit[p] < k) {\n\t\t\t\tk -= bit[p];\n\t\t\t\tret = p;\n\t\t\t}\n\t\t}\n\t\treturn ret == n ? -1 : ret;\n\t}\n\t/* For range-update/point-query, must be addition! 0 <= l <= r < INT_MAX - 2. */\n\tvoid updateRange(int l, int r, T v) {\n\t\tupdate(l, v);\n\t\tupdate(r + 1, -v);\n\t}\n\t/* For range-update/point-query, must be addition! INT_MIN <= p < n. */\n\tT queryPoint(int p) { return query(p); }\n};\nclass Solution {\npublic:\n    vector<int> countOfPeaks(vector<int>& nums, vector<vector<int>>& queries) {\n      int n = nums.size();\n      Fenwick<int> fenw(n);\n      auto isPeak = [&](int i) {\n        if (i == 0 || i == n - 1) return false;\n        return nums[i - 1] < nums[i] && nums[i] > nums[i + 1];\n      };\n        for (int i = 1; i < n - 1; ++i) {\n          if (isPeak(i)) fenw.update(i, 1);\n        }\n      vector<int> ret;\n      for (auto& query : queries) {\n        if (query[0] == 1) {\n          int l = query[1], r = query[2];\n          int ans = 0;\n          if (l + 1 <= r - 1) ans += fenw.query(l + 1, r - 1);\n          ret.push_back(ans);\n        } else {\n          int i = query[1];\n          if (i > 0 && isPeak(i - 1)) fenw.update(i - 1, -1);\n          if (isPeak(i)) fenw.update(i, -1);\n          if (i + 1 < n && isPeak(i + 1)) fenw.update(i + 1, -1);\n          nums[i] = query[2];\n          if (i > 0 && isPeak(i - 1)) fenw.update(i - 1, 1);\n          if (isPeak(i)) fenw.update(i, 1);\n          if (i + 1 < n && isPeak(i + 1)) fenw.update(i + 1, 1);\n        }        \n      }\n      return ret;\n    }\n};",
    "submit_ts": 1718505590.0
}