{
    "username": "madhavdhingra11",
    "submission": "#define ll long long\n#define all(a) a.begin(),a.end()\nclass Solution {\npublic:\ntemplate<typename Node, typename Update>\nstruct SegTree {\n\tvector<Node> tree;\n\tvector<ll> arr; // type may change\n\tint n;\n\tint s;\n\tSegTree(int a_len, vector<ll> &a) { // change if type updated\n\t\tarr = a;\n\t\tn = a_len;\n\t\ts = 1;\n\t\twhile(s < 2 * n){\n\t\t\ts = s << 1;\n\t\t}\n\t\ttree.resize(s); fill(all(tree), Node());\n\t\tbuild(0, n - 1, 1);\n\t}\n\tvoid build(int start, int end, int index)  // Never change this\n\t{\n\t\tif (start == end)\t{\n\t\t\ttree[index] = Node(arr[start],start);\n\t\t\treturn;\n\t\t}\n\t\tint mid = (start + end) / 2;\n\t\tbuild(start, mid, 2 * index);\n\t\tbuild(mid + 1, end, 2 * index + 1);\n\t\ttree[index].merge(tree[2 * index], tree[2 * index + 1]);\n\t}\n\tvoid update(int start, int end, int index, int query_index, Update &u)  // Never Change this\n\t{\n\t\tif (start == end) {\n\t\t\tu.apply(tree[index]);\n\t\t\treturn;\n\t\t}\n\t\tint mid = (start + end) / 2;\n\t\tif (mid >= query_index)\n\t\t\tupdate(start, mid, 2 * index, query_index, u);\n\t\telse\n\t\t\tupdate(mid + 1, end, 2 * index + 1, query_index, u);\n\t\ttree[index].merge(tree[2 * index], tree[2 * index + 1]);\n\t}\n\tNode query(int start, int end, int index, int left, int right) { // Never change this\n\t\tif (start > right || end < left)\n\t\t\treturn Node();\n\t\tif (start >= left && end <= right)\n\t\t\treturn tree[index];\n\t\tint mid = (start + end) / 2;\n\t\tNode l, r, ans;\n\t\tl = query(start, mid, 2 * index, left, right);\n\t\tr = query(mid + 1, end, 2 * index + 1, left, right);\n\t\tans.merge(l, r);\n\t\treturn ans;\n\t}\n\tvoid make_update(int index, ll val) {  // pass in as many parameters as required\n\t\tUpdate new_update = Update(val,index); // may change\n\t\tupdate(0, n - 1, 1, index, new_update);\n\t}\n\tNode make_query(int l,int r) {\n\t\treturn query(0, n-1, 1, l, r);\n\t}\n};\n\nstruct Node1 {\n\tll val; // may change\n    ll first,last;\n\tNode1() { // Identity element\n\t\tval = 0;\n        first = -1;\n        last = -1;\n\t}\n\tNode1(int flag,int idx) {  // Actual Node\n        if(flag){\n            val = 0;\n            first = idx;\n            last = idx;\n        }\n        else{\n            val = 1;\n            first = -1;\n            last = -1;\n        }\n\t}\n\tvoid merge(Node1 &l, Node1 &r) { // Merge two child nodes\n        val = max(l.val,r.val);\n        if(l.last!=-1 && r.first!=-1){\n            val = max(val,r.first-l.last);\n            first = l.first;\n            last = r.last;\n        }\n        else if(l.last==-1 && r.first!=-1){\n            val = r.val;\n            first = r.first;\n            last = r.last;\n        }\n        else if(l.last!=-1 && r.first==-1){\n            val = l.val;\n            first = l.first;\n            last = l.last;\n        }\n        else{\n            first = -1;\n            last = -1;\n            val = 0;\n        }\n\t}\n};\n\nstruct Update1 {\n\tll val; // may change\n    ll idx;\n\tUpdate1(ll p1,ll i) { // Actual Update\n\t\tval = p1; // may change\n        idx = i;\n\t}\n\tvoid apply(Node1 &a) { // apply update to given node\n\t\ta.val = val; // may change\n        a.first = a.last = idx;\n\t}\n};\n\n    vector<bool> getResults(vector<vector<int>>& queries) {\n        vector<bool> ans;\n        vector<ll> arr(50002,0);\n        SegTree<Node1,Update1> seg(arr.size(),arr);\n        for(auto query : queries){\n            if(query[0]==1){\n                seg.make_update(query[1],1);\n            }\n            else{\n                Node1 node = seg.make_query(0,query[1]);\n                int sz = node.val;\n                int fr = node.first;\n                int sc = node.last;\n                if(fr!=-1){\n                    sz = max(sz,fr);\n                    sz = max(sz,query[1]-sc);\n                }\n                else{\n                    sz = query[1];\n                }\n                ans.push_back(sz>=query[2]);\n            }\n        }\n        return ans;\n    }\n};",
    "submit_ts": 1716651761.0
}