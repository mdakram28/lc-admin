{
    "username": "Tarun_parmar0",
    "submission": "class Solution {\n    \n    class TrieNode {\n    public:\n        bool isEndOfWord;\n        int cost;\n        unordered_map<char, TrieNode*> children;\n\n        TrieNode() {\n            isEndOfWord = false;\n            cost = 1e9;\n        }\n    };\n\n    class Trie {\n    private:\n        TrieNode* root;\n\n    public:\n        Trie() {\n            root = new TrieNode();\n        }\n\n        // Insert a word into the trie\n        void insert(string word, int c) {\n            TrieNode* node = root;\n            for (char ch : word) {\n                if (node->children.find(ch) == node->children.end()) {\n                    node->children[ch] = new TrieNode();\n                }\n                node = node->children[ch];\n            }\n            node->isEndOfWord = true;\n            node->cost = min(node->cost, c);\n        }\n\n        // Search for a word in the trie\n        int search(string word) {\n            TrieNode* node = root;\n            for (char ch : word) {\n                if (node->children.find(ch) == node->children.end()) {\n                    return -1;\n                }\n                node = node->children[ch];\n            }\n\n            if (node->isEndOfWord) return node->cost;\n\n            return -1;\n        }\n\n        // Check if there is any word in the trie that starts with the given prefix\n        bool startsWith(string prefix) {\n            TrieNode* node = root;\n            for (char ch : prefix) {\n                if (node->children.find(ch) == node->children.end()) {\n                    return false;\n                }\n                node = node->children[ch];\n            }\n            return true;\n        }\n        TrieNode* getRoot() {\n            return root;\n        }\n    };\n\npublic:\n    int minimumCost(string t, vector<string>& w, vector<int>& c) {\n        Trie trie;\n        \n        int n = c.size();\n        for (int i = 0; i < n; i++) {\n            trie.insert(w[i], c[i]);\n        }\n        \n        int _n = t.size();\n        vector<int> dp(_n + 1, 1e9);\n        dp[0] = 0;\n\n        // for (int j = 0; j < _n; j++) {\n        //     string temp = \"\";\n        //     for (int k = j; k < _n; k++) {\n        //         temp.push_back(t[k]);\n        //         int cost = trie.search(temp);\n        //         if (cost != -1) {\n        //             dp[k + 1] = min(dp[k + 1], dp[j] + cost);\n        //         }\n        //     }\n        // }\n\n        // return dp[_n] == 1e9 ? -1 : dp[_n];\n\n         for (int j = 0; j < _n; j++) {\n            TrieNode* node = trie.getRoot();\n            for (int k = j; k < _n; k++) {\n                if (node == nullptr) break;\n                if (node->children.find(t[k]) == node->children.end()) break;\n                node = node->children[t[k]];\n                if (node->isEndOfWord) {\n                    dp[k + 1] = min(dp[k + 1], dp[j] + node->cost);\n                }\n            }\n        }\n\n        return dp[_n] == 1e9 ? -1 : dp[_n];\n    }\n};\n",
    "submit_ts": "1720324106",
    "subm_id": "1312391747"
}