{
    "username": "aman_2005",
    "submission": "class Solution {\npublic:\n    // int help(vector<int>& nums,int i,int last,int c,int n,int k){\n    //     if(c>k){\n    //         return -1e6;\n    //     }\n    //     if(i==n){\n    //         return 0;\n    //     }\n    //     if(dp[i][last][c]!=-1){\n    //         return dp[i][last][c];\n    //     }\n    //     int ans=help(nums,i+1,last,c,n,k);\n    //     if(last==n){\n    //         ans=max(ans,1+help(nums,i+1,i,c,n,k));\n    //     }\n    //     else{\n    //         ans=max(ans,1+help(nums,i+1,i,c+(nums[i]!=nums[last]),n,k));\n    //     }\n    //     // cout<<i<<\" \"<<ans<<\"\\n\";\n    //     return dp[i][last][c]=ans;\n    // }\n    int maximumLength(vector<int>& nums, int k) {\n        int n=nums.size();\n        int dp[n][k+1],ans=0;\n        set<pair<int,int>,greater<pair<int,int>>> st[k+1];\n        map<pair<int,int>,int> mp;\n        for(int i=0;i<n;i++){\n            for(int j=0;j<=k;j++){\n                if(i==0){\n                    dp[i][j]=1;\n                    st[j].insert({1,nums[i]});\n                    mp[{nums[i],j}]=1;\n                    continue;\n                }\n                dp[i][j]=1;\n                if(mp.find({nums[i],j})!=mp.end()){\n                    dp[i][j]=1+mp[{nums[i],j}];\n                }\n                if(j>0){\n                    if(st[j-1].size()>0){\n                        auto it=st[j-1].begin();\n                        if(it->second!=nums[i]){\n                            dp[i][j]=max(dp[i][j],it->first+1);\n                        }\n                        else{\n                            it++;\n                            if(it!=st[j-1].end()){\n                                dp[i][j]=max(dp[i][j],it->first+1);\n                            }\n                        }\n                    }\n                }\n                // for(int prev=i-1;prev>=0;prev--){\n                //     if(nums[prev]!=nums[i]){\n                //         if(j!=0)\n                //         dp[i][j]=max(dp[i][j],1+dp[prev][j-1]);\n                //     }\n                //     else{\n                //         dp[i][j]=max(dp[i][j],1+dp[prev][j]);\n                //     }\n                // }\n                // cout<<i<<\" \"<<j<<\" \"<<dp[i][j]<<endl;\n                if(j>0){\n                    dp[i][j]=max(dp[i][j],dp[i][j-1]);\n                }\n                int before=mp[{nums[i],j}];\n                mp[{nums[i],j}]=max(before,dp[i][j]);\n                if(before<mp[{nums[i],j}]){\n                    st[j].erase({before,nums[i]});\n                    st[j].insert({dp[i][j],nums[i]});\n                }\n                if(st[j].size()>2){\n                    auto it1=st[j].end();\n                    it1--;\n                    st[j].erase(it1);\n                }\n            }\n            \n            ans=max(ans,dp[i][k]);\n        }\n        return ans;\n    }\n};",
    "submit_ts": "1717860741",
    "subm_id": "1281767829"
}