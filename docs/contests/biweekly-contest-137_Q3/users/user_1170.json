{
    "username": "Pavel",
    "submission": "class Solution:\n    def maximumValueSum(self, g: List[List[int]]) -> int:\n        m,n = len(g), len(g[0])\n        g_T = [[g[i][j] for i in range(m)] for j in range(n)]\n        assert g[0][-1] == g_T[-1][0] and g[-1][0] == g_T[0][-1]\n        #sorted from best to worst, for each row and col\n        row_bests = [sorted(enumerate(row), key=lambda x: -x[1])[:3] for row in g]\n        col_bests = [sorted(enumerate(row), key=lambda x: -x[1])[:3] for row in g_T]\n        candidates = []\n        seen = set()\n        for row, bests in enumerate(row_bests):\n            for col, val in bests:\n                candidates.append((row, col, val))\n                seen.add((row, col))\n        for col, bests in enumerate(col_bests):\n            for row, val in bests:\n                if (row, col) not in seen:\n                    candidates.append((row, col, val))\n                    seen.add((row, col))\n        best = - 10**10\n        N = len(candidates)\n        # sort in decreasing order, first is best position\n        candidates.sort(key=lambda x: -x[-1])\n        r0,c0,v0 = candidates[0]\n        for i in range(1):\n            r1,c1,v1 = candidates[i]\n            for j in range(i+1, N-1):\n                r2,c2,v2 = candidates[j]\n                if r1==r2 or c1==c2: continue\n                for k in range(j+1, N):\n                    r3,c3,v3 = candidates[k]\n                    if r1==r3 or r2==r3 or c1==c3 or c2==c3: continue\n                    best = max(best, v1+v2+v3)\n        best_2 = - 10**10\n        required_row = r0\n        for i in range(N):\n            r1,c1,v1 = candidates[i]\n            if r1 != required_row: continue\n            for j in range(N):\n                r2,c2,v2 = candidates[j]\n                if r1==r2 or c1==c2: continue\n                for k in range(N):\n                    r3,c3,v3 = candidates[k]\n                    if r1==r3 or r2==r3 or c1==c3 or c2==c3: continue\n                    best_2 = max(best_2, v1+v2+v3)\n        required_col = c0\n        best_3 = -10**10\n        for i in range(N):\n            r1,c1,v1 = candidates[i]\n            if c1 != required_col: continue\n            for j in range(N):\n                r2,c2,v2 = candidates[j]\n                if r1==r2 or c1==c2: continue\n                for k in range(N):\n                    r3,c3,v3 = candidates[k]\n                    if r1==r3 or r2==r3 or c1==c3 or c2==c3: continue\n                    best_3 = max(best_3, v1+v2+v3)\n        return max(best, best_2, best_3)\n\n                    \n        \n\n\n\n        ",
    "submit_ts": "1723910017",
    "subm_id": "1359214198"
}