{
    "username": "terranw",
    "submission": "class Solution {\n    \n    private int n, m;\n    private int[] nums;\n    private int[] tree;\n    public int minimumDifference(int[] nums, int k) {\n        this.nums = nums;\n        buildTree();\n        \n        int ans = Math.abs(k - nums[0]);\n        for (int i = 0; i < n; ++i) {\n            int le = i, ri = n - 1;\n            while (le <= ri) {\n                int mid = (le + ri) >> 1;\n                int res = queryTree(i, mid, 1, 0, m - 1);\n                ans = Math.min(ans, Math.abs(res - k));\n                \n                if (res < k) {\n                    ri = mid - 1;\n                }\n                else {\n                    le = mid + 1;\n                }\n            }\n        }\n        \n        return ans;\n    }\n    \n    private int queryTree(int le, int ri, int now, int begin, int end) {\n        if (le == begin && ri == end) {\n            return tree[now];\n        }\n        int bd = (begin + end) >> 1;\n        if (le > bd) {\n            return queryTree(le, ri, (now << 1) + 1, bd + 1, end);\n        }\n        else if (ri <= bd) {\n            return queryTree(le, ri, (now << 1), begin, bd);\n        }\n        else {\n            return queryTree(le, bd, (now << 1), begin, bd) & queryTree(bd + 1, ri, (now << 1) + 1, bd + 1, end);\n        }\n    }\n    \n    private void buildTree() {\n        n = nums.length;\n        m = 1;\n        while (m < n) {\n            m <<= 1;\n        }\n        tree = new int[m << 1];\n        for (int i = 0; i < n; ++i) {\n            tree[i + m] = nums[i];\n        }\n        for (int i = m - 1; i >= 1; --i) {\n            tree[i] = tree[i << 1] & tree[(i << 1) + 1];\n        }\n    }\n}",
    "submit_ts": 1717297851.0
}