{
    "username": "jlyfish",
    "submission": "class Solution {\npublic:\n    string largestPalindrome(int n, int k) {\n        string ans;\n        vector<int> pw(n);\n        pw[0] = 1;\n        for (int i = 1; i < n; i++) {\n            pw[i] = pw[i - 1] * 10 % k;\n        }\n        int mid = n / 2;\n        auto calc = [&](int pos, int val) {\n            int p = pw[pos] * val;\n            if (pos != n - 1 - pos) {\n                p += pw[n - 1 - pos] * val;\n            }\n            return p % k;\n        };\n        vector dp(n, vector<int>(k));\n        auto dfs = [&](auto &dfs, int pos, int val) -> bool {\n            if (pos < mid) {\n                return val == 0;\n            }\n            if (dp[pos][val]) {\n                return false;\n            }\n            dp[pos][val] = 1;\n            for (int i = 9; i >= 0; i--) {\n                if (dfs(dfs, pos - 1, (val + calc(pos, i)) % k)) {\n                    ans += char(i + '0');\n                    return true;\n                }\n            }\n            return false;\n        };\n        for (int i = 9; i >= 1; i--) {\n            if (dfs(dfs, n - 2, calc(n - 1, i))) {\n                ans += char(i + '0');\n                ranges::reverse(ans);\n                string tmp = ans.substr(0, mid);\n                ranges::reverse(tmp);\n                return ans + tmp;\n            }\n        }\n        return ans;\n    }\n};",
    "submit_ts": "1723950864",
    "subm_id": "556401757"
}