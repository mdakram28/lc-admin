{
    "username": "priyanshu9241",
    "submission": "\nclass Trie {\n    Node root;\n\n    Trie() {\n        root = new Node();\n    }\n\n    void addWord(String word, int cost) {\n        Node node = root;\n        for (char c : word.toCharArray()) {\n            if (node.childs[c - 'a'] == null)\n                node.childs[c - 'a'] = new Node();\n\n            node = node.childs[c - 'a'];\n        }\n        node.data = Math.min(cost, node.data);\n        node.isLast = true;\n    }\n\n    Node getRoot() {\n        return root;\n    }\n\n}\n\nclass Solution {\n    public int minimumCost(String target, String[] words, int[] costs) {\n        Trie trie = new Trie();\n        int n = target.length();\n        int[] cost = new int[n + 1];\n        Arrays.fill(cost, Integer.MAX_VALUE);\n        for (int i = 0; i < words.length; ++i)\n            trie.addWord(words[i], costs[i]);\n        cost[0] = 0;\n\n        for (int i = 0; i < n; i++) {\n            if (cost[i] == Integer.MAX_VALUE)\n                continue;\n\n            Node node = trie.getRoot();\n            for (int j = i; j < n; j++) {\n                char c = target.charAt(j);\n                if (node.childs[c - 'a'] == null)\n                    break;\n                node = node.childs[c - 'a'];\n                if (node.isLast)\n                    cost[j + 1] = Math.min(cost[j + 1], cost[i] + node.data);\n\n            }\n        }\n\n        return cost[n] == Integer.MAX_VALUE ? -1 : cost[n];\n    }\n}\n\nclass Node {\n    int data;\n    boolean isLast;\n    Node[] childs;\n\n    public Node() {\n        childs = new Node[26];\n        data = Integer.MAX_VALUE;\n        isLast = false;\n    }\n}\n",
    "submit_ts": "1720322674",
    "subm_id": "1312356135"
}