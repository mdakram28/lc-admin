{
    "username": "EricTsengTy",
    "submission": "using ll = long long;\n\nstruct DSU {\n    DSU(int n):rank(n, 0), p(n) {\n        iota(p.begin(), p.end(), 0);\n    }\n    \n    int find(int x) {\n        return x == p[x] ? x : (p[x] = find(p[x]));\n    }\n    \n    void merge(int a, int b) {\n        int A = find(a), B = find(b);\n        if (A == B) {\n            return;\n        }\n        if (rank[A] < rank[B]) {\n            swap(A, B);\n        }\n        p[B] = p[A];\n        if (rank[A] == rank[B]) {\n            ++rank[A];\n        }\n    }\n    \n    vector<int> rank;\n    vector<int> p;\n};\n\nclass Solution {\npublic:\n    bool canReachCorner(int X, int Y, vector<vector<int>>& circles) {\n        int n = circles.size();\n        vector<vector<bool>> connected(n, vector<bool>(n, false));\n        \n        DSU dsu(n);\n        for (int i = 0; i != n; ++i) {\n            for (int j = i + 1; j < n; ++j)\n                if (collide(circles[i], circles[j], X, Y)) {\n                    dsu.merge(i, j);\n                }\n        }\n        \n        vector<int> low_x, high_x, low_y, high_y;\n        for (int i = 0; i != n; ++i) {\n            int x = circles[i][0];\n            int y = circles[i][1];\n            int r = circles[i][2];\n            if (x - r <= 0 && x + r >= 0) {\n                low_x.emplace_back(i);\n            }\n            if (x - r <= X && x + r >= X) {\n                high_x.emplace_back(i);\n            }\n            if (y - r <= 0 && y + r >= 0) {\n                low_y.emplace_back(i);\n            }\n            if (y - r <= Y && y + r >= Y) {\n                high_y.emplace_back(i);\n            }\n        }\n        \n        for (int &i : low_x) {\n            for (int &j : low_y) {\n                if (dsu.find(i) == dsu.find(j)) {\n                    return false;\n                }\n            }\n        }\n        \n        for (int &i : low_x) {\n            for (int &j : high_x) {\n                if (dsu.find(i) == dsu.find(j)) {\n                    return false;\n                }\n            }\n        }\n        \n        for (int &i : low_y) {\n            for (int &j : high_y) {\n                if (dsu.find(i) == dsu.find(j)) {\n                    return false;\n                }\n            }\n        }\n        \n        for (int &i : high_x) {\n            for (int &j : high_y) {\n                if (dsu.find(i) == dsu.find(j)) {\n                    return false;\n                }\n            }\n        }\n        \n        return true;\n    }\n    \n    ll sqr(ll x) {\n        return x * x;\n    }\n    \n    bool collide(vector<int> &a, vector<int> &b, ll X, ll Y) {\n        ll ax = a[0], ay = a[1], ar = a[2];\n        ll bx = b[0], by = b[1], br = b[2];\n        if (sqr(bx - ax) + sqr(by - ay) > sqr(br + ar)) {\n            return false;\n        }\n        \n        ll midx = ax * br + bx * ar;\n        ll midy = ay * br + by * ar;\n        if (midx < 0 || midx > X * (ar + br)) {\n            return false;\n        }\n        if (midy < 0 || midy > Y * (ar + br)) {\n            return false;\n        }\n        \n        return true;\n    }\n};",
    "submit_ts": "1722137399",
    "subm_id": "1335762677"
}