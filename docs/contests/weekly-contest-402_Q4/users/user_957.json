{
    "username": "zhouzl",
    "submission": "class Solution {\n    public List<Integer> countOfPeaks(int[] nums, int[][] queries) {\n        int n = nums.length;\n        Tree t = new Tree(n);\n        boolean[] f = new boolean[n];\n        for(int i = 1; i < n - 1; ++i) {\n            if(nums[i] > nums[i - 1] && nums[i] > nums[i + 1]) {\n                t.update(i, 1);\n                f[i] = true;\n            }\n        }\n        List<Integer> ans = new ArrayList<>();\n        // System.out.println(t.query(1));\n        for(int[] x: queries) {\n            if(x[0] == 1) {\n                ans.add(Math.max(0, t.query(x[2] - 1) - t.query(x[1])));\n            }else{\n                int i = x[1];\n                nums[i] = x[2];\n                f(nums, f, t, n, i);\n                f(nums, f, t, n, i - 1);\n                f(nums, f, t, n, i + 1);\n            }\n            \n        }\n        // System.out.println(t.query(1));\n        return ans;\n    }\n    void f(int[] nums, boolean[] f, Tree t, int n, int i) {\n        if(i > 0 && i < n - 1) {\n            if(f[i] && (nums[i] <= nums[i - 1] || nums[i] <= nums[i + 1])) {\n                f[i] = false;\n                t.update(i, -1);\n            } else if(!f[i] && nums[i] > nums[i - 1] && nums[i] > nums[i + 1]) {\n                f[i] = true;\n                t.update(i, 1);\n            }\n        }\n    }\n\n    class Tree {\n        int[] data;\n        int n;\n        Tree(int n) {\n            this.n = n;\n            data = new int[n + 1];\n        }\n\n        void update(int x, int d) {\n            for(int i = x + 1; i <= n; i += i & -i) {\n                data[i] += d;\n            }\n        }\n\n        int query(int x) {\n            int res = 0;\n            x++;\n            while(x > 0) {\n                res += data[x];\n                x -= x & -x;\n            }\n            return res;\n        }\n    }\n}",
    "submit_ts": 1718507976.0
}