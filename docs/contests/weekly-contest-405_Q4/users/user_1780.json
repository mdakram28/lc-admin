{
    "username": "Jupiter3",
    "submission": "class TrieNode {\npublic:\n    unordered_map<char, TrieNode*> next;\n    int cost;\n    \n    TrieNode() : cost(INT_MAX) {}\n};\nclass Solution {\npublic:\n    int n;\n    TrieNode* root = new TrieNode();\n    long long dp[50005];\n    \n    long long f(int idx, string& target){\n        if(idx == n) return 0;\n        if(dp[idx] != -1) return dp[idx];\n        \n        TrieNode* node = root;\n        long long ans = INT_MAX;\n        for(int i = idx; i < n; i++){\n            if(node->next.find(target[i]) == node->next.end()) break;\n            node = node->next[target[i]];\n            if(node->cost != INT_MAX) ans = min(ans, node->cost + f(i + 1, target));\n        }\n        return dp[idx] = ans;\n    }\n    \n    void insert(int c, string& word) {\n        TrieNode* node = root;\n        for(auto& it: word){\n            if (node->next.find(it) == node->next.end()) node->next[it] = new TrieNode();\n            node = node->next[it];\n        }\n        node->cost = min(node->cost, c);\n    }\n    \n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        memset(dp, -1, sizeof dp);\n        for(int i = 0; i < words.size(); i++) insert(costs[i], words[i]);\n        n = target.length();\n        long long ans = f(0, target);\n        return ans >= INT_MAX ? -1 : int(ans);\n    }\n};",
    "submit_ts": "1720324153",
    "subm_id": "1312392831"
}