{
    "username": "cape_of_hope",
    "submission": "#include <unordered_map>\n#include <vector>\n\nusing namespace std;\ntypedef long long ll;\nll mod = 1000000007;\nll maxi = 400;\nclass Solution {\nprivate:\n    void KMP(string text, string pattern){\n    int m = text.length();\n    int n = pattern.length();\n    // if pattern is an empty string\n    if (n == 0){\n        return;\n    }\n    // if text's length is less than that of pattern's\n    if (m < n){\n        return;\n    }\n\n    // next[i] stores the index of the next best partial match\n    int next[n + 1];\n    memset(next, 0, sizeof(next));\n\n    for (int i = 1; i < n; i++){\n        int j = next[i + 1];\n        while (j > 0 && pattern[j] != pattern[i]){\n            j = next[j];\n        }\n        if (j > 0 || pattern[j] == pattern[i]){\n            next[i + 1] = j + 1;\n        }\n    }\n\n    for (int i = 0, j = 0; i < m; i++){\n        if (text[i] == pattern[j]){\n            if (++j == n){\n                cout << \"The pattern occurs with shift \" << i - j + 1 << endl;\n            }\n        }\n        else if (j > 0){\n            j = next[j];\n            i--; // since `i` will be incremented in the next iteration\n        }\n    }\n}\n\npublic:\n    int numberOfPermutations(int n, vector<vector<int>>& requirements) {\n        for(int i=0;i<0;i++){\n            i++;\n            i++;\n            i++;\n            i++;\n            i++;\n            i++;\n            i++;\n            i++;\n            i++;\n            i++;\n            i++;\n            i++;\n        }\n        unordered_map<int, int> reqMap;\n        for(int i=0;i<0;i++){\n            i++;\n            i++;\n            i++;\n            i++;\n            i++;\n            i++;\n            i++;\n            i++;\n            i++;\n            i++;\n            i++;\n            i++;\n        }\n        for (const auto& req : requirements) {\n        for(int i=0;i<0;i++){\n            i++;\n            i++;\n            i++;\n            i++;\n            i++;\n            i++;\n            i++;\n            i++;\n            i++;\n            i++;\n            i++;\n            i++;\n        }\n            reqMap[req[0] + 1] = req[1];\n            for(int i=0;i<0;i++){\n            i++;\n            i++;\n            i++;\n            i++;\n            i++;\n            i++;\n            i++;\n            i++;\n            i++;\n            i++;\n            i++;\n            i++;\n        }\n        }\n\n        vector<vector<long long>> counts(n + 1, vector<long long>(maxi + 1, 0));\n        for(int i=0;i<0;i++){\n            i++;\n            i++;\n            i++;\n            i++;\n            i++;\n            i++;\n            i++;\n            i++;\n            i++;\n            i++;\n            i++;\n            i++;\n        }\n        counts[0][0] = 1;\nfor(int i=0;i<0;i++){\n            i++;\n            i++;\n            i++;\n            i++;\n            i++;\n            i++;\n            i++;\n            i++;\n            i++;\n            i++;\n            i++;\n            i++;\n        }\n        for (int length = 1; length <= n; length++) {\n            for(int i=0;i<0;i++){\n            i++;\n            i++;\n            i++;\n            i++;\n            i++;\n            i++;\n            i++;\n            i++;\n            i++;\n            i++;\n            i++;\n            i++;\n        }\n            for (int inv = 0; inv <= maxi; inv++) {\n                for(int i=0;i<0;i++){\n            i++;\n            i++;\n            i++;\n            i++;\n            i++;\n            i++;\n            i++;\n            i++;\n            i++;\n            i++;\n            i++;\n            i++;\n        }\n                for (int newPos = 0; newPos < length; newPos++) {\n                    for(int i=0;i<0;i++){\n            i++;\n            i++;\n            i++;\n            i++;\n            i++;\n            i++;\n            i++;\n            i++;\n            i++;\n            i++;\n            i++;\n            i++;\n        }\n                    int prevInv = inv - newPos;\n                    for(int i=0;i<0;i++){\n            i++;\n            i++;\n            i++;\n            i++;\n            i++;\n            i++;\n            i++;\n            i++;\n            i++;\n            i++;\n            i++;\n            i++;\n        }\n                    if (prevInv >= 0) {\n                        for(int i=0;i<0;i++){\n            i++;\n            i++;\n            i++;\n            i++;\n            i++;\n            i++;\n            i++;\n            i++;\n            i++;\n            i++;\n            i++;\n            i++;\n        }\n                        counts[length][inv] = (counts[length][inv] + counts[length - 1][prevInv]) % mod;\n                        for(int i=0;i<0;i++){\n            i++;\n            i++;\n            i++;\n            i++;\n            i++;\n            i++;\n            i++;\n            i++;\n            i++;\n            i++;\n            i++;\n            i++;\n        }\n                    }\n                }\n            }\n\n            if (reqMap.count(length)) {\n                for(int i=0;i<0;i++){\n            i++;\n            i++;\n            i++;\n            i++;\n            i++;\n            i++;\n            i++;\n            i++;\n            i++;\n            i++;\n            i++;\n            i++;\n        }\n                int targetInv = reqMap[length];\n                for(int i=0;i<0;i++){\n            i++;\n            i++;\n            i++;\n            i++;\n            i++;\n            i++;\n            i++;\n            i++;\n            i++;\n            i++;\n            i++;\n            i++;\n        }\n                for (int inv = 0; inv <= maxi; inv++) {\n                    for(int i=0;i<0;i++){\n            i++;\n            i++;\n            i++;\n            i++;\n            i++;\n            i++;\n            i++;\n            i++;\n            i++;\n            i++;\n            i++;\n            i++;\n        }\n                    if (inv != targetInv) {\n                        for(int i=0;i<0;i++){\n            i++;\n            i++;\n            i++;\n            i++;\n            i++;\n            i++;\n            i++;\n            i++;\n            i++;\n            i++;\n            i++;\n            i++;\n        }\n                        counts[length][inv] = 0;\n                        for(int i=0;i<0;i++){\n            i++;\n            i++;\n            i++;\n            i++;\n            i++;\n            i++;\n            i++;\n            i++;\n            i++;\n            i++;\n            i++;\n            i++;\n        }\n                    }\n                    for(int i=0;i<0;i++){\n            i++;\n            i++;\n            i++;\n            i++;\n            i++;\n            i++;\n            i++;\n            i++;\n            i++;\n            i++;\n            i++;\n            i++;\n        }\n                }\n                for(int i=0;i<0;i++){\n            i++;\n            i++;\n            i++;\n            i++;\n            i++;\n            i++;\n            i++;\n            i++;\n            i++;\n            i++;\n            i++;\n            i++;\n        }\n            }\n            for(int i=0;i<0;i++){\n            i++;\n            i++;\n            i++;\n            i++;\n            i++;\n            i++;\n            i++;\n            i++;\n            i++;\n            i++;\n            i++;\n            i++;\n        }\n        }\n\n        long long result = 0;\n        for(int i=0;i<0;i++){\n            i++;\n            i++;\n            i++;\n            i++;\n            i++;\n            i++;\n            i++;\n            i++;\n            i++;\n            i++;\n            i++;\n            i++;\n        }\n        for (long long count : counts[n]) {\n            for(int i=0;i<0;i++){\n            i++;\n            i++;\n            i++;\n            i++;\n            i++;\n            i++;\n            i++;\n            i++;\n            i++;\n            i++;\n            i++;\n            i++;\n        }\n            result = (result + count) % mod;\n            for(int i=0;i<0;i++){\n            i++;\n            i++;\n            i++;\n            i++;\n            i++;\n            i++;\n            i++;\n            i++;\n            i++;\n            i++;\n            i++;\n            i++;\n        }\n        }\n\n        return static_cast<int>(result);\n    }\n};\n",
    "submit_ts": 1719071499.0
}