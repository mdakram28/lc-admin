{
    "username": "lydxlx",
    "submission": "import bisect\nfrom typing import *\nfrom collections import namedtuple\nfrom sortedcontainers import SortedList, SortedDict\nfrom collections import Counter\nfrom math import inf\nfrom math import gcd\nimport string\nimport random\nimport itertools\nfrom functools import cache\nfrom fractions import Fraction\n\nclass Solution:\n    \n    def findParent(self, parents, i):\n        if parents[i] != i:\n            parents[i] = self.findParent(parents, parents[i])\n        return parents[i]\n\n    def union(self, parents, a, b):\n        pa = self.findParent(parents, a)\n        pb = self.findParent(parents, b)\n\n        parents[pa] = pb\n\n    def intersect(self, c1, c2):\n        dist2 = (c1[0] - c2[0]) ** 2 + (c1[1] - c2[1]) ** 2\n        return (c1[2] + c2[2]) ** 2 >= dist2\n\n    def canReachCorner(self, X: int, Y: int, circles: List[List[int]]) -> bool:\n        circleCount = len(circles)\n        count = circleCount + 2\n        parents = [i for i in range(count)]\n        bottom = circleCount\n        left = circleCount + 1\n        for i in range(circleCount):\n            for j in range(i, circleCount):\n                if self.intersect(circles[i], circles[j]):\n                    self.union(parents, i, j)\n\n        for i in range(circleCount):\n            c = circles[i]\n            if abs(c[1]) <= c[2] or abs(X - c[0]) <= c[2]:\n                self.union(parents, i, bottom)\n            if abs(c[0]) <= c[2] or abs(Y - c[1]) <= c[2]:\n                self.union(parents, i, left)\n\n        return self.findParent(parents, left) != self.findParent(parents, bottom)\n\n",
    "submit_ts": "1722134950",
    "subm_id": "1335684347"
}