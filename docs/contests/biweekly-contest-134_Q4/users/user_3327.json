{
    "username": "musing-corizl3",
    "submission": "#define N 100005\nstruct node {\n\t\tint l;\n\t\tint r;\n\t\tint val;\n};\n\t\nstruct node Node[N << 2];\nint A[N];\n\n    int search(int pos, int l, int r) {\n        int ll = Node[pos].l;\n        int rr = Node[pos].r;\n        if (l > rr || r < ll)\n            return -1;\n        else if (r >= rr && l <= ll)\n            return Node[pos].val;\n        return search(pos * 2, l, r) & search(pos * 2 + 1, l, r);\n    }\n\n\n    void build(int pos, int l,int r, vector<int> &A) {\n        Node[pos].l = l;\n        Node[pos].r = r;\n        if (l == r)\n            Node[pos].val = A[l];\n        else if (r < l)\n            Node[pos].val = -1;\n        else {\n            build(pos * 2, l, (l + r) / 2,A);\n            build(pos * 2 + 1, (l + r) / 2 + 1, r,A);\n            Node[pos].val = (Node[pos * 2].val) & (Node[pos * 2 + 1].val);\n        }\n    }\nclass Solution {\nprivate:\n    int first = 0, last = 0;\n    int findLast(int k, int i, int n) {\n        int l = max(i, last), r = n - 1;\n        while (l < r) {\n            int mid = (l + r + 1) / 2;\n            if (search(1, i + 1, mid + 1) >= k) {\n                l = mid;\n            }\n            else {\n                r = mid - 1;\n            }\n        }\n        return l;\n    }\n    \n    int findFirst(int k, int i, int n) {\n        int l = max(i, first), r = n - 1;\n        while (l < r) {\n            int mid = (l + r) / 2;\n            if (search(1, i + 1, mid + 1) > k) {\n                l = mid + 1;\n            }\n            else {\n                r = mid;\n            }\n        }\n        return l;\n    }\n    \npublic:\n    long long countSubarrays(vector<int>& nums, int k) {\n        long long ans = 0;\n        int n = nums.size();\n        vector<int> tt;\n        tt.push_back(0);\n        for (int i : nums)\n            tt.push_back(i);\n        build(1, 1, n, tt);\n        for (int i = 0;i < n;i++) {\n            if (nums[i] == k) {\n                first = i;\n            }\n            else {\n                first = findFirst(k, i, n);\n            }\n            last = findLast(k, i, n);\n            int tmp = search(1, i + 1, first + 1);\n            if (tmp == k) {\n                ans += 1ll * (last - first + 1);\n            }\n        }\n        return ans;\n    }\n};",
    "submit_ts": "1720281198",
    "subm_id": "544574857"
}