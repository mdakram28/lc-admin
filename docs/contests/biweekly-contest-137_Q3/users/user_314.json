{
    "username": "Hao Ting",
    "submission": "class Solution {\npublic:\n    int m, n;\n    long long maxV = LLONG_MIN;\n    set<int> exclude_row, exclude_col;\n    vector<vector<int>> board;\n    long long maximumValueSum(vector<vector<int>>& board) {\n        m = board.size(), n = board[0].size();\n        this->board = board;\n        find(0, 0);\n        return maxV;\n    }\n    void find(int idx, long long total){\n        if (idx == 3){\n            maxV = max(maxV, total);\n            return;\n        }\n        int first = INT_MIN, first_i = -1, first_j = -1;\n        int second = INT_MIN, second_i = -1, second_j = -1;\n        int third = INT_MIN, third_i = -1, third_j = -1; \n        int fourth = INT_MIN, fourth_i = -1, fourth_j = -1;\n        for (int i = 0; i < m; i++){\n            if (exclude_row.find(i) != exclude_row.end())\n                continue;\n            for (int j = 0; j < n; j++){\n                if (exclude_col.find(j) != exclude_col.end())\n                    continue;\n                int num = board[i][j];\n                if (num >= first){\n                    fourth = third, fourth_i = third_i, fourth_j = third_j;\n                    third = second, third_i = second_i, third_j = second_j;\n                    second = first, second_i = first_i, second_j = first_j;\n                    first = num, first_i = i, first_j = j;\n                }\n                else if (num >= second){\n                    fourth = third, fourth_i = third_i, fourth_j = third_j;\n                    third = second, third_i = second_i, third_j = second_j;\n                    second = num, second_i = i, second_j = j;\n                }\n                else if (num >= third){\n                    fourth = third, fourth_i = third_i, fourth_j = third_j;\n                    third = num, third_i = i, third_j = j;\n                }\n                else if (num >= fourth){\n                    fourth = num, fourth_i = i, fourth_j = j;\n                }\n            }\n        }\n        // cout << idx << \" \" << first << \" \" << first_i << \"\\n\";\n        exclude_row.insert(first_i), exclude_col.insert(first_j);\n        find(idx + 1, total + first);\n        exclude_row.erase(first_i), exclude_col.erase(first_j);\n\n        // cout << idx << \" \" << second << \"\\n\";\n        exclude_row.insert(second_i), exclude_col.insert(second_j);\n        find(idx + 1, total + second);\n        exclude_row.erase(second_i), exclude_col.erase(second_j);\n\n        // cout << idx << \" \"  << third << \"\\n\";\n        exclude_row.insert(third_i), exclude_col.insert(third_j);\n        find(idx + 1, total + third);\n        exclude_row.erase(third_i), exclude_col.erase(third_j);\n\n        exclude_row.insert(fourth_i), exclude_col.insert(fourth_j);\n        find(idx + 1, total + fourth);\n        exclude_row.erase(fourth_i), exclude_col.erase(fourth_j);\n\n    }\n};",
    "submit_ts": "1723908587",
    "subm_id": "1359158861"
}