{
    "username": "itsalsouday",
    "submission": "class Solution {\npublic:\n    \n    \n    int maxDist(vector<pair<int, int> >& A, int N)\n{\n    // Variables to track running extrema\n    int minsum, maxsum, mindiff, maxdiff;\n \n    minsum = maxsum = A[0].first + A[0].second;\n    mindiff = maxdiff = A[0].first - A[0].second;\n    for (int i = 1; i < N; i++) {\n        int sum = A[i].first + A[i].second;\n        int diff = A[i].first - A[i].second;\n        if (sum < minsum)\n            minsum = sum;\n        else if (sum > maxsum)\n            maxsum = sum;\n        if (diff < mindiff)\n            mindiff = diff;\n        else if (diff > maxdiff)\n            maxdiff = diff;\n    }\n \n    int maximum = max(maxsum - minsum, maxdiff - mindiff);\n \n    // cout << maximum << endl;\nreturn maximum;\n    }\n    \n    set<int> MaxDist(vector<pair<int, int> >& A, int N)\n{\n    \n    vector<pair<int,int>> V(N), V1(N);\n \n    for (int i = 0; i < N; i++) {\n        V[i] ={ A[i].first + A[i].second,i};\n        V1[i] = {A[i].first - A[i].second,i};\n    }\n \n    // Sorting both the vectors\n    sort(V.begin(), V.end());\n    sort(V1.begin(), V1.end());\n \n   set<int>s;\n        \n        \n        s.insert(V.back().second);\n         s.insert(V.front().second);\n         s.insert(V1.front().second);\n         s.insert(V1.back().second);\n        return s;\n        \n      \n        \n \n  \n}\n    int minimumDistance(vector<vector<int>>& points) {\n        int n=points.size();\n        vector<pair<int,int>>p;\n        for(auto c:points)\n        {\n            p.push_back({c[0],c[1]});\n        }\n        set<int>s=MaxDist(p,n);\n        int ans=INT_MAX;\n        for(auto c:s)\n        {\n            vector<pair<int,int>>temp=p;\n             vector<pair<int,int>>::iterator it;\n \n    it = temp.begin()+c;\n    temp.erase(it);\n            ans=min(ans,maxDist(temp,n-1));\n        }\n        return ans;\n    }\n};"
}