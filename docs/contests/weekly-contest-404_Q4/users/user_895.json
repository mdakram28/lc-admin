{
    "username": "Delusion1411",
    "submission": "class Solution {\npublic:\n    vector<int> dep;\n    int findDia(vector<vector<int>> edges){\n        int m = edges.size();\n        int n = m + 1;\n        vector<vector<int>> g(n);\n        for (auto edg : edges) {\n            g[edg[0]].push_back(edg[1]);\n            g[edg[1]].push_back(edg[0]);\n        }\n        function<void(int, int)> dfs = [&](int u, int p) {\n            for (auto v : g[u]) {\n                if (v == p)\n                    continue;\n                dep[v] = dep[u] + 1;\n                dfs(v, u);\n            }\n        };\n        dep.assign(n, 0);\n        dfs(0, 0);\n        int ma = 0;\n        for (int i = 0; i < n; i++) {\n            if (dep[i] > dep[ma]) {\n                ma = i;\n            }\n        }\n        dep.assign(n, 0);\n        dfs(ma, ma);\n        ma = 0;\n        for (auto x : dep) {\n            ma = max(ma, x);\n        }\n        return ma;\n    }\n    int minimumDiameterAfterMerge(vector<vector<int>> &edges1,\n                              vector<vector<int>> &edges2) {\n        int d1 = findDia(edges1) + 1;\n        int d2 = findDia(edges2) + 1;\n        if (d1 < d2)\n            swap(d1, d2);\n        if(d1 == 2 && d2 == 2){\n            return 3;\n        }\n        if(d1 == 1 && d2 == 1){\n            return 1;\n        }\n        if(d1 == 2 && d2 == 1){\n            return 2;\n        }\n        // cout << d1 << \" \"<< d2 << endl;\n        if (d1 % 2) {\n            if (d2 >= d1 - 1) {\n                return d1;\n            }\n        } else {\n            if (d1 == d2) {\n                return d1 + 1;\n            }\n            else if(d2 >= d1 - 2){\n                return d1;\n            }\n        }\n        return d1 - 1;\n    }\n};",
    "submit_ts": 1719718465.0
}