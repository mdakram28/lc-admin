{
    "username": "profchi",
    "submission": "class Solution {\n    \n    int index;\n    \n    public int minimumDistance(int[][] points) {\n        Arrays.sort(points, (a, b) -> a[0] - b[0]);\n        index = 1;\n        \n        int max = solve(points);\n        \n        int r = index;\n        int l = r;\n        int val;\n        \n        \n        \n        for (int i = 0; i < r; ++i) {\n            val = Math.abs(points[i][0] - points[r][0]) + Math.abs(points[i][1] - points[r][1]);\n            \n            if (val == max) {\n                l = i;\n                break;\n            }\n        }\n        \n        //System.out.println(Arrays.deepToString(points));\n        // System.out.println(max + \" \" + l + \" \" + r);\n        \n        return Math.min( solve(remove(points, l)) , solve(remove(points, r)));\n    }\n    \n    \n    private int [][] remove (int [][] arr, int bIdx){\n        \n        int [][] result = new int [arr.length - 1][];\n        int idx = 0;\n        \n        for (int i = 0; i < arr.length; ++i) {\n            if (i == bIdx) continue;\n            \n            result[idx++] = arr[i];\n        } \n        \n        return result;\n    } \n    \n    private int solve(int [][] points) {\n        \n       //  System.out.println(Arrays.deepToString(points));\n        \n        List<Integer> list = new ArrayList<>();\n        \n        for (int [] point : points) {\n            list.add(point[1]);\n        }\n        \n        \n        BITWithConverter higher = new BITWithConverter(list);\n        \n        BITWithConverter lower = new BITWithConverter(list);\n        \n        int higherVal, lowerVal;\n        \n        int [] dp = new int [points.length];\n        \n        int max = 0;\n        \n        for (int i = 0; i < points.length; ++i) {\n            higherVal = points[i][0] + points[i][1];\n            higherVal += lower.getDown(points[i][1]);\n            \n            lowerVal = points[i][0] - points[i][1];\n            lowerVal += higher.getUp(points[i][1]);\n            \n            dp[i] = Math.max(higherVal, lowerVal);\n            \n            max = Math.max(dp[i], max);\n            \n            lower.updateUp(points[i][1], -points[i][0] - points[i][1]);\n            higher.updateDown(points[i][1], -points[i][0] + points[i][1]);\n        }\n        \n        for (int i = 1; i < points.length; ++i) {\n            if (dp[i] == max) {\n                index = i;\n                break;\n            }\n        }\n        \n        return max;\n    }\n}\n\nclass BITWithConverter {\n\t\n\tlong [] arr;\n\t\n\tMap<Integer, Integer> indexMap;\n\t\n\tBITWithConverter(List<Integer> values){\n\t\t\n\t\tarr = new long [values.size() + 2];\n\t\t\n\t\tSet<Integer> set1 = new HashSet<>();\n\t\t\n\t\tfor (int num : values) {\n            set1.add(num);\n        }\n\t\t\n        List<Integer> list = new ArrayList<>(set1);\n        Collections.sort(list);\n\n        Map<Integer, Integer> map = new HashMap<>();\n\n        int pos = 1;\n\n        for (int num : list) {\n            map.put(num, pos);\n            pos += 1;\n        }\n        \n        indexMap = map;\n        \n        Arrays.fill(arr, -1_000_000_000);\n\t}\n\t\n\tvoid updateUp(int idx, long val) {\n\t\tidx = indexMap.get(idx);\n\t\t\n\t\tfor (int i = idx; i < arr.length; i += (i & -i)) {\n\t\t\tarr[i] = Math.max(arr[i], val);\n\t\t}\n\t}\n\t\n\tlong getDown(int idx) {\n\t\tlong result = -1_000_000_000;\n        \n\t\tidx = indexMap.get(idx);\n        \n\t\tfor (int i = idx; i > 0; i -= (i & -i)) {\n\t\t\tresult = Math.max(result ,arr[i]);\n\t\t}\n\t\t\n\t\treturn result;\n\t}\n    \n    \n    void updateDown(int idx, long val) {\n\t\tidx = indexMap.get(idx);\n\t\t\n\t\tfor (int i = idx; i > 0; i -= (i & -i)) {\n\t\t\tarr[i] = Math.max(arr[i], val);\n\t\t}\n\t}\n\t\n\tlong getUp(int idx) {\n\t\tlong result = -1_000_000_000;\n\t\tidx = indexMap.get(idx);\n        \n\t\tfor (int i = idx; i < arr.length; i += (i & -i)) {\n\t\t\tresult = Math.max(result ,arr[i]);\n\t\t}\n\t\t\n\t\treturn result;\n\t}\n}\n"
}