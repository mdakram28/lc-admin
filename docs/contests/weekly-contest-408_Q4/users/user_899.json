{
    "username": "alvinw",
    "submission": "class Solution:\n    def canReachCorner(self, X: int, Y: int, circles: List[List[int]]) -> bool:\n        n = len(circles)\n        g = [[] for _ in range(n)]\n\n        for i in range(n):\n            for j in range(i+1, n):\n                x1, y1, r1 = circles[i]\n                x2, y2, r2 = circles[j]\n                if (x2 - x1) ** 2 + (y2 - y1) ** 2 <= (r1 + r2) ** 2:\n                    g[i].append(j)\n                    g[j].append(i)\n        \n        components = []\n        comps = -1\n        visited = [-1] * n\n        s = [i for i in range(n)]\n\n        while s:\n            i = s.pop()\n            x, y, r = circles[i]\n\n            if y - r > Y or x - r > x:\n                continue\n            \n            if visited[i] == -1:\n                visited[i] = comps\n                comps += 1\n                # l, r, u, d\n                components.append([x - r, x + r, y + r, y - r])\n            else:\n                components[visited[i]][0] = min(x - r, components[visited[i]][0])\n                components[visited[i]][1] = max(x + r, components[visited[i]][1])\n                components[visited[i]][2] = max(y + r, components[visited[i]][2])\n                components[visited[i]][3] = min(y - r, components[visited[i]][3])\n            \n            for adj in g[i]:\n                if visited[adj] != -1:\n                    continue\n                s.append(adj)\n                visited[adj] = comps\n        \n        for l, r, u, d in components:\n            if l <= 0 and r >= X:\n                return False\n            if d <= 0 and u >= Y:\n                return False\n            if l <= 0 and d <= 0:\n                return False\n            if u >= Y and r >= X:\n                return False\n\n        return True\n\n",
    "submit_ts": "1722138293",
    "subm_id": "1335787029"
}