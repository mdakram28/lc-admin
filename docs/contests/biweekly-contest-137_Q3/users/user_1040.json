{
    "username": "jum",
    "submission": "class Solution:\n    def maximumValueSum(self, board: List[List[int]]) -> int:\n        ans = float('-inf')\n        cols = [False] * len(board[0])\n        rows = [False] * len(board)\n\n        def placeRook(rooks, x, y, points):\n            nonlocal ans\n            if rooks == 3:\n                ans = max(ans, points)\n                return\n            \n            for i in range(len(board)):\n                for j in range(len(board[0])):\n                    if not (rows[i] or cols[j]):\n                        if rooks == 1 and points + board[i][j] + maxCell < ans:\n                            continue\n                        rows[i] = cols[j] = True\n                        placeRook(rooks + 1, i, j, points + board[i][j])\n                        rows[i] = cols[j] = False\n        \n        maxVals = []\n        heapq.heapify(maxVals)\n\n        for i in range(len(board)):\n            for j in range(len(board[0])):\n                heapq.heappush(maxVals, (-1 * board[i][j], (i, j)))\n\n        maxCell = maxVals[0][0] * -1\n\n        for i in range(100):\n            if maxVals:\n                vals = heapq.heappop(maxVals)\n                x, y = vals[1]\n                rows[x] = cols[y] = True\n                placeRook(1, x, y, board[x][y])\n                rows[x] = cols[y] = False\n\n        return ans\n",
    "submit_ts": "1723908792",
    "subm_id": "1359167313"
}