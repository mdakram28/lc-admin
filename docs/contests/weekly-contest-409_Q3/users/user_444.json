{
    "username": "shivanshudixit16",
    "submission": "class Solution:\n    def shortestDistanceAfterQueries(self, n: int, queries: List[List[int]]) -> List[int]:\n        MAX = n * 4\n \n        tree = [0] * MAX \n        lazy = [0] * MAX \n\n        def updateRangeUtil(si, ss, se, us, ue, diff) : \n \n\n            if (lazy[si] != 0) :\n                tree[si] = 0\n\n                if (ss != se):\n                    lazy[si * 2 + 1] = -1\n                    lazy[si * 2 + 2] = -1\n                # lazy[si] = 0;\n            if (ss > se or ss > ue or se < us) :\n                return \n\n            if (ss >= us and se <= ue) :\n                tree[si] = 0\n                if (ss != se) :\n                    lazy[si * 2 + 1] = -1\n                    lazy[si * 2 + 2] = -1\n                return \n\n            mid = (ss + se) // 2; \n            updateRangeUtil(si * 2 + 1, ss,\n                            mid, us, ue, diff); \n            updateRangeUtil(si * 2 + 2, mid + 1, \n                            se, us, ue, diff); \n\n            tree[si] = max(0,tree[si * 2 + 1] + tree[si * 2 + 2])\n\n      \n        def updateRange(n, us, ue, diff) :\n            updateRangeUtil(0, 0, n - 1, us, ue, diff); \n\n    \n        def getSumUtil(ss, se, qs, qe, si) : \n\n            if (lazy[si] != 0) :\n\n                tree[si] = 0\n\n                if (ss != se) :\n\n                    lazy[si * 2 + 1] = -1 \n                    lazy[si * 2 + 2] = -1\n\n\n            if (ss > se or ss > qe or se < qs) :\n                return 0; \n\n            if (ss >= qs and se <= qe) :\n                return tree[si]; \n\n            mid = (ss + se) // 2; \n            return (getSumUtil(ss, mid, qs, qe, 2 * si + 1) +\n                    getSumUtil(mid + 1, se, qs, qe, 2 * si + 2)); \n\n        def getSum(n, qs, qe) :\n\n            if (qs < 0 or qe > n - 1 or qs > qe) :\n                return -1; \n\n            return getSumUtil(0, n - 1, qs, qe, 0); \n\n        def constructSTUtil(arr, ss, se, si) : \n\n            if (ss > se) :\n                return ; \n\n            if (ss == se) :\n\n                tree[si] = arr[ss]; \n                return; \n\n            mid = (ss + se) // 2; \n            constructSTUtil(arr, ss, mid, si * 2 + 1); \n            constructSTUtil(arr, mid + 1, se, si * 2 + 2); \n\n            tree[si] = tree[si * 2 + 1] + tree[si * 2 + 2]; \n\n        def constructST(arr, n) : \n            constructSTUtil(arr, 0, n - 1, 0);\n        constructST([1] * n , n)\n        \n        ans = []\n        # print(getSum(n,0,n-1))\n        for u,v in queries:\n            updateRange(n,u+1,v-1,-1)\n            ans.append(getSum(n,0,n-1)-1)\n        return ans\n            \n            \n            ",
    "submit_ts": "1722741209",
    "subm_id": "1343739295"
}