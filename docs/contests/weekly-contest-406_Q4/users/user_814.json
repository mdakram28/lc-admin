{
    "username": "Shivam_Gupta5703",
    "submission": "class Solution {\n    public long minimumCost(int m, int n, int[] horizontalCuts, int[] verticalCuts) {\n        Integer[] horizontalCut = Arrays.stream(horizontalCuts).boxed().toArray(Integer[]::new);\n        Integer[] verticalCut = Arrays.stream(verticalCuts).boxed().toArray(Integer[]::new);\n        Arrays.sort(horizontalCut, Collections.reverseOrder());\n        Arrays.sort(verticalCut, Collections.reverseOrder());\n        int hIdx = 0, vIdx = 0;\n        int hp = 1, vp = 1;\n        long total = 0;\n        while (hIdx < horizontalCut.length && vIdx < verticalCut.length) {\n            if (horizontalCut[hIdx] >= verticalCut[vIdx]) {\n                total += horizontalCut[hIdx] * vp;\n                hp++;\n                hIdx++;\n            } else {\n                total += verticalCut[vIdx] * hp;\n                vp++;\n                vIdx++;\n            }\n        }\n        while (hIdx < horizontalCut.length) {\n            total += horizontalCut[hIdx] * vp;\n            hp++;\n            hIdx++;\n        }\n        while (vIdx < verticalCut.length) {\n            total += verticalCut[vIdx] * hp;\n            vp++;\n            vIdx++;\n        }\n\n        return total;\n    }\n}",
    "submit_ts": "1720925561",
    "subm_id": "1320258798"
}