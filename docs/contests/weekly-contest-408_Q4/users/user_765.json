{
    "username": "Abhay-16",
    "submission": "class Solution {\npublic:\n    int bfs(vector<vector<int>> &adj, int s, int target1, int target2, int n) {\n    vector<int> vis(n + 4, 0);\n    queue<int> q;\n    q.push(s);\n    vis[s] = 1;\n    while (!q.empty()) {\n        int u = q.front();\n        q.pop();\n        for (int neigh : adj[u]) \n        {\n            if (!vis[neigh]) \n            {\n                q.push(neigh);\n                vis[neigh] = 1;\n            }\n        }\n    }\n    return vis[target1] || vis[target2];\n}\n    \n    bool canReachCorner(int X, int Y, vector<vector<int>>& circles2) {\n        int n=circles2.size();\n        vector<pair<pair<int, int>, int>> vec(n);\n        vector<vector<int>> adj(n + 4);\n        for (int i = 0; i < n; i++) \n        {\n            vec[i].first.first=circles2[i][0];\n            vec[i].first.second=circles2[i][1];\n            vec[i].second=circles2[i][2];\n        }\n        for (int i = 0; i < n; i++) \n        {\n            if (vec[i].first.first <= vec[i].second) \n            {\n                adj[n].push_back(i);\n                adj[i].push_back(n);\n            }\n            if (X - vec[i].first.first <= vec[i].second) \n            {\n                adj[n + 2].push_back(i);\n                adj[i].push_back(n + 2);\n            }\n            if (vec[i].first.second <= vec[i].second) \n            {\n                adj[n + 1].push_back(i);\n                adj[i].push_back(n + 1);\n            }\n            if (Y - vec[i].first.second <= vec[i].second) \n            {\n                adj[n + 3].push_back(i);\n                adj[i].push_back(n + 3);\n            }\n            for (int j = i + 1; j < n; ++j) \n            {\n                double dis = sqrt(pow(vec[i].first.first - vec[j].first.first, 2) +\n                                       pow(vec[i].first.second - vec[j].first.second, 2));\n                int temp = vec[i].second + vec[j].second;\n                if (temp >= dis) \n                {\n                    adj[i].push_back(j);\n                    adj[j].push_back(i);\n                }\n            }\n        }\n        \n        int is_blocked = 0;\n        is_blocked = max(is_blocked, bfs(adj, n, n + 1, n + 2, n + 4));\n        is_blocked = max(is_blocked, bfs(adj, n + 3, n + 2, n + 1, n + 4));\n        if (is_blocked){return false;}\n        return true;\n       \n    }\n};",
    "submit_ts": "1722137644",
    "subm_id": "1335769675"
}