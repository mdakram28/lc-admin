{
    "username": "infallible-cohenrds",
    "submission": "#define ls x << 1\n#define rs (x << 1) | 1\n\nclass SegmentTree {\nprivate:\n    int n;\n    vector<int> val;\n    // \u5355\u70b9\u4fee\u6539\n    void add(int x, int l, int r, int pos, int v) {\n        if(l == r) {\n            val[x] = v;\n            return ;\n        }\n        int mid = (l + r) >> 1;\n        if(pos <= mid) add(ls, l, mid, pos, v);\n        else add(rs, mid + 1, r, pos, v);\n        val[x] = val[ls] + val[rs];\n    }\n\n    int search(int x, int l, int r, int a, int b) {\n        if(a <= l && r <= b) return val[x];\n        int mid = (l + r) >> 1, res = 0;\n        if(a <= mid) res = search(ls, l, mid, a, b);\n        if(b > mid) res += search(rs, mid + 1, r, a, b);\n        return res;\n    }\n\npublic:\n    SegmentTree(int n) {\n        this-> n = n;\n        val = vector(4 * (n + 1), 0);\n    }\n\n    void add(int pos, int v) {\n        add(1, 0, n, pos, v);\n    }\n\n    int search(int a, int b) {\n        return search(1, 0, n, a, b);\n    }\n};\n\nclass Solution {\npublic:\n    vector<int> countOfPeaks(vector<int>& nums, vector<vector<int>>& queries) {\n        int n = nums.size();\n        SegmentTree tree(n);\n        for(int i = 1; i < n - 1; i++) {\n            if(nums[i] > nums[i - 1] && nums[i] > nums[i + 1])\n                tree.add(i, 1);\n        }\n        vector<int> res;\n        for(auto& q : queries) {\n            int t = q[0], x = q[1], y = q[2];\n            if(t == 1) {\n                int cnt = tree.search(x, y);\n                if(x > 0 && x < n - 1 && nums[x] > nums[x - 1] && nums[x] > nums[x + 1])\n                    cnt--;\n                if(x != y && y > 0 && y < n - 1 && nums[y] > nums[y - 1] && nums[y] > nums[y + 1])\n                    cnt--;\n                res.push_back(cnt);\n            } else {\n                nums[x] = y;\n                tree.add(x, change(nums, x));\n                if(x > 0) tree.add(x - 1, change(nums, x - 1));\n                if(x < n - 1) tree.add(x + 1, change(nums, x + 1));\n            }\n        }\n        return res;\n    }\n    \n    int change(vector<int>& nums, int x) {\n        if(x == 0 || x == nums.size() - 1) return 0;\n        if(nums[x] > nums[x - 1] && nums[x] > nums[x + 1])\n            return 1;\n        return 0;\n    }\n};",
    "submit_ts": "1718505926",
    "subm_id": "539771575"
}