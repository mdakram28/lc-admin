{
    "username": "LittleD",
    "submission": "class Solution:\n    def largestPalindrome(self, n: int, k: int) -> str:\n        if k == 1 or k == 3 or k == 9:\n            return \"9\" * n\n        if k == 2:\n            if n < 3:\n                return \"8\" * n\n            else:\n                return \"8\" + \"9\" * (n-2) + \"8\"\n        if k == 5:\n            if n < 3:\n                return \"5\" * n\n            else:\n                return \"5\" + \"9\" * (n-2) + \"5\"\n        if k == 4:\n            if n < 5:\n                return \"8\" * n\n            else:\n                return \"88\" + \"9\" * (n-4) + \"88\"\n        if k == 8:\n            if n < 7:\n                return \"8\" * n\n            else:\n                return \"888\" + \"9\" * (n-6) + \"888\"\n        if k == 6:\n            if n % 2 == 1:\n                if n < 2:\n                    return \"6\"\n                else:\n                    return \"8\" + \"9\" * ((n // 2) - 1) + \"8\" + \"9\" * ((n // 2) - 1) + \"8\"\n            else:\n                if n < 3:\n                    return \"66\"\n                else:\n                    return \"8\" + \"9\" * ((n // 2) - 2) + \"77\" + \"9\" * ((n // 2) - 2) + \"8\"\n        def subtract_one(number: str) -> str:\n            number_list = list(number)\n            i = len(number_list) - 1\n            while i >= 0:\n                if number_list[i] == '0':\n                    number_list[i] = '9'\n                    i -= 1\n                else:\n                    number_list[i] = str(int(number_list[i]) - 1)\n                    break\n            return ''.join(number_list).lstrip('0') or '0'\n\n        def mod7(number: str) -> int:\n            result = 0\n            for digit in number:\n                result = (result * 10 + int(digit)) % 7\n            return result\n\n        def is_divisible_by_7(number: str) -> bool:\n            return mod7(number) == 0\n\n        \n        if n < 3:\n            return \"7\" * n\n        \n        if n % 2 == 0:\n            length = n // 2\n            t = \"9\" * length\n            while t:\n                fulls = t + t[::-1]\n                if is_divisible_by_7(fulls):\n                    return fulls\n                t = subtract_one(t)\n        else:\n            length = n // 2\n            t = \"9\" * length\n            while t:\n                for m in range(9, -1, -1):\n                    fulls = t + str(m) + t[::-1]\n                    if is_divisible_by_7(fulls):\n                        return fulls\n                t = subtract_one(t)\n        \n        return \"\"",
    "submit_ts": "1723952501",
    "subm_id": "1359797744"
}