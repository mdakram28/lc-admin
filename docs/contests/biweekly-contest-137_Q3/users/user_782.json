{
    "username": "Chen",
    "submission": "class Solution {\npublic:\n    long long ans = -1e17;\n    vector<int> vis;\n    vector<vector<int>> maxv;\n    vector<int> max3num(vector<int> &v)\n    {\n        int max1 = -0x3f3f3f3f, max2 = -0x3f3f3f3f, max3 = -0x3f3f3f3f;\n        int idx1 = -1, idx2 = -1, idx3 = -1;\n        for (int i = 0; i < v.size(); i ++)\n        {\n        if (v[i] >= max1)\n            {\n                max3 = max2;\n                max2 = max1;\n                max1 = v[i];\n                idx3 = idx2;\n                idx2 = idx1;\n                idx1 = i;\n            }\n            else if (v[i] >= max2)\n            {\n                max3 = max2;\n                max2 = v[i];\n                idx3 = idx2;\n                idx2 = i;\n            }\n            else if (v[i] >= max3)\n            {\n                max3 = v[i];\n                idx3 = i;\n            }\n        }\n        return {idx1, idx2, idx3};\n    }\n    void dfs(vector<vector<int>>& b, int cur, long long sums, int cnt)\n    {\n        if (cnt > 3) return;\n        if (cnt == 3)\n        {\n            ans = max(ans, sums);\n            return;\n        }\n        if (cur == b.size()) return;\n        for (auto idx: maxv[cur])\n        {\n            if (vis[idx]) continue;\n            vis[idx] = 1;\n            dfs(b, cur + 1, sums + b[cur][idx], cnt + 1);\n            vis[idx] = 0;\n        }\n        dfs(b, cur + 1, sums, cnt);\n        \n    }\n    long long maximumValueSum(vector<vector<int>>& board) {\n        vis = vector<int> (board[0].size(), 0);\n        for (int i = 0; i < board.size(); i ++)\n        {\n            maxv.push_back(max3num(board[i]));\n        }\n        // for (int i = 0; i < board.size(); i ++)\n        // {\n        //     for (auto t: maxv[i])\n        //         cout << board[i][t] << ' ';\n        //     cout << endl;\n        // }\n        dfs(board, 0, 0, 0);\n        return ans;\n    }\n};",
    "submit_ts": "1723907228",
    "subm_id": "556324294"
}