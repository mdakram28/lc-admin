{
    "username": "AbhinavNaman",
    "submission": "class Solution {\npublic:\n    int minChanges(vector<int>& nums, int k) {\n        int n = nums.size();\n        \n        // Create a frequency map to count occurrences of differences\n        map<int, int> frequencyMap;\n        for (int i = 0; i < n / 2; ++i) {\n            int diff = abs(nums[i] - nums[n - 1 - i]);\n            frequencyMap[diff]++;\n        }\n\n        // Create a vector to store the maximum values of pairs\n        vector<int> maxValues;\n        for (int i = 0; i < n / 2; ++i) {\n            int first = nums[i];\n            int second = nums[n - 1 - i];\n            int maxValue = max({first, second, k - min(first, second)});\n            maxValues.push_back(maxValue);\n        }\n\n        // Sort the maxValues vector\n        sort(maxValues.begin(), maxValues.end());\n\n        int minChangesRequired = INT_MAX;\n\n        // Calculate the minimum changes required\n        for (int f = 0; f <= k; ++f) {\n            int upperBoundIndex = upper_bound(maxValues.begin(), maxValues.end(), f - 1) - maxValues.begin();\n            int remaining = (n / 2) - upperBoundIndex;\n            int changes = (upperBoundIndex * 2) + (remaining - frequencyMap[f]);\n            minChangesRequired = min(minChangesRequired, changes);\n        }\n\n        return minChangesRequired;\n    }\n};",
    "submit_ts": "1721488875",
    "subm_id": "1327435902"
}