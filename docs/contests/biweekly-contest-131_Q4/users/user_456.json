{
    "username": "areyu",
    "submission": "class Solution {\npublic:\n    vector<bool> getResults(vector<vector<int>>& queries) {\n        int n = queries.size();\n        unordered_map<int, set<pair<int,int>>> duan;//<length, vec<<start, end>>>\n        int mx = 0;\n        vector<int> stones;//\u8bb0\u5f55\u77f3\u5934\u7684\u4f4d\u7f6e\n        vector<bool> ret;\n\n        for(int i = 0;i < n;i++)\n        {\n            if(queries[i][0] == 1)//\u653e\u77f3\u5934\n            {\n                int stone = queries[i][1];\n                if(stone > mx)\n                {//\u653e\u5728\u4e86\u4e4b\u524d\u6700\u53f3\u8fb9\u7684\u77f3\u5934\u7684\u53f3\u8fb9\n                    duan[stone-mx].emplace(mx, stone);\n                    mx = stone;\n                    stones.emplace_back(stone);\n                }\n                else\n                {//\u653e\u5728\u4e86\u524d\u8fb9\uff0c\u90a3\u5c31\u8981\u91cd\u65b0\u5206\u5272\n                    int index = upper_bound(stones.begin(), stones.end(), stone) - stones.begin();\n                    if(index == 0)\n                    {//\u653e\u5728\u4e86\u7b2c\u4e00\u6bb5\n                        int nxtStone = stones[index];\n                        duan[nxtStone].erase(make_pair(0, nxtStone));\n                        if(duan[nxtStone].empty())\n                        {\n                            duan.erase(nxtStone);\n                        }\n                        duan[stone].emplace(0, stone);\n                        duan[nxtStone-stone].emplace(stone, nxtStone);\n                    }\n                    else\n                    {\n                        int nxtStone = stones[index];\n                        int befStone = stones[index-1];\n                        duan[nxtStone-befStone].erase(make_pair(befStone, nxtStone));\n                        if(duan[nxtStone-befStone].empty())\n                        {\n                            duan.erase(nxtStone-befStone);\n                        }\n                        duan[stone-befStone].emplace(befStone, stone);\n                        duan[nxtStone-stone].emplace(stone, nxtStone);\n                    }\n                    stones.insert(stones.begin() + index,stone);\n                }\n            }\n            else//\u67e5\u8be2\n            {\n                int x = queries[i][1];\n                int sz = queries[i][2];\n                bool res = false;\n                if(x-mx >= sz)\n                {\n                    res = true;\n                }\n                else\n                {\n                    for(auto& [len, st] : duan)\n                    {\n                        //cout<<len<<\" \"<<sz<<endl;\n                        if(len >= sz)\n                        {\n                            for(auto& [start,end] : st)\n                            {\n                                if(start >= x)\n                                {\n                                    break;\n                                }\n                                if(end >= x)\n                                {\n                                    if(x-start >= sz)\n                                    {\n                                        res = true;\n                                    }\n                                    break;\n                                }\n                                if(end <= x)\n                                {\n                                    res = true;\n                                }\n                                break;\n                            }\n                        }\n                        if(res)\n                        {\n                            break;\n                        }\n                    }\n                }\n                ret.emplace_back(res);\n            }\n        }\n        return ret;\n    }\n};",
    "submit_ts": 1716652460.0
}