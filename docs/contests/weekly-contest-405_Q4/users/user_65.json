{
    "username": "xiao_ming_",
    "submission": "class Solution:\n\n    class Trie:\n        class TrieNode:\n            def __init__(self):\n                self.children = {}\n                self.is_end_of_word = False\n                self.min_cost = float('inf')\n        def __init__(self):\n            self.root = self.TrieNode()\n            \n        def insert(self, word, cost):\n            node = self.root\n            for char in word:\n                if char not in node.children:\n                    node.children[char] = self.TrieNode()\n                node = node.children[char]\n            node.is_end_of_word = True\n            node.min_cost = min(node.min_cost, cost)\n            \n        def get_root(self):\n            return self.root\n    def minimumCost(self, target: str, words: List[str], costs: List[int]) -> int:\n        trie = self.Trie()\n        \n        for word, cost in zip(words, costs):\n            trie.insert(word, cost)\n            \n        n = len(target)\n        dp = [float('inf')] * (n + 1)\n        dp[0] = 0  \n        \n        for i in range(n):\n            if dp[i] == float('inf'):\n                continue \n            \n            node = trie.get_root()\n            for j in range(i, n):\n                char = target[j]\n                if char not in node.children:\n                    break\n                node = node.children[char]\n                if node.is_end_of_word:\n                    dp[j + 1] = min(dp[j + 1], dp[i] + node.min_cost)\n                    \n        return dp[n] if dp[n] != float('inf') else -1",
    "submit_ts": "1720321125",
    "subm_id": "1312314177"
}