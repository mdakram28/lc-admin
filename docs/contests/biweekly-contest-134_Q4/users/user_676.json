{
    "username": "Ahmed_waled",
    "submission": "typedef int item;\n\n\nstruct segTree {\n    int size;\n    vector<item> mxValue;\n    item NEUTRAL_ELEMENT = {0};\n\n    item merge(item a, item b) {\n        return a & b;\n    }\n\n    item single(int v) {\n        return v;\n    }\n\n    void init(int n) {\n        size = 1;\n        while (size < n)size <<= 1;\n        mxValue.resize(2 * size);\n    }\n\n    void build(vector<int> &ref, int x, int lx, int rx) {\n        if (rx - lx == 1) {\n            if (lx < ref.size())\n                mxValue[x] = single(ref[lx]);\n            return;\n        }\n        int m = (lx + rx) / 2;\n        build(ref, 2 * x + 1, lx, m);\n        build(ref, 2 * x + 2, m, rx);\n        mxValue[x] = merge(mxValue[2 * x + 1], mxValue[2 * x + 2]);\n    }\n\n    void build(vector<int> &ref) {\n        build(ref, 0, 0, size);\n    }\n\n    void set(int i, int v, int x, int lx, int rx) {\n        if (rx - lx == 1) {\n            mxValue[x] = single(v);\n            return;\n        }\n        int m = (lx + rx)/ 2;\n        if (i < m) {\n            set(i, v, 2 * x + 1, lx, m);\n        } else {\n            set(i, v, 2 * x + 2, m, rx);\n        }\n        mxValue[x] = merge(mxValue[2 * x + 1], mxValue[2 * x + 2]);\n    }\n\n    void set(int i, int v) {\n        set(i, v, 0, 0, size);\n    }\n\n    item func(int l, int r, int x, int lx, int rx) {\n        if (lx >= r || l >= rx)return NEUTRAL_ELEMENT;\n        if (lx >= l && rx <= r)return mxValue[x];\n\n        int m = (lx + rx) / 2;\n        auto p1 = func(l, r, 2 * x + 1, lx, m);\n        auto p2 = func(l, r, 2 * x + 2, m, rx);\n        return merge(p1, p2);\n    }\n\n    item func(int l, int r) {\n        return func(l, r, 0, 0, size);\n    }\n\n};\n\nclass Solution {\npublic:\n    segTree sg;\n    static int const BITS = 32;\n    static int const N = 1e5 + 10;\n    int bit[N][BITS];\n\n    int getVal(int l, int r){\n        int bits[32]{};\n        int rslt = 0;\n        for(int i = 0; i < 32; ++i)\n            bits[i] = bit[r][i] - bit[l][i];\n        \n        for(int i = 0; i < 32; ++i)\n            if(bits[i] == r - l)\n                rslt |= 1 << i;\n        return rslt;\n    }\n\n    int getLow(int i, int k, vector<int>&nums){\n        int l = i - 1, r = nums.size();\n        while(r - l > 1){\n            int m = (l + r) / 2;\n            if(getVal(i, m + 1) > k)\n                l = m;\n            else\n                r = m;\n        }\n        return l;\n    }\n\n    int getHigh(int i, int k, vector<int>&nums){\n        int l = i - 1, r = nums.size();\n//        cout<<\"-----\\n\";\n        while(r - l > 1){\n            int m = (l + r) / 2;\n            int val = getVal(i, m + 1);\n//            cout<<i<<' '<<m<<' '<<val<<'\\n';\n            if(val < k)\n                r = m;\n            else\n                l = m;\n        }\n  //      cout<<\"----\\n\";\n        return r;\n    }\n\n\n\n    long long countSubarrays(vector<int>& nums, int k) {\n        long long ans = 0;\n        int n = nums.size();\n        //sg.init(n);\n        //sg.build(nums);\n        //for(int i = 0 ; i < n; ++i)\n          //  for(int j = i + 1; j <= n; ++j)\n            //    cout<<i<<' '<<j<<\": \"<<sg.func(i, j)<<'\\n';\n\n        for(int i = 1 ; i <= n; ++i){\n            for(int j = 0; j < 32; ++j)\n                bit[i][j] += bit[i - 1][j] + (nums[i - 1] >> j & 1);\n        }\n\n        for(int i = 0; i < n; ++i){\n            int l = getLow(i, k, nums);\n            int r = getHigh(i, k, nums);\n            ans += r - l - 1;\n        }   \n        return ans;\n    }\n};",
    "submit_ts": "1720279720",
    "subm_id": "1311762418"
}