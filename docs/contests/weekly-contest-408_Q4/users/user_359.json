{
    "username": "Saiyan2108",
    "submission": "\nclass Solution {\npublic:\n    \n    int bfsTraversal(std::vector<std::vector<int>> &adjList, int startNode, int endNode1, int endNode2, int totalNodes) {\n        std::queue<int> nodeQueue;\n        std::vector<int> visited(totalNodes + 4, 0);\n        nodeQueue.push(startNode);\n        visited[startNode] = 1;\n        \n        while (!nodeQueue.empty()) {\n            int currentNode = nodeQueue.front();\n            nodeQueue.pop();\n            for (int neighbor : adjList[currentNode]) {\n                if (!visited[neighbor]) {\n                    nodeQueue.push(neighbor);\n                    visited[neighbor] = 1;\n                }\n            }\n        }\n        return visited[endNode1] || visited[endNode2];\n    }\n    \n    bool canReachCorner(int rectWidth, int rectHeight, std::vector<std::vector<int>>& circlesInfo) {\n        int numCircles = circlesInfo.size();\n        std::vector<std::pair<std::pair<int, int>, int>> circles(numCircles);\n        std::vector<std::vector<int>> adjList(numCircles + 4);\n        \n        for (int i = 0; i < numCircles; ++i) {\n            circles[i].first.first = circlesInfo[i][0];\n            circles[i].first.second = circlesInfo[i][1];\n            circles[i].second = circlesInfo[i][2];\n        }\n        \n       \n        for (int i = 0; i < numCircles; ++i) {\n            if (circles[i].first.first <= circles[i].second) {\n                adjList[numCircles].push_back(i);\n                adjList[i].push_back(numCircles);\n            }\n            if (rectWidth - circles[i].first.first <= circles[i].second) {\n                adjList[numCircles + 2].push_back(i);\n                adjList[i].push_back(numCircles + 2);\n            }\n            if (circles[i].first.second <= circles[i].second) {\n                adjList[numCircles + 1].push_back(i);\n                adjList[i].push_back(numCircles + 1);\n            }\n            if (rectHeight - circles[i].first.second <= circles[i].second) {\n                adjList[numCircles + 3].push_back(i);\n                adjList[i].push_back(numCircles + 3);\n            }\n            for (int j = i + 1; j < numCircles; ++j) {\n                double distBetweenCenters = std::sqrt(std::pow(circles[i].first.first - circles[j].first.first, 2) +\n                                                      std::pow(circles[i].first.second - circles[j].first.second, 2));\n                int sumOfRadii = circles[i].second + circles[j].second;\n                if (sumOfRadii >= distBetweenCenters) {\n                    adjList[i].push_back(j);\n                    adjList[j].push_back(i);\n                }\n            }\n        }\n        \n        int isPathBlocked = 0;\n        isPathBlocked = std::max(isPathBlocked, bfsTraversal(adjList, numCircles, numCircles + 1, numCircles + 2, numCircles + 4)); // Check for bottom-left corner\n        isPathBlocked = std::max(isPathBlocked, bfsTraversal(adjList, numCircles + 3, numCircles + 2, numCircles + 1, numCircles + 4)); // Check for top-right corner\n        \n        return !isPathBlocked;\n    }\n};\n",
    "submit_ts": "1722137448",
    "subm_id": "1335764087"
}