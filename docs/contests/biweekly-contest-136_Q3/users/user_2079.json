{
    "username": "tamyte",
    "submission": "class Solution {\npublic:\n    int minFlips(vector<vector<int>>& grid) {\n        int n = grid.size(), m = grid[0].size();\n        if (n == 1 && m == 1) return (grid[0][0] == 1);\n        if (n == 1) {\n            int cnt = 0, one = 0;\n            for (int i = 0; i < m / 2; ++i) {\n                cnt += (grid[0][i] != grid[0][m - i - 1]);\n                one += (grid[0][i] == 1);\n                one += (grid[0][m - i - 1] == 1);\n            }\n            int res = 0;\n            if (m & 1) {\n                res += (grid[0][m / 2] == 1);\n            }\n            if (cnt == 0) {\n                if (one % 4 == 0) {\n                    return res;\n                }\n                return res + 2;\n            }\n            return res + cnt;\n        }\n        if (m == 1) {\n            // cout << \"a\";\n            int cnt = 0, one = 0;\n            for (int i = 0; i < n / 2; ++i) {\n                cnt += (grid[i][0] != grid[n - i - 1][0]);\n                one += (grid[i][0] == 1);\n                one += (grid[n - i - 1][0] == 1);\n            }\n            int res = 0;\n            if (n & 1) {\n                res += (grid[n / 2][0] == 1);\n            }\n            if (cnt == 0) {\n                if (one % 4 == 0) {\n                    return res;\n                }\n                return res + 2;\n            }\n            return res + cnt;\n        }\n        vector<int> diff;\n        for (int i = 0; i < n / 2; ++i) {\n            for (int j = 0; j < m / 2; ++j) {\n                int sum = grid[i][j] + grid[n - i - 1][j] + grid[i][m - j - 1] + grid[n - i - 1][m - j - 1];\n                // cout << grid[i][j] << \" \" << grid[n - i - 1][j] << \" \" << grid[i][m - j - 1] << \" \" << grid[n - i - 1][m - j - 1] << \"\\n\";\n                diff.push_back(sum);\n            }\n        }\n        int res = 0;\n        int sum = 0;\n        int cnt = 0, one = 0;\n        if (n & 1) {\n            for (int i = 0; i < m / 2; ++i) {\n                cnt += (grid[n / 2][i] != grid[n / 2][m - i - 1]);\n                one += (grid[n / 2][i] == 1);\n                one += (grid[n / 2][m - i - 1] == 1);\n            }\n        }\n        if (m & 1) {\n            for (int i = 0; i < n / 2; ++i) {\n                cnt += (grid[i][m / 2] != grid[n - i - 1][m / 2]);\n                one += (grid[i][m / 2] == 1);\n                one += (grid[n - i - 1][m / 2] == 1);\n            }\n        }\n        if (cnt == 0) {\n            if (one % 4 != 0) {\n                res += 2;\n            }\n        } else {\n            res += cnt;\n        }\n        // cout << sum << \" \";\n        res += min(sum, 4 - sum);\n        if (n & 1 && m & 1) {\n            res += (grid[n / 2][m / 2] == 1);\n        }\n        for (auto& u : diff) {\n            // cout << u << \" \";\n            res += min(u, 4 - u);\n        }\n        return res;\n    }\n};",
    "submit_ts": "1722698399",
    "subm_id": "1343179378"
}