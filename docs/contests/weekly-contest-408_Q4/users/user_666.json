{
    "username": "zhouwei0422",
    "submission": "class UnionFind {\nprivate:\n    vector<int> ufs;\n    int n;\n    int ufs_count;\npublic:\n    UnionFind(int _n): n(_n), ufs_count(_n), ufs(_n){\n        iota(ufs.begin(), ufs.end(), 0);\n    }\n    int count(){\n        return ufs_count;\n    }\n    int findElement(int x) {\n        if(x!=ufs[x])ufs[x]=findElement(ufs[x]);\n        return ufs[x];\n    }\n    bool unite(int x, int y) {\n        x = findElement(x);\n        y = findElement(y);\n        if (x == y)return false;\n        ufs[y] = x;\n        ufs_count--;\n        return true;\n    }\n    bool isConnected(int x, int y) {\n        x = findElement(x);\n        y = findElement(y);\n        return x == y;\n    }\n};\n\nclass Solution {\npublic:\n    bool canReachCorner(int X, int Y, vector<vector<int>>& circles) {\n        for(auto&v:circles){\n            if(1LL*(v[0]-X)*(v[0]-X)+1LL*(v[1]-Y)*(v[1]-Y) <= 1LL*v[2]*v[2])return false;\n            if(1LL*v[0]*v[0]+1LL*v[1]*v[1] <= 1LL*v[2]*v[2])return false;\n        }\n        \n        int n = circles.size();\n        vector<vector<int>> c(n,vector<int>(4,0));\n        for(int i = 0; i < n; i++){\n            long long x = circles[i][0];\n            long long y = circles[i][1];\n            long long r = circles[i][2];\n            \n            if(x<=X&&x>=0){\n                if(abs(y)<=r)c[i][0]=1;\n                if(abs(y-Y)<=r)c[i][1]=1;\n            }else if(x<0){\n                if(y*y + x*x <= r*r)c[i][0]=1;\n                if((y-Y)*(y-Y) + x*x <=r*r)c[i][1]=1;\n            }else{\n                if(y*y + (x-X)*(x-X))c[i][0]=1;\n                if((y-Y)*(y-Y) + (x-X)*(x-X)<r*r)c[i][1]=1;\n            }\n            \n            if(y<=Y&&y>=0){\n                if(abs(x)<=r)c[i][2]=1;\n                if(abs(x-X)<=r)c[i][3]=1;\n            }else if(y<0){\n                if(x*x + y*y <= r*r)c[i][2]=1;\n                if((x-X)*(x-X) + y*y <=r*r)c[i][3]=1;\n            }else{\n                if((y-Y)*(y-Y) + x*x)c[i][2]=1;\n                if((y-Y)*(y-Y) + (x-X)*(x-X)<r*r)c[i][3]=1;\n            }\n        }\n        \n        UnionFind ufs(n);\n        for(int i = 0; i < n; i++){\n            for(int j = 0; j < i; j++){\n                \n                long long x1 = circles[i][0];\n                long long y1 = circles[i][1];\n                long long x2 = circles[j][0];\n                long long y2 = circles[j][1];\n                long long r1 = circles[i][2];\n                long long r2 = circles[j][2];\n                if((x1-x2)*(x1-x2)+(y1-y2)*(y1-y2)<=(r1+r2)*(r1+r2)){\n                    //cout<<\"united\"<<endl;\n                    ufs.unite(i,j);\n                }\n            }\n        }\n        for(int i = 0; i < n; i++){\n            vector<int> s = c[i];\n            for(int j = 0; j < i; j++){\n                \n                if(ufs.isConnected(i,j)){\n                    for(int k = 0; k < 4; k++){\n                        s[k]+=c[j][k];\n                    }\n                }\n            }\n            if(s[0]>0&&s[1]>0)return false;\n            if(s[2]>0&&s[3]>0)return false;\n            if(s[0]>0&&s[2]>0)return false;\n            if(s[1]>0&&s[3]>0)return false;\n        }\n        \n        \n        return true;\n    }\n};",
    "submit_ts": "1722138520",
    "subm_id": "1335792803"
}