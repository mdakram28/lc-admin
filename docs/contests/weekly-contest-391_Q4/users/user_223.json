{
    "username": "DimmyT",
    "submission": "class Solution {\npublic:\n    int minimumDistance(vector<vector<int>>& p) {\n        int n = p.size();\n        \n        vector<vector<int>> opt(4);\n        int ans = 0;\n        for (int i = 0; i < n; ++i) {\n            if(i == 0) {\n                for (int mask = 0; mask < 4; ++mask) {\n                    auto cur = p[i];\n                    for (int j = 0; j < 2; ++j) {\n                        if((mask >> j) & 1) {\n                            cur[j] *= -1;\n                        }\n                    }\n                    opt[mask] = cur;\n                }\n                continue;\n            }\n            for (int mask = 0; mask < 4; ++mask) {\n                auto cur = p[i];\n                for (int j = 0; j < 2; ++j) {\n                    if((mask >> j) & 1) {\n                        cur[j] *= -1;\n                    }\n                }\n                int oth = 3 - mask;\n                ans = max(ans, cur[0] + opt[oth][0] + cur[1] + opt[oth][1]);\n            }\n            \n            for (int mask = 0; mask < 4; ++mask) {\n                auto cur = p[i];\n                for (int j = 0; j < 2; ++j) {\n                    if((mask >> j) & 1) {\n                        cur[j] *= -1;\n                    }\n                }\n                if(cur[0] + cur[1] > opt[mask][0] + opt[mask][1])\n                    opt[mask] = cur;\n            }\n        }\n        auto sav = opt;\n        int res = ans;\n        for (int it = 0; it < 4; ++it) {\n            bool has = false;\n            bool skip = false;\n            ans = 0;\n            // vector<vector<int>> opt(4);\n            for (int i = 0; i < n; ++i) {\n                auto cur = p[i];\n                for (int j = 0; j < 2; ++j) {\n                    if((it >> j) & 1) {\n                        cur[j] *= -1;\n                    }\n                }\n                // cout << cur[0] << ' ' << sav[it][0] << ' ' << cur[1] << ' ' << sav[it][1] << '\\n';\n                if(cur == sav[it] && skip == false) {\n                    skip = true;\n                    continue;\n                }\n                \n                if(has == 0) {\n                    for (int mask = 0; mask < 4; ++mask) {\n                        auto cur = p[i];\n                        for (int j = 0; j < 2; ++j) {\n                            if((mask >> j) & 1) {\n                                cur[j] *= -1;\n                            }\n                        }\n                        opt[mask] = cur;\n                    }\n                    \n                    has = true;\n                    continue;\n                }\n                for (int mask = 0; mask < 4; ++mask) {\n                    auto cur = p[i];\n                    for (int j = 0; j < 2; ++j) {\n                        if((mask >> j) & 1) {\n                            cur[j] *= -1;\n                        }\n                    }\n                    int oth = 3 - mask;\n                    int now = cur[0] + opt[oth][0] + cur[1] + opt[oth][1];\n                    if(ans < now) {\n                        ans = now;\n                        // cout << \"here: \" << cur[0] << ' ' << cur[1] << ' ' << opt[oth][0] << ' ' << opt[oth][1] << '\\n';\n                    }\n                }\n\n                for (int mask = 0; mask < 4; ++mask) {\n                    auto cur = p[i];\n                    for (int j = 0; j < 2; ++j) {\n                        if((mask >> j) & 1) {\n                            cur[j] *= -1;\n                        }\n                    }\n\n                    if(cur[0] + cur[1] > opt[mask][0] + opt[mask][1])\n                        opt[mask] = cur;\n                }\n            }\n            \n            // cout <<\"mask: val: \"<< it << ' ' << ans << '\\n';\n            // cout << opt[it][0] << ' ' << opt[it][1] << '\\n';\n            res = min(res, ans);\n        }\n        return res;\n    }\n};"
}