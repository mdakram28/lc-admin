{
    "username": "BattlerRein",
    "submission": "class Solution {\n\n    public int waysToReachStair(int k) {\n\n        int result = 0;\n        int totalJumpDist = 0;\n        int currJumpDist = 1;\n        for (int jumps = 0; jumps <= 30; jumps++) {\n            \n            if (1 + totalJumpDist >= k && 1 + totalJumpDist - (jumps + 1) <= k) {\n                int backoffCount = 1 + totalJumpDist - k;\n\n                result += getPossibilityCount(jumps + 1, backoffCount);\n            }\n            totalJumpDist += currJumpDist;\n            currJumpDist *= 2;\n        }\n\n        return result;\n    }\n\n    private int getPossibilityCount(int slotNum, int backoffNum) {\n        double result = 1;\n        for (int i = backoffNum + 1; i <= slotNum; i++) {\n            result = result * (double)i / (double)(i - backoffNum);\n        }\n        // System.out.println(String.format(\"Getting slotNum %s, backoffNum %s\", slotNum, backoffNum));\n        // System.out.println(String.format(\"Result = %ss\", result));\n        return (int)result;\n    }\n}",
    "submit_ts": 1716088413.0
}