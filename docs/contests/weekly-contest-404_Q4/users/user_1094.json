{
    "username": "ankush_dubey",
    "submission": "class Solution {\npublic:\n    int findDiameter(vector<int> adj[], int n) {\n        auto bfs = [&](int startNode) {\n            vector<int> distance(n + 1, -1);\n            queue<int> q;\n            q.push(startNode);\n            distance[startNode] = 0;\n            int farthestNode = startNode;\n            int maxDistance = 0;\n\n            while (!q.empty()) {\n                int currentNode = q.front();\n                q.pop();\n                \n                for (int neighbor : adj[currentNode]) {\n                    if (distance[neighbor] == -1) {\n                        distance[neighbor] = distance[currentNode] + 1;\n                        q.push(neighbor);\n                        if (distance[neighbor] > maxDistance) {\n                            maxDistance = distance[neighbor];\n                            farthestNode = neighbor;\n                        }\n                    }\n                }\n            }\n            return make_pair(farthestNode, maxDistance);\n        };\n\n        if (n == 0) return 0;\n\n        // Start from an arbitrary node (node 1)\n        pair<int, int> result1 = bfs(1);\n        int farthestNode = result1.first;\n\n        // Find the farthest node from the previously found farthest node\n        pair<int, int> result2 = bfs(farthestNode);\n        int diameter = result2.second;\n\n        return diameter;\n    }\n    \n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n        vector<int> adj1[200005];\n        vector<int> adj2[200005];\n        int n=0, m=0;\n        for (const auto& edge : edges1) {\n            int u = edge[0];\n            int v = edge[1];\n            adj1[u].push_back(v);\n            adj1[v].push_back(u);\n            n=max(m, u);\n            n=max(m, v);\n        }\n        for (const auto& edge : edges2) {\n            int u = edge[0];\n            int v = edge[1];\n            adj2[u].push_back(v);\n            adj2[v].push_back(u);\n            m=max(m, u);\n            m=max(m, v);\n        }\n        \n        int r1 = findDiameter(adj1, n);\n\n        int r2 = findDiameter(adj2, m);\n        \n        int mh1 = r1 >= 2? (r1+1)/2: r1;\n        int mh2 = r2 >= 2? (r2+1)/2: r2;\n        return max({mh1+mh2+1, r1, r2});\n    }\n};",
    "submit_ts": "1719719305",
    "subm_id": "1304438688"
}