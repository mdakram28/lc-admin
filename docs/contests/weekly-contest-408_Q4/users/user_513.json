{
    "username": "anupammalviya",
    "submission": "class Solution {\n    private boolean bfs(List<List<Integer>> graph, int start, int target1, int target2, int nodeCount) {\n        Queue<Integer> queue = new LinkedList<>();\n        boolean[] visited = new boolean[nodeCount + 4];\n        queue.offer(start);\n        visited[start] = true;\n        while (!queue.isEmpty()) {\n            int current = queue.poll();\n            for (int neighbor : graph.get(current)) {\n                if (!visited[neighbor]) {\n                    queue.offer(neighbor);\n                    visited[neighbor] = true;\n                }\n            }\n        }\n        return visited[target1] || visited[target2];\n    }\n    public boolean canReachCorner(int x, int y, int[][] circles) {\n        int n = circles.length;\n        List<int[]> circleData = new ArrayList<>(n);\n        List<List<Integer>> graph = new ArrayList<>(n + 4);\n        for (int i = 0; i < n + 4; i++) {\n            graph.add(new ArrayList<>());\n        }\n        for (int[] circle : circles) {\n            circleData.add(new int[]{circle[0], circle[1], circle[2]});\n        }\n        for (int i = 0; i < n; i++) {\n            int[] circle = circleData.get(i);\n            int cx = circle[0];\n            int cy = circle[1];\n            int radius = circle[2];\n\n            if (cx <= radius) {\n                graph.get(n).add(i);\n                graph.get(i).add(n);\n            }\n            if (x - cx <= radius) {\n                graph.get(n + 2).add(i);\n                graph.get(i).add(n + 2);\n            }\n            if (cy <= radius) {\n                graph.get(n + 1).add(i);\n                graph.get(i).add(n + 1);\n            }\n            if (y - cy <= radius) {\n                graph.get(n + 3).add(i);\n                graph.get(i).add(n + 3);\n            }\n            for (int j = i + 1; j < n; j++) {\n                int[] otherCircle = circleData.get(j);\n                int otherCx = otherCircle[0];\n                int otherCy = otherCircle[1];\n                int otherRadius = otherCircle[2];\n                double distance = Math.sqrt(Math.pow(cx - otherCx, 2) + Math.pow(cy - otherCy, 2));\n                if (radius + otherRadius >= distance) {\n                    graph.get(i).add(j);\n                    graph.get(j).add(i);\n                }\n            }\n        } \n        boolean reachable = bfs(graph, n, n + 1, n + 2, n + 4) || bfs(graph, n + 3, n + 2, n + 1, n + 4);\n        return !reachable;\n    }\n}",
    "submit_ts": "1722137706",
    "subm_id": "1335771397"
}