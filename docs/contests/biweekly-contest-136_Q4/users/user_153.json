{
    "username": "balakrishnan_v",
    "submission": "#define MAXN 100000\nclass Solution {\npublic:\n    vector<int> E[MAXN+2];\n    \n    void Add(map<int,int>& counts, int x, int delta) {\n        counts[x]+=delta;\n        if (counts[x]==0) counts.erase(x);\n    }\n    \n    \n    int GetMax(const map<int,int>& counts) {\n        if (counts.empty()) return 0;\n        return counts.rbegin()->first;\n    }\n    \n    int ans[MAXN+2];\n    int max_depth[MAXN+2];\n    void dfs2(int par,int u, int max_sum) {\n        ans[u]=max_sum;\n        map<int,int> counts;\n        for(int v : E[u]) {\n            if (v == par) continue;\n            ans[u]=max(ans[u],max_depth[v]);\n            Add(counts, max_depth[v],1);\n        }\n        \n        for(int v : E[u]) {\n            if (v==par) continue;\n            Add(counts,max_depth[v],-1);\n            dfs2(u,v,max(max_sum, GetMax(counts))+1+(u%2==0));\n            Add(counts, max_depth[v],1);\n        }\n    }\n    \n    int dfs(int par,int u) {\n        int curr_cost = 1 + (u%2==0);\n        int mx = 0;\n        for(int v : E[u]) {\n            if (v==par)continue;\n            mx = max(mx, dfs(u,v));\n        }\n        max_depth[u]=curr_cost+mx;\n        return max_depth[u];\n    }\n    \n    \n    vector<int> timeTaken(vector<vector<int>>& edges) {\n        int n=edges.size()+1;\n        for(int i=0;i<n;i++) E[i].clear();\n        for(auto tmp : edges) {\n            int u = tmp[0];\n            int v = tmp[1];\n            E[u].push_back(v);\n            E[v].push_back(u);\n        }\n        dfs(-1, 0);\n        dfs2(-1, 0, 0);\n        vector<int> ret;\n        for(int u=0;u<n;u++) {\n            ret.push_back(ans[u]);\n        }\n        return ret;\n    }\n};",
    "submit_ts": "1722698726",
    "subm_id": "1343189801"
}