{
    "username": "YoumuChan",
    "submission": "use std::collections::BTreeMap;\n\nimpl Solution {\n    pub fn min_changes(nums: Vec<i32>, k: i32) -> i32 {\n        let v: Vec<(i32, i32)> = nums.iter().zip(nums.iter().rev()).take(nums.len() / 2).map(|(a, b)| {\n            let max_range = (*a).max(*b).max((k - a).abs()).max((k - b).abs());\n            ((a - b).abs(), max_range)\n        }).collect();\n\n        let mut gap_map: BTreeMap<i32, i32> = BTreeMap::new();\n        let mut range_map: BTreeMap<i32, i32> = BTreeMap::new();\n        for (gap, range) in v.iter() {\n            *gap_map.entry(*gap).or_default() += 1;\n            *range_map.entry(*range).or_default() += 1;\n        }\n\n\n        let mut range_it = range_map.into_iter().rev().peekable();\n        let mut acc_count = 0;\n        let mut ans = i32::MAX;\n        for (gap, gap_count) in gap_map.into_iter().rev() {\n            while let Some((_, range_count)) = range_it.next_if(|(range, _)| *range >= gap) {\n                acc_count += range_count;\n            }\n            ans = ans.min((acc_count - gap_count) + 2 * (nums.len() as i32 / 2 - acc_count));\n        }\n        ans\n    }\n}",
    "submit_ts": "1721487534",
    "subm_id": "1327392313"
}