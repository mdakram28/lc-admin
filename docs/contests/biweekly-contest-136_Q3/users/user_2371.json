{
    "username": "Amit130",
    "submission": "class Solution {\nprivate:\n    int countFlipsInQuadrants(const vector<vector<int>>& matrix, int rows, int cols) {\n        int flips = 0;\n        for (int i = 0; i < rows / 2; ++i) {\n            for (int j = 0; j < cols / 2; ++j) {\n                vector<int> elements = {\n                    matrix[i][j],\n                    matrix[rows - i - 1][j],\n                    matrix[i][cols - j - 1],\n                    matrix[rows - i - 1][cols - j - 1]\n                };\n                int onesCount = count(elements.begin(), elements.end(), 1);\n                flips += min(onesCount, 4 - onesCount);\n            }\n        }\n        return flips;\n    }\n\n    int handleMiddleRow(const vector<vector<int>>& matrix, int rows, int cols, int& possible, int& count) {\n        int flips = 0;\n        if (rows % 2 != 0) {\n            for (int j = 0; j < cols / 2; ++j) {\n                if (matrix[rows / 2][j] != matrix[rows / 2][cols - j - 1]) {\n                    flips++;\n                    possible++;\n                } else {\n                    if (matrix[rows / 2][j] == 1) {\n                        count++;\n                    }\n                }\n            }\n        }\n        return flips;\n    }\n\n    int handleMiddleColumn(const vector<vector<int>>& matrix, int rows, int cols, int& possible, int& count) {\n        int flips = 0;\n        if (cols % 2 != 0) {\n            for (int i = 0; i < rows / 2; ++i) {\n                if (matrix[i][cols / 2] != matrix[rows - i - 1][cols / 2]) {\n                    flips++;\n                    possible++;\n                } else {\n                    if (matrix[i][cols / 2] == 1) {\n                        count++;\n                    }\n                }\n            }\n        }\n        return flips;\n    }\n\n    int handleCentralElement(const vector<vector<int>>& matrix, int rows, int cols) {\n        if (rows % 2 != 0 && cols % 2 != 0 && matrix[rows / 2][cols / 2] == 1) {\n            return 1;\n        }\n        return 0;\n    }\n\n    int adjustFlips(int flips, int possible, int count) {\n        if (possible == 0 && count % 2 != 0) {\n            flips += 2;\n        }\n        return flips;\n    }\n\npublic:\n    int minFlips(vector<vector<int>>& matrix) {\n        int rows = matrix.size();\n        int cols = matrix[0].size();\n        int totalFlips = 0;\n        int possible = 0;\n        int count = 0;\n\n        totalFlips += countFlipsInQuadrants(matrix, rows, cols);\n        totalFlips += handleMiddleRow(matrix, rows, cols, possible, count);\n        totalFlips += handleMiddleColumn(matrix, rows, cols, possible, count);\n        totalFlips += handleCentralElement(matrix, rows, cols);\n        totalFlips = adjustFlips(totalFlips, possible, count);\n\n        return totalFlips;\n    }\n};\n",
    "submit_ts": "1722699880",
    "subm_id": "1343225139"
}