{
    "username": "atulsoam5",
    "submission": "const int MOD = 1e9 + 7;\n\nclass Solution {\npublic:\n    int numberOfPermutations(int n, vector<vector<int>>& requirements) {\n        sort(requirements.begin(), requirements.end());\n        int max_inversions = 0;\n        for (const auto& req : requirements) {\n            max_inversions = max(max_inversions, req[1]);\n        }\n\n        vector<vector<vector<int>>> dp(n + 1, vector<vector<int>>(max_inversions + 1, vector<int>(requirements.size() + 1, 0)));\n        dp[0][0][0] = 1;\n\n        vector<int> prefix_sum(max_inversions + 2, 0);\n        for (int i = 1; i <= n; ++i) {\n            for (int r = 0; r <= requirements.size(); ++r) {\n                prefix_sum.resize(max_inversions + 2 , 0);\n                for (int j = 0; j <= max_inversions; ++j) {\n                    prefix_sum[j + 1] = (prefix_sum[j] + dp[i - 1][j][r]) % MOD;\n                }\n                for (int j = 0; j <= max_inversions; ++j) {\n                    dp[i][j][r] = (prefix_sum[j + 1] - prefix_sum[max(0, j - i + 1)] + MOD) % MOD;\n                }\n\n                if (r > 0 && i - 1 == requirements[r - 1][0]) {\n                    for (int j = 0; j <= max_inversions; ++j) {\n                        if (j != requirements[r - 1][1]) {\n                            dp[i][j][r] = 0;\n                        } else {\n                            dp[i][j][r] = dp[i][j][r - 1];\n                        }\n                    }\n                }\n            }\n        }\n\n        int result = 0;\n        for (int j = 0; j <= max_inversions; ++j) {\n            result = (result + dp[n][j][requirements.size()]) % MOD;\n        }\n\n        return result;\n    }\n};",
    "submit_ts": "1719069329",
    "subm_id": "1296793425"
}