{
    "username": "prabyTripy",
    "submission": "class Solution {\npublic:\n    int minimumDiameterAfterMerge(vector<vector<int>>& e1, vector<vector<int>>& e2) {\n        int n = e1.size() + 1;\n        int m = e2.size() + 1;\n        \n        vector<vector<int>> adj1 = buildAdj(n, e1);\n        vector<vector<int>> adj2 = buildAdj(m, e2);\n        \n        int d1 = findDiameter(adj1);\n        int d2 = findDiameter(adj2);\n        \n        return minDiameter(d1, d2);\n    }\n\nprivate:\n    vector<vector<int>> buildAdj(int nodes, const vector<vector<int>>& edges) {\n        vector<vector<int>> adj(nodes);\n        for (const auto& e : edges) {\n            adj[e[0]].push_back(e[1]);\n            adj[e[1]].push_back(e[0]);\n        }\n        return adj;\n    }\n\n    pair<int, int> bfs(int s, const vector<vector<int>>& adj) {\n        int n = adj.size();\n        vector<int> dist(n, -1);\n        queue<int> q;\n        q.push(s);\n        dist[s] = 0;\n        \n        int f = s;\n        while (!q.empty()) {\n            int u = q.front();\n            q.pop();\n            \n            for (int v : adj[u]) {\n                if (dist[v] == -1) {\n                    dist[v] = dist[u] + 1;\n                    q.push(v);\n                    if (dist[v] > dist[f]) {\n                        f = v;\n                    }\n                }\n            }\n        }\n        \n        return {f, dist[f]};\n    }\n\n    int findDiameter(const vector<vector<int>>& adj) {\n        auto first = bfs(0, adj);\n        auto second = bfs(first.first, adj);\n        return second.second;\n    }\n\n    int minDiameter(int d1, int d2) {\n        int h1 = (d1 + 1) / 2;\n        int h2 = (d2 + 1) / 2;\n        return max({d1, d2, h1 + h2 + 1});\n    }\n};",
    "submit_ts": "1719719791",
    "subm_id": "1304450649"
}