{
    "username": "Nreyog",
    "submission": "struct SegTree {\n    \n    int n, inf = 2e9;\n    vector<int> sum;\n    \n    SegTree() {}\n    SegTree(int n) {\n        this->n = n;\n        sum = vector<int> (n * 4 + 5);\n    }\n\n    void change(int p, int l, int r, int pos, int val) {    // \u5355\u70b9\u4fee\u6539\n        if (l == r && l == pos) {\n            sum[p] += val;\n            return;\n        }\n        int m = l + r >> 1;\n        if (pos <= m) {\n            change(p * 2, l, m, pos, val);\n        }\n        if (m < pos) {\n            change(p * 2 + 1, m + 1, r, pos, val);\n        }\n        sum[p] = sum[p * 2] + sum[p * 2 + 1];\n    }\n\n    int query(int p, int l, int r, int ql, int qr) {    // \u67e5\u8be2\u533a\u95f4sum\n        if (ql <= l && r <= qr) {\n            return sum[p];\n        }\n        int m = l + r >> 1;\n        int res = 0;\n        if (ql <= m) {\n            res += query(p * 2, l, m, ql, qr);\n        }\n        if (qr > m) {\n            res += query(p * 2 + 1, m + 1, r, ql, qr);\n        }\n        return res;\n    }\n\n    void change(int pos, int val) {\n        change(1, 0, n, pos, val);\n    }\n\n    int query(int ql, int qr) {\n        if (ql > qr) {\n            return 0;\n        }\n        return query(1, 0, n, ql, qr);\n    }\n\n};\nclass Solution {\npublic:\n    vector<int> countOfPeaks(vector<int>& a, vector<vector<int>>& q) {\n        int n = a.size();\n        SegTree S(n);\n        for (int i = 1; i < n - 1; i++) {\n            if (a[i] > a[i - 1] && a[i] > a[i + 1]) {\n                S.change(i, 1);\n            }\n        }\n        vector<int> res;\n        for (int i = 0; i < q.size(); i++) {\n            if (q[i][0] == 1) {\n                int l = q[i][1], r = q[i][2];\n                res.push_back(S.query(l + 1, r - 1));\n            } else {\n                int idx = q[i][1], v = q[i][2];\n                if (idx - 2 >= 0) {\n                    if (a[idx - 1] > a[idx - 2] && a[idx - 1] > a[idx]) {\n                        S.change(idx - 1, -1);\n                    }\n                }\n                if (idx + 2 < n) {\n                    if (a[idx + 1] > a[idx + 2] && a[idx + 1] > a[idx]) {\n                        S.change(idx + 1, -1);\n                    }\n                }\n                if (idx - 1 >= 0 && idx + 1 < n) {\n                    if (a[idx] > a[idx + 1] && a[idx] > a[idx - 1]) {\n                        S.change(idx, -1);\n                    }\n                }\n                a[idx] = q[i][2];\n\n                if (idx - 2 >= 0) {\n                    if (a[idx - 1] > a[idx - 2] && a[idx - 1] > a[idx]) {\n                        S.change(idx - 1, 1);\n                    }\n                }\n                if (idx + 2 < n) {\n                    if (a[idx + 1] > a[idx + 2] && a[idx + 1] > a[idx]) {\n                        S.change(idx + 1, 1);\n                    }\n                }\n                if (idx - 1 >= 0 && idx + 1 < n) {\n                    if (a[idx] > a[idx + 1] && a[idx] > a[idx - 1]) {\n                        S.change(idx, 1);\n                    }\n                }\n            }\n        }\n        return res;\n    }\n};",
    "submit_ts": "1718506351",
    "subm_id": "539774412"
}