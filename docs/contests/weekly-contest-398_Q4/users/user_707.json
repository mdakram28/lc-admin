{
    "username": "s1967",
    "submission": "class Solution {\npublic:\nint dp[35][2][80];\nint power(int val,int x){\n    if(x==0)return 1;\n        if(x&1){\n            int p1=power(val,x/2);\n            p1=(p1*1ll*p1);\n            p1=(p1*1ll*val);\n            return p1;\n        }\n        else{\n            int p1=power(val,x/2);\n            p1=(p1*1ll*p1);\n            return p1;\n        }\n}\nint calc(int k,int flag,int jump,int stair,int steps,int val){\n    int ways=0;\n    if(jump>val)return 0;\n    if(dp[jump][flag][steps]!=-1)return dp[jump][flag][steps];\n    if(stair==k){\n        cout<<jump<<\" \"<<flag<<\" \"<<steps<<endl;\n        ways+=1;\n    }\n    if(!flag){\n        int p2=0;\n        int p1=0;\n        int x=power(2,jump);\n        if(x<=1e9)p1=calc(k,0,jump+1,stair+power(2,jump),steps+1,val);\n        if(stair)p2=calc(k,1,jump,stair-1,steps+1,val); \n        ways=ways+p1;\n        ways=ways+p2;\n    }\n    else{\n       int p1=calc(k,0,jump+1,stair+power(2,jump),steps+1,val);\n       ways=ways+p1;\n    }\n    return dp[jump][flag][steps]=ways;\n}\n    int waysToReachStair(int k) {\n        int bitmask=0;\n        int steps=0;\n        memset(dp,-1,sizeof(dp));\n        int val=0;\n        for(int i=0;i<33;i++){\n             if((1<<i)<k)continue;\n             if((1<<i)>k){\n                int diff=(1<<i)-k;\n                if(diff==1)val=i+1;\n                else val=i;\n                break;\n             }\n        }\n        cout<<val<<endl;\n        return calc(k,0,0,1,steps,val);\n    }\n};",
    "submit_ts": 1716089046.0
}