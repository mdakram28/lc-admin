{
    "username": "FantasticoneSahil",
    "submission": "class Solution {\npublic:\nint nme;\npair<int, int> bfs(int start, const vector<vector<int>>& adj) {\n    int n = adj.size();\n    \n    vector<int> dist(n, -1);\n    queue<int> q;\n    \n    q.push(start);\n    dist[start] = 0;\n    int farthestNode = start;\n    \n    while (!q.empty()) {\n        int node = q.front();\n        q.pop();\n        \n        for (int neighbor : adj[node]) {\n            if (dist[neighbor] == -1) {\n                dist[neighbor] = dist[node] + 1;\n                q.push(neighbor);\n                if (dist[neighbor] > dist[farthestNode]) {\n                    farthestNode = neighbor;\n                }\n            }\n        }\n    }\n    \n    return {farthestNode, dist[farthestNode]};\n}\n\npair<int, vector<int>> findDiameterAndCenter(const vector<vector<int>>& adj) {\n    pair<int, int> p1 = bfs(0, adj);\n    \n    pair<int, int> p2 = bfs(p1.first, adj);\n    \n    int diameter = p2.second;\n    \n    int n = adj.size();\n    vector<int> dist(n, -1);\n    vector<int> parent(n, -1);\n    queue<int> q;\n    \n    q.push(p1.first);\n    dist[p1.first] = 0;\n    \n    while (!q.empty()) {\n        int node = q.front();\n        q.pop();\n        \n        for (int neighbor : adj[node]) {\n            if (dist[neighbor] == -1) {\n                dist[neighbor] = dist[node] + 1;\n                parent[neighbor] = node;\n                q.push(neighbor);\n            }\n        }\n    }\n    \n    vector<int> path;\n    for (int v = p2.first; v != -1; v = parent[v]) {\n        path.push_back(v);\n    }\n    \n    vector<int> center;\n    int m = path.size();\n    if (m % 2 == 0) {\n        center.push_back(path[m / 2 - 1]);\n        center.push_back(path[m / 2]);\n    } else {\n        center.push_back(path[m / 2]);\n    }\n    \n    return {diameter, center};\n}\n\n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n        int n=edges1.size();\n      \n        int m=edges2.size();\n        vector<vector<int>> adj1(n+1),adj2(m+1);\n        nme=0;\n        for(auto v: edges1){\n            adj1[v[0]].push_back(v[1]);\n            adj1[v[1]].push_back(v[0]);\n        }\n        pair<int, vector<int> > result1 = findDiameterAndCenter(adj1);\n        int c1;\n        for (int node : result1.second) {\n        c1=node;\n        }\n        nme=n;\n        for(auto v: edges2){\n            // cout<<v[0]+n<<\" \"<<v[1]+n<<endl;\n            adj2[v[0]].push_back(v[1]);\n            adj2[v[1]].push_back(v[0]);\n            // adj1[v[0]+n].push_back(v[1]+n);\n            // adj1[v[1]+n].push_back(v[0]+n);\n        }\n        pair<int, vector<int> > result2 = findDiameterAndCenter(adj2);\n        int c2;\n        cout<<result2.first<<endl;\n        cout<<result1.first<<endl;\n        for (int node : result2.second) {\n        c2=node;\n        }\n        // cout<<c1<<\" \"<<c2 <<endl;\n        // adj1[c1].push_back(c2);\n        // adj1[c2].push_back(c1);\n        // pair<int,vector<int> > results=findDiameterAndCenter(adj1);\n        return max( {result1.first,result2.first,(result1.first+1)/2+(1+result2.first)/2+1});\n        // return 0;\n    }\n};",
    "submit_ts": 1719719548.0
}