{
    "username": "qn68",
    "submission": "from typing import List\nfrom collections import deque\n\nclass Solution:\n    def minimumDiameterAfterMerge(self, edges1: List[List[int]], edges2: List[List[int]]) -> int:\n        def build_adj_list(edges, n):\n            adj = [[] for _ in range(n)]\n            for edge in edges:\n                adj[edge[0]].append(edge[1])\n                adj[edge[1]].append(edge[0])\n            return adj\n\n        def bfs(adj, s):\n            n = len(adj)\n            dist = [-1] * n\n            q = deque([s])\n            dist[s] = 0\n            farthestNode = s\n\n            while q:\n                node = q.popleft()\n                for neighbor in adj[node]:\n                    if dist[neighbor] == -1:\n                        dist[neighbor] = dist[node] + 1\n                        q.append(neighbor)\n                        if dist[neighbor] > dist[farthestNode]:\n                            farthestNode = neighbor\n            return farthestNode, dist[farthestNode]\n\n        n = len(edges1) + 1\n        m = len(edges2) + 1\n\n        adj1 = build_adj_list(edges1, n)\n        adj2 = build_adj_list(edges2, m)\n\n        farthestNode1, _ = bfs(adj1, 0)\n        farthestNode1, diameter1 = bfs(adj1, farthestNode1)\n\n        farthestNode2, _ = bfs(adj2, 0)\n        farthestNode2, diameter2 = bfs(adj2, farthestNode2)\n\n        minDiameter = max(diameter1, diameter2)\n        half1 = (diameter1 + 1) // 2\n        half2 = (diameter2 + 1) // 2\n        minDiameter = max(minDiameter, half1 + half2 + 1)\n\n        return minDiameter\n",
    "submit_ts": 1719719203.0
}