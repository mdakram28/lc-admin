{
    "username": "daoqi",
    "submission": "const int maxn = 1e5 + 10;\nvector<int> v[maxn];\nint dp[maxn];\nint ans[maxn];\n\nvoid dfs(int x, int f) {\n\n    for (int u: v[x]) {\n        if (u == f) continue;\n        dfs(u, x);\n        if (u % 2 != 0) dp[x] = max(dp[x], dp[u] + 1);\n        else dp[x] = max(dp[x], dp[u] + 2);\n    }\n}\n\nvoid dfs2(int x, int f, int deep) {\n    if (x) {\n        ans[x] = max(dp[x], deep);\n    }\n    int id1 = 0, id2 = 0, mx1 = 0, mx2 = 0;\n    id2 = f, mx2 = deep;\n    for (int u: v[x]) {\n        if (u == f) continue;\n        if (dp[u] + (u % 2 == 0 ? 2 : 1) > mx1) {\n            id1 = u;\n            mx1 = dp[u] + (u % 2 == 0 ? 2 : 1);\n        }\n        if (mx1 > mx2) {\n            swap(mx1, mx2);\n            swap(id1, id2);\n        }\n    }\n    int z = 1;\n    if (x % 2 == 0) z = 2;\n    for (int &u: v[x]) {\n        if (u == f) continue;\n        int now = mx2;\n        if (id2 == u) now = mx1;\n        dfs2(u, x, now + z);\n    }\n}\n\nclass Solution {\npublic:\n    vector<int> timeTaken(vector<vector<int>> &edges) {\n        int n = edges.size() + 1;\n        for (int i = 0; i <= n; ++i) {\n            v[i].clear();\n            dp[i] = ans[i] = 0;\n        }\n        for (vector<int> a: edges) {\n            v[a[0]].push_back(a[1]);\n            v[a[1]].push_back(a[0]);\n        }\n        dfs(0, -1);\n        ans[0] = dp[0];\n        dfs2(0, -1, 0);\n        vector<int> res(n);\n        for (int i = 0; i < n; ++i) res[i] = ans[i];\n        return res;\n    }\n};",
    "submit_ts": "1722697972",
    "subm_id": "552268711"
}