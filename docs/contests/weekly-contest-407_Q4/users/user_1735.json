{
    "username": "Aylup",
    "submission": "using ll = long long;\nconstexpr ll MAX_N = 1e5 + 10;\nconstinit ll stree[4 * MAX_N];\n#define TMID (tl + (tr - tl) / 2)\n#define TLEFT (2 * tn)\n#define TRIGHT (2 * tn + 1)\nclass Solution {\npublic:\n    long long minimumOperations(vector<int>& nums, vector<int>& target) {\n        using ll2 = std::array<ll, 2>;\n        ll n = nums.size();\n        for (int i = 0; i < n; ++i) {\n            nums[i] -= target[i];\n        }\n        nums.push_back(1e9);\n        auto idxMin = [&](ll i, ll j) {\n            return std::abs(nums[i]) < std::abs(nums[j]) ? i : j;\n        };\n        auto build = [&]() {\n            auto f = [&](auto &&f, ll tn, ll tl, ll tr) -> void {\n                if (tl == tr) {\n                    stree[tn] = tl;\n                } else {\n                    f(f, TLEFT, tl, TMID);\n                    f(f, TRIGHT, TMID + 1, tr);\n                    stree[tn] = idxMin(stree[TLEFT], stree[TRIGHT]);\n                }\n            };\n            f(f, 1, 0, n - 1);\n        };\n\n        auto rmq = [&](int lq, int rq) {\n            auto f = [&](auto &&f, ll tn, ll tl, ll tr) -> ll {\n                if (rq < tl || tr < lq || rq < lq) {\n                    return n;\n                } else if (lq <= tl && tr <= rq) {\n                    return stree[tn];\n                } else {\n                    return idxMin(f(f, TLEFT, tl, TMID), f(f, TRIGHT, TMID + 1, tr));\n                }\n            };\n            return f(f, 1, 0, n - 1);\n        };\n\n        auto findCost = [&](ll lq, ll rq) {\n            auto f = [&](auto &&f, ll l, ll r, ll sub) -> ll {\n                if (l > r) {\n                    return 0;\n                }\n                ll m = rmq(l, r);\n                ll cost = std::abs(nums[m]) - sub;\n                cost += f(f, l, m - 1, std::abs(nums[m]));\n                cost += f(f, m + 1, r, std::abs(nums[m]));\n                return cost;\n            };\n            return f(f, lq, rq, 0);\n        };\n\n        ll ans = 0;\n        build();\n        for (int i = 0, j = 0; i < n; i = j) {\n            if (nums[i] == 0) {\n                j = i + 1;\n                continue;\n            }\n            bool is_gt = nums[i] > 0;\n            while (j < n && nums[j] != 0 && (is_gt ^ (nums[j] > 0)) == 0) {\n                ++j;\n            }\n            ans += findCost(i, j - 1);\n        }\n        return ans;\n    }\n};",
    "submit_ts": "1721533542",
    "subm_id": "1328011309"
}