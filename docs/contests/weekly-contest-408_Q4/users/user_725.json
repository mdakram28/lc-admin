{
    "username": "a0920732333",
    "submission": "class Solution \n{\npublic:\n    vector<vector<int>> adj;\n    bool canReachCorner(int X, int Y, vector<vector<int>>& circles) \n    {\n        int n = circles.size();\n        adj.resize(n);\n        for(int i = 0; i < n; i++)\n        {\n            int xi = circles[i][0];\n            int yi = circles[i][1];\n            double ri = circles[i][2];\n            for(int j = i + 1; j < n; j++)\n            {\n                int xj = circles[j][0];\n                int yj = circles[j][1];\n                double rj = circles[j][2];\n                double dx = abs(xi - xj);\n                double dy = abs(yi - yj);\n                double dis = sqrt(dx * dx + dy * dy);\n                if(dis <= ri + rj)\n                {\n                    adj[i].push_back(j);\n                    adj[j].push_back(i);\n                }\n            }\n        }\n        //check x == 0 and y == 0\n        vector<bool> visited(n);\n        for(int i = 0; i < n; i++)\n        {\n            int xi = circles[i][0];\n            int yi = circles[i][1];\n            int ri = circles[i][2];\n            if(xi <= ri && !visited[i])//touch x == 0\n            {\n                queue<int> q;\n                q.push(i);\n                visited[i] = true;\n                while(!q.empty())\n                {\n                    int ptr = q.front();\n                    q.pop();\n                    int xp = circles[ptr][0];\n                    int yp = circles[ptr][1];\n                    int rp = circles[ptr][2];\n                    if(yp <= rp)//touch y == 0\n                    {\n                        return false;\n                    }\n                    for(auto& it : adj[ptr])\n                    {\n                        if(!visited[it])\n                        {\n                            q.push(it);\n                            visited[it] = true;\n                        }\n                    }\n                }\n            }\n        }\n        // visited[0] = true;\n        // for(int i = 0; i < n; i++)\n        // {\n        //     cout << visited[i] << ' ';\n        // }\n        // cout << '\\n';\n        //check x == 0 and x == X\n        for(int i = 0; i < n; i++)\n        {\n            visited[i] = false;\n        }\n        // for(int i = 0; i < n; i++)\n        // {\n        //     cout << visited[i] << ' ';\n        // }\n        // cout << '\\n';\n        for(int i = 0; i < n; i++)\n        {\n            int xi = circles[i][0];\n            int yi = circles[i][1];\n            int ri = circles[i][2];\n            if(xi <= ri && !visited[i])//touch x == 0\n            {\n                queue<int> q;\n                q.push(i);\n                visited[i] = true;\n                while(!q.empty())\n                {\n                    int ptr = q.front();\n                    q.pop();\n                    int xp = circles[ptr][0];\n                    int yp = circles[ptr][1];\n                    int rp = circles[ptr][2];\n                    if(xp + rp >= X)//touch x == X\n                    {\n                        return false;\n                    }\n                    for(auto& it : adj[ptr])\n                    {\n                        if(!visited[it])\n                        {\n                            q.push(it);\n                            visited[it] = true;\n                        }\n                    }\n                }\n            }\n        }\n        //check y == 0 and y == Y\n        for(int i = 0; i < n; i++)\n        {\n            visited[i] = false;\n        }\n        for(int i = 0; i < n; i++)\n        {\n            int xi = circles[i][0];\n            int yi = circles[i][1];\n            int ri = circles[i][2];\n            if(yi <= ri && !visited[i])//touch y == 0\n            {\n                queue<int> q;\n                q.push(i);\n                visited[i] = true;\n                while(!q.empty())\n                {\n                    int ptr = q.front();\n                    q.pop();\n                    int xp = circles[ptr][0];\n                    int yp = circles[ptr][1];\n                    int rp = circles[ptr][2];\n                    if(yp + rp >= Y)//touch y == Y\n                    {\n                        return false;\n                    }\n                    for(auto& it : adj[ptr])\n                    {\n                        if(!visited[it])\n                        {\n                            q.push(it);\n                            visited[it] = true;\n                        }\n                    }\n                }\n            }\n        }\n        //check x == X and y == Y\n        for(int i = 0; i < n; i++)\n        {\n            visited[i] = false;\n        }\n        for(int i = 0; i < n; i++)\n        {\n            int xi = circles[i][0];\n            int yi = circles[i][1];\n            int ri = circles[i][2];\n            if(xi + ri >= X && !visited[i])//touch x == X\n            {\n                queue<int> q;\n                q.push(i);\n                visited[i] = true;\n                while(!q.empty())\n                {\n                    int ptr = q.front();\n                    q.pop();\n                    int xp = circles[ptr][0];\n                    int yp = circles[ptr][1];\n                    int rp = circles[ptr][2];\n                    if(yp + rp >= Y)//touch y == Y\n                    {\n                        return false;\n                    }\n                    for(auto& it : adj[ptr])\n                    {\n                        if(!visited[it])\n                        {\n                            q.push(it);\n                            visited[it] = true;\n                        }\n                    }\n                }\n            }\n        }\n        return true;\n    }\n};\n\n//check x == 0 and x == X\n//check x == 0 and y == 0\n//check y == 0 and y == Y\n//check x == X and y == Y",
    "submit_ts": "1722138137",
    "subm_id": "1335783102"
}