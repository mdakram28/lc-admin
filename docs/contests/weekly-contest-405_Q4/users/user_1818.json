{
    "username": "sonu037singh",
    "submission": "class TrieNode {\npublic:\n    unordered_map<char, TrieNode*> children;\n    int wordIndex;\n    \n    TrieNode() : wordIndex(-1) {}\n};\n\nclass Solution {\nprivate:\n    TrieNode* buildTrie(const vector<pair<string, int>>& wordCosts) {\n        TrieNode* root = new TrieNode();\n        for (int i = 0; i < wordCosts.size(); ++i) {\n            const string& word = wordCosts[i].first;\n            TrieNode* node = root;\n            for (char c : word) {\n                if (!node->children.count(c)) {\n                    node->children[c] = new TrieNode();\n                }\n                node = node->children[c];\n            }\n            if (node->wordIndex == -1) {\n                node->wordIndex = i;\n            }\n        }\n        return root;\n    }\n\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int n = target.length();\n        vector<int> dp(n + 1, INT_MAX);\n        dp[0] = 0;\n\n        // Pair words with their costs and sort by cost\n        vector<pair<string, int>> wordCosts;\n        for (int i = 0; i < words.size(); ++i) {\n            wordCosts.emplace_back(words[i], costs[i]);\n        }\n        sort(wordCosts.begin(), wordCosts.end(), \n             [](const auto& a, const auto& b) { return a.second < b.second; });\n\n        TrieNode* root = buildTrie(wordCosts);\n\n        for (int i = 0; i < n; ++i) {\n            if (dp[i] == INT_MAX) continue;\n            \n            TrieNode* node = root;\n            for (int j = i; j < n; ++j) {\n                if (!node->children.count(target[j])) break;\n                node = node->children[target[j]];\n                \n                if (node->wordIndex != -1 && dp[i] != INT_MAX) {\n                    long long newCost = (long long)dp[i] + wordCosts[node->wordIndex].second;\n                    if (newCost <= INT_MAX) {\n                        dp[j + 1] = min(dp[j + 1], (int)newCost);\n                    }\n                }\n            }\n        }\n\n        return dp[n] == INT_MAX ? -1 : dp[n];\n    }\n};\n        \n\n",
    "submit_ts": "1720324003",
    "subm_id": "1312389283"
}