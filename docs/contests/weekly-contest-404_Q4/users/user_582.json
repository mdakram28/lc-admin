{
    "username": "darshak_devani",
    "submission": "class Solution {\npublic:\n        vector<int> findFurthestNode(int start, vector<vector<int>>& adj) {\n            int n = adj.size();\n            vector<int> dist(n, -1);\n            queue<int> q;\n            q.push(start);\n            dist[start] = 0;\n\n            int furthestNode = start;\n            while (!q.empty()) {\n                int node = q.front();\n                q.pop();\n                for (int neighbor : adj[node]) {\n                    if (dist[neighbor] == -1) {\n                        dist[neighbor] = dist[node] + 1;\n                        q.push(neighbor);\n                    if (dist[neighbor] > dist[furthestNode]) {\n                        furthestNode = neighbor;\n                    }\n                }\n            }\n        }\n        return {furthestNode, dist[furthestNode]};\n    }\n\n    int treeDiameter(vector<vector<int>>& edges) {\n        int n = edges.size() + 1;\n        vector<vector<int>> adj(n);\n        for (const auto& edge : edges) {\n            adj[edge[0]].push_back(edge[1]);\n            adj[edge[1]].push_back(edge[0]);\n        }\n        vector<int> result = findFurthestNode(0, adj);\n        result = findFurthestNode(result[0], adj);\n        return result[1];\n    }\n    \n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n        int diameter1 = treeDiameter(edges1);\n        int diameter2 = treeDiameter(edges2);\n\n        int maxiDist1 = (diameter1 + 1) / 2;\n        int maxiDist2 = (diameter2 + 1) / 2;\n\n        return max({diameter1, diameter2, maxiDist1 + maxiDist2 + 1});\n    }\n};",
    "submit_ts": "1719718456",
    "subm_id": "1304417706"
}