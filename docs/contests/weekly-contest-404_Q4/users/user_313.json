{
    "username": "XxFALCONxX",
    "submission": "def addEdge(u, v, adj):\n    adj[u].append(v)\n    adj[v].append(u)\n \n# Function to calculate height of\n# each Node\ndef dfs1(cur, par, adj, height):\n \n    # Iterate in the adjacency\n    # list of the current node\n    for u in adj[cur]:\n        if (u != par):\n  \n            # Dfs for child node\n            dfs1(u, cur, adj, height)\n  \n            # Calculate height of nodes\n            height[cur] = max(height[cur],\n                              height[u])\n  \n    # Increase height\n    height[cur] += 1\n \n# Function to calculate the maximum\n# distance of a node from its ancestor\ndef dfs2(cur, par, adj, height, dist):\n \n    max1 = 0\n    max2 = 0\n  \n    # Iterate in the adjacency\n    # list of the current node\n    for u in adj[cur]:\n        if (u != par):\n  \n            # Find two children\n            # with maximum heights\n            if (height[u] >= max1):\n                max2 = max1\n                max1 = height[u]\n             \n            elif (height[u] > max2):\n                max2 = height[u]\n  \n    sum = 0\n     \n    for u in adj[cur]:\n        if (u != par):\n  \n            # Calculate the maximum distance\n            # with ancestor for every node\n            sum = (max2 if (max1 == height[u]) else max1)\n  \n            if (max1 == height[u]):\n                dist[u] = 1 + max(1 + max2, dist[cur])\n            else:\n                dist[u] = 1 + max(1 + max1, dist[cur])\n  \n            # Calculating for children\n            dfs2(u, cur, adj, height, dist)\n         \n\ndef solve(edges1, edges2):\n    maxN = len(edges1) + 1\n    adj = [[] for i in range(maxN + 1)]\n    height = [0 for i in range(maxN + 1)]\n    dist = [0 for i in range(maxN + 1)]\n\n    for e in edges1:\n        addEdge(e[0] + 1, e[1] + 1, adj)\n\n    dfs1(1, 0, adj, height)\n    dfs2(1, 0, adj, height, dist)\n    d1 = [max(dist[i], height[i]) - 1 for i in range(1, maxN+1)]\n    # print(d1)\n    \n    maxN = len(edges2) + 1\n    adj = [[] for i in range(maxN + 1)]\n    height = [0 for i in range(maxN + 1)]\n    dist = [0 for i in range(maxN + 1)]\n    \n    for e in edges2:\n        addEdge(e[0] + 1, e[1] + 1, adj)\n    dfs1(1, 0, adj, height)\n    dfs2(1, 0, adj, height, dist)\n    d2 = [max(dist[i], height[i]) - 1 for i in range(1, maxN+1)]\n    # print(d2)\n\n    return max(max(d1), max(d2), min(d1) + min(d2) + 1)\n\nclass Solution:\n    def minimumDiameterAfterMerge(self, edges1: List[List[int]], edges2: List[List[int]]) -> int:\n        return solve(edges1, edges2)",
    "submit_ts": "1719718742",
    "subm_id": "1304424950"
}