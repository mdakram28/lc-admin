{
    "username": "abhishek_av",
    "submission": "class Solution {\npublic:\n    int maximumLength(vector<int>& n, int k) {\n        vector<vector<int>> dp(k + 1, vector<int>(2, 0));\n        vector<unordered_set<int>> st(k + 1);       \n        vector<unordered_map<int, int>> c(k + 1);\n\n        for (int i=0;i<n.size();i++) {\n\n            int prev = 0;\n            for (int j = 0; j <= k; j++) {\n                int present = max({prev + 1, (dp[j][0] + 1) * (st[j].count(n[i]) > 0), c[j][n[i]] + 1});\n                prev = dp[j][0];\n                dp[j][1] = present;\n\n                if (present == dp[j][0]) {\n                    st[j].insert(n[i]);\n                }\n\n                if (dp[j][0] < present) {\n                    dp[j][0] = present;\n                    st[j].clear();\n                }\n\n                c[j][n[i]] = present;\n            }\n        }\n\n        return dp[k][0];\n    }\n};",
    "submit_ts": 1717860411.0
}