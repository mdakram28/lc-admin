{
    "username": "thisUnkn0wn",
    "submission": "class Solution:\n    def shortestDistanceAfterQueries(self, n: int, queries: List[List[int]]) -> List[int]:\n        ans = []\n        intervals = []\n        total_saved = 0\n        def check_safety(insert_index, start, end):\n            if not intervals:\n                return True\n            if insert_index - 1 >= 0:\n                prev = intervals[insert_index-1]\n                if prev[1] >= end:\n                    return False\n            if insert_index < len(intervals):\n                nxt = intervals[insert_index]\n                if nxt[0] <= start:\n                    return False\n            return True\n        for q in queries:\n            start = bisect_left(intervals, q[0], key=lambda x: x[0])\n            end = bisect_right(intervals, q[1], key=lambda x: x[1])\n            if start == end:\n                if check_safety(start, q[0], q[1]):\n                    total_saved += q[1]-q[0]-1\n                    insort_left(intervals, (q[0], q[1]))\n            elif start < end:\n                total_saved += q[1]-q[0]-1\n                for i in range(start, end):\n                    intv = intervals[i]\n                    total_saved -= intv[1]-intv[0]-1\n                del intervals[start:end]\n                insort_left(intervals, (q[0], q[1]))\n            ans.append(n-total_saved-1)\n        return ans",
    "submit_ts": "1722743876",
    "subm_id": "1343801670"
}