{
    "username": "example202444",
    "submission": "class Solution {\npublic:\nstruct TrieNode {\n    unordered_map<char, TrieNode*> children;\n    vector<int> indices;  // store the indices of words in the words array\n};\n\nclass Trie {\npublic:\n    TrieNode* root;\n    \n    Trie() {\n        root = new TrieNode();\n    }\n    \n    void insert(const string& word, int index) {\n        TrieNode* node = root;\n        for (char c : word) {\n            if (!node->children[c]) {\n                node->children[c] = new TrieNode();\n            }\n            node = node->children[c];\n        }\n        node->indices.push_back(index);\n    }\n    \n    TrieNode* getRoot() {\n        return root;\n    }\n};\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int n = target.size();\n    Trie trie;\n    \n    // Build the Trie with words\n    for (int i = 0; i < words.size(); ++i) {\n        trie.insert(words[i], i);\n    }\n    \n    vector<int> dp(n + 1, INT_MAX);\n    dp[0] = 0;  // Cost to form an empty string is 0\n    \n    // Traverse the target string\n    for (int i = 0; i < n; ++i) {\n        if (dp[i] == INT_MAX) continue;\n        \n        TrieNode* node = trie.getRoot();\n        for (int j = i; j < n; ++j) {\n            if (!node->children[target[j]]) break;\n            node = node->children[target[j]];\n            for (int index : node->indices) {\n                dp[j + 1] = min(dp[j + 1], dp[i] + costs[index]);\n            }\n        }\n    }\n    \n    return dp[n] == INT_MAX ? -1 : dp[n];\n}\n};",
    "submit_ts": "1720320773",
    "subm_id": "1312304128"
}