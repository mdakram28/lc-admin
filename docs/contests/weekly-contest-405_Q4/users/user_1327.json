{
    "username": "ddOlKBDP4e",
    "submission": "\nclass Solution {\npublic:\n    struct TrieNode \n    {\n        unordered_map<char, TrieNode*> children;\n        unordered_map<int, int> wordCosts; \n    };\n\n    class Trie\n    {\n    public:\n        \n        TrieNode* root;\n\n        Trie()\n        {\n            root = new TrieNode();\n        }\n\n        void insert(string& word, int cost) \n        {\n            TrieNode* node = root;\n            for (char c : word) \n            {\n                if (node->children.find(c) == node->children.end()) \n                {\n                    node->children[c] = new TrieNode();\n                }\n                node = node->children[c];\n            }\n            if (node->wordCosts.find(word.size()) == node->wordCosts.end() || node->wordCosts[word.size()] > cost) {\n                node->wordCosts[word.size()] = cost;\n            }\n        }\n    };\n\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        Trie trie;\n        for (int i = 0; i < words.size(); ++i) \n        {\n            trie.insert(words[i], costs[i]);\n        }\n        vector<int> memo(target.size(), -1);\n        int result = dp(target, 0, trie, memo);\n        return result == INT_MAX ? -1 : result;\n    }\n\n\n    int dp(string& target, int start, Trie& trie, vector<int>& memo)\n    {\n        if (start == target.size()) \n            return 0;\n        \n        if (memo[start] != -1)\n            return memo[start];\n\n        TrieNode* node = trie.root;\n        int minCost = INT_MAX;\n\n        for (int i = start; i < target.size(); ++i) \n        {\n            if (node->children.find(target[i]) == node->children.end())\n                break;\n            \n            node = node->children[target[i]];\n\n            for (const auto& [length, cost] : node->wordCosts) \n            {\n                if (start + length <= target.size() && length == i - start + 1) \n                {\n                    int nextCost = dp(target, start + length, trie, memo);\n                    \n                    if (nextCost != INT_MAX) \n                        \n                    {\n                        minCost = min(minCost, cost + nextCost);\n                    }\n                    \n                }\n            }\n        }\n\n        memo[start] = minCost;\n        return minCost;\n    }\n};\n",
    "submit_ts": "1720323343",
    "subm_id": "1312373258"
}