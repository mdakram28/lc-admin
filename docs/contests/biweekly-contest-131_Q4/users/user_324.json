{
    "username": "intelligent-teslas5c",
    "submission": "template<typename T = int>\nclass DSU {\n    //typedef long long SizeType;\n    // using SizeType = long long;\n    //\u8fd9\u91cc\u53ef\u6839\u636e\u9700\u8981\u9009\u62e9\u7c7b\u578b\n    std::vector<int> rootArr;\n    std::vector<T> sz;\npublic:\n    explicit DSU(int n) {   //\u4e0d\u9700\u8981\u8003\u8651size\u7684\u6784\u9020\u51fd\u6570\n        rootArr.resize(n);\n        std::iota(rootArr.begin(), rootArr.end(), 0);\n    }\n    explicit DSU(int n, bool needSize) {\n        rootArr.resize(n);\n        sz.resize(n, 1);\n        std::iota(rootArr.begin(), rootArr.end(), 0);\n    }\n    explicit DSU(int n, std::vector<T>& a) {\n        rootArr.resize(n);\n        sz = a;\n        std::iota(rootArr.begin(), rootArr.end(), 0);\n    }\n    int findRoot(int a) {       // \u8def\u5f84\u538b\u7f29\n        return rootArr[a] == a ? a : rootArr[a] = findRoot(rootArr[a]);\n    }\n    bool isJoint(int a, int b) {\n        return findRoot(a) == findRoot(b);\n    }\n    void link2(int a, int b) { //\u6309size\u5408\u5e76\uff0c\u5927size\u541e\u5e76\u5c0f\u7684\uff0c\u89c6\u9700\u8981\u800c\u7528\uff0c\u9700\u8981\u521d\u59cb\u5316sz\uff0c\u4e0d\u521d\u59cb\u5316sz\u7684\u4e0d\u80fd\u7528\n        a = findRoot(a), b = findRoot(b);\n        if (a == b) {\n            return;\n        }\n        if (sz[a] < sz[b]) {\n            std::swap(a, b);\n        }\n        sz[a] += sz[b];\n        rootArr[b] = a;\n        return;\n    }\n    void fLink(int a, int b) { //\u5feb\u901f\u5408\u5e76\uff0c\u4e0d\u9700\u8981\u8003\u8651size\u6216rank\u7b49\u53d8\u5316\n        rootArr[findRoot(b)] = findRoot(a);\n        return;\n    }\n    T setSize(int a) {   //\u4e0d\u521d\u59cb\u5316sz\u7684\u4e0d\u80fd\u7528\n        return sz[findRoot(a)];\n    }\n    int operator[](const int a) {\n        return findRoot(a);\n    }\n};  //\u8def\u5f84\u538b\u7f29\u7248\u5e76\u67e5\u96c6\u7c7b\u6a21\u677f\n\nusing VI = vector<int>;\nclass Solution {\n    VI tr;\n    vector<bool> mk;\n    void build(int p, int l, int r, VI &a) {\n        if (l >= r) {\n            tr[p] = a[l];\n            return;\n        }\n        int m = (l + r) / 2;\n        build(p * 2 + 1, l, m, a);\n        build(p * 2 + 2, m + 1, r, a);\n        tr[p] = max(tr[p * 2 + 1], tr[p * 2 + 2]);\n    }\n    void pushdown(int p) {\n        if (mk[p]) {\n            int p1 = p * 2 + 1, p2 = p1 + 1;\n            tr[p1] = tr[p2] = tr[p];\n            mk[p1] = mk[p2] = true;\n            mk[p] = false;\n        }\n    }\n    \n    void update(int p, int l, int r, int L, int R, int x) {\n        if (r < L || l > R) {\n            return ;\n        }\n        if (L <= l && r <= R) {\n            tr[p] = x;\n            mk[p] = true;\n            return;\n        }\n        pushdown(p);\n        int m = (l + r) / 2;\n        update(p * 2 + 1, l, m, L, R, x);\n        update(p * 2 + 2, m + 1, r, L, R, x);\n        tr[p] = max(tr[p * 2 + 1], tr[p * 2 + 2]);\n    }\n    int query(int p, int l, int r, int L, int R) {\n        if (r < L || l > R || l > r) {\n            return 0;\n        }\n        if (L <= l && r <= R) {\n            return tr[p];\n        }\n        pushdown(p);\n        int m = (l + r) / 2;\n        int res = query(p * 2 + 1, l, m, L, R);\n        res = max(res, query(p * 2 + 2, m + 1, r, L, R));\n        return res;\n    }\npublic:\n    vector<bool> getResults(vector<vector<int>>& queries) {\n        vector<bool> res;\n        int l = queries.size();\n        auto & qe = queries;\n        int c2 = 0;\n        set<int> s;\n        int la = min(50004, l * 3 + 3) * 2;\n        vector<int> a(la, 1);\n        // int la = a.size();\n        for (auto & q : queries) {\n            if (q[0] == 1) {\n                s.insert(q[1]);\n                a[q[1]] = 0;\n            } else {\n                c2++;\n            }\n        }\n        res.resize(c2);\n        DSU d(la, true);\n        for (int i = 1; i < la; i++) {\n            if (a[i] == 0) {\n                continue;\n            } else {\n                // a[i] = a[i - 1] + 1;\n                d.link2(i - 1, i);\n            }\n        }\n        for (int i = 0; i < la; i++) {\n            a[i] = d.setSize(i);\n        }\n        // DSU d(la, true);\n        // for (int i = la - 2; i >= 0; i--)  {\n        //     a[i] = max(a[i], a[i + 1]);\n        // }\n        // for (int i : a) {cout << i << ' ';} cout << '\\n';\n        tr.resize(4 * la);\n        build(0, 0, la - 1, a);\n        mk.resize(4 * la);\n        s.insert(0);\n        s.insert(la - 1);\n        int lp, rp, dis;\n        for (int i = l - 1, x, sz; i >= 0; i--) {\n            auto &q = qe[i];\n            if (q[0] == 1) {\n                x = q[1];\n                d.link2(x - 1, x);\n                s.erase(x);\n                lp = *prev(s.lower_bound(x));\n                rp = *s.upper_bound(x);\n                dis = rp - lp;\n                update(0, 0, la - 1, lp, rp, dis);\n            } else {\n                x = q[1];\n                if (x < q[2]) {\n                    res[--c2] = false;\n                    continue;\n                }\n                lp = *prev(s.upper_bound(x - 1));\n                if (x - lp >= q[2]) {\n                    res[--c2] = true;\n                    cout << 'a';\n                    continue;\n                }\n                if (lp == 0) {\n                    res[--c2] = false;\n                    continue;\n                }\n                cout << 'b'; // cout << lp << ' ' << query(0, 0, la - 1, 0, lp - 1) << ' ';\n                res[--c2] = query(0, 0, la - 1, 0, lp - 1) >= q[2];\n            }\n        }\n        cout << '\\n';\n        return res;\n    }\n};",
    "submit_ts": "1716651816",
    "subm_id": "534776535"
}