{
    "username": "vineetsingh27351",
    "submission": "class Solution {\n    public long minimumCost(int m, int n, int[] horizontalCut, int[] verticalCut) {\n        Integer[] horizontal = Arrays.stream(horizontalCut).boxed().toArray(Integer[]::new);\n        Integer[] vertical = Arrays.stream(verticalCut).boxed().toArray(Integer[]::new);\n        \n        // Sort both arrays in descending order\n        Arrays.sort(horizontal, Collections.reverseOrder());\n        Arrays.sort(vertical, Collections.reverseOrder());\n        \n        // Initialize counters for segments and costs\n        int hIndex = 0, vIndex = 0;\n        long horizontalSegments = 1, verticalSegments = 1;\n        long totalCost = 0;\n        \n        // Use a greedy approach to cut the cake\n        while (hIndex < horizontal.length && vIndex < vertical.length) {\n            if (horizontal[hIndex] >= vertical[vIndex]) {\n                totalCost += horizontal[hIndex] * verticalSegments;\n                horizontalSegments++;\n                hIndex++;\n            } else {\n                totalCost += vertical[vIndex] * horizontalSegments;\n                verticalSegments++;\n                vIndex++;\n            }\n        }\n        \n        // Process any remaining horizontal cuts\n        while (hIndex < horizontal.length) {\n            totalCost += horizontal[hIndex] * verticalSegments;\n            hIndex++;\n        }\n        \n        // Process any remaining vertical cuts\n        while (vIndex < vertical.length) {\n            totalCost += vertical[vIndex] * horizontalSegments;\n            vIndex++;\n        }\n        \n        return totalCost;\n    }\n}",
    "submit_ts": "1720925851",
    "subm_id": "1320268226"
}