{
    "username": "SnehaGaikwad",
    "submission": "class Solution {\n    public long minimumCost(int m, int n, int[] horizontalCut, int[] verticalCut) {\n          // Sort the cut costs in descending order\n        Arrays.sort(horizontalCut);\n        Arrays.sort(verticalCut);\n        \n        int h = horizontalCut.length;\n        int v = verticalCut.length;\n        \n        int hIndex = h - 1;\n        int vIndex = v - 1;\n        \n        // Initially we have 1 vertical and 1 horizontal piece\n        int hPieces = 1;\n        int vPieces = 1;\n        \n        long totalCost = 0;\n        \n        // Greedily pick the largest cost cut to minimize the overall cost\n        while (hIndex >= 0 && vIndex >= 0) {\n            if (horizontalCut[hIndex] > verticalCut[vIndex]) {\n                totalCost += (long) horizontalCut[hIndex] * vPieces;\n                hPieces++;\n                hIndex--;\n            } else {\n                totalCost += (long) verticalCut[vIndex] * hPieces;\n                vPieces++;\n                vIndex--;\n            }\n        }\n        \n        // If there are remaining horizontal cuts\n        while (hIndex >= 0) {\n            totalCost += (long) horizontalCut[hIndex] * vPieces;\n            hIndex--;\n        }\n        \n        // If there are remaining vertical cuts\n        while (vIndex >= 0) {\n            totalCost += (long) verticalCut[vIndex] * hPieces;\n            vIndex--;\n        }\n        \n        return totalCost;\n    }\n}",
    "submit_ts": "1720925895",
    "subm_id": "1320269648"
}