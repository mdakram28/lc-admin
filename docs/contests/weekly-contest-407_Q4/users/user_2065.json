{
    "username": "richardboliu439",
    "submission": "class Solution:\n    def minimumOperations(self, nums: List[int], target: List[int]) -> int:\n        def find(s):\n            p = s\n            while p < len(diff) and diff[p] == 0:\n                p += 1\n            if p == len(diff):\n                return None\n            q = p\n            value = 1\n            pos = [1, q+1, abs(diff[p])]\n            # if diff[p] > 0:\n            #     k = -1\n            # else:\n            #     k = 1\n            tmp = diff[p]\n            # diff[p] += k\n            cur_min = abs(diff[p])\n            while value > 0:\n                q += 1\n                if q == len(diff):\n                    return p, pos[1], pos[2]\n                if diff[q] * tmp <= 0:\n                    if value > 1:\n                        value -= 1\n                    else:\n                        return p, pos[1], pos[2]\n                else:\n                    value += 1\n                    cur_min = min(cur_min, abs(diff[q]))\n                    if value > pos[0]:\n                        # for j in range(pos[1], q+1):\n                        #     diff[j] += k\n                        pos = [value, q+1, cur_min]\n\n            return p, pos[1], pos[2]\n\n\n        diff = [v1-v2 for v1,v2 in zip(nums,target)]\n        output = 0\n        ss = 0\n        while True:\n            res = find(ss)\n            if res is None:\n                return output\n            p, q, d = res\n            ss = p\n            \n            if diff[p] > 0:\n                k = -1\n            else:\n                k = 1\n            for j in range(p, q):\n                diff[j] += d*k\n            output += d\n        return output\n        \n        ",
    "submit_ts": "1721532744",
    "subm_id": "1327993014"
}