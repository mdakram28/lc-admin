{
    "username": "beta-blue",
    "submission": "class Trie {\npublic:\n    unordered_map<char, Trie*> children;\n    int cost;\n\npublic:\n    Trie() {\n        cost = 1e5;\n    }\n\n    ~Trie() {\n        for (auto& [_, child]: children)\n        {\n            delete child;\n            child = nullptr;\n        }\n    }\n\n    void add(string& s, int cost) {\n        auto cur = this;\n        for (auto& c: s) {\n            auto child = cur->children[c];\n            if (child == nullptr) {\n                child = cur->children[c] = new Trie();\n            }\n\n            cur = child;\n        }\n\n        cur->cost = min(cost, cur->cost);\n    }\n};\n\nclass Solution {\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        Trie* trie = new Trie();\n        int n = words.size();\n\n        for (int i=0; i<n; ++i) {\n            trie->add(words[i], costs[i]);\n        }\n\n        vector<int> dp(target.length(), -1);\n        int res = solve(target, trie, 0, dp);\n        delete trie;\n\n        return res == INT_MAX ? -1 : res;\n    }\n\n    int solve(string& target, Trie* trie, int p, vector<int>& dp) {\n        if (p >= target.length())\n            return 0;\n\n        if (dp[p] != -1)\n            return dp[p];\n\n        int val = INT_MAX;\n        auto cur = trie;\n\n        for (int i=p; i<target.length(); ++i) {\n            auto child = cur->children[target[i]];\n            if (child == nullptr)\n                break;\n            \n            cur = child;\n            if (cur->cost != 1e5) {\n                int c = solve(target, trie, i+1, dp);\n                if (c != INT_MAX)\n                    val = min(val, c + cur->cost);            \n            }\n        }\n\n        return dp[p] = val;\n    }\n};",
    "submit_ts": "1720322389",
    "subm_id": "1312348618"
}