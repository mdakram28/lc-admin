{
    "username": "nirodha",
    "submission": "class Solution:\n    def minimumDiameterAfterMerge(self, edges1: List[List[int]], edges2: List[List[int]]) -> int:\n        def minimumDiameter(edges):\n            n = len(edges) + 1\n            indegree = [0] * n\n            visited = [False] * n\n            edgelist = [set() for i in range(n)]\n            for a,b in edges:\n                edgelist[b].add(a)\n                edgelist[a].add(b)\n            for i in range(n):\n                for nex in edgelist[i]:\n                    indegree[nex] += 1\n            q = deque()\n            for i in range(n):\n                if indegree[i] == 1:\n                    q.append(i)\n            res = 0\n            flag = True\n            while q:\n                size = len(q)\n                if size == 1:\n                    flag = False\n                    break\n                for _ in range(size):\n                    temp = q.popleft()\n                    for nex in edgelist[temp]:\n                        indegree[nex] -= 1\n                        edgelist[nex].remove(temp)\n                        if indegree[nex] == 1:\n                            q.append(nex)\n                res += 1\n            total = (res * 2 - 1) if flag else (res * 2)\n            return res, total\n        r1, d1 = minimumDiameter(edges1)\n        r2, d2 = minimumDiameter(edges2)        \n        return max(r1 + r2 + 1, d1, d2)",
    "submit_ts": 1719718576.0
}