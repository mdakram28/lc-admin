{
    "username": "thisUnkn0wn",
    "submission": "class Solution:\n    def canReachCorner(self, X: int, Y: int, circles: List[List[int]]) -> bool:\n        adj_list = [[] for i in circles]\n        def intersects(x1, y1, r1, x2, y2, r2):\n            if x1 == x2 and y1 == y2 and r1 == r2:\n                return False\n            a = x1-x2\n            b = y1-y2\n            dst = sqrt((a*a)+(b*b))\n            if isclose(r1, dst):\n                if 2*r2 > r1:\n                    return True\n            if isclose(r2, dst):\n                if 2*r1 > r2:\n                    return True\n            if r1+r2 >= dst:\n                return True\n            return False\n        for i in range(len(circles)):\n            for j in range(i+1, len(circles)):\n                c1 = circles[i]\n                c2 = circles[j]\n                if intersects(c1[0], c1[1], c1[2], c2[0], c2[1], c2[2]):\n                    adj_list[i].append(j)\n                    adj_list[j].append(i)\n        visited = [False for i in range(len(circles))]\n        def dst(x1, y1, x2, y2):\n            a = (x1-x2)\n            b = (y1-y2)\n            return sqrt((a*a)+(b*b))\n        def covering(x, y, r):\n            if dst(x, y, 0, 0) <= r and dst(x, y, X, 0) <= r and dst(x, y, 0, Y) <= r and dst(x, y, X, Y) <= r:\n                return True\n            if dst(x, y, 0, 0) <= r and dst(x, y, X, 0) <= r:\n                return True\n            if dst(x, y, 0, 0) <= r and dst(x, y, 0, Y) <= r:\n                return True\n            if dst(x, y, X, 0) <= r and dst(x, y, X, Y) <= r:\n                return True\n            if dst(x, y, 0, Y) <= r and dst(x, y, X, Y) <= r:\n                return True\n            return False        \n        for i in range(len(circles)):\n            if not visited[i]:\n                q = [i]\n                min_x = X\n                max_x = 0\n                min_y = Y\n                max_y = 0\n                while q:\n                    nxt = q.pop()\n                    if visited[nxt]:\n                        continue\n                    visited[nxt] = True\n                    c = circles[nxt]\n                    x = c[0]\n                    y = c[1]\n                    r = c[2]\n                    if covering(x, y, r):\n                        return False\n                    min_x = min(min_x, x - r)\n                    max_x = max(max_x, x + r)\n                    min_y = min(min_y, y - r)\n                    max_y = max(max_y, y + r)\n                    for i in adj_list[nxt]:\n                        if not visited[i]:\n                            q.append(i)\n                if min_y <= 0 and max_y >= Y:\n                    return False\n                if min_x <= 0 and max_x >= X:\n                    return False\n                if min_x <= 0 and min_y <= 0:\n                    return False\n                if max_x >= X and max_y >= Y:\n                    return False\n        return True\n                ",
    "submit_ts": "1722138768",
    "subm_id": "1335799143"
}