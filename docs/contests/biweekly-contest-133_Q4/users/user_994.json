{
    "username": "mikeac",
    "submission": "class Solution:\n    def numberOfPermutations(self, n: int, requirements: List[List[int]]) -> int:\n        d = {a:b for a, b in requirements}\n        if 0 in d and d[0] != 0:\n            return 0\n        MOD = 10 ** 9 + 7\n        m = n * (n - 1) // 2\n        dp = [0] * (m + 1)\n        dp[0] = 1\n        for i in range(1, n):\n            ndp = [0] * (m + 1)\n            if i in d:\n                j = d[i]\n                for k in range(max(0, j - i), j + 1):\n                    ndp[j] = (ndp[j] + dp[k]) % MOD\n            else:\n                res = 0\n                for j in range(i * (n + 1) // 2):\n                    res = (res + dp[j]) % MOD\n                    if j > i:\n                        res = (res - dp[j - i - 1]) % MOD\n                    ndp[j] = res\n            dp = ndp\n        return dp[d[n - 1]]\n        ",
    "submit_ts": 1719071473.0
}