{
    "username": "sobols",
    "submission": "class Solution {\npublic:\n    long long Sqr(int x) {\n        return (long long)x * x;\n    }\n    \n    bool TouchV(int x, int y1, int y2, int cx, int cy, int r) {\n        if (Sqr(cx - x) + Sqr(cy - y1) <= Sqr(r)) {\n            return true;\n        }\n        if (Sqr(cx - x) + Sqr(cy - y2) <= Sqr(r)) {\n            return true;\n        }\n        return Sqr(cx - x) <= Sqr(r) && (y1 <= cy && cy <= y2);\n    }\n\n    bool TouchH(int y, int x1, int x2, int cx, int cy, int r) {\n        if (Sqr(cy - y) + Sqr(cx - x1) <= Sqr(r)) {\n            return true;\n        }\n        if (Sqr(cy - y) + Sqr(cx - x2) <= Sqr(r)) {\n            return true;\n        }\n        return Sqr(cy - y) <= Sqr(r) && (x1 <= cx && cx <= x2);\n    }\n\n    int Mark(int x, int y, int cx, int cy, int r) {\n        int res = 0;\n        if (TouchV(0, 0, y, cx, cy, r) || TouchH(y, 0, x, cx, cy, r)) {\n            res |= 1 << 0;\n        }\n        if (TouchH(0, 0, x, cx, cy, r) || TouchV(x, 0, y, cx, cy, r)) {\n            res |= 1 << 1;\n        }\n        return res;\n    }\n    \n    bool Go(const vector<int>& c1, const vector<int>& c2) {\n        const int cx1 = c1[0];\n        const int cy1 = c1[1];\n        const int r1  = c1[2];\n        const int cx2 = c2[0];\n        const int cy2 = c2[1];\n        const int r2  = c2[2];\n        return Sqr(cx1 - cx2) + Sqr(cy1 - cy2) <= Sqr(r1 + r2);\n    }\n    \n    bool canReachCorner(int X, int Y, vector<vector<int>>& circles) {\n        const int n = circles.size();\n        vector<int> mask(n);\n        for (int i = 0; i < n; ++i) {\n            const int cx = circles[i][0];\n            const int cy = circles[i][1];\n            const int r  = circles[i][2];\n            mask[i] = Mark(X, Y, cx, cy, r);\n        }\n        \n        vector<bool> use(n);\n        queue<int> q;\n        for (int i = 0; i < n; ++i) {\n            if (use[i]) {\n                continue;\n            }\n            use[i] = true;\n            q.push(i);\n            int all = 0;\n            while (!q.empty()) {\n                int v = q.front(); q.pop();\n                all |= mask[v];\n                for (int j = 0; j < n; ++j) {\n                    if (!use[j] && Go(circles[v], circles[j])) {\n                        q.push(j);\n                        use[j] = true;\n                    }\n                }\n            }\n            if (all == 0b11) {\n                return false;\n            }\n        }\n        return true;\n    }\n};",
    "submit_ts": "1722138866",
    "subm_id": "1335801702"
}