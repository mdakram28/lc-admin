{
    "username": "lonely_nights_with_bruce",
    "submission": "const long long MOD = 1e9 + 7;\n\nclass Solution {\npublic:\n    int numberOfPermutations(int n, vector<vector<int>>& requirements) {\n        map<int,int> endInd;\n        \n        for(auto&i:requirements) endInd[i[0]+1] = i[1];\n        \n        vector<vector<long long>> dp(n+1, vector<long long>(410, 0));\n        \n        \n        dp[0][0] = 1;\n        \n        int len = 1;\n        \n        while(len<=n){\n            int curr_inv = 0;\n            \n            auto sim_ = [&](){\n               int new_pos = 0;\n                while(new_pos<len){\n                    int prev_inv = curr_inv - new_pos;\n                    if(prev_inv>=0) dp[len][curr_inv] = (dp[len][curr_inv] + dp[len-1][prev_inv])%MOD;\n                    \n                    new_pos++;\n                }\n                curr_inv++;  \n            };\n            \n            while(curr_inv<=400){\n               sim_();\n            }\n            \n            if(endInd.count(len)>0) {\n                int inv_need = endInd[len];\n                int curr_inv = 0;\n                \n                while(curr_inv<=400){\n                    if(curr_inv != inv_need) dp[len][curr_inv] = 0;\n                    \n                    curr_inv++;\n                }\n            }\n            \n            len++;\n        }\n        \n        long long inversions = 0, curr = 0;\n        \n        auto mod_add = [&](long long a, long long b){\n          return (a + b)%MOD;  \n        };\n        \n        while(curr<=400){\n            inversions = mod_add(inversions, dp[n][curr]); \n            curr++;\n        }\n        \n        return inversions;\n        \n        \n        \n    }\n};",
    "submit_ts": 1719071100.0
}