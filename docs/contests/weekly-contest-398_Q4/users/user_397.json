{
    "username": "wisdompeak",
    "submission": "using LL = long long;\nclass Solution {\n    map<LL,LL>Map;\npublic:\n    int waysToReachStair(int kk) \n    {\n        LL k = kk;\n        int j = 0;\n        Map[1] = 1;\n        Map[0] = 1;\n        \n        int ret = 0;\n        while (Map.size()!=0)\n        {\n            if (Map.find(k)!=Map.end())\n                ret += Map[k];\n            \n            map<LL,LL>temp;\n            LL upper = min(k+10, k*2+10);\n            for (auto [k,v]: Map)\n            {\n                if (k+(1LL<<j) < upper)\n                    temp[k+(1LL<<j)]+=v;\n                if (k+(1LL<<j)-1 >=0 && k+(1LL<<j)-1 < upper)\n                    temp[k+(1LL<<j)-1]+=v;\n            }\n            Map = temp;\n            // for (auto [k,v]:Map) cout<<k<<\":\"<<v<<\" \"; cout<<endl;\n            j++;\n        }\n        return ret;        \n    }    \n};",
    "submit_ts": "1716088098",
    "subm_id": "1261803907"
}