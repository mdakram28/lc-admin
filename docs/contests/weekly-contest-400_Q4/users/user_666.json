{
    "username": "BattlerRein",
    "submission": " class SegmentTree {\n\n    private static int NO_OP = 2147483647;\n\n    StNode root;\n    public SegmentTree(int[] nums) {\n        root = buildTree(nums, 0, nums.length - 1);\n    }\n\n    private StNode buildTree(int[] nums, int l, int r) {\n\n        int val;\n        StNode left = null;\n        StNode right = null;\n\n        if (l == r) {\n            val = nums[l];\n        } else if (l > r) {\n            val = NO_OP;\n        } else {\n            int mid = (l + r) / 2;\n            left = buildTree(nums, l, mid);\n            right = buildTree(nums, mid + 1, r);\n            val = op(left.val, right.val);\n        }\n\n        StNode node = new StNode(l, r, val, left, right);\n\n        return node;\n    }\n\n    private int op(int a, int b) {\n        return a & b;\n    }\n\n\n}\n\n class StNode {\n    private static int NO_OP = 2147483647;\n\n    int start;\n    int end;\n    int val;\n    StNode left;\n    StNode right;\n\n    public StNode(int s, int e, int v, StNode l, StNode r) {\n        start = s;\n        end = e;\n        val = v;\n        left = l;\n        right = r;\n    }\n\n    public int query(int l, int r) {\n        if (l > end || r < start) {\n            return NO_OP;\n        }\n        if (l > r) {\n            return NO_OP;\n        }\n        if (l <= start && r >= end) {\n            return val;\n        }\n\n        return op(left.query(l, r), right.query(l, r));\n    }\n\n    private int op(int a, int b) {\n        return a & b;\n    }\n}\n\n\nclass Solution {\n    public int minimumDifference(int[] nums, int k) {\n        SegmentTree tree = new SegmentTree(nums);\n\n        int result = 2147483647;\n\n        int i = 0;\n        int j = 0;\n        while (j < nums.length) {\n            int currVal = tree.root.query(i, j);\n            result = Math.min(result, Math.abs(k - currVal));\n            if (currVal <= k && i < j) {\n                i++;\n            } else {\n                j++;\n            }\n        }\n\n        i = 0;\n        j = 0;\n        while (j < nums.length) {\n            int currVal = tree.root.query(i, j);\n            result = Math.min(result, Math.abs(k - currVal));\n            if (currVal >= k || i == j) {\n                j++;\n            } else {\n                i++;\n            }\n        }\n\n        return result;\n    }\n}",
    "submit_ts": 1717299815.0
}