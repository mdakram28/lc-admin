{
    "username": "pmnguyn",
    "submission": "class Solution {\n    public long minimumCost(int m, int n, int[] horizontalCut, int[] verticalCut) {\n        Integer[] hCuts = Arrays.stream(horizontalCut).boxed().toArray(Integer[]::new);\n        Integer[] vCuts = Arrays.stream(verticalCut).boxed().toArray(Integer[]::new);\n        \n        Arrays.sort(hCuts, Collections.reverseOrder());\n        Arrays.sort(vCuts, Collections.reverseOrder());\n        \n        int hIndex = 0;\n        int vIndex = 0;\n        int horizontalPieces = 1;\n        int verticalPieces = 1;\n        long totalCost = 0;\n        \n        while (hIndex < hCuts.length || vIndex < vCuts.length) {\n            if (vIndex >= vCuts.length || (hIndex < hCuts.length && hCuts[hIndex] >= vCuts[vIndex])) {\n                totalCost += (long) hCuts[hIndex] * verticalPieces;\n                horizontalPieces++;\n                hIndex++;\n            } else {\n                totalCost += (long) vCuts[vIndex] * horizontalPieces;\n                verticalPieces++;\n                vIndex++;\n            }\n        }\n        \n        return totalCost;\n    }\n}",
    "submit_ts": "1720924735",
    "subm_id": "1320228847"
}