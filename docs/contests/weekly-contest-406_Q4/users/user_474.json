{
    "username": "nktps40",
    "submission": "class Solution {\npublic:\n    long long minimumCost(int m, int n, vector<int>& horizontalCut,\n                          vector<int>& verticalCut) {\n        int horCuts = 0, verCuts = 0;\n        long long cost = 0;\n\n        sort(horizontalCut.begin(), horizontalCut.end());\n        sort(verticalCut.begin(), verticalCut.end());\n\n        int i = horizontalCut.size() - 1, j = verticalCut.size() - 1;\n        while (i >= 0 && j >= 0) {\n            if (verticalCut[j] >= horizontalCut[i]) {\n                verCuts++;\n                cost += verticalCut[j] * (horCuts + 1);\n                j--;\n            } else {\n                horCuts++;\n                cost += horizontalCut[i] * (verCuts + 1);\n                i--;\n            }\n        }\n\n        while (j >= 0) {\n            verCuts++;\n            cost += verticalCut[j] * (horCuts + 1);\n            j--;\n        }\n\n        while (i >= 0) {\n            horCuts++;\n            cost += horizontalCut[i] * (verCuts + 1);\n            i--;\n        }\n\n        return cost;\n    }\n};",
    "submit_ts": "1720925557",
    "subm_id": "1320258682"
}