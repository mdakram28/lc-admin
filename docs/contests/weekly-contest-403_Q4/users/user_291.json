{
    "username": "weiyinfu",
    "submission": "from typing import List\n\n\ndef solve(grid):\n    rows = len(grid)\n    cols = len(grid[0])\n    fx, fy = 1e9, 1e9\n    tx, ty = -1, -1\n    f = [[0] * cols for _ in range(rows)]\n\n    def get(x, y):\n        if x < 0 or y < 0:\n            return 0\n        return f[x][y]\n\n    for i in range(rows):\n        for j in range(cols):\n            fx = min(fx, i)\n            tx = max(tx, i)\n            fy = min(fy, j)\n            ty = max(ty, j)\n            f[i][j] = get(i - 1, j) + get(i, j - 1) - get(i - 1, j - 1) + grid[i][j]\n\n    def query(fx, fy, tx, ty):\n        fx -= 1\n        fy -= 1\n        return get(tx, ty) + get(fx, fy) - get(tx, fy) - get(fx, ty)\n\n    def shrink(fx, fy, tx, ty):\n        # \u7f29\u5c0f\u8303\u56f4\uff0cfx++\u3001fy++\u3001tx--\u3001ty--\n        if query(fx, fy, tx, ty) == 0:\n            return 0\n        while 1:\n            if query(fx, fy, fx, ty) == 0:\n                fx += 1\n            else:\n                break\n        while 1:\n            if query(fx, fy, tx, fy) == 0:\n                fy += 1\n            else:\n                break\n        while 1:\n            if query(tx, fy, tx, ty) == 0:\n                tx -= 1\n            else:\n                break\n        while 1:\n            if query(fx, ty, tx, ty) == 0:\n                ty -= 1\n            else:\n                break\n        return (ty - fy + 1) * (tx - fx + 1)\n\n    # \u4e09\u884c\n    ans = 1e9\n    for i in range(fx, tx + 1):\n        one = shrink(fx, fy, i, ty)\n        for j in range(i + 1, tx + 1):\n            two = shrink(i + 1, fy, j, ty)\n            three = shrink(j + 1, fy, tx, ty)\n            now = one + two + three\n            ans = min(ans, now)\n    # 1+2\u6a21\u5f0f\n    for i in range(fx, tx + 1):\n        one = shrink(fx, fy, i, ty)\n        for j in range(fy, ty + 1):\n            two = shrink(i + 1, fy, tx, j)\n            three = shrink(i + 1, j + 1, tx, ty)\n            now = one + two + three\n            ans = min(ans, now)\n    return ans\n\n\ndef rotate(a):\n    rows = len(a)\n    cols = len(a[0])\n    b = [[0] * rows for _ in range(cols)]\n    for i in range(rows):\n        for j in range(cols):\n            b[j][rows - i - 1] = a[i][j]\n    return b\n\n\nclass Solution:\n    def minimumSum(self, grid: List[List[int]]) -> int:\n        ans = 1e9\n        for i in range(4):\n            now = solve(grid)\n            ans = min(ans, now)\n            grid = rotate(grid)\n        return ans\n",
    "submit_ts": "1719113869",
    "subm_id": "541399399"
}