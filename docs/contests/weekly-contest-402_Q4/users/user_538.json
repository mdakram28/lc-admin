{
    "username": "devansh5398",
    "submission": "int n;\nvector<int> bit;\n\nint sum(int r) {\n    int res = 0;\n    for (; r >= 0; r = (r&(r+1)) - 1)\n        res += bit[r];\n    return res;\n}\n\nvoid add(int indx, int delta) {\n    for (; indx < n; indx = indx | (indx+1))\n        bit[indx] += delta;\n}\n\nclass Solution {\npublic:\n    vector<int> countOfPeaks(vector<int>& nums, vector<vector<int>>& queries) {\n        n = nums.size();\n        bit.clear();   bit.resize(n, 0);\n        for (int i = 1; i < n-1; ++i) {\n            if (nums[i] > nums[i-1] && nums[i] > nums[i+1])\n                add(i, 1);\n        }\n        \n        vector<int> res;\n        for (auto &q: queries) {\n            if (q[0] == 1) {\n                int l = q[1], r = q[2];\n                if (r-l <= 1)\n                    res.push_back(0);\n                else\n                    res.push_back( sum(r-1)-sum(l) );\n            } else {\n                int indx = q[1], val = q[2];\n                vector<bool> prev_status(3, false), curr_status(3, false);\n                for (int i = max(1, indx-1); i <= min(n-2, indx+1); ++i)\n                    prev_status[i-(indx-1)]  = (nums[i] > nums[i-1] && nums[i] > nums[i+1]);\n                nums[indx] = val;\n                for (int i = max(1, indx-1); i <= min(n-2, indx+1); ++i)\n                    curr_status[i-(indx-1)]  = (nums[i] > nums[i-1] && nums[i] > nums[i+1]);\n                \n                for (int i = 0; i < 3; ++i) {\n                    // cout << \"indx: \" << (indx-1+i) << \", prev: \" << prev_status[i] << \", curr: \" << curr_status[i] << endl;\n                    if (prev_status[i] == curr_status[i])\n                        continue;\n                    int val = curr_status[i] - prev_status[i];\n                    add(i+(indx-1), val);\n                }\n            }\n        }\n        return res;\n    }\n};",
    "submit_ts": 1718507837.0
}