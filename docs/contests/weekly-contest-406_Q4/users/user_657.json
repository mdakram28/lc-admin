{
    "username": "anushkasinghh09",
    "submission": "\nclass Solution {\npublic:\n    long long minimumCost(int m, int n, std::vector<int>& horizontalCut, std::vector<int>& verticalCut) {\n        // Sort the cuts in descending order\n        std::sort(horizontalCut.begin(), horizontalCut.end(), std::greater<int>());\n        std::sort(verticalCut.begin(), verticalCut.end(), std::greater<int>());\n\n        long long total_cost = 0;\n        int h_pieces = 1, v_pieces = 1;\n        int h_idx = 0, v_idx = 0;\n\n        // Process cuts in a greedy manner\n        while (h_idx < horizontalCut.size() && v_idx < verticalCut.size()) {\n            if (horizontalCut[h_idx] >= verticalCut[v_idx]) {\n                total_cost += static_cast<long long>(horizontalCut[h_idx]) * v_pieces;\n                h_pieces++;\n                h_idx++;\n            } else {\n                total_cost += static_cast<long long>(verticalCut[v_idx]) * h_pieces;\n                v_pieces++;\n                v_idx++;\n            }\n        }\n\n        // Process remaining horizontal cuts\n        while (h_idx < horizontalCut.size()) {\n            total_cost += static_cast<long long>(horizontalCut[h_idx]) * v_pieces;\n            h_pieces++;\n            h_idx++;\n        }\n\n        // Process remaining vertical cuts\n        while (v_idx < verticalCut.size()) {\n            total_cost += static_cast<long long>(verticalCut[v_idx]) * h_pieces;\n            v_pieces++;\n            v_idx++;\n        }\n\n        return total_cost;\n    }\n};\n",
    "submit_ts": "1720925727",
    "subm_id": "1320264242"
}