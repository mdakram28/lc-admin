{
    "username": "Padmaja Mazumder",
    "submission": "class Solution {\npublic:\n\n    vector<pair<int, int>> sortColumns(const vector<int>& row) {\n        vector<pair<int, int>> colValues;\n        int n = row.size();\n        for (int j = 0; j < n; ++j) {\n            colValues.push_back({row[j], j});\n        }\n        sort(colValues.rbegin(), colValues.rend()); \n        return colValues;\n    }\n    bool hasColumnConflict(int col1, int col2, int col3) {\n        return (col1 == col2 || col1 == col3 || col2 == col3);\n    }\n\n    long long computeMaxSum(const vector<vector<pair<int, int>>>& rowMax, int r1, int r2, int r3) {\n        long long maxSum = LLONG_MIN;\n        int i1 = 0;\n        while (i1 < 3) {\n            int i2 = 0;\n            while (i2 < 3) {\n                if (rowMax[r1][i1].second == rowMax[r2][i2].second) {\n                    ++i2;\n                    continue;\n                }\n                int i3 = 0;\n                while (i3 < 3) {\n                    if (hasColumnConflict(rowMax[r1][i1].second, rowMax[r2][i2].second, rowMax[r3][i3].second)) {\n                        ++i3;\n                        continue;\n                    }\n                    long long sum = static_cast<long long>(rowMax[r1][i1].first) +\n                                   rowMax[r2][i2].first + \n                                   rowMax[r3][i3].first;\n                    maxSum = max(maxSum, sum);\n                    ++i3;\n                }\n                ++i2;\n            }\n            ++i1;\n        }\n        return maxSum;\n    }\n\n    long long maximumValueSum(vector<vector<int>>& board) {\n      int m = board.size();\n        vector<vector<pair<int, int>>> rowMax(m, vector<pair<int, int>>(3, {INT_MIN, -1}));\n\n        int i = 0;\n        while (i < m) {\n            rowMax[i] = sortColumns(board[i]);\n            ++i;\n        }\n\n        long long maxSum = LLONG_MIN;\n        int r1 = 0;\n        while (r1 < m) {\n            int r2 = r1 + 1;\n            while (r2 < m) {\n                int r3 = r2 + 1;\n                while (r3 < m) {\n                    maxSum = max(maxSum, computeMaxSum(rowMax, r1, r2, r3));\n                    ++r3;\n                }\n                ++r2;\n            }\n            ++r1;\n        }\n\n        return maxSum;\n    }\n};\n",
    "submit_ts": "1723909388",
    "subm_id": "1359190667"
}