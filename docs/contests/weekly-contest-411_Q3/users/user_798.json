{
    "username": "celerystalk",
    "submission": "def is_ok(idx, res, n, k, idx_to_res, memo):\n    if (idx, res) in memo:\n        return memo[(idx, res)]\n    \n    if n % 2 == 1 and idx == n // 2:\n        for v in range(9, -1, -1):\n            if (idx_to_res[idx] * v) % k == res:\n                memo[(idx, res)] = v\n                return v\n        memo[(idx, res)] = None\n        return None\n    elif n % 2 == 0 and idx == (n - 1) // 2:\n        for v in range(9, -1, -1):\n            if (idx_to_res[idx] * v + idx_to_res[idx + 1] * v) % k == res:\n                memo[(idx, res)] = v\n                return v\n        memo[(idx, res)] = None\n        return None\n    \n\n    # (val * 2 + x ) % k == res \n    for v in range(9, -1, -1):\n        need = (res + k - (idx_to_res[idx] * v + idx_to_res[n - 1 - idx] * v) % k) % k \n\n        tmp = is_ok(idx + 1, need, n, k, idx_to_res, memo) \n        if tmp is not None:\n            memo[(idx, res)] = v\n            return v\n    \n    memo[(idx, res)] = None\n    return None\n\n\nclass Solution:\n    def largestPalindrome(self, n: int, k: int) -> str:\n        idx_to_res = [0] * n\n        tmp = 1\n        for idx in range(n - 1, -1, -1):\n            idx_to_res[idx] = tmp\n            tmp = (tmp * 10) %k\n\n        memo = {}\n        tmp = is_ok(0, 0, n, k, idx_to_res, memo)\n        if memo[(0, 0)] is None:\n            return 0\n        \n        # print(memo)\n\n        res = []\n        need = 0 \n        for idx in range((n + 1) // 2):\n            cur = memo[(idx, need)]\n            res.append(cur)\n            need = (need + k - (idx_to_res[idx] * cur + idx_to_res[n - 1 - idx] * cur ) % k) % k \n\n        if n % 2 == 0:\n            i = 0\n            while i < len(res):\n                if res[i] == 0:\n                    i += 1\n                else:\n                    break\n            if i == len(res):\n                return 0\n            res = res[i:]\n            res.extend(res[::-1])\n            return ''.join([str(c) for c in res])\n        else:\n            i = 0\n            while i < len(res):\n                if res[i] == 0:\n                    i += 1\n                else:\n                    break\n            if i == len(res):\n                return 0\n            res = res[i:]\n            res.extend(res[-2::-1])\n            return ''.join([str(c) for c in res])\n        \n        # res = int(''.join([str(v) for v in res]))\n        # while res and res % 10  == 0:\n        #     res //= 10\n        \n        \n        # if n % 2 == 0:\n        #     i = 0\n        #     while i < len(res):\n        #         if res[i] == 0:\n        #             i += 1\n        #         else:\n        #             break\n        #     if i == len(res):\n        #         return 0\n        #     res = res[i : ]\n        #     res.extend(res[::-1])\n        # else:\n        #     mid = res.pop(-1)\n        #     while i < len(res):\n        #         if res[i] == 0:\n        #             i += 1\n        #         else:\n        #             break\n        #     if i == len(res):\n        #         return mid\n        #     res.append(mid)\n        #     res.extend(res[-2::-1])\n\n        # return ''.join([str(v) for v in res])\n        ",
    "submit_ts": "1723953413",
    "subm_id": "1359820622"
}