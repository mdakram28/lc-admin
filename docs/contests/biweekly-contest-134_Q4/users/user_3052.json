{
    "username": "user7634rI",
    "submission": "class Solution {\npublic:\n    void update(vector<int> & seg, int index, int value, int start, int end, int idx) {\n        if(index > end || index < start) return;\n        if(index == start && start == end) {\n            seg[idx] = value;\n            return;\n        }\n        int mid = (start + end) / 2;\n        update(seg, index, value, start, mid, 2 * idx + 1);\n        update(seg, index, value, mid + 1, end, 2 * idx + 2);\n        seg[idx] = seg[2*idx + 1] & seg[2*idx + 2];\n    }\n    \n    int query(vector<int> & seg, int l, int r, int start, int end, int idx) {\n        if(start > r || end < l) {\n            return (1 << 30) - 1;\n        } \n        if(start >= l && end <= r) {\n            return seg[idx];\n        }\n        int mid = (start + end) / 2;\n        return query(seg, l, r, start, mid, 2 * idx + 1) & query(seg, l, r, mid + 1, end, 2 * idx + 2);\n    }\n    \n    \n    int get_binary_and(vector<vector<int>> & bits, int start, int end) {\n        vector<int> b1 = bits[end + 1];\n        vector<int> b2 = bits[start];\n        \n        int ans = 0;\n        \n        for(int i = 0; i <= 31; i ++) {\n            if(b1[i] - b2[i] == end - start + 1) {\n                ans ^= (1 << i);\n            }\n        }\n        return ans;\n    }\n    long long countSubarrays(vector<int>& nums, int k) {\n        int n = nums.size();\n        vector<vector<int>> bits(n + 1, vector<int>(32, 0));\n        \n        vector<int> seg(4*n, (1LL << 31) - 1);\n        \n        \n        \n        int last = -1;\n        \n        long long ans = 0;\n        \n        // for(int i = 0; i < n; i ++) {\n        //     int val = nums[i];\n        //     bits[i + 1] = bits[i];\n        //     for(int j = 0; j <= 30; j ++) {\n        //         if((1 << j) & val) {\n        //             bits[i + 1][j] ++;\n        //         }\n        //     }\n        // }\n        \n        \n        for(int i = 0; i < n; i ++) {\n            update(seg, i, nums[i], 0, n - 1, 0);\n        }\n        \n        for(int i = 0; i < n; i ++) {\n            int start = 0;\n            int end = i;\n            \n            int l1 = -1, l2 = -1;\n            \n            while(start <= end) {\n                int mid = (start + end) / 2;\n                int and_value = query(seg, mid, i, 0, n - 1, 0);\n                // cout << mid << \" \" << i << \" \" << and_value << endl;\n                \n                if(and_value >= k) {\n                    end = mid - 1;\n                    if(and_value == k) {\n                        l1 = mid;\n                    }\n                } else {\n                    start = mid + 1;\n                }\n            }\n            \n            start = 0;\n            end = i;\n            \n            while(start <= end) {\n                int mid = (start + end) / 2;\n                int and_value = query(seg, mid, i, 0, n - 1, 0);\n                \n                if(and_value <= k) {\n                    start = mid + 1;\n                    if(and_value == k) {\n                        l2 = mid;\n                    }\n                } else {\n                    end = mid - 1;\n                }\n            }\n            if(l1 != -1 && l2 != -1) {\n                ans += (l2 - l1 + 1);\n            }\n            \n            // cout << i << \" \" << \"done\" << \" \" << l1 << \" \" << l2 << endl;\n            \n        }\n        return ans;\n    }\n};",
    "submit_ts": "1720279119",
    "subm_id": "1311738230"
}