{
    "username": "ytffff",
    "submission": "import math\nimport string\nimport sys\nfrom collections import Counter, defaultdict, deque\nfrom heapq import heappop, heappush, heapify, heapreplace, heappushpop, nlargest, nsmallest\nfrom bisect import bisect_left, bisect_right\nfrom math import inf, gcd, lcm, log, log2, ceil, floor\nfrom typing import List\n\nfrom sortedcontainers import SortedList, SortedDict\nfrom itertools import accumulate, combinations, permutations, pairwise\nfrom functools import lru_cache, reduce, cmp_to_key\n\nsys.setrecursionlimit(100000)\nsys.set_int_max_str_digits(20000)  # \u8bbe\u7f6e\u6700\u5927\u5b57\u7b26\u4e32\u4f4d\u6570\nMOD = 10 ** 9 + 7\nDIR = ((-1, 0), (0, 1), (1, 0), (0, -1))\n\n# \u5de6\u95ed\u53f3\u5f00 0base\nclass Fenwick:\n    def __init__(self, n=0):\n        self.n = n\n        self.a = [0] * n\n\n    def add(self, x, v):\n        i = x + 1\n        while i <= self.n:\n            self.a[i - 1] += v\n            i += i & -i\n\n    def sum(self, x):\n        ans = 0\n        i = x\n        while i > 0:\n            ans += self.a[i - 1]\n            i -= i & -i\n        return ans\n\n    def range_sum(self, l, r):\n        return self.sum(r) - self.sum(l)\n\n    def select(self, k):\n        x = 0\n        cur = 0\n        i = 1 << (self.n.bit_length() - 1)\n        while i > 0:\n            if x + i <= self.n and cur + self.a[x + i - 1] <= k:\n                x += i\n                cur += self.a[x - 1]\n            i //= 2\n        return x\n\nclass Solution:\n    def countOfPeaks(self, nums: List[int], queries: List[List[int]]) -> List[int]:\n        n = len(nums)\n        tr = Fenwick(n + 2)\n        for i in range(1, n-1):\n            if nums[i - 1] < nums[i] and nums[i] > nums[i + 1]:\n                tr.add(i, 1)\n        ans = []\n        for op, x, y in queries:\n            if op == 1:\n                if y - x + 1 < 3:\n                    ans.append(0)\n                else:\n                    ans.append(tr.range_sum(x+1, y))\n            else:\n                if x > 0 and x + 1 < n and nums[x - 1] < nums[x] and nums[x] > nums[x + 1]:\n                    tr.add(x, -1)\n                if x > 0 and x + 1 < n and nums[x - 1] < y and y > nums[x + 1]:\n                    tr.add(x, 1)\n\n                if x > 1 and nums[x - 2] < nums[x - 1] and nums[x - 1] > nums[x]:\n                    tr.add(x - 1, -1)\n                if x > 1 and nums[x - 2] < nums[x - 1] and nums[x - 1] > y:\n                    tr.add(x - 1, 1)\n                if x + 2 < n and nums[x + 2] < nums[x + 1] and nums[x + 1] > nums[x]:\n                    tr.add(x + 1, -1)\n                if x + 2 < n and nums[x + 2] < nums[x + 1] and nums[x + 1] > y:\n                    tr.add(x + 1, 1)\n                nums[x] = y\n        return ans\n",
    "submit_ts": "1718506578",
    "subm_id": "539775876"
}