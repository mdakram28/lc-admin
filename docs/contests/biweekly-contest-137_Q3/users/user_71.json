{
    "username": "Fasdr",
    "submission": "class Solution {\n    public long maximumValueSum(int[][] board) {\n        long res = -1_000_000_000_000_000l;\n        int m = board.length;\n        int n = board[0].length;\n        // i * n + j is stored showing the max element\n        Integer[] maxVals = new Integer[3 * m + 3 * n];\n        int p = 0;\n        for (int i = 0; i < m; i++) {\n            int j1 = -1, j2 = -1, j3 = -1;\n            for (int j = 0; j < n; j++) {\n                if (j1 == -1 || board[i][j1] <= board[i][j]) {\n                    j3 = j2;\n                    j2 = j1;\n                    j1 = j;\n                } else if (j2 == -1 || board[i][j2] <= board[i][j]) {\n                    j3 = j2;\n                    j2 = j;\n                } else if (j3 == -1 || board[i][j3] < board[i][j]) {\n                    j3 = j;\n                }\n            }\n            maxVals[p++] = i * n + j1;\n            maxVals[p++] = i * n + j2;\n            maxVals[p++] = i * n + j3;\n        }\n        \n        for (int j = 0; j < n; j++) {\n            int i1 = -1, i2 = -1, i3 = -1;\n            for (int i = 0; i < m; i++) {\n                if (i1 == -1 || board[i1][j] <= board[i][j]) {\n                    i3 = i2;\n                    i2 = i1;\n                    i1 = i;\n                } else if (i2 == -1 || board[i2][j] <= board[i][j]) {\n                    i3 = i2;\n                    i2 = i;\n                } else if (i3 == -1 || board[i3][j] < board[i][j]) {\n                    i3 = i;\n                }\n            }\n            maxVals[p++] = i1 * n + j;\n            maxVals[p++] = i2 * n + j;\n            maxVals[p++] = i3 * n + j;\n        }\n        \n        Arrays.sort(maxVals, (a, b) ->{\n            int i1 = a / n, j1 = a % n;\n            int i2 = b / n, j2 = b % n;\n            return board[i2][j2] - board[i1][j1];\n        });\n        \n        for (int idx1 = 0; idx1 < p; idx1++) {\n            int i1 = maxVals[idx1] / n, j1 = maxVals[idx1] % n;\n            int i2 = -1, j2 = -1;\n            int i3 = -1, j3 = -1;\n            // take first\n            long cur1 = board[i1][j1];\n            for (int idx2 = idx1 + 1; idx2 < p; idx2++) {\n                i2 = maxVals[idx2] / n;\n                j2 = maxVals[idx2] % n;\n                if (i1 == i2 || j1 == j2) {\n                    continue;\n                }\n                long cur2 = cur1 + board[i2][j2];\n                for (int idx3 = idx2 + 1; idx3 < p; idx3++) {\n                    i3 = maxVals[idx3] / n;\n                    j3 = maxVals[idx3] % n;\n                    if (i1 == i3 || i2 == i3 || j1 == j3 || j2 == j3) {\n                        continue;\n                    } else {\n                        long cur3 = cur2 + board[i3][j3];\n                        res = Math.max(res, cur3);\n                        break;\n                    }\n                }\n            }\n        }\n        \n        \n        return res;\n    }\n}",
    "submit_ts": "1723907227",
    "subm_id": "1359096931"
}