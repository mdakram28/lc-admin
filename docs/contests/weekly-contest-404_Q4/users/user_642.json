{
    "username": "salyu",
    "submission": "class Solution {\npublic:\n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n        \n        auto search = [&](vector<vector<int>> const& edges) {\n            int n = edges.size() + 1;\n            if (n == 1) {\n                return pair(0, 0);\n            }\n            if (n == 2) {\n                return pair(1, 1);\n            }\n            vector<int> ins(n), ds(n);\n            vector<vector<int>> adjs(n);\n            for (auto & e : edges) {\n                adjs[e[0]].push_back(e[1]);\n                adjs[e[1]].push_back(e[0]);\n                ++ins[e[0]];\n                ++ins[e[1]];\n            }\n            int d = 1, l = 0;\n            queue<int> q;\n            for (int i = 0; i < n; ++i) {\n                if (ins[i] == 1) {\n                    q.push(i);\n                    ds[i] = 0;\n                }\n            }\n            while (!q.empty()) {\n                int u = q.front();\n                q.pop();\n                for (int v : adjs[u]) {\n                    if (--ins[v] == 1) {\n                        d = max(d, ds[v] = ds[u] + 1);\n                        q.push(v);\n                    }\n                    if (ds[u] == ds[v]) {\n                        d = max(d, ds[u] + 1);\n                    }\n                    l = max(l, ds[v] + ds[u] + 1);\n                }\n            }\n            return pair(d, l);\n        };\n        auto [d1, l1] = search(edges1);\n        auto [d2, l2] = search(edges2);\n        return max({l1, l2, d1 + d2 + 1});\n    }\n};",
    "submit_ts": "1719718480",
    "subm_id": "1304418262"
}