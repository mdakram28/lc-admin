{
    "username": "Anav Prasad",
    "submission": "template <typename type> inline void print(const type &var) {\n    cout << var;\n}\n#define debug(x) if(false){cout << #x << \": \";print(x);cout<<endl;}\nclass Solution {\npublic:\n    string largestPalindrome(int n, int k) {\n        if (k == 1) return string(n,'9');\n        if (k == 2) {\n            string s = string(n,'9');\n            s.front() = s.back() = '8';\n            return s;\n        }\n        string s = string(n,'9');\n        if (k == 3 || k == 9) {\n            return s;\n        }\n        if (k == 4) {\n            if (n == 1) return \"8\";\n            s[0] = s[n-1] = s[n-2] = s[1] = '8';\n            return s;\n        }\n        if (k == 5) {\n            if (n == 1) return \"5\";\n            s[0] = s[n-1] = '5';\n            return s;\n        }\n        if (n == 1) return to_string(k);\n        if (k == 6) {\n            if (n == 2) return \"66\";\n            if (n == 3) return \"888\";\n            if (n == 4) return \"8778\";\n            if (n == 5) return \"89898\";\n            if (n == 6) return \"897798\";\n            // s[0] = s[n-1] = s[n-2] = s[2] = s[n-3] = s[1] = '8';\n            s[0] = s[n-1] = '8';\n            if (n%2) s[n/2] = '8';\n            else s[n/2] = s[n - (n/2)-1] = '7';\n            return s;\n        }\n        if (k == 8) {\n            if (n == 2) return \"88\";\n            if (n == 3) return \"888\";\n            if (n == 4) return \"8888\";\n            if (n == 5) return \"88888\";\n            s[0] = s[1] = s[2] = s[n-1] = s[n-2] = s[n-3] = '8';\n            // s[0] = s[n-1] = s[n-2] = s[1] = '9';\n            // s[2] = s[n-3] = '2';\n            return s;\n        }\n        assert(k == 7);\n        if (n == 2) return \"77\";\n        if (n == 3) return \"959\";\n        if (n == 4) return \"9779\";\n        if (n == 5) return \"99799\";\n        if (n == 6) return \"999999\";\n        auto test = [](auto &&self, string &p, bool dbg = false) -> bool {\n            int n = p.size();\n            assert(n >= 2);\n            if (n == 2){\n                if (dbg) {\n                    debug(p);\n                }\n                return stoi(p)%7 == 0;\n            }\n            int l = p.back() - '0';\n            l*=2;\n            assert(l < 20);\n            p.pop_back();\n            if ((p.back() - '0') >= l) {\n                p.back()-=l;\n                assert(p.back() >= '0');\n                return self(self,p,dbg);\n            }\n            --n;\n            int v = p.back()-'0';\n            while(v < l) {\n                int i = n-2;\n                while(i >= 0 && p[i] == '0') {\n                    p[i--] = '9';\n                }\n                assert(i >= 0);\n                p[i]--;\n                v+=10;\n            }\n            p.back() = (char)(v-l+'0');\n            assert(p[n-1] >= '0');\n            return self(self,p,dbg);\n        };\n        for (char v1 = '9'; v1 >= '0'; --v1) {\n            for (char v2 = '9'; v2 >= '0'; --v2) {\n                for (char v3 = '9'; v3 >= '0'; --v3) {\n                    s[n/2] = s[n-n/2-1] = v3;\n                    s[n/2-1] = s[n-(n/2-1)-1] = v2;\n                    s[n/2-2] = s[n-(n/2-2)-1] = v1;\n                    string p = s;\n                    if (p == \"9994999\") {\n                        debug(test(test,p,true));\n                        // cout << test(test,p) << endl;\n                    }\n                    if (test(test,p)) return s;\n                }\n            }\n        }\n        assert(false);\n        return s;\n    }\n};\n/*\n7\n7\n\n*/",
    "submit_ts": "1723953060",
    "subm_id": "1359811354"
}