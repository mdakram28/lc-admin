{
    "username": "Nippon2021",
    "submission": "class Solution:\n    def waysToReachStair(self, k: int) -> int:\n        # either -1 or +2**jump (and jump+=1)\n        # essentially either +2**jump-1 or +2**jump\n        \n        # 1 - 2\n        # 1 - (0) - 1\n        \n        # ex 1--> 9\n        # 2**3 ~ 2**4 so 4 operations\n        # 1 + 1 + 2 + 4 + 8 = 16\n        # need -7, larger than 5 not possible\n        \n        # ex 1 --> 2 \n        # 2**1 ~ 2**2 so 1 or 2 operations\n        # 1 + 1 = 2\n        # need -0 --> 1 possibility\n        # 1 + 1 + 2 = 4\n        # need -2 in 3 --> comb(3,2) possibility\n        \n        \n        if k==0: return 2\n        if k==1: return 4\n        \n        op = math.ceil(math.log2(k)) # num operations\n        res = 0\n        while True:\n            v = 1<<op\n            diff = v-k\n            if diff > op+1:\n                break\n            res += math.comb(op+1, diff)\n            \n            op += 1\n            \n        \n        return res\n        \n        ",
    "submit_ts": "1716087935",
    "subm_id": "1261798935"
}