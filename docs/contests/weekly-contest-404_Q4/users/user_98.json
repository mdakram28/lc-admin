{
    "username": "LCalGaib",
    "submission": "#include <bits/stdc++.h>\n#include <ext/pb_ds/assoc_container.hpp>\n\nusing namespace std;\nusing namespace __gnu_pbds;\n\n#pragma region\ntemplate <typename T>\nusing ordered_set = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;\n\n#define ll long long\n#define sz(x) (int)(x).size()\n#define mp make_pair\n#define pb push_back\n#define f first\n#define s second\n#define lb lower_bound\n#define ub upper_bound\n#define all(x) x.begin(), x.end()\n#define rall(x) x.rbegin(), x.rend()\n#define ins insert\n\nvoid __print(int x) { cout << x; }\nvoid __print(long x) { cout << x; }\nvoid __print(long long x) { cout << x; }\nvoid __print(unsigned x) { cout << x; }\nvoid __print(unsigned long x) { cout << x; }\nvoid __print(unsigned long long x) { cout << x; }\nvoid __print(float x) { cout << x; }\nvoid __print(double x) { cout << x; }\nvoid __print(long double x) { cout << x; }\nvoid __print(char x) { cout << '\\'' << x << '\\''; }\nvoid __print(const char *x) { cout << '\\\"' << x << '\\\"'; }\nvoid __print(const string &x) { cout << '\\\"' << x << '\\\"'; }\nvoid __print(bool x) { cout << (x ? \"true\" : \"false\"); }\ntemplate <size_t N>\nvoid __print(const bitset<N>& x) { cout << x; };\n\ntemplate <typename T>\nvoid __print(const T &x);\ntemplate <typename T, typename V>\nvoid __print(const pair<T, V> &x);\ntemplate <typename T>\nvoid __print(const T &x);\ntemplate <typename T, typename... V>\nvoid _print(T t, V... v);\n\ntemplate <typename T, typename V>\nvoid __print(const pair<T, V> &x) {\n    cout << '{';\n    __print(x.first);\n    cout << \", \";\n    __print(x.second);\n    cout << '}';\n}\ntemplate <typename T>\nvoid __print(const T &x) {\n    int f = 0;\n    cout << '{';\n    for (auto &i : x) cout << (f++ ? \", \" : \"\"), __print(i);\n    cout << \"}\";\n}\nvoid _print() { cout << \"]\\n\"; }\ntemplate <typename T, typename... V>\nvoid _print(T t, V... v) {\n    __print(t);\n    if (sizeof...(v)) cout << \", \";\n    _print(v...);\n}\n\ntemplate<class T> bool ckmin(T&a, const T& b) { bool B = a > b; a = min(a,b); return B; }\ntemplate<class T> bool ckmax(T&a, const T& b) { bool B = a < b; a = max(a,b); return B; }\n#pragma endregion\n\n#define dbg(x...)                                                            \\\n    cout << \"[\" << __func__ << \":\" << __LINE__ - 9 << \" [\" << #x << \"] = [\"; \\\n    _print(x);                                                               \\\n    cout << endl;\n// #define dbg(x...)\n\nclass Solution {\npublic:\n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n        const auto get_min_height = [](vector<vector<int>>& edges) -> pair<int, int> {\n            int n = edges.size() + 1;\n            if (n == 1) {\n                return {0, 0};\n            }\n            vector adj(n, vector<int>());\n            vector deg(n, 0);\n            for (const auto& e : edges) {\n                adj[e[0]].push_back(e[1]);\n                adj[e[1]].push_back(e[0]);\n                ++deg[e[0]], ++deg[e[1]];\n            }\n\n            vector<int> q;\n            q.reserve(n);\n            int q_idx = 0;\n            for (int u = 0; u < n; ++u) {\n                if (deg[u] == 1) {\n                    q.push_back(u);\n                }\n            }\n\n            int d = 0;\n            while (q_idx < n - 2) {\n                int q_size = q.size();\n                ++d;\n                for (; q_idx < q_size; ++q_idx) {\n                    auto u = q[q_idx];\n                    for (auto v : adj[u]) {\n                        if (--deg[v] == 1) {\n                            q.push_back(v);\n                        }\n                    }\n                }\n            }\n\n            vector<int> res;\n            for (; q_idx < n; ++q_idx) {\n                res.push_back(q[q_idx]);\n            }\n            return {d, res.size() == 2 ?  d + 1 : d};\n        };\n        \n        auto [mn1, mx1] = get_min_height(edges1);\n        auto [mn2, mx2] = get_min_height(edges2);\n        \n        return max({mx1 + mx2 + 1, mn1 + mx1, mn2 + mx2});\n    }\n};",
    "submit_ts": "1719717318",
    "subm_id": "1304388424"
}