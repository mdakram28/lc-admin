{
    "username": "Sanskar Ranjan",
    "submission": "class Solution:\n    def maximumValueSum(self, board):\n        m, n = self.get_dimensions(board)\n        cells = self.get_sorted_cells(board, m, n)\n        return self.calculate_max_sum(cells)\n\n    def get_dimensions(self, board):\n        return len(board), len(board[0])\n\n    def get_sorted_cells(self, board, m, n):\n        cells = [(board[i][j], i, j) for i in range(m) for j in range(n)]\n        cells.sort(reverse=True, key=lambda x: x[0])\n        return cells\n\n    def calculate_max_sum(self, cells):\n        max_sum = float('-inf')\n        limit = min(len(cells), 50)\n        for i in range(limit):\n            for j in range(i+1, limit):\n                for k in range(j+1, limit):\n                    if self.no_conflict(cells, i, j, k):\n                        current_sum = cells[i][0] + cells[j][0] + cells[k][0]\n                        max_sum = max(max_sum, current_sum)\n        return max_sum\n\n    def no_conflict(self, cells, i, j, k):\n        \"\"\"Check if the three chosen cells have no rooks attacking each other.\"\"\"\n        return (cells[i][1] != cells[j][1] and cells[i][1] != cells[k][1] and cells[j][1] != cells[k][1] and\n                cells[i][2] != cells[j][2] and cells[i][2] != cells[k][2] and cells[j][2] != cells[k][2])\n",
    "submit_ts": "1723909359",
    "subm_id": "1359189546"
}