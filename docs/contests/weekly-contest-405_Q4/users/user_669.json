{
    "username": "shivamshah11",
    "submission": " struct Node {\n        unordered_map<char, Node*> child;\n        vector<pair<int, int>> ends; \n    };\n class Trie {\n    public:\n        Node* root;\n        \n        Trie() { root = new Node(); }\n\n        void insert(string& word, int idx, int cost) {\n            Node* node = root;\n            for (char c : word) {\n                if (!node->child.count(c))\n\n                    node->child[c] = new Node();\n                node = node->child[c];\n            }\n            node->ends.push_back({idx, cost});\n        }\n    };\n\nclass Solution {\npublic:\n   \n\n   \n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int n = target.size();\n        vector<int> dp(n + 1, INT_MAX);\n        dp[0] = 0;\n\n        Trie trie;\n        for (int i = 0; i < words.size(); ++i) {\n\n            trie.insert(words[i], i, costs[i]);\n        \n        }\n\n        for (int i = 0; i < n; ++i) {\n            if (dp[i] == INT_MAX) continue;\n\n\n            Node* node = trie.root;\n            for (int j = i; j < n; ++j) {\n                if (!node->child.count(target[j])) break;\n                node = node->child[target[j]];\n                for (auto& p : node->ends) {\n                    int wordIdx = p.first;\n                    int wordCost = p.second;\n                    int len = words[wordIdx].size();\n                    if (i + len <= n) {\n                        dp[i + len] = min(dp[i + len], dp[i] + wordCost);\n                    }\n                }\n            }\n        }\n\n        return dp[n] == INT_MAX ? -1 : dp[n];\n    }\n};\n",
    "submit_ts": "1720322953",
    "subm_id": "1312363516"
}