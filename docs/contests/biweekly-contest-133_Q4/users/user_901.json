{
    "username": "Reacher_J",
    "submission": "\nconst int MOD = 1e9+7;\nconst int MAX_INVERSIONS = 400;\n\nclass PermutationSolver {\nprivate:\n    int n;\n    unordered_map<int, int> reqMap;\n    vector<vector<long long>> permCounts;\n\npublic:\n    PermutationSolver(int _n, vector<vector<int>>& requirements) : n(_n) {\n        for (auto& req : requirements) {\n            reqMap[req[0] + 1] = req[1];\n        }\n\n        permCounts.assign(n + 1, vector<long long>(MAX_INVERSIONS + 1, 0));\n        permCounts[0][0] = 1;\n    }\n\n    void calculatePermutations() {\n        for (int length = 1; length <= n; ++length) {\n            for (int inv = 0; inv <= MAX_INVERSIONS; ++inv) {\n                for (int newPos = 0; newPos < length; ++newPos) {\n                    int prevInv = inv - newPos;\n                    if (prevInv >= 0) {\n                        permCounts[length][inv] = (permCounts[length][inv] + permCounts[length - 1][prevInv]) % MOD;\n                    }\n                }\n            }\n\n            if (reqMap.count(length) > 0) {\n                int targetInv = reqMap[length];\n                for (int inv = 0; inv <= MAX_INVERSIONS; ++inv) {\n                    if (inv != targetInv) {\n                        permCounts[length][inv] = 0;\n                    }\n                }\n            }\n        }\n    }\n\n    int getResult() {\n        long long result = 0;\n        for (int inv = 0; inv <= MAX_INVERSIONS; ++inv) {\n            result = (result + permCounts[n][inv]) % MOD;\n        }\n        return static_cast<int>(result);\n    }\n};\n\nclass Solution {\npublic:\n    int numberOfPermutations(int n, vector<vector<int>>& requirements) {\n\n        PermutationSolver solver(n, requirements);\n        solver.calculatePermutations();\n        return solver.getResult();\n    }\n};",
    "submit_ts": 1719071203.0
}