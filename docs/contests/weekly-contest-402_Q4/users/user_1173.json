{
    "username": "Pisces311",
    "submission": "// query for the range sum\ntemplate <typename T = int, int mn = 0, int mx = 100005>\nclass segmentTree {\n    struct Node {\n        T val;\n        int ls, rs;\n    };\n\n    int cnt;\n    vector<Node> tr;\n\n    void pushUp(int o, int l, int r) {\n        tr[o].val = tr[tr[o].ls].val + tr[tr[o].rs].val;\n    }\n\n    void pushDown(int o, int l, int r) {\n        if (!tr[o].ls) tr[o].ls = ++cnt, tr.emplace_back();\n        if (!tr[o].rs) tr[o].rs = ++cnt, tr.emplace_back();\n    }\n\n   public:\n    segmentTree() : tr(1), cnt(0) { tr.reserve(500000); }\n\n    T query(int ql, int qr, int o = 0, int l = mn, int r = mx) {\n        if (r < ql || qr < l) return 0;\n        if (ql <= l && r <= qr) return tr[o].val;\n        pushDown(o, l, r);\n        int mid = (l + r) >> 1;\n        return query(ql, qr, tr[o].ls, l, mid) +\n               query(ql, qr, tr[o].rs, mid + 1, r);\n    }\n\n    void update(int ql, int qr, T k, int o = 0, int l = mn, int r = mx) {\n        if (r < ql || qr < l) return;\n        if (ql <= l && r <= qr) {\n            tr[o].val = k;\n            return;\n        }\n        pushDown(o, l, r);\n        int mid = (l + r) >> 1;\n        update(ql, qr, k, tr[o].ls, l, mid);\n        update(ql, qr, k, tr[o].rs, mid + 1, r);\n        pushUp(o, l, r);\n    }\n};\n\nclass Solution {\npublic:    \n    vector<int> countOfPeaks(vector<int>& nums, vector<vector<int>>& queries) {\n        segmentTree<> st;\n        int n = nums.size();\n        for (int i = 1; i < n - 1; i++) {\n            if (nums[i] > nums[i - 1] && nums[i] > nums[i + 1]) {\n                st.update(i, i, 1);\n            }\n        }\n        vector<int> ans;\n        for (auto q : queries) {\n            if (q[0] == 1) {\n                ans.push_back(st.query(q[1] + 1, q[2] - 1));\n            } else {\n                int ind = q[1], val = q[2];\n                nums[ind] = val;\n                if (ind >= 2 && nums[ind - 1] > nums[ind - 2] && nums[ind - 1] > val) {\n                    st.update(ind - 1, ind - 1, 1);\n                } else {\n                    st.update(ind - 1, ind - 1, 0);\n                }\n                if (ind + 2 < n && nums[ind + 1] > val && nums[ind + 1] > nums[ind + 2]) {\n                    st.update(ind + 1, ind + 1, 1);\n                } else {\n                    st.update(ind + 1, ind + 1, 0);\n                }\n                if (ind == 0 || ind == n - 1) continue;\n                // cout << val << ' ' << nums[ind - 1] << ' ' << nums[ind + 1] << endl;\n                if (val > nums[ind - 1] && val > nums[ind + 1]) {\n                    st.update(ind, ind, 1);\n                } else {\n                    st.update(ind, ind, 0);\n                }\n            }\n            // for (int i = 0; i < n; i++) {\n            //     cout << st.query(i, i) << ' ';\n            // }\n            // cout << endl;\n        }\n        return ans;\n    }\n};",
    "submit_ts": "1718508213",
    "subm_id": "1289674861"
}