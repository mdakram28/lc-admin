{
    "username": "jgorton500",
    "submission": "class Solution:\n    def countKConstraintSubstrings(self, s: str, k: int, queries: List[List[int]]) -> List[int]:\n        indices = {\n            '0': [-1],\n            '1': [-1]\n        }\n        satisfy = []\n        for i, l in enumerate(s):\n            indices[l].append(i)\n            l = len(indices['0'])\n            zeroSatisfies = indices['0'][max(0, l-k-1)]\n            l = len(indices['1'])\n            oneSatisfies = indices['1'][max(0, l-k-1)]\n            satisfy.append(i-min(zeroSatisfies, oneSatisfies))\n        res = []\n        # print(satisfy)\n        cummulative = list(accumulate([0]+satisfy))\n        # print(cummulative)\n        for l, r in queries:\n            num = 0\n            for end in range(l, r+1):\n                if 1+end-l < satisfy[end]:\n                    # print(f'adding partial {1+end-l}')\n                    num += 1+end-l\n                else:\n                    # print(f'adding range {end}-{r+1} = {cummulative[r+1] - cummulative[end]}')\n                    num += cummulative[r+1] - cummulative[end]\n                    break\n                # print(end, num)\n            res.append(num)\n            # res.append(sum(min(1+end-l, satisfy[end]) for end in range(l, r+1)))\n        return res",
    "submit_ts": "1723953308",
    "subm_id": "1359817805"
}