{
    "username": "SamyajitDas",
    "submission": "class Solution {\n    int dp[][];\n\n    int hlp(int n, int ar[], int k, Map<Integer, Integer> hm[], int mp[]) {\n        int ans = 1;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j <= k; j++) {\n                for (int l = 0; l < j; l++) {\n                    dp[i][j] = Math.max(dp[i][j], 1 + mp[l]);\n                }\n                if (!hm[j].containsKey(ar[i])) {\n                    // dp[i][j] = Math.max(dp[i][j-1], 1 + hm[j].get(ar[i]));\n                } else {\n                    dp[i][j] = Math.max(dp[i][j], 1 + hm[j].get(ar[i]));\n\n                }\n                ans = Math.max(ans, dp[i][j]);\n            }\n            for (int j = 0; j <= k; j++) {\n                mp[j] = Math.max(mp[j], dp[i][j]);\n                if (!hm[j].containsKey(ar[i])) {\n                    hm[j].put(ar[i], dp[i][j]);\n                } else\n                    hm[j].put(ar[i], Math.max(hm[j].get(ar[i]), dp[i][j]));\n            }\n        }\n        return ans;\n\n    }\n    public int maximumLength(int[] nums, int k) {\n        int n =  nums.length;\n        dp = new int[n][k + 1];\n        // Arrays.fill(ar[i], nums);\n        IntStream.range(0, n).forEach(\n                i -> IntStream.range(0, k + 1).forEach(j -> dp[i][j] = 1));\n        int[] mp = new int[k + 1];\n        Arrays.fill(mp, -1);\n        Map<Integer, Integer>[] hm = new HashMap[k + 1];\n        for (int j = 0; j <= k; j++) {\n            hm[j] = new HashMap<>();\n        }\n        return hlp(n, nums, k, hm,mp);\n    }\n}",
    "submit_ts": "1717862339",
    "subm_id": "1281820097"
}