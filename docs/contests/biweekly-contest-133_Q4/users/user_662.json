{
    "username": "SamChen856",
    "submission": "class Solution:\n    # dp, time O(n^2*max_invcnt), space O(n*max_invcnt), max_invcnt <= 400\n    def numberOfPermutations(self, n: int, requirements: List[List[int]]) -> int:\n        MOD = 10**9 + 7\n\n        endi_to_invcnt = {endi: cnti for endi, cnti in requirements}\n        max_invcnt = max(cnti for _, cnti in requirements)\n        \n        # dp[k][i] = the number of permutations of the first k elements with i inversions.\n        dp = [[0] * (max_invcnt + 1) for _ in range(n + 1)]\n        dp[0][0] = 1\n        res = 0\n\n        for k in range(1, n + 1):\n            for i in range(max_invcnt + 1):\n                for j in range(min(i + 1, k)): # k - 1 >= j and i - j >= 0\n                    dp[k][i] = (dp[k][i] + dp[k - 1][i - j]) % MOD\n\n            if k - 1 in endi_to_invcnt:\n                for i in range(max_invcnt + 1):\n                    if i != endi_to_invcnt[k - 1]: # not meet requirements\n                        dp[k][i] = 0\n\n            if k == n:\n                for i in range(max_invcnt + 1):\n                    res = (res + dp[n][i]) % MOD\n\n        return res\n",
    "submit_ts": "1719070933",
    "subm_id": "1296835228"
}