{
    "username": "gaurang_04",
    "submission": "class DSU {\nprivate:\n    vector<long long> parent, size;\n\npublic:\n    DSU(long long n) {\n        size.resize(n + 1, 1);\n        parent.resize(n + 1);\n        for (long long i = 0; i <= n; i++) {\n            parent[i] = i;\n        }\n    }\n\n    long long findPar(long long node) {\n        if (node == parent[node]) {\n            return node;\n        }\n        return parent[node] = findPar(parent[node]);\n    }\n\n    void unionBySize(long long u, long long v) {\n        long long ult_u = findPar(u);\n        long long ult_v = findPar(v);\n\n        if (ult_u == ult_v) {\n            return;\n        }\n\n        if (size[ult_u] < size[ult_v]) {\n            parent[ult_u] = ult_v;\n            size[ult_v] += size[ult_u];\n        } else {\n            parent[ult_v] = ult_u;\n            size[ult_u] += size[ult_v];\n        }\n    }\n};\n\nclass Solution {\npublic:\n    bool canReachCorner(int X, int Y, vector<vector<int>>& v) {\n        long long n = v.size();\n        DSU ds(n + 4);\n        for (long long i = 0; i < n; i++) {\n            for (long long j = i + 1; j < n; j++) {\n                long long dx = v[i][0] - v[j][0];\n                long long dy = v[i][1] - v[j][1];\n                long long distSq = dx * dx + dy * dy;\n                long long radSum = v[i][2] + v[j][2];\n                long long radSumSq = radSum * radSum;\n                if (distSq <= radSumSq) {\n                    ds.unionBySize(i, j);\n                }\n            }\n            if (v[i][0] - v[i][2] <= 0) {\n                ds.unionBySize(i, n); // left edge\n            }\n            if (v[i][0] + v[i][2] >= X) {\n                ds.unionBySize(i, n + 1); // right edge\n            }\n            if (v[i][1] - v[i][2] <= 0) {\n                ds.unionBySize(i, n + 2); // bottom edge\n            }\n            if (v[i][1] + v[i][2] >= Y) {\n                ds.unionBySize(i, n + 3); // top edge\n            }\n        }\n        if ((ds.findPar(n) == ds.findPar(n + 1)) ||\n            (ds.findPar(n + 2) == ds.findPar(n + 3)) ||\n            (ds.findPar(n) == ds.findPar(n + 2)) ||\n            (ds.findPar(n + 1) == ds.findPar(n + 3))) {\n            return false;\n        }\n        return true;\n    }\n};",
    "submit_ts": "1722139052",
    "subm_id": "1335806541"
}