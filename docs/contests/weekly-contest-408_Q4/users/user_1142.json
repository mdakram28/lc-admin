{
    "username": "liuliugit",
    "submission": "class Solution:\n    def canReachCorner(self, X: int, Y: int, circles: List[List[int]]) -> bool:\n        n = len(circles)\n        concate_circles = [[] for _ in range(n)]\n        include_edges = [set() for _ in range(n)]\n        for index_i in range(n):\n            x, y, r = circles[index_i]\n            for index_j in range(index_i+1, n):\n                x_j, y_j, r_j = circles[index_j]\n                distance = abs(x_j-x)**2 + abs(y_j-y)**2\n                if distance**0.5 <= (r+r_j):\n                    concate_circles[index_i].append(index_j)\n                    concate_circles[index_j].append(index_i)\n        \n        memoization = set()\n        for index in range(n):\n            set_edges = set()\n            if index in memoization:\n                continue\n            memoization.add(index)\n            self.find_concate(set_edges, index, X, Y, include_edges, concate_circles, memoization, circles)\n            # print(include_edges)\n            if len(include_edges[index]) >= 3 or (2 in include_edges[index] and 3 in include_edges[index]) or (0 in include_edges[index] and 1 in include_edges[index]) or (0 in include_edges[index] and 2 in include_edges[index]) or (1 in include_edges[index] and 3 in include_edges[index]):\n                return False\n                \n        # print(include_edges)\n        return True\n    \n    def find_concate(self, set_edges: set[int], index: int, X: int, Y: int, include_edges: list[set[int]], concate_circles: list[list[int]], memoization: set[int], circles: list[list[int]]):\n        x, y, r = circles[index]\n        if x - r <= 0:\n            set_edges.add(0)\n        if y - r <= 0:\n            set_edges.add(1)\n        if x + r >= X:\n            set_edges.add(2)\n        if y + r >= Y:\n            set_edges.add(3)\n            \n        for index_concate in concate_circles[index]:\n            if index_concate in memoization:\n                continue\n            memoization.add(index_concate)\n\n            self.find_concate(set_edges, index_concate, X, Y, include_edges, concate_circles, memoization, circles)\n\n            include_edges[index] = set_edges\n            if len(include_edges[index]) >= 3 or (2 in include_edges[index] and 3 in include_edges[index]) or (0 in include_edges[index] and 1 in include_edges[index]) or (0 in include_edges[index] and 2 in include_edges[index]) or (1 in include_edges[index] and 3 in include_edges[index]):\n                return\n            \n        include_edges[index] = set_edges",
    "submit_ts": "1722139195",
    "subm_id": "1335810797"
}