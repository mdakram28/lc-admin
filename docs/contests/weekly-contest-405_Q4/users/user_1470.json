{
    "username": "zechri",
    "submission": "class Node{\npublic:\n    Node* child[26];\n    vector<pair<int,int>> end;\n    Node(){\n        for(int i=0; i<26; i++) child[i] = nullptr;\n    }\n};\n\nclass Trie{\npublic:\n    Node* root;\n    Trie(){\n        root = new Node();\n    }\n    void insert(string s, int idx, int cost){\n        Node* curr = root;\n        for(char c: s){\n            int x = c-'a';\n            if(curr->child[x] == nullptr)\n                curr->child[x] = new Node();\n            curr = curr->child[x];\n        }\n        curr->end.push_back({idx, cost});\n        return;\n    }\n    \n};\n\nclass Solution {\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int n = target.size(), inf = 1e9;\n        vector<int> dp(n+1, inf);\n        dp[0] = 0;\n\n        Trie trie;\n        for(int i=0; i<words.size(); i++)\n            trie.insert(words[i], i, costs[i]);\n        \n        for(int i=0; i<n; i++){\n            if(dp[i] != inf){\n                Node *curr = trie.root;\n                for(int j=i;j<n; j++){\n                    int x = target[j] - 'a';\n                    if(curr->child[x] == nullptr)\n                        break;\n                    \n                    curr = curr->child[x];\n\n                    for(auto &[f,s]: curr->end){\n                        if(i + words[f].size() <= n){\n                            dp[i + words[f].size()] = min(dp[i + words[f].size()], dp[i] + s);\n                        }\n                    }\n                }\n            }\n        }\n        if(dp[n] != inf) return dp[n];\n        return -1;\n    }\n};",
    "submit_ts": "1720324575",
    "subm_id": "1312402880"
}