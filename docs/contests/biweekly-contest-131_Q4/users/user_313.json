{
    "username": "zephyrr",
    "submission": "class Solution:\n    def getResults(self, queries: List[List[int]]) -> List[bool]:\n        obs = [0]\n        for q in queries:\n            if q[0] == 1:\n                obs.append(q[1])\n        obs.sort()\n        obsind = defaultdict(int)\n        for i,n in enumerate(obs):\n            obsind[n] = i\n        curarr = [0 for _ in range(len(obs))]\n        nn = len(curarr)\n        \n        global segtree\n        segtree = [0 for _ in range(2*nn)]\n\n        def update(pos,val,n):\n            global segtree\n            pos += n\n            segtree[pos] = val\n            while pos > 1:\n                pos //= 2\n                segtree[pos] = max(segtree[2*pos], segtree[2*pos + 1])\n        \n        def range_query(left, right, n):\n            global segtree\n            left += n\n            right += n\n            ma = -float(inf)\n            while left < right:\n                if left & 1:\n                    ma = max(ma,segtree[left])\n                    left += 1\n                if right & 1:\n                    right -= 1\n                    ma = max(ma, segtree[right])\n                left //= 2\n                right //= 2\n            return ma\n        \n        res = []\n        curobs = [0]\n        for q in queries:\n            if q[0] == 2:\n                ind = bisect.bisect_right(curobs,q[1])\n                #print(curobs, q[1], ind)\n                if q[1] - curobs[ind-1] >= q[2]:\n                    res.append(True)\n                    continue\n                else:\n                    tmp = obsind[curobs[ind-1]]\n                    #print(tmp,segtree,curarr, range_query(0,tmp+1,nn))\n                    if range_query(0,tmp+1,nn) >= q[2]:\n                        res.append(True)\n                    else:\n                        res.append(False)\n            else:\n                tmp = q[1]\n                ind = bisect.bisect(curobs,tmp)\n                if ind == len(curobs):\n                    curobs.append(tmp)\n                    curarr[obsind[tmp]] = tmp - curobs[-2]\n                    update(obsind[tmp], tmp - curobs[-2], nn)\n                else:\n                    before, after = curobs[ind-1], curobs[ind]\n                    curobs.insert(ind,tmp)\n                    curarr[obsind[tmp]] = tmp - before\n                    curarr[obsind[after]] = after - tmp\n                    update(obsind[tmp], tmp - before, nn)\n                    update(obsind[after], after - tmp, nn)\n                #print(curarr)\n                #print(segtree)\n        return res\n\n\n\n\n             \n\n\n        ",
    "submit_ts": 1716652020.0
}