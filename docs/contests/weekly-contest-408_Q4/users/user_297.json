{
    "username": "_manish_gill_",
    "submission": "class Solution {\npublic:\n    int bfs(vector<vector<int>> &graph, int s, int t1, int t2, int nodes) {\n    queue<int> q;\n    vector<int> v(nodes + 4, 0);\n    q.push(s);\n    v[s] = 1;\n    \n    while (!q.empty()) {\n        int u = q.front();\n        q.pop();\n        for (int v1 : graph[u]) {\n            if (!v[v1]) {\n                q.push(v1);\n                v[v1] = 1;\n            }\n        }\n    }\n    return v[t1] || v[t2];\n}\n    \n    bool canReachCorner(int X, int Y, vector<vector<int>>& cs) {\n         vector<pair<pair<int, int>, int>> c(cs.size());\n         vector<vector<int>> graph(cs.size() + 4);\n        int nc=cs.size();\n        \n        for (int i = 0; i < nc; ++i) {\n            c[i].first.first=cs[i][0];\n            c[i].first.second=cs[i][1];\n            c[i].second=cs[i][2];\n        }\n        \n        \n        \n         for (int i = 0; i < nc; ++i) {\n             \n            if (c[i].first.first <= c[i].second) {\n                graph[nc].push_back(i);\n                graph[i].push_back(nc);\n            }\n            if (X - c[i].first.first <= c[i].second) {\n                graph[nc + 2].push_back(i);\n                graph[i].push_back(nc + 2);\n            }\n            if (c[i].first.second <= c[i].second) {\n                graph[nc + 1].push_back(i);\n                graph[i].push_back(nc + 1);\n            }\n            if (Y - c[i].first.second <= c[i].second) {\n                graph[nc + 3].push_back(i);\n                graph[i].push_back(nc + 3);\n            }\n            for (int j = i + 1; j < nc; ++j) {\n                double distance = sqrt(pow(c[i].first.first - c[j].first.first, 2) +\n                                       pow(c[i].first.second - c[j].first.second, 2));\n                int radius_sum = c[i].second + c[j].second;\n                if (radius_sum >= distance) {\n                    graph[i].push_back(j);\n                    graph[j].push_back(i);\n                }\n            }\n        }\n        \n        int ib = 0;\nib = max(ib, bfs(graph, nc, nc + 1, nc + 2, nc + 4)); \n    ib = max(ib, bfs(graph, nc + 3, nc + 2, nc + 1, nc + 4));\n        if (ib){return 0;}\n        return 1;\n    }\n};",
    "submit_ts": "1722137125",
    "subm_id": "1335754919"
}