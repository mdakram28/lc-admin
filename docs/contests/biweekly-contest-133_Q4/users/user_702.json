{
    "username": "pvrreddy",
    "submission": "class Solution:\n    def numberOfPermutations(self, n: int, requirements: List[List[int]]) -> int:\n        MOD = 10**9 + 7\n        MAX_INV = 400\n        \n        # Convert requirements list to a dictionary for quick lookup\n        rm = {r[0] + 1: r[1] for r in requirements}\n    \n        # Initialize DP table\n        permCnt = [[0] * (MAX_INV + 1) for _ in range(n + 1)]\n        permCnt[0][0] = 1\n        \n        # Populate the DP table\n        for length in range(1, n + 1):\n            for inv in range(MAX_INV + 1):\n                for np in range(length):\n                    previnv = inv - np\n                    if previnv >= 0:\n                        permCnt[length][inv] = (permCnt[length][inv] + permCnt[length - 1][previnv]) % MOD\n            \n            # Apply requirements if present\n            if length in rm:\n                targetinv = rm[length]\n                for inv in range(MAX_INV + 1):\n                    if inv != targetinv:\n                        permCnt[length][inv] = 0\n        \n        # Calculate the result\n        res = 0\n        for cnt in permCnt[n]:\n            res = (res + cnt) % MOD\n        \n        return res",
    "submit_ts": "1719070722",
    "subm_id": "1296830143"
}