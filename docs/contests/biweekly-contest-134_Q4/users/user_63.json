{
    "username": "ajinkya1p3",
    "submission": "class Solution {\nprivate:\n    int getAND(int L, int R, vector<int>& LG, vector<int>& nums, vector<vector<int>>& SP) {\n        if (L == R)\n            return nums[L];\n        \n        int d = LG[R - L];\n        return SP[d][L] & SP[d][R - (1 << d)];\n    }\npublic:\n    long long countSubarrays(vector<int>& nums, int k) {\n        int n = nums.size();\n        vector<int> LG(n + 1);\n        vector< vector<int> > SP(17, vector<int>(n));\n\n        for (int i = 2; i <= n; i++)\n            LG[i] = LG[i / 2] + 1;\n        \n        for (int i = 0; i + 1 < n; i++)\n            SP[0][i] = (nums[i] & nums[i + 1]);\n        \n        for (int i = 1; i < 17; i++)\n            for (int j = 0; j + (1 << (i - 1)) < n; j++)\n                SP[i][j] = (SP[i - 1][j] & SP[i - 1][j + (1 << (i - 1))]);\n        \n        long long ans = 0;\n\n        for (int i = 0; i < n; i++)\n        {\n            int ptr = i;\n\n            while (ptr < n)\n            {\n                int left = ptr, right = n - 1, curr = 0;\n                int target = getAND(i, ptr, LG, nums, SP);\n\n                while (left <= right)\n                {\n                    int mid = (left + right) / 2;\n\n                    if (getAND(i, mid, LG, nums, SP) == target)\n                        curr = mid, left = mid + 1;\n                    else\n                        right = mid - 1;\n                }\n\n                if (target == k)\n                    ans += curr - ptr + 1;\n                \n                ptr = curr + 1;\n            }\n        }\n\n        return ans;\n    }\n};",
    "submit_ts": "1720278065",
    "subm_id": "1311692712"
}