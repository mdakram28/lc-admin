{
    "username": "venkat2552004",
    "submission": "class Solution {\npublic:\n\n    struct Trie {\n        unordered_map<char, Trie*> mp;\n        vector<pair<int, int>> end; \n    };\n\n    void insert(Trie*& root, string& word, int idx, int cost) {\n        Trie* node = root;\n        for (char c : word) {\n            if (node->mp.find(c) == node->mp.end())\n                node->mp[c] = new Trie();\n            node = node->mp[c];\n        }\n        node->end.push_back({idx, cost});\n    }\n\n\n    Trie* root;\n    Solution(){\n        root = new Trie();\n    }\n\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        for (int i = 0; i < words.size(); ++i) {\n            insert(root, words[i], i, costs[i]);\n        }\n        return helper(root, target, words);\n    }\n\n    int helper(Trie*& root, string target, vector<string>& words){\n        int n = target.size();\n        vector<int> dp(n + 1, INT_MAX);\n        dp[0] = 0;\n        for (int i = 0; i < n; ++i) {\n            if (dp[i] == INT_MAX) continue;\n            Trie* node = root;\n            for (int j = i; j < n; ++j) {\n                if (!node->mp.count(target[j])) break;\n                node = node->mp[target[j]];\n                for (auto& p : node->end) {\n                    int idx = p.first;\n                    int cost = p.second;\n                    int len = words[idx].size();\n                    if (i + len <= n) {\n                        dp[i + len] = min(dp[i + len], dp[i] + cost);\n                    }\n                }\n            }\n        }\n        return dp[n] == INT_MAX ? -1 : dp[n];\n\n    }\n};",
    "submit_ts": "1720323486",
    "subm_id": "1312376748"
}