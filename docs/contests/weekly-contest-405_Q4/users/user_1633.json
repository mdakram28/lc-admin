{
    "username": "hinataShoyo_10",
    "submission": "//---TLE-----\n// class SegmentTree {\n//     vector<int> tree;\n//     int n;\n\n// public:\n//     SegmentTree(int size) : n(size) {\n//         tree.resize(4 * n, INT_MAX);\n//     }\n\n//     void update(int idx, int value, int node, int node_lb, int node_ub) {\n//         if (node_lb == node_ub) {\n//             tree[node] = value;\n//         } else {\n//             int mid = (node_lb + node_ub) / 2;\n//             if (idx <= mid) {\n//                 update(idx, value, 2 * node + 1, node_lb, mid);\n//             } else {\n//                 update(idx, value, 2 * node + 2, mid + 1, node_ub);\n//             }\n//             tree[node] = min(tree[2 * node + 1], tree[2 * node + 2]);\n//         }\n//     }\n\n//     int query(int l, int r, int node, int node_lb, int node_ub) {\n//         if (l > node_ub || r < node_lb) {\n//             return INT_MAX;\n//         }\n//         if (l <= node_lb && r >= node_ub) {\n//             return tree[node];\n//         }\n//         int mid = (node_lb + node_ub) / 2;\n//         return min(query(l, r, 2 * node + 1, node_lb, mid), query(l, r, 2 * node + 2, mid + 1, node_ub));\n//     }\n\n//     void update(int idx, int value) {\n//         update(idx, value, 0, 0, n - 1);\n//     }\n\n//     int query(int l, int r) {\n//         return query(l, r, 0, 0, n - 1);\n//     }\n// };\n\n\nclass TrieNode {\npublic:\n    vector<TrieNode*> children;\n    int minCost;\n    bool isWordEnd;\n\n    TrieNode() : children(26, nullptr), minCost(INT_MAX), isWordEnd(false) {}\n};\n\nclass Trie {\npublic:\n    TrieNode* root;\n\n    Trie() {\n        root = new TrieNode();\n    }\n\n    void insert(const string& word, int cost) {\n        TrieNode* node = root;\n        for (char c : word) {\n            if (!node->children[c - 'a']) {\n                node->children[c - 'a'] = new TrieNode();\n            }\n            node = node->children[c - 'a'];\n        }\n        node->minCost = min(cost, node->minCost);\n        node->isWordEnd = true;\n    }\n\n    TrieNode* getRoot() {\n        return root;\n    }\n};\n\n\nclass Solution {\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        //<<------TLE---------->>\n//         int m = target.size();\n//         vector<int> dp(m + 1, INT_MAX);\n//         dp[0] = 0;\n\n//         SegmentTree segTree(m + 1);\n//         segTree.update(0, 0);\n\n//         for (int i = 0; i < m; ++i) {\n//             if (dp[i] == INT_MAX) continue;\n//             for (int j = 0; j < words.size(); ++j) {\n//                 int len = words[j].size();\n//                 if (i + len <= m && target.substr(i, len) == words[j]) {\n//                     int newCost = dp[i] + costs[j];\n//                     if (dp[i + len] > newCost) {\n//                         dp[i + len] = newCost;\n//                         segTree.update(i + len, newCost);\n//                     }\n//                 }\n//             }\n//         }\n\n//         return dp[m] == INT_MAX ? -1 : dp[m];\n        \n        \n        Trie trie;\n        int n = target.size();\n        vector<int> dp(n + 1, INT_MAX);\n\n        for (int i = 0; i < words.size(); ++i) {\n            trie.insert(words[i], costs[i]);\n        }\n\n        dp[0] = 0;\n\n        for (int i = 0; i < n; ++i) {\n            if (dp[i] == INT_MAX) continue;\n\n            TrieNode* node = trie.getRoot();\n            for (int j = i; j < n; ++j) {\n                char c = target[j];\n                if (!node->children[c - 'a']) break;\n                node = node->children[c - 'a'];\n                if (node->isWordEnd) {\n                    dp[j + 1] = min(dp[j + 1], dp[i] + node->minCost);\n                }\n            }\n        }\n\n        return dp[n] == INT_MAX ? -1 : dp[n];\n    \n    }\n};",
    "submit_ts": "1720322249",
    "subm_id": "1312344766"
}