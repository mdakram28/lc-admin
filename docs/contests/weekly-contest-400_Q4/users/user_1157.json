{
    "username": "abhishekkaintura071",
    "submission": "class Solution {\npublic:\n    \n    \n    class  SgTree {\npublic:\n    vector<int> tree;\n    int n;\n\n    // Constructor\n     SgTree(vector<int>& vec)\n    {\n        n = vec.size();\n        tree.resize(4 * n);\n        buildss(vec, 0, 0, n - 1);\n    }\n\n\n    void buildss(vector<int>& vec, int nodess, int str,\n               int ends)\n    {\n        if (str == ends) {\n            tree[nodess] = vec[str];\n        }\n        else {\n            int mids = (str + ends) / 2;\n            buildss(vec, 2 * nodess + 1, str, mids);\n            buildss(vec, 2 * nodess + 2, mids + 1, ends);\n\n            \n            tree[nodess]\n                = tree[2 * nodess + 1] & tree[2 * nodess + 2];\n        }\n    }\n\n    int query(int low, int high)\n    {\n        return query(0, 0, n - 1, low, high);\n    }\n\n    int query(int nodess, int str, int ends, int low, int hig)\n    {\n        if (hig < str || ends < low) {\n            return INT_MAX;\n        }\n        if (low <= str && ends <= hig) {\n            return tree[nodess];\n        }\n        int mids = (str + ends) / 2;\n        int p1 = query(2 * nodess + 1, str, mids, low, hig);\n        int p2 = query(2 * nodess + 2, mids + 1, ends, low, hig);\n\n       \n        return p1 & p2;\n    }\n};\n\n\n    \n    \n    \n    \n    \n    int minimumDifference(vector<int>& nums, int k) {\n        int n=nums.size();\n        SgTree st(nums);\n        int ans=INT_MAX;\n          for (int i = 0; i < n; i++) {\n            int low = i - 1, right = n - 1, mids;\n\n\n        while (right - low > 1) {\n            mids = (low + right) / 2;\n            if (st.query(i, mids) <k)\n                right = mids;\n            else\n                low= mids;\n        }\n              if(low!=i-1){\n                  ans=min(ans,abs(st.query(i,low)-k));\n                  \n              }\n              ans=min(ans,abs(k-st.query(i,right)));\n    }\n        return ans;\n    }\n        \n};",
    "submit_ts": 1717300703.0
}