{
    "username": "jessie_sr",
    "submission": "class Solution:\n    def minChanges(self, nums: List[int], k: int) -> int:\n        n = len(nums)\n        count = defaultdict(int)\n        for c in range(n // 2):\n            count[abs(nums[c] - nums[n - c - 1])] += 1\n        \n        values = sorted(count.values(), reverse=True)[:3]\n        rows = [key for key in count.keys() if count[key] in values]\n        dp = [0] * (n // 2)\n        minChange = float(\"inf\")\n\n        for r in rows:\n            for c in range(n // 2):\n                if abs(nums[c] - nums[n - c - 1]) == r:\n                    continue\n                dp[c] += 1\n                if max(k - nums[c], nums[c]) < r and max(k - nums[n - c - 1], nums[n - c - 1]) < r:\n                    dp[c] += 1\n            minChange = min(minChange, sum(dp))\n            dp = [0] * (n // 2)\n        \n        return minChange\n                \n",
    "submit_ts": "1721488594",
    "subm_id": "1327427180"
}