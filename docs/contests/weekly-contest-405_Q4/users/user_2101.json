{
    "username": "ALLADI_SAI_MANOJ",
    "submission": "class Solution:\n    def minimumCost(self, target: str, words: List[str], costs: List[int]) -> int:\n        class TrieNode:\n            def __init__(self):\n                self.children = {}\n                self.costs = []\n\n        class Trie:\n            def __init__(self):\n                self.root = TrieNode()\n\n            def insert(self, word, cost):\n                node = self.root\n                for char in word:\n                    if char not in node.children:\n                        node.children[char] = TrieNode()\n                    node = node.children[char]\n                node.costs.append(cost)\n\n            def search(self, target, start):\n                node = self.root\n                result = []\n                for i in range(start, len(target)):\n                    char = target[i]\n                    if char in node.children:\n                        node = node.children[char]\n                        if node.costs:\n                            result.append((i + 1, min(node.costs)))\n                    else:\n                        break\n                return result\n\n\n        n = len(target)\n        inf = float('inf')\n        dp = [inf] * (n + 1)\n        dp[0] = 0\n\n        trie = Trie()\n        for word, cost in zip(words, costs):\n            trie.insert(word, cost)\n\n        for i in range(n):\n            if dp[i] == inf:\n                continue\n            for end, cost in trie.search(target, i):\n                dp[end] = min(dp[end], dp[i] + cost)\n\n        return dp[n] if dp[n] != inf else -1\n\n\n",
    "submit_ts": "1720322228",
    "subm_id": "1312344196"
}