{
    "username": "Ronak_Ramuka",
    "submission": "class Solution {\npublic:\n    int maximumLength(vector<int>& nums, int k) {\n        int n = nums.size();\n        vector<vector<int>> dp(n, vector<int>(k + 1, 1));\n        int m = 1;\n        vector<int> t(k + 1, -1);\n        vector<unordered_map<int, int>> l(k + 1);\n        \n        for (int i = 0; i < n; i++) {\n            calculateDp(nums, k, dp, t, l, m, i);\n        }\n        return m;\n    }\nprivate:\n    void calculateDp(const vector<int>& nums, int k, vector<vector<int>>& dp,\n                     vector<int>& t, vector<unordered_map<int, int>>& l,\n                     int& m, int idx) {\n        for (int c = 0; c <= k; c++) {\n            for (int p = 0; p < c; p++) {\n                dp[idx][c] = max(dp[idx][c], 1 + t[p]);\n            }\n            if (l[c].count(nums[idx])) {\n                dp[idx][c] = max(dp[idx][c], 1 + l[c][nums[idx]]);\n            }\n            m = max(m, dp[idx][c]);\n        }\n        for (int c = 0; c <= k; c++) {\n            t[c] = max(t[c], dp[idx][c]);\n            l[c][nums[idx]] = max(l[c][nums[idx]], dp[idx][c]);\n        }\n    }\n};\n",
    "submit_ts": 1717861946.0
}