{
    "username": "crusifixx",
    "submission": "class Solution {\n    public long minimumOperations(int[] nums, int[] target) {\n        long[] differences = computeDifferences(nums, target);\n\n        return calculateMinOperations(differences);\n    }\n\n    private long[] computeDifferences(int[] nums, int[] target) {\n        int length = nums.length;\n        long[] differences = new long[length];\n        for (int i = 0; i < length; i++) {\n            differences[i] = (long) target[i] - nums[i];\n        }\n        return differences;\n    }\n\n    private long calculateMinOperations(long[] differences) {\n        long totalOperations = 0;\n        long currentSegmentDiff = 0;\n\n        for (int i = 0; i < differences.length; i++) {\n            long diff = differences[i];\n            if (i == 0 || (currentSegmentDiff > 0 && diff > 0) || (currentSegmentDiff < 0 && diff < 0)) {\n                long additionalOps = Math.abs(diff) - Math.abs(currentSegmentDiff);\n                if (additionalOps > 0) {\n                    totalOperations += additionalOps;\n                }\n                currentSegmentDiff = diff;\n            } else {\n                totalOperations += Math.abs(diff);\n                currentSegmentDiff = diff;\n            }\n        }\n\n        return totalOperations;\n    }\n}\n",
    "submit_ts": "1721532803",
    "subm_id": "1327994463"
}