{
    "username": "rishu_raj_10042002",
    "submission": "class Node{\n    public:\n    vector<int> val;\n    Node* children[26];\n    Node(){\n        val.clear();\n        for(int i=0;i<26;i++)\n            children[i] = NULL;\n    }\n};\nclass Trie{\n    public:\n    Node* root;\n    Trie(){\n        root = new Node();\n    }\n    void insert(string& s,int cost){\n        auto node = root;\n        for(int i=0;i<s.length();i++){\n            if(node->children[s[i]-'a']==NULL) \n                node->children[s[i]-'a'] = new Node();\n            node = node->children[s[i]-'a'];\n            if(i==s.length()-1) \n                node->val.push_back(cost);\n        }\n    }\n    void find(int ind,string& s,vector<int>& dp){\n        auto node = root;\n        int len = 0;\n        for(int i=ind;i<s.length();i++){\n            if(ind+len>s.length()) break;\n            if(node->children[s[i]-'a']==NULL) break;\n    \n            len++;\n            node = node->children[s[i]-'a'];\n            for(auto it : node->val){\n            dp[ind+len] = min(dp[ind+len],dp[ind]+it);\n            // cout<<i+len<<\" \"<<dp[i]+it<<\" \"<<i<<\"\\n\";\n            }\n        }\n    }\n};\nclass Solution {\npublic:\n    int minimumCost(string s, vector<string>& words, vector<int>& costs) {\n        Trie* curTrie = new Trie();\n        for(int i=0;i<words.size();i++) curTrie->insert(words[i],costs[i]);\n        int n = s.length();\n        vector<int> dp(n+1,1e9);\n        dp[0] = 0;\n        for(int i=0;i<n;i++){\n            if(dp[i]==1e9) continue;\n            curTrie->find(i,s,dp);\n        }\n        int ans = dp[n];\n        // for(int i=0;i<=n;i++) cout<<dp[i]<<\" \";\n        // cout<<\"\\n\";\n        if(dp[n]==1e9) return -1;\n        return ans;\n    }\n};",
    "submit_ts": "1720323932",
    "subm_id": "1312387569"
}