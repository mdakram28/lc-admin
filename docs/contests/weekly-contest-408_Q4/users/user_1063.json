{
    "username": "rentyydrip",
    "submission": "class UnionFind:\n    def __init__(self):\n        self.parent = {}\n\n    def find(self, v): # Places parents if they don't exist, does path compression\n        if v not in self.parent:\n            self.parent[v] = v\n            return self.parent[v]\n        elif self.parent[v] == v:\n            return self.parent[v]\n        else:\n            self.parent[v] = self.find(self.parent[v])\n            return self.parent[v]\n    \n    def union(self, v1, v2): # Unions v1 with v2, sets v2 parent as parent for both\n        v1_parent = self.find(v1)\n        v2_parent = self.find(v2)\n        self.parent[v1_parent] = v2_parent\n        \n\nclass Solution:\n    def canReachCorner(self, X: int, Y: int, circles: List[List[int]]) -> bool:\n        \n        import math\n\n        def does_intersect_with_bounds_x(h, k, r, x_value, some_x, some_y):\n            if x_value < 0 or x_value > some_x:\n                return False\n\n            distance_to_line = abs(x_value - h)\n            if distance_to_line > r:\n                return False\n\n            y_min = k - math.sqrt(r**2 - distance_to_line**2)\n            y_max = k + math.sqrt(r**2 - distance_to_line**2)\n\n            return not (y_max < 0 or y_min > some_y)\n    \n        def does_intersect_with_bounds_y(h, k, r, y_value, some_x, some_y):\n            if y_value < 0 or y_value > some_y:\n                return False\n\n            distance_to_line = abs(y_value - k)\n            if distance_to_line > r:\n                return False\n\n            x_min = h - math.sqrt(r**2 - distance_to_line**2)\n            x_max = h + math.sqrt(r**2 - distance_to_line**2)\n\n            return not (x_max < 0 or x_min > some_x)\n            \n        def do_circles_intersect_with_bounds(h1, k1, r1, h2, k2, r2, some_x, some_y):\n            distance = math.sqrt((h2 - h1)**2 + (k2 - k1)**2)\n\n            if distance > r1 + r2 or distance < abs(r1 - r2):\n                return False\n\n            def circle_within_bounds(h, k, r):\n                return (h - r <= some_x and h + r >= 0) and (k - r <= some_y and k + r >= 0)\n\n            return circle_within_bounds(h1, k1, r1) or circle_within_bounds(h2, k2, r2)\n            \n        uf = UnionFind()\n        uf.find(f'x=0')\n        uf.find(f'x={X}')\n        uf.find(f'y=0')\n        uf.find(f'y={Y}')\n        \n        for c in circles:\n            c_str = f'x={c[0]},y={c[1]},r={c[2]}'\n            if does_intersect_with_bounds_x(c[0], c[1], c[2], 0, X, Y):\n                uf.union(f'x=0', c_str)\n            if does_intersect_with_bounds_x(c[0], c[1], c[2], X, X, Y):\n                uf.union(f'x={X}', c_str)\n            if does_intersect_with_bounds_y(c[0], c[1], c[2], 0, X, Y):\n                uf.union(f'y=0', c_str)\n            if does_intersect_with_bounds_y(c[0], c[1], c[2], Y, X, Y):\n                uf.union(f'y={Y}', c_str)\n        \n        for i in range(len(circles)):\n            c1 = circles[i]\n            for j in range(i):\n                c2 = circles[j]\n                if do_circles_intersect_with_bounds(c1[0], c1[1], c1[2], c2[0], c2[1], c2[2], X, Y):\n                    uf.union(f'x={c1[0]},y={c1[1]},r={c1[2]}', f'x={c2[0]},y={c2[1]},r={c2[2]}')\n        \n        return uf.find(f'x={X}') != uf.find(f'y={Y}') and \\\n                uf.find(f'x=0') != uf.find(f'y=0') and \\\n                uf.find(f'x=0') != uf.find(f'x={X}') and \\\n                uf.find(f'y=0') != uf.find(f'y={Y}')\n        ",
    "submit_ts": "1722138093",
    "subm_id": "1335781945"
}