{
    "username": "i_love_xiaoshagua_cpp",
    "submission": "/*\nMaximum Manhattan distance is the maximum of\n(px + py) - (px + py)\n(px - py) - (px - py)\n(-px - py) - (-px - py)\n(py - px) - (py - px)\na1, b1, c1, d1\na2, b2, c2, d2\n...\nan, bn, cn, dn\nremove ai, bi, ci, di\nfind the maximum of each side\n*/\n\nclass Solution {\npublic:\n    int minimumDistance(vector<vector<int>>& points) {\n        map<int, int> a, b;\n        for (const vector<int>& p : points) {\n            int x = p[0], y = p[1];\n            a[x + y]++;\n            b[x-y]++;\n        }\n        int ans = 400000000;\n        for (const vector<int>& p : points) {\n            int x = p[0], y = p[1];\n            a[x+y]--;\n            b[x-y]--;\n            if(a[x+y]==0)a.erase(x+y);\n            if(b[x-y]==0)b.erase(x-y);\n            // cout<<a.rbegin()->first<<endl;\n            ans=min(ans, max(a.rbegin()->first-a.begin()->first,b.rbegin()->first-b.begin()->first));\n            a[x+y]++;\n            b[x-y]++;\n        }\n        return ans;\n    }\n};"
}