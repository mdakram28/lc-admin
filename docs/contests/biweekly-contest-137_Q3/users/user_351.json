{
    "username": "Ali",
    "submission": "class Solution {\n    public long maximumValueSum(int[][] b) {\n        int R = b.length;\n        int C = b[0].length;\n        var usedR = new boolean[R];\n        var usedC = new boolean[C];\n        \n        var max = new int[R][3];\n        \n        for (int r = 0; r < R; r++) {\n            var pq = new PriorityQueue<int[]>((u,v) -> v[2] - u[2]);\n            for (int c = 0; c < C; c++) {\n                pq.add(new int[] {r,c,b[r][c]});\n            }\n            for (int i = 0; i < 3; i++) {\n                max[r][i] = pq.poll()[1];\n            }\n        }\n        var m = new PriorityQueue<int[]>((u,v) -> v[2] - u[2]);\n        for (int r = 0; r < R; r++) {\n            for (int c = 0; c < C; c++) {\n                m.add(new int[] { r, c, b[r][c] });\n            }\n        }\n        return backtracking(max, usedR, usedC, R, C, 3, b, m);\n    }\n\n    private long backtracking(int[][] max, boolean[] usedR, boolean[] usedC, int R, int C, int i, int[][] b, PriorityQueue<int[]> m) {\n        if (i == 1) {\n            var t = new ArrayList<int[]>();\n            while (true) {\n                var u = m.poll();\n                t.add(u);\n                if (!usedR[u[0]] && !usedC[u[1]]) {\n                    m.addAll(t);\n                    return u[2];\n                }\n            }\n        }\n        long res = Long.MIN_VALUE;\n        for (int r = 0; r < R; r++) {\n            if (!usedR[r]) {\n                usedR[r] = true;\n                for (int c = 0; c < 3; c++) {\n                    if (!usedC[max[r][c]]) {\n                        usedC[max[r][c]] = true;\n                        res = Math.max(res, b[r][max[r][c]] + backtracking(max, usedR, usedC, R, C, i - 1, b, m));\n                        usedC[max[r][c]] = false;\n                    }\n                }\n                usedR[r] = false;\n            }\n        }\n        return res;\n    }\n}",
    "submit_ts": "1723908158",
    "subm_id": "1359140654"
}