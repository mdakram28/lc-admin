{
    "username": "Citypop",
    "submission": "class Solution {\n    const int MAX = 100;\n    const int64_t INF = (int64_t)2e18;\npublic:\n    int64_t dfs(int n, std::vector<std::vector<int>>& a, std::vector<std::vector<int>>& c, int r, std::bitset<100> cs, std::vector<std::unordered_map<std::bitset<100>, int64_t>>& dp) {\n        if(cs.count() == 3) {\n            return 0;\n        }\n        if(r == n) {\n            return -INF;\n        }\n        \n        if(dp[r].find(cs) != dp[r].end()) {\n            return dp[r][cs];\n        }\n        \n        int64_t res = dfs(n, a, c, r + 1, cs, dp);\n        \n        for(int i = 0; i < 3; i++) {\n            if(cs.test(c[r][i])) {\n                continue;\n            }\n            \n            cs.set(c[r][i]);\n            res = std::max(res, dfs(n, a, c, r + 1, cs, dp) + a[r][i]);\n            cs.set(c[r][i], 0);\n        }\n        \n        return dp[r][cs] = res;\n    }\n    \n    long long maximumValueSum(vector<vector<int>>& board) {\n        int n = board.size();\n        int m = board[0].size();\n        \n        std::vector<std::vector<int>> a(n, std::vector<int>(3, 0));\n        std::vector<std::vector<int>> c(n, std::vector<int>(3, 0));\n        std::vector<std::pair<int, int>> tmp(m);\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < m; j++) {\n                tmp[j] = {board[i][j], j};\n            }\n            std::sort(tmp.begin(), tmp.end());\n            \n            for(int j = 0; j < 3; j++) {\n                a[i][j] = tmp[m - 1 - j].first;\n                c[i][j] = tmp[m - 1 - j].second;\n            }\n        }\n        \n        std::vector<std::unordered_map<std::bitset<100>, int64_t>> dp(n);\n        std::bitset<100> cs;\n        cs.reset();\n        return dfs(n, a, c, 0, cs, dp);\n    }\n};",
    "submit_ts": "1723910172",
    "subm_id": "1359220041"
}