{
    "username": "taran_1407",
    "submission": "class Solution {\n    public int maximumLength(int[] A, int K) {\n        int N = A.length;\n        // int[][] dp = new int[1+N][1+K];\n        // for(int i = 1; i<= N; i++)Arrays.fill(dp[i], -1);\n        SegmentTree[] st = new SegmentTree[1+K];\n        for(int i = 0; i<= K; i++)st[i] = new SegmentTree(1+N);\n        Map<Integer, Integer> prev = new TreeMap<>();\n        \n        long ans = 1;\n        for(int i = 1; i<= N; i++){\n            // dp[i][0] = 1;\n            st[0].update(i, 1);\n            for(int k = 0; k<= K; k++){\n                \n                \n                if(k>0)st[k].update(i, st[k-1].query(1, i-1)+1);\n                if(prev.containsKey(A[i-1])){\n                    int ind = prev.get(A[i-1]);\n                    st[k].update(i, st[k].query(ind, ind)+1);\n                }\n                // for(int ii = 1; ii< i; ii++){\n                //     if(k>0 && A[i-1] != A[ii-1] && dp[ii][k-1] != -1)dp[i][k] = Math.max(dp[i][k], dp[ii][k-1]+1);\n                //     if(A[i-1] == A[ii-1] && dp[ii][k] != -1)dp[i][k] = Math.max(dp[i][k], dp[ii][k]+1);\n                // }\n                ans = Math.max(ans, st[k].query(i, i));\n                // ans = Math.max(ans, dp[i][k]);\n            }\n            prev.put(A[i-1], i);\n        }\n        return (int)ans;\n    }\n    public class SegmentTree{\n        private long initValue(){return -1;}\n        private long update(long oldValue, long newValue){return Math.max(oldValue,newValue);}\n        private long merge(long le, long ri){return Math.max(le,ri);}\n        private long initQuery(){return initValue();}\n\n        private int m= 1;\n        private long[] t;\n        public SegmentTree(int n){\n            while(m<n)m<<=1;\n            t = new long[m<<1];\n            Arrays.fill(t, initValue());\n        }\n        public SegmentTree(long[] a){\n            while(m<a.length)m<<=1;\n            t = new long[m<<1];\n            Arrays.fill(t, initValue());\n            for(int i = 0; i< a.length; i++)t[i+m] = a[i];\n            for(int i = m-1; i>0; i--)t[i] = merge(t[i<<1], t[i<<1|1]);\n        }\n        public void update(int i, long val){\n            t[i += m]  = update(t[i], val);\n            for(i>>=1;i>0;i>>=1)t[i] = merge(t[i<<1], t[i<<1|1]);\n        }\n        public long query(int l, int r){\n            long lans = initQuery(), rans = initQuery();\n            for(l+=m,r+=m+1;l<r;l>>=1,r>>=1){\n                if((l&1)==1)lans = merge(lans, t[l++]);\n                if((r&1)==1)rans = merge(t[--r], rans);\n            }\n            return merge(lans, rans);\n        }\n    }\n}",
    "submit_ts": "1717859283",
    "subm_id": "1281716977"
}