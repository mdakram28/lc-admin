{
    "username": "yingwu_sg",
    "submission": "class Solution {\npublic:\n    long long minimumOperations(vector<int>& nums, vector<int>& target) {\n        //changes = max(left smaller, right smaller)\n         \n         vector<vector<int>> diff;\n         int larger = -1;\n         vector<int> curr_diff;\n         for (int i = 0; i < nums.size(); i++) {\n             int curd = nums[i] - target[i];\n             if (curd > 0) {\n                 if (larger == 0 && curr_diff.size() > 0){\n                     diff.push_back(curr_diff);\n                     curr_diff = {};\n                 }\n\n                 curr_diff.push_back(curd);\n                 larger = 1;\n             }\n             else if (curd < 0) {\n                 if (larger == 1 && curr_diff.size() > 0) {\n                     diff.push_back(curr_diff);\n                     curr_diff = {};\n                 }\n                 curr_diff.push_back(abs(curd));\n                 larger = 0;\n             }\n             else {\n                 if (curr_diff.size() > 0) {\n                     diff.push_back(curr_diff);\n                     curr_diff = {};\n                 }\n             }\n         }\n\n         if (curr_diff.size() > 0)\n             diff.push_back(curr_diff);\n\n         long long ans = 0;\n         for (int j = 0; j < diff.size(); j++) {\n             vector<int> leftSmaller(diff[j].size());\n             stack<pair<int, int>> ltor;\n             leftSmaller[0] = 0;\n             ltor.push({ diff[j][0], 0 });\n             for (int i = 1; i < diff[j].size(); i++) {\n                 while (!ltor.empty() && ltor.top().first > diff[j][i])\n                     ltor.pop();\n                 if (ltor.empty())\n                     leftSmaller[i] = 0;\n                 else\n                     leftSmaller[i] = ltor.top().first;\n                 ltor.push({ diff[j][i], i });\n             }\n\n             vector<int> rightSmaller(diff[j].size());\n             stack<pair<int, int>> rtol;\n             rightSmaller[diff[j].size() - 1] = 0;\n             rtol.push({ diff[j][diff[j].size() - 1], diff[j].size() - 1 });\n             for (int i = diff[j].size() - 2; i >= 0; i--) {\n                 while (!rtol.empty() && rtol.top().first >= diff[j][i])\n                     rtol.pop();\n                 if (rtol.empty())\n                     rightSmaller[i] = 0;\n                 else\n                     rightSmaller[i] = rtol.top().first;\n\n                 rtol.push({diff[j][i], i});\n             }\n\n             for (int i = 0; i < diff[j].size(); i++) {\n                 ans += (diff[j][i] - max(leftSmaller[i], rightSmaller[i]));\n             }\n         }\n\n         return ans;\n    }\n};",
    "submit_ts": "1721533178",
    "subm_id": "1328003078"
}