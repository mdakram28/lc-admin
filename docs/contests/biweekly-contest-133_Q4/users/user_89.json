{
    "username": "profchi",
    "submission": "class Solution {\n    int mod = 1_000_000_007;\n    int max;\n    \n    Integer [][] memo;\n    \n    public int numberOfPermutations(int n, int[][] requirements) {\n        Arrays.sort(requirements, (a ,b) -> a[0] - b[0]);\n        \n        int [][] req = requirements;\n        int [] expected = new int [n];\n        \n        Arrays.fill(expected, -1);\n        \n        max = 1;\n        \n        for (int [] r : req) {\n            max = Math.max(max, r[1]);    \n        }\n        \n        memo = new Integer [n][max + 3];\n        \n        expected[req[0][0]] = req[0][1];\n        \n        for (int i = 1; i < requirements.length; ++i) {\n            if (req[i][0] == req[i - 1][0] && req[i][1] == req[i - 1][1])\n                continue;\n            else if (req[i][1] < req[i - 1][1])\n                return 0;\n            \n            expected[req[i][0]] = req[i][1];\n        }\n        \n        //System.out.println(Arrays.toString(expected));\n        \n        int result = solve(0, 0, n, expected);\n        \n        return result;\n    }\n    \n    private int solve(int idx, int inv, int n, int [] expected) {\n        //System.out.println(idx + \" \" + inv);\n        \n        if (idx == n)\n            return 1;\n        else if (memo[idx][inv] != null)\n            return memo[idx][inv];\n        \n        int result = 0;\n        int nextInv;\n        \n        for (int i = 0; i <= idx; ++i) {\n            nextInv = inv + i;\n            \n            nextInv = Math.min(nextInv, max + 1);\n            \n            if (expected[idx] != -1 && expected[idx] != nextInv)\n                continue;\n            \n            result += solve(idx + 1, nextInv, n, expected);\n            result %= mod;\n        }\n        \n        memo[idx][inv] = result;\n        return result;\n    }\n}",
    "submit_ts": 1719068509.0
}