{
    "username": "Navdeep1609",
    "submission": "struct TrieNode {\n    unordered_map<char, TrieNode*> children;\n    int minCost;\n    bool isEndOfWord;\n    TrieNode() : minCost(INT_MAX), isEndOfWord(false) {}\n};\n\nclass Trie {\npublic:\n    Trie() { root = new TrieNode(); }\n\n    void insert(const string& word, int cost) {\n        TrieNode* node = root;\n        for (char c : word) {\n            if (!node->children.count(c)) {\n                node->children[c] = new TrieNode();\n            }\n            node = node->children[c];\n        }\n        node->isEndOfWord = true;\n        node->minCost = min(node->minCost, cost);\n    }\n\n    TrieNode* getRoot() { return root; }\n    TrieNode* root;\n};\n\nclass Solution {\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int n = target.size();\n        Trie trie;\n        for (int i = 0; i < words.size(); ++i) {\n            trie.insert(words[i], costs[i]);\n        }\n        vector<int> dp(n + 1, INT_MAX);\n        dp[0] = 0;\n        for (int i = 0; i < n; ++i) {\n            if (dp[i] == INT_MAX)\n                continue;\n            TrieNode* node = trie.getRoot();\n            for (int j = i; j < n; ++j) {\n                if (!node->children.count(target[j]))\n                    break;\n                node = node->children[target[j]];\n                if (node->isEndOfWord) {\n                    if (dp[j + 1] > dp[i] + node->minCost) {\n                        // cout<<\"here\"<<endl;\n                        dp[j + 1] = dp[i] + node->minCost;\n                    }\n                }\n            }\n        }\n        return dp[n] == INT_MAX ? -1 : dp[n];\n    }\n};",
    "submit_ts": "1720322782",
    "subm_id": "1312358970"
}