{
    "username": "neko643",
    "submission": "class Solution {\npublic:\n    int C(int a, int b) {\n        long long ans = 1;\n        for(int i = b + 1; i <= a; i++) {\n            ans *= i;\n            ans /= i - b;\n        }\n        return ans;\n    }\n    \n    int waysToReachStair(int k) {\n        /*\n            stairs are 0 to inf\n            if he don't go down on the first move, he can't get lower than the initial position.\n            if we jump n times, we can go down n + 1 times. jumping n times = 2^n - 1\n            -> 2^n - 1 - (n + 1) to 2^n - 1\n        */\n        int n = 0, ans = 0;\n        while(1 + (1 << n) - 1 - (n + 1) <= k) {\n            int maxreach = 1 + (1 << n) - 1;\n            n++;\n            if(maxreach < k) {\n                continue;\n            }\n            int back = maxreach - k;\n            ans += C(n, back);\n        }\n        return ans;\n    }\n};",
    "submit_ts": 1716088237.0
}