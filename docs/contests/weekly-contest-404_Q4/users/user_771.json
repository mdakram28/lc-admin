{
    "username": "rozhkov",
    "submission": "class Solution:\n    def minimumDiameterAfterMerge(self, edges1: List[List[int]], edges2: List[List[int]]) -> int:\n        def minD(edges):\n            E = defaultdict(set)\n            n = len(edges) + 1\n            deg = [0]*n\n            \n            if n < 3:\n                return n - 1, n - 1\n            del_nodes = set()\n            for u, v in edges:\n                E[u].add(v)\n                E[v].add(u)\n                deg[u] += 1\n                deg[v] += 1\n                \n            d = 0\n            cand = [i for i in range(n) if len(E[i]) == 1]\n            \n            while len(del_nodes) < n - 2:\n                to_del = set()\n                for i in cand:\n                    to_del.add(i)\n                    deg[i] = 0\n                    \n                cand = []\n                for dn in to_del:\n                    for nei in E[dn]:\n                        deg[nei] -= 1\n                        if deg[nei] == 1:\n                            cand.append(nei)\n                        \n                for dn in to_del:\n                    del_nodes.add(dn)\n                d += 1\n                \n            return d + n - len(del_nodes) - 1, 2 * d + n - len(del_nodes) - 1\n        \n        d1, self1 = minD(edges1)\n        d2, self2 = minD(edges2)\n        return max(d1 + d2 + 1, self1, self2)\n                \n                        \n                \n            ",
    "submit_ts": "1719719596",
    "subm_id": "1304445831"
}