{
    "username": "lalla1833",
    "submission": "class TrieNode {\npublic:\n    unordered_map<char, TrieNode*> children;\n    int minCost;\n\n    TrieNode() : minCost(INT_MAX) {}\n};\n\nclass Trie {\npublic:\n    TrieNode* root;\n\n    Trie() {\n        root = new TrieNode();\n    }\n\n    void insert(string word, int cost) {\n        TrieNode* node = root;\n        for (char ch : word) {\n            if (!node->children[ch]) {\n                node->children[ch] = new TrieNode();\n            }\n            node = node->children[ch];\n        }\n        node->minCost = min(node->minCost, cost);\n    }\n\n    int search(string prefix) {\n        TrieNode* node = root;\n        for (char ch : prefix) {\n            if (!node->children[ch]) {\n                return INT_MAX;\n            }\n            node = node->children[ch];\n        }\n        return node->minCost;\n    }\n};\n\nclass Solution {\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int n = target.size();\n        Trie trie;\n        for (int i = 0; i < words.size(); ++i) {\n            trie.insert(words[i], costs[i]);\n        }\n\n        vector<int> dp(n + 1, INT_MAX);\n        dp[0] = 0;\n\n        for (int i = 0; i < n; ++i) {\n            if (dp[i] == INT_MAX) continue;  // Skip unreachable states\n\n            TrieNode* node = trie.root;\n            for (int j = i; j < n; ++j) {\n                char ch = target[j];\n                if (!node->children[ch]) break;\n                node = node->children[ch];\n                if (node->minCost != INT_MAX) {\n                    dp[j + 1] = min(dp[j + 1], dp[i] + node->minCost);\n                }\n            }\n        }\n\n        return dp[n] == INT_MAX ? -1 : dp[n];\n    }\n};",
    "submit_ts": "1720321000",
    "subm_id": "1312310687"
}