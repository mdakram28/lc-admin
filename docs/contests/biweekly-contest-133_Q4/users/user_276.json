{
    "username": "Mryash08",
    "submission": "class Solution {\n    private static final int MOD = 1_000_000_007;\n    public int numberOfPermutations(int n, int[][] requirements) {\n        \n       Map<Integer, Integer> freqMap = new HashMap<>();\n        for (int[] req : requirements) {\n            freqMap.put(req[0] + 1, req[1]);\n        }\n\n        long[][] permCounts = new long[n + 1][400 + 1];\n        permCounts[0][0] = 1;\n\n\n        for (int length = 1; length <= n; length++) {\n            for (int inv = 0; inv <= 400; inv++) {\n                for (int newPos = 0; newPos < length; newPos++) {\n                    int prevInv = inv - newPos;\n                    if (prevInv >= 0) {\n                        permCounts[length][inv] = (permCounts[length][inv] + permCounts[length - 1][prevInv]) % MOD;\n                    }\n                }\n            }\n\n\n            if (freqMap.containsKey(length)) {\n                int targetInv = freqMap.get(length);\n                for (int inv = 0; inv <= 400; inv++) {\n                    if (inv != targetInv) {\n                        permCounts[length][inv] = 0;\n                    }\n                }\n            }\n        }\n\n        long result = 0;\n        for (long count : permCounts[n]) {\n            result = (result + count) % MOD;\n        }\n\n\n        return (int) result;\n    }\n}",
    "submit_ts": 1719070014.0
}