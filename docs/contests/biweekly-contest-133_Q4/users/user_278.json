{
    "username": "Ronak_Ramuka",
    "submission": "import java.util.Arrays;\n\nclass Solution {\n    private static final int MOD = 1_000_000_007;\n    private static final int MAX_INV = 400;\n\n    public int numberOfPermutations(int n, int[][] reqs) {\n        int[][] dp = new int[n + 1][MAX_INV + 1];\n        dp[0][0] = 1;\n\n        int[] reqInv = initializeRequirements(n, reqs);\n\n        fillDPTable(dp, n, reqInv);\n\n        return computeFinalResult(dp, n, reqInv);\n    }\n\n    private int[] initializeRequirements(int n, int[][] reqs) {\n        int[] reqInv = new int[n];\n        Arrays.fill(reqInv, -1);\n        for (int[] req : reqs) {\n            reqInv[req[0]] = req[1];\n        }\n        return reqInv;\n    }\n\n    private void fillDPTable(int[][] dp, int n, int[] reqInv) {\n        for (int len = 1; len <= n; ++len) {\n            for (int inv = 0; inv <= MAX_INV; ++inv) {\n                for (int k = 0; k < len; ++k) {\n                    if (inv >= k) {\n                        dp[len][inv] = (dp[len][inv] + dp[len - 1][inv - k]) % MOD;\n                    }\n                }\n            }\n\n            applyInversionRequirement(dp, len, reqInv);\n        }\n    }\n\n    private void applyInversionRequirement(int[][] dp, int len, int[] reqInv) {\n        if (reqInv[len - 1] != -1) {\n            int reqInvVal = reqInv[len - 1];\n            for (int inv = 0; inv <= MAX_INV; ++inv) {\n                if (inv != reqInvVal) {\n                    dp[len][inv] = 0;\n                }\n            }\n        }\n    }\n\n    private int computeFinalResult(int[][] dp, int n, int[] reqInv) {\n        int finalReqInv = reqInv[n - 1];\n        if (finalReqInv == -1) {\n            int res = 0;\n            for (int inv = 0; inv <= MAX_INV; inv++) {\n                res = (res + dp[n][inv]) % MOD;\n            }\n            return res;\n        } else {\n            return dp[n][finalReqInv];\n        }\n    }\n}\n",
    "submit_ts": "1719069718",
    "subm_id": "1296804450"
}