{
    "username": "rishiimaheshwari",
    "submission": "class Solution {\n\n    // Helper function to perform BFS and check connectivity\n    private boolean bfs(List<List<Integer>> graph, int start, int target1, int target2, int n) {\n        boolean[] visited = new boolean[n + 4];\n        Queue<Integer> queue = new LinkedList<>();\n        \n        queue.add(start);\n        visited[start] = true;\n        \n        while (!queue.isEmpty()) {\n            int node = queue.poll();\n            \n            if (node == target1 || node == target2) {\n                return true;\n            }\n            \n            for (int neighbor : graph.get(node)) {\n                if (!visited[neighbor]) {\n                    queue.add(neighbor);\n                    visited[neighbor] = true;\n                }\n            }\n        }\n        \n        return false;\n    }\n\n    // Main function to check if we can reach from (0, 0) to (X, Y)\n    public boolean canReachCorner(int X, int Y, int[][] circles) {\n        int nc = circles.length;\n        List<List<Integer>> graph = new ArrayList<>();\n        \n        // Initialize the graph with nc + 4 nodes\n        for (int i = 0; i < nc + 4; i++) {\n            graph.add(new ArrayList<>());\n        }\n\n        // Build the graph\n        for (int i = 0; i < nc; i++) {\n            if (circles[i][0] <= circles[i][2]) {\n                graph.get(nc).add(i);\n                graph.get(i).add(nc);\n            }\n            if (X - circles[i][0] <= circles[i][2]) {\n                graph.get(nc + 2).add(i);\n                graph.get(i).add(nc + 2);\n            }\n            if (circles[i][1] <= circles[i][2]) {\n                graph.get(nc + 1).add(i);\n                graph.get(i).add(nc + 1);\n            }\n            if (Y - circles[i][1] <= circles[i][2]) {\n                graph.get(nc + 3).add(i);\n                graph.get(i).add(nc + 3);\n            }\n            for (int j = i + 1; j < nc; ++j) {\n                double dist = Math.sqrt(Math.pow(circles[i][0] - circles[j][0], 2) + Math.pow(circles[i][1] - circles[j][1], 2));\n                int radSum = circles[i][2] + circles[j][2];\n                if (radSum >= dist) {\n                    graph.get(i).add(j);\n                    graph.get(j).add(i);\n                }\n            }\n        }\n\n        // Check if there's a path from start to the end points using BFS\n        boolean path1 = bfs(graph, nc, nc + 1, nc + 2, nc + 4);\n        boolean path2 = bfs(graph, nc + 3, nc + 2, nc + 1, nc + 4);\n\n        return !( path1 || path2);\n    }\n}\n",
    "submit_ts": "1722138358",
    "subm_id": "1335788744"
}