{
    "username": "shrudex",
    "submission": "from typing import List\n\nclass Solution:\n    def isPeak(nums, i):\n        if i <= 0 or i >= len(nums) - 1:\n            return False\n        return nums[i] > nums[i - 1] and nums[i] > nums[i + 1]\n\n    class SegmentTree:\n        def __init__(self, nums):\n            self.n = len(nums)\n            self.tree = [0] * (4 * self.n)\n            self.createSegmentTree(nums, 0, 0, self.n - 1)\n\n        def createSegmentTree(self, nums, node, st, end):\n            if st == end:\n                self.tree[node] = 1 if Solution.isPeak(nums, st) else 0\n            else:\n                m = (st + end) // 2\n                self.createSegmentTree(nums, 2 * node + 1, st, m)\n                self.createSegmentTree(nums, 2 * node + 2, m + 1, end)\n                self.tree[node] = self.tree[2 * node + 1] + self.tree[2 * node + 2]\n\n        def updateSegmentTree(self, nums, index):\n            self._update(nums, 0, 0, self.n - 1, index)\n\n        def _update(self, nums, node, st, end, index):\n            if st == end:\n                self.tree[node] = 1 if Solution.isPeak(nums, index) else 0\n            else:\n                m = (st + end) // 2\n                if st <= index <= m:\n                    self._update(nums, 2 * node + 1, st, m, index)\n                else:\n                    self._update(nums, 2 * node + 2, m + 1, end, index)\n                self.tree[node] = self.tree[2 * node + 1] + self.tree[2 * node + 2]\n\n        def queryInSegmentTree(self, l, r):\n            return self._query(0, 0, self.n - 1, l, r)\n\n        def _query(self, node, st, end, l, r):\n            if r < st or end < l:\n                return 0\n            if l <= st and end <= r:\n                return self.tree[node]\n            m = (st + end) // 2\n            leftQuery = self._query(2 * node + 1, st, m, l, r)\n            rightQuery = self._query(2 * node + 2, m + 1, end, l, r)\n            return leftQuery + rightQuery\n\n    def countOfPeaks(self, nums: List[int], queries: List[List[int]]) -> List[int]:\n        n = len(nums)\n        results = []\n        segmentTree = self.SegmentTree(nums)\n\n        for q in queries:\n            if q[0] == 1:\n                l, r = q[1], q[2]\n                results.append(segmentTree.queryInSegmentTree(l + 1, r - 1))\n            elif q[0] == 2:\n                index, val = q[1], q[2]\n                nums[index] = val\n                if index > 0: segmentTree.updateSegmentTree(nums, index - 1)\n                segmentTree.updateSegmentTree(nums, index)\n                if index < n - 1: segmentTree.updateSegmentTree(nums, index + 1)\n\n        return results\n",
    "submit_ts": 1718508316.0
}