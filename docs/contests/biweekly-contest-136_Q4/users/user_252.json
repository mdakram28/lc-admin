{
    "username": "Ometek",
    "submission": "class Solution:\n    def DFS(self, w, parent, graph, dist):\n        if (len(graph[w]) == 1 and graph[w][0] == parent):\n            return\n\n        for v, e in graph[w]:\n            if (v == parent):\n                continue\n            self.DFS(v, w, graph, dist)\n\n            dist[w] = max(dist[w], dist[v] + e)\n\n\n    def results(self, w, dist_up, parent, graph, dist_down, ans):\n        ans[w] = max(dist_up, dist_down[w])\n\n        maxi1, v1 = 0, None\n        maxi2, v2 = 0, None\n\n        for v, e in graph[w]:\n            if (v == parent):\n                continue\n                \n            d = dist_down[v] + e\n\n            if (d > maxi1):\n                maxi2, v2 = maxi1, v1\n                maxi1, v1 = d, v\n            elif (d > maxi2):\n                maxi2, v2 = d, v\n            \n        for v, e in graph[w]:\n            if (v == parent):\n                continue\n\n            maxi = maxi1 if v1 != v else maxi2\n            maxi = max(maxi, dist_up)\n            maxi += 2 - (w % 2)\n\n            self.results(v, maxi, w, graph, dist_down, ans)    \n\n\n    def timeTaken(self, edges: List[List[int]]) -> List[int]:\n        n = len(edges) + 1\n        graph = [[] for _ in range(n)]\n\n        for a, b in edges:\n            graph[a].append((b, 2 - (b % 2)))\n            graph[b].append((a, 2 - (a % 2)))\n\n        dist_down = [0] * (n + 1)\n\n        self.DFS(0, -1, graph, dist_down)\n\n        ans = [0] * n\n\n        self.results(0, 0, -1, graph, dist_down, ans)\n\n        return ans",
    "submit_ts": "1722699405",
    "subm_id": "1343210607"
}