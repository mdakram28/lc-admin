{
    "username": "WORTH_IT",
    "submission": "class Solution {\n    public int minimumDiameterAfterMerge(int[][] edges1, int[][] edges2) {\n        int dia1 = solve(edges1);\n        int dia2 = solve(edges2);\n        int ans = (dia1 + 1) / 2 + (dia2 + 1) / 2 + 1;\n        ans = Math.max(ans, dia1);\n        ans = Math.max(ans, dia2);\n        return ans;\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    int solve(int[][] edges) {\n        int n = edges.length + 1;\n        ArrayList<Integer>[] adj = new ArrayList[n];\n        Arrays.setAll(adj, asd -> new ArrayList<>());\n        for (int[] e : edges) {\n            adj[e[0]].add(e[1]);\n            adj[e[1]].add(e[0]);\n        }\n\n        boolean[] vis = new boolean[n];\n        int[] dist = new int[n];\n        Function<Integer, Void> dfs = new Function<>() {\n            @Override\n            public Void apply(Integer u) {\n                vis[u] = true;\n                for (int v : adj[u]) {\n                    if (vis[v])\n                        continue;\n\n                    dist[v] = dist[u] + 1;\n                    apply(v);\n                }\n\n                return null;\n            }\n        };\n        dfs.apply(0);\n        \n        int end1 = 0;\n        for (int i = 1; i < n; i++) {\n            if (dist[end1] < dist[i])\n                end1 = i;\n        }\n        Arrays.fill(vis, false);\n        Arrays.fill(dist, 0);\n        dfs.apply(end1);\n        \n        int max = 0;\n        for (int d : dist)\n            max = Math.max(max, d);\n        return max;\n    }\n}",
    "submit_ts": 1719717036.0
}