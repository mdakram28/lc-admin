{
    "username": "khushvantkr22",
    "submission": "#include <iostream>\n#include <vector>\n#include <unordered_map>\n#include <cstring>\n\nconst int MOD = 1'000'000'007;\nconst int MAX_INVERSIONS = 400;\n\nusing namespace std;\n\nclass Solution {\nprivate:\n    unordered_map<int, int> reqMap;\n    vector<vector<long>> memo;\n    vector<vector<int>> requirements;\n    int n;\n\n    long countPermutations(int length, int inversions) {\n        if (inversions < 0) return 0;\n        if (length == 0) return inversions == 0 ? 1 : 0;\n        if (memo[length][inversions] != -1) return memo[length][inversions];\n\n        long count = 0;\n        for (int newPos = 0; newPos < length; newPos++) {\n            count = (count + countPermutations(length - 1, inversions - newPos)) % MOD;\n        }\n\n        if (reqMap.find(length) != reqMap.end()) {\n            int targetInv = reqMap[length];\n            if (inversions != targetInv) {\n                count = 0;\n            }\n        }\n\n        memo[length][inversions] = count;\n        return count;\n    }\n\npublic:\n    int numberOfPermutations(int n, vector<vector<int>>& requirements) {\n        this->requirements = requirements;\n        this->n = n;\n        reqMap.clear();\n        for (const auto& req : requirements) {\n            reqMap[req[0] + 1] = req[1];\n        }\n\n        memo = vector<vector<long>>(n + 1, vector<long>(MAX_INVERSIONS + 1, -1));\n        long result = 0;\n        for (int inv = 0; inv <= MAX_INVERSIONS; inv++) {\n            result = (result + countPermutations(n, inv)) % MOD;\n        }\n\n        return (int) result;\n    }\n};\n\n",
    "submit_ts": 1719071610.0
}