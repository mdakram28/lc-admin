{
    "username": "candidate_key",
    "submission": "template <typename T>\nstruct segTree // 1-based indexing.\n{\n    int size, n;\n    vector<T> st, arr;\n\n    segTree(int sizeOfTree)\n    {\n        n = sizeOfTree;\n        arr.resize(n + 1);\n        size = 1;\n        while (size < sizeOfTree)\n            size <<= 1;\n\n        size <<= 1;\n        st.resize(size + 1);\n    }\n\n    void set(int si, int ss, int se, int idx, T val)\n    {\n        if (ss == se)\n        {\n            st[si] = val;\n            arr[idx] = val;\n            return;\n        }\n\n        int mid = (ss + se) / 2;\n\n        if (idx <= mid)\n            set(2 * si, ss, mid, idx, val);\n        else\n            set(2 * si + 1, mid + 1, se, idx, val);\n\n        st[si] = combine(st[2 * si], st[2 * si + 1]);\n    }\n\n    T query(int si, int ss, int se, int l, int r)\n    {\n        if (ss > r || se < l)\n            return 0;                   // Handle it according to problem\n\n        if (l <= ss && r >= se)\n            return st[si];\n\n        int mid = (ss + se) / 2;\n\n        T left = query(2 * si, ss, mid, l, r);\n        T right = query(2 * si + 1, mid + 1, se, l, r);\n\n        return combine(left, right);\n    }\n\n    T combine(T x, T y)                 // Handle it according to problem\n    {\n        return x + y;\n    }\n\n    void set(int idx, T val)\n    {\n        set(1, 1, n, idx, val);\n    }\n\n    T query(int l, int r)\n    {\n        // cout<<l<<\" \"<<r<<endl;\n        return query(1, 1, n, l, r);\n    }\n};\nclass Solution {\npublic:\n    vector<int> countOfPeaks(vector<int>& nums, vector<vector<int>>& queries) {\n        int n=nums.size();\n        segTree<int> st(n+5);\n        \n        for(int i=0; i<n; i++)\n        {\n            if(i==0 || i==n-1)\n                st.set(i+1, 0);\n            else\n            {\n                if(nums[i]>nums[i-1] && nums[i]>nums[i+1])\n                    st.set(i+1, 1);\n                else\n                    st.set(i+1, 0);\n            }\n        }\n        auto check=[&](int idx){\n          return (idx-1>=0 && nums[idx]>nums[idx-1]) && (idx+1<n && nums[idx]>nums[idx+1]);\n        };\n        vector<int> ans;\n        for(auto it:queries)\n        {\n            if(it[0]==2)\n            {\n                int idx=it[1];\n                int val=it[2];\n                \n                nums[idx]=val;\n                \n                if(idx==0)\n                {\n                    if(check(1))\n                        st.set(2, 1);\n                    else\n                        st.set(2, 0);\n                }\n                else if(idx==n-1)\n                {\n                    if(check(n-2))\n                        st.set(n-1, 1);\n                    else\n                        st.set(n-1, 0);\n                }\n                else\n                {\n                    if(check(idx))\n                        st.set(idx+1, 1);\n                    else\n                        st.set(idx+1, 0);\n                    \n                    if(check(idx-1))\n                        st.set(idx, 1);\n                    else\n                        st.set(idx, 0);\n                    \n                    if(check(idx+1))\n                        st.set(idx+2, 1);\n                    else\n                        st.set(idx+2, 0);\n                }\n            }\n            else\n            {\n                ans.push_back(st.query(it[1]+2, it[2]));\n            }\n        }\n        return ans;\n    }\n};",
    "submit_ts": 1718507185.0
}