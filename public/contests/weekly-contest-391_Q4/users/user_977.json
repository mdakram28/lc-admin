{
    "username": "andytyk",
    "submission": "class Solution {\n    \n    class Point {\n        int x;\n        int y;\n        int pos;\n        \n        public Point(int x, int y, int pos) {\n            this.x = x;\n            this.y = y;\n            this.pos = pos;\n        }\n    }\n    \n    public int minimumDistance(int[][] points) {\n        ArrayList<Point> pts = new ArrayList<>();\n        Comparator<Point> xOrder = new Comparator<Point>() {\n            public int compare(Point a, Point b) {\n                if(a.x == b.x) {\n                    if(a.y == b.y)\n                        return a.pos - b.pos;\n                    return a.y - b.y;\n                }\n                return a.x - b.x;\n            }\n        };\n        Comparator<Point> yOrder = new Comparator<Point>() {\n            public int compare(Point a, Point b) {\n                if(a.y == b.y) {\n                    if(a.x == b.x)\n                        return a.pos - b.pos;\n                    return a.x - b.x;\n                }\n                return a.y - b.y;\n            }\n        };\n        TreeSet<Point> X = new TreeSet<>(xOrder);\n        TreeSet<Point> Y = new TreeSet<>(yOrder);\n        for(int i = 0; i < points.length; i++) {\n            Point p = new Point(points[i][0] + points[i][1], points[i][0] - points[i][1], i);\n            pts.add(p);\n            X.add(p);\n            Y.add(p);\n        }\n        int best = Integer.MAX_VALUE;\n        for(int i = 0; i < pts.size(); i++) {\n            Point p = pts.get(i);\n            X.remove(p);\n            Y.remove(p);\n            int cbest = Math.max(X.last().x - X.first().x, Y.last().y - Y.first().y);\n            if(cbest < best)\n                best = cbest;\n            X.add(p);\n            Y.add(p);\n        }\n        return best;\n    }\n}"
}