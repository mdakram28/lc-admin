{
    "username": "karthikeysaxena",
    "submission": "class Solution {\npublic:\n    int minimumDifference(vector<int>& a, int k) {\n        int n = a.size(), ans = INT_MAX;\n        vector<vector<int>> h(n, vector<int> (30, 0));\n        int p = a[0];\n        for (auto x: a) p = (p & x);\n        ans = min(ans, abs(p - k));\n\n        for (int i = 0; i < n; i++) {\n            int num = a[i];\n            int val = 0;\n            vector<int> g[30];\n            map<int, vector<int>> ma;\n            for (int j = 0; j < 30; j++) {\n                if (num & (1 << j)) {\n                    if (i > 0) h[i][j] = h[i - 1][j] + 1;\n                    else h[i][j] = 1;\n                    val += (1 << j);\n                    ma[h[i][j]].push_back(j);\n                }\n                else {\n                    h[i][j] = 0;\n                }\n            }\n            // cout << val << \"\\n\";\n            ans = min(ans, abs(k - val));\n            for (auto x: ma) {\n                if (x.second.size() > 0) {\n                    for (auto y: x.second) {\n                        val = val & ~(1 << y);\n                        // cout << y << \" \" << val << \"\\n\";\n                    }\n                    // cout << val << \"\\n\";\n                }\n                if (val > 0) ans = min(ans, abs(k - val));\n            }\n        }\n\n        return ans;\n    }\n};",
    "submit_ts": 1717299187.0
}