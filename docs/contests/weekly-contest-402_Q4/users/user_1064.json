{
    "username": "code_tal",
    "submission": "class Solution {\npublic:\n    //vector<int> & left, vector<int> & right,\n    void build(vector<int> & seg, int low, int high, int index,  vector<int> & nums, int n)\n{\n    if(low==high)\n    {\n        seg[index]=0;\n        \n        \n        return ;\n    }\n        \n        \n\n    int mid= (low + high)/2;\n    build(seg, low, mid, 2*index+1,nums,  n);\n    build(seg, mid+1, high, 2*index+2,nums,  n);\n\n    seg[index]= seg[2*index+1] + seg[2*index+2];\n        \n        \n        if(mid>low && mid+1 <=high)\n        {\n            if(nums[mid]> nums[mid-1] && nums[mid]> nums[mid+1])\n                seg[index]++;\n        }\n        \n        if(mid+2 <=high && mid>=low)\n        {\n            if(nums[mid+1]>  nums[mid+2] && nums[mid+1]> nums[mid])\n                seg[index]++;\n        }\n\n\n}\n    \n    \n    void update(vector<int> & seg, int value, int ind, int low, int high, int index, vector<int> & nums)\n{\n    if(low==high)\n    {\n       nums[low]= value;\n       return;\n    }\n\n    int mid= (low + high)/2;\n\n    if(ind<=mid)\n    {\n        update(seg, value, ind, low, mid, 2*index+1, nums);\n    }\n    else\n    {\n        update(seg, value, ind, mid+1, high, 2*index+2, nums);\n    }\nint n= nums.size();\n    seg[index]= seg[2*index+1]+ seg[2*index+2];\n        \n        if(mid>low && mid+1 <=high)\n        {\n            if(nums[mid]> nums[mid-1] && nums[mid]> nums[mid+1])\n                seg[index]++;\n        }\n        \n        if(mid+2 <=high && mid>=low)\n        {\n            if(nums[mid+1]>  nums[mid+2] && nums[mid+1]> nums[mid])\n                seg[index]++;\n        }\n\n\n}\n    \n    \n    \n    int query(vector<int> & seg, int low, int high, int l, int r, int index, int n, vector<int> & nums)\n{\n    if(l>r)\n    return 0;\n\n    if(low>=l && high<=r)\n    {\n        return seg[index];\n    }\n\n    else if(low> r || high<l)\n    {\n        return 0;\n    }\n\n    int mid= (low+high)/2;\n\n    int left= query(seg, low, mid, l, r, 2*index+1, n, nums);\n    int right= query(seg, mid+1,high, l, r, 2*index+2, n, nums);\n     int p=0;\n        if(mid>low && mid+1 <=high && mid> l && mid< r)\n        {\n            if(nums[mid]> nums[mid-1] && nums[mid]> nums[mid+1])\n                p++;\n        }\n        \n        if(mid+2 <=high && mid>=low && mid >=l && mid+2<=r)\n        {\n            if(nums[mid+1]>  nums[mid+2] && nums[mid+1]> nums[mid])\n                p++;\n        }\n    return left+right+p;\n}\n\n    vector<int> countOfPeaks(vector<int>& nums, vector<vector<int>>& queries) {\n        \n        int n= nums.size();\n        vector<int> seg(4*n +1, 0);\n        \n        int q= queries.size();\n        vector<int> ans;\n        \n        build(seg, 0, n-1, 0, nums, n);\n        for(int i=0; i<q; i++)\n        {\n            if(queries[i][0]==1)\n            {\n                int p=query(seg, 0, n-1, queries[i][1], queries[i][2], 0, n, nums);\n                ans.push_back(p);\n            }\n            \n            else\n            {\n                update(seg, queries[i][2], queries[i][1], 0, n-1, 0, nums);\n            }\n        }\n        \n        return ans;\n    }\n};",
    "submit_ts": "1718509127",
    "subm_id": "1289700118"
}