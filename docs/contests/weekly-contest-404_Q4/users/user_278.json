{
    "username": "chuan-chih",
    "submission": "class Solution:\n    def minimumDiameterAfterMerge(self, edges1: List[List[int]], edges2: List[List[int]]) -> int:\n        def diameter(edges):\n            n = len(edges) + 1\n            adj = [set() for _ in range(n)]\n            for a, b in edges:\n                adj[a].add(b)\n                adj[b].add(a)\n            leaves = [i for i in range(n) if len(adj[i]) == 1]\n            remaining = n\n            ans = 0\n            while remaining > 2:\n                ans += 2\n                new = []\n                for i in leaves:\n                    if adj[i]:\n                        j = adj[i].pop()\n                        adj[j].remove(i)\n                        if len(adj[j]) == 1:\n                            new.append(j)\n                remaining -= len(leaves)\n                leaves = new\n            if remaining == 2:\n                ans += 1\n            # print(ans)\n            return ans\n        \n        d1, d2 = diameter(edges1), diameter(edges2)\n        half1, odd = divmod(d1, 2)\n        half1 += odd\n        half2, odd = divmod(d2, 2)\n        half2 += odd\n        \n        return max(d1, d2, half1 + 1 + half2)\n            ",
    "submit_ts": "1719718283",
    "subm_id": "1304413379"
}