{
    "username": "Piyuxh_01",
    "submission": "#pragma GCC optimize(\"Ofast\")\n#pragma GCC target(\"sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,avx2,fma\")\n#pragma GCC optimize(\"unroll-loops\")\n#include <bits/stdc++.h>\n#include <ext/pb_ds/assoc_container.hpp>\n#include <ext/pb_ds/tree_policy.hpp>\nusing namespace __gnu_pbds;\nusing namespace std;\n/*\nS.find_by_order(k) => returns iterator to the kth largest element\nS.find_by_order(sz) returns end(S)\nS.order_of_key(x) => number of items in the set that are strictly smaller than x\n*/\ntemplate <typename T> using ordered_set = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;\ntemplate <typename T> using ordered_multiset = tree<T, null_type, less_equal<T>, rb_tree_tag, tree_order_statistics_node_update>;\nclass custom_hash {\n    public:\n    static uint64_t splitmix64(uint64_t x) \n    {\n        x += 0x9e3779b97f4a7c15;\n        x = (x ^ (x >> 30)) * 0xbf58476d1ce4e5b9;\n        x = (x ^ (x >> 27)) * 0x94d049bb133111eb;\n        return x ^ (x >> 31);\n    }\n    size_t operator()(uint64_t x) const \n    {\n        static const uint64_t FIXED_RANDOM = chrono::steady_clock::now().time_since_epoch().count();\n        return splitmix64(x + FIXED_RANDOM);\n    }\n};\n\ntypedef long long ll;\ntemplate <typename T> using uset = unordered_set<T, custom_hash>;\ntemplate <typename T> using umultiset = unordered_multiset<T, custom_hash>;\ntemplate <typename T1, typename T2> using umap = unordered_map<T1, T2, custom_hash>;\ntemplate <typename T1, typename T2> using hash = gp_hash_table<T1, T2, custom_hash>;\nbool isPrime(int n) {if(n<2){return false;}  if(n<4){return true;}  if(n%2 == 0 || n%3 == 0){return false;}  for(int i=5; i*i<=n; i=i+6){if(n%(i+2) == 0 || n%i == 0){ return false;}} return true;}\ntemplate < typename T = int > istream& operator >> (istream &in, vector < T > &v) {\n    for (auto &x : v) in >> x;\n    return in;\n}\n\ntemplate < typename T = int > ostream& operator << (ostream &out, const vector < T > &v) { \n    for (const T &x : v) out << x << ' '; \n    return out;\n}\n\nll gcd(ll a, ll b) { return b == 0 ? a : gcd(b, a % b); }\nll lcm(ll a, ll b) { return (a / gcd(a, b)) * b; }\ntemplate <typename T> inline T max_(T a, T b) { return (a > b) ? a : b; }\ntemplate <typename T> inline T min_(T a, T b) { return (a < b) ? a : b; }\ntemplate <typename T> inline T abs_(T x) { return (x < 0) ? -x : x; }\n#define add_mod(a, b, m) (((a % m) + (b % m)) % m)\n#define sub_mod(a, b, m) (((a % m) - (b % m) + m) % m)\n#define mul_mod(a, b, m) (((a % m) * (b % m)) % m)\ntemplate<class T> using pqg = priority_queue<T, vector<T>, greater<T>>;\ntypedef pair<int,int> p32;\ntypedef pair<ll,ll> p64;\ntypedef vector<ll> v64;\ntypedef vector<int> v32;\ntypedef vector<vector<int>> vv32;\ntypedef vector<vector<ll>> vv64;\ntypedef vector<vector<p64>> vvp64;\ntypedef vector<p64> vp64;\ntypedef vector<p32> vp32;\n#define forn(i,a,b) for(int i = a; i < b; i++)\n#define rforn(i,a,b) for(int i = a; i >= b; i--)\n#define nl \"\\n\"\n#define dbg(x) cout << x << nl\n#define pb push_back\n#define ff first\n#define ss second\n#define all(x) begin(x), end(x)\n#define lb lower_bound\n#define ub upper_bound\n#define sz(x) x.size()\nconst int MOD = 1000000007;\nconst int MAXN = 100001;\n\nstatic const int _ = []() { std::ios::sync_with_stdio(false); std::cin.tie(nullptr); std::cout.tie(nullptr); return 0; }();\nclass Solution {\npublic:\n    long long countSubarrays(vector<int>& nums, int k) {\n        int n = nums.size();\n        ll ans = 0;\n        umap<ll,ll> pf;\n        forn (i,0,n) {\n            umap<ll,ll> tp; \n            if (nums[i] == k) {\n                ans++;\n            }\n            tp[nums[i]] = 1;\n            for (auto it : pf) {\n                ll nm = it.ff & nums[i];\n                if (nm == k) {\n                    ans += it.ss;\n                }\n                tp[nm] += it.ss;\n            }\n            \n            pf = tp;\n        }\n        return ans;\n    }\n};",
    "submit_ts": "1720281189",
    "subm_id": "1311816278"
}