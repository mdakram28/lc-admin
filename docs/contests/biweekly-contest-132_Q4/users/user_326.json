{
    "username": "abhin109",
    "submission": "#include <vector>\n#include <map>\n#include <algorithm>\n\nusing namespace std;\n\nclass Solution {\npublic:\n    int maximumLength(vector<int>& sequence, int maxTransitions) { \n        int sequenceLength = sequence.size(); \n\n        // Initialize the DP table and helper structures\n        vector<vector<int>> dpTable = initializeDPTable(sequenceLength, maxTransitions);\n        vector<int> maxLengthsPerTransition = initializeMaxLengthsPerTransition(maxTransitions);\n        vector<map<int, int>> lastOccurrencesPerTransition = initializeLastOccurrencesPerTransition(maxTransitions);\n        \n        // Compute the maximum length of the good subsequence\n        return computeMaxLength(sequence, dpTable, maxLengthsPerTransition, lastOccurrencesPerTransition, sequenceLength, maxTransitions);\n    }\n\nprivate:\n    vector<vector<int>> initializeDPTable(int sequenceLength, int maxTransitions) {\n        return vector<vector<int>>(sequenceLength, vector<int>(maxTransitions + 1, 1));\n    }\n\n    vector<int> initializeMaxLengthsPerTransition(int maxTransitions) {\n        return vector<int>(maxTransitions + 1, -1);\n    }\n\n    vector<map<int, int>> initializeLastOccurrencesPerTransition(int maxTransitions) {\n        return vector<map<int, int>>(maxTransitions + 1);\n    }\n\n    int computeMaxLength(vector<int>& sequence, vector<vector<int>>& dpTable, vector<int>& maxLengthsPerTransition, vector<map<int, int>>& lastOccurrencesPerTransition, int sequenceLength, int maxTransitions) {\n        int maxLength = 1;\nint currentIndex = 0;\n        while(sequenceLength>currentIndex) { \n            int transitions = 0;\n            while( maxTransitions>=transitions) { \n                int previousTransition = 0;\n                while( previousTransition < transitions) { \n        dpTable[currentIndex][transitions] = max(1 + maxLengthsPerTransition[previousTransition],dpTable[currentIndex][transitions]); \n                    ++previousTransition;\n                } \n\n        if (lastOccurrencesPerTransition[transitions].find(sequence[currentIndex]) != lastOccurrencesPerTransition[transitions].end()) { \ndpTable[currentIndex][transitions] = max(dpTable[currentIndex][transitions], 1 + lastOccurrencesPerTransition[transitions][sequence[currentIndex]]); \n                } \n\n                maxLength = max(dpTable[currentIndex][transitions],maxLength); \n                 ++transitions;\n            } \n\n            updateHelperStructures(dpTable, maxLengthsPerTransition, lastOccurrencesPerTransition, sequence, currentIndex, maxTransitions); \n            ++currentIndex;\n        } \n\n        return maxLength; \n    }\n\n    void updateHelperStructures(vector<vector<int>>& dpTable, vector<int>& maxLengthsPerTransition, vector<map<int, int>>& lastOccurrencesPerTransition, vector<int>& sequence, int currentIndex, int maxTransitions) {\n        int transitions = 0;\n        while(  maxTransitions>= transitions) { \n            maxLengthsPerTransition[transitions] = max(maxLengthsPerTransition[transitions], dpTable[currentIndex][transitions]); \n            lastOccurrencesPerTransition[transitions][sequence[currentIndex]] = max(lastOccurrencesPerTransition[transitions][sequence[currentIndex]], dpTable[currentIndex][transitions]); \n            ++transitions;\n        } \n    }\n};\n",
    "submit_ts": 1717862037.0
}