{
    "username": "hasna_shaik04",
    "submission": "class Solution:\n    def canReachCorner(self, gridWidth, gridHeight, circleDetails):\n        from collections import deque\n        import math\n        \n        def bfs(adjacencyList, startNode, targetNode1, targetNode2, totalNodes):\n            queue = deque([startNode])\n            visitedNodes = [0] * (totalNodes + 4)\n            visitedNodes[startNode] = 1\n\n            while queue:\n                currentNode = queue.popleft()\n                for adjacentNode in adjacencyList[currentNode]:\n                    if not visitedNodes[adjacentNode]:\n                        queue.append(adjacentNode)\n                        visitedNodes[adjacentNode] = 1\n            return visitedNodes[targetNode1] or visitedNodes[targetNode2]\n\n        numberOfCircles = len(circleDetails)\n        adjacencyList = [[] for _ in range(numberOfCircles + 4)]\n\n        for i in range(numberOfCircles):\n            circleX, circleY, circleRadius = circleDetails[i]\n            if circleX <= circleRadius:\n                adjacencyList[numberOfCircles].append(i)\n                adjacencyList[i].append(numberOfCircles)\n            if gridWidth - circleX <= circleRadius:\n                adjacencyList[numberOfCircles + 2].append(i)\n                adjacencyList[i].append(numberOfCircles + 2)\n            if circleY <= circleRadius:\n                adjacencyList[numberOfCircles + 1].append(i)\n                adjacencyList[i].append(numberOfCircles + 1)\n            if gridHeight - circleY <= circleRadius:\n                adjacencyList[numberOfCircles + 3].append(i)\n                adjacencyList[i].append(numberOfCircles + 3)\n            for j in range(i + 1, numberOfCircles):\n                adjacentCircleX, adjacentCircleY, adjacentCircleRadius = circleDetails[j]\n                distanceBetweenCenters = math.sqrt((circleX - adjacentCircleX) ** 2 + (circleY - adjacentCircleY) ** 2)\n                combinedRadii = circleRadius + adjacentCircleRadius\n                if combinedRadii >= distanceBetweenCenters:\n                    adjacencyList[i].append(j)\n                    adjacencyList[j].append(i)\n\n        isPathBlocked = 0\n        isPathBlocked = max(isPathBlocked, bfs(adjacencyList, numberOfCircles, numberOfCircles + 1, numberOfCircles + 2, numberOfCircles + 4))  # Check for bottom-left corner\n        isPathBlocked = max(isPathBlocked, bfs(adjacencyList, numberOfCircles + 3, numberOfCircles + 2, numberOfCircles + 1, numberOfCircles + 4))  # Check for top-right corner\n\n        return isPathBlocked == 0\n\n# Example usage:\ndef main():\n    solution = Solution()\n    gridWidth = 3\n    gridHeight = 4\n    circleDetails = [[2, 1, 1]]\n    result = solution.canReachCorner(gridWidth, gridHeight, circleDetails)\n    print(result)  # Output the result\n\nif __name__ == \"__main__\":\n    main()\n",
    "submit_ts": "1722139038",
    "subm_id": "1335806184"
}