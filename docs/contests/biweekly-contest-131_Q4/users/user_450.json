{
    "username": "azesx",
    "submission": "using ll = long long;\n#define _rep_sel(a1,a2,a3,a4,exp,...) exp\n#define rep_n(n) for(ll i=0;i<(ll)(n);++i)\n#define rep_in(i,n) for(ll i=0;i<(ll)(n);++i)\n#define rep_isn(i,s,n) for(ll i=(ll)(s);i<(ll)(n);++i)\n#define rep_isninc(i,s,n,inc) for(ll i=(ll)(s);i<(ll)(n);i+=(ll)(inc))\n#define rep(...) _rep_sel(__VA_ARGS__,rep_isninc,rep_isn,rep_in,rep_n)(__VA_ARGS__)\n#define rrep(i,j,n,m) for(ll i=0;i<(ll)(n);++i) for(ll j=0;j<(ll)(m);++j)\n#define per(i,n) for(ll i=(ll)(n);i>=(ll)0;--i)\n#define each(it, a) for (const auto& it: a)\nconstexpr ll inf = 1e18+1;\ntemplate <class T, class TVal> inline bool chmax(T &a, const TVal &b) { return (a < b ? a = b, 1 : 0); }\ntemplate <class T, class TVal> inline bool chmin(T &a, const TVal &b) { return (a > b ? a = b, 1 : 0); }\ntemplate<typename T1, typename T2 = T1> struct v2 { T1 x; T2 y; friend strong_ordering operator<=>(const v2&, const v2&) = default; };\ntemplate<typename T1, typename T2 = T1, typename T3 = T1> struct v3 { T1 x; T2 y; T3 z; friend strong_ordering operator<=>(const v3&, const v3&) = default; };\ntemplate<typename T> using vec = vector<T>;\ntemplate<typename T> using vvec = vector<vector<T>>;\nusing veci = vec<ll>; using vveci = vvec<ll>;\nusing vecb = vec<bool>; using vvecb = vvec<bool>;\nusing v2i = v2<ll>; using v3i = v3<ll>;\ntemplate<typename T> using pq_dec = priority_queue<T>;\ntemplate<typename T> using pq_inc = priority_queue<T, vector<T>, greater<T>>;\n\nstruct Node{\n    ll mx = 1;\n    ll first = inf;\n    ll last = -inf;\n    ll s = 0;\n    ll e = 0;\n};\n\nstatic const int n_max = 1e4 * 5 + 1;\nNode tree[n_max * 4];\n\nclass Solution {\npublic:\n\n    void merge(Node& cur, Node& a, Node& b){\n        ll res = max(a.mx, b.mx);\n        ll s = max(a.s, a.last);\n        ll e = min(b.e, b.first);\n        res = max(res, e - s);\n        cur.mx = res;\n        cur.first = min(a.first, b.first);\n        cur.last = max(a.last, b.last);\n        cur.s = a.s;\n        cur.e = b.e;\n    }\n\n    void build(int index, int s, int e)\n    {\n        if(s == e){\n            tree[index] = {\n                    1,\n                    inf,\n                    -inf,\n                    s,\n                    e\n            };\n\n            return;\n        }\n\n        const int mid = (s + e) >> 1;\n        build(2 * index + 1, s, mid);\n        build(2 * index + 2, mid + 1, e);\n        merge(tree[index], tree[2 * index + 1], tree[2 * index + 2]);\n    }\n\n    void update(int index, int s, int e, int cur)\n    {\n        if (s > cur || e < cur) return;\n        if (s == e && s == cur)\n        {\n            tree[index].first = s;\n            tree[index].last = s;\n            return;\n        }\n\n        const int mid = (s + e) >> 1;\n        update(2 * index + 1, s, mid, cur);\n        update(2 * index + 2, mid + 1, e, cur);\n        merge(tree[index], tree[2 * index + 1], tree[2 * index + 2]);\n    }\n\n    Node query(int index, int s, int e, int qs, int qe)\n    {\n        if (qe < s) return {0, qe, qe, qe, qe};\n        if (qs > e) return {0, qs, qs, qs, qs};\n        if (qs <= s && qe >= e) return tree[index];\n\n        const int mid = (s + e) / 2;\n\n        Node left = query(index * 2 + 1, s, mid, qs, qe);\n        Node right = query(index * 2 + 2, mid + 1, e, qs, qe);\n        Node res;\n        merge(res, left, right);\n        return res;\n    }\n\n    bool helper(int qe, int mx){\n        Node t = query(0, 0, n_max, 0, qe);\n        if(t.first != inf && t.first >= mx) return true;\n        if(t.last != -inf && qe - t.last >= mx) return true;\n        if(t.mx >= mx) return true;\n        return false;\n    }\n\n    vector<bool> getResults(vector<vector<int>>& Q) {\n        vec<bool> res;\n        build(0, 0, n_max);\n        rep(i, Q.size()){\n            if(Q[i][0] == 1){\n                update(0, 0, n_max, Q[i][1]);\n            }\n            else{\n                res.push_back(helper(Q[i][1], Q[i][2]));\n            }\n        }\n\n        return res;\n    }\n};",
    "submit_ts": 1716652260.0
}