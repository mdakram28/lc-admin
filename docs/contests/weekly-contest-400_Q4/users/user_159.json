{
    "username": "masakit",
    "submission": "#include <bits/stdc++.h>\nusing namespace std;\n#ifdef LOCAL\n#include <debugoutput.h>\n#else\n#define dbg(...)\n#endif\ntypedef long long ll;\n[[maybe_unused]] constexpr int INF = 0x3f3f3f3f;\n[[maybe_unused]] constexpr ll LINF = 0x3f3f3f3f3f3f3f3f;\ntemplate<class T> bool chmin(T& a, const T& b) { return b < a ? a = b, 1 : 0; }\ntemplate<class T> bool chmax(T& a, const T& b) { return b > a ? a = b, 1 : 0; }\n#define rep(i, a, b) for (int i = int(a), i##_max_ = int(b); i < i##_max_; i++)\n#define rrep(i, a, b) for (int i = int(a), i##_min_ = int(b); i >= i##_min_; i--)\n#define all(x) x.begin(), x.end()\n#define rall(x) x.rbegin(), x.rend()\n#define len(x) (int)(x).size()\n#define vec vector\n#define pii pair<ll, ll>\n#define pb push_back\nauto speed = [] { cin.tie(nullptr)->sync_with_stdio(false); return 0; }();\n\nstruct Tree {\n    typedef int T;\n    static constexpr T unit = -1;\n    int n;\n    vector<T> data;\n    T combine(T a, T b) {\n        return a & b;\n    }\n    Tree(int _n) {\n        n = 1; while (n < _n) n <<= 1;\n        data.assign(n * 2, unit);\n    }\n    Tree(vector<T>& v) : Tree(int(v.size())) {\n        for (int i = 0; i < int(v.size()); i++) data[i + n] = v[i];\n        for (int i = n - 1; i > 0; i--) data[i] = combine(data[i << 1], data[i << 1 | 1]);\n    }\n    void update(int pos, T val) {\n        for (data[pos += n] = val; pos >>= 1; )\n            data[pos] = combine(data[pos << 1], data[pos << 1 | 1]);\n    }\n    T query(int b, int e) { // [b, e)\n        T ra = unit, rb = unit;\n        for (b += n, e += n; b < e; b >>= 1, e >>= 1) {\n            if (b & 1) ra = combine(ra, data[b++]);\n            if (e & 1) rb = combine(data[--e], rb);\n        }\n        return combine(ra, rb);\n    }\n};\n\nclass Solution {\npublic:\n    int minimumDifference(vector<int>& nums, int k) {\n        // for every start, binary search range AND?\n        int n = len(nums);\n        Tree tree(nums);\n        int ans = INF;\n        // rep(i, 0, n) {\n        //     int curr = nums[i];\n        //     vec<int> res = {curr};\n\n        //     rep(j, i + 1, n) {\n        //         curr &= nums[j];\n        //         res.push_back(curr);\n        //     }\n        //     dbg(res);\n        // }\n\n        rep(i, 0, n) {\n            chmin(ans, abs(nums[i] - k));\n            int l = i, r = n; // find first position < k\n            while(r - l > 1) {\n                int m = (l + r) / 2;\n                int res = tree.query(i, m + 1);\n                if (res < k) {\n                    r = m;\n                } else {\n                    l = m;\n                }\n            }\n            // dbg(i, l, r);\n            if (r < n) {\n                chmin(ans, abs(tree.query(i, r + 1) - k));\n                // dbg(tree.query(i, r + 1));\n            }\n            chmin(ans, abs(tree.query(i, l + 1) - k));\n            // dbg(tree.query(i, l + 1));\n        }\n        return ans;\n    }\n};\n\n\n#ifdef LOCAL\nvoid solve() {\n    Solution s{};\n    vec<int> A = {5, 13, 90, 92, 49};\n    cout << s.minimumDifference(A, 10) << \"\\n\";\n}\n\nsigned main() {\n    cin.exceptions(cin.failbit);\n    solve();\n}\n#endif\n",
    "submit_ts": "1717296308",
    "subm_id": "1274698375"
}