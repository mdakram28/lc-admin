{
    "username": "laughing-paredpy",
    "submission": "class Solution {\n    int k;\n    int[] lazy;\n    int[] memo;\n    public List<Boolean> getResults(int[][] queries) {\n        int max = 0;\n        for (int i = 0; i < queries.length; i++) {\n            if (queries[i][0] == 2)\n                max = Math.max(max, Math.max(queries[i][1], queries[i][2]));\n            else\n                max = Math.max(max, queries[i][1]);\n        }\n        memo = new int[(max + 1) << 2];\n        lazy = new int[(max + 1) << 2];\n        List<Boolean> res = new ArrayList<>();\n        init(memo, 0, 0, max);\n        TreeSet<Integer> ts = new TreeSet<>();\n        for (int[] q : queries) {\n            if (q[0] == 1) {\n                Integer h = ts.higher(q[1]);\n                Integer l = ts.lower(q[1]);\n                update(memo, 0, 0, max, q[1], (h == null ? max : h), q[1] - (l == null ? 0 : l));\n                ts.add(q[1]);\n            } else {\n                res.add(query(memo, 0, 0, max, q[1] - 1) + 1 >= q[2]);\n            }\n        }\n        return res;\n    }\n    public int query(int[] memo, int cur, int s, int e, int r) {\n        if (e <= r) {\n            return memo[cur];\n        }\n        updown(cur, memo);\n        int mid = (s + e) >> 1;\n        int res = query(memo, cur * 2 + 1, s, mid, r);\n        if (mid < r) {\n            res = Math.max(res, query(memo, cur * 2 + 2, mid + 1, e, r));\n        } \n        return res;\n    }\n    public void updown(int cur, int[] memo) {\n        if (lazy[cur] != 0) {\n            memo[cur * 2 + 1] += lazy[cur];\n            memo[cur * 2 + 2] += lazy[cur];\n            lazy[cur * 2 + 1] += lazy[cur];\n            lazy[cur * 2 + 2] += lazy[cur];\n            lazy[cur] = 0;\n        }\n    }\n    public void update(int[] memo, int cur, int s, int e, int l, int r, int val) {\n        if (s >= l && e <= r) {\n            memo[cur] -= val;\n            lazy[cur] -= val;\n            return;\n        }\n        updown(cur, memo);\n        int mid = (s + e) >> 1;\n        if (mid >= l) {\n            update(memo, cur * 2 + 1, s, mid, l, r, val);\n        }\n        if (mid < r) {\n            update(memo, cur * 2 + 2, mid + 1, e, l, r, val);\n        }\n        memo[cur] = Math.max(memo[cur * 2 + 1], memo[cur * 2 + 2]);\n    }\n    public void init(int[] memo, int cur, int s, int e) {\n        if (s == e) {\n            memo[cur] = k++;\n        } else {\n            int mid = (s + e) >> 1;\n            init(memo, cur * 2 + 1, s, mid);\n            init(memo, cur * 2 + 2, mid + 1, e);\n            memo[cur] = Math.max(memo[cur * 2 + 1], memo[cur * 2 + 2]);\n        }\n    }\n}",
    "submit_ts": 1716651756.0
}