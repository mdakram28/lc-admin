{
    "username": "Juanchoki",
    "submission": "class Solution {\npublic:\n    struct nodo\n    {\n        nodo *lson;\n        nodo *rson;\n        int val, l, r;\n    };\n    struct segtree\n    {\n        nodo *raiz; \n        int N;\n        segtree(int n)\n        {\n            N = n;\n            raiz = new nodo;\n            build(raiz, 0, n);\n        }\n        void build (nodo *node, int l, int r)\n        {\n            node->l = l; node->r = r;\n            if (l == r) \n            {\n                node->val = -1223232;\n                return;\n            }\n            int mit = (l+r)>>1;\n            node->lson = new nodo; node->rson = new nodo;\n            build(node->lson, l, mit);\n            build(node->rson, mit+1, r);\n            node->val = max(node->lson->val, node->rson->val);\n        }\n        void upd (nodo *node, int pos, int val)\n        {\n            int l = node->l, r = node->r;\n            if (r < pos || pos < l) return;\n            if (l == pos && pos == r)\n            {\n                node->val = val;\n                return;\n            }\n            upd(node->lson, pos, val);\n            upd(node->rson, pos, val);\n            node->val = max(node->lson->val, node->rson->val);\n        }\n        int query (nodo *node, int l, int r)\n        {\n            int a = node->l, b = node->r;\n            if (b < l || r < a) return -1223232;\n            if (l <= a && b <= r) return node->val;\n            return max(query(node->lson, l, r), query(node->rson, l, r));\n        }\n        \n    };\n    vector<bool> getResults(vector<vector<int>>& queries) \n    {\n        vector<bool> ret;\n        int comp = 3*queries.size();\n        int mini = min(50000, comp);\n        segtree st(mini);\n        set<int> ts;\n        ts.insert(0);\n        int x;\n     //   st.upd(st.raiz, 0, mini+1);\n        for (vector<int> &v: queries)\n        {\n            if (v[0] == 1)\n            {\n                x = v[1];  \n                auto it = ts.lower_bound(x);\n                it--;\n                ts.insert(x);\n                int temp = *it;\n                int dist = x-temp;\n                //cout << temp << \" \" << dist << '\\n';\n                st.upd(st.raiz, temp, dist);\n                it = ts.upper_bound(x);\n                if (it == ts.end()) continue;\n                temp = *it;\n                dist = temp-x;\n                st.upd(st.raiz, x, dist);\n                continue;\n            }\n            auto it = ts.upper_bound(v[1]);\n            it--;\n            int val = *it;\n            int temp = st.query(st.raiz, val, val);\n            st.upd(st.raiz, val, v[1]-val);\n            x = st.query(st.raiz, 0, v[1]);\n            if (x >= v[2])\n                ret.push_back(true);\n            else ret.push_back(false);\n            st.upd(st.raiz, val, temp);\n            cout << v[1] << \" \" << x<<'\\n';\n        }\n        cout << '\\n';\n        return ret;\n    }\n};",
    "submit_ts": 1716651731.0
}