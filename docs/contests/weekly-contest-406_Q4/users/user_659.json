{
    "username": "Tamradhwaj",
    "submission": "class Solution {\npublic:\n    long long minimumCost(int m, int n, vector<int>& horizontalCut, vector<int>& verticalCut) {\n        // Sort cuts in descending order\n        sort(horizontalCut.begin(), horizontalCut.end(), greater<int>());\n        sort(verticalCut.begin(), verticalCut.end(), greater<int>());\n\n        int hIndex = 0, vIndex = 0;\n        long long hPieces = 1, vPieces = 1;  // Initially, we have one piece in each direction\n        long long totalCost = 0;\n\n        // We will process both horizontal and vertical cuts in descending order of their costs\n        while (hIndex < horizontalCut.size() && vIndex < verticalCut.size()) {\n            if (horizontalCut[hIndex] >= verticalCut[vIndex]) {\n                // If horizontal cut is more costly or equal, make a horizontal cut\n                totalCost += static_cast<long long>(horizontalCut[hIndex]) * vPieces;  // Each horizontal cut affects all vertical pieces\n                hIndex++;\n                hPieces++;\n            } else {\n                // If vertical cut is more costly, make a vertical cut\n                totalCost += static_cast<long long>(verticalCut[vIndex]) * hPieces;  // Each vertical cut affects all horizontal pieces\n                vIndex++;\n                vPieces++;\n            }\n        }\n\n        // Process remaining horizontal cuts, if any\n        while (hIndex < horizontalCut.size()) {\n            totalCost += static_cast<long long>(horizontalCut[hIndex]) * vPieces;\n            hIndex++;\n            hPieces++;\n        }\n\n        // Process remaining vertical cuts, if any\n        while (vIndex < verticalCut.size()) {\n            totalCost += static_cast<long long>(verticalCut[vIndex]) * hPieces;\n            vIndex++;\n            vPieces++;\n        }\n\n        return totalCost;\n    }\n};",
    "submit_ts": "1720925730",
    "subm_id": "1320264340"
}