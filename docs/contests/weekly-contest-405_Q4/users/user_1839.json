{
    "username": "Gaurav_7_Yadav",
    "submission": "\nclass Solution {\npublic:\n    struct TrieNode {\n        unordered_map<char, TrieNode*> gaurav; // Changed from children to gaurav\n        vector<pair<int, int>> wordEnds; \n    };\n\n    class Trie {\n    public:\n        TrieNode* mukesh; // Changed from root to mukesh\n\n        Trie() { \n            mukesh = new TrieNode(); \n        }\n\n        void insert(string& word, int index, int cost) {\n            TrieNode* node = mukesh;\n            for (char c : word) {\n                if (!node->gaurav.count(c))\n                    node->gaurav[c] = new TrieNode();\n                node = node->gaurav[c];\n            }\n            node->wordEnds.push_back({index, cost});\n        }\n    };\n\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int n = target.size();\n        vector<int> dp(n + 1, INT_MAX);\n        dp[0] = 0;\n\n        Trie trie;\n        for (int i = 0; i < words.size(); ++i) {\n            trie.insert(words[i], i, costs[i]);\n        }\n\n        for (int i = 0; i < n; ++i) {\n            if (dp[i] == INT_MAX) continue;\n\n            TrieNode* mukesh = trie.mukesh;\n            for (int j = i; j < n; ++j) {\n                if (!mukesh->gaurav.count(target[j])) break;\n                mukesh = mukesh->gaurav[target[j]];\n                for (auto& p : mukesh->wordEnds) {\n                    int wordIndex = p.first;\n                    int wordCost = p.second;\n                    int len = words[wordIndex].size();\n                    if (i + len <= n) {\n                        dp[i + len] = min(dp[i + len], dp[i] + wordCost);\n                    }\n                }\n            }\n        }\n\n        return dp[n] == INT_MAX ? -1 : dp[n];\n    }\n};\n\n\n\n\n",
    "submit_ts": "1720323752",
    "subm_id": "1312383202"
}