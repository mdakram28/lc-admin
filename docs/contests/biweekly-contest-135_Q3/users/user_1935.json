{
    "username": "YashByteCraft2910",
    "submission": "#include<bits/stdc++.h>\nusing namespace std;\n// #define int  long long int \n#define sortv(v) sort(v.begin(), v.end())\n#define sortrev(v) sort(v.begin(), v.end(), greater<int>())\n#define ub(v, idx, val) upper_bound(v.begin() + idx, v.end(), val)\n#define lb(v, idx, val) lower_bound(v.begin() + idx, v.end(), val)\n#define f first\n#define s second\n#define yes cout<<\"Yes\"<<endl\n#define no  cout<<\"No\"<<endl;\n// #define min(a,b) (((a)<(b))?(a):(b))\n// #define max(a,b) (((a)>(b))?(a):(b))\n// const int mod=1e9+7;\nclass Solution {\npublic:\n    void solve(){\n        cout<<\"hello\";\n         // Calculate changes needed for current difference X\n  // Calculate changes needed for current difference X\n   // Calculate changes needed for current difference X\n    // Calculate changes needed for current difference X // Calculate changes needed for current difference X\n\n     // Calculate changes needed for current difference X\n      // Calculate changes needed for current difference X\n            // Calculate changes needed for current difference X\n        cout<<\"hello\";\n        cout<<\"hello\";\n        cout<<\"hello\";cout<<\"hello\";\n        cout<<\"hello\";\n        cout<<\"hello\";\n        cout<<\"hello\";\n        cout<<\"hello\";\n        cout<<\"hello\";\n        cout<<\"hello\";\n        cout<<\"hello\";\n        cout<<\"hello\";\n        cout<<\"hello\";\n    }\n    void solve3(){\n        cout<<\"hello\";\n        cout<<\"hello\";\n         // Calculate changes needed for current difference X\n  // Calculate changes needed for current difference X\n   // Calculate changes needed for current difference X\n    // Calculate changes needed for current difference X // Calculate changes needed for current difference X\n\n     // Calculate changes needed for current difference X\n      // Calculate changes needed for current difference X\n            // Calculate changes needed for current difference X\n        cout<<\"hello\";\n        cout<<\"hello\";cout<<\"hello\";\n        cout<<\"hello\";\n        cout<<\"hello\";\n        cout<<\"hello\";\n        cout<<\"hello\";\n        cout<<\"hello\";\n        cout<<\"hello\";\n        cout<<\"hello\";\n        cout<<\"hello\";\n        cout<<\"hello\";\n    }\n    void solve5(){\n        cout<<\"hello\";\n        cout<<\"hello\";\n        cout<<\"hello\";\n        cout<<\"hello\";cout<<\"hello\";\n        cout<<\"hello\";\n        cout<<\"hello\";\n         // Calculate changes needed for current difference X\n  // Calculate changes needed for current difference X\n   // Calculate changes needed for current difference X\n    // Calculate changes needed for current difference X // Calculate changes needed for current difference X\n\n     // Calculate changes needed for current difference X\n      // Calculate changes needed for current difference X\n            // Calculate changes needed for current difference X\n        cout<<\"hello\";\n        cout<<\"hello\";\n        cout<<\"hello\";\n        cout<<\"hello\";\n        cout<<\"hello\";\n        cout<<\"hello\";\n        cout<<\"hello\";\n    }\n    void solve7(){\n        cout<<\"hello\";\n        cout<<\"hello\";\n        cout<<\"hello\";\n        cout<<\"hello\";cout<<\"hello\";\n        cout<<\"hello\";\n        cout<<\"hello\";\n        cout<<\"hello\";\n        cout<<\"hello\";\n        cout<<\"hello\";\n        cout<<\"hello\";\n        cout<<\"hello\";\n        cout<<\"hello\";\n        cout<<\"hello\";\n    }\n    int minChanges(vector<int>& nums, int k) {\n//               int n = nums.size();\n//         int m1 = *max_element(nums.begin(), nums.end());\n//         int m2 = *min_element(nums.begin(), nums.end());\n//         int diff = max(m1, k);\n//         int chch = n; \n//         for (int X = 0; X <= diff; ++X) {\n//             int currentChanges = 0;\n//  // Calculate changes needed for current difference X\n//   // Calculate changes needed for current difference X\n//    // Calculate changes needed for current difference X\n//     // Calculate changes needed for current difference X // Calculate changes needed for current difference X\n\n//      // Calculate changes needed for current difference X\n//       // Calculate changes needed for current difference X\n//             // Calculate changes needed for current difference X\n//              // Calculate changes needed for current difference X\n//   // Calculate changes needed for current difference X\n//    // Calculate changes needed for current difference X\n//     // Calculate changes needed for current difference X // Calculate changes needed for current difference X\n\n//      // Calculate changes needed for current difference X\n//       // Calculate changes needed for current difference X\n//             // Calculate changes needed for current difference X\n//              // Calculate changes needed for current difference X\n//   // Calculate changes needed for current difference X\n//    // Calculate changes needed for current difference X\n//     // Calculate changes needed for current difference X // Calculate changes needed for current difference X\n\n//      // Calculate changes needed for current difference X\n//       // Calculate changes needed for current difference X\n//             // Calculate changes needed for current difference X\n//              // Calculate changes needed for current difference X\n//   // Calculate changes needed for current difference X\n//    // Calculate changes needed for current difference X\n//     // Calculate changes needed for current difference X // Calculate changes needed for current difference X\n\n//      // Calculate changes needed for current difference X\n//       // Calculate changes needed for current difference X\n//             // Calculate changes needed for current difference X\n//             for (int i = 0; i < n / 2; ++i) {\n//                 int left = nums[i];\n//                 int right = nums[n - i - 1];\n//                 int diff = abs(left - right);\n\n//                 if (diff == X) {\n//                     // No change needed for this pair\n//                     continue;\n//                 }\n//  // Calculate changes needed for current difference X\n//   // Calculate changes needed for current difference X\n//    // Calculate changes needed for current difference X\n//     // Calculate changes needed for current difference X\n//      // Calculate changes needed for current difference X\n//       // Calculate changes needed for current difference X\n//        // Calculate changes needed for current difference X\n//                 // Calculate the cost of achieving difference X\n//                 int cost1 = (left <= k) ? ((X + left) <= k ? 1 : 2) : 2; // Cost to change left\n//                 int cost2 = (right <= k) ? ((X + right) <= k ? 1 : 2) : 2; // Cost to change right\n//                 int cost3 = 2; // Cost to change both\n\n//                 // Choose the minimum cost for the current pair\n//                 currentChanges += min({cost1, cost2, cost3});\n//             }\n\n//             // Update the minimum changes needed\n//             chch = min(chch, currentChanges);\n//         }\n\n//         return chch;\n  // int n = nums.size();\n  //       int halfSize = n / 2;\n  //       vector<int> ab(halfSize);\n  //       vector<int> maxxx(halfSize);\n        \n  //       for (int i = 0; i < halfSize; ++i) {\n  //           int a = nums[i];\n  //           int b = nums[n - i - 1];\n  //           ab[i] =abs(a - b);\n  //           maxxx[i] =max({a, b, k - a, k - b});\n  //       }\n        \n  //       int totalChanges = n;\n  //     sort(ab.begin(), ab.end());\n        \n  //       for (int i = 0; i < halfSize; ++i) {\n  //           int diff = ab[i];\n  //           int T = (lower_bound(ab.begin(),ab.end(),diff)-ab.begin())*2+(halfSize-i-1);\n  //           for (int j = 0; j <= i; ++j) {\n  //               if (maxxx[j] < diff) {\n  //                   T -= 2;\n  //               } else {\n  //                   T -= 1;\n  //               }\n  //           }\n            \n  //           totalChanges =min(totalChanges, T);\n  //       }\n        \n  //       return totalChanges\n  map<int, vector<int>> m;\n        vector<int> v;\n \n        for (int i = 0; i < nums.size() / 2; ++i) {\n            int a = nums[i];\n            int b = nums[nums.size() - i - 1];\n            int diff = abs(a - b);\n\n             int X = max({a, b, k - a, k - b});\n\n             m[diff].push_back(X);\n            v.push_back(X);\n        }\n\n//                 int left = nums[i];\n//                 int right = nums[n - i - 1];\n//                 int diff = abs(left - right);\n\n//                 if (diff == X) {\n//                     // No change needed for this pair\n//                     continue;\n//                 }\n//  // Calculate changes needed for current difference X\n//   // Calculate changes needed for current difference X\n//    // Calculate changes needed for current difference X\n//     // Calculate changes needed for current difference X\n//      // Calculate changes needed for current difference X\n//       // Calculate changes needed for current difference X\n//        // Calculate changes needed for current difference X\n//                 // Calculate the cost of achieving difference X\n//                 int cost1 = (left <= k) ? ((X + left) <= k ? 1 : 2) : 2; // Cost to change left\n//                 int cost2 = (right <= k) ? ((X + right) <= k ? 1 : 2) : 2; // Cost to change right\n//                 int cost3 = 2; // Cost to change both\n\n//                 // Choose the minimum cost for the current pair\n//                 currentChanges += min({cost1, cost2, cost3});\n//             }\n\n//             // Update the minimum changes needed\n//             chch = min(chch, currentChanges);\n//         }\n\n//         return chch;\n  // int n = nums.size();\n  //       int halfSize = n / 2;\n  //       vector<int> ab(halfSize);\n  //       vector<int> maxxx(halfSize);\n        \n  //       for (int i = 0; i < halfSize; ++i) {\n  //           int a = nums[i];\n  //           int b = nums[n - i - 1];\n  //           ab[i] =abs(a - b);\n  //           maxxx[i] =max({a, b, k - a, k - b});\n  //       }\n        \n  //       int totalChanges = n;\n  //     sort(ab.begin(), ab.end());\n        \n  //       for (int i = 0; i < halfSize; ++i) {\n  //           int diff = ab[i];\n  //           int T = (lower_bound(ab.begin(),ab.end(),diff)-ab.begin())*2+(halfSize-i-1);\n  //           for (int j = 0; j <= i; ++j) {\n  //               if (maxxx[j] < diff) {\n  //                   T -= 2;\n  //               } else {\n  //                   T -= 1;\n        int ans = nums.size();  \n        sort(v.begin(), v.end());\n\n        for (const auto& [diff, values] : m) {\n            int T = lower_bound(v.begin(), v.end(), diff) - v.begin();\n            T = T * 2 + (nums.size() / 2 - T);\n\n//                 int left = nums[i];\n//                 int right = nums[n - i - 1];\n//                 int diff = abs(left - right);\n\n//                 if (diff == X) {\n//                     // No change needed for this pair\n//                     continue;\n//                 }\n//  // Calculate changes needed for current difference X\n//   // Calculate changes needed for current difference X\n//    // Calculate changes needed for current difference X\n//     // Calculate changes needed for current difference X\n//      // Calculate changes needed for current difference X\n//       // Calculate changes needed for current difference X\n//        // Calculate changes needed for current difference X\n//                 // Calculate the cost of achieving difference X\n//                 int cost1 = (left <= k) ? ((X + left) <= k ? 1 : 2) : 2; // Cost to change left\n//                 int cost2 = (right <= k) ? ((X + right) <= k ? 1 : 2) : 2; // Cost to change right\n//                 int cost3 = 2; // Cost to change both\n\n//                 // Choose the minimum cost for the current pair\n//                 currentChanges += min({cost1, cost2, cost3});\n//             }\n\n//             // Update the minimum changes needed\n//             chch = min(chch, currentChanges);\n//         }\n\n//         return chch;\n  // int n = nums.size();\n  //       int halfSize = n / 2;\n  //       vector<int> ab(halfSize);\n  //       vector<int> maxxx(halfSize);\n        \n  //       for (int i = 0; i < halfSize; ++i) {\n  //           int a = nums[i];\n  //           int b = nums[n - i - 1];\n  //           ab[i] =abs(a - b);\n  //           maxxx[i] =max({a, b, k - a, k - b});\n  //       }\n        \n  //       int totalChanges = n;\n  //     sort(ab.begin(), ab.end());\n        \n  //       for (int i = 0; i < halfSize; ++i) {\n  //           int diff = ab[i];\n  //           int T = (lower_bound(ab.begin(),ab.end(),diff)-ab.begin())*2+(halfSize-i-1);\n  //           for (int j = 0; j <= i; ++j) {\n  //               if (maxxx[j] < diff) {\n  //                   T -= 2;\n  //               } else {\n  //                   T -= 1;\n            for (const auto& X : values) {\n                if (X < diff) {\n                    T -= 2;\n                } else {\n                    T -= 1;\n                }\n            }\n\n//                 int left = nums[i];\n//                 int right = nums[n - i - 1];\n//                 int diff = abs(left - right);\n\n//                 if (diff == X) {\n//                     // No change needed for this pair\n//                     continue;\n//                 }\n//  // Calculate changes needed for current difference X\n//   // Calculate changes needed for current difference X\n//    // Calculate changes needed for current difference X\n//     // Calculate changes needed for current difference X\n//      // Calculate changes needed for current difference X\n//       // Calculate changes needed for current difference X\n//        // Calculate changes needed for current difference X\n//                 // Calculate the cost of achieving difference X\n//                 int cost1 = (left <= k) ? ((X + left) <= k ? 1 : 2) : 2; // Cost to change left\n//                 int cost2 = (right <= k) ? ((X + right) <= k ? 1 : 2) : 2; // Cost to change right\n//                 int cost3 = 2; // Cost to change both\n\n//                 // Choose the minimum cost for the current pair\n//                 currentChanges += min({cost1, cost2, cost3});\n//             }\n\n//             // Update the minimum changes needed\n//             chch = min(chch, currentChanges);\n//         }\n\n//         return chch;\n  // int n = nums.size();\n  //       int halfSize = n / 2;\n  //       vector<int> ab(halfSize);\n  //       vector<int> maxxx(halfSize);\n        \n  //       for (int i = 0; i < halfSize; ++i) {\n  //           int a = nums[i];\n  //           int b = nums[n - i - 1];\n  //           ab[i] =abs(a - b);\n  //           maxxx[i] =max({a, b, k - a, k - b});\n  //       }\n        \n  //       int totalChanges = n;\n  //     sort(ab.begin(), ab.end());\n        \n  //       for (int i = 0; i < halfSize; ++i) {\n  //           int diff = ab[i];\n  //           int T = (lower_bound(ab.begin(),ab.end(),diff)-ab.begin())*2+(halfSize-i-1);\n  //           for (int j = 0; j <= i; ++j) {\n  //               if (maxxx[j] < diff) {\n  //                   T -= 2;\n  //               } else {\n  //                   T -= 1;\n            ans = min(ans, T);\n        }\n\n        return ans;;\n\n\n    }\n    void solve55(){\n        cout<<\"hello\";\n        cout<<\"hello\";\n        cout<<\"hello\";\n        cout<<\"hello\";cout<<\"hello\";\n        cout<<\"hello\";\n        cout<<\"hello\";\n        cout<<\"hello\";\n        cout<<\"hello\";\n        cout<<\"hello\";\n        cout<<\"hello\";\n        cout<<\"hello\";\n        cout<<\"hello\";\n        cout<<\"hello\";\n    }\n    void solve555(){\n        cout<<\"hello\";\n        cout<<\"hello\";\n        cout<<\"hello\";\n        cout<<\"hello\";cout<<\"hello\";\n        cout<<\"hello\";\n        cout<<\"hello\";\n        cout<<\"hello\";\n        cout<<\"hello\";\n        cout<<\"hello\";\n        cout<<\"hello\";\n        cout<<\"hello\";\n        cout<<\"hello\";\n        cout<<\"hello\";\n    }\n    void solv34989e(){\n        cout<<\"hello\";\n        cout<<\"hello\";\n        cout<<\"hello\";\n        cout<<\"hello\";cout<<\"hello\";\n        cout<<\"hello\";\n        cout<<\"hello\";\n        cout<<\"hello\";\n        cout<<\"hello\";\n        cout<<\"hello\";\n        cout<<\"hello\";\n        cout<<\"hello\";\n        cout<<\"hello\";\n        cout<<\"hello\";\n    }\n    void solve34r094390(){\n        cout<<\"hello\";\n        cout<<\"hello\";\n        cout<<\"hello\";\n        cout<<\"hello\";cout<<\"hello\";\n        cout<<\"hello\";\n        cout<<\"hello\";\n        cout<<\"hello\";\n        cout<<\"hello\";\n        cout<<\"hello\";\n        cout<<\"hello\";\n        cout<<\"hello\";\n        cout<<\"hello\";\n        cout<<\"hello\";\n    }\n};",
    "submit_ts": "1721489965",
    "subm_id": "1327469041"
}