{
    "username": "elvinyang",
    "submission": "class Solution {\n    public int minimumDiameterAfterMerge(int[][] edges1, int[][] edges2) {\n        int n = edges1.length + 1;\n        int m = edges2.length + 1;\n\n        List<Integer>[] tree1 = buildTree(edges1, n);\n        List<Integer>[] tree2 = buildTree(edges2, m);\n\n        int diameter1 = getDiameter(tree1, n);\n        int diameter2 = getDiameter(tree2, m);\n\n        return Math.max((diameter1 + 1) / 2 + (diameter2 + 1) / 2 + 1, Math.max(diameter1, diameter2));\n    }\n\n    private List<Integer>[] buildTree(int[][] edges, int nodes) {\n        List<Integer>[] tree = new ArrayList[nodes];\n        for (int i = 0; i < nodes; i++) {\n            tree[i] = new ArrayList<>();\n        }\n        for (int[] edge : edges) {\n            tree[edge[0]].add(edge[1]);\n            tree[edge[1]].add(edge[0]);\n        }\n        return tree;\n    }\n\n    private int getDiameter(List<Integer>[] tree, int nodes) {\n        int[] dist = bfs(tree, 0);\n        int furthestNode = findFurthestNode(dist);\n        dist = bfs(tree, furthestNode);\n        int diameter = Arrays.stream(dist).max().getAsInt();\n        return diameter;\n    }\n\n    private int[] bfs(List<Integer>[] tree, int startNode) {\n        int nodes = tree.length;\n        int[] dist = new int[nodes];\n        Arrays.fill(dist, -1);\n        Queue<Integer> queue = new LinkedList<>();\n        queue.add(startNode);\n        dist[startNode] = 0;\n\n        while (!queue.isEmpty()) {\n            int node = queue.poll();\n            for (int neighbor : tree[node]) {\n                if (dist[neighbor] == -1) {\n                    dist[neighbor] = dist[node] + 1;\n                    queue.add(neighbor);\n                }\n            }\n        }\n        return dist;\n    }\n\n    private int findFurthestNode(int[] dist) {\n        int maxDist = -1;\n        int furthestNode = -1;\n        for (int i = 0; i < dist.length; i++) {\n            if (dist[i] > maxDist) {\n                maxDist = dist[i];\n                furthestNode = i;\n            }\n        }\n        return furthestNode;\n    }\n}",
    "submit_ts": 1719719422.0
}