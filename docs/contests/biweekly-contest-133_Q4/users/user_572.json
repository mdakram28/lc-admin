{
    "username": "rohan_mittal525",
    "submission": "using ll = long long;\nclass Solution {\npublic:\n    const int MOD = 1e9+7;\n    int numberOfPermutations(int n, vector<vector<int>>& reqs) {\n        unordered_map<int, int> mp;\n        for (auto i : reqs) {\n            mp[i[0] + 1] = i[1];\n        }\n        vector<vector<ll>> dp(n + 1, vector<ll>(401, 0));\n        dp[0][0] = 1;\n        for (int len = 1; len <= n; len++) {\n            for (int inv = 0; inv <= 400; inv++) {\n                for (int pos = 0; pos < len; pos++) {\n                    int prevInv = inv - pos;\n                    if (prevInv >= 0) {\n                        dp[len][inv] = (dp[len][inv] + dp[len - 1][prevInv]) % MOD;\n                    }\n                }\n            }\n            if (mp.count(len)) {\n                int targetInv = mp[len];\n                for (int i = 0; i <= 400; i++) {\n                    if (i != targetInv) {\n                        dp[len][i] = 0;\n                    }\n                }\n            }\n        }\n        ll res = 0;\n        for (auto i : dp[n]) {\n            res = (res + i) % MOD;\n        }\n        return res;\n    }\n};",
    "submit_ts": 1719070696.0
}