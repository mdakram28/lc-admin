{
    "username": "user0747oJ",
    "submission": "class Solution {\n    fun getResults(queries: Array<IntArray>): List<Boolean> {\n        val n = 1 + min(5 * 10_000, 3 * queries.size)\n        val tree = SegmentMaxEmpty(n)\n\n        return buildList {\n            for (query in queries) {\n                when (query[0]) {\n                    1 -> {\n                        val (_, index) = query\n\n                        tree.set(index)\n                    }\n\n                    2 -> {\n                        val (_, x, size) = query\n\n                        add(tree.get(x) >= size)\n                    }\n                }\n            }\n        }\n    }\n\n    private class SegmentMaxEmpty(n: Int) {\n\n        private val size = n.takeHighestOneBit().let { if (it == n) it else it * 2 }\n        private val data = Array(size * 2) { MaxEmpty(0, 0, 0, 0, false) }\n\n        init {\n            build(0, 0, size)\n        }\n\n        private fun MaxEmpty.reduce(v1: MaxEmpty, v2: MaxEmpty) {\n            size = v1.size + v2.size\n            prefix = if (v1.prefix == v1.size) v1.prefix + v2.prefix else v1.prefix\n            suffix = if (v2.suffix == v2.size) v2.suffix + v1.suffix else v2.suffix\n            max = max(max(v1.max, v2.max), v1.suffix + v2.prefix)\n\n            when {\n                v1.max > v2.max && v1.max > v1.suffix + v2.prefix -> isEnd = v1.isEnd\n\n                v2.max > v1.suffix + v2.prefix -> isEnd = v2.isEnd\n\n                v1.suffix != v1.size && v2.prefix != v2.size -> isEnd = false\n\n                else -> isEnd = true\n            }\n        }\n\n        private fun reduceNeutral(): MaxEmpty = MaxEmpty.NONE\n\n        private fun build(v: Int, lv: Int, rv: Int) {\n            if (isLeaf(lv, rv)) {\n                data[v].apply {\n                    size = 1\n                    prefix = 1\n                    suffix = 1\n                    max = 1\n                    isEnd = true\n                }\n                return\n            }\n\n            val middle = middle(lv, rv)\n\n            build(v.leftNode, lv, middle)\n            build(v.rightNode, middle, rv)\n            data[v].reduce(data[v.leftNode], data[v.rightNode])\n        }\n\n        fun get(r: Int): Int = get(1, r, 0, 0, size).let { it.max + 1 }\n\n        fun set(index: Int) = set(index, 0, 0, size)\n\n        private fun get(l: Int, r: Int, v: Int, lv: Int, rv: Int): MaxEmpty {\n            if (!intersects(l, r, lv, rv)) return reduceNeutral()\n            if (isInside(l, r, lv, rv)) return data[v]\n\n            val middle = middle(lv, rv)\n            return MaxEmpty(0, 0, 0, 0, false).apply {\n                reduce(\n                    get(l, r, v.leftNode, lv, middle),\n                    get(l, r, v.rightNode, middle, rv)\n                )\n            }\n        }\n\n        private fun set(index: Int, v: Int, lv: Int, rv: Int) {\n            if (isLeaf(lv, rv)) {\n                data[v].apply {\n                    size = 1\n                    prefix = 0\n                    suffix = 0\n                    max = 0\n                }\n                return\n            }\n\n            val middle = middle(lv, rv)\n\n            if (index < middle) set(index, v.leftNode, lv, middle) else set(index, v.rightNode, middle, rv)\n            data[v].reduce(data[v.leftNode], data[v.rightNode])\n        }\n\n        private fun intersects(l1: Int, r1: Int, l2: Int, r2: Int): Boolean = l1 < r2 && r1 > l2\n        private fun isInside(l1: Int, r1: Int, l2: Int, r2: Int): Boolean = l1 <= l2 && r2 <= r1\n\n        private fun isLeaf(lv: Int, rv: Int): Boolean = lv + 1 == rv\n        private fun middle(lv: Int, rv: Int): Int = (lv + rv) / 2\n        private fun size(lv: Int, rv: Int): Int = rv - lv\n\n        private val Int.leftNode: Int get() = 2 * this + 1\n        private val Int.rightNode: Int get() = 2 * this + 2\n    }\n\n    private data class MaxEmpty(var size: Int, var prefix: Int, var suffix: Int, var max: Int, var isEnd: Boolean) {\n\n        companion object {\n            val NONE: MaxEmpty = MaxEmpty(0, 0, 0, 0, false)\n        }\n    }\n}",
    "submit_ts": "1716652758",
    "subm_id": "1267671237"
}