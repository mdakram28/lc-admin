{
    "username": "Ashish032005",
    "submission": "#include <vector>\n#include <queue>\n#include <cmath>\n#include <utility>\nusing namespace std;\n\nclass Solution {\npublic:\n    bool bfs(vector<vector<int>>& adjList, int start, int goal1, int goal2, int totalNodes) {\n        queue<int> q;\n        vector<int> visited(totalNodes + 4, 0);\n        q.push(start);\n        visited[start] = 1;\n\n        while (!q.empty()) {\n            int current = q.front();\n            q.pop();\n            for (int neighbor : adjList[current]) {\n                if (!visited[neighbor]) {\n                    q.push(neighbor);\n                    visited[neighbor] = 1;\n                }\n            }\n        }\n        return visited[goal1] || visited[goal2];\n    }\n\n    void buildGraph(vector<pair<pair<int, int>, int>>& circles, vector<vector<int>>& adjList, int x, int y, int totalNodes) {\n        for (int i = 0; i < totalNodes; ++i) {\n            if (circles[i].first.first <= circles[i].second) {\n                adjList[totalNodes].push_back(i);\n                adjList[i].push_back(totalNodes);\n            }\n            if (x - circles[i].first.first <= circles[i].second) {\n                adjList[totalNodes + 2].push_back(i);\n                adjList[i].push_back(totalNodes + 2);\n            }\n            if (circles[i].first.second <= circles[i].second) {\n                adjList[totalNodes + 1].push_back(i);\n                adjList[i].push_back(totalNodes + 1);\n            }\n            if (y - circles[i].first.second <= circles[i].second) {\n                adjList[totalNodes + 3].push_back(i);\n                adjList[i].push_back(totalNodes + 3);\n            }\n            for (int j = i + 1; j < totalNodes; ++j) {\n                double dist = sqrt(pow(circles[i].first.first - circles[j].first.first, 2) +\n                                   pow(circles[i].first.second - circles[j].first.second, 2));\n                int radiusSum = circles[i].second + circles[j].second;\n                if (radiusSum >= dist) {\n                    adjList[i].push_back(j);\n                    adjList[j].push_back(i);\n                }\n            }\n        }\n    }\n\n    bool canReachCorner(int X, int Y, vector<vector<int>>& circlesInput) {\n        vector<pair<pair<int, int>, int>> circles(circlesInput.size());\n        vector<vector<int>> adjList(circlesInput.size() + 4);\n        int totalNodes = circlesInput.size();\n\n        for (int i = 0; i < totalNodes; ++i) {\n            circles[i].first.first = circlesInput[i][0];\n            circles[i].first.second = circlesInput[i][1];\n            circles[i].second = circlesInput[i][2];\n        }\n\n        buildGraph(circles, adjList, X, Y, totalNodes);\n\n        if (bfs(adjList, totalNodes, totalNodes + 1, totalNodes + 2, totalNodes + 4)) return false; // Check from bottom-left\n        if (bfs(adjList, totalNodes + 3, totalNodes + 2, totalNodes + 1, totalNodes + 4)) return false; // Check from top-right\n\n        return true;\n    }\n};\n",
    "submit_ts": "1722139092",
    "subm_id": "1335807639"
}