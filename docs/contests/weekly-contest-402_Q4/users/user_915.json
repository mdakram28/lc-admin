{
    "username": "SkinnySnakeLimb",
    "submission": "class Solution:\n    def countOfPeaks(self, nums: List[int], queries: List[List[int]]) -> List[int]:\n        def getsum(BITTree,i): \n            s = 0\n            i = i+1\n\n            while i > 0: \n\n                s += BITTree[i] \n\n                i -= i & (-i) \n            return s \n\n        def updatebit(BITTree , n , i ,v): \n\n            i += 1\n\n            while i <= n: \n\n                BITTree[i] += v \n\n                i += i & (-i) \n\n\n        def construct(arr, n): \n\n            BITTree = [0]*(n+1) \n\n            for i in range(n): \n                updatebit(BITTree, n, i, arr[i]) \n\n            return BITTree \n            \n        n = len(nums)\n        isPeak = [0] * n\n        \n        for i in range(1, n - 1):\n            if nums[i] > nums[i - 1] and nums[i] > nums[i + 1]:\n                isPeak[i] = 1\n                \n        tree = construct(isPeak, n)\n        m = len(queries)\n        \n        ret = []\n        \n        for i in range(m):\n            t, l, r = queries[i]\n            \n            if t == 1:\n                ans = getsum(tree, r) - getsum(tree, l - 1)\n                if isPeak[l]:\n                    ans -= 1\n                if isPeak[r] and r != l:\n                    ans -= 1\n                ret.append(ans)\n            else:\n                nums[l] = r\n                if l > 0 and l < n - 1 and nums[l] > nums[l - 1] and nums[l] > nums[l + 1]:\n                    if isPeak[l] == 0:\n                        isPeak[l] = 1\n                        updatebit(tree, n, l, 1)\n                else:\n                    if isPeak[l] == 1:\n                        isPeak[l] = 0\n                        updatebit(tree, n, l, -1)\n                l -= 1\n                if l >= 0:\n                    if l > 0 and l < n - 1 and nums[l] > nums[l - 1] and nums[l] > nums[l + 1]:\n                        if isPeak[l] == 0:\n                            isPeak[l] = 1\n                            updatebit(tree, n, l, 1)\n                    else:\n                        if isPeak[l] == 1:\n                            isPeak[l] = 0\n                            updatebit(tree, n, l, -1)\n                l += 2\n                if l <= n - 1:\n                    if l > 0 and l < n - 1 and nums[l] > nums[l - 1] and nums[l] > nums[l + 1]:\n                        if isPeak[l] == 0:\n                            isPeak[l] = 1\n                            updatebit(tree, n, l, 1)\n                    else:\n                        if isPeak[l] == 1:\n                            isPeak[l] = 0\n                            updatebit(tree, n, l, -1)\n                l -= 1\n                    \n        return ret",
    "submit_ts": 1718507590.0
}