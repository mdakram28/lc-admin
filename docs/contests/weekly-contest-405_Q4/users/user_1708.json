{
    "username": "liketheflower",
    "submission": "const int N = 5e4+10;\nint memo[N];\nconst int INF = 0x3f3f3f3f;\nstruct vertex {\n    bool exist;\n    int cost;\n    vector<vertex*> child;\n    vertex(char a): exist(false), cost(0)  {\n        child.assign(26, nullptr);\n    }\n};\nclass Trie {\n    public:\n    vertex* root;\n    Trie() {\n        root = new vertex('!');\n    }\n    void insert(string word, int cost) {\n        vertex* curr = root;\n        for (int i = 0; i < (int)word.size(); ++i) {\n            int alphaNum = word[i] - 'a';\n            if (curr->child[alphaNum] == nullptr) {\n                curr->child[alphaNum] = new vertex(word[i]);\n            }\n            curr = curr->child[alphaNum];\n        }\n        curr->exist = true;   \n        curr->cost = cost;\n    }\n    \n};\nclass Solution {\npublic:\n    int dp(int idx, string& target, Trie& trie) {\n        if (idx == target.size()) return 0;\n        if (memo[idx] != -1) return memo[idx];\n        \n        int ans = INF;\n        vertex* curr = trie.root;\n        for (int i = idx; i < target.size(); ++i) {\n            int alphaNum = target[i] -  'a';\n            curr =  curr->child[alphaNum];\n             if (curr == nullptr)break;\n            if (curr-> exist){\n                ans = min(ans, curr->cost + dp(i+1, target, trie));\n            }\n        }\n        return memo[idx] = ans;\n    }\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        Trie trie;\n        /*for (auto &w: words){\n            trie.insert(w);\n        }\n        */\n        unordered_map<string, int> word_cost;\n        for (int i = 0; i < (int)words.size(); ++i) {\n            if (word_cost.find(words[i]) == word_cost.end())\n            word_cost[words[i]] = costs[i];\n                else if (costs[i] < word_cost[words[i]]) {\n                    word_cost[words[i]] = costs[i];\n                }\n        }\n        for (auto& [word, cost] : word_cost) {\n            trie.insert(word, cost);\n        }\n        int n = target.size();\n        memset(memo, -1, sizeof(memo));\n        dp(0, target, trie);\n\n        return memo[0] ==INF? -1 : memo[0];\n    }\n};\n\n\n\n",
    "submit_ts": "1720323652",
    "subm_id": "1312380782"
}