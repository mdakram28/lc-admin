{
    "username": "launda01",
    "submission": "\n#include <vector>\n#include <unordered_map>\n\nclass Solution {\n    long long subarrayCount = 0;\nprivate:\n    std::unordered_map<int, int> previousResults;\n    void updateCountAndCurrentMap(int num, int k, std::unordered_map<int, int>& currentMap) {\n        if (num == k) {\n            subarrayCount += 1;\n        }\n        currentMap[num] = 1;\n\n        for (const auto& [key, value] : previousResults) {\n            int newKey = key & num;\n            if (newKey == k) {\n                subarrayCount += value;\n            }\n            if (currentMap.find(newKey) != currentMap.end()) {\n                currentMap[newKey] += value;\n            } else {\n                currentMap[newKey] = value;\n            }\n        }\n    }\n\npublic:\n    long long countSubarrays(std::vector<int>& nums, int k) {\n       int  arraySize = nums.size();\n       \n        \n        for (int i = 0; i < arraySize; ++i) {\n            std::unordered_map<int, int> currentMap;\n            updateCountAndCurrentMap(nums[i], k, currentMap);\n            previousResults = currentMap;\n        }\n\n        return subarrayCount;\n    }\n};\n",
    "submit_ts": "1720280756",
    "subm_id": "1311800933"
}