{
    "username": "miemouwu",
    "submission": "class Solution {\npublic:\n    int minimumDistance(vector<vector<int>>& points) {\n        vector<multiset<int>> ms_vec(4, multiset<int>());\n        unordered_map<int, vector<int>> idx_2_val_map;\n        for (int i = 0; i < 4; i++) {\n            auto& ms = ms_vec[i];\n            for (int j = 0; j < points.size(); j++) {\n                int a = (i&1) > 0 ? 1:-1;\n                int b = (i&2) > 0 ? 1:-1;\n                int val = a * points[j][0] + b * points[j][1];\n                //cout << val << endl;\n                ms.insert(val);\n                idx_2_val_map[j].push_back(val);\n            }\n        }\n        int res = INT_MAX;\n        for (int i = 0; i < points.size(); i++) {\n            int temp_max = 0;\n            for (int j = 0; j < 4; j++) {\n                int val = idx_2_val_map[i][j];\n                auto& ms = ms_vec[j];\n                //cout << \"i:\" <<i << \"j:\" << j << \",\" << ms.size() << \",\" << val<<endl;\n                auto iter = ms.find(val);\n                if (iter != ms.end()) {\n                    ms.erase(iter);\n                }\n                //cout << ms.size() <<endl;\n                temp_max = max(temp_max, *(ms.rbegin()) - *(ms.begin()));\n                if (iter != ms.end()) {\n                    ms.insert(val);\n                }\n            }\n            //cout << res << \",\" <<temp_max <<endl;\n            res = min(temp_max, res);\n        }\n        return res;\n    }\n};"
}