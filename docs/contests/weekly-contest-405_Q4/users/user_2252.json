{
    "username": "omsingh2136",
    "submission": "#include <vector>\n#include <string>\n#include <unordered_map>\n#include <climits>\n\nclass TrieNode {\npublic:\n    TrieNode* children[26];\n    std::vector<int> indexes;\n\n    TrieNode() {\n        for (int i = 0; i < 26; ++i) {\n            children[i] = nullptr;\n        }\n    }\n};\n\nclass Trie {\npublic:\n    TrieNode* root;\n\n    Trie() {\n        root = new TrieNode();\n    }\n\n    void insert(const std::string& word, int index) {\n        TrieNode* node = root;\n        for (char c : word) {\n            if (!node->children[c - 'a']) {\n                node->children[c - 'a'] = new TrieNode();\n            }\n            node = node->children[c - 'a'];\n        }\n        node->indexes.push_back(index);\n    }\n};\n\nclass Solution {\npublic:\n    int minimumCost(std::string target, std::vector<std::string>& words, std::vector<int>& costs) {\n        int n = target.size();\n        std::vector<int> dp(n + 1, INT_MAX);\n        dp[0] = 0; // No cost to form an empty string\n\n        Trie trie;\n\n        // Insert words into the trie with their corresponding index\n        for (int i = 0; i < words.size(); ++i) {\n            trie.insert(words[i], i);\n        }\n\n        // DP to find the minimum cost to form the target\n        for (int i = 0; i < n; ++i) {\n            if (dp[i] == INT_MAX) continue; // Skip if this state is not reachable\n\n            TrieNode* node = trie.root;\n            for (int j = i; j < n; ++j) {\n                if (!node->children[target[j] - 'a']) break;\n                node = node->children[target[j] - 'a'];\n                if (!node->indexes.empty()) {\n                    for (int index : node->indexes) {\n                        dp[j + 1] = std::min(dp[j + 1], dp[i] + costs[index]);\n                    }\n                }\n            }\n        }\n\n        return dp[n] == INT_MAX ? -1 : dp[n];\n    }\n};\n",
    "submit_ts": "1720324444",
    "subm_id": "1312399631"
}