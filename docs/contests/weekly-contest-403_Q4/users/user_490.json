{
    "username": "urimaj",
    "submission": "class Solution {\npublic:\n    int lowx[31][31][31][31] = {0}, lowy[31][31][31][31] = {0}, highx[31][31][31][31] = {0}, highy[31][31][31][31] = {0};\n    int minimumSum(vector<vector<int>>& grid) {\n        for (int i = 0; i < 31; i++) for (int j = 0; j < 31; j++) for (int k = 0; k < 31; k++) for (int l = 0; l < 31; l++) lowx[i][j][k][l] = 2e9;\n        for (int i = 0; i < 31; i++) for (int j = 0; j < 31; j++) for (int k = 0; k < 31; k++) for (int l = 0; l < 31; l++) lowy[i][j][k][l] = 2e9;\n        int n = grid.size();\n        int m = grid[0].size();\n        int ans = n * m;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                for (int k = i; k < n; k++) {\n                    int ax = 2e9, ay = 2e9, bx = 0, by = 0;\n                    for (int l = j; l < m; l++) {\n                        if (grid[k][l]) {\n                            ax = min(ax, k);\n                            ay = min(ay, l);\n                            bx = max(bx, k);\n                            by = max(by, l);\n                        }\n\n                        if (k == i) {\n                            lowx[i][j][k][l] = ax;\n                            lowy[i][j][k][l] = ay;\n                            highx[i][j][k][l] = bx;\n                            highy[i][j][k][l] = by;\n                        }\n                        else {\n                            lowx[i][j][k][l] = min(ax, lowx[i][j][k - 1][l]);\n                            lowy[i][j][k][l] = min(ay, lowy[i][j][k - 1][l]);\n                            highx[i][j][k][l] = max(bx, highx[i][j][k - 1][l]);\n                            highy[i][j][k][l] = max(by, highy[i][j][k - 1][l]);\n                        }\n\n                    }\n                }\n            }\n        }\n\n\n        for (int i = 0; i < n - 1; i++) {\n            for (int j = 0; j < i; j++) {\n                ans = min(ans, minimumArea(grid, 0, 0, j, m - 1) + minimumArea(grid, j + 1, 0, i, m - 1) + minimumArea(grid, i + 1, 0, n - 1, m - 1));\n            }\n        }\n                          \n        for (int i = 0; i < m - 1; i++) {\n            for (int j = 0; j < i; j++) {\n                ans = min(ans, minimumArea(grid, 0, 0, n - 1, j) + minimumArea(grid, 0, j + 1, n - 1, i) + minimumArea(grid, 0, i + 1, n - 1, m - 1));\n            }\n        }\n        \n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                ans = min(ans, minimumArea(grid, 0, 0, i, j) + minimumArea(grid, 0, j + 1, i, m - 1) + minimumArea(grid, i + 1, 0, n - 1, m - 1));\n                \n                ans = min(ans, minimumArea(grid, 0, 0, i, m - 1) + minimumArea(grid, i + 1, 0, n - 1, j) + minimumArea(grid, i + 1, j + 1, n - 1, m - 1));\n                ans = min(ans, minimumArea(grid, 0, 0, n - 1, j) + minimumArea(grid, 0, j + 1, i, m - 1) + minimumArea(grid, i + 1, j + 1, n - 1, m - 1));\n                ans = min(ans, minimumArea(grid, 0, 0, i, j) + minimumArea(grid, i + 1, 0, n - 1, j) + minimumArea(grid, 0, j + 1, n - 1, m - 1));\n            }\n        }\n        return ans;\n    }\n    \n    int minimumArea(vector<vector<int>>& grid, int sx, int sy, int ex, int ey) {\n        int n = grid.size();\n        int m = grid[0].size();\n        if (sx >= n || ex >= n || sx < 0 || ex < 0) return 1000;\n        if (sy >= m || ey >= m || sy < 0 || ey < 0) return 1000;\n        int ax = lowx[sx][sy][ex][ey], ay = lowy[sx][sy][ex][ey], bx = highx[sx][sy][ex][ey], by = highy[sx][sy][ex][ey];\n        if (ax == 2e9 || ay == 2e9) return 1000;\n        return (bx - ax + 1) * (by - ay + 1);\n    }\n};",
    "submit_ts": 1719114857.0
}