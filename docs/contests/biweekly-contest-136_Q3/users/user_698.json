{
    "username": "chang-jie-chang",
    "submission": "class Solution {\npublic:\n    int minFlips(vector<vector<int>>& grid) {\n        int m = grid.size(), n = grid[0].size();\n        int rl = 0, rr = m -1, ans = 0;\n        while (rl < rr) {\n            int cl = 0, cr = n-1, cnt = 0;\n            while (cl < cr) {\n                cnt = 0;\n                if (grid[rl][cl]) cnt++;\n                if (grid[rl][cr]) cnt++;\n                if (grid[rr][cl]) cnt++;\n                if (grid[rr][cr]) cnt++;\n                switch(cnt) {\n                    case 1: case 3: ans++; break;\n                    case 2: ans += 2; break;\n                    default: break;\n                }\n                cl++;   cr--;\n            }\n            rl++;   rr--;\n        }\n        int need = 0, cnt1 = 0;\n        if ((m & 1) && (n & 1) && grid[m/2][n/2]) ans++;\n        if (m & 1) {\n            int row = m / 2;\n            int l = 0, r = n-1;\n            while (l < r) {\n                if (grid[row][l]) cnt1++;\n                if (grid[row][r]) cnt1++;\n                if (grid[row][l] != grid[row][r]) need++;\n                l++;    r--;\n            }\n        }\n        if (n & 1) {\n            int col = n / 2;\n            int l = 0, r = m-1;\n            while (l < r) {\n                if (grid[l][col]) cnt1++;\n                if (grid[r][col]) cnt1++;\n                if (grid[l][col] != grid[r][col]) need++;\n                l++;    r--;\n            }\n        }\n        /*\n        if ((m & 1)) {\n            int row = m / 2, col = n / 2;\n            if (grid[row][col]) ans++;\n            \n            int l = 0, r = n-1;\n            while (l < r) {\n                if (grid[row][l]) cnt1++;\n                if (grid[row][r]) cnt1++;\n                if (grid[row][l] != grid[row][r]) need++;\n                l++;    r--;\n            }\n            l = 0, r = m-1;\n            while (l < r) {\n                if (grid[l][col]) cnt1++;\n                if (grid[r][col]) cnt1++;\n                if (grid[l][col] != grid[r][col]) need++;\n                l++;    r--;\n            }\n            bool flag = false;\n            for (int i = cnt1 - need; i <= cnt1 + need; i++) {\n                if (i % 4 == 0) {\n                    flag = true;\n                    break;\n                }\n            }\n            if (flag) ans += 2;\n            ans += need;\n        }else if (m & 1) {\n            int row = m / 2;\n            int l = 0, r = n - 1;\n            int need = 0, cnt1 = 0;\n            while (l < r) {\n                if (grid[row][l] != grid[row][r]) need++;\n                l++;    r--;\n            }\n        }\n        */\n        bool flag = false;\n        for (int i = cnt1 - need; i <= cnt1 + need; i++) {\n            if (i % 4 == 0) {\n                flag = true;\n                break;\n            }\n        }\n        if (!flag) ans += 2;\n        ans += need;\n        return ans;\n    }\n};",
    "submit_ts": "1722698187",
    "subm_id": "552269755"
}