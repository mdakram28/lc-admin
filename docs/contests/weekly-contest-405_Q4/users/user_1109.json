{
    "username": "Shashikant3006",
    "submission": "class Solution {\npublic:\n    struct TrieNode {\n        unordered_map<char, TrieNode*>childs;\n        vector<pair<int, int>>ending; \n    };\n\n    class Trie {\n    public:\n        TrieNode* root;\n        Trie(){root=new TrieNode();}\n\n        void fi(string& s, int i, int costs) {\n            TrieNode* node=root;\n            for (char c:s) {\n                if (!node->childs.count(c))\n                    node->childs[c] = new TrieNode();\n                node = node->childs[c];\n            }\n            node->ending.push_back({i, costs});\n        }\n    };\n\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n         int n = target.size();\n        vector<int> dp(n + 1, INT_MAX);\n        dp[0] = 0;\n\n        Trie trie;\n        for (int i =0; i < words.size(); ++i) {\n            trie.fi(words[i], i, costs[i]);\n        }\n\n        for (int i = 0; i < n; ++i) {\n            if (dp[i] == INT_MAX) continue;\n\n            TrieNode* node = trie.root;\n            for (int j = i; j < n; ++j) {\n                if (!node->childs.count(target[j])) break;\n                node = node->childs[target[j]];\n                for (auto& p : node->ending) {\n                    int ind = p.first;\n                    int Cost = p.second;\n                    int len = words[ind].size();\n                    if (i+len<=n) {\n                        dp[i+len] = min(dp[i+len], dp[i] + Cost);\n                    }\n                }\n            }\n        }\n\n        if(dp[n]==INT_MAX) return -1;\n        else return dp[n];\n    }\n};\n\n\n\n   ",
    "submit_ts": "1720323465",
    "subm_id": "1312376234"
}