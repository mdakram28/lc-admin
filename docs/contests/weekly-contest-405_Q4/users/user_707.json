{
    "username": "Alex2_8468",
    "submission": "class Solution {\npublic:\n\nclass node {\npublic:\n    map<char, node*> chld;\n    int cost=INT_MAX;\n};\nclass aux {\npublic:\n    node* root;\n    aux() {\n        root = new node();\n    }\n    void add( string& word, int cost) {\n        node* t = root;\n        for (auto c : word) {\n            if (!t->chld.count(c)) {\n                t->chld[c] = new node();\n            }\n            t = t->chld[c];\n        }\n        t->cost = min(t->cost, cost);\n    }\n};\n\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n          int n = target.size();\n        aux trie;\n        for (int i = 0; i < words.size(); ++i) {\n            trie.add(words[i], costs[i]);\n        }\n        vector<int> dp(n + 1, INT_MAX);\n        dp[0] = 0;\n        for (int i = 0; i < n; ++i) {\n            if (dp[i] == INT_MAX) continue; \n            node* t = trie.root;\n            for (int j = i; j < n; ++j) {\n                if (!t->chld.count(target[j])) break;\n                t = t->chld[target[j]];\n                if (t->cost != INT_MAX) {\n                    dp[j + 1] = min(dp[j + 1], dp[i] + t->cost);\n                }\n            }\n        }\n        return dp[n] == INT_MAX ? -1 : dp[n];\n    }\n};",
    "submit_ts": "1720320324",
    "subm_id": "1312290571"
}