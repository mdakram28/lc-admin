{
    "username": "cp_sud",
    "submission": "\n\nclass Solution {\npublic:\n\n    int calculateWays(long currentStep, long jump, int targetStep, bool jumpUsed, map<int, map<int, map<bool, int>>>& memo) {\n        if (currentStep - targetStep > 1) {\n            return 0;\n        }\n\n        if (currentStep < 0) {\n            return 0;\n        }\n\n        if (memo.find(currentStep) != memo.end()) {\n            if (memo[currentStep].find(jump) != memo[currentStep].end()) {\n                if (memo[currentStep][jump].find(jumpUsed) != memo[currentStep][jump].end()) {\n                    return memo[currentStep][jump][jumpUsed];\n                }\n            }\n        }\n\n        if (currentStep == targetStep) {\n            int withoutJump = 0;\n            if (!jumpUsed) {\n                withoutJump = calculateWays(currentStep - 1, jump, targetStep, true, memo);\n            }\n            int withJump = calculateWays(currentStep + (1LL << jump), jump + 1, targetStep, false, memo);\n            return 1 + withoutJump + withJump;\n        }\n\n        int withoutJump = 0;\n        if (!jumpUsed) {\n            withoutJump = calculateWays(currentStep - 1, jump, targetStep, true, memo);\n        }\n        int withJump = calculateWays(currentStep + (1LL << jump), jump + 1, targetStep, false, memo);\n\n        return memo[currentStep][jump][jumpUsed] = withoutJump + withJump;\n    }\n\n    int waysToReachStair(int targetStep) {\n        map<int, map<int, map<bool, int>>> memo;\n        return calculateWays(1, 0, targetStep, false, memo);\n    }\n};\n",
    "submit_ts": "1716089461",
    "subm_id": "1261842843"
}