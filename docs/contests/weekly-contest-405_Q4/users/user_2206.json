{
    "username": "Aman1111",
    "submission": "class TrieNode {\npublic:\n    unordered_map<char, TrieNode*> children;\n    int cost;\n\n    TrieNode() : cost(INT_MAX) {}\n};\nclass Trie {\npublic:\n    TrieNode* root;\n\n    Trie() {\n        root = new TrieNode();\n    }\n\n    void insert(const string& word, int cost) {\n        TrieNode* n = root;\n        for (char c : word) {\n            if (!n->children.count(c)) {\n                n->children[c] = new TrieNode();\n            }\n            n = n->children[c];\n        }\n        n->cost = min(n->cost, cost);\n    }\n};\nclass Solution {\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int n = target.size();\n        Trie t;\n        for (int i = 0; i < words.size(); ++i) {\n            t.insert(words[i], costs[i]);\n        }\n        vector<int> dp(n + 1, INT_MAX);\n        dp[0] = 0;\n        for (int i = 0; i < n; ++i) {\n            if (dp[i] == INT_MAX) continue;\n            TrieNode* temp = t.root;\n            for (int j = i; j < n; ++j) {\n                if (!temp->children.count(target[j])) break;\n                temp = temp->children[target[j]];\n                if (temp->cost != INT_MAX) {\n                    dp[j + 1] = min(dp[j + 1], dp[i] + temp->cost);\n                }\n            }\n        }\n        return dp[n] == INT_MAX ? -1 : dp[n];\n    }\n};",
    "submit_ts": "1720323821",
    "subm_id": "1312384851"
}