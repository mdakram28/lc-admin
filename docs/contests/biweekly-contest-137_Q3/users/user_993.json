{
    "username": "Ritesh Roushan",
    "submission": "#include <vector>\n#include <algorithm>\n#include <climits>\n\nusing namespace std;\n\nclass Solution {\npublic:\n    long long maximumValueSum(vector<vector<int>>& board) {\n        int rowCount = board.size();\n        int colCount = board[0].size();\n        \n        vector<pair<int, int>> topValues[rowCount];\n\n        for (int i = 0; i < rowCount; ++i) {\n            vector<pair<int, int>> rowCandidates;\n            for (int j = 0; j < colCount; ++j) {\n                rowCandidates.push_back({board[i][j], j});\n            }\n            sort(rowCandidates.rbegin(), rowCandidates.rend());\n            topValues[i] = {rowCandidates[0], rowCandidates[1], rowCandidates[2]};\n        }\n        \n        long long maxValueSum = LLONG_MIN;\n        \n        for (int r1 = 0; r1 < rowCount - 2; ++r1) {\n            for (int r2 = r1 + 1; r2 < rowCount - 1; ++r2) {\n                for (int r3 = r2 + 1; r3 < rowCount; ++r3) {\n                    for (auto &[val1, col1] : topValues[r1]) {\n                        for (auto &[val2, col2] : topValues[r2]) {\n                            if (col1 == col2) continue;\n                            for (auto &[val3, col3] : topValues[r3]) {\n                                if (col3 == col1 || col3 == col2) continue;\n                                long long currentSum = static_cast<long long>(val1) + val2 + val3;\n                                maxValueSum = max(maxValueSum, currentSum);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        \n        return maxValueSum;\n    }\n};\n",
    "submit_ts": "1723908763",
    "subm_id": "1359166161"
}