{
    "username": "KVNS07",
    "submission": "struct trie{\n    struct trie *child[26];\n    int index;\n    int val;\n    bool end;\n};\nint smi=-1;\nstruct trie* emptyNode(){\n    struct trie* ans=new trie;\n    ans->end=false;\n    ans->index=-1;\n    ans->val=1e9;\n    for(int i=0;i<26;i++) ans->child[i]=NULL;\n    return ans;\n}\nvoid insert(struct trie* root,string word,int value){\n    struct trie* tmp=root;\n    for(int i=0;i<word.length();i++){\n        if(!tmp->child[word[i]-'a']){\n            tmp->child[word[i]-'a']=emptyNode();\n        }\n        tmp=tmp->child[word[i]-'a'];\n    }\n    tmp->val=min(tmp->val,value);\n    // cout<<word<<\" \"<<tmp->val<<endl;\n    // cnt=tmp->count;\n    // if(cnt>word.length()) {tmp->index=i;cnt=word.length();}\n    tmp->end=true;\n}\nvoid query(struct trie* root,string& suf,vector<int>&dp,int ind){\n    struct trie* tmp=root;\n    // int prev=smi;\n    int ans=0;\n    int cnt=0;\n    int lst=ind;\n    // i=ind\n    for(int i=ind;i<suf.length();i++){\n        if(!tmp->child[suf[i]-'a']){\n            // if(i==0) return smi;\n            // cout<<suf[i]<<endl;\n            // return 1e9;\n            // if(root->child[suf[i]-'a'])\n            // tmp=root->child[suf[i]-'a'];\n            break;\n        }\n        tmp=tmp->child[suf[i]-'a'];\n        cnt++;\n        if(tmp->end==true){\n            // cout<<tmp->val<<\" \";\n            dp[i+1]=min(dp[i+1],dp[lst]+tmp->val);\n            // lst=i+1;\n            ans+=tmp->val;\n        } \n        // prev=tmp->index;\n        // cout<<ans<<\" \"<<cnt<<endl;\n    }\n    // return {ans,cnt};\n}\nclass Solution {\npublic:\n    \n    int fun(int i,string s,unordered_map<string,int>&mp,vector<int>&dp){\n        string cur=\"\";\n        int ans=1e9;\n        int fl=0;\n        if(i==s.length()) return 0;\n        if(dp[i]!=-1) return dp[i];\n        for(int j=i;j<s.length();j++){\n            cur+=s[j];\n            if(mp[cur]!=0){\n                fl=1;\n                // cout<<cur<<endl;\n                // int res=\n                ans=min(ans,mp[cur]+fun(j+1,s,mp,dp));\n            } \n        }\n        if(fl==0) return 1e9;\n        return dp[i]=ans;\n    }\n    \n    int minimumCost(string target, vector<string>& w, vector<int>& costs) {\n        // unordered_map<string,int> mp;\n        vector<int> dp(target.size()+2,1e9);\n        // for(int i=0;i<words.size();i++){\n        //     int prev=mp[words[i]]==0?1e9:mp[words[i]];\n        //   mp[words[i]]=min(prev,costs[i]);  \n        // } \n        // int ans=fun(0,target,mp,dp);\n        struct trie* root=emptyNode();\n        \n        for(int i=0;i<w.size();i++){\n            string tmp=w[i];\n            insert(root,tmp,costs[i]);\n        }\n        // vector<int> dp(tar)\n        dp[0]=0;\n        for(int i=0;i<target.size();i++){\n            // string\n            query(root,target,dp,i);\n            // cout<<ans.first<<\" \"<<ans.second<<endl;\n            // dp[i+ans.second+1]=min(dp[i+ans.second+1],dp[i]+ans.first);\n            // cout<<dp[i]<<endl;\n        }\n        // for(int i=1;i<=target.size();i++) cout<<i<<\" \"<<dp[i]<<endl;\n        int ans=0;\n        ans=dp[target.size()];\n        // cout<<dp[target.size()-1];\n        // cout\n        return ans==1e9?-1:ans;\n    }\n};\n",
    "submit_ts": "1720324565",
    "subm_id": "1312402635"
}