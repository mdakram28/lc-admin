{
    "username": "Adarshkumar_iitbhu",
    "submission": "#include <vector>\n#include <map>\nusing namespace std;\n\nclass Solution {\npublic:\n    int numberOfPermutations(int n, vector<vector<int>>& requirements) {\n        long long md = 1e9+7, num = 400;\n        \n        // Create a map to store requirements with 1-based index adjustment\n        map<long long, long long> m;\n        for (auto& it : requirements) {\n            m[it[0] + 1] = it[1]; // Store end index + 1 and inversion count\n        }\n        \n        // Initialize 2D array for permutation counts\n        vector<vector<long long>> dp(n + 1, vector<long long>(num + 1, 0));\n        dp[0][0] = 1ll; // One way to permute zero numbers with zero inversions\n        // Build the dp table\n        for (int i = 1; i <= n; ++i) {\n            for (int j = 0; j <= num; j++) {\n                for (int k = 0; k < i; k++) {\n                    int p1 = j - k;\n                    if (p1 >= 0) {\n                        dp[i][j] = (dp[i][j] + dp[i - 1][p1]) % md;\n                    }\n                }\n            }\n            \n            // Apply requirements constraints\n            if (m.find(i) != m.end()) {\n                long long num1 = m[i];\n                for (int j = 0; j <= num; j++) {\n                    if (j != num1) {\n                        dp[i][j] = 0;\n                    }\n                }\n            }\n        }\n        \n        // Calculate the result as the sum of permutations with the required inversions\n        long long ans = 0;\n        for (int j = 0; j <= num; j++) {\n            ans = (ans%md + dp[n][j]%md) % md;\n        }\n        \n        return (ans%md + md)%md;\n    }\n};\n",
    "submit_ts": 1719071177.0
}