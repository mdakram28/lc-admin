{
    "username": "himanshu2622",
    "submission": "class Solution {\npublic:\n    // BFS function to check connectivity between corners\n    bool bfs(vector<vector<int>>& adjacencyList, int startNode, int targetNode1, int targetNode2, int totalNodes) {\n        queue<int> q;\n        vector<int> visited(totalNodes, 0);\n        q.push(startNode);\n        visited[startNode] = 1;\n\n        while(!q.empty()) {\n            int currentNode = q.front();\n            q.pop();\n            for(int neighbor : adjacencyList[currentNode]) {\n                if(!visited[neighbor]) {\n                    q.push(neighbor);\n                    visited[neighbor] = 1;\n                }\n            }\n        }\n        return visited[targetNode1] || visited[targetNode2];\n    }\n\n    bool canReachCorner(int width, int height, vector<vector<int>>& circleData) {\n        vector<pair<pair<int, int>, int>> c(circleData.size());\n        int noC = circleData.size();\n\n        for (int i = 0; i < noC; ++i) {\n            c[i].first.first = circleData[i][0];\n            c[i].first.second = circleData[i][1];\n            c[i].second = circleData[i][2];\n        }\n\n        vector<vector<int>> adjacencyList(noC + 4);\n\n        for(int i = 0; i < noC; ++i) {\n            if (c[i].first.first <= c[i].second) {\n                adjacencyList[noC].push_back(i);\n                adjacencyList[i].push_back(noC);\n            }\n            if (width - c[i].first.first <= c[i].second) {\n                adjacencyList[noC + 2].push_back(i);\n                adjacencyList[i].push_back(noC + 2);\n            }\n            if (c[i].first.second <= c[i].second) {\n                adjacencyList[noC + 1].push_back(i);\n                adjacencyList[i].push_back(noC + 1);\n            }\n            if (height - c[i].first.second <= c[i].second) {\n                adjacencyList[noC + 3].push_back(i);\n                adjacencyList[i].push_back(noC + 3);\n            }\n            for(int j = i + 1; j < noC; ++j) {\n                double dist = sqrt(pow(c[i].first.first - c[j].first.first, 2) + pow(c[i].first.second - c[j].first.second, 2));\n                int rsum = c[i].second + c[j].second;\n                if (rsum >= dist) {\n                    adjacencyList[i].push_back(j);\n                    adjacencyList[j].push_back(i);\n                }\n            }\n        }\n\n        bool ans = bfs(adjacencyList, noC, noC + 1, noC + 2, noC + 4);\n        ans = max(ans, bfs(adjacencyList, noC + 3, noC + 2, noC + 1, noC + 4));\n\n        return !ans;\n    }\n};\n",
    "submit_ts": "1722137450",
    "subm_id": "1335764173"
}