{
    "username": "jteer",
    "submission": "class Solution:\n    def minimumCost(self, target: str, words: List[str], costs: List[int]) -> int:\n        # n = len(target)\n#         dp = [float('inf')] * (n + 1)\n#         dp[0] = 0\n#         for i in range(n):\n#             if dp[i] == float('inf'):\n#                 continue\n#             for word, cost in zip(words, costs):\n#                 if target.startswith(word, i):\n#                     dp[i + len(word)] = min(dp[i + len(word)], dp[i] + cost)\n#         return dp[n] if dp[n] != float('inf') else -1\n\n        n = len(target)\n        trie = Trie()\n\n        for word, cost in zip(words, costs):\n            trie.insert(word, cost)\n\n        dp = [float('inf')] * (n + 1)\n        dp[0] = 0  # The cost to construct an empty string is 0\n\n        for i in range(n):\n            if dp[i] == float('inf'):\n                continue  # Skip impossible states\n            for end, cost in trie.search(target, i):\n                dp[end] = min(dp[end], dp[i] + cost)\n\n        return dp[n] if dp[n] != float('inf') else -1\n    \nclass TrieNode:\n    def __init__(self):\n        self.children = {}\n        self.min_cost = float('inf')\n\nclass Trie:\n    def __init__(self):\n        self.root = TrieNode()\n    \n    def insert(self, word, cost):\n        node = self.root\n        for char in word:\n            if char not in node.children:\n                node.children[char] = TrieNode()\n            node = node.children[char]\n        node.min_cost = min(node.min_cost, cost)\n    \n    def search(self, s, start):\n        node = self.root\n        results = []\n        for i in range(start, len(s)):\n            if s[i] in node.children:\n                node = node.children[s[i]]\n                if node.min_cost != float('inf'):\n                    results.append((i + 1, node.min_cost))  # (end position, min cost)\n            else:\n                break\n        return results",
    "submit_ts": "1720320514",
    "subm_id": "1312296530"
}