{
    "username": "Notorious2001",
    "submission": "public class Solution {\n    private class TrieNode {\n        public Dictionary<char, TrieNode> children = new Dictionary<char, TrieNode>();\n        public List<int> wordIndices = new List<int>();\n    }\n\n    public int MinimumCost(string target, string[] words, int[] costs) {\n        TrieNode root = new TrieNode();\n        for (int i = 0; i < words.Length; i++) {\n            TrieNode node = root;\n            foreach (char c in words[i]) {\n                if (!node.children.ContainsKey(c)) {\n                    node.children[c] = new TrieNode();\n                }\n                node = node.children[c];\n            }\n            node.wordIndices.Add(i);\n        }\n\n        int targetLength = target.Length;\n        int[] dp = new int[targetLength + 1];\n        Array.Fill(dp, int.MaxValue);\n        dp[0] = 0;\n\n        for (int i = 0; i < targetLength; i++) {\n            if (dp[i] == int.MaxValue) continue;\n\n            TrieNode node = root;\n            for (int j = i; j < targetLength; j++) {\n                if (!node.children.ContainsKey(target[j])) break;\n\n                node = node.children[target[j]];\n                foreach (int wordIndex in node.wordIndices) {\n                    int wordLength = words[wordIndex].Length;\n                    int cost = costs[wordIndex];\n                    if (i + wordLength <= targetLength) {\n                        dp[i + wordLength] = Math.Min(dp[i + wordLength], dp[i] + cost);\n                    }\n                }\n            }\n        }\n\n        return dp[targetLength] == int.MaxValue ? -1 : dp[targetLength];\n    }\n}\n",
    "submit_ts": "1720322075",
    "subm_id": "1312340039"
}