{
    "username": "popt_",
    "submission": "class Solution {\n    int [] dp;\n    Trie newRoot;\n   public class TrieNode {\n        TrieNode[] children = new TrieNode[26];\n        boolean isEndOfWord;\n        int val;\n\n        TrieNode() {\n            isEndOfWord = false;\n            for (int i = 0; i < 26; i++) {\n                children[i] = null;\n            }\n            val=Integer.MAX_VALUE;\n        }\n    }\n    public class Trie {\n        public TrieNode root;\n\n        public Trie() {\n            root = new TrieNode();\n        }\n\n        // Method to insert a string into the trie\n        public void insert(String key, int val) {\n            int length = key.length();\n            TrieNode pCrawl = root;\n\n            for (int level = 0; level < length; level++) {\n                int index = key.charAt(level) - 'a';\n                if (pCrawl.children[index] == null) {\n                    pCrawl.children[index] = new TrieNode();\n                }\n                pCrawl = pCrawl.children[index];\n            }\n\n            // Mark last node as leaf (end of word)\n            pCrawl.isEndOfWord = true;\n            pCrawl.val = Math.min(pCrawl.val,val);\n        }\n\n        // Method to search for a string in the trie\n        public int search(String key) {\n            int length = key.length();\n            TrieNode pCrawl = root;\n\n            for (int level = 0; level < length; level++) {\n                int index = key.charAt(level) - 'a';\n                if (pCrawl.children[index] == null) {\n                    return Integer.MAX_VALUE;\n                }\n                pCrawl = pCrawl.children[index];\n            }\n            // if(pcrawl==null)return -1;\n            return pCrawl.val;\n        }\n    }\n    public int minimumCost(String target, String[] words, int[] costs) {\n        newRoot = new Trie();\n        for(int i=0;i<words.length;i++){\n            newRoot.insert(words[i],costs[i]);\n        }\n        int n= target.length();\n        dp = new int[n+1];\n        for(int i=0;i<=n;i++)dp[i]=Integer.MAX_VALUE;\n        int [] tar=new int[n];\n        for(int i=0;i<n;i++)tar[i]=(int)(target.charAt(i)-'a');\n        helper(0,tar);\n        for(int i=0;i<n;i++){\n            if(dp[i]!=Integer.MAX_VALUE)helper(i+1,tar);\n        }\n        // for(String x:words){\n        //     System.out.println(newRoot.search(x));\n        // }\n        if(dp[n-1]==Integer.MAX_VALUE)return -1;\n        \n        return dp[n-1];\n    }\n    public void helper(int i, int[] path ){\n        TrieNode pCrawl = newRoot.root;\n        int n=path.length;\n        int mainVal=0;\n        if(i!=0)mainVal=dp[i-1];\n        while(i<n){\n            pCrawl=pCrawl.children[path[i]];\n            if(pCrawl==null)return;\n            // System.out.print((char)(path[i]+'a')+\",\");\n            if(pCrawl.isEndOfWord && dp[i]>mainVal+pCrawl.val){\n                \n                dp[i]=mainVal+pCrawl.val;\n                // System.out.print(dp[i]);\n            }\n            i++;\n        }\n    }\n}",
    "submit_ts": "1720324266",
    "subm_id": "1312395416"
}