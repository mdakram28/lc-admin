{
    "username": "clarocroma",
    "submission": "#include <unordered_map>\n#include <vector>\n#include <string>\nusing namespace std;\n\nclass TNode {\npublic:\n    unordered_map<char, TNode*> c;\n    vector<pair<int, int>> w;\n};\n\nclass T {\npublic:\n    TNode* r;\n\n    T() {\n        r = new TNode();\n    }\n\n    void i(const string& word, int idx, int cost) {\n        TNode* n = r;\n        for (char ch : word) {\n            if (!n->c.count(ch)) {\n                n->c[ch] = new TNode();\n            }\n            n = n->c[ch];\n        }\n        n->w.push_back({idx, cost});\n    }\n};\n\nclass Solution {\npublic:\n    int minimumCost(const string& t, vector<string>& w, vector<int>& c) {\n        int n = t.size();\n        vector<int> dp(n + 1, INT_MAX);\n        dp[0] = 0;\n\n        T tr;\n        for (int i = 0; i < w.size(); ++i) {\n            tr.i(w[i], i, c[i]);\n        }\n\n        for (int i = 0; i < n; ++i) {\n            if (dp[i] == INT_MAX) continue;\n\n            TNode* nd = tr.r;\n            for (int j = i; j < n; ++j) {\n                if (!nd->c.count(t[j])) break;\n                nd = nd->c[t[j]];\n                for (auto& p : nd->w) {\n                    int len = w[p.first].size();\n                    if (i + len <= n) {\n                        dp[i + len] = min(dp[i + len], dp[i] + p.second);\n                    }\n                }\n            }\n        }\n\n        return dp[n] == INT_MAX ? -1 : dp[n];\n    }\n};\n",
    "submit_ts": "1720322428",
    "subm_id": "1312349647"
}