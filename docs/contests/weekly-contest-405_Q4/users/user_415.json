{
    "username": "ReprisalGod",
    "submission": " class Solution {\npublic:\n\n\nclass TrieNode {\npublic:\n    vector<TrieNode*> children;\n    int cost;\n    bool isEnd;\n\n    TrieNode() : children(26, nullptr), cost(INT_MAX), isEnd(false) {}\n};\n\nclass Trie {\npublic:\n    TrieNode* root;\n\n    Trie() {\n        root = new TrieNode();\n    }\n\n    void insertWord(const string& word, int cost) {\n        TrieNode* node = root;\n        for (char c : word) {\n            if (!node->children[c - 'a']) {\n                node->children[c - 'a'] = new TrieNode();\n            }\n            node = node->children[c - 'a'];\n        }\n        node->cost = min(cost, node->cost);\n        node->isEnd = true;\n    }\n\n    TrieNode* getRoot() {\n        return root;\n    }\n};\n\nint minimumCost(string target, vector<string>& words, vector<int>& costs) {\n    Trie trie;\n    int length = target.size();\n    vector<int> minCost(length + 1, INT_MAX);\n\n    for (int i = 0; i < words.size(); ++i) {\n        trie.insertWord(words[i], costs[i]);\n    }\n\n    minCost[0] = 0;\n\n    for (int i = 0; i < length; ++i) {\n        if (minCost[i] == INT_MAX) continue;\n\n        TrieNode* node = trie.getRoot();\n        for (int j = i; j < length; ++j) {\n            char c = target[j];\n            if (!node->children[c - 'a']) break;\n            node = node->children[c - 'a'];\n            if (node->isEnd) {\n                minCost[j + 1] = min(minCost[j + 1], minCost[i] + node->cost);\n            }\n        }\n    }\n\n    return minCost[length] == INT_MAX ? -1 : minCost[length];\n\n    }\n};",
    "submit_ts": "1720322393",
    "subm_id": "1312348711"
}