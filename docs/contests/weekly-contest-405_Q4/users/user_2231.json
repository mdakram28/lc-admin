{
    "username": "akshitgautam42",
    "submission": "// class Solution {\n// public:\n//     int minimumCost(string target, vector<string>& words, vector<int>& costs)\n//     {\n//         unordered_map<string, int> wordMap;\n//         int n = words.size();\n//         for (int i = 0; i < n; i++) {\n\n//             if (wordMap.find(words[i]) == wordMap.end()) {\n//                 wordMap[words[i]] = costs[i];\n//             } else {\n//                 wordMap[words[i]] = min(wordMap[words[i]], costs[i]);\n//             }\n//         }\n//         int m = target.length();\n\n//         vector<int> dp(m + 1, INT_MAX);\n\n//         dp[0] = 0;\n\n//         for (int i = 1; i <= m; i++) {\n//             for (auto word : words) {\n//                 int len = word.length();\n\n//                 if (i >= len && target.substr(i - len, len) == word) {\n//                     if (dp[i - len] != INT_MAX) {\n//                         dp[i] = min(dp[i], dp[i - len] + wordMap[word]);\n//                     }\n//                 }\n//             }\n//         }\n\n//         return dp[m] == INT_MAX ? -1 : dp[m];\n//     }\n// };\n\n// class TrieNode {\n// public:\n//     unordered_map<char, TrieNode*> children;\n//     int cost;\n//     TrieNode() : cost(INT_MAX) {}\n// };\n\n// class Solution {\n// private:\n//     TrieNode* root;\n\n//     void insert(const string& word, int cost) {\n//         TrieNode* node = root;\n//         for (char c : word) {\n//             if (!node->children[c]) {\n//                 node->children[c] = new TrieNode();\n//             }\n//             node = node->children[c];\n//         }\n//         node->cost = min(node->cost, cost);\n//     }\n\n// public:\n//     int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n//         root = new TrieNode();\n//         for (int i = 0; i < words.size(); i++) {\n//             insert(words[i], costs[i]);\n//         }\n\n//         int n = target.length();\n//         vector<int> dp(n + 1, INT_MAX);\n//         dp[0] = 0;\n\n//         for (int i = 1; i <= n; i++) {\n//             TrieNode* node = root;\n//             for (int j = i - 1; j >= 0 && node; j--) {\n//                 node = node->children[target[j]];\n//                 if (node && node->cost != INT_MAX && dp[j] != INT_MAX) {\n//                     dp[i] = min(dp[i], dp[j] + node->cost);\n//                 }\n//             }\n//         }\n\n//         return dp[n] == INT_MAX ? -1 : dp[n];\n//     }\n// };\n\nclass TrieNode {\npublic:\n    unordered_map<char, TrieNode*> children;\n    int cost;\n    TrieNode() : cost(INT_MAX) {}\n};\n\nclass Trie {\npublic:\n    TrieNode* root;\n    \n    Trie() {\n        root = new TrieNode();\n    }\n    \n    void insert(string word, int cost) {\n        TrieNode* node = root;\n        for (char c : word) {\n            if (!node->children.count(c)) {\n                node->children[c] = new TrieNode();\n            }\n            node = node->children[c];\n        }\n        node->cost = min(node->cost, cost);\n    }\n};\n\nclass Solution {\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        Trie trie;\n        int n = words.size();\n        \n        // Build the Trie\n        for (int i = 0; i < n; i++) {\n            trie.insert(words[i], costs[i]);\n        }\n        \n        int m = target.length();\n        vector<int> dp(m + 1, INT_MAX);\n        dp[0] = 0;\n\n        // Dynamic Programming to compute the minimum cost\n        for (int i = 0; i < m; i++) {\n            if (dp[i] == INT_MAX) continue;\n            TrieNode* node = trie.root;\n            for (int j = i; j < m; j++) {\n                if (!node->children.count(target[j])) break;\n                node = node->children[target[j]];\n                if (node->cost != INT_MAX) {\n                    dp[j + 1] = min(dp[j + 1], dp[i] + node->cost);\n                }\n            }\n        }\n\n        return dp[m] == INT_MAX ? -1 : dp[m];\n    }\n};",
    "submit_ts": "1720323242",
    "subm_id": "1312370787"
}