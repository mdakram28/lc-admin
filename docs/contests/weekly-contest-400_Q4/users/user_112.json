{
    "username": "dennis753951",
    "submission": "class Solution {\npublic:\n    int minimumDifference(vector<int>& nums, int k) {\n        int n = nums.size();\n        \n        int pref[n + 1][31];\n        \n        memset(pref, 0, sizeof(pref));\n        \n        int t;\n        for(int i = 0; i != n; ++i) {\n            t = nums[i];\n            \n            for(char j = 0; j != 30; ++j) {\n                pref[i + 1][j] = pref[i][j];\n                if(~t & 1) {\n                    ++pref[i + 1][j];\n                }\n                \n                t >>= 1;\n            }\n        }\n        \n        int res = INT_MAX;\n        int L, mid, R;\n        \n        int A[30];\n        \n        for(int i = 0; i != n; ++i) {\n            if(nums[i] == k) return 0;\n            \n            // find last that >= k\n\n            //binary search the last value that satisfies condition\n\n            L = i, R = n - 1;\n\n            while(L <= R) {\n                mid = (L + R) >> 1;\n\n                // cout << L << \", \" << mid << \", \" << R << \"\\n\";\n                //[i ~ mid]\n\n                t = 0;\n                for(char j = 0; j != 30; ++j) {\n                    A[j] = pref[mid + 1][j] - pref[i][j];\n                    if(!A[j]) t += 1 << j;\n                }\n\n                if(t < k)\n                    R = mid - 1;\n                else\n                    L = mid + 1;\n            }\n\n            // L - 1\n\n            // return L - 1;\n\n            t = 0;\n            for(char j = 0; j != 30; ++j) {\n                A[j] = pref[L][j] - pref[i][j];\n                if(!A[j]) t += 1 << j;\n            }\n\n            res = min(res, abs(t - k));\n            if(!res) return 0;\n\n            if(t >= k && L - 1 != n - 1) {\n                t &= nums[L];\n                res = min(res, abs(t - k));\n            }\n            \n        }\n        \n        return res;\n    }\n};",
    "submit_ts": 1717297305.0
}