{
    "username": "meng-hsuan",
    "submission": "class Solution:\n    def minimumDistance(self, points: List[List[int]]) -> int:\n        n = len(points)\n        s = []\n        d = []\n        for i in range(n):\n            s.append(points[i][0] + points[i][1])\n            d.append(points[i][0] - points[i][1])\n        max_s = max(s)\n        min_s = min(s)\n        max_d = max(d)\n        min_d = min(d)\n        print(max_s, min_s, max_d, min_d)\n        \n        if max_s - min_s >= max_d - min_d:\n            best = max_s - min_s\n            argmax = 0\n            while s[argmax] != max_s:\n                argmax += 1\n            argmin = 0\n            while s[argmin] != min_s:\n                argmin += 1\n            #print(\"s\", argmax, argmin)\n        else:\n            best = max_d - min_d\n            argmax = 0\n            while d[argmax] != max_d:\n                argmax += 1\n            argmin = 0\n            while d[argmin] != min_d:\n                argmin += 1\n            #print(\"d\", argmax, argmin)\n        \n        for skiped in [argmax, argmin]:\n            s1 = s[:skiped] + s[skiped + 1:]\n            d1 = d[:skiped] + d[skiped + 1:]\n            best = min(best, max(max(s1) - min(s1), max(d1) - min(d1)))\n        \n        return best\n    "
}