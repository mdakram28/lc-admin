{
    "username": "meng-hsuan",
    "submission": "class Solution:\n    def shortestDistanceAfterQueries(self, n: int, queries: List[List[int]]) -> List[int]:\n        ind2gp = list(range(n - 1))\n        gp2ind = {i: [i] for i in range(n - 1)}\n        gp_range = {i: [i, i + 1] for i in range(n - 1)}\n        ans = []\n        \n        def merge(gu: int, gv: int) -> int:\n            if len(gp2ind[gu]) < len(gp2ind[gv]):\n                gu, gv = gv, gu\n            \n            for i in gp2ind[gv]:\n                ind2gp[i] = gu\n            gp2ind[gu].extend(gp2ind[gv])\n            del(gp2ind[gv])\n            gp_range[gu] = [min(gp_range[gu][0], gp_range[gv][0]), max(gp_range[gu][1], gp_range[gv][1])]\n            del(gp_range[gv])\n            \n            return gu\n        \n        for u, v in queries:\n            #print(u, v)\n            \n            gp_to_merge = [ind2gp[u]]\n            while (tmp := gp_range[gp_to_merge[-1]][1]) < v:\n                gp_to_merge.append(ind2gp[tmp])\n            #print(gp_to_merge)\n            \n            if (nm := len(gp_to_merge)) > 1:\n                for i in range(nm - 1):\n                    gp_to_merge[i + 1] = merge(gp_to_merge[i], gp_to_merge[i + 1])\n            #print(ind2gp, gp2ind, gp_range)\n            \n            ans.append(len(gp2ind))\n        \n        return ans",
    "submit_ts": "1722741391",
    "subm_id": "1343743888"
}