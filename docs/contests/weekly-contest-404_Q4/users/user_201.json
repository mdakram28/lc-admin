{
    "username": "Fasdr",
    "submission": "class Solution {\n    public int minimumDiameterAfterMerge(int[][] edges1, int[][] edges2) {\n        List<List<Integer>> adj1 = new ArrayList<>(), adj2 = new ArrayList<>();\n        int n = edges1.length + 1, m = edges2.length + 1;\n        for (int i = 0; i < n; i++)\n            adj1.add(new ArrayList<>());\n        for (int i = 0; i < m; i++)\n            adj2.add(new ArrayList<>());\n        for (int i = 0; i < n - 1; i++) {\n            int u = edges1[i][0], v = edges1[i][1];\n            adj1.get(u).add(v);\n            adj1.get(v).add(u);\n        }\n        for (int i = 0; i < m - 1; i++) {\n            int u = edges2[i][0], v = edges2[i][1];\n            adj2.get(u).add(v);\n            adj2.get(v).add(u);\n        }\n        int d1 = findDiameter(adj1);\n        int d2 = findDiameter(adj2);\n        // System.out.println(d1);\n        // System.out.println(d2);\n        // int c1 = closestToAll(adj1);\n        // int c2 = closestToAll(adj2);\n        int c1 = (d1 / 2) + (d1 % 2);\n        int c2 = (d2 / 2) + (d2 % 2);\n        \n        return Math.max(Math.max(d1, d2), c1 + c2 + 1);\n    }\n    \n    // private int closestToAll(List<List<Integer>> adj) {\n    //     return 0;\n    // }\n    \n    private int findDiameter(List<List<Integer>> adj) {\n        int[] res = helpD(adj, 0, -1);\n        return res[0];\n    }\n    // max diam of this subtree, height of this subtree\n    private int[] helpD(List<List<Integer>> adj, int cur, int parent) {\n        int[] res = new int[2];\n        int h1 = -1, h2 = -1;\n        for (int child : adj.get(cur)) {\n            if (child == parent)\n                continue;\n            int[] subtree = helpD(adj, child, cur);\n            res[0] = Math.max(res[0], subtree[0]);\n            if (subtree[1] >= h2) {\n                h1 = h2;\n                h2 = subtree[1];\n            } else if (subtree[1] >= h1) {\n                h1 = subtree[1];\n            }\n        }\n        res[0] = Math.max(res[0], h1 + h2 + 2);\n        res[1] = h2 + 1;\n        return res;\n    }\n}",
    "submit_ts": 1719717816.0
}