{
    "username": "vishalp65",
    "submission": "#include <vector>\n#include <limits>\n#include <cmath>\nusing namespace std;\n\nclass CustomSegmentTree {\npublic:\n    CustomSegmentTree(const vector<int>& arr) {\n        size = arr.size();\n        tree.resize(4 * size);\n        construct(arr, 0, 0, size - 1);\n    }\n\n    int query(int left, int right) {\n        return range_and_query(0, 0, size - 1, left, right);\n    }\n\nprivate:\n    int size;\n    vector<int> tree;\n\n    void construct(const vector<int>& arr, int node, int start, int end) {\n        if (start == end) {\n            tree[node] = arr[start];\n        } else {\n            int mid = (start + end) / 2;\n            construct(arr, 2 * node + 1, start, mid);\n            construct(arr, 2 * node + 2, mid + 1, end);\n            tree[node] = tree[2 * node + 1] & tree[2 * node + 2];\n        }\n    }\n\n    int range_and_query(int node, int start, int end, int left, int right) {\n        if (right < start || end < left) {\n            return numeric_limits<int>::max();\n        }\n        if (left <= start && end <= right) {\n            return tree[node];\n        }\n        int mid = (start + end) / 2;\n        int left_result = range_and_query(2 * node + 1, start, mid, left, right);\n        int right_result = range_and_query(2 * node + 2, mid + 1, end, left, right);\n        return left_result & right_result;\n    }\n};\n\nclass Solution {\npublic:\n    int minimumDifference(vector<int>& nums, int k) {\n        int size = nums.size();\n        CustomSegmentTree segment_tree(nums);\n        int min_difference = numeric_limits<int>::max();\n\n        auto custom_abs = [](int a, int b) {\n            return abs(a - b);\n        };\n\n        for (int i = 0; i < size; ++i) {\n            int left = i - 1;\n            int right = size - 1;\n            while (right - left > 1) {\n                int mid = (left + right) / 2;\n                if (segment_tree.query(i, mid) >= k) {\n                    left = mid;\n                } else {\n                    right = mid;\n                }\n            }\n            if (left != i - 1) {\n                min_difference = min(min_difference, custom_abs(segment_tree.query(i, left), k));\n            }\n            min_difference = min(min_difference, custom_abs(k, segment_tree.query(i, right)));\n        }\n        return min_difference;\n    }\n};\n",
    "submit_ts": "1717299707",
    "subm_id": "1274821346"
}