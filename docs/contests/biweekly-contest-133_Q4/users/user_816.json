{
    "username": "P_i_t_1_2_3__",
    "submission": "#include <bits/stdc++.h>\nusing namespace std;\n#define ll long long\nconst ll N = 1e5 + 7;\nconst ll M = 1e7 + 7;\nll mod = 1e9 + 7;\nll fact[1000004];\nll modinv[1000004];\nll arr[N];\nll P[M];\n#define PI 3.141592653589793238462\n#define set_bits(x) __builtin_popcountll(x)\n#define all(v) sort(v.begin(),v.end())\n#define rall(v) sort(v.rbegin(),v.rend())\n#define ar(a) a.begin(),a.end()\n#define bs binary_search\n\nclass Solution {\npublic:\n    static const int MOD = 1e9 + 7;\n    static const int MAX_INVERSIONS = 400;\n\n    int numberOfPermutations(int n, vector<vector<int>>& requirements) {\n        unordered_map<int, int> reqMap;\n        for (auto& req : requirements) {\n            reqMap[req[0] + 1] = req[1];\n        }\n\n        vector<vector<long long>> permCounts(n + 1, vector<long long>(MAX_INVERSIONS + 1, 0));\n        permCounts[0][0] = 1;\n\n        for (int length = 1; length <= n; ++length) {\n            for (int inv = 0; inv <= MAX_INVERSIONS; ++inv) {\n                for (int newPos = 0; newPos < length; ++newPos) {\n                    int prevInv = inv - newPos;\n                    if (prevInv >= 0) {\n                        permCounts[length][inv] = (permCounts[length][inv] + permCounts[length - 1][prevInv]) % MOD;\n                    }\n                }\n            }\n\n            if (reqMap.find(length) != reqMap.end()) {\n                int targetInv = reqMap[length];\n                for (int inv = 0; inv <= MAX_INVERSIONS; ++inv) {\n                    if (inv != targetInv) {\n                        permCounts[length][inv] = 0;\n                    }\n                }\n            }\n        }\n\n        long long result = 0;\n        for (int inv = 0; inv <= MAX_INVERSIONS; ++inv) {\n            result = (result + permCounts[n][inv]) % MOD;\n        }\n\n        return static_cast<int>(result);\n    }\n};\n",
    "submit_ts": 1719070707.0
}