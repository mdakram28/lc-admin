{
    "username": "jerksundertaker",
    "submission": "class Solution {\npublic:\n    int m, n;\n    // Problem 2: Use only 1 rectangle\n    int minimumArea(vector<vector<int>>& grid, int u, int d, int l, int r) \n    {\n        int min_row = u, max_row = d;\n        int min_col = l, max_col = r;\n        \n        for(int i = u; i <= d; i++){\n            int cnt = 0;\n            for(int j = l; j <= r; j++)\n                cnt += grid[i][j];\n            if(cnt == 0) min_row++;\n            else break;\n        }\n        for(int i = d; i >= u; i--){\n            int cnt = 0;\n            for(int j = l; j <= r; j++)\n                cnt += grid[i][j];\n            if(cnt == 0) max_row--;\n            else break;\n        }\n        for(int i = l; i <= r; i++){\n            int cnt = 0;\n            for(int j = u; j <= d; j++)\n                cnt += grid[j][i];\n            if(cnt == 0) min_col++;\n            else break;\n        }\n        for(int i = r; i >= l; i--){\n            int cnt = 0;\n            for(int j = u; j <= d; j++)\n                cnt += grid[j][i];\n            if(cnt == 0) max_col--;\n            else break;\n        }\n        return (max_col - min_col + 1) * (max_row - min_row + 1);\n    }\n    int dfs(int u, int d, int l, int r, int cut, vector<vector<int>>& grid){\n        if(cut == 0)\n            return minimumArea(grid, u, d, l, r);\n        int ans = INT_MAX;\n        for(int i = u; i <= d - 1; i++){\n            int res1 = dfs(u, i, l, r, cut - 1, grid) + dfs(i + 1, d, l, r, 0, grid);\n            int res2 = dfs(u, i, l, r, 0, grid) + dfs(i + 1, d, l, r, cut - 1, grid);\n            ans = min({ans, res1, res2});\n        }\n        for(int i = l; i <= r - 1; i++){\n            int res1 = dfs(u, d, l, i, cut - 1, grid) + dfs(u, d, i + 1, r, 0, grid);\n            int res2 = dfs(u, d, l, i, 0, grid) + dfs(u, d, i + 1, r, cut - 1, grid);\n            ans = min({ans, res1, res2});\n        }\n        return ans;\n    }\n    int minimumSum(vector<vector<int>>& grid) {\n        m = grid.size(), n = grid[0].size();\n        return dfs(0, m - 1, 0, n - 1, 2, grid);\n    }\n};",
    "submit_ts": 1719114297.0
}