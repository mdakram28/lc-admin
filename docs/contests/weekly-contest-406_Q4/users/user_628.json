{
    "username": "Yogesh-C10",
    "submission": "from typing import List\n\nclass Solution:\n    def minimumCost(self, m: int, n: int, horizontalCut: List[int], verticalCut: List[int]) -> int:\n        # Sort the cuts in descending order\n        horizontalCut.sort(reverse=True)\n        verticalCut.sort(reverse=True)\n        \n        # Initialize the number of horizontal and vertical pieces\n        horizontal_pieces = 1\n        vertical_pieces = 1\n        \n        # Initialize indices for the cuts\n        i, j = 0, 0\n        total_cost = 0\n        \n        # Use a greedy approach to make the most expensive cut first\n        while i < len(horizontalCut) and j < len(verticalCut):\n            if horizontalCut[i] > verticalCut[j]:\n                total_cost += horizontalCut[i] * vertical_pieces\n                horizontal_pieces += 1\n                i += 1\n            else:\n                total_cost += verticalCut[j] * horizontal_pieces\n                vertical_pieces += 1\n                j += 1\n        \n        # Add the remaining cuts\n        while i < len(horizontalCut):\n            total_cost += horizontalCut[i] * vertical_pieces\n            i += 1\n        \n        while j < len(verticalCut):\n            total_cost += verticalCut[j] * horizontal_pieces\n            j += 1\n        \n        return total_cost",
    "submit_ts": "1720925707",
    "subm_id": "1320263548"
}