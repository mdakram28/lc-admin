{
    "username": "Andwerp",
    "submission": "class Solution {\npublic:\n    int solve_sub(vector<vector<int>>& grid, int mnbr, int mxbr, int mnbc, int mxbc) {\n        if(mnbr >= mxbr || mnbc >= mxbc) {\n            return 1e6;\n        }\n        int n = grid.size();\n        int m = grid[0].size();\n        int mnr = n;\n        int mxr = -1;\n        int mnc = m;\n        int mxc = -1;\n        bool found_one = false;\n        for(int i = mnbr; i < mxbr; i++){\n            for(int j = mnbc; j < mxbc; j++){\n                if(grid[i][j] != 1){\n                    continue;\n                }\n                found_one = true;\n                mnr = min(mnr, i);\n                mxr = max(mxr, i);\n                mnc = min(mnc, j);\n                mxc = max(mxc, j);\n            }\n        }\n        if(!found_one) {\n            return 1;\n        }\n        return (mxr - mnr + 1) * (mxc - mnc + 1);\n    }\n    \n    void rotate(vector<vector<int>>& grid) {\n        vector<vector<int>> tmp(grid[0].size(), vector<int>(grid.size(), 0));\n        for(int i = 0; i < tmp.size(); i++){\n            for(int j = 0; j < tmp[0].size(); j++){\n                tmp[i][j] = grid[j][grid[0].size() - 1 - i];\n            }\n        }\n        grid = tmp;\n    }\n    \n    int solve_T(vector<vector<int>>& grid){\n        int ans = 1e9;\n        for(int i = 0; i < grid.size(); i++){\n            for(int j = 0; j < grid[0].size(); j++){\n                int cans = 0;\n                cans += solve_sub(grid, 0, i, 0, grid[0].size());\n                cans += solve_sub(grid, i, grid.size(), 0, j);\n                cans += solve_sub(grid, i, grid.size(), j, grid[0].size());\n                ans = min(ans, cans);\n            }\n        }\n        return ans;\n    }\n    \n    int solve_stack(vector<vector<int>>& grid) {\n        int ans = 1e9;\n        for(int i = 0; i < grid.size(); i++){\n            for(int j = i + 1; j < grid.size(); j++){\n                int cans = 0;\n                cans += solve_sub(grid, 0, i, 0, grid[0].size());\n                cans += solve_sub(grid, i, j, 0, grid[0].size());\n                cans += solve_sub(grid, j, grid.size(), 0, grid[0].size());\n                ans = min(ans, cans);\n            }\n        }\n        return ans;\n    }\n    \n    int minimumSum(vector<vector<int>>& grid) {\n        int ans = 1e9;\n        ans = min(ans, solve_T(grid));\n        rotate(grid);\n        ans = min(ans, solve_T(grid));\n        rotate(grid);\n        ans = min(ans, solve_T(grid));\n        rotate(grid);\n        ans = min(ans, solve_T(grid));\n        rotate(grid);\n        ans = min(ans, solve_stack(grid));\n        rotate(grid);\n        ans = min(ans, solve_stack(grid));\n        return ans;\n    }\n};",
    "submit_ts": 1719111674.0
}