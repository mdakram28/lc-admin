{
    "username": "_mohitchoudhary",
    "submission": "class Solution {\npublic:\n\n    bool bfs(int src, int dest, const vector<vector<int>>& adj) {\n        vector<bool> visited(adj.size(), false);\n        queue<int> q;\n\n        q.push(src);\n        visited[src] = true;\n\n        while (!q.empty()) {\n            int current = q.front();\n            q.pop();\n\n            if (current == dest) {\n                return true;\n            }\n\n            for (int neighbor : adj[current]) {\n                if (!visited[neighbor]) {\n                    q.push(neighbor);\n                    visited[neighbor] = true;\n                }\n            }\n        }\n\n        return false;\n    }\n\n    bool canReachCorner(int X, int Y, vector<vector<int>>& circles) {\n\n        auto areCirclesIntersecting = [](vector<int>& c1, vector<int>& c2) {\n            long long x1 = c1[0], y1 = c1[1], r1 = c1[2];\n            long long x2 = c2[0], y2 = c2[1], r2 = c2[2];\n            long long distSq = (x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2);\n            long long radiusSumSq = (r1 + r2) * (r1 + r2);\n            return distSq <= radiusSumSq;\n        };\n\n        int n = circles.size();\n        vector<vector<int>> adj(n + 4);\n\n        for (int i = 0; i < n; ++i) {\n            if (circles[i][0] - circles[i][2] <= 0) {\n                adj[i].push_back(n);\n                adj[n].push_back(i);\n            }\n            if (circles[i][1] - circles[i][2] <= 0) {\n                adj[i].push_back(n + 3);\n                adj[n + 3].push_back(i);\n            }\n            if (circles[i][0] + circles[i][2] >= X) {\n                adj[i].push_back(n + 2);\n                adj[n + 2].push_back(i);\n            }\n            if (circles[i][1] + circles[i][2] >= Y) {\n                adj[i].push_back(n + 1);\n                adj[n + 1].push_back(i);\n            }\n\n            for (int j = i + 1; j < n; ++j) {\n                if (areCirclesIntersecting(circles[i], circles[j])) {\n                    adj[i].push_back(j);\n                    adj[j].push_back(i);\n                }\n            }\n        }\n\n        if (bfs(n, n + 2, adj) || bfs(n, n + 3, adj) || bfs(n + 1, n + 2, adj) || bfs(n + 1, n + 3, adj)) {\n            return false;\n        }\n\n        return true;\n    }\n};\n",
    "submit_ts": "1722137462",
    "subm_id": "1335764505"
}