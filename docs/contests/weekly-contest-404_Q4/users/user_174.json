{
    "username": "NerdyCoder",
    "submission": "class Solution {\npublic:\n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n        const int n = edges1.size() + 1;\n        vector<vector<int>> adjlists1(n);\n        for (const auto &edge1 : edges1) {\n            adjlists1[edge1[0]].push_back(edge1[1]);\n            adjlists1[edge1[1]].push_back(edge1[0]);\n        }\n        vector<int> heights1(n);\n        int diameter = calcDiameter(0, adjlists1, -1, heights1);\n        recalc(0, adjlists1, -1, 0, heights1);\n        \n        const int m = edges2.size() + 1;\n        vector<vector<int>> adjlists2(m);\n        for (const auto &edge2 : edges2) {\n            adjlists2[edge2[0]].push_back(edge2[1]);\n            adjlists2[edge2[1]].push_back(edge2[0]);\n        }\n        vector<int> heights2(m);\n        diameter = max(diameter, calcDiameter(0, adjlists2, -1, heights2)); \n        recalc(0, adjlists2, -1, 0, heights2);\n        diameter = max(diameter, *min_element(heights1.begin(), heights1.end()) + *min_element(heights2.begin(), heights2.end()) + 1);\n        return diameter;\n    }\nprivate:\n    int calcDiameter(int index, vector<vector<int>> &adjlists, int prev, vector<int> &heights) {\n        int diameter = 0;\n        heights[index] = 0;\n        int longest = 0;\n        int second = 0;\n        for (int next : adjlists[index]) {\n            if (next != prev) {\n                diameter = max(diameter, calcDiameter(next, adjlists, index, heights));\n                if (heights[next] + 1 > longest) {\n                    second = longest;\n                    longest = heights[next] + 1;\n                } else if (heights[next] + 1 >= second) {\n                    second = heights[next] + 1;\n                }\n                heights[index] = max(heights[index], 1 + heights[next]);\n            }\n        }\n        diameter = max(diameter, longest + second);\n        return diameter;\n    }\n    void recalc(int index, vector<vector<int>> &adjlists, int prev, int other, vector<int> &heights) {\n        heights[index] = max(heights[index], other);\n        int max_length = other + 1;\n        int second = 0;\n        for (int next : adjlists[index]) {\n            if (next != prev) {\n                if (heights[next] + 2 > max_length) {\n                    second = max_length;\n                    max_length = heights[next] + 2;\n                } else if (heights[next] + 2 >= second) {\n                    second = heights[next] + 2;\n                }\n            }\n        }\n        for (int next : adjlists[index]) {\n            if (next != prev) {\n                recalc(next, adjlists, index, heights[next] + 2 == max_length ? second : max_length, heights);\n            }\n        }\n    }\n};",
    "submit_ts": 1719717611.0
}