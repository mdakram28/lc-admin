{
    "username": "AnDVT",
    "submission": "class Solution:\n    def maximumLength(self, nums: List[int], k: int) -> int:\n        previous = dict()\n        dp = [[]] * len(nums)\n        dpmax = [0] * (k+1)\n        dpset = [set()] * (k+1)\n        for i in range(0, len(nums)):\n            dp[i] = [1]*(k+1)\n            if nums[i] in previous:\n                for ip, vp in enumerate(dp[previous[nums[i]]]):\n                    dp[i][ip] = vp+1\n            for ik in range(0, k+1):\n                if nums[i] in dpset[ik]:\n                    dp[i][ik] = max(dp[i][ik], dpmax[ik]+1)\n                else:\n                    if ik != k:\n                        dp[i][ik+1] = max(dp[i][ik+1], dpmax[ik]+1)\n            for ik in range(0, k+1):\n                if dpmax[ik] < dp[i][ik]:\n                    dpmax[ik] = dp[i][ik]\n                    dpset[ik] = {nums[i]}\n                elif dpmax[ik] == dp[i][ik]:\n                    dpset[ik].add(nums[i])\n            previous[nums[i]] = i \n        return max(dpmax)",
    "submit_ts": 1717859861.0
}