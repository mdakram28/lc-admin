{
    "username": "khromykh",
    "submission": "class Solution {\n    \n    int t = 0;\n    public int waysToReachStair(int k) {\n        Map<Integer, Integer>[][] dp = new HashMap[2][50];\n        for (int i = 0; i < 2; i++) {\n            Arrays.fill(dp[i], new HashMap<>());\n        }\n        var res = dp(1, 0, k, false, dp);\n        //System.out.println(t);\n        return res;\n    }\n    \n    int dp(int cur, int jump, int k, boolean prevBack, Map<Integer, Integer>[][] dp) {\n        if (cur > k + 1) return 0;\n        int res = cur == k ? 1 : 0;\n        if (cur > 20 && dp[prevBack ? 1 : 0][jump].containsKey(cur)) {\n            return dp[prevBack ? 1 : 0][jump].get(cur);\n        }\n        t++;\n        res += dp(cur + (1 << jump), jump + 1, k, false, dp);\n        if (!prevBack && cur != 0) {\n            res += dp(cur - 1, jump, k, true, dp); \n        }\n        dp[prevBack ? 1 : 0][jump].put(cur, res);\n        return res;\n    }\n    \n}",
    "submit_ts": "1716089557",
    "subm_id": "1261845394"
}