{
    "username": "liang24",
    "submission": "class Solution {\n    public long minimumCost(int m, int n, int[] horizontalCut, int[] verticalCut) {\n        List<int[]> edges = new ArrayList<>();\n\n        for (int i = 0; i < horizontalCut.length; i++) {\n            edges.add(new int[]{horizontalCut[i], 0});\n        }\n\n        for (int j = 0; j < verticalCut.length; j++) {\n            edges.add(new int[]{verticalCut[j], 1});\n        }\n\n        edges.sort((a, b) -> b[0] - a[0]);\n\n        long totalCost = 0;\n        long horizontalSegments = 1; \n        long verticalSegments = 1; \n\n        for (int[] edge : edges) {\n            long cost = edge[0];\n            long type = edge[1];\n\n            if (type == 0) {\n                totalCost += cost * verticalSegments;\n                horizontalSegments++;\n            } else {\n                totalCost += cost * horizontalSegments;\n                verticalSegments++;\n            }\n        }\n\n        return totalCost;\n    }\n}",
    "submit_ts": "1720926048",
    "subm_id": "546443709"
}