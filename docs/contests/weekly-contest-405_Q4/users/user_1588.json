{
    "username": "masonhorne",
    "submission": "class Solution {\npublic:\n    // int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n    //     int n = target.size();\n    //     vector<int> dp(n + 1, INT_MAX / 2);\n    //     // empty string cost of 0\n    //     dp[0] = 0;\n    //     for(int i = 0; i < n; i++) {\n    //         if(dp[i] == INT_MAX / 2) continue;\n    //         // cout << \"here\" << endl;\n    //         for(int j = 0; j < words.size(); j++) {\n    //             if(i + words[j].size() <= n && target.compare(i, words[j].size(), words[j])) {\n    //                 // cout << \"here2\" << endl;\n    //                 // cout << i + words[j].size() << endl;\n    //                 dp[i + words[j].size()] = min(dp[i + words[j].size()], dp[i] + costs[j]);\n    //             }\n    //         }\n    //     }\n    //     return dp[n] == INT_MAX / 2 ? -1 : dp[n];\n    // }\n\n    // int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n    //     vector<int> dp(target.size() + 1, INT_MAX / 2);\n    //     dfs(target, words, costs, dp, 0, 0);\n    //     return dp[target.size()] == INT_MAX / 2 ? -1 : dp[target.size()];\n    // }\n\n    // void dfs(string &target, vector<string>& words, vector<int> &costs, vector<int>& dp, int idx, int cost) {\n    //     if(idx == target.size()) {\n    //         dp[idx] = min(dp[idx], cost);\n    //     } else {\n    //         for(int i = 0; i < words.size(); i++) {\n    //             if ((idx + words[i].size() <= target.size() && target.substr(idx, words[i].size()) == words[i]) && (dp[idx + words[i].size()] == INT_MAX / 2 || dp[idx + words[i].size()] > cost + costs[i])) {\n    //                 dfs(target, words, costs, dp, idx + words[i].size(), cost + costs[i]);\n    //             }\n    //         }\n    //     }\n    // }\n\nstruct TrieNode {\n    unordered_map<char, TrieNode*> children;\n    int cost;\n    TrieNode() : cost(-1) {}\n};\n\nclass Trie {\n    TrieNode* root;\npublic:\n    Trie() {\n        root = new TrieNode();\n    }\n    \n    void insert(string word, int cost) {\n        TrieNode* node = root;\n        for (char c : word) {\n            if (!node->children[c]) {\n                node->children[c] = new TrieNode();\n            }\n            node = node->children[c];\n        }\n        node->cost = node->cost == -1 ? cost : min(cost, node->cost);\n    }\n    \n    int search(string target) {\n        int n = target.size();\n        vector<int> dp(n + 1, -1);\n        dp[0] = 0;\n        for (int i = 0; i < n; ++i) {\n            if (dp[i] == -1) continue; \n            TrieNode* node = root;\n            for (int j = i; j < n; ++j) {\n                char c = target[j];\n                if (node->children.find(c) == node->children.end()) break;\n                node = node->children[c];\n                if (node->cost != -1) {\n                    dp[j + 1] = (dp[j + 1] == -1) ? dp[i] + node->cost : min(dp[j + 1], dp[i] + node->cost);\n                }\n            }\n        }\n        return dp[n];\n    }\n};\n\nint minimumCost(string target, vector<string>& words, vector<int>& costs) {\n    Trie trie;\n    int m = words.size();\n    for (int i = 0; i < m; ++i) {\n        trie.insert(words[i], costs[i]);\n    }\n    int ans = trie.search(target);\n    return ans == -1 ? -1 : ans;\n}\n\n};",
    "submit_ts": "1720323927",
    "subm_id": "1312387441"
}