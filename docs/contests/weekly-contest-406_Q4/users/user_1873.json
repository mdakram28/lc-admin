{
    "username": "janmesh799",
    "submission": "class Solution {\npublic:\n    long long minimumCost(int m, int n, vector<int>& horizontalCuts, vector<int>& verticalCuts) {\n        struct Cut {\n            int cost;\n            char type; // 'H' for horizontal, 'V' for vertical\n        };\n\n        auto compareCuts = [](const Cut &a, const Cut &b) {\n            return a.cost > b.cost;\n        };\n\n        vector<Cut> cuts;\n        \n        // Add all horizontal cuts\n        for (int i = 0; i < horizontalCuts.size(); ++i) {\n            cuts.push_back({horizontalCuts[i], 'H'});\n        }\n        \n        // Add all vertical cuts\n        for (int i = 0; i < verticalCuts.size(); ++i) {\n            cuts.push_back({verticalCuts[i], 'V'});\n        }\n        \n        // Sort cuts in descending order of cost\n        sort(cuts.begin(), cuts.end(), compareCuts);\n        \n        long horizontalSegments = 1;\n        long verticalSegments = 1;\n        long long totalCost = 0;\n        \n        for (const auto &cut : cuts) {\n            if (cut.type == 'H') {\n                totalCost += cut.cost * verticalSegments;\n                horizontalSegments++;\n            } else {\n                totalCost += cut.cost * horizontalSegments;\n                verticalSegments++;\n            }\n        }\n        \n        return totalCost;\n    }\n};\n",
    "submit_ts": "1720926206",
    "subm_id": "1320279109"
}