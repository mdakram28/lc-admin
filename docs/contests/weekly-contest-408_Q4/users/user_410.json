{
    "username": "kisuke11",
    "submission": "class Solution:\n    def bfs(self, adj, start, t1, t2, nodes):\n        q = deque([start])\n        vis = [0] * (nodes + 4)\n        vis[start] = 1\n        \n        for _ in iter(int, 1): \n            if not q:\n                break\n            u = q.popleft()\n            for v in adj[u]:\n                if not vis[v]:\n                    q.append(v)\n                    vis[v] = 1\n        \n        return vis[t1] or vis[t2]\n\n    def canReachCorner(self, X, Y, circles):\n        nc = len(circles)\n        c = [((circle[0], circle[1]), circle[2]) for circle in circles]\n        adj = [[] for _ in range(nc + 4)]\n\n        i = 0\n        while i < nc: \n            if c[i][0][0] <= c[i][1]:\n                adj[nc].append(i)\n                adj[i].append(nc)\n            if X - c[i][0][0] <= c[i][1]:\n                adj[nc + 2].append(i)\n                adj[i].append(nc + 2)\n            if c[i][0][1] <= c[i][1]:\n                adj[nc + 1].append(i)\n                adj[i].append(nc + 1)\n            if Y - c[i][0][1] <= c[i][1]:\n                adj[nc + 3].append(i)\n                adj[i].append(nc + 3)\n            \n            j = i + 1\n            while j < nc: \n                dist = sqrt(pow(c[i][0][0] - c[j][0][0], 2) + pow(c[i][0][1] - c[j][0][1], 2))\n                rs = c[i][1] + c[j][1]\n                if rs >= dist:\n                    adj[i].append(j)\n                    adj[j].append(i)\n                j += 1\n            i += 1\n\n        ok = 0\n        ok = max(ok, self.bfs(adj, nc, nc + 1, nc + 2, nc + 4)) \n        ok = max(ok, self.bfs(adj, nc + 3, nc + 2, nc + 1, nc + 4)) \n        \n        return not ok\n",
    "submit_ts": "1722137347",
    "subm_id": "1335761170"
}