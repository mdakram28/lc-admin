{
    "username": "yoochun",
    "submission": "\ntypedef long long ll;\ntypedef ll tf;\ntypedef ll tc;\nconst tf INFFLOW=1e5;\nconst tc INFCOST=5e9;\n#define pb push_back\n#define SZ (int)size\n#define ALL(v) begin(v), end(v)\nstruct MCF{\n\tint n;\n\tvector<tc> prio, pot; vector<tf> curflow; vector<int> prevedge,prevnode;\n\tpriority_queue<pair<tc, int>, vector<pair<tc, int>>, greater<pair<tc, int>>> q;\n\tstruct edge{int to, rev; tf f, cap; tc cost;};\n\tvector<vector<edge>> g;\n\tMCF(int n):n(n),prio(n),curflow(n),prevedge(n),prevnode(n),pot(n),g(n){}\n\tvoid add_edge(int s, int t, tf cap, tc cost) {\n\t\tg[s].pb((edge){t,SZ(g[t]),0,cap,cost});\n\t\tg[t].pb((edge){s,SZ(g[s])-1,0,0,-cost});\n\t}\n\tpair<tf,tc> get_flow(int s, int t) {\n\t\ttf flow=0; tc flowcost=0;\n\t\twhile(1){\n\t\t\tq.push({0, s});\n\t\t\tfill(ALL(prio),INFCOST); \n\t\t\tprio[s]=0; curflow[s]=INFFLOW;\n\t\t\twhile(!q.empty()) {\n\t\t\t\tauto cur=q.top();\n\t\t\t\ttc d=cur.first;\n\t\t\t\tint u=cur.second;\n\t\t\t\tq.pop();\n\t\t\t\tif(d!=prio[u]) continue;\n\t\t\t\tfor(int i=0; i<SZ(g[u]); ++i) {\n\t\t\t\t\tedge &e=g[u][i];\n\t\t\t\t\tint v=e.to;\n\t\t\t\t\tif(e.cap<=e.f) continue;\n\t\t\t\t\ttc nprio=prio[u]+e.cost+pot[u]-pot[v];\n\t\t\t\t\tif(prio[v]>nprio) {\n\t\t\t\t\t\tprio[v]=nprio;\n\t\t\t\t\t\tq.push({nprio, v});\n\t\t\t\t\t\tprevnode[v]=u; prevedge[v]=i;\n\t\t\t\t\t\tcurflow[v]=min(curflow[u], e.cap-e.f);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(prio[t]==INFCOST) break;\n\t\t\tfor(int i=0; i < n; ++i) pot[i]+=prio[i];\n\t\t\ttf df=min(curflow[t], INFFLOW-flow);\n\t\t\tflow+=df;\n\t\t\tfor(int v=t; v!=s; v=prevnode[v]) {\n\t\t\t\tedge &e=g[prevnode[v]][prevedge[v]];\n\t\t\t\te.f+=df; g[v][e.rev].f-=df;\n\t\t\t\tflowcost+=df*e.cost;\n\t\t\t}\n\t\t}\n\t\treturn {flow,flowcost};\n\t}\n};\n\nclass Solution {\npublic:\n    long long maximumValueSum(vector<vector<int>>& board) {\n        const int m = board.size(), n = board[0].size();\n        MCF f(m + n + 4);\n        for (int i = 0; i < m; ++i)\n            for (int j = 0; j < n; ++j) f.add_edge(i, j + m, 1, -board[i][j]);\n        for (int i = 0; i < m; ++i)\n            f.add_edge(m + n, i, 1, 0);\n        for (int j = 0; j < n; ++j)\n            f.add_edge(j + m, m + n + 1, 1, 0);\n        f.add_edge(m + n + 2, m + n, 3, 0);\n        f.add_edge(m + n + 1, m + n + 3, 3, 0);\n        return -f.get_flow(m + n + 2, m + n + 3).second;\n    }\n};",
    "submit_ts": "1723906348",
    "subm_id": "556317898"
}