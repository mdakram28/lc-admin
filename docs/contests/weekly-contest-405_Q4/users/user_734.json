{
    "username": "ankushsingh201501",
    "submission": "#include <vector>\n#include <string>\n#include <unordered_map>\n#include <climits>\n#include <algorithm>\n\nclass TrieNode {\npublic:\n    std::unordered_map<char, TrieNode*> children;\n    int cost;\n    \n    TrieNode() : cost(INT_MAX) {}\n};\n\nclass Trie {\npublic:\n    TrieNode* root;\n    \n    Trie() {\n        root = new TrieNode();\n    }\n    \n    void insert(const std::string& word, int cost) {\n        TrieNode* node = root;\n        for (char c : word) {\n            if (!node->children.count(c)) {\n                node->children[c] = new TrieNode();\n            }\n            node = node->children[c];\n        }\n        node->cost = std::min(node->cost, cost);\n    }\n};\n\nclass Solution {\npublic:\n    int minimumCost(std::string target, std::vector<std::string>& words, std::vector<int>& costs) {\n        int targetLength = target.size();\n        Trie trie;\n        \n        for (int i = 0; i < words.size(); ++i) {\n            trie.insert(words[i], costs[i]);\n        }\n        \n        std::vector<int> dp(targetLength + 1, INT_MAX);\n        dp[0] = 0;\n        \n        for (int i = 0; i < targetLength; ++i) {\n            if (dp[i] == INT_MAX) continue;\n            TrieNode* currentNode = trie.root;\n            \n            for (int j = i; j < targetLength; ++j) {\n                if (!currentNode->children.count(target[j])) break;\n                currentNode = currentNode->children[target[j]];\n                \n                if (currentNode->cost != INT_MAX) {\n                    dp[j + 1] = std::min(dp[j + 1], dp[i] + currentNode->cost);\n                }\n            }\n        }\n        \n        return dp[targetLength] == INT_MAX ? -1 : dp[targetLength];\n    }\n};\n",
    "submit_ts": "1720322476",
    "subm_id": "1312350939"
}