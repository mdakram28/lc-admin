{
    "username": "gaurdarpan",
    "submission": "class Solution {\npublic:\n    vector<int> getHeight(vector<vector<int>>& g, int n, vector<int>& deg) {\n        int i;\n        if (n==1) return {1, 0};\n        queue<int> q;\n        for (i=0;i<n;i++) {\n            if (deg[i]==1) q.push(i);\n        }\n        int ver = n, t, sz;\n        while (ver>2) {\n            sz = q.size();\n            ver -= sz;\n            // cout << sz << \" \" << ver << \"\\n\";\n            for (i=0;i<sz;i++) {\n                t = q.front();\n                q.pop();\n                for (auto x: g[t]) {\n                    deg[x]--;\n                    if (deg[x]==1) {\n                        q.push(x);\n                    }\n                }\n            }\n        }\n        int r1 = q.front(), h1=0, h2=0;\n        // cout << r1 << \"\\n\";\n        vector<int> vis(n, 0);\n        queue<int> q3;\n        q3.push(r1);\n        vis[r1]=1;\n        while (!q3.empty()) {\n            sz = q3.size();\n            for (i=0;i<sz;i++) {\n                t = q3.front();\n                q3.pop();\n                for (auto x:g[t]) {\n                    if (!vis[x]) {\n                        q3.push(x);\n                        vis[x]=1;\n                    }\n                }\n            }\n            h1++;\n        }\n        vis = vector<int> (n, 0);\n        vis[t] = 1;\n        q3.push(t);\n        while (!q3.empty()) {\n            sz = q3.size();\n            for (i=0;i<sz;i++) {\n                t = q3.front();\n                q3.pop();\n                for (auto x:g[t]) {\n                    if (!vis[x]) {\n                        q3.push(x);\n                        vis[x]=1;\n                    }\n                }\n            }\n            h2++;\n        }\n        return {h1, h2};\n    }\n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n        int n = edges1.size()+1, m=edges2.size()+1, i, u, v;\n        vector<vector<int>> g1(n), g2(m);\n        vector<int> deg1(n, 0), deg2(m, 0);\n        for (i=0;i<n-1;i++) {\n            u = edges1[i][0], v = edges1[i][1];\n            g1[u].push_back(v);\n            g1[v].push_back(u);\n            deg1[u]++;\n            deg1[v]++;\n        }\n        for (i=0;i<m-1;i++) {\n            u = edges2[i][0], v = edges2[i][1];\n            g2[u].push_back(v);\n            g2[v].push_back(u);\n            deg2[u]++;\n            deg2[v]++;\n        }\n        // queue<int> q;\n        // for (i=0;i<n;i++) {\n        //     if (deg1[i]==1) q.push(i);\n        // }\n        // int d1=0, sz, t;\n        // while (!q.empty()) {\n        //     sz = q.size();\n        //     for (i=0;i<sz;i++) {\n        //         t = q.front();\n        //         q.pop();\n        //         for (auto x:g1[t]) {\n        //             deg1[x]--;\n        //             if (deg1[x]==1) q.push(x);\n        //         }\n        //     }\n        //     d1++;\n        // }\n        \n//         int ver=n, t, sz;\n//         while (ver>2) {\n//             sz = q.size();\n//             ver -= sz;\n//             // cout << sz << \" \" << ver << \"\\n\";\n//             for (i=0;i<sz;i++) {\n//                 t = q.front();\n//                 q.pop();\n//                 for (auto x: g1[t]) {\n//                     deg1[x]--;\n//                     if (deg1[x]==1) {\n//                         q.push(x);\n//                     }\n//                 }\n//             }\n    \n//         }\n//         int r1 = q.front();\n        \n        // int h1=0, h2=0;\n        // vector<int> vis(n, 0);\n        // queue<int> q3;\n        // q3.push(r1);\n        // vis[r1]=1;\n        // while (!q3.empty()) {\n        //     sz = q3.size();\n        //     for (i=0;i<sz;i++) {\n        //         t = q3.front();\n        //         q3.pop();\n        //         for (auto x:g1[t]) {\n        //             if (!vis[x]) {\n        //                 q3.push(x);\n        //                 vis[x]=1;\n        //             }\n        //         }\n        //     }\n        //     h1++;\n        // }\n        // vis = vector<int> (m, 0);\n        // q3.push(r2);\n        // vis[r2] = 1;\n        // while (!q3.empty()) {\n        //     sz = q3.size();\n        //     for (i=0;i<sz;i++) {\n        //         t = q3.front();\n        //         q3.pop();\n        //         for (auto x:g2[t]) {\n        //             if (!vis[x]) {\n        //                 q3.push(x);\n        //                 vis[x]=1;\n        //             }\n        //         }\n        //     }\n        //     h2++;\n        // }\n        // cout << h1 << \" \" << h2 << \"\\n\";\n        \n        vector<int> h1 = getHeight(g1, n, deg1);\n        vector<int> h2 = getHeight(g2, m, deg2);\n        // cout << h1[1] << \" \" << h2[1] << \"\\n\";\n        return max(h1[0]+h2[0]-1, max(h1[1], h2[1])-1);\n    }\n};",
    "submit_ts": "1719719699",
    "subm_id": "1304448394"
}