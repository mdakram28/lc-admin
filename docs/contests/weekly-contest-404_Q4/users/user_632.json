{
    "username": "ameynaik09",
    "submission": "class Solution {\npublic:\n    void dfsMark(const vector<vector<int>>& adj, vector<int>& dist, int node, int& farthestNode, int d) {\n        dist[node] = d;\n        if (d > dist[farthestNode]) {\n            farthestNode = node;\n        }\n        for (int neighbor : adj[node]) {\n            if (dist[neighbor] == -1) {\n                dfsMark(adj, dist, neighbor, farthestNode, d + 1);\n            }\n        }\n    }\n    int dfs(const vector<vector<int>>& adj, int start, int& farthestNode) {\n        int n = adj.size();\n        vector<int> dist(n, -1);\n        farthestNode = start;\n        dfsMark(adj, dist, start, farthestNode, 0);\n        return dist[farthestNode];\n    }\n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n        int n = edges1.size() + 1;\n        int m = edges2.size() + 1;\n        \n        vector<vector<int>> adj1(n);\n        vector<vector<int>> adj2(m);\n        \n        for (const auto& edge : edges1) {\n            adj1[edge[0]].push_back(edge[1]);\n            adj1[edge[1]].push_back(edge[0]);\n        }\n        for (const auto& edge : edges2) {\n            adj2[edge[0]].push_back(edge[1]);\n            adj2[edge[1]].push_back(edge[0]);\n        }\n\n        int temp1 = 0;\n        dfs(adj1, 0, temp1);\n        int diameter1 = dfs(adj1, temp1, temp1);\n\n        int temp2 = 0;\n        dfs(adj2, 0, temp2);\n        int diameter2 = dfs(adj2, temp2, temp2);\n        \n        int minDia = max(diameter1, diameter2);\n        int half1 = (diameter1 + 1) / 2;\n        int half2 = (diameter2 + 1) / 2;\n        minDia = max(minDia, half1 + half2 + 1);\n        \n        return minDia;\n    }\n};",
    "submit_ts": "1719718588",
    "subm_id": "1304421036"
}