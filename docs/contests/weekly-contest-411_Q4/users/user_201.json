{
    "username": "kkt_boar",
    "submission": "class Solution {\n    private long[] sum;\n    private int[] todo;\n\n    public long[] countKConstraintSubstrings(String s, int k, int[][] queries) {\n        int n = s.length();\n        sum = new long[n * 4 + 10];\n        todo = new int[n * 4 + 10];\n        int left0 = 0, left1 = 0;\n        int count0 = 0, count1 = 0;\n        int[][] sort = getSort(queries);\n        long[] ans = new long[queries.length];\n        int index = 0;\n        for (int i = 0; i < n; i++) {\n            char c = s.charAt(i);\n            if (c == '1') {\n                count1++;\n                while (count1 > k) {\n                    count1 -= s.charAt(left1++) == '1' ? 1 : 0;\n                }\n            } else {\n                count0++;\n                while (count0 > k) {\n                    count0 -= s.charAt(left0++) == '0' ? 1 : 0;\n                }\n            }\n            int min = Math.min(left0, left1);\n            add(1, 1, n, min + 1, i + 1);\n            while (index < queries.length && sort[index][1] == i) {\n                int l = sort[index][0];\n                int r = sort[index][1];\n                int in = sort[index][2];\n                ans[in] = query(1, 1, n, l + 1, r + 1);\n                index++;\n            }\n        }\n        return ans;\n    }\n\n    private int[][] getSort(int[][] queries) {\n        int n = queries.length;\n        int[][] q2 = new int[n][3];\n        for (int i = 0; i < n; i++) {\n            q2[i][0] = queries[i][0];\n            q2[i][1] = queries[i][1];\n            q2[i][2] = i;\n        }\n        Arrays.sort(q2, (a, b) -> a[1] != b[1] ? a[1] - b[1] : a[0] - b[0]);\n        return q2;\n    }\n\n    private void do_(int o, int l, int r, int add) {\n        sum[o] += (long) add * (r - l + 1);\n        todo[o] += add;\n    }\n\n    private long add(int o, int l, int r, int L, int R) {\n        if (L <= l && r <= R) {\n            long res = sum[o];\n            do_(o, l, r, 1);\n            return res;\n        }\n\n        int m = (l + r) / 2;\n        int add = todo[o];\n        if (add != 0) {\n            do_(o * 2, l, m, add);\n            do_(o * 2 + 1, m + 1, r, add);\n            todo[o] = 0;\n        }\n\n        long res = 0;\n        if (L <= m) res += add(o * 2, l, m, L, R);\n        if (m < R) res += add(o * 2 + 1, m + 1, r, L, R);\n        sum[o] = sum[o * 2] + sum[o * 2 + 1];\n        return res;\n    }\n\n    private long query(int o, int l, int r, int L, int R) {\n        if (L <= l && r <= R) {\n            long res = sum[o];\n            return res;\n        }\n\n        int m = (l + r) / 2;\n        int add = todo[o];\n        if (add != 0) {\n            do_(o * 2, l, m, add);\n            do_(o * 2 + 1, m + 1, r, add);\n            todo[o] = 0;\n        }\n\n        long res = 0;\n        if (L <= m) res += query(o * 2, l, m, L, R);\n        if (m < R) res += query(o * 2 + 1, m + 1, r, L, R);\n        sum[o] = sum[o * 2] + sum[o * 2 + 1];\n        return res;\n    }\n}",
    "submit_ts": "1723950998",
    "subm_id": "556402617"
}