{
    "username": "abhishekrana25112002",
    "submission": "\nclass Solution {\npublic:\n    long long minimumCost(int m, int n, vector<int>& horizontalCut, vector<int>& verticalCut) {\n        vector<pair<int, int>> cuts;\n\n        for (int i = 0; i < m - 1; ++i)\n            cuts.push_back({horizontalCut[i], 0});  // 0 indicates horizontal cut\n        for (int i = 0; i < n - 1; ++i)\n            cuts.push_back({verticalCut[i], 1});  // 1 indicates vertical cut\n\n        sort(cuts.begin(), cuts.end(), greater<pair<int, int>>());\n\n        long long hcuts = 1, vcuts = 1, ans = 0;\n\n        for (auto& cut : cuts) {\n            if (cut.second == 0) {  // horizontal cut\n                ans += cut.first * vcuts;\n                ++hcuts;\n            } else {  // vertical cut\n                ans += cut.first * hcuts;\n                ++vcuts;\n            }\n        }\n\n        return ans;\n    }\n};\n",
    "submit_ts": "1720926068",
    "subm_id": "1320274970"
}