{
    "username": "gaurav2069",
    "submission": "class TrieNode {\npublic:\n    unordered_map<char, TrieNode*> cc;\n    int minCost;\n\n    TrieNode() : minCost(INT_MAX) {}\n};\n\nclass Trie {\npublic:\n    TrieNode* root;\n\n    Trie() {\n        root = new TrieNode();\n    }\n\n    void insert(string word, int cost) {\n        TrieNode* node = root;\n        for (char ch : word) {\n            if (!node->cc[ch]) {\n                node->cc[ch] = new TrieNode();\n            }\n            node = node->cc[ch];\n        }\n        node->minCost = min(node->minCost, cost);\n    }\n\n    int search(string prefix) {\n        TrieNode* node = root;\n        for (char ch : prefix) {\n            if (!node->cc[ch]) {\n                return INT_MAX;\n            }\n            node = node->cc[ch];\n        }\n        return node->minCost;\n    }\n};\n\nclass Solution {\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int n = target.size();\n        Trie trie;\n        for (int i = 0; i < words.size(); ++i) {\n            trie.insert(words[i], costs[i]);\n        }\n\n        vector<int> m(n + 1, INT_MAX);\n        m[0] = 0;\n        for (int i = 0; i < n; ++i) {\n            if (m[i] == INT_MAX) continue; \n\n            TrieNode* node = trie.root;\n            for (int j = i; j < n; ++j) {\n                char ch = target[j];\n                if (!node->cc[ch]) break;\n                node = node->cc[ch];\n                if (node->minCost != INT_MAX) {\n                    m[j + 1] = min(m[j + 1], m[i] + node->minCost);\n                }\n            }\n        }\n\n        return m[n] == INT_MAX ? -1 : m[n];\n    }\n};",
    "submit_ts": "1720321296",
    "subm_id": "1312319009"
}