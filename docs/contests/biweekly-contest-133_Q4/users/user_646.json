{
    "username": "BittuSharma",
    "submission": "\n\n#include <vector>\n#include <unordered_map>\n\nclass Solution {\nprivate:\n    static const int MODULUS = 1e9 + 7;\n    static const int MAX_INV = 400;\n\npublic:\n    int  numberOfPermutations(int n, std::vector<std::vector<int>>& constraints) {\n        std::unordered_map<int, int> constraintMap;\n        for (const auto& constraint : constraints) {\n            constraintMap[constraint[0] + 1] = constraint[1];\n        }\n\n        std::vector<std::vector<long long>> dp(n + 1, std::vector<long long>(MAX_INV + 1, 0));\n        dp[0][0] = 1;\n\n        for (int len = 1; len <= n; ++len) {\n            for (int invCount = 0; invCount <= MAX_INV; ++invCount) {\n                for (int pos = 0; pos < len; ++pos) {\n                    int prevInvCount = invCount - pos;\n                    if (prevInvCount >= 0) {\n                        dp[len][invCount] = (dp[len][invCount] + dp[len - 1][prevInvCount]) % MODULUS;\n                    }\n                }\n            }\n\n            auto it = constraintMap.find(len);\n            if (it != constraintMap.end()) {\n                int targetInv = it->second;\n                for (int invCount = 0; invCount <= MAX_INV; ++invCount) {\n                    if (invCount != targetInv) {\n                        dp[len][invCount] = 0;\n                    }\n                }\n            }\n        }\n\n        long long totalCount = 0;\n        for (long long count : dp[n]) {\n            totalCount = (totalCount + count) % MODULUS;\n        }\n\n        return static_cast<int>(totalCount);\n    }\n};",
    "submit_ts": "1719070586",
    "subm_id": "1296826723"
}