{
    "username": "hkhzzz",
    "submission": "using ll = long long;\n\nclass NumArray {\nprivate:\n    vector<ll> segT_LR;\n    vector<ll> segT_L; // only include L\n    vector<ll> segT_R;\n    vector<ll> segT_non;\n    int n;\n    ll MOD = 1e9 + 7;\n    \n    void build(int node, int s, int e, vector<int>& nums) {\n        if (s == e) {\n            segT_LR[node] = nums[s];\n            return;\n        }\n        int m = s + (e - s) / 2;\n        build(node * 2 + 1, s, m, nums);\n        build(node * 2 + 2, m + 1, e, nums);\n        // segT_LR[node] = segT_L[node*2 + 1] + segT_R[node*2 + 1];\n        \n        segT_LR[node] = max(segT_L[node*2 + 1] + max(segT_LR[node*2+2], segT_R[node*2+2]),\n                           segT_LR[node*2+1] + segT_R[node*2+2]);\n        \n        segT_L[node] = max(segT_L[node*2+1] + max(segT_L[node*2+2], segT_non[node*2+2]),\n                          segT_LR[node*2+1] + segT_non[node*2+2]);\n        \n        segT_R[node] = max(segT_non[node*2+1] + max(segT_LR[node*2+2], segT_R[node*2+2]),\n                            segT_R[node*2+1] + segT_R[node*2+2]);\n            \n        segT_non[node] = max(segT_non[node*2 + 1] + max(segT_L[node*2+2], segT_non[node*2+2]),\n                             segT_R[node*2+1] + segT_non[node*2+2]);\n        // segT[node] = segT[node * 2 + 1] + segT[node * 2 + 2];\n    }\n\n    void change(int index, int val, int node, int s, int e) {\n        if (s == e) {\n            segT_LR[node] = val;\n            return;\n        }\n        int m = s + (e - s) / 2;\n        if (index <= m) {\n            change(index, val, node * 2 + 1, s, m);\n        } else {\n            change(index, val, node * 2 + 2, m + 1, e);\n        }\n        segT_LR[node] = max(segT_L[node*2 + 1] + max(segT_LR[node*2+2], segT_R[node*2+2]),\n                           segT_LR[node*2+1] + segT_R[node*2+2]);\n        \n        segT_L[node] = max(segT_L[node*2+1] + max(segT_L[node*2+2], segT_non[node*2+2]),\n                          segT_LR[node*2+1] + segT_non[node*2+2]);\n        \n        segT_R[node] = max(segT_non[node*2+1] + max(segT_LR[node*2+2], segT_R[node*2+2]),\n                            segT_R[node*2+1] + segT_R[node*2+2]);\n            \n        segT_non[node] = max(segT_non[node*2 + 1] + max(segT_L[node*2+2], segT_non[node*2+2]),\n                             segT_R[node*2+1] + segT_non[node*2+2]);\n        // segT[node] = segT[node * 2 + 1] + segT[node * 2 + 2];\n    }\n\n    // int range(int left, int right, int node, int s, int e) {\n    //     if (left == s && right == e) {\n    //         return segT[node];\n    //     }\n    //     int m = s + (e - s) / 2;\n    //     if (right <= m) {\n    //         return range(left, right, node * 2 + 1, s, m);\n    //     } else if (left > m) {\n    //         return range(left, right, node * 2 + 2, m + 1, e);\n    //     } else {\n    //         return range(left, m, node * 2 + 1, s, m) + range(m + 1, right, node * 2 + 2, m+1, e);\n    //     }\n    // }\n\npublic:\n    NumArray(vector<int>& nums) {\n        n = nums.size();\n        segT_LR = vector<ll>(n * 4);\n        segT_L = vector<ll>(n * 4);\n        segT_R = vector<ll>(n * 4);\n        segT_non = vector<ll>(n * 4);\n        \n        build(0, 0, n-1, nums);\n    }\n    \n    void update(int index, int val) {\n        change(index, val, 0, 0, n-1);\n    }\n    \n    ll result() {\n        ll l1 = max(segT_LR[0], segT_L[0]);\n        ll l2 = max(segT_R[0], segT_non[0]);\n        return max(l1, l2);\n    }\n    \n    // int sumRange(int left, int right) {\n    //     // return max\n    //     return range(left, right, 0, 0, n-1);\n    // }\n};\n\n\n\nclass Solution {\nprivate:\n    int n = 0;\npublic:\n    int maximumSumSubsequence(vector<int>& nums, vector<vector<int>>& queries) {\n        n = nums.size();\n        NumArray dp(nums);\n        \n        ll ret = 0;\n        ll MOD = 1e9 + 7;\n        \n        for (auto& v: queries) {\n            dp.update(v[0], v[1]);\n            ret += dp.result();\n            ret %= MOD;\n        }\n        \n        return ret % MOD;\n    }\n};\n// [0,3,3,3,1,-2]\n// [[4,0],[1,0]] => 9",
    "submit_ts": "1716694784",
    "subm_id": "1268124936"
}