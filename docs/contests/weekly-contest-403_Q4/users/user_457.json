{
    "username": "piscesdream-7",
    "submission": "class Solution {\npublic:\n    int minimumSum(vector<vector<int>>& grid) {\n        int n = grid.size(), m = grid[0].size();\n         \n        int l[n][m][n][m];\n        int r[n][m][n][m];\n        int t[n][m][n][m];\n        int b[n][m][n][m];\n        int f[3][n][m][n][m];\n        \n        \n        for (int si = 0; si <= n-1; ++si) {\n            for (int sj = 0; sj <= m-1; ++sj) {\n                for (int i = si; i <= n-1; ++i) {\n                    for (int j = sj; j <= m-1; ++j) {\n                        l[si][sj][i][j] = m;\n                        r[si][sj][i][j] = -1;\n                        t[si][sj][i][j] = n;\n                        b[si][sj][i][j] = -1;\n                        \n                        f[0][si][sj][i][j] = \n                        f[1][si][sj][i][j] = \n                        f[2][si][sj][i][j] = -1;\n                    }\n                }\n            }\n        }\n        \n\n        for (int si = 0; si <= n-1; ++si) {\n            for (int sj = 0; sj <= m-1; ++sj) {\n                for (int i = si; i <= n-1; ++i) {\n                    for (int j = sj; j <= m-1; ++j) {\n                        if (grid[i][j]) {\n                            l[si][sj][i][j] = j;\n                            r[si][sj][i][j] = j;\n                            t[si][sj][i][j] = i;\n                            b[si][sj][i][j] = i;\n                        }\n                        if (i > si && r[si][sj][i-1][j] >= 0) {\n                            l[si][sj][i][j] = min(l[si][sj][i][j], l[si][sj][i-1][j]);\n                            t[si][sj][i][j] = min(t[si][sj][i][j], t[si][sj][i-1][j]);\n                            \n                            r[si][sj][i][j] = max(r[si][sj][i][j], r[si][sj][i-1][j]);\n                            b[si][sj][i][j] = max(b[si][sj][i][j], b[si][sj][i-1][j]);\n                        }\n                            \n                        if (j > sj && r[si][sj][i][j-1] >= 0) {\n                            l[si][sj][i][j] = min(l[si][sj][i][j], l[si][sj][i][j-1]);\n                            t[si][sj][i][j] = min(t[si][sj][i][j], t[si][sj][i][j-1]);\n                            \n                            r[si][sj][i][j] = max(r[si][sj][i][j], r[si][sj][i][j-1]);\n                            b[si][sj][i][j] = max(b[si][sj][i][j], b[si][sj][i][j-1]);\n                        }\n                        \n                        \n                        if (r[si][sj][i][j] >= 0) {\n                            assert(l[si][sj][i][j] < m);\n                            assert(b[si][sj][i][j] >= 0);\n                            // cout << si << \" \" << sj << \" \" << i << \" \" << j << \":\" << t[si][sj][i][j] << endl;;\n                            assert(t[si][sj][i][j] < n);\n                            \n                            f[0][si][sj][i][j] =     \n                                (r[si][sj][i][j] - l[si][sj][i][j]+1) * \n                                (b[si][sj][i][j] - t[si][sj][i][j]+1);\n                        } else {\n                            f[0][si][sj][i][j] = 0;\n                        }\n                        // cout << si << \" \" << sj << \" \" << i << \" \" << j << \"=\" << f[0][si][sj][i][j] << endl;;\n                    }\n                }\n            }\n        }\n\n\n        function<int(int, int, int, int, int)> search = [&](int left, int right, int top, int bottom, int count) {\n            // cout << left << \"->\" << right<< \"\\t\" << top << \"->\" << bottom << \" \"<< count << endl;\n            assert(count > 0);\n            int& fv = f[count-1][top][left][bottom][right];\n            if (fv >= 0)  {\n                // cout << \"found\"<< left << \"->\" << right<< \"\\t\" << top << \"->\" << bottom << \" \"<< count << endl;\n            assert(count > 0);\n                return fv;\n            }\n            \n            int ans = n*m;\n            for (int i = left; i < right; ++i) {\n                ans = min(ans,\n                            search(left, i, top, bottom, 1) + \n                            search(i+1, right, top, bottom, count-1)\n                         );\n                ans = min(ans,\n                            search(left, i, top, bottom, count-1) + \n                            search(i+1, right, top, bottom, 1)\n                         );\n            }\n            for (int j = top; j < bottom; ++j) {\n                ans = min(ans,\n                            search(left, right, top, j, 1) + \n                            search(left, right, j+1, bottom, count-1)\n                         );\n                ans = min(ans,\n                            search(left, right, top, j, count-1) + \n                            search(left, right, j+1, bottom, 1)\n                         );\n            }\n            \n            return fv = ans;\n        };\n        return search(0, m-1, 0, n-1, 3);\n    }\n};",
    "submit_ts": "1719114000",
    "subm_id": "541399985"
}