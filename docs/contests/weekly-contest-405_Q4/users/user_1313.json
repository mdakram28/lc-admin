{
    "username": "FxxkLCImNotCheating",
    "submission": "class Solution {\n    private class Trie\n    {\n        public int value = Integer.MAX_VALUE;\n        public boolean isWord = false;\n        public Map<Character, Trie> children = new HashMap<>();\n    }\n    \n    public int minimumCost(String target, String[] words, int[] costs) {\n        Integer[] memo = new Integer[target.length()];\n        Trie root = new Trie();\n        \n        for (int i = 0; i < words.length; i++)\n        {\n            Trie node = root;\n            for (char c : words[i].toCharArray())\n            {\n                if (!node.children.containsKey(c))\n                {\n                    node.children.put(c, new Trie());\n                }\n                \n                node = node.children.get(c);\n            }\n            \n            node.value = Math.min(node.value, costs[i]);\n            node.isWord = true;\n        }\n        \n        int ans = helper(target, 0, root, memo);\n        return ans == Integer.MAX_VALUE ? -1 : ans;\n    }\n    \n    private int helper(String target, int pos, Trie root, Integer[] memo)\n    {\n        if (pos == target.length())\n        {\n            return 0;\n        }\n        \n        if (memo[pos] != null)\n        {\n            return memo[pos];\n        }\n        \n        long min = Integer.MAX_VALUE;\n        Trie node = root;\n        \n        for (int i = pos; i < target.length(); i++)\n        {\n            char c = target.charAt(i);\n            if (!node.children.containsKey(c))\n            {\n                break;\n            }\n            \n            node = node.children.get(c);\n            \n            if (node.isWord)\n            {\n                min = Math.min(min, (long)node.value + (long)helper(target, i + 1, root, memo));\n            }\n        }\n        \n        memo[pos] = (int)(min > Integer.MAX_VALUE ? Integer.MAX_VALUE : min);\n        \n        return memo[pos];\n    }\n}",
    "submit_ts": "1720323013",
    "subm_id": "1312365066"
}