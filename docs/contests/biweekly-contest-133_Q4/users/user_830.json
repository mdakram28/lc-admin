{
    "username": "Akash_k_m27",
    "submission": "/**\n * @param {number} n\n * @param {number[][]} requirements\n * @return {number}\n */\nvar numberOfPermutations = function(n, requirements) {\n    const MOD = 1000000007;\n    const MAX_INVERSIONS = 400;\n\n    let reqMap = new Map();\n    for (let req of requirements) {\n        reqMap.set(req[0] + 1, req[1]);\n    }\n\n      let permCounts = Array.from({ length: n + 1 }, () => Array(MAX_INVERSIONS + 1).fill(0));\n     permCounts[0][0] = 1;\n \n        for (let length = 1; length <= n; length++) \n        {\n            for (let inv = 0; inv <= MAX_INVERSIONS; inv++) \n            {\n                for (let newPos = 0; newPos < length; newPos++)\n                {\n                    let prevInv = inv - newPos;\n                    if (prevInv >= 0) \n                    {\n                        permCounts[length][inv] = (permCounts[length][inv] + permCounts[length - 1][prevInv]) % MOD;\n                    }\n                }\n            }\n\n        if (reqMap.has(length)) \n        {\n            let targetInv = reqMap.get(length);\n            for (let inv = 0; inv <= MAX_INVERSIONS; inv++) \n            {\n                if (inv !== targetInv) {\n                    permCounts[length][inv] = 0;\n                }\n            }\n        }\n    }\n\n    let result = 0;\n    for (let count of permCounts[n]) {\n        result = (result + count) % MOD;\n    }\n\n    return result;\n};\n",
    "submit_ts": 1719071029.0
}