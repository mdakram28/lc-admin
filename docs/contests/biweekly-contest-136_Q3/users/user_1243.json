{
    "username": "muGDWaovHp",
    "submission": "#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\nclass Solution {\npublic:\n    int minFlips(vector<vector<int>>& grid) {\n        int n = grid.size();\n        int m = grid[0].size();\n        int flips = 0;\n\n        // Check the center cell for odd dimensions and adjust flips\n        if (n % 2 != 0 && m % 2 != 0 && grid[n / 2][m / 2] == 1) {\n            flips++;\n        }\n\n        // Calculate shifts for middle row and column if grid has odd dimensions\n        vector<int> shiftCounts(3, 0);\n        if (n % 2 != 0) {\n            for (int left = 0, right = m - 1; left < right; ++left, --right) {\n                int sum = grid[n / 2][left] + grid[n / 2][right];\n                shiftCounts[sum]++;\n            }\n        }\n\n        if (m % 2 != 0) {\n            for (int top = 0, bottom = n - 1; top < bottom; ++top, --bottom) {\n                int sum = grid[top][m / 2] + grid[bottom][m / 2];\n                shiftCounts[sum]++;\n            }\n        }\n\n        // Adjust flips based on shiftCounts\n        if (shiftCounts[2] % 2 != 0) {\n            flips += (shiftCounts[1] > 0) ? shiftCounts[1] : 2;\n        } else {\n            flips += shiftCounts[1];\n        }\n\n        // Check each quadrant of the grid\n        for (int i = 0; i < n / 2; ++i) {\n            for (int j = 0; j < m / 2; ++j) {\n                int sum = grid[i][j] + grid[n - 1 - i][j] + grid[i][m - 1 - j] + grid[n - 1 - i][m - 1 - j];\n                if (sum != 0 && sum != 4) {\n                    flips += min(sum, 4 - sum);\n                }\n            }\n        }\n\n        return flips;\n    }\n};\n",
    "submit_ts": "1722699371",
    "subm_id": "1343209630"
}