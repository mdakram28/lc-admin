{
    "username": "jeffreyhu8",
    "submission": "class Solution {\n    /*\n    class Solution:\n    def minimumDistance(self, points: List[List[int]]) -> int:\n        # maximum distance = max(max(|a + b - (c + d)|), max(|(a - b) - (c - d)|))\n        \n        xpy = Counter()\n        xmy = Counter()\n        for x, y in points:\n            xpy[x + y] += 1\n            xmy[x - y] += 1  \n    */\n    \n    public int minimumDistance(int[][] points) {\n        TreeMap<Integer, Integer> xpy = new TreeMap<>();\n        TreeMap<Integer, Integer> xmy = new TreeMap<>();\n        for (int[] point : points) {\n            xpy.put(point[0] + point[1], xpy.getOrDefault(point[0] + point[1], 0) + 1);\n            xmy.put(point[0] - point[1], xmy.getOrDefault(point[0] - point[1], 0) + 1);\n        }\n\n        int res = Integer.MAX_VALUE;\n        for (int[] point : points) {\n            xpy.put(point[0] + point[1], xpy.get(point[0] + point[1]) - 1);\n            if (xpy.get(point[0] + point[1]) == 0) {\n                xpy.remove(point[0] + point[1]);\n            }\n            xmy.put(point[0] - point[1], xmy.get(point[0] - point[1]) - 1);\n            if (xmy.get(point[0] - point[1]) == 0) {\n                xmy.remove(point[0] - point[1]);\n            }\n\n            res = Math.min(Math.max(Math.abs(xpy.lastKey() - xpy.firstKey()), Math.abs(xmy.lastKey() - xmy.firstKey())), res);\n\n            // backtrack\n            xpy.put(point[0] + point[1], xpy.getOrDefault(point[0] + point[1], 0) + 1);\n            xmy.put(point[0] - point[1], xmy.getOrDefault(point[0] - point[1], 0) + 1);\n        }\n\n        return res;\n    }\n}"
}