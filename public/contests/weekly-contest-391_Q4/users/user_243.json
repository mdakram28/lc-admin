{
    "username": "ashishrrs",
    "submission": "class Solution {\npublic:\n    \n    // int maxXplusY = INT_MIN;\n    // int minXplusY = INT_MAX;\n    // int maxXminusY = INT_MIN;\n    // int minXminusY = INT_MAX;\n\n//     for (const auto& [x, y] : points) {\n//         maxXplusY = std::max(maxXplusY, x + y);\n//         minXplusY = std::min(minXplusY, x + y);\n//         maxXminusY = std::max(maxXminusY, x - y);\n//         minXminusY = std::min(minXminusY, x - y);\n//     }\n\n//     return std::max(maxXplusY - minXplusY, maxXminusY - minXminusY);\n    int minimumDistance(vector<vector<int>>& points) {\n        long long ans = INT_MAX;\n        multiset<long long>xpy;\n         multiset<long long , greater<long long>>rxpy;\n         multiset<long long>xmy;\n         multiset<long long,greater<long long>>rxmy;\n        for(int i =0; i < points.size();i++){\n            int val = points[i][0] + points[i][1];\n            int val2 = points[i][0] - points[i][1];\n            xpy.insert(val);\n            rxpy.insert(val);\n            xmy.insert(val2);\n            rxmy.insert(val2);\n        }\n        for(int i =0; i < points.size();i++){\n            int val = points[i][0] + points[i][1];\n            int val2 = points[i][0] - points[i][1];\n            auto itr = xpy.find(val);\n            xpy.erase(itr);\n                        auto itr1 = rxpy.find(val);\n            rxpy.erase(itr1);\n                        auto itr2 = xmy.find(val2);\n            xmy.erase(itr2);\n                        auto itr3 = rxmy.find(val2);\n            rxmy.erase(itr3);\n            itr = xpy.begin();\n            itr1 = rxpy.begin();\n            itr2 = xmy.begin();\n            itr3 = rxmy.begin();\n            ans = min(ans, max(*itr1 - *itr,*itr3- *itr2));\n            xpy.insert(val);\n            rxpy.insert(val);\n            xmy.insert(val2);\n            rxmy.insert(val2);\n            \n        }\n        return ans;\n    }\n};"
}