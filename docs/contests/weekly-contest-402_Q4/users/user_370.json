{
    "username": "timetoai",
    "submission": "class Solution:\n    def countOfPeaks(self, nums: List[int], queries: List[List[int]]) -> List[int]:\n        n = 2 ** (math.floor(math.log(len(nums), 2)) + 1)\n        stsize = 2 * n\n        s = [0] * stsize\n        \n        def fill(ind, i=0, beg=0, size=n):\n            if size == 1:\n                s[i] = int(0 < beg < len(nums) - 1 and nums[beg] > nums[beg + 1] and nums[beg] > nums[beg - 1])\n            else:\n                hsize = size // 2\n                mid = beg + hsize\n                li, ri = i * 2 + 1, i * 2 + 2\n                if ind < mid:\n                    fill(ind, li, beg, hsize)\n                else:\n                    fill(ind, ri, beg + hsize, hsize)\n                s[i] = s[li] + s[ri]\n                \n        def search(ind, i=0, beg=0, size=n):\n            if size == 1:\n                return s[i]\n            else:\n                hsize = size // 2\n                mid = beg + hsize\n                li, ri = i * 2 + 1, i * 2 + 2\n                if ind < mid:\n                    lres = search(ind, li, beg, hsize)\n                    rres = 0\n                else:\n                    lres = s[li]\n                    rres = search(ind, ri, beg + hsize, hsize)\n                return lres + rres\n        \n        for ind in range(len(nums)):\n            fill(ind)\n        \n        ret = []\n        for q in queries:\n            if q[0] == 1:\n                ret.append(search(q[2] - 1) - search(q[1]) if q[2] - 1 >= q[1] else 0)\n            else:\n                nums[q[1]] = q[2]\n                for i in range(max(0, q[1] - 1), min(len(nums), q[1] + 2)):\n                    fill(i)\n        return ret\n            \n        \n        \n        ",
    "submit_ts": "1718507049",
    "subm_id": "1289639544"
}