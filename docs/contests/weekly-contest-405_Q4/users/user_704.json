{
    "username": "BradleyPelton",
    "submission": "class Solution {\n\n    class TrieNode {\n        boolean endsWord = false;\n        TrieNode[] childrenNodes;\n        int cost;\n        public TrieNode() {\n            childrenNodes = new TrieNode[26];\n        }\n\n        public TrieNode get(Character c) {\n            return childrenNodes[c - 97];\n        }\n\n        public void put(Character c) {\n            if (!containsKey(c)) {\n                childrenNodes[c - 97] = new TrieNode();\n            }\n        }\n\n        public boolean containsKey(Character c) {\n            return childrenNodes[c - 97] != null;\n        }\n    }\n\n    TrieNode root;\n    Integer[] dp;\n    int n;\n    public int minimumCost(String target, String[] words, int[] costs) {\n        root = new TrieNode();\n        buildTrie(words, costs);\n        n = target.length();\n        dp = new Integer[n];\n\n        int ans = minCost(target, 0);\n        if (ans == Integer.MAX_VALUE) {\n            ans = -1;\n        }\n        System.out.println(ans);\n        return ans;\n    }\n\n\n    public int minCost(String target, int currIndex) {\n        if (currIndex >= n) {\n            return 0;\n        }\n        if (dp[currIndex] != null) {\n            return dp[currIndex];\n        }\n\n        int ans = Integer.MAX_VALUE;\n        TrieNode currNode = root;\n        for (int i = currIndex; i < n; i++) {\n            char nextChar = target.charAt(i);\n            if (!currNode.containsKey(nextChar)) {\n                break;\n            }\n            currNode = currNode.get(nextChar);\n\n            if (currNode.endsWord) {\n                int localAns = minCost(target, i + 1);\n                if (localAns != Integer.MAX_VALUE) {\n                    localAns += currNode.cost;\n                    ans = Math.min(ans, localAns);\n                }\n            }\n        }\n\n        dp[currIndex] = ans;\n        return ans;\n    }\n\n    private void buildTrie(String[] words, int[] costs) {\n        for (int i = 0; i < words.length; i++) {\n            TrieNode nextNode = root;\n            for (char c : words[i].toCharArray()) {\n                if (!nextNode.containsKey(c)) {\n                    nextNode.put(c);\n                }\n                nextNode = nextNode.get(c);\n            }\n\n            if (nextNode.endsWord) {\n                nextNode.cost = Math.min(nextNode.cost, costs[i]);\n            } else {\n                nextNode.endsWord = true;\n                nextNode.cost = costs[i];\n            }\n        }\n    }\n}",
    "submit_ts": "1720322407",
    "subm_id": "1312349071"
}