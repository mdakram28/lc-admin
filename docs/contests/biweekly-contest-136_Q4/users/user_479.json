{
    "username": "jpOtyG4Mis",
    "submission": "class Solution {\npublic:\n    int firstMax[200001];   // to store first-max length.\n    int secondMax[200001];  // to store second-max length.\n    int c[200001];          // to store child for path of max length.\n\n    // calculate for every node x the maximum\n    // length of a path that goes through a child of x\n    void dfs(int v, int p,vector<int> &add,vector<vector<int>>&adj) {\n        firstMax[v] = 0;\n        secondMax[v] = 0;\n        for (auto x : adj[v]) {\n            if (x == p) continue;\n            dfs(x, v,add,adj);\n            if (firstMax[x] + add[x] > firstMax[v]) {\n                secondMax[v] = firstMax[v];\n                firstMax[v] = firstMax[x] + add[x];\n                c[v] = x;\n            } else if (firstMax[x] + add[x] > secondMax[v]) {\n                secondMax[v] = firstMax[x] + add[x];\n            }\n        }\n    }\n\n    // calculate for every node x the\n    // maximum length of a path through its parent p\n    void dfs2(int v, int p,vector<int> &add,vector<vector<int>> &adj) {\n        for (auto x : adj[v]) {\n            if (x == p) continue;\n            if (c[v] == x) {\n                if (firstMax[x] < secondMax[v] + add[v]) {\n                    secondMax[x] = firstMax[x];\n                    firstMax[x] = secondMax[v] + add[v];\n                    c[x] = v;\n                } else {\n                    secondMax[x] = max(secondMax[x], secondMax[v] + add[v]);\n                }\n            } else {\n                secondMax[x] = firstMax[x];\n                firstMax[x] = firstMax[v] + add[v];\n                c[x] = v;\n            }\n            dfs2(x, v,add,adj);\n        }\n    }\n    vector<int> timeTaken(vector<vector<int>>& edges) {\n        int n=edges.size()+1;\n\n        vector<int> add(n,0);\n        for(int i=0;i<n;i++){\n            if(i%2==0){\n                add[i]=2;\n            }\n            else{\n                add[i]=1;\n            }\n        }\n        vector<vector<int>> adj(n);\n        for(auto it:edges){\n            adj[it[0]].push_back(it[1]);\n            adj[it[1]].push_back(it[0]);\n        }\n\n        dfs(0,-1,add,adj);\n        dfs2(0,-1,add,adj);\n        vector<int> ans(n);\n        for(int i=0;i<n;i++){\n            ans[i]=firstMax[i];\n        }\n        return ans;\n    }\n};",
    "submit_ts": "1722700439",
    "subm_id": "1343241909"
}