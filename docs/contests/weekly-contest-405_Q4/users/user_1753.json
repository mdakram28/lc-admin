{
    "username": "sk9698",
    "submission": "class TrieNode {\npublic:\n    TrieNode* links[26];\n    vector<pair<int, int>> ends;\n    TrieNode(){\n        for(int i=0;i<26;i++){\n            links[i]=nullptr;\n        }\n    }\n};\n\nclass Trie {\npublic:\n    TrieNode* root;\n\n    Trie() {\n        root = new TrieNode();\n    }\n\n    void insert(string word, int index, int cost) {\n        TrieNode* node = root;\n        for (char c : word) {\n            if (!node->links[c-'a']) {\n                node->links[c-'a'] = new TrieNode();\n            }\n            node = node->links[c-'a'];\n        }\n        node->ends.push_back({index, cost});\n    }\n};\n\nclass Solution {\npublic: \n    \n    int  minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int n = target.size();\n        vector<int> dp(n + 1, INT_MAX);\n        dp[0] = 0;\n\n        Trie trie;\n        for (int i = 0; i < words.size(); ++i) {\n            trie.insert(words[i], i, costs[i]);\n        }\n\n        for (int i = 0; i < n; ++i) {\n            if (dp[i] != INT_MAX) {\n             \n            TrieNode* node = trie.root;\n            for (int j = i; j < n; ++j) {\n                if (!node->links[target[j]-'a']) {\n                    break;\n                }\n                node = node->links[target[j]-'a'];\n                for (auto& p : node->ends) {\n                    int word_len = words[p.first].size();\n                    if (i + word_len <= n) {\n                        dp[i + word_len] = min(dp[i + word_len], dp[i] + p.second);\n                    }\n                }\n            }\n            }\n        }\n\n        \n        if(dp[n] == INT_MAX){\n            return -1;\n        }\n\n        return dp[n];\n    }\n};",
    "submit_ts": "1720324688",
    "subm_id": "1312405577"
}