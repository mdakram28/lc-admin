{
    "username": "Simardeep Singh Mudhar",
    "submission": "class Solution {\npublic:\n    #define ll long long\n    long long maximumValueSum(vector<vector<int>>& board) {\n        int n = board.size(), m = board[0].size();\n        \n        vector<vector<pair<int, int>>> bestColumns(n); // stores (value, column) pairs for each row\n\n        // Precompute the best 3 columns for each row\n        for (int i = 0; i < n; ++i) {\n            vector<pair<int, int>> rowValues;\n            for (int j = 0; j < m; ++j) {\n                rowValues.push_back({board[i][j], j});\n            }\n            sort(rowValues.rbegin(), rowValues.rend());\n            bestColumns[i] = vector<pair<int, int>>(rowValues.begin(), rowValues.begin() + min(3, (int)rowValues.size()));\n        }\n\n        ll maxSum = LLONG_MIN;\n\n        // Iterate over all combinations of 3 different rows\n        for (int r1 = 0; r1 < n - 2; ++r1) {\n            for (int r2 = r1 + 1; r2 < n - 1; ++r2) {\n                for (int r3 = r2 + 1; r3 < n; ++r3) {\n                    // Try combining the best columns from the 3 rows\n                    for (auto &c1 : bestColumns[r1]) {\n                        for (auto &c2 : bestColumns[r2]) {\n                            if (c1.second == c2.second) continue; // Skip if the columns are the same\n                            for (auto &c3 : bestColumns[r3]) {\n                                if (c3.second == c1.second || c3.second == c2.second) continue;\n                                \n                                // We have a valid combination of cells\n                                ll currentSum = (ll)c1.first + c2.first + c3.first;\n                                maxSum = max(maxSum, currentSum);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return maxSum;\n    }\n};",
    "submit_ts": "1723909409",
    "subm_id": "1359191463"
}