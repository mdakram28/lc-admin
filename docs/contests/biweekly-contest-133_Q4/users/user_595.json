{
    "username": "Tkiyqe1w8P",
    "submission": "class Solution:\n    def numberOfPermutations(self, num_elements, inversion_constraints):\n        constraint_map = {}\n        MODULO = 10**9 + 7\n        MAX_INV_COUNT = 400\n        for constraint in inversion_constraints:\n            constraint_map[constraint[0] + 1] = constraint[1]\n\n        permutation_counts = [[0 for _ in range(MAX_INV_COUNT + 1)] for _ in range(num_elements + 1)]\n        permutation_counts[0][0] = 1\n\n        for permutation_length in range(1, num_elements + 1):\n            for inv_count in range(MAX_INV_COUNT + 1):\n                for new_position in range(permutation_length):\n                    prev_inv_count = inv_count - new_position\n                    if prev_inv_count >= 0:\n                        permutation_counts[permutation_length][inv_count] = (\n                            permutation_counts[permutation_length][inv_count] +\n                            permutation_counts[permutation_length - 1][prev_inv_count]\n                        ) % MODULO\n\n            if permutation_length in constraint_map:\n                target_inv_count = constraint_map[permutation_length]\n                for inv_count in range(MAX_INV_COUNT + 1):\n                    if inv_count != target_inv_count:\n                        permutation_counts[permutation_length][inv_count] = 0\n\n        result = 0\n        for count in permutation_counts[num_elements]:\n            result = (result + count) % MODULO\n\n        return result",
    "submit_ts": 1719070765.0
}