{
    "username": "Zenchin Yang",
    "submission": "from itertools import combinations as comb  \nfrom typing import List  \n\nclass Solution:  \n    def maximumValueSum(self, board: List[List[int]]) -> int:   \n        # Determine the number of rows and columns in the board  \n        num_rows = len(board)  \n        num_cols = len(board[0])  \n        \n        # Initialize maximum sum to negative infinity  \n        max_sum = float('-inf')  \n        \n        # Prepare lists to hold top values and their column indices  \n        top_values = [[float('-inf')] * 3 for _ in range(num_rows)]  \n        top_columns = [[-1] * 3 for _ in range(num_rows)]  \n        \n        # Populate top values and their corresponding columns for each row  \n        for row in range(num_rows):  \n            # Create a list of column values paired with their indices  \n            column_values = [(board[row][col], col) for col in range(num_cols)]  \n            # Sort the column values in descending order based on their values  \n            column_values.sort(reverse=True, key=lambda x: x[0])  \n            \n            # Store the top 3 values and their columns for the current row  \n            for idx in range(min(3, num_cols)):  \n                top_values[row][idx] = column_values[idx][0]  \n                top_columns[row][idx] = column_values[idx][1]  \n\n        # Explore combinations of 3 different rows  \n        for first_row in range(num_rows):  \n            for second_row in range(first_row + 1, num_rows):  \n                for third_row in range(second_row + 1, num_rows):  \n                    # Check all combinations of the top values from the selected rows  \n                    for i in range(3):  \n                        for j in range(3):  \n                            # Skip if the columns are the same for first and second rows  \n                            if top_columns[second_row][j] == top_columns[first_row][i]:  \n                                continue  \n                            for k in range(3):  \n                                # Skip if the columns are the same for all selected rows  \n                                if (top_columns[third_row][k] == top_columns[first_row][i] or   \n                                    top_columns[third_row][k] == top_columns[second_row][j]):  \n                                    continue  \n                                \n                                # Calculate the current sum of the top values from the three rows  \n                                current_sum = (top_values[first_row][i] +   \n                                               top_values[second_row][j] +   \n                                               top_values[third_row][k])  \n                                \n                                # Update maximum sum if current sum is greater  \n                                max_sum = max(max_sum, current_sum)  \n        \n        return max_sum",
    "submit_ts": "1723910319",
    "subm_id": "1359225714"
}