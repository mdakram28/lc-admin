{
    "username": "skywalkert",
    "submission": "class Solution {\npublic:\n    vector<int> numberOfAlternatingGroups(vector<int>& col, vector<vector<int>>& que) {\n        int n = col.size();\n        vector<int> adt(n), bits0(n + 1), bits1(n + 1), pL(n, -1), pR(n, -1);\n        set<int> spL;\n        for(int i = 0, las = col.back(); i < n; ++i) {\n            adt[i] = las ^ col[i];\n            las = col[i];\n        }\n        auto bitUpd = [&](int x, int v) {\n            // printf(\"bitUpd %d %d\\n\", x, v);\n            for(int i = x, vx = v * x; i > 0; i -= i & -i) {\n                bits0[i] += v;\n                bits1[i] += vx;\n            }\n        };\n        auto bitQue = [&](int x) {\n            int res0 = 0, res1 = 0;\n            for(int i = x; i <= n; i += i & -i) {\n                res0 += bits0[i];\n                res1 += bits1[i];\n            }\n            // printf(\"bitQue %d: %d %d\\n\", x, res0, res1);\n            return res1 - (x - 1) * res0;\n        };\n        for(int i = 0, j; i < n; ) {\n            for(j = i; i < n && adt[i] == adt[j]; ++i);\n            if(adt[j]) {\n                // printf(\"add [%d, %d]\\n\", j, i - 1);\n                pL[i - 1] = j;\n                pR[j] = i - 1;\n                spL.insert(j);\n                bitUpd(i - j, 1);\n            }\n        }\n        auto flip = [&](int x) {\n            // printf(\"flip %d\\n\", x);\n            adt[x] ^= 1;\n            if(adt[x]) {\n                int L = x, R = x;\n                if(x > 0 && adt[x - 1]) {\n                    L = pL[x - 1];\n                    // printf(\"del [%d, %d]\\n\", L, x - 1);\n                    bitUpd(x - L, -1);\n                    spL.erase(L);\n                    pL[x - 1] = pR[L] = -1;\n                }\n                if(x + 1 < n && adt[x + 1]) {\n                    R = pR[x + 1];\n                    // printf(\"del [%d, %d]\\n\", x + 1, R);\n                    bitUpd(R - x, -1);\n                    spL.erase(x + 1);\n                    pL[R] = pR[x + 1] = -1;\n                }\n                // printf(\"add [%d, %d]\\n\", L, R);\n                pL[R] = L;\n                pR[L] = R;\n                bitUpd(R - L + 1, 1);\n                spL.insert(L);\n                return;\n            }\n            // printf(\"try found spL <= %d\\n\", x);\n            int L = *(--spL.upper_bound(x));\n            int R = pR[L];\n            // printf(\"del [%d, %d]\\n\", L, R);\n            bitUpd(R - L + 1, -1);\n            spL.erase(L);\n            pL[R] = pR[L] = -1;\n            if(L < x) {\n                // printf(\"add [%d, %d]\\n\", L, x - 1);\n                pR[L] = x - 1;\n                pL[x - 1] = L;\n                bitUpd(x - L, 1);\n                spL.insert(L);\n            }\n            if(x < R) {\n                // printf(\"add [%d, %d]\\n\", x + 1, R);\n                pR[x + 1] = R;\n                pL[R] = x + 1;\n                bitUpd(R - x, 1);\n                spL.insert(x + 1);\n            }\n        };\n        vector<int> ans;\n        for(auto &it: que) {\n            if(it[0] == 1) {\n                if(pR[0] == n - 1) {\n                    ans.push_back(n);\n                    continue;\n                }\n                int res = bitQue(--it[1]);\n                if(adt[0] && adt[n - 1]) {\n                    int len1 = pR[0] + 1, len2 = n - pL[n - 1];\n                    if(len1 >= it[1])\n                        res -= len1 - it[1] + 1;\n                    if(len2 >= it[1])\n                        res -= len2 - it[1] + 1;\n                    if((len1 += len2) >= it[1])\n                        res += len1 - it[1] + 1;\n                }\n                ans.push_back(res);\n                continue;\n            }\n            if(col[it[1]] == it[2])\n                continue;\n            col[it[1]] = it[2];\n            flip(it[1]);\n            flip((it[1] + 1) % n);\n        }\n        return ans;\n    }\n};",
    "submit_ts": "1722742734",
    "subm_id": "1343775916"
}