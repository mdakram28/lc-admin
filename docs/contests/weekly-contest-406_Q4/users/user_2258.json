{
    "username": "siddheshmankar70",
    "submission": "class Solution {\npublic:\n    long long minimumCost(int m, int n, vector<int>& horizontalCut, vector<int>& verticalCut) {\n        sort(horizontalCut.rbegin(), horizontalCut.rend());\n    sort(verticalCut.rbegin(), verticalCut.rend());\n\n    priority_queue<int> hCuts(horizontalCut.begin(), horizontalCut.end());\n    priority_queue<int> vCuts(verticalCut.begin(), verticalCut.end());\n\n    long long totalCost = 0;\n    int horizontalPieces = 1;\n    int verticalPieces = 1;\n\n    while (!hCuts.empty() || !vCuts.empty()) {\n        if (vCuts.empty() || (!hCuts.empty() && hCuts.top() >= vCuts.top())) {\n            totalCost += (long long)hCuts.top() * verticalPieces;\n            hCuts.pop();\n            horizontalPieces++;\n        } else {\n            totalCost += (long long)vCuts.top() * horizontalPieces;\n            vCuts.pop();\n            verticalPieces++;\n        }\n    }\n\n    return totalCost;\n    }\n};",
    "submit_ts": "1720926426",
    "subm_id": "1320285901"
}