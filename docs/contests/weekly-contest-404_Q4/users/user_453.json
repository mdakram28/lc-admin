{
    "username": "SouvikG2003",
    "submission": "\nclass Solution {\npublic:\n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n        int s1 = edges1.size() + 1,s2 = edges2.size() + 1;\n        vector<vector<int>> GRAPH1(s1), GRA2(s2);\n        for (const auto& edge : edges1) {\n            GRAPH1[edge[0]].push_back(edge[1]);\n            GRAPH1[edge[1]].push_back(edge[0]);\n        }\n\n        for (const auto& edge : edges2) {\n            GRA2[edge[0]].push_back(edge[1]);\n            GRA2[edge[1]].push_back(edge[0]);\n        }\n\n        auto DFS_VISIT = [](const vector<vector<int>>& GRA, int SURUUU, int& NODE) {\n            int n = GRA.size();\n            vector<int> DUROTTO(n, -1);\n            function<void(int, int)> dfsVisit = [&](int node, int dist) {\n                DUROTTO[node] = dist;\n                if (dist > DUROTTO[NODE]) {\n                    NODE = node;\n                }\n                for (int PROTIBESI : GRA[node]) {\n                    if (DUROTTO[PROTIBESI] == -1) {\n                        dfsVisit(PROTIBESI, dist + 1);\n                    }\n                }\n            };\n            NODE = SURUUU;\n            dfsVisit(SURUUU, 0);\n            return DUROTTO[NODE];\n        };\n\n        int NODE_1ST = 0;\n        DFS_VISIT(GRAPH1, 0, NODE_1ST);\n        int DIA_1ST = DFS_VISIT(GRAPH1, NODE_1ST, NODE_1ST);\n\n        int NODE_2ND = 0;\n        DFS_VISIT(GRA2, 0, NODE_2ND);\n        int DIA_2ND = DFS_VISIT(GRA2, NODE_2ND, NODE_2ND);\n\n        int MIN_DIA = max(DIA_1ST, DIA_2ND);\n        int half1 = (DIA_1ST + 1) / 2,half2 = (DIA_2ND + 1) / 2;\n        MIN_DIA = max(MIN_DIA, half1 + half2 + 1);\n\n        return MIN_DIA;\n    }\n};\n",
    "submit_ts": "1719718674",
    "subm_id": "1304423243"
}