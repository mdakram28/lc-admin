{
    "username": "allrounderankit",
    "submission": "class Solution {\npublic:\n    int dp[301][401];\n    int constraints[301];\n    int mod = 1e9+7;\n\n    int countPermutations(int index, int currentSum, int totalElements) {\n\n        if (index == totalElements) return 1;\n\n        if (dp[index][currentSum] != -1) return dp[index][currentSum];\n\n        int result = 0;\n\n        if (constraints[index] == -1) {\n            for (int j = 0; j <= index; j++) {\n                if (currentSum + index - j <= 400)\n                    result = (result + countPermutations(index + 1, currentSum + index - j, totalElements)) % mod;\n            }\n        } else {\n            for (int j = 0; j <= index; j++) {\n                if (currentSum + index - j == constraints[index])\n                    result = (result + countPermutations(index + 1, currentSum + index - j, totalElements)) % mod;\n            }\n        }\n\n        return dp[index][currentSum] = result % mod;\n    }\n\n    int numberOfPermutations(int n, vector<vector<int>>& restricted) {\n        memset(dp, -1, sizeof(dp));\n        memset(constraints, -1, sizeof(constraints));\n\n        for (int i = 0; i < restricted.size(); i++) {\n            constraints[restricted[i][0]] = restricted[i][1];\n        }\n\n        return countPermutations(0, 0, n);\n    }\n};\n",
    "submit_ts": 1719068031.0
}