{
    "username": "Pawan2000",
    "submission": "class Solution {\npublic:\n    #define ll long long int\n    ll solve(int m, int n, vector<int>& horizontalCut, vector<int>& verticalCut) {\n        sort(horizontalCut.rbegin(), horizontalCut.rend());\n        sort(verticalCut.rbegin(), verticalCut.rend());\n\n        int h = 0, v = 0;\n        int h_pieces = 1, v_pieces = 1;\n        ll cost = 0;\n\n        while (h < horizontalCut.size() && v < verticalCut.size()) {\n            if (horizontalCut[h] >= verticalCut[v]) {\n                cost += horizontalCut[h] * v_pieces;\n                h_pieces++;\n                h++;\n            } else {\n                cost += verticalCut[v] * h_pieces;\n                v_pieces++;\n                v++;\n            }\n        }\n\n        while (h < horizontalCut.size()) {\n            cost += horizontalCut[h] * v_pieces;\n            h++;\n        }\n\n        while (v < verticalCut.size()) {\n            cost += verticalCut[v] * h_pieces;\n            v++;\n        }\n\n        return cost;\n    }\n    long long minimumCost(int m, int n, vector<int>& horizontalCut, vector<int>& verticalCut) {\n        return solve(m,n,horizontalCut,verticalCut);\n    }\n};",
    "submit_ts": "1720925373",
    "subm_id": "1320252495"
}