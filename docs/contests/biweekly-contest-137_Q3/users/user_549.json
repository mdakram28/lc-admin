{
    "username": "\u5495\u565c\u5495\u565c\u602a\u2714",
    "submission": "fmax = lambda x, y: x if x > y else y\nclass Solution:\n    def maximumValueSum(self, board: List[List[int]]) -> int:\n        m, n = len(board), len(board[0])\n        max_value = float('-inf')\n        result = []\n\n        for row in board:\n            top1, top2, top3 = float('-inf'), float('-inf'), float('-inf')\n            idx1, idx2, idx3 = -1, -1, -1\n            \n            for c in range(n):\n                value = row[c]\n                if value > top1:\n                    top3, idx3 = top2, idx2\n                    top2, idx2 = top1, idx1\n                    top1, idx1 = value, c\n                elif value > top2:\n                    top3, idx3 = top2, idx2\n                    top2, idx2 = value, c\n                elif value > top3:\n                    top3, idx3 = value, c\n            \n            result.append([(top1, idx1), (top2, idx2), (top3, idx3)])\n        board = result\n        for r1 in range(m):\n            for r2 in range(r1 + 1, m):\n                for r3 in range(r2 + 1, m):\n\n\n                    # max_heap1 = nlargest(3, [(board[r1][c], c) for c in range(n)])\n                    # max_heap2 = nlargest(3, [(board[r2][c], c) for c in range(n)])\n                    # max_heap3 = nlargest(3, [(board[r3][c], c) for c in range(n)])\n                    #print(max_heap1, max_heap2, max_heap3)\n                    for e1, j1 in board[r1]:\n                        for e2, j2 in board[r2]:\n                            if j1 == j2: continue\n                            for e3, j3 in board[r3]:\n                                if  j2 != j3 and j1 != j3:\n                                    max_value = fmax(e1 + e2 + e3, max_value)\n        return max_value\n",
    "submit_ts": "1723907621",
    "subm_id": "556326565"
}