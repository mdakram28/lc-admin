{
    "username": "udaykhemewar",
    "submission": "#include <vector>\n#include <climits>\nusing namespace std;\n\nclass CustomSegmentTree {\nprivate:\n    int size;\n    vector<int> tree;\n\n    // Construct the segment tree from the input array\n    void construct(const vector<int>& arr, int node, int start, int end) {\n        if (start == end) {\n            tree[node] = arr[start];\n        } else {\n            int mid = (start + end) / 2;\n            construct(arr, 2 * node + 1, start, mid);\n            construct(arr, 2 * node + 2, mid + 1, end);\n            tree[node] = tree[2 * node + 1] & tree[2 * node + 2];\n        }\n    }\n\n    // Query the range AND value in the segment tree\n    int rangeAndQuery(int node, int start, int end, int left, int right) {\n        if (right < start || end < left) {\n            return INT_MAX;\n        }\n        if (left <= start && end <= right) {\n            return tree[node];\n        }\n        int mid = (start + end) / 2;\n        int leftResult = rangeAndQuery(2 * node + 1, start, mid, left, right);\n        int rightResult = rangeAndQuery(2 * node + 2, mid + 1, end, left, right);\n        return leftResult & rightResult;\n    }\n\npublic:\n    // Constructor to initialize the segment tree\n    CustomSegmentTree(const vector<int>& arr) {\n        size = arr.size();\n        tree.resize(4 * size);\n        construct(arr, 0, 0, size - 1);\n    }\n\n    // Public query method to find the range AND value\n    int query(int left, int right) {\n        return rangeAndQuery(0, 0, size - 1, left, right);\n    }\n};\n\nclass Solution {\npublic:\n    // Method to find the minimum difference in the array based on the given k\n    int minimumDifference(vector<int>& nums, int k) {\n        int size = nums.size();\n        CustomSegmentTree segmentTree(nums);\n        int minDifference = INT_MAX;\n\n        for (int i = 0; i < size; i++) {\n            int left = i - 1;\n            int right = size - 1;\n            while (right - left > 1) {\n                int mid = (left + right) / 2;\n                if (segmentTree.query(i, mid) >= k) {\n                    left = mid;\n                } else {\n                    right = mid;\n                }\n            }\n            if (left != i - 1) {\n                minDifference = min(minDifference, abs(segmentTree.query(i, left) - k));\n            }\n            minDifference = min(minDifference, abs(k - segmentTree.query(i, right)));\n        }\n        return minDifference;\n    }\n};\n",
    "submit_ts": "1717300387",
    "subm_id": "1274842571"
}