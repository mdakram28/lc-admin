{
    "username": "anubhavanu2004",
    "submission": "#define ll long long\nclass Solution {\npublic:\n    void buildsegtree(ll ind,ll low,ll high,vector<ll> &segtree,vector<ll> &a){\n        if(low==high){\n            segtree[ind]=a[low];\n            return;\n        }\n        ll mid=low+(high-low)/2;\n        buildsegtree(2*ind+1,low,mid,segtree,a);\n        buildsegtree(2*ind+2,mid+1,high,segtree,a);\n        segtree[ind]=segtree[2*ind+1]&segtree[2*ind+2];\n    }\n\n    ll query(ll ind,ll low,ll high,ll l,ll r,vector<ll> &segtree,vector<ll> &a){\n        if(low>=l && high<=r){\n            return segtree[ind];\n        }\n        if(high<l || low>r) return INT_MAX; // return INT_MAX\n        ll mid=low+(high-low)/2;\n        ll left=query(2*ind+1,low,mid,l,r,segtree,a);\n        ll right=query(2*ind+2,mid+1,high,l,r,segtree,a);\n        return left&right;\n    }\n\n    long long countSubarrays(vector<int>& nums, int k) {\n        int n=nums.size();\n        vector<ll> a;\n        for(auto it:nums){\n            a.push_back(it);\n        }\n        vector<ll> segtree(4*n);\n        buildsegtree(0,0,n-1,segtree,a);\n        ll ans=0;\n        for(int l=0;l<n;l++){\n            ll low=l,high=n-1,mid;\n            ll r1=n;\n            while(low<=high){\n                mid=low+(high-low)/2;\n                ll num=query(0,0,n-1,l,mid,segtree,a);\n                if(num==k){\n                    r1=min(r1,mid);\n                }\n                if(num<=k){\n                    high=mid-1;\n                }\n                else{\n                    low=mid+1;\n                }\n            }\n            if(r1!=n){\n                low=l,high=n-1,mid;\n                ll r2=r1;\n                while(low<=high){\n                    mid=low+(high-low)/2;\n                    ll num=query(0,0,n-1,l,mid,segtree,a);\n                    if(num==k){\n                        r2=max(r2,mid);\n                    }\n                    if(num<k){\n                        high=mid-1;\n                    }\n                    else{\n                        low=mid+1;\n                    }\n                    // if(num==k){\n                    //     r2=min(r,mid);\n                    // }\n                    // if(num<=k){\n                    //     high=mid-1;\n                    // }\n                    // else{\n                    //     low=mid+1;\n                    // }\n                }\n                ans+=(r2-r1+1);\n            }\n        }\n        return ans;\n    }\n};",
    "submit_ts": "1720280232",
    "subm_id": "1311781673"
}