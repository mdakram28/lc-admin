{
    "username": "Abdul_Aziz_",
    "submission": "class Solution {\npublic:\n    int dist;\n    int maxDis(int u, int par, vector<vector<int>>& g) {\n        int d1 = 0, d2 = 0;\n        for (int &v: g[u]) {\n            if (v != par) {\n                int cur = maxDis(v, u, g);\n                if (cur > d1) {\n                    d2 = d1;\n                    d1 = cur;\n                }\n                else if (cur > d2) d2 = cur;\n            }\n        }\n        dist = max(dist, d1 + d2);\n        dist = max(dist, d1);\n        dist = max(dist, d2);\n        return max(d1, d2) + 1;\n    }\n    int diameter(vector<vector<int>>& e) {\n        int n = e.size() + 1;\n        vector <vector <int>> g(n);\n        for (auto i: e) {\n            g[i[0]].push_back(i[1]);\n            g[i[1]].push_back(i[0]);\n        }\n        dist = 0;\n        maxDis(0, 0, g);\n        return dist;\n    }\n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n        int dis1 = diameter(edges1);\n        int dis2 = diameter(edges2);\n        cout << dis1 << \" \" << dis2 << endl;\n        int ans = (dis1 + dis2) / 2 + 1;\n        if ((dis1&1) && (dis2 & 1 ^ 1)) ans = (dis1 + 1) / 2 + dis2 / 2 + 1; \n        if ((dis1&1^1) && (dis2 & 1)) ans = dis1 / 2 + (dis2 + 1) / 2 + 1;\n        if ((dis1 & 1) && (dis2 & 1)) ans = (dis1 + 1) / 2 + (dis2 + 1) / 2 + 1;\n        ans = max(ans, max(dis1, dis2));\n        return ans;\n    }\n};",
    "submit_ts": 1719717794.0
}