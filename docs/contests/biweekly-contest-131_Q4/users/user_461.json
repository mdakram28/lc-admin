{
    "username": "theeeeeeekhai",
    "submission": "typedef long long ll;\n\nclass SegmentTree{\npublic:\n    vector<ll> tree, lazy;\n    SegmentTree(int n){\n        tree.resize(4 * n);\n        lazy.resize(4 * n);\n    }\n\n    void buildTree(int idx, int low, int high, vector<int>& arr){\n        lazy[idx] = 0;\n        if(low == high){\n            tree[idx] = arr[low];\n            return;\n        }\n        int mid = (low + high) >> 1;\n        buildTree(2 * idx + 1, low, mid, arr);\n        buildTree(2 * idx + 2, mid + 1, high, arr);\n        tree[idx] = max(tree[2 * idx + 1], tree[2 * idx + 2]);\n    }\n\n    ll query(int idx, int low, int high, int l, int r){\n        if(lazy[idx] != 0){\n            tree[idx] += lazy[idx];\n            if(low != high){\n                lazy[2 * idx + 1] += lazy[idx];\n                lazy[2 * idx + 2] += lazy[idx];\n            }\n            lazy[idx] = 0;\n        }\n        if(r < low || high < l) return 0;\n        if(low >= l && high <= r) return tree[idx];\n        int mid = (low + high) >> 1;\n        ll left = query(2 * idx + 1, low, mid, l, r);\n        ll right = query(2 * idx + 2, mid + 1, high, l, r);\n        return max(left, right);\n    }\n\n    void update(int idx, int low, int high, int l, int r, int val){\n        if(lazy[idx] != 0){\n            tree[idx] += lazy[idx];\n            if(low != high){\n                lazy[2 * idx + 1] += lazy[idx];\n                lazy[2 * idx + 2] += lazy[idx];\n            }\n            lazy[idx] = 0;\n        }\n        if(r < low || high < l) return;\n        if(low >= l && high <= r){\n            tree[idx] += val;\n            if(low != high){\n                lazy[2 * idx + 1] += val;\n                lazy[2 * idx + 2] += val;\n            }\n            return;\n        }\n        int mid = (low + high) >> 1;\n        update(2 * idx + 1, low, mid, l, r, val);\n        update(2 * idx + 2, mid + 1, high, l, r, val);\n        tree[idx] = max(tree[2 * idx + 1], tree[2 * idx + 2]);\n    }\n};\n\nclass Solution {\npublic:\n    vector<bool> getResults(vector<vector<int>>& queries) {\n        int n = 1;\n        vector<int> v = {0};\n        for(auto& q: queries) {\n            if(q[0] == 1){\n                n++;\n                v.push_back(q[1]);\n            }\n        }\n        sort(v.begin(), v.end());\n        SegmentTree sg(n);\n        sg.buildTree(0, 0, n - 1, v);\n        set<int> z = {0};\n        vector<bool> ans;\n        for(auto& q: queries) {\n            if(q[0] == 1){\n                int idx = lower_bound(v.begin(), v.end(), q[1]) - v.begin();\n                auto it = z.upper_bound(q[1]);\n                int idx2 = n - 1;\n                if(it != z.end()) idx2 = lower_bound(v.begin(), v.end(), *it) - v.begin();\n                sg.update(0, 0, n - 1, idx + 1, idx2, -sg.query(0, 0, n - 1, idx, idx));\n                z.insert(q[1]);\n                // for(int i = 0; i < n; i++) {\n                //     cout << sg.query(0, 0, n - 1, i, i) << \" \";\n                //     }\n                // cout << endl;\n            }\n            else {\n                int x = q[1], sz = q[2];\n                int idx = upper_bound(v.begin(), v.end(), x) - v.begin() - 1;\n                auto it = prev(z.upper_bound(x));\n                int prev = *it;\n                ans.push_back(x - prev >= sz || sg.query(0, 0, n - 1, 0, idx) >= sz);\n                // for(int i = 0; i < n; i++) {\n                //     cout << sg.query(0, 0, n - 1, i, i) << \" \";\n                //     }\n                // cout << endl;\n                // cout << idx << \" \" << x - prev << \" \" << sg.query(0, 0, n - 1, 0, idx) << endl;\n            }\n        }\n        return ans;\n    }\n};",
    "submit_ts": 1716652044.0
}