{
    "username": "iivankon",
    "submission": "class Solution:\n    def minimumOperations(self, nums: List[int], target: List[int]) -> int:\n        for i in range(len(nums)):\n            nums[i] = target[i] - nums[i]\n            \n        # print(nums)\n        total = 0\n        \n        curr = [nums[0]]\n        i = 1\n        while i < len(nums):\n            if curr[-1] * nums[i] > 0:\n                curr.append(nums[i])\n            else:\n                total += self.process_sublist(curr[:])\n                curr = [nums[i]]\n            i += 1\n        total += self.process_sublist(curr[:])\n        return total\n    \n    def process_sublist(self, sublist):\n        # print(sublist)\n        sublist = [abs(val) for val in sublist]\n        \n        st = SegmentTree(sublist)\n        \n        ops = [0]\n        def count_ops(left, right, curr_level):\n            if left == right:\n                return 0\n            min_val, index = st.range_min(left, right)\n            # print(min_val, index, min_val - curr_level)\n            return min_val - curr_level + count_ops(left, index, min_val) + count_ops(index + 1, right, min_val)\n        \n        result = count_ops(0, len(sublist), 0)\n        # print('res', result)\n        return result\n        \n        \n        \nclass SegmentTree:\n    def __init__(self, arr):\n        self.n = len(arr)\n        self.tree = [0] * (2 * self.n)\n        self.build(arr)\n\n    def build(self, arr):\n        for i in range(self.n):\n            self.tree[self.n + i] = (arr[i], i)\n        for i in range(self.n - 1, 0, -1):\n            self.tree[i] = min(self.tree[i * 2], self.tree[i * 2 + 1])\n\n    def range_min(self, left, right):\n        left += self.n\n        right += self.n\n        min_val = (float('inf'), -1)\n        while left < right:\n            if left % 2:\n                min_val = min(min_val, self.tree[left])\n                left += 1\n            if right % 2:\n                right -= 1\n                min_val = min(min_val, self.tree[right])\n            left //= 2\n            right //= 2\n        return min_val",
    "submit_ts": "1721532417",
    "subm_id": "1327985338"
}