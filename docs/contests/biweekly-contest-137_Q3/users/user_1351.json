{
    "username": "udayleetcode",
    "submission": "class Solution {\n    public function maximumValueSum(array $board): int {\n        $m = count($board);\n        $n = count($board[0]);\n        $maxSum = PHP_INT_MIN;\n        $bestValues = array_fill(0, $m, array_fill(0, 3, PHP_INT_MIN));\n        $bestColumns = array_fill(0, $m, array_fill(0, 3, -1));\n\n        // Determine the top 3 values and their column indices for each row\n        for ($i = 0; $i < $m; ++$i) {\n            $colValues = [];\n            for ($j = 0; $j < $n; ++$j) {\n                $colValues[] = [$board[$i][$j], $j];\n            }\n            usort($colValues, function($a, $b) {\n                return $b[0] <=> $a[0];\n            });\n\n            for ($k = 0; $k < 3 && $k < count($colValues); ++$k) {\n                $bestValues[$i][$k] = $colValues[$k][0];\n                $bestColumns[$i][$k] = $colValues[$k][1];\n            }\n        }\n\n        // Evaluate combinations of three different rows\n        for ($r1 = 0; $r1 < $m; ++$r1) {\n            for ($r2 = $r1 + 1; $r2 < $m; ++$r2) {\n                for ($r3 = $r2 + 1; $r3 < $m; ++$r3) {\n                    for ($i = 0; $i < 3; ++$i) {\n                        for ($j = 0; $j < 3; ++$j) {\n                            if ($bestColumns[$r2][$j] === $bestColumns[$r1][$i]) continue;\n                            for ($k = 0; $k < 3; ++$k) {\n                                if ($bestColumns[$r3][$k] === $bestColumns[$r1][$i] || $bestColumns[$r3][$k] === $bestColumns[$r2][$j]) continue;\n\n                                $currentSum = $bestValues[$r1][$i] + $bestValues[$r2][$j] + $bestValues[$r3][$k];\n                                $maxSum = max($maxSum, $currentSum);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return $maxSum;\n    }\n}\n\n// Example usage\n$solution = new Solution();\n$board1 = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n];\n$board2 = [\n    [10, 20, 30],\n    [40, 50, 60],\n    [70, 80, 90]\n];\n$board3 = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n];\n\necho $solution->maximumValueSum($board1) . \"\\n\"; // Output: 15\necho $solution->maximumValueSum($board2) . \"\\n\"; // Output: 240\necho $solution->maximumValueSum($board3) . \"\\n\"; // Output: 15\n",
    "submit_ts": "1723910368",
    "subm_id": "1359227821"
}