{
    "username": "modelflat",
    "submission": "class Solution:\n    def shortestDistanceAfterQueries(self, n: int, queries: List[List[int]]) -> List[int]:\n        from sortedcontainers import SortedList\n        q = SortedList()\n        d = n - 1\n\n        sf = dict()\n        st = dict()\n\n        ans = []\n        for b, e in queries:\n            if b in sf and sf[b][1] > e:\n                pass\n            elif e in st and st[e][0] < b:\n                pass\n            else:\n                sf[b] = (b, e)\n                st[e] = (b, e)\n                i = q.bisect_left((b - 1, e))\n                to_remove = []\n                while i < len(q):\n                    v = q[i]\n                    if v[1] > e:\n                        break\n                    if v[0] >= b and v[0] < e:\n                        to_remove.append(v)\n                        d += (v[1] - v[0] - 1)\n                    i += 1\n                \n                for v in to_remove:\n                    q.remove(v)\n\n                q.add((b, e))\n                d -= (e - b - 1)\n            ans.append(d)\n\n        return ans\n\n    def shortestDistanceAfterQueries(self, n: int, queries: List[List[int]]) -> List[int]:\n        path = [1] * (n - 1)\n        ans = []\n        dist = n - 1\n        for b, e in queries:\n            if path[b] > e - b:\n                pass\n            elif path[b] == 0:\n                pass\n            else:\n                i = b\n                while i < e:\n                    nxt = path[i]\n                    \n                    if i > b:\n                        dist -= 1\n\n                    path[i] = 0\n                    i += nxt\n                path[b] = e - b\n            ans.append(dist)\n        \n        return ans\n            \n            ",
    "submit_ts": "1722743199",
    "subm_id": "1343786642"
}