{
    "username": "\u660e\u660e\u5c31",
    "submission": "class Solution {\n    public long maximumValueSum(int[][] board) {\n        int m = board.length, n = board[0].length;\n        Map<Integer, Long> map1 = new HashMap<>(); // \u9009\u53d6\u4e00\u4e2a\u7684\u6700\u5927\u503c\n        Map<Integer, Long> map2 = new HashMap<>(); // \u9009\u53d6\u4e24\u4e2a\u7684\u6700\u5927\u503c\n        for(int i = 0; i < n; i++){\n            map1.put(i, (long)Math.max(board[0][i], board[1][i]));\n        }\n        for(int x = 0; x < n; x++){\n            for(int y = x+1; y < n; y++){\n                map2.put(x * 1000 + y, (long)Math.max(board[0][x] + board[1][y], board[0][y]+board[1][x]));\n            }\n        }\n        long ans = Long.MIN_VALUE;\n        for(int i = 2; i < m; i++){\n            Tool tool = new Tool(board[i]);\n            for(Integer state: map2.keySet()){\n                int x = state / 1000, y = state % 1000;\n                int z = tool.getMaxIndexExclude(x, y);\n                ans  = Math.max(ans, board[i][z]+map2.get(state));\n            }\n            for(int x = 0; x < n; x++){\n                for(int y = x+1; y < n; y++){\n                    int state = x * 1000 + y;\n                    long old = map2.get(state);\n                    long value = Math.max(board[i][x] + map1.get(y), board[i][y]+map1.get(x));\n                    if(value > old){\n                        map2.put(state, value);\n                    }\n                }\n            }\n            for(int x = 0; x < n; x++){\n                if(board[i][x] > map1.get(x)){\n                    map1.put(x, (long)board[i][x]);\n                }\n            } \n        }\n        return ans;\n    }\n\n}\nclass Tool{\n    int[][] arr;\n    public Tool(int[] num){\n        int n = num.length;\n        arr = new int[n][2];\n        for(int i = 0; i < n; i++){\n            arr[i][0] = num[i];\n            arr[i][1] = i;\n        }\n        Arrays.sort(arr,(a, b)->{\n            if(a[0] == b[0]){\n                return 0;\n            }\n            if(a[0] < b[0]){\n                return -1;\n            }\n            return 1;\n        });\n    }\n    public int getMaxIndexExclude(int x){\n        for(int i = arr.length; i >= 0; i--){\n            if(arr[i][1] != x){\n                return arr[i][1];\n            }\n        }\n        return -1;\n    }\n    public int getMaxIndexExclude(int x, int y){\n        for(int i = arr.length-1; i >= 0; i--){\n            if(arr[i][1] != x && arr[i][1] != y){\n                return arr[i][1];\n            }\n        }\n        return -1;\n    }\n}",
    "submit_ts": "1723909509",
    "subm_id": "556336607"
}