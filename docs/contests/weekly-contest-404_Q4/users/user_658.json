{
    "username": "libkonstantin",
    "submission": "class Solution {\n\n    static class Graph {\n        int n, m;\n        int cnt;\n        int[] head;\n        int[] next;\n        int[] to;\n\n        int[] h;\n        int[] d;\n        int[] l;\n\n        Graph(int[][] edges) {\n            init(edges);\n        }\n\n        void add(int u, int v) {\n            to[cnt] = v;\n            next[cnt] = head[u];\n            head[u] = cnt++;\n        }\n\n        void init(int[][] edges) {\n            n = edges.length + 1;\n            cnt = 0;\n            head = new int[n];\n            Arrays.fill(head, -1);\n            m = (n - 1) * 2;\n            next = new int[m];\n            to = new int[m];\n            h = new int[n];\n            d = new int[n];\n            l = new int[n];\n\n            for (int[] edge : edges) {\n                int u = edge[0];\n                int v = edge[1];\n                add(u, v);\n                add(v, u);\n            }\n        }\n    }\n\n    void dfsHeights(Graph g, int u, int p) {\n        g.h[u] = 0;\n        for (int i = g.head[u]; i != -1; i = g.next[i]) {\n            int v = g.to[i];\n            if (v == p) {\n                continue;\n            }\n            dfsHeights(g, v, u);\n            g.h[u] = Math.max(g.h[u], g.h[v] + 1);\n        }\n    }\n\n    void dfsDiameters(Graph g, int u, int p, int dp) {\n        int h0 = 0;\n        int h1 = 0;\n        for (int i = g.head[u]; i != -1; i = g.next[i]) {\n            int v = g.to[i];\n            if (v == p) {\n                continue;\n            }\n            int h = g.h[v] + 1;\n            if (h > h0) {\n                h1 = h0;\n                h0 = h;\n            } else if (h > h1) {\n                h1 = h;\n            }\n        }\n        g.d[u] = Math.max(h0 + h1, h0 + dp);\n        g.l[u] = Math.max(h0, dp);\n\n        for (int i = g.head[u]; i != -1; i = g.next[i]) {\n            int v = g.to[i];\n            if (v == p) {\n                continue;\n            }\n            int hNotV = (g.h[v] + 1 == h0) ? h1 : h0;\n            dfsDiameters(g, v, u, Math.max(dp, hNotV) + 1);\n        }\n    }\n\n    void calcDiameters(Graph g) {\n        dfsHeights(g, 0, -1);\n        dfsDiameters(g, 0, -1, 0);\n    }\n\n    public int minimumDiameterAfterMerge(int[][] edges1, int[][] edges2) {\n        Graph g1 = new Graph(edges1);\n        calcDiameters(g1);\n        Graph g2 = new Graph(edges2);\n        calcDiameters(g2);\n\n        int dMax = Integer.MIN_VALUE;\n        int l1Min = Integer.MAX_VALUE;\n        for (int u = 0; u < g1.n; u++) {\n            dMax = Math.max(dMax, g1.d[u]);\n            l1Min = Math.min(l1Min, g1.l[u]);\n        }\n        int l2Min = Integer.MAX_VALUE;\n        for (int u = 0; u < g2.n; u++) {\n            dMax = Math.max(dMax, g2.d[u]);\n            l2Min = Math.min(l2Min, g2.l[u]);\n        }\n\n        return Math.max(dMax, l1Min + l2Min + 1);\n    }\n}",
    "submit_ts": 1719719747.0
}