{
    "username": "Iakobos",
    "submission": "class Solution {\n    private static final int MOD = 1_000_000_007;\n    private static final int MAX_VAL = 50;\n\n    public int countOfPairs(int[] nums) {\n        int n = nums.length;\n\n        // Initialize DP tables\n        int[][] previous = new int[MAX_VAL + 1][MAX_VAL + 1];\n        int[][] current = new int[MAX_VAL + 1][MAX_VAL + 1];\n\n        // Initialize the first position\n        for (int j = 0; j <= nums[0]; j++) {\n            int k = nums[0] - j;\n            if (k >= 0 && k <= MAX_VAL) {\n                previous[j][k] = 1;\n            }\n        }\n\n        // Fill the dp table\n        for (int i = 1; i < n; i++) {\n            // Reset current DP table\n            for (int j = 0; j <= MAX_VAL; j++) {\n                for (int k = 0; k <= MAX_VAL; k++) {\n                    current[j][k] = 0;\n                }\n            }\n            \n            // Compute prefix sums for previous DP table\n            int[][] prefixSum = new int[MAX_VAL + 1][MAX_VAL + 1];\n            \n            for (int j = 0; j <= MAX_VAL; j++) {\n                for (int k = 0; k <= MAX_VAL; k++) {\n                    prefixSum[j][k] = previous[j][k];\n                    if (j > 0) {\n                        prefixSum[j][k] = (prefixSum[j][k] + prefixSum[j - 1][k]) % MOD;\n                    }\n                    if (k > 0) {\n                        prefixSum[j][k] = (prefixSum[j][k] + prefixSum[j][k - 1]) % MOD;\n                    }\n                    if (j > 0 && k > 0) {\n                        prefixSum[j][k] = (prefixSum[j][k] - prefixSum[j - 1][k - 1] + MOD) % MOD;\n                    }\n                }\n            }\n\n            // Update current DP table\n            for (int j = 0; j <= nums[i]; j++) {\n                int k = nums[i] - j;\n                if (k >= 0 && k <= MAX_VAL) {\n                    current[j][k] = prefixSum[j][MAX_VAL];\n                    if (k > 0) {\n                        current[j][k] = (current[j][k] - prefixSum[j][k - 1] + MOD) % MOD;\n                    }\n                }\n            }\n\n            // Swap the DP tables\n            int[][] temp = previous;\n            previous = current;\n            current = temp;\n        }\n\n        // Sum up all ways to fill the last row\n        int result = 0;\n        for (int j = 0; j <= nums[n - 1]; j++) {\n            int k = nums[n - 1] - j;\n            if (k >= 0 && k <= MAX_VAL) {\n                result = (result + previous[j][k]) % MOD;\n            }\n        }\n\n        return result;\n    }\n}\n",
    "submit_ts": "1723346031",
    "subm_id": "1351568671"
}