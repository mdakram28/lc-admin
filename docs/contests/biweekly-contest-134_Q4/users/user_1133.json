{
    "username": "MrPerfect18",
    "submission": "\n\nusing namespace std;\n\nclass Solution {\npublic:\n    long long countSubarrays(vector<int>& nums, int k) {\n        unordered_map<long long, long long> prevResult;\n        long long count = 0;\n\n        for (int i = 0; i < nums.size(); ++i) {\n            count += countSubarraysWithCurrent(nums, i, k, prevResult);\n            updatePrevResult(prevResult, nums[i]);\n        }\n\n        return count;\n    }\n\nprivate:\n    long long countSubarraysWithCurrent(const vector<int>& nums, int currentIndex, int k, unordered_map<long long, long long>& prevResult) {\n        long long subarrayCount = 0;\n        unordered_map<long long, long long> currResult;\n\n        if (nums[currentIndex] == k) {\n            subarrayCount++;\n        }\n        currResult[nums[currentIndex]] = 1;\n\n        for (auto &[val, freq] : prevResult) {\n            long long newAndResult = val & nums[currentIndex];\n            if (newAndResult == k) {\n                subarrayCount += freq;                \n            }\n            currResult[newAndResult] += freq;\n        }\n\n        return subarrayCount;\n    }\n\n    void updatePrevResult(unordered_map<long long, long long>& prevResult, int num) {\n        unordered_map<long long, long long> newPrevResult;\n        for (auto &[val, freq] : prevResult) {\n            newPrevResult[val & num] += freq;\n        }\n        newPrevResult[num]++;\n        prevResult = newPrevResult;\n    }\n};\n",
    "submit_ts": "1720278761",
    "subm_id": "1311723101"
}