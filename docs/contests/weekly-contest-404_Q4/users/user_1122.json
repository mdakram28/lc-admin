{
    "username": "eshaansodhi",
    "submission": "class Graph\n{\npublic:\n    int V; // No. of vertices\n    list<int> *adj;\n    vector<int> degree;\n\n    Graph(int V)\n    {\n        this->V = V;\n        adj = new list<int>[V];\n        degree.resize(V, 0);\n    }\n\n    void addEdge(int v, int w)\n    {\n        adj[v].push_back(w);\n        adj[w].push_back(v);\n        degree[v]++;\n        degree[w]++;\n    }\n\n    vector<int> rootForMinimumHeight()\n    {\n        queue<int> q;\n        for (int i = 0; i < V; i++)\n            if (degree[i] == 1)\n                q.push(i);\n\n        int remainingVertices = V;\n        while (remainingVertices > 2)\n        {\n            int leafCount = q.size();\n            remainingVertices -= leafCount;\n\n            for (int i = 0; i < leafCount; i++)\n            {\n                int t = q.front();\n                q.pop();\n\n                for (auto j : adj[t])\n                {\n                    degree[j]--;\n                    if (degree[j] == 1)\n                        q.push(j);\n                }\n            }\n        }\n\n        vector<int> res;\n        while (!q.empty())\n        {\n            res.push_back(q.front());\n            q.pop();\n        }\n        return res;\n    }\n\n    int findTreeDiameter()\n    {\n        vector<int> dist(V, -1);\n        queue<int> q;\n\n        q.push(0);\n        dist[0] = 0;\n\n        int farthestNode = 0;\n\n        while (!q.empty())\n        {\n            int node = q.front();\n            q.pop();\n\n            for (int neighbor : adj[node])\n            {\n                if (dist[neighbor] == -1)\n                {\n                    dist[neighbor] = dist[node] + 1;\n                    q.push(neighbor);\n                    if (dist[neighbor] > dist[farthestNode])\n                        farthestNode = neighbor;\n                }\n            }\n        }\n\n        dist.assign(V, -1);\n        q.push(farthestNode);\n        dist[farthestNode] = 0;\n\n        int diameter = 0;\n        while (!q.empty())\n        {\n            int node = q.front();\n            q.pop();\n\n            for (int neighbor : adj[node])\n            {\n                if (dist[neighbor] == -1)\n                {\n                    dist[neighbor] = dist[node] + 1;\n                    q.push(neighbor);\n                    diameter = max(diameter, dist[neighbor]);\n                }\n            }\n        }\n\n        return diameter;\n    }\n};\n\nclass Solution\n{\npublic:\n    int minimumDiameterAfterMerge(vector<vector<int>> &edges1, vector<vector<int>> &edges2)\n    {\n        int n = edges1.size() + 1;\n        int m = edges2.size() + 1;\n        \n        if(n==1 && m==1){\n            return 1;\n        }\n        Graph tree1(n),tree2(m);\n\n        for (const auto &edge : edges1)\n        {\n            tree1.addEdge(edge[0], edge[1]);\n        }\n\n        for (const auto &edge : edges2)\n        {\n            tree2.addEdge(edge[0], edge[1]);\n        }\n        \n        if(n==1){\n            return (tree2.findTreeDiameter()+1)/2+1;\n        }else if(m==1){\n            return (tree1.findTreeDiameter()+1)/2+1;\n            \n        }\n\n        vector<int> roots1 = tree1.rootForMinimumHeight();\n        vector<int> roots2 = tree2.rootForMinimumHeight();\n\n        int minDiameter = INT_MAX;\n\n        for (int r1 : roots1)\n        {\n            for (int r2 : roots2)\n            {\n                Graph mergedTree(n + m);\n                \n                for (const auto &edge : edges1)\n                {\n                    mergedTree.addEdge(edge[0], edge[1]);\n                }\n\n                for (const auto &edge : edges2)\n                {\n                    mergedTree.addEdge(edge[0] + n, edge[1] + n);\n                }\n\n                mergedTree.addEdge(r1, r2 + n);\n\n                int currentDiameter = mergedTree.findTreeDiameter();\n                minDiameter = min(minDiameter, currentDiameter);\n            }\n        }\n\n        return minDiameter;\n    }\n};",
    "submit_ts": 1719719408.0
}