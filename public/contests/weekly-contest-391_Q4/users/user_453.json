{
    "username": "_tim",
    "submission": "void add(map<int, int>& mmap, int k) {\n    if (mmap.contains(k)) {\n        mmap[k]++;\n    } else {\n        mmap[k] = 1;\n    }\n}\n\nvoid del(map<int, int>& mmap, int k) {\n    mmap[k]--;\n    if (mmap[k] == 0) {\n        mmap.erase(k);\n    }\n}\n\nint mx(map<int, int>& mmap) {\n    return mmap.rbegin()->first - mmap.begin()->first;\n}\n\nclass Solution {\npublic:\n    int minimumDistance(vector<vector<int>>& ps) {\n        int n = (int)ps.size();\n        map<int, int> a, b, c, d;\n        for (int i = 0; i < n; i++) {\n            auto& p = ps[i];\n            add(a, p[0] + p[1]);\n            add(b, p[0] - p[1]);\n            add(c, -p[0] + p[1]);\n            add(d, -p[0] - p[1]);\n        }\n        int answer = 2e8 + 100;\n        for (int i = 0; i < n; i++) {\n            int cur = 0;\n            auto& p = ps[i];\n            del(a, p[0] + p[1]);\n            del(b, p[0] - p[1]);\n            del(c, -p[0] + p[1]);\n            del(d, -p[0] - p[1]);\n            cur = max(cur, mx(a));\n            cur = max(cur, mx(b));\n            cur = max(cur, mx(c));\n            cur = max(cur, mx(d));\n            answer = min(answer, cur);\n            add(a, p[0] + p[1]);\n            add(b, p[0] - p[1]);\n            add(c, -p[0] + p[1]);\n            add(d, -p[0] - p[1]);\n        }\n        return answer;\n    }\n};"
}