{
    "username": "hacch141",
    "submission": "class Solution {\npublic:\n    bool isReachable(vector<int>& c1, vector<int> c2) {\n        long long dx = c1[0] - c2[0];\n        long long dy = c1[1] - c2[1];\n        long long r1 = c1[2], r2 = c2[2];\n        return (r1 + r2) * (r1 + r2) >= dx * dx + dy * dy;\n    }\n    \n    bool isBottomRight(vector<int>& c1, int X, int Y) {\n        return (c1[1] - c1[2] <= 0 || c1[0] + c1[2] >= X);\n    }\n    \n    bool isTopLeft(vector<int>& c1, int X, int Y) {\n        return (c1[1] + c1[2] >= Y || c1[0] - c1[2] <= 0);\n    }\n    \n    bool canReachCorner(int X, int Y, vector<vector<int>>& circles) {\n        unordered_map<int, vector<int>> adj;\n        int n = circles.size();\n        queue<int> q;\n        vector<bool> vis(n, false);\n        \n        for (int i = 0; i < n; ++i) {\n            if (isReachable(circles[i], {0, 0, 0}) || isReachable(circles[i], {X, Y, 0})) {\n                return false;\n            }\n            if (isBottomRight(circles[i], X, Y)) {\n                q.push(i);\n                vis[i] = true;\n            }\n            for (int j = i + 1; j < n; ++j) {\n                if (isReachable(circles[i], circles[j])) {\n                    adj[i].push_back(j);\n                    adj[j].push_back(i);\n                }\n            }\n        }\n        \n        while (!q.empty()) {\n            int u = q.front();\n            q.pop();\n            if (isTopLeft(circles[u], X, Y)) return false;\n            for (int v : adj[u]) {\n                if (!vis[v]) {\n                    q.push(v);\n                    vis[v] = true;\n                }\n            }\n        }\n        \n        return true;\n    }\n};\n",
    "submit_ts": "1722137396",
    "subm_id": "1335762598"
}