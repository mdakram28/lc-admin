{
    "username": "Maverickkk",
    "submission": "from typing import List\n\nclass TrieVertex:\n    def __init__(self):\n        self.children = [None] * 26\n        self.value = float('inf')\n        self.isEndOfWord = False\n\nclass TrieTree:\n    def __init__(self):\n        self.root = TrieVertex()\n\n    def addWord(self, word: str, cost: int):\n        node = self.root\n        for c in word:\n            index = ord(c) - ord('a')\n            if not node.children[index]:\n                node.children[index] = TrieVertex()\n            node = node.children[index]\n        node.value = min(cost, node.value)\n        node.isEndOfWord = True\n\nclass Solution:\n    def minimumCost(self, target: str, words: List[str], costs: List[int]) -> int:\n        trie = TrieTree()\n        length = len(target)\n        minimumCost = [float('inf')] * (length + 1)\n\n        for i in range(len(words)):\n            trie.addWord(words[i], costs[i])\n\n        minimumCost[0] = 0\n\n        for i in range(length):\n            if minimumCost[i] == float('inf'):\n                continue\n\n            node = trie.root\n            for j in range(i, length):\n                c = target[j]\n                index = ord(c) - ord('a')\n                if not node.children[index]:\n                    break\n                node = node.children[index]\n                if node.isEndOfWord:\n                    minimumCost[j + 1] = min(minimumCost[j + 1], minimumCost[i] + node.value)\n\n        return minimumCost[length] if minimumCost[length] != float('inf') else -1\n",
    "submit_ts": "1720322168",
    "subm_id": "1312342545"
}