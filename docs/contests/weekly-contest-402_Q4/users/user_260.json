{
    "username": "democoffee",
    "submission": "class Solution:\n    def build(self, seg: list[int], nums: list[int], cur, l, r):\n        if l == r:\n            seg[cur] = 0\n            return\n\n        le = (l + r) // 2\n        lc, rc = cur * 2, cur * 2 + 1\n        self.build(seg, nums, lc, l, le)\n        self.build(seg, nums, rc, le+1, r)\n        v = 0\n        if le > l and nums[le] > nums[le-1] and nums[le] > nums[le+1]:\n            v += 1\n        if le + 1 < r and nums[le+1] > nums[le] and nums[le+1] > nums[le+2]:\n            v += 1\n\n        seg[cur] = seg[lc] + seg[rc] + v\n\n    def query(self, seg: list[int], nums: list[int], cur, l, r, ql, qr) -> int:\n        if l == ql and r == qr:\n            return seg[cur]\n        le = (l + r) // 2\n        lc, rc = cur * 2, cur * 2 + 1\n        if qr <= le:\n            return self.query(seg, nums, lc, l, le, ql, qr)\n        elif ql > le:\n            return self.query(seg, nums, rc, le+1, r, ql, qr)\n        lv = self.query(seg, nums, lc, l, le, ql, le)\n        rv = self.query(seg, nums, rc, le+1, r, le+1, qr)\n\n        v = 0\n        if le > ql and nums[le] > nums[le-1] and nums[le] > nums[le+1]:\n            v += 1\n        if le + 1 < qr and nums[le+1] > nums[le] and nums[le+1] > nums[le+2]:\n            v += 1\n        return lv + rv + v\n\n    def update(self, seg: list[int], nums: list[int], cur, l, r, p, v):\n        if l == p and r == p:\n            nums[p] = v\n            seg[cur] = 0\n            return\n        le = (l + r) // 2\n        lc, rc = cur * 2, cur * 2 + 1\n        if p <= le:\n            self.update(seg, nums, lc, l, le, p, v)\n        else:\n            self.update(seg, nums, rc, le+1, r, p, v)\n\n        v = 0\n        if le > l and nums[le] > nums[le-1] and nums[le] > nums[le+1]:\n            v += 1\n        if le + 1 < r and nums[le+1] > nums[le] and nums[le+1] > nums[le+2]:\n            v += 1\n        seg[cur] = seg[lc] + seg[rc] + v\n\n    def countOfPeaks(self, nums: list[int], queries: list[list[int]]) -> list[int]:\n        sz = len(nums)\n        ssz = sz * 4 + 10\n        seg = [0] * ssz\n        self.build(seg, nums, 1, 0, sz-1)\n\n        ans = []\n        for t, a, b in queries:\n            if t == 1:\n                ans.append(self.query(seg, nums, 1, 0, sz-1, a, b))\n            else:\n                self.update(seg, nums, 1, 0, sz-1, a, b)\n        return ans\n",
    "submit_ts": 1718506976.0
}