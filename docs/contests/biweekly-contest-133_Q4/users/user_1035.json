{
    "username": "adi_tyarai",
    "submission": "class Solution {\npublic:\n    const int MOD = 1e9 + 7;\n    const int MAX_INV = 400;\n    int numberOfPermutations(int n, vector<vector<int>>& reqs) {\n        map<int, int> reqMap;\n        for (const auto& req : reqs) {\n            reqMap[req[0] + 1] = req[1];\n        }\n\n        vector<std::vector<long>> dp(n + 1, vector<long>(405, 0));\n        dp[0][0] = 1;\n\n        for (int len = 1; len <= n; ++len) {\n            for (int inv = 0; inv <= MAX_INV; ++inv) {\n                for (int pos = 0; pos < len; ++pos) {\n                    int prevInv = inv - pos;\n                    if (prevInv >= 0) {\n                        dp[len][inv] = (dp[len][inv] + dp[len - 1][prevInv]) % MOD;\n                    }\n                }\n            }\n\n            if (reqMap.find(len) != reqMap.end()) {\n                for (int inv = 0; inv <= 400; ++inv) {                    \n                    dp[len][inv] = inv != reqMap[len] ? 0 : dp[len][inv];\n                }\n            }\n        }\n\n        int res = 0;\n        for (auto count : dp[n]) {\n            res = (res%MOD + count%MOD) % MOD;\n        }\n\n        return res;\n    }\n};\n\n",
    "submit_ts": 1719071557.0
}