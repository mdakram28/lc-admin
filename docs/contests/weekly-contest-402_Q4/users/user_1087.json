{
    "username": "randytanpty",
    "submission": "class Solution {\n    public class SegTree{\n        private SegTree left,right;\n        private int start,end,count;\n        public SegTree(int start, int end){\n            this.start = start ;\n            this.end = end;\n            this.count = 0;\n            this.left = null;\n            this.right = null;\n        }\n    }\n    SegTree root;\n    public List<Integer> countOfPeaks(int[] nums, int[][] queries) {\n        int n = nums.length;\n        root = new SegTree(0, n - 1);\n        for (int i = 1; i < n - 1; ++i) {\n            if (nums[i] > nums[i - 1] && nums[i] > nums[i + 1]) insert(i, root, 1);\n        }\n        \n        List<Integer> ans = new ArrayList<>();\n        for (int[] q : queries) {\n            if (q[0] == 1) {\n                int left = q[1], right = q[2];\n                if (left + 1 >= right) {\n                    ans.add(0);\n                } else {\n                    ans.add(query(root, left + 1, right - 1));\n                }\n            } else {\n                int idx = q[1], val = q[2];\n                if (nums[idx] == val) continue;\n                //me - 1\n                if (idx - 1 >= 1) {\n                   if (nums[idx - 1] > nums[idx - 2] && nums[idx - 1] > nums[idx]) {\n                       if (nums[idx - 1] <= val) insert(idx - 1, root, -1);\n                   } else {\n                       if (nums[idx - 1] > nums[idx - 2] && nums[idx - 1] > val) insert(idx - 1, root, 1);\n                   }\n                }\n                //me + 1\n                if (idx + 1 <= n - 2) {\n                    if (nums[idx + 1] > nums[idx + 2] && nums[idx + 1] > nums[idx]) {\n                       if (nums[idx + 1] <= val) insert(idx + 1, root, -1);\n                    } else {\n                       if (nums[idx + 1] > nums[idx + 2] && nums[idx + 1] > val) insert(idx + 1, root, 1); \n                    }\n                }\n                // me\n                if (idx > 0 && idx < n - 1) {\n                    if (nums[idx] > nums[idx - 1] && nums[idx] > nums[idx + 1]) {\n                        if (val <= nums[idx - 1] || val <= nums[idx + 1]) insert(idx, root, -1);\n                    } else {\n                        if (val > nums[idx - 1] && val > nums[idx + 1]) insert(idx, root, 1);\n                    }\n                }\n                nums[idx] = val;\n            }\n        }\n        return ans;\n    }\n    \n    private void insert(int me, SegTree step, int offset) {\n        step.count += offset;\n        if (step.start == step.end) return;\n        int mid = step.start + (step.end - step.start) / 2;\n        if (step.left == null) step.left = new SegTree(step.start, mid);\n        if (step.right == null) step.right = new SegTree(mid + 1, step.end);\n        if (me <= mid) insert(me, step.left, offset);\n        else insert(me, step.right, offset);\n    }\n    \n    private int query(SegTree step, int start, int end){\n        if (step == null) return 0;\n        if (step.start == start && step.end == end) return step.count;\n\n        int mid = step.start + (step.end - step.start) / 2;\n        if (end <= mid) return query(step.left, start, end);\n        if (start >= mid + 1) return query(step.right, start, end);\n        return query(step.left, start, mid) + query(step.right, mid + 1, end);\n    }\n}",
    "submit_ts": "1718508907",
    "subm_id": "1289694305"
}