{
    "username": "123GJWEQ2",
    "submission": "from sortedcontainers import SortedList\n\nclass Solution:\n    def countOfPeaks(self, nums: List[int], queries: List[List[int]]) -> List[int]:\n        ans = []\n        peaks = SortedList()\n        nums.insert(0, float(\"inf\"))\n        nums.append(float(\"inf\"))\n        status = [[False, False]]\n        \n        for x in range(1, len(nums) - 1):\n            cur_stat = [False, False]\n            \n            if nums[x - 1] < nums[x]:\n                cur_stat[0] = True\n            if nums[x + 1] < nums[x]:\n                cur_stat[1] = True\n                \n            status.append(cur_stat)\n            if sum(cur_stat) == 2:\n                peaks.add(x)\n            \n            \n        status.append([False, False])\n        \n        for (thing, l, r) in queries:\n            if thing == 2:\n                new_num = r\n                ind = l + 1\n                \n                if sum(status[ind]) == 2:\n                    peaks.remove(ind)\n                if sum(status[ind - 1]) == 2:\n                    peaks.remove(ind - 1)\n                if sum(status[ind + 1]) == 2:\n                    peaks.remove(ind + 1)\n                \n                cur_stat = [False, False]\n                if nums[ind - 1] < new_num:\n                    cur_stat[0] = True\n                elif nums[ind - 1] > new_num:\n                    status[ind - 1][1] = True\n                    \n                if nums[ind - 1] <= new_num:\n                    status[ind - 1][1] = False\n                if nums[ind + 1] <= new_num:\n                    status[ind + 1][0] = False\n                    \n                if nums[ind + 1] < new_num:\n                    cur_stat[1] = True\n                elif nums[ind + 1] > new_num:\n                    status[ind + 1][0] = True\n                \n                status[ind] = cur_stat\n                nums[ind] = new_num\n                    \n                if sum(cur_stat) == 2:\n                    peaks.add(ind)\n                if sum(status[ind - 1]) == 2:\n                    peaks.add(ind - 1)\n                if sum(status[ind + 1]) == 2:\n                    peaks.add(ind + 1)\n                \n            else:\n                left, right = l + 1, r + 1\n                ans.append(max(peaks.bisect_right(right - 1) - peaks.bisect_left(left + 1), 0))\n                \n        return ans",
    "submit_ts": 1718506703.0
}