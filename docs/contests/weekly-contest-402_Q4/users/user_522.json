{
    "username": "anna-hcj",
    "submission": "/**\n * @param {number[]} nums\n * @param {number[][]} queries\n * @return {number[]}\n */\nvar countOfPeaks = function(nums, queries) {\n  let n = nums.length, segTree = new SegmentTree(n);\n  for (let i = 0; i < n; i++) {\n    let isPeak = i > 0 && i < n && nums[i] > nums[i - 1] && nums[i] > nums[i + 1];\n    if (isPeak) {\n      segTree.update(i, 1);\n    }\n  }\n  let ans = [];\n  for (let [type, ...args] of queries) {\n    if (type === 1) {\n      let [l, r] = args;\n      ans.push(segTree.sumRange(l + 1, r - 1));\n    } else {\n      let [index, val] = args;\n      nums[index] = val;\n      let isPeak = index > 0 && index < n && nums[index] > nums[index - 1] && nums[index] > nums[index + 1];\n      segTree.update(index, isPeak ? 1 : 0);\n      let affected = [index - 1, index + 1];\n      for (let i of affected) {\n        let isPeak = i > 0 && i < n && nums[i] > nums[i - 1] && nums[i] > nums[i + 1];\n        segTree.update(i, isPeak ? 1 : 0);\n      }\n    }\n  }\n  return ans;\n};\n\nclass SegmentTree {\n  constructor(n) {\n    this.size = n;\n    this.segTree = Array(n * 2).fill(0);\n  }\n  update(index, val) {\n    let n = this.size, idx = index + n;\n    this.segTree[idx] = val;\n    idx = Math.floor(idx / 2);\n\n    while (idx > 0) {\n      this.segTree[idx] = this.segTree[idx * 2] + this.segTree[idx * 2 + 1];\n      idx = Math.floor(idx / 2);\n    }\n  }\n  sumRange(left, right) {\n    if (left > right) return 0;\n    let n = this.size, sum = 0;\n    let left_idx = left + n, right_idx = right + n;\n    // left must be even, right must be odd\n    // when left is odd or right is even, this indicates partial coverage. \n    // in other words, the parent node will be covering a range outside of the range we are looking for.\n    // so, we need to take the partial sum and move the pointers so that it has full coverage.\n    while (left_idx <= right_idx) {\n      if (left_idx % 2 === 1) sum += this.segTree[left_idx++];\n      if (right_idx % 2 === 0) sum += this.segTree[right_idx--];\n      left_idx = Math.floor(left_idx / 2);\n      right_idx = Math.floor(right_idx / 2);\n    }\n    return sum;\n  }\n}",
    "submit_ts": "1718507172",
    "subm_id": "1289643373"
}