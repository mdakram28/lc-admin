{
    "username": "user7353rp",
    "submission": "class Solution:\n    def maximumValueSum(self, board: List[List[int]]) -> int:\n        # place three rooks that do not attack each other\n        # return max sum of cell values that they can be placed\n        # 100x100, w/ 3 rooks\n\n        # take 3 best from each row\n        # take 3 best from each column\n        # overlap is the answer?\n        rows = []\n        rowBest = set()\n        for i, row in enumerate(board):\n            best1, ind1 = float('-inf'), -1\n            best2, ind2 = float('-inf'), -1\n            best3, ind3 = float('-inf'), -1\n            for ind, val in enumerate(row):\n                if val >= best1:\n                    best3, ind3 = best2, ind2\n                    best2, ind2 = best1, ind1\n                    best1, ind1 = val, ind\n                elif val >= best2:\n                    best3, ind3 = best2, ind2\n                    best2, ind2 = val, ind\n                elif val >= best3:\n                    best3, ind3 = val, ind\n            rowBest.add((best1, i, ind1))\n            rowBest.add((best2, i, ind2))\n            rowBest.add((best3, i, ind3))\n        board2 = [[board[j][i] for j in range(len(board))] for i in range(len(board[0]))]\n        colBest = set()\n        for i, row in enumerate(board2):\n            best1, ind1 = float('-inf'), -1\n            best2, ind2 = float('-inf'), -1\n            best3, ind3 = float('-inf'), -1\n            for ind, val in enumerate(row):\n                if val >= best1:\n                    best3, ind3 = best2, ind2\n                    best2, ind2 = best1, ind1\n                    best1, ind1 = val, ind\n                elif val >= best2:\n                    best3, ind3 = best2, ind2\n                    best2, ind2 = val, ind\n                elif val >= best3:\n                    best3, ind3 = val, ind\n            colBest.add((best1, ind1, i))\n            colBest.add((best2, ind2, i))\n            colBest.add((best3, ind3, i))\n        actualBest = set()\n        for i in rowBest:\n            if i in colBest:\n                actualBest.add(i)\n        # actualBest is max length 9\n        # from these 9 try every combination\n        best = float('-inf')\n        actual = list(actualBest)\n        for i in range(len(actual)):\n            for j in range(i + 1, len(actual)):\n                for k in range(j + 1, len(actual)):\n                    a, ai, aj = actual[i]\n                    b, bi, bj = actual[j]\n                    c, ci, cj = actual[k]\n                    if ai != bi and ai != ci and bi != ci:\n                        if aj != bj and aj != cj and bj != cj:\n                            best = max(best, a + b + c)\n        return best\n",
    "submit_ts": "1723908673",
    "subm_id": "1359162431"
}