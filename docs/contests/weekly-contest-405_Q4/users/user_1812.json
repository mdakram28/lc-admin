{
    "username": "Tarun_k456",
    "submission": "\nstruct Node {\n    Node* links[26] = {};\n    vector<int> endWordIndices;\n\n    bool containsKey(char ch) {\n        return links[ch - 'a'] != nullptr;\n    }\n\n    void put(char ch, Node* node) {\n        links[ch - 'a'] = node;\n    }\n\n    Node* get(char ch) {\n        return links[ch - 'a'];\n    }\n\n    void addWordIndex(int index) {\n        endWordIndices.push_back(index);\n    }\n\n    const vector<int>& getWordIndices() const {\n        return endWordIndices;\n    }\n};\n\nclass Trie {\nprivate:\n    Node* root;\n\npublic:\n    Trie() {\n        root = new Node();\n    }\n\n    void insert(const string& word, int index) {\n        Node* node = root;\n        for (char ch : word) {\n            if (!node->containsKey(ch)) {\n                node->put(ch, new Node());\n            }\n            node = node->get(ch);\n        }\n        node->addWordIndex(index);\n    }\n\n    Node* getRoot() {\n        return root;\n    }\n};\n\nclass Solution {\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int n = target.length();\n        vector<int> dp(n + 1, INT_MAX);\n        dp[0] = 0;\n\n        Trie trie;\n        for (int i = 0; i < words.size(); ++i) {\n            trie.insert(words[i], i);\n        }\n\n        Node* root = trie.getRoot();\n\n        for (int i = 0; i < n; ++i) {\n            if (dp[i] == INT_MAX) continue;\n\n            Node* node = root;\n            for (int j = i; j < n; ++j) {\n                if (node->containsKey(target[j])) {\n                    node = node->get(target[j]);\n                    for (int wordIndex : node->getWordIndices()) {\n                        int wordLength = words[wordIndex].length();\n                        if (i + wordLength <= n) {\n                            dp[i + wordLength] = min(dp[i + wordLength], dp[i] + costs[wordIndex]);\n                        }\n                    }\n                } else {\n                    break;\n                }\n            }\n        }\n\n        return dp[n] == INT_MAX ? -1 : dp[n];\n    }\n};",
    "submit_ts": "1720324289",
    "subm_id": "1312395964"
}