{
    "username": "Wilsano",
    "submission": "class Solution {\npublic:\n    bool not_valid(bool x1, bool x2, bool y1, bool y2){\n        if(x1 && x2){\n            return true;\n        }\n        if(y1 && y2){\n            return true;\n        }\n        if(x1 && y1){\n            return true;\n        }\n        if(x2 && y2){\n            return true;\n        }\n        return false;\n    }\n\n    bool overlap(int i, int j, const vector<vector<int>>& circles){\n        double dx = abs(circles[i][0] - circles[j][0]);\n        double dy = abs(circles[i][1] - circles[j][1]);\n        double dist = sqrt(dx * dx + dy * dy);\n        int rx = circles[i][2];\n        int ry = circles[j][2];\n        return dist <= rx + ry;\n    }\n\n    bool canReachCorner(int X, int Y, vector<vector<int>>& circles) {\n        int n = circles.size();\n        vector<vector<int>> graph(n);\n        for(int i = 0; i < n; ++i){\n            for(int j = i + 1; j < n; ++j){\n                if(overlap(i, j, circles)){\n                    graph[i].push_back(j);\n                    graph[j].push_back(i);\n                }\n            }\n        }\n        \n        vector<bool> overlap_x1(n, false);\n        vector<bool> overlap_x2(n, false);\n        vector<bool> overlap_y1(n, false);\n        vector<bool> overlap_y2(n, false);\n        for(int i = 0; i < n; ++i){\n            double x = circles[i][0];\n            double y = circles[i][1];\n            double dist = sqrt(x * x + y * y);\n            int r = circles[i][2];\n            \n            overlap_x1[i] = x + r >= X;\n            overlap_y1[i] = y + r >= Y;\n\n            overlap_x2[i] = x - r <= 0;\n            overlap_y2[i] = y - r <= 0;\n\n            if(dist <= r){\n                return false;\n            }\n        }\n        \n        vector<bool> used(n, false);\n        for(int i = 0; i < n; ++i){\n            if(used[i]){\n                continue;\n            }\n            \n            bool x1 = false;\n            bool x2 = false;\n            bool y1 = false;\n            bool y2 = false;\n\n            // bfs\n            used[i] = true;\n            queue<int> queue({i});\n            while(!queue.empty()){\n                int u = queue.front();\n                queue.pop();\n\n                x1 |= overlap_x1[u];\n                x2 |= overlap_x2[u];\n                y1 |= overlap_y1[u];\n                y2 |= overlap_y2[u];\n                \n                for(const int& v : graph[u]){\n                    if(!used[v]){\n                        used[v] = true;\n                        queue.push(v);\n                    }\n                }\n            }\n            \n            if(not_valid(x1, x2, y1, y2)){\n                return false;\n            }\n        }\n\n        return true;\n    }\n};",
    "submit_ts": "1722137759",
    "subm_id": "1335772929"
}