{
    "username": "solid_kalium",
    "submission": "class Solution:\n    def minimumOperations(self, nums: List[int], target: List[int]) -> int:\n        diffs = [n - t for n,t in zip(nums, target)]\n        # print(diffs)\n\n        ops = 0\n\n        # outside in? probably not. maybe\n        #   as long as a value doesn't go lower or higher than the most left or most right, it has no cost if moved towards that outlier\n        # some kind of stack? of + and -\n        # divide and conquer?\n        # lo = 0\n        # hi = len(diffs) - 1\n\n        # fullMax = max(diffs)\n        # fullMin = min(diffs)\n        # loMax, loMin, hiMax, hiMin?\n\n        # Stack\n        # stack = []\n        # total = 0\n        # for diff in diffs:\n        #     move = total - diff\n        #     if move:\n        #         stack.append(move)\n        #         total = -diff\n        #         ops += abs(move)\n        # print(stack)\n        # print(total)\n        # print(ops)\n\n        # decrement a peak\n        # increment a valley\n        stack = [diffs[0]]\n        for diff in diffs[1:]:\n            # print(diff, stack)\n            if stack[-1] == diff:\n                continue\n            if len(stack) == 1:\n                stack.append(diff)\n                continue\n            if (diff > stack[-1]) == (stack[-1] > stack[-2]):\n                stack.append(diff)\n                continue\n\n            if diff > stack[-1]:\n                while len(stack) > 1 and diff > stack[-1] < stack[-2]:\n                    removed = stack.pop()\n                    ops += min(stack[-1], diff) - removed\n            else:\n                while len(stack) > 1 and diff < stack[-1] > stack[-2]:\n                    removed = stack.pop()\n                    ops += removed - max(stack[-1], diff)\n            if diff != stack[-1]:\n                stack.append(diff)\n\n        # print(ops)\n        # print(stack)\n        lo, hi = sorted([stack[-1], stack[0]])\n        if (lo > 0) == (hi > 0):\n            ops += max(abs(hi), abs(lo))\n        else:\n            ops += abs(hi) + abs(lo)\n\n        return ops\n",
    "submit_ts": "1721533744",
    "subm_id": "1328015692"
}