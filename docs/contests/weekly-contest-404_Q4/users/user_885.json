{
    "username": "Aryam_singh",
    "submission": "#include<ext/pb_ds/assoc_container.hpp>\n#include<ext/pb_ds/tree_policy.hpp>\n\nusing namespace std;\nusing namespace __gnu_pbds;\n\n// to use like set\n\ntypedef tree<int, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update> pbds; // find_by_order, order_of_key\n\n\nclass Solution {\npublic:\n  \nvector<int> in,out; \nvoid dfs1(vector<int> v[], int u, int parent) \n{ \n    in[u] = 0; \n    for (int child : v[u]) { \n        if (child == parent) \n            continue; \n        dfs1(v, child, u); \n        in[u] = max(in[u], 1 + in[child]); \n    } \n} \nvoid dfs2(vector<int> v[], int u, int parent) \n{ \n    int mx1 = -1, mx2 = -1; \n    for (int child : v[u]) { \n        if (child == parent) \n            continue; \n        if (in[child] >= mx1) { \n            mx2 = mx1; \n            mx1 = in[child]; \n        } \n  \n        else if (in[child] > mx2) \n            mx2 = in[child]; \n    } \n    for (int child : v[u]) { \n        if (child == parent) \n            continue; \n  \n        int longest = mx1; \n        if (mx1 == in[child]) \n            longest = mx2; \n        out[child] = 1 + max(out[u], 1 + longest); \n  \n        dfs2(v, child, u); \n    } \n} \npair<int,int> printHeights(vector<int> v[], int n) \n{ \n    dfs1(v, 1, 0); \n  \n    dfs2(v, 1, 0); \n    int minim=0;\n    vector<int>ans;\n    for (int i = 1; i <= n; i++) {\n        minim=max(minim,max(in[i], out[i]));\n        ans.push_back(max(in[i], out[i]));}\n    sort(ans.begin(),ans.end());\n     return {ans[0],minim};\n}\n    int minimumDiameterAfterMerge(vector<vector<int>>& ed1, vector<vector<int>>& ed2) {\n        int n=ed1.size()+1;\n        vector<int>vt1[n+1];\n        if(n>1)\n        for(int p=0;p<ed1.size();p++){\n            int u=ed1[p][0]+1;\n            int v=ed1[p][1]+1;\n            vt1[u].push_back(v);      \n            vt1[v].push_back(u);\n        }\n         in.resize(n+1,0); \n      out.resize(n+1,0); \n   pair<int,int> minim1={0,0};\n        // if(ed1.size()>0)\n        minim1=printHeights(vt1, n); \n        int m=ed2.size()+1;\n        vector<int>vt2[m+1];\n        if(m>1)\n        for(int p=0;p<ed2.size();p++){\n            int u=ed2[p][0]+1;\n            int v=ed2[p][1]+1;\n            vt2[u].push_back(v);      \n            vt2[v].push_back(u);\n        }\n         in.resize(m+1,0); \n      out.resize(m+1,0); \n   pair<int,int> minim2;\n        // if(ed2.size()>0)\n        minim2=printHeights(vt2, m); \n      //   in.resize(n+1,0); \n      // out.resize(n+1,0); \n      //   dfs1(vt1,1,0);\n      //   dfs2(vt1,1,0);\n\n        // int minim1=1e9;\n        // for (int i = 1; i <= n; i++) {\n        //     int curr=max(in[i], out[i]);\n        //     minim1=min(minim1,curr);\n        // } \n        \n    // int minim2=1e9;\n     // int m=ed2.size()+1;\n     //    vector<int>vt2[m+1];\n     //    for(int p=0;p<m-1;p++){\n     //        int u=ed2[p][0];\n     //        int v=ed2[p][1];\n     //        vt2[u].push_back(v);      \n     //        vt2[v].push_back(u);\n     //    }\n     //    in.resize(m+1,0); \n     //  out.resize(m+1,0); \n     //    dfs(vt2,1,0);\n     //    int minim2=1e9;\n     //    for (int i = 1; i <= m; i++) \n     //        int curr=max(in[i], out[i]);\n     //        minim2=min(minim2,curr);\n     //    } \n        // cout<<minim1<<\" \"<<minim2<<\"\\n\";\nreturn max( minim1.first+minim2.first+1,max(minim1.second,minim2.second));\n        return 0;\n    }\n};",
    "submit_ts": 1719719902.0
}