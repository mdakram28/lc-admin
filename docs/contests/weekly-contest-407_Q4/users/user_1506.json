{
    "username": "maxuanquang",
    "submission": "class Solution:\n    def minimumOperations(self, nums: List[int], target: List[int]) -> int:\n        \"\"\"\n\n        1 1 1 2\n\n        1 -2 2\n\n        dp: min to make nums ends at i equal 0\n\n        observations\n            negative and positive segments should be process separately\n\n            for a positive\n\n                1 3 1 5 3 2\n\n                0 2 0 4 2 1 => 1\n\n                0 0 0 4 2 1 => 2\n\n                0 0 0 3 1 0 => 1\n\n                0 0 0 2 0 0 => 1\n\n                0 0 0 0 0 0 => 2\n\n            dfs\n\n            1 3 1 5 3 2\n\n            1 3 3 7 7 7\n\n            if smaller => then equla\n            if bigger => previous + difference\n\n        \"\"\"\n        def number_operations_needed(subarray: List[int]) -> int:\n            n = len(subarray)\n            f = [0 for _ in range(n)]\n            f[0] = subarray[0]\n            for i in range(1, n):\n                if subarray[i - 1] < subarray[i]:\n                    f[i] = f[i - 1] + abs(subarray[i] - subarray[i - 1])\n                else:\n                    f[i] = f[i - 1]\n            return f[-1]\n\n        answer = 0\n        i = 0\n        diff = [target[i] - nums[i] for i in range(len(nums))]\n        while i < len(diff):\n            if diff[i] == 0:\n                i += 1\n                continue\n\n            j = i\n            while j + 1 < len(diff) and diff[i] * diff[j + 1] > 0:\n                j += 1\n\n            answer += number_operations_needed(\n                [abs(diff[k]) for k in range(i, j + 1)]\n            )\n\n            i = j + 1\n\n        return answer",
    "submit_ts": "1721533256",
    "subm_id": "1328004891"
}