{
    "username": "sansaryadav777",
    "submission": "class Solution {\npublic:\n    \n    void dfs(vector<vector<int>> &t, int curr, int p, int currd, int& maxd, int& d) {\n        if(currd > maxd) {\n            d = curr;\n            maxd = currd;\n        }\n        for(int i = 0; i < t[curr].size(); i++) {\n            if(t[curr][i] != p) {\n                int inc = (t[curr][i] % 2) ? 1 : 2;\n                dfs(t, t[curr][i], curr, currd + inc, maxd, d);\n            }\n        }\n    }\n    \n    void findMaxd(vector<vector<int>>& t, int curr, int p, int currd, vector<int>& maxd) {\n        maxd[curr] = currd;\n        for(int i = 0; i < t[curr].size(); i++) {\n            if(t[curr][i] != p) {\n                int inc = (curr % 2) ? 1 : 2;\n                findMaxd(t, t[curr][i], curr, currd + inc, maxd);\n            }\n        }\n    }\n    \n    vector<int> timeTaken(vector<vector<int>>& edges) {\n        //create t\n        int n = edges.size() + 1;\n        vector<vector<int>> t(n, vector<int>());\n        for(int i = 0; i < edges.size(); i++) {\n            t[edges[i][0]].push_back(edges[i][1]);\n            t[edges[i][1]].push_back(edges[i][0]);\n        }\n        \n        // first diameter node\n        int d1 = 0;\n        int maxd = 0;\n        dfs(t, 0, - 1, 0, maxd, d1);\n        \n        int d2 = 0;\n        maxd = 0;\n        dfs(t, d1, - 1, 0, maxd, d2);\n        \n        // cout << d1 << \" \" << d2 << \"\\n\";\n        \n        // findAns\n        vector<int> maxd1(n, 0);\n        vector<int> maxd2(n, 0);\n        vector<int> ans(n, 0);\n        \n        findMaxd(t, d1, - 1, 0, maxd1);\n        findMaxd(t, d2, - 1, 0, maxd2);\n        \n        for(int i = 0; i < n; i++) {\n            // cout << maxd1[i] << \" \" << maxd2[i] << \"\\n\";\n            ans[i] = max(maxd1[i], maxd2[i]);\n        }\n        return ans;\n    }\n};",
    "submit_ts": "1722699609",
    "subm_id": "1343216886"
}