{
    "username": "shakil-",
    "submission": "class Solution {\npublic:\n\n    struct Node {\n        unordered_map<char, Node*> child;\n        vector<pair<int, int>> v;\n    };\n\n    class Trie {\n    public:\n        Node* root;\n        Trie() { root = new Node(); }\n        void insert(const string& word, int cost) {\n            Node* nd = root;\n            for (char c : word) {\n                if (nd->child.find(c) == nd->child.end()) nd->child[c] = new Node();\n                nd = nd->child[c];\n            }\n            nd->v.emplace_back(word.length(), cost);\n        }\n    };\n\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int ans = 0;\n        int n = target.length();\n        Trie trie;\n        for (int i = 0; i < words.size(); ++i) trie.insert(words[i], costs[i]);\n        vector<int> dp(n + 1, INT_MAX);\n        dp[0] = 0;  \n        for (int j = 0; j < n; ++j) {\n            if (dp[j] == INT_MAX) continue;\n            Node* nd = trie.root;\n            for (int k = j; k < n; ++k) {\n                if (nd->child.find(target[k]) == nd->child.end()) break;\n                nd = nd->child[target[k]];\n                for (const auto& p : nd->v) {\n                    int len = p.first, cost = p.second;\n                    if (k - j + 1 == len) {\n                        dp[k + 1] = min(dp[k + 1], dp[j] + cost);\n                    }\n                }\n            }\n        }\n        return dp[n] == INT_MAX ? -1 : dp[n];\n    }\n};",
    "submit_ts": "1720322443",
    "subm_id": "1312350079"
}