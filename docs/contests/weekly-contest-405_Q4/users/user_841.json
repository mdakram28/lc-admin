{
    "username": "vizak2022",
    "submission": "class Solution {\npublic:\n        struct TN { \n        unordered_map<char, TN*> ch; \n        vector<pair<int, int>> we;  \n    }; \n \n    class Trie { \n    public: \n        TN* root; \n        \n        Trie() { root = new TN(); } \n \n        void insert(string& nums, int i, int co) { \n            TN* node = root; \n            for (char c : nums) { \n                if (!node->ch.count(c)) \n                    node->ch[c] = new TN(); \n                node = node->ch[c]; \n            } \n            node->we.push_back({i, co}); \n        } \n    }; \n \n    int minimumCost(string s, vector<string>& words, vector<int>& costs) { \n        int n = s.size(); \n        \n        vector<int> dp(n + 1, INT_MAX); \n        dp[0] = 0; \n \n        Trie t; \n        for (int i = 0; i < words.size(); ++i) { \n            t.insert(words[i], i, costs[i]); \n        } \n \n        for (int i = 0; i < n; ++i) { \n            if (dp[i] == INT_MAX) continue; \n \n            TN* node = t.root; \n            for (int j = i; j < n; ++j) { \n                if (!node->ch.count(s[j])) break; \n                node = node->ch[s[j]]; \n                for (auto& p : node->we) { \n                    int wordIndex = p.first; \n                    int wordCost = p.second; \n                    int len = words[wordIndex].size(); \n                    if (i + len <= n) { \n                        dp[i + len] = min(dp[i + len], dp[i] + wordCost); \n                    } \n                } \n            } \n        } \n \n        return dp[n] == INT_MAX ? -1 : dp[n]; \n       \n    }\n};",
    "submit_ts": "1720322972",
    "subm_id": "1312364014"
}