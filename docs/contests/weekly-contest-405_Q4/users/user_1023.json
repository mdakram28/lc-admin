{
    "username": "nathan-tw",
    "submission": "from typing import List\n\nclass TrieNode:\n    def __init__(self):\n        self.nexts = [None] * 26\n        self.cost = 0\n\nclass Trie:\n    def __init__(self):\n        self.head = TrieNode()\n    \n    def insert(self, word: str, cost: int):\n        curr = self.head\n        for ch in word:\n            index = ord(ch) - ord('a')\n            if curr.nexts[index] is None:\n                curr.nexts[index] = TrieNode()\n            curr = curr.nexts[index]\n        if curr.cost == 0:\n            curr.cost = cost\n        else:\n            curr.cost = min(curr.cost, cost)\n    \n    def search(self, word: str) -> int:\n        curr = self.head\n        for ch in word:\n            index = ord(ch) - ord('a')\n            if curr.nexts[index] is None:\n                return 0\n            curr = curr.nexts[index]\n        return curr.cost\n\nclass Solution:\n    def minimumCost(self, target: str, words: List[str], costs: List[int]) -> int:\n        n = len(target)\n        trie = Trie()\n        for i in range(len(words)):\n            trie.insert(words[i], costs[i])\n        \n        memo = [-1] * n\n        \n        def dfs(idx: int) -> int:\n            if idx >= n:\n                return 0\n            if memo[idx] != -1:\n                return memo[idx]\n            \n            curr = trie.head\n            res = float('inf')\n            for i in range(idx, n):\n                index = ord(target[i]) - ord('a')\n                if curr.nexts[index] is None:\n                    break\n                curr = curr.nexts[index]\n                if curr.cost:\n                    res = min(res, curr.cost + dfs(i + 1))\n            \n            memo[idx] = res\n            return res\n        \n        result = dfs(0)\n        return result if result != float('inf') else -1\n",
    "submit_ts": "1720322985",
    "subm_id": "1312364381"
}