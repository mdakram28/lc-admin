{
    "username": "anirban_96",
    "submission": "class TrieNode {\npublic:\n    vector<TrieNode*> childNodes;\n    int nodeCost;\n    bool isEnd;\n\n    TrieNode() : childNodes(26, nullptr), nodeCost(INT_MAX), isEnd(false) {}\n};\nclass Trie {\npublic:\n    TrieNode* rootNode;\n\n    Trie() {\n        rootNode = new TrieNode();\n    }\n\n    void insertWord(const string& word, int cost) {\n        TrieNode* currentNode = rootNode;\n        for (char ch : word) {\n            if (!currentNode->childNodes[ch - 'a']) {\n                currentNode->childNodes[ch - 'a'] = new TrieNode();\n            }\n            currentNode = currentNode->childNodes[ch - 'a'];\n        }\n        currentNode->nodeCost = min(cost, currentNode->nodeCost);\n        currentNode->isEnd = true;\n    }\n\n    TrieNode* getRootNode() {\n        return rootNode;\n    }\n};\n\nclass Solution {\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        Trie trie;\n        int tarlen = target.size();\n        vector<int> minCosts(tarlen + 1, INT_MAX);\n\n        for (int i = 0; i < words.size(); ++i) {\n            trie.insertWord(words[i], costs[i]);\n        }\n\n        minCosts[0] = 0;\n\n        for (int i = 0; i < tarlen; ++i) {\n            if (minCosts[i] == INT_MAX) continue;\n\n            TrieNode* currentNode = trie.getRootNode();\n            for (int j = i; j < tarlen; ++j) {\n                char ch = target[j];\n                if (!currentNode->childNodes[ch - 'a']) break;\n                currentNode = currentNode->childNodes[ch - 'a'];\n                if (currentNode->isEnd) {\n                    minCosts[j + 1] = min(minCosts[j + 1], minCosts[i] + currentNode->nodeCost);\n                }\n            }\n        }\n        return minCosts[tarlen] == INT_MAX ? -1 : minCosts[tarlen];\n    }\n};",
    "submit_ts": "1720322608",
    "subm_id": "1312354421"
}