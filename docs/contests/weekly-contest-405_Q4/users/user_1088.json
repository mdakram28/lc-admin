{
    "username": "papaya",
    "submission": "#include<bits/stdc++.h>\nusing namespace std ; \ntypedef long long int64 ; \n\nconst int64 INF = 1e9 ; \n\nauto __OI_INIT__ = []() {\n    ios::sync_with_stdio(0), cin.tie(0) , cout.tie(0);\n    cout << fixed << setprecision(12); return 0 ; \n}();\n\nstruct Trie {\n\n    struct Node { \n        vector<int> next;\n        int is_final_node ; \n        int cost ; \n    }; \n    vector< Node > tree ; \n    int n , m ; \n    int node_id ; \n    void init( int tn , int tm ) {    // n \u8868\u793a\u6574\u4f53\u9700\u8981\u5b58\u50a8\u7684\u5b57\u7b26\u4e2a\u6570\uff0ctm\u8868\u793a\u5b57\u7b26\u79cd\u7c7b\uff08\u5c0f\u5199\u5b57\u6bcd26\u4e2a\uff09\n        \n        n = tn , m = tm ;  \n        tree.resize( n ) ;\n        for( int i = 0 ; i < n ; i++ ) {\n            tree[i].next.assign( m , 0 ) ; \n            tree[i].is_final_node = 0 ; \n            tree[ i ].cost = INF ; \n        }\n        node_id = 0 ; \n    }\n\n    void insert( string & pattern , int cost ) {\n\n        reverse( pattern.begin() , pattern.end() ) ; \n        int u = 0 ; \n        for( int i = 0 ; i < pattern.size() ; ++i ) {\n\n            int c = pattern[i] - 'a' ; \n            if( tree[ u ].next[ c ] == 0 ) {\n                tree[ u ].next[ c ] = ++node_id ; \n            }\n            u = tree[ u ].next[ c ] ;\n        }\n        tree[ u ].is_final_node = 1 ;\n        tree[ u ].cost = min( tree[u].cost , cost ) ; \n    } \n\n    vector<int> f ;   \n    int64 solve( string &s ) { \n\n        s = \" \" + s ; \n        int n = s.size() ; \n        f.assign( n , INF  ) ; \n        f[ 0 ] = 0 ; \n\n        for( int i = 1 ; i < n ; i++ ) {\n            int u = 0 ; \n            int j = i ; \n            for( int di = j ; di >= 1 ; --di ) { \n\n                int c = s[di] - 'a' ;             \n                u = tree[ u ].next[ c ] ;\n                \n                if( tree[u].is_final_node ) { \n                    f[ j ] = min( f[j] , f[ di - 1 ] + tree[u].cost ) ; \n                }\n                if( u == 0 ) {\n                    break ; \n                }                \n            }\n        }\n        return f[ n - 1 ] ; \n    }\n}; \n\n\nclass Solution {\npublic:\n    Trie t ; \n\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n\n        int m = words.size() ; \n\n        int acc = 0 ; \n        for( int i = 0 ; i < m ; i++ ) {\n            acc += words[i].size() ; \n        }\n        t.init( acc * 5 , 26 ) ; \n\n        \n        for( int i = 0 ; i < m ; i++ ) { \n            t.insert( words[i] , costs[i] ) ; \n        }    \n        \n        auto ans = t.solve( target ) ; \n        if( ans == INF ) {\n            return -1 ;\n        }\n        return ans ; \n    }\n};\n\n\n\nint ma33in( )  { \n    Solution  t; \n\n    vector<int> costs ;\n    int n ; \n    string target ; \n\n    vector< string > words ; \n\n\n    target = \"abcdef\" ; \n    words = { \"abdef\",\"abc\",\"d\",\"def\",\"ef\" } ; \n    costs = { 100,1,1,10,5 } ;\n    \n    // target = \"aaaa\" ; \n    // words = { \"z\",\"zz\",\"zzz\" } ; \n    // costs = { 1,10,100 } ; \n    \n\n    target = \"n\" ; \n\n    words = { \"n\",\"n\",\"n\",\"n\" } ; \n\n    costs = { 2,1,1,1 } ; \n\n\n    target = \"xlijjry\" ; \n\n    words = { \"xlijjry\",\"jjr\" } ; \n\n    costs = { 14,4 } ; \n\n    auto ans = t.minimumCost(target,  words,  costs ) ; \n    cout << ans << \"\\n\" ;\n\n\n    return 0 ; \n}\n",
    "submit_ts": "1720322215",
    "subm_id": "1312343838"
}