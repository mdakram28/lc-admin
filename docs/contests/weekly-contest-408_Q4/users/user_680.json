{
    "username": "delphih",
    "submission": "class UnionFind:\n    def __init__(self, n):\n        self.pa = list(range(n))\n        self.sz, self.count = [1] * n, n\n\n    def find(self, p):\n        if self.pa[p] != p: self.pa[p] = self.find(self.pa[p])\n        return self.pa[p]\n    \n    def union(self, p, q):\n        pi, qi = self.find(p), self.find(q)\n        if pi == qi: return\n        if self.sz[pi] < self.sz[qi]: pi, qi = qi, pi\n        self.pa[qi] = pi\n        self.sz[pi] += self.sz[qi]\n        self.count -= 1\n        \n    def compare(self, p, q):\n        return self.find(p) == self.find(q)\n\nclass Solution:\n    def canReachCorner(self, X: int, Y: int, C: List[List[int]]) -> bool:\n        def inrec(cir):\n            x, y, r = cir\n            return not (x + r < 0 or x - r > X or y + r < 0 or y - r > Y)\n        C = list(filter(inrec, C))\n        uf = UnionFind(len(C) + 4) # h0, vX, hY, v0\n        n = len(C)\n        for i in range(len(C)):\n            x1, y1, r1 = C[i]\n            if -r1 <= x1 <= X + r1 and -r1 <= y1 <= r1: uf.union(i, n+0)\n            if -r1 <= y1 <= Y + r1 and -r1 <= x1-X <= r1: uf.union(i, n+1)\n            if -r1 <= x1 <= X + r1 and -r1 <= y1-Y <= r1: uf.union(i, n+2)\n            if -r1 <= y1 <= Y + r1 and -r1 <= x1 <= r1: uf.union(i, n+3)\n            for j in range(i + 1, len(C)):\n                x2, y2, r2 = C[j]\n                if (x1-x2)**2 + (y1-y2)**2 <= (r1+r2) ** 2: uf.union(i, j)\n        # for i in range(n +4): print(uf.find(i))\n        return not(uf.compare(n, n+2) or uf.compare(n, n+3) or uf.compare(n+1, n+2) or uf.compare(n+1, n+3))",
    "submit_ts": "1722138592",
    "subm_id": "1335794732"
}