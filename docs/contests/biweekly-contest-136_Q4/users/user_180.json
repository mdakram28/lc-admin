{
    "username": "Harshit_J12",
    "submission": "typedef int ll;\ntypedef unsigned long long ull;\ntypedef long double ld;\n#define loop(i,a,b) for(ll i = a; i<=b ; i++)\n#define loop0(i,a,b) for(ll i = a; i<=b ; )\n#define revloop(i,a,b) for(ll i = a; i>=b ; i--)\n#define itloop(i,a,b) for(auto i = a; i != b ; i++)\n#define no cout<<\"NO\"<<endl\n#define yes cout<<\"YES\"<<endl\n#define nn <<\"\\n\"  \n#define spcl <<\" \"\n#define spc <<\" \"<<  \n#define all(x) (x).begin(), (x).end()\n#define fastIO ios_base::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL);\n#define inf INT_MAX\n#define linf LONG_LONG_MAX\n\n\nclass Solution {\npublic:\n    struct Graph{\n        ll n , m;\n        vector<vector<ll>>adj;\n        vector<ll>vst;\n        vector<ll>dp1,dp2;\n        vector<pair<ll,ll>>max_values;\n        vector<ll>ans;\n\n\n        Graph(vector<vector<int>>& edges){\n            n = edges.size() + 1;\n            m = n-1;\n            adj = vector<vector<ll>>(n+1);\n            vst = vector<ll>(n+1 , -1);\n            loop(i ,0 , m-1){\n                adj[edges[i][0]].push_back(edges[i][1]);\n                adj[edges[i][1]].push_back(edges[i][0]);\n            }\n            treeInit(0);\n            dp1 = vector<ll>(n , -1);\n            dp2 = vector<ll>(n , -1);\n            max_values = vector<pair<ll,ll>>(n , {0,0});\n            calcdp1(0);\n            calcdp2(0);\n            loop(i , 0 , n-1) ans.push_back(max(dp1[i] , dp2[i]));\n        }\n\n        void calcdp1(ll ix){\n            if(dp1[ix] != -1) return;\n            dp1[ix] = 0;\n            vector<ll>mv;\n            for(auto x: adj[ix]){\n                calcdp1(x);\n                dp1[ix] = max(dp1[ix] , dp1[x] + 2 - x%2);\n                mv.push_back(dp1[x] + 2 - x%2);\n            }\n            mv.push_back(0);    \n            mv.push_back(0);    \n            sort(all(mv) , greater<ll>());\n            max_values[ix] = {mv[0] , mv[1]};\n        }\n\n        void calcdp2(ll ix){\n            if(par[ix] == -1) dp2[ix] = 0;\n            else{\n                dp2[ix] = dp2[par[ix]] + (2 - par[ix]%2);\n                auto x = max_values[par[ix]];\n                if(x.first == dp1[ix] + 2 - ix%2) dp2[ix] = max(dp2[ix] , x.second  + (2 - par[ix]%2));\n                else dp2[ix] = max(dp2[ix] , x.first + (2 - par[ix]%2));\n            }\n            for(auto x: adj[ix]){\n                calcdp2(x);\n            }\n        }\n        vector<ll>par;\n        void treeInit(ll ix){\n            if(!par.size()) par = vector<ll>(n+1 , -1);\n            if(vst[ix] != -1) return;\n            vector<ll>v;\n            vst[ix] = 1;\n            for(auto x: adj[ix]) {\n                if(vst[x] == -1) {treeInit(x); v.push_back(x);}\n                else par[ix] = x;\n            }\n            adj[ix] = v;\n        }\n    \n    };\n\n\n    vector<int> timeTaken(vector<vector<int>>& edges) {\n        Graph g(edges);\n        return g.ans;\n    }\n};",
    "submit_ts": "1722699291",
    "subm_id": "1343207212"
}