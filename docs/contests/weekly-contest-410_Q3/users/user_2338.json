{
    "username": "danishali05",
    "submission": "\nclass Solution {\npublic:\n    using MemoTable = vector<vector<vector<long long int>>>;\n\n    long long int mod(long long int x, long long int m) {\n        return ((x % m) + m) % m; // Handles negative values\n    }\n\n    void initializeMemo(MemoTable& memoTable, int size, int maxValue) {\n        for (int i = 0; i < size; ++i) {\n            for (int j = 0; j <= maxValue; ++j) {\n                fill(memoTable[i][j].begin(), memoTable[i][j].end(), -1);\n            }\n        }\n    }\n\n    bool isPairValid(int first, int second, int target) {\n        return first + second == target;\n    }\n\n    long long int countValidPairs(int currentIndex, int currentSum1, int currentSum2, const vector<int>& nums, MemoTable& memoTable) {\n        const int MODULO = 1e9 + 7;\n        const int numSize = nums.size();\n\n        if (currentIndex == numSize) {\n            return 1;\n        }\n\n        if (memoTable[currentIndex][currentSum1][currentSum2] != -1) {\n            return memoTable[currentIndex][currentSum1][currentSum2];\n        }\n\n        long long int totalPairs = 0;\n        for (int sum1 = currentSum1; sum1 <= nums[currentIndex]; ++sum1) {\n            for (int sum2 = currentSum2; sum2 >= 0; --sum2) {\n                if (isPairValid(sum1, sum2, nums[currentIndex])) {\n                    totalPairs = mod(totalPairs + countValidPairs(currentIndex + 1, sum1, sum2, nums, memoTable), MODULO);\n                }\n            }\n        }\n\n        return memoTable[currentIndex][currentSum1][currentSum2] = totalPairs;\n    }\n\n    int countOfPairs(vector<int>& nums) {\n        int numSize = nums.size();\n        int maxValue = *max_element(nums.begin(), nums.end());\n        MemoTable memoTable(numSize, vector<vector<long long int>>(maxValue + 1, vector<long long int>(maxValue + 1, -1)));\n        return countValidPairs(0, 0, nums[0], nums, memoTable);\n    }\n};\n\n\n",
    "submit_ts": "1723346598",
    "subm_id": "1351581095"
}