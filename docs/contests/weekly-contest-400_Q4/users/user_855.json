{
    "username": "MJMTG",
    "submission": "class MyTree {\npublic:\n    vector<int> tree;\n    int n;\n    MyTree(vector<int>& nums) {\n        n = nums.size();\n        tree.resize(4 * n);\n        build(nums, 0, 0, n - 1);\n    }\n    void build(vector<int>& arr, int cur, int s, int e) {\n        if (s == e) {\n            tree[cur] = arr[s];\n            return;\n        }\n        int mid = (s + e) / 2;\n        build(arr, 2 * cur + 1, s, mid);\n        build(arr, 2 * cur + 2, mid + 1, e);\n        tree[cur] = tree[2 * cur + 1] & tree[2 * cur + 2];\n    }\n\n    int range(int node, int s, int e, int l, int r) {\n        if (r < s || e < l) {\n            return INT_MAX;\n        }\n        if (l <= s && e <= r) {\n            return tree[node];\n        }\n        int mid = (s + e) / 2;\n        int left = range(2 * node + 1, s, mid, l, r);\n        int right = range(2 * node + 2, mid + 1, e, l, r);\n        return left & right;\n    }\n};\n\nclass Solution {\npublic:\n    int minimumDifference(vector<int>& nums, int k) {\n        int n = nums.size();\n        MyTree tree(nums);\n        int ans = INT_MAX;\n        for (int i = 0; i < n; i++) {\n            int left = i - 1, right = n - 1, mid;\n            while (right - left > 1) {\n                mid = (left + right) / 2;\n                if (tree.range(0, 0, n - 1, i, mid) >= k) {\n                    left = mid;\n                } else {\n                    right = mid;\n                }\n            }\n            if (left != i - 1) {\n                ans = min(ans, abs(tree.range(0, 0, n - 1, i, left) - k));\n            }\n            ans = min(ans, abs(k - tree.range(0, 0, n - 1, i, right)));\n        }\n                return ans;\n\n    }\n};\n\n",
    "submit_ts": 1717297056.0
}