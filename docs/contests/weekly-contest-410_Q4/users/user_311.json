{
    "username": "Googlehsiehh",
    "submission": "import java.util.*;\nclass Solution {\n    int[] nums;\n    Long[][] dp1;\n    Long[][] dp2;\n    int mod = 1000000007;\n    public int countOfPairs(int[] nums) {\n        this.nums = nums;\n        int m = nums.length;\n        int max = 0;\n        for (int num : nums) {\n            max = Math.max(max, num);\n        }\n        dp1 = new Long[m][max + 1];\n        dp2 = new Long[m][max + 1];\n        long res = dfs1(0, 0);\n        return (int)res;\n    }\n\n    private long dfs1(int index, int prev) {\n        if (index == nums.length) {\n            return 1;\n        }\n        if (dp1[index][prev] != null) {\n            return dp1[index][prev];\n        }\n        long res = 0;\n        int minCur = prev;\n        if (index > 0) {\n            minCur = Math.max(prev, nums[index] - nums[index - 1] + prev);\n        }\n        res = (res + dfs2(index + 1, minCur)) % mod;\n        return dp1[index][prev] = res;\n    }\n\n    private long dfs2(int index, int val) {\n        if (index == nums.length) {\n            long res = Math.max(0, nums[index - 1] - val + 1); \n            return res;\n        }\n        if (val > nums[index]) {\n            return 0;\n        }\n        if (dp2[index][val] != null) {\n            return dp2[index][val];\n        }\n        long sum = (dfs1(index, val) + dfs2(index, val + 1)) % mod;\n        dp2[index][val] = sum;\n        return sum;\n    }\n}",
    "submit_ts": "1723346913",
    "subm_id": "1351587855"
}