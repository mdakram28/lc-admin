{
    "username": "twoplusthree",
    "submission": "const int INF = 1e9 + 6;\nstruct Trienode {\n  int cnt, cst;\n  Trienode *child[26];\n  Trienode() {\n    cst = INF;\n    for(int i = 0; i < 26; i++) {\n      child[i] = nullptr;\n    }\n  }\n  ~Trienode() {\n    for(int i = 0; i < 26; i++) {\n      if(child[i] != nullptr) {\n        delete(child[i]);\n      }\n    }\n  }\n  void insert(string &s, int i, int c) {\n    if(i == (int)s.size()) {\n      cst = min(cst, c);\n    } else {\n      if(child[s[i] - 'a'] == nullptr) {\n        child[s[i] - 'a'] = new Trienode();\n      }\n      child[s[i] - 'a']->insert(s, i + 1, c);\n    }\n  }\n};\nclass Solution {\npublic:\n  int minimumCost(string t, vector<string>& w, vector<int>& c) {\n    int n = (int)t.size();\n    int m = (int)w.size();\n    Trienode *root = new Trienode();\n    for(int j = 0; j < m; j++) {\n      root->insert(w[j], 0, c[j]);\n    }\n    int dp[n + 1];\n    for(int i = 0; i <= n; i++) {\n      dp[i] = INF;\n    }\n    dp[n] = 0;\n    for(int i = n - 1; i >= 0; i--) {\n      Trienode *curr = root;\n      for(int j = i; j < n; j++) {\n        curr = curr->child[t[j] - 'a'];\n        if(curr == nullptr) {\n          break;\n        }\n        dp[i] = min(dp[i], curr->cst + dp[j + 1]);\n      }\n    }\n    return (dp[0] < INF ? dp[0] : -1);\n  }\n};",
    "submit_ts": "1720323130",
    "subm_id": "1312368017"
}