{
    "username": "mdakram28",
    "submission": "MOD = 10**9 + 7\n\nclass Solution:\n    def numberOfPermutations(self, n: int, requirements: List[List[int]]) -> int:\n        # r = {}\n        # for end, cnt in requirements:\n        #     r[end+1] = cnt\n        max_inversions = n * (n - 1) // 2\n        \n        requirements.append([n, max_inversions])\n        \n        inv_range = [None] * (n+1)\n        \n        requirements.sort()\n        start = 0\n        start_cnt = 0\n        for ri in range(len(requirements)-1):\n            end, cnt = requirements[ri]\n            inv_range[start:end] = [range(start_cnt, cnt+1)] * (end-start)\n            inv_range[end] = range(cnt, cnt+1)\n            start = end+1\n            start_cnt = cnt\n            \n    \n#         dp = [[0] * (max_inversions + 1) for _ in range(n + 1)]\n#         dp[0][0] = 1\n#         prev_inv = 0\n\n#         for length in range(1, n + 1):\n#             if length in r:\n#                 inv = r[length]\n#                 dp[length][inv] = sum(dp[length - 1][inv - k] for k in range(length) if k <= inv) % MOD\n#                 prev_inv = inv\n#             else:\n#                 for inv in range(prev_inv, max_inversions + 1):\n#                     dp[length][inv] = 0\n#                     dp[length][inv] = sum(dp[length - 1][inv - k] for k in range(length) if k <= inv) % MOD\n                    # for k in range(length):\n                    #     if inv >= k:\n                    #         dp[length][inv] = (dp[length][inv] + dp[length - 1][inv - k]) % MOD\n                \n        # print('\\n'.join([str(a) for a in dp]))\n        \n        # print(inv_range)\n        \n        @cache\n        def count(end, inv):\n            if inv not in inv_range[end]:\n                return 0\n            if end == 0:\n                if inv == 0:\n                    return 1\n                else:\n                    return 0\n                \n            return sum(count(end - 1, inv - k) for k in range(end+1)) % MOD\n        \n        result = sum(count(n-1, inv) for inv in inv_range[n-1]) % MOD\n\n        return result",
    "submit_ts": 1719070163.0
}