{
    "username": "saswatimathan",
    "submission": "from typing import List\nimport heapq\n\nclass Solution:\n    def minimumCost(self, m: int, n: int, horizontalCut: List[int], verticalCut: List[int]) -> int:\n        # Convert the lists to max-heaps by negating the values (since Python's heapq is a min-heap by default)\n        horizontalCut = [-cost for cost in horizontalCut]\n        verticalCut = [-cost for cost in verticalCut]\n        heapq.heapify(horizontalCut)\n        heapq.heapify(verticalCut)\n        \n        # Initialize the number of horizontal and vertical pieces\n        h_pieces = 1\n        v_pieces = 1\n        \n        # Initialize the total cost\n        total_cost = 0\n        \n        # Process the cuts while there are still cuts to be made\n        while horizontalCut and verticalCut:\n            if horizontalCut[0] < verticalCut[0]:  # compare the negative values\n                total_cost += -heapq.heappop(horizontalCut) * v_pieces\n                h_pieces += 1\n            else:\n                total_cost += -heapq.heappop(verticalCut) * h_pieces\n                v_pieces += 1\n        \n        # Process remaining horizontal cuts if any\n        while horizontalCut:\n            total_cost += -heapq.heappop(horizontalCut) * v_pieces\n        \n        # Process remaining vertical cuts if any\n        while verticalCut:\n            total_cost += -heapq.heappop(verticalCut) * h_pieces\n        \n        return total_cost",
    "submit_ts": "1720926089",
    "subm_id": "1320275654"
}