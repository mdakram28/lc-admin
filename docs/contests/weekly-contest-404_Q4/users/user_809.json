{
    "username": "jackieckc",
    "submission": "class Solution {\npublic:\n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n        if (edges1.empty() && edges2.empty()) {\n            return 1;\n        }\n        int n = edges1.size() + 1, m = edges2.size() + 1;\n        vector<vector<int>> nei1(n), nei2(m);\n        for (auto& e : edges1) {\n            nei1[e[0]].push_back(e[1]);\n            nei1[e[1]].push_back(e[0]);\n        }\n        for (auto& e : edges2) {\n            nei2[e[0]].push_back(e[1]);\n            nei2[e[1]].push_back(e[0]);\n        }\n        auto h = [](vector<vector<int>>& nei) {\n            if (nei.empty()) {\n                return 0;\n            }\n            int n = nei.size();\n            int s = -1;\n            for (int i = 0; i < n; i++) {\n                if (nei[i].size() == 1) {\n                    s = i;\n                    break;\n                }\n            }\n            if (s == -1) {\n                return -1;\n            }\n            vector<int> vis(n);\n            int l = 0;\n            vector<int> cc = {s};\n            vis[s] = 1;\n            int le = -1;\n            while (!cc.empty()) {\n                vector<int> cc2;\n                for (auto c : cc) {\n                    for (auto& nc : nei[c]) {\n                        if (!vis[nc]) {\n                            vis[nc] = 1;\n                            cc2.push_back(nc);\n                            le = nc;\n                        }\n                    } \n                }\n                cc = cc2;\n            }\n            cc = {le};\n            for (int i = 0; i < n; i++) {\n                vis[i] = 0;\n            }\n            vis[le] = 1;\n            while (!cc.empty()) {\n                // cout << \"lvl \" << l << \": \";\n                vector<int> cc2;\n                for (auto c : cc) {\n                    // cout << c << \", \";\n                    for (auto& nc : nei[c]) {\n                        if (!vis[nc]) {\n                            vis[nc] = 1;\n                            cc2.push_back(nc);\n                        }\n                    } \n                }\n                // cout << endl;\n                cc = cc2;\n                if (!cc.empty()) {\n                    l += 1;\n                }\n            }\n            // cout << l << endl;\n            return l;\n        };\n        auto t = [](int l) {\n            if (l % 2 == 0) {\n                // 0 - 1 - 2 - 3 - 4\n                l = l / 2;\n            } else {\n                // 0 - 1 - 2 - 3 - 4 - 5\n                l = (l + 1) / 2;\n            }\n            return l;\n        };\n        int v1 = h(nei1);\n        int v2 = h(nei2);\n        if (v1 == -1) {\n            return t(v2) + 1;\n        }\n        if (v2 == -1) {\n            return t(v1) + 1;\n        }\n        return max({t(v1) + t(v2) + 1, v1, v2});\n    }\n};",
    "submit_ts": 1719718932.0
}