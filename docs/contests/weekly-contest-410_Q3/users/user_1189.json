{
    "username": "kush_1917",
    "submission": "class Solution {\n    private static final long mod = 1000000007;\n    private long computeWays(int currentIndex, int prevValue1, int prevValue2, int[] numbers, long[][][] memo) {\n        if (currentIndex >= numbers.length) return 1;\n        if (memo[currentIndex][prevValue1][prevValue2] != -1) return memo[currentIndex][prevValue1][prevValue2];\n        long count = 0;\n        for (int i = prevValue1; i <= numbers[currentIndex]; i++) {\n            for (int j = prevValue2; j >= 0; j--) {\n                if (i + j == numbers[currentIndex]) {\n                    count = (count + computeWays(currentIndex + 1, i, j, numbers, memo)) % mod;\n                }\n            }\n        }\n        memo[currentIndex][prevValue1][prevValue2] = count;\n        return count;\n    }\n    public int countOfPairs(int[] numbers) {\n        int length = numbers.length;\n        long[][][] memo = new long[length][51][51];\n        for (long[][] matrix : memo) {\n            for (long[] row : matrix) {\n                Arrays.fill(row, -1);\n            }\n        }\n        return (int) computeWays(0, 0, numbers[0], numbers, memo);\n    }\n}",
    "submit_ts": "1723345662",
    "subm_id": "1351560624"
}