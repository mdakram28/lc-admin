{
    "username": "Momos_",
    "submission": "class Solution {\npublic:\n    vector<int> shortestDistanceAfterQueries(int n, vector<vector<int>>& q) {\n        vector<int> ans;\n        set<int> st;\n        map<int,int> mp;\n        for(int i=0;i<n;i++) st.insert(i);\n        for(int i=0;i<n;i++) mp[i]=1;;\n        for(int i=0;i<q.size();i++){\n            int u = q[i][0], v = q[i][1];\n//             if(mp.find(u) != mp.end() && mp.find(v) != mp.end()){\n                \n//             }\n            if(st.find(u) != st.end() && st.find(v) != st.end()){\n                // cout<<u<<\" \"<<v<<endl;\n                set<int>::iterator it1, it2;\n                it1 = st.find(u);\n                it2 = st.find(v);\n                it1++;\n                // it2--;\n                vector<int> temp;\n                for(set<int>::iterator it= it1; it != it2; it++){\n                    temp.push_back(*it);\n                    cout<<*it<<\",\";\n                }\n                cout<<endl;\n                \n                for(auto it: temp){\n                    st.erase(it);\n                }\n                // cout<<*it1<<\" \"<<*it2<<endl;\n                // if(*it2 >= *it1){\n                //     cout<<\"yess\"<<endl;\n                //     st.erase(it1,it2);\n                // }\n                // for(auto it: st){\n                //     cout<<it<<\" \";\n                // }cout<<endl;\n            }\n            \n            ans.push_back(st.size()-1);\n        }\n        return ans;\n//     vector<int> ans;\n//     list<int> lst;\n//     for (int i = 0; i < n; ++i) lst.push_back(i);\n\n//     for (const auto& query : q) {\n//         int u = query[0], v = query[1];\n\n//         auto it1 = find(lst.begin(), lst.end(), u);\n//         auto it2 = find(lst.begin(), lst.end(), v);\n\n//         if (it1 != lst.end() && it2 != lst.end() && distance(it1, it2) >= 0) {\n//             it2++; // Increment it2 to make the range inclusive\n//             lst.erase(it1, it2);\n//         }\n\n//         // For debugging: print the current state of the list\n//         for (const auto& it : lst) {\n//             cout << it << \" \";\n//         }\n//         cout << endl;\n\n//         ans.push_back(lst.size() - 1);\n//     }\n\n//     return ans;\n    }\n\n};",
    "submit_ts": "1722743581",
    "subm_id": "1343795165"
}