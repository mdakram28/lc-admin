{
    "username": "CutSandstone",
    "submission": "class Solution {\n    long[][][] tree;\n    int n;\n    void upd(int i){\n        int a = i<<1, b = a|1;\n        tree[i][0][0] = Math.max(tree[a][0][0]+tree[b][1][0],tree[a][0][1]+tree[b][0][0]);\n        tree[i][1][0] = Math.max(tree[a][1][0]+tree[b][1][0],tree[a][1][1]+tree[b][0][0]);\n        tree[i][0][1] = Math.max(tree[a][0][0]+tree[b][1][1],tree[a][0][1]+tree[b][0][1]);\n        tree[i][1][1] = Math.max(tree[a][1][0]+tree[b][1][1],tree[a][1][1]+tree[b][0][1]);\n        \n        tree[i][1][0] = Math.max(tree[i][1][0],tree[i][0][0]);\n        tree[i][0][1] = Math.max(tree[i][0][1],tree[i][0][0]);\n        tree[i][1][1] = Math.max(tree[i][1][1],Math.max(tree[i][1][0],tree[i][0][1]));\n    }\n    void build(int[] nums, int ind, int l, int r){\n        if(l == r){\n            tree[ind][1][1] = Math.max(nums[l],0);\n            return;\n        }\n        int m = (l+r)>>1;\n        build(nums,ind<<1,l,m);\n        build(nums,ind<<1|1,m+1,r);\n        upd(ind);\n    }\n    void update(int ind, int val, int v, int l, int r){\n        if(l == r){\n            tree[v][1][1] = Math.max(val,0);\n            return;\n        }\n        int m = (l+r)>>1;\n        if(ind <= m) update(ind,val,v<<1,l,m);\n        else update(ind,val,v<<1|1,m+1,r);\n        upd(v);\n    }\n    public int maximumSumSubsequence(int[] nums, int[][] queries) {\n        long ans = 0;\n        int mod = 1_000_000_007;\n        n = nums.length;\n        tree = new long[n<<2][2][2];\n        build(nums,1,0,n-1);\n        for(int[] a: queries){\n            update(a[0],a[1],1,0,n-1);\n            ans = (ans+tree[1][1][1])%mod;\n        }\n        return (int)(ans%mod);\n    }\n}",
    "submit_ts": 1716691869.0
}