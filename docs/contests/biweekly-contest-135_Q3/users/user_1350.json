{
    "username": "sterfd",
    "submission": "from collections import defaultdict\nclass Solution:\n    def minChanges(self, nums: List[int], k: int) -> int:\n        diffs = defaultdict(list)\n        n = len(nums)\n\n        def count_changes(to_diff):\n            count = 0\n            skipp = set(diffs[to_diff])\n            for i in range(n//2):\n                if i in skipp:\n                    continue\n                lower = min(nums[i], nums[n-1-i])\n                higher = max(nums[i], nums[n-1-i])\n                if lower + to_diff <= k or (higher - to_diff >= 0):\n                    count += 1\n                else:\n                    count += 2\n            return count\n     \n        for i in range(n//2):\n            diff = abs(nums[n-1-i] - nums[i])\n            diffs[diff].append(i)\n        sorted_keys = sorted(diffs.keys(), key=lambda k: (-len(diffs[k]), k))\n        # print(diffs)\n        min_changes = n\n        for diff in sorted_keys[:5]:\n            x = count_changes(diff)\n            min_changes = min(min_changes, x)\n            # print(f\"{diff = }, and num changes = {x}\")\n        return min_changes",
    "submit_ts": "1721489110",
    "subm_id": "1327443193"
}