{
    "username": "sohansumit55",
    "submission": "import java.util.*;\n\nclass Solution {\n    public long minimumCost(int m, int n, int[] horizontalCut, int[] verticalCut) {\n        // Create a list to hold all cuts with their type\n        List<int[]> cuts = new ArrayList<>();\n        \n        // Add horizontal cuts to the list\n        for (int i = 0; i < horizontalCut.length; i++) {\n            cuts.add(new int[] {horizontalCut[i], 0}); // 0 for horizontal\n        }\n        \n        // Add vertical cuts to the list\n        for (int i = 0; i < verticalCut.length; i++) {\n            cuts.add(new int[] {verticalCut[i], 1}); // 1 for vertical\n        }\n        \n        // Sort cuts in descending order of cost\n        Collections.sort(cuts, (a, b) -> b[0] - a[0]);\n        \n        long totalCost = 0;\n        int horizontalPieces = 1;\n        int verticalPieces = 1;\n        \n        // Process cuts in descending order of cost\n        for (int[] cut : cuts) {\n            if (cut[1] == 0) { // Horizontal cut\n                totalCost += (long) cut[0] * verticalPieces;\n                horizontalPieces++;\n            } else { // Vertical cut\n                totalCost += (long) cut[0] * horizontalPieces;\n                verticalPieces++;\n            }\n        }\n        \n        return totalCost;\n    }\n}\n",
    "submit_ts": "1720925527",
    "subm_id": "1320257660"
}