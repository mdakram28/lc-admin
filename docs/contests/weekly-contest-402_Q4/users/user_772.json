{
    "username": "cactus_epic",
    "submission": "class Solution {\npublic:\n    struct FenwickTree {\n        int n;\n        vector<int> a;\n        FenwickTree(int _n): n(_n), a(_n + 1, 0) {  }\n\n        void add(int p, int v) {\n            for (p += 1; p <= n; p += p & -p)\n                a[p] += v;\n        }\n\n        int ask(int p) {\n            int res = 0;\n            for (p += 1; p > 0; p -= p & -p)\n                res += a[p];\n            return res;\n        }\n    };\n\n    vector<int> countOfPeaks(vector<int>& nums, vector<vector<int>>& queries) {\n        int n = nums.size();\n        vector<int> ans, pre(n, 0);\n\n        FenwickTree tr(n);\n\n        for (int i = 1; i < n - 1; ++i) {\n            if (nums[i] > nums[i - 1] && nums[i] > nums[i + 1]) {\n                tr.add(i, 1);\n                pre[i] = 1;\n            }\n        }\n\n        auto update = [&](int p) {\n            if (p <= 0 || p >= n - 1) return ;\n            if (nums[p] > max(nums[p - 1], nums[p + 1])) {\n                if (pre[p] == 0) {\n                    pre[p] = 1;\n                    tr.add(p, 1);\n                }\n            } else {\n                if (pre[p] == 1) {\n                    pre[p] = 0;\n                    tr.add(p, -1);\n                }\n            }\n        };\n\n        for (auto& q : queries) {\n            if (q[0] == 1) {\n                if (q[2] <= q[1] + 1) {\n                    ans.push_back(0);\n                    continue;\n                }\n                int tot = tr.ask(q[2]) - tr.ask(q[1] - 1);\n                if (pre[q[2]] == 1) tot--;\n                if (pre[q[1]] == 1) tot--;\n                ans.push_back(tot);\n            } else if (q[0] == 2) {\n                int index = q[1], val = q[2];\n                nums[index] = val;\n                update(index);\n                update(index - 1);\n                update(index + 1);\n            }\n        }\n        \n        return ans;\n    }\n};",
    "submit_ts": 1718508424.0
}