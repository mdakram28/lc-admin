{
    "username": "wanderingCicada",
    "submission": "class Solution:\n    def countKConstraintSubstrings(self, s: str, k: int, queries: List[List[int]]) -> List[int]:\n        #if i know how many substrings exist total\n        #and i know how many substrings exist that start before l (call this beforeL)\n        #and i know how many substrings exist that end after r (call this afterR)\n        #then my answer for substrings between l and r = total - beforeL - afterR\n\n        #UNLESS i have a substring that starts before l AND ends after R (but if this is the case, then the answer would just be every substring between r and l)\n\n        total = 0\n        zeros = 0\n        ones = 0\n        beforeL = [0]\n        substringsWithStart = []\n        endIndex = 0\n        for startIndex in range(len(s)):\n            while endIndex < len(s):\n                if s[endIndex] == '1':\n                    ones += 1\n                if s[endIndex] == '0':\n                    zeros += 1\n                if zeros > k and ones > k:\n                    if s[endIndex] == '1':\n                        ones -= 1\n                    if s[endIndex] == '0':\n                        zeros -= 1\n                    break\n                endIndex += 1\n            if s[startIndex] == '1':\n                ones -= 1\n            else:\n                zeros -= 1\n            substringsAtStartIndex = endIndex - startIndex\n            total += substringsAtStartIndex\n            substringsWithStart.append(substringsAtStartIndex)\n            beforeL.append(total)\n\n        zeros = 0\n        ones = 0\n        total = 0\n        afterR = [0] * (len(s))\n        endIndex = len(s) - 1\n        for startIndex in range(len(s) - 1, -1, -1):\n            while endIndex >= 0:\n                if s[endIndex] == '1':\n                    ones += 1\n                if s[endIndex] == '0':\n                    zeros += 1\n                if zeros > k and ones > k:\n                    if s[endIndex] == '1':\n                        ones -= 1\n                    if s[endIndex] == '0':\n                        zeros -= 1\n                    break\n                endIndex -= 1\n            if s[startIndex] == '1':\n                ones -= 1\n            else:\n                zeros -= 1\n            substringsAtStartIndex = abs(endIndex - startIndex)\n            total += substringsAtStartIndex\n            if startIndex > 0:\n                afterR[startIndex - 1] = total\n        \n\n\n        ans = []\n        for l, r in queries:\n            if substringsWithStart[l] + l > r:\n                size = r - l + 1\n                ans.append((size + 1 ) * size // 2)\n            else:\n                ans.append(total - beforeL[l] - afterR[r])\n\n        return ans\n\n",
    "submit_ts": "1723952000",
    "subm_id": "1359785340"
}