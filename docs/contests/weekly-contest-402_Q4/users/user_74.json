{
    "username": "ou-hai-ziJHu23dNZ",
    "submission": "class Solution {\n    public List<Integer> countOfPeaks(int[] nums, int[][] queries) {\n        // \u6c42\u51fa\u5cf0\u503c\u5143\u7d20\n        // \u66f4\u65b0\u6570\u7ec4\n        List<Integer> ans = new ArrayList<>();\n        SegmentTree segmentTree = new SegmentTree(0, nums.length);\n        for (int i = 1; i < nums.length - 1; i++) {\n            if (nums[i] > nums[i - 1] && nums[i] > nums[i + 1]) {\n                segmentTree.update(i, i + 1, 1);\n            }\n        }\n        for (int[] q : queries) {\n            if (q[0] == 1) {\n                if (q[2] <= q[1] + 1) {\n                    ans.add(0);\n                } else {\n                    ans.add((int) segmentTree.queryForSum(q[1] + 1, q[2]));\n                }\n            } else {\n                int idx = q[1];\n                int v = q[2];\n                nums[idx] = v;\n                // \u5de6\u8fb9\u662f\u5426\u6539\u53d8\uff1f\n                if (idx != 0) {\n                    if (judge(idx - 1, nums)) {\n                        segmentTree.update(idx - 1, idx, 1);\n                    } else {\n                        segmentTree.update(idx - 1, idx, 0);\n                    }\n                }\n                if (idx != nums.length - 1) {\n                    if (judge(idx + 1, nums)) {\n                        segmentTree.update(idx + 1, idx + 2, 1);\n                    } else {\n                        segmentTree.update(idx + 1, idx + 2, 0);\n                    }\n                }\n                // \u53f3\u8fb9\u662f\u5426\u6539\u53d8\uff1f\n                // \u81ea\u5df1\u662f\u5426\u662f\n                if (judge(idx, nums)) {\n                    segmentTree.update(idx, idx + 1, 1);\n                } else {\n                    segmentTree.update(idx, idx + 1, 0);\n                }\n            }\n        } \n        return ans;\n    }\n    \n    private boolean judge(int idx, int[] nums) {\n        if (idx == 0) {\n            return false;\n        }\n        if (idx == nums.length - 1) {\n            return false;\n        }\n        return nums[idx] > nums[idx - 1] && nums[idx] > nums[idx + 1];\n    }\n    \n    \n    public class SegmentTree {\n\n    // \u6240\u6709\u90fd\u662f\u5de6\u95ed\u53f3\u5f00\u533a\u95f4\uff01\uff01\uff01\uff01\uff01\n    public Node root;\n\n    public SegmentTree(long left, long right) {\n        root = new Node();\n        root.left = left;\n        root.right = right;\n    }\n\n    // \u5bf9\u533a\u95f4\u589e\u52a0val\n    public void add(long left, long right, int val) {\n        addWithNode(root, left, right, val);\n    }\n\n    // \u5c06\u533a\u95f4\u91cd\u7f6e\u6210val\n    public void update(long left, long right, long val) {\n        updateWithNode(root, left, right, val);\n    }\n\n    // \u67e5\u8be2\u6700\u5927\u503c\n    public long queryForMax(long left, long right) {\n        return queryForMaxWithNode(root, left, right);\n    }\n\n    // \u67e5\u8be2\u548c\n    public long queryForSum(long left, long right) {\n        return queryForSumWithNode(root, left, right);\n    }\n\n\n    private long queryForMaxWithNode(Node node, long left, long right) {\n        if (node == null) {\n            return 0;\n        }\n        if (node.left == left && node.right == right) {\n            return node.max;\n        }\n        long mid = (node.left + node.right) / 2;\n        pushDown(node);\n        long res = Long.MIN_VALUE;\n        if (left < mid) {\n            res = Math.max(queryForMaxWithNode(node.leftNode, left, Math.min(right, mid)), res);\n        }\n        if (right > mid) {\n            res = Math.max(queryForMaxWithNode(node.rightNode, Math.max(left, mid), right), res);\n        }\n        return res;\n    }\n\n    private long queryForSumWithNode(Node node, long left, long right) {\n        if (node == null) {\n            return 0;\n        }\n        if (node.left == left && node.right == right) {\n            return node.sum;\n        }\n        long mid = (node.left + node.right) / 2;\n        pushDown(node);\n        long res = 0;\n        if (left < mid) {\n            res += queryForSumWithNode(node.leftNode, left, Math.min(right, mid));\n        }\n        if (right > mid) {\n            res += queryForSumWithNode(node.rightNode, Math.max(left, mid), right);\n        }\n        return res;\n    }\n\n    private void updateWithNode(Node node, long left, long right, long val) {\n        if (node.left == left && node.right == right) {\n            // TODO \u627e\u5230\u6700\u7ec8\u70b9\uff0c\u76f4\u63a5\u4e0b\u63a8\u7b54\u6848\n            node.sum = (node.right - node.left) * val;\n            node.max = val;\n            node.add = val;\n            // \u7531\u4e8e\u662f\u91cd\u7f6e\u64cd\u4f5c\uff0c\u548cadd\u4e0d\u592a\u4e00\u6837\uff0c\u5c06\u5b69\u5b50\u8282\u70b9\u6e05\u7a7a\n            node.leftNode = null;\n            node.rightNode = null;\n            return;\n        }\n        long mid = (node.left + node.right) / 2;\n\n        // pushDown\n        pushDown(node);\n        if (left < mid) {\n            updateWithNode(node.leftNode, left, Math.min(right, mid), val);\n        }\n        if (right > mid) {\n            updateWithNode(node.rightNode, Math.max(left, mid), right, val);\n        }\n        pushUp(node);\n    }\n\n    // \u5f00\u533a\u95f4\n    private void addWithNode(Node node, long left, long right, int val) {\n        if (node.left == left && node.right == right) {\n            // TODO \u627e\u5230\u6700\u7ec8\u70b9\uff0c\u76f4\u63a5\u4e0b\u63a8\u7b54\u6848\n            node.sum += (node.right - node.left) * val;\n            node.max += val;\n            node.add += val;\n            return;\n        }\n        long mid = (node.left + node.right) / 2;\n\n        // pushDown\n        pushDown(node);\n        if (left < mid && node.leftNode != null) {\n            addWithNode(node.leftNode, left, Math.min(right, mid), val);\n        }\n        if (right > mid && node.rightNode != null) {\n            addWithNode(node.rightNode, Math.max(left, mid), right, val);\n        }\n        pushUp(node);\n    }\n\n    // \u5411\u4e0b\u6c47\u603b\uff0c\u4fee\u6539\u3001\u67e5\u8be2\u5b50\u8282\u70b9\u4e4b\u524d\uff0c\u9700\u8981\u8c03\u7528\u6b64\u65b9\u6cd5\uff0c\u6e05\u7a7a\u8282\u70b9add\u503c\n    private void pushDown(Node node) {\n        if (node == null) {\n            return;\n        }\n        if (node.left == node.right - 1) {\n            // \u53ea\u6709\u4e00\u4e2a\u70b9\uff0c\u4e0d\u7528\u4e0b\u63a8\u4e86\n            node.add = 0;\n            return;\n        }\n        long mid = (node.left + node.right) / 2;\n        // \u52a8\u6001\u5f00\u70b9\n        if (node.leftNode == null) {\n            Node leftNode = new Node();\n            leftNode.left = node.left;\n            leftNode.right = mid;\n            node.leftNode = leftNode;\n        }\n        if (node.rightNode == null) {\n            Node rightNode = new Node();\n            rightNode.left = mid;\n            rightNode.right = node.right;\n            node.rightNode = rightNode;\n        }\n        if (node.add == 0) {\n            return;\n        }\n        // TODO \u5b9e\u65f6\u4e0b\u63a8\u7b54\u6848\n        node.leftNode.add += node.add;\n        node.leftNode.max += node.add;\n        node.leftNode.sum += node.add * (node.leftNode.right - node.leftNode.left);\n\n        node.rightNode.add += node.add;\n        node.rightNode.max += node.add;\n        node.rightNode.sum += node.add * (node.rightNode.right - node.rightNode.left);\n\n        node.add = 0;\n    }\n\n    // \u8ba1\u7b97\u5b8c\u5b50\u8282\u70b9\u540e\uff0c\u4e0a\u62a5\u4fe1\u606f\n    private void pushUp(Node node) {\n        if (node.leftNode != null && node.rightNode != null) {\n            // TODO \u6536\u96c6\u4e0b\u9762\u7684\u7b54\u6848\n            node.sum = node.leftNode.sum + node.rightNode.sum;\n            node.max = Math.max(node.leftNode.max, node.rightNode.max);\n        }\n    }\n\n    public class Node {\n        // [left,right) \u5de6\u95ed\u53f3\u5f00\u533a\u95f4\n        public long left;\n        public long right;\n\n        // \u533a\u95f4\u6700\u5927\u503c\n        long max = 0;\n        // \u533a\u95f4\u548c\n        long sum = 0;\n        // \u61d2\u6807\u8bb0(\u9700\u8981\u8c03\u6574\u7684\u5bc4\u5b58\u503c)\n        long add = 0;\n\n        // \u5b69\u5b50\u8282\u70b9\n        Node leftNode;\n        Node rightNode;\n    }\n}\n}",
    "submit_ts": 1718506452.0
}