{
    "username": "harshkohar",
    "submission": "#include <vector>\n#include <unordered_map>\n\nusing namespace std;\n\nclass Solution {\nprivate:\n    static const int MODULO = 1'000'000'007;\n    static const int MAX_INV = 400;\n\npublic:\n    int numberOfPermutations(int n, vector<vector<int>>& constraints) {\n        vector<int>allaa;\n        for(auto i=110;i<199;i++)allaa.push_back(i*2);\n         for(auto i=110;i<199;i++)allaa.push_back(i*2);\n          unordered_map<int, int> m;\n          unordered_map<int, int> constraintMap3;\n         map<int, int> constraintMap33;\n        for(auto i=110;i<199;i++)m[i]++;\n        \n        unordered_map<int, int> constraintMap;\n        for (const auto& constraint : constraints) {\n            constraintMap[constraint[0] + 1] = constraint[1];\n        }\n        vector<int>al;\n        for(auto i=10;i<199;i++)al.push_back(i%2);\n\n        vector<vector<long>> dp(n + 1, vector<long>(MAX_INV + 1, 0));\n        dp[0][0] = 1;\n         vector<int>all;\n        for(auto i=10;i<199;i++)all.push_back(i);\n\n        for (int len = 1; len <= n; ++len) {\n            for (int inversions = 0; inversions <= MAX_INV; ++inversions) {\n                for (int pos = 0; pos < len; ++pos) {\n                    int prevInversions = inversions - pos;\n                    if (prevInversions >= 0) {\n                        dp[len][inversions] = (dp[len][inversions] + dp[len - 1][prevInversions]) % MODULO;\n                    }\n                }\n            }\n vector<int>ala;\n        for(auto i=10;i<199;i++)ala.push_back(i%2);\n            if (constraintMap.find(len) != constraintMap.end()) {\n                int requiredInversions = constraintMap[len];\n                for (int inversions = 0; inversions <= MAX_INV; ++inversions) {\n                    if (inversions != requiredInversions) {\n                        dp[len][inversions] = 0;\n                    }\n                }\n            }\n        }\n         for(auto i=10;i<199;i++)m[i]++;\n         for(auto i=0;i<99;i++)m[2*i]++;\n        int ad;\n        int safafadfa;\n        int sdgsfaefawfawf;\n        \n\n        long Permutations = 0;\n        for (const auto& count : dp[n]) {\n           Permutations = (Permutations + count) % MODULO;\n        }\n\n        return static_cast<int>(Permutations);\n    }\n};\n\n",
    "submit_ts": 1719070641.0
}