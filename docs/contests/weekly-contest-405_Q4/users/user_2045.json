{
    "username": "pratyushojha77",
    "submission": "from typing import List, Dict\nfrom collections import defaultdict\n\nclass TrieNode:\n    def __init__(self):\n        self.children = {}\n        self.cost = float('inf')\n\nclass Trie:\n    def __init__(self):\n        self.root = TrieNode()\n    \n    def insert(self, word: str, cost: int):\n        node = self.root\n        for char in word:\n            if char not in node.children:\n                node.children[char] = TrieNode()\n            node = node.children[char]\n        node.cost = min(node.cost, cost)\n    \n    def search(self, s: str, end: int) -> List[int]:\n        node = self.root\n        results = []\n        for i in range(end, -1, -1):\n            if s[i] not in node.children:\n                break\n            node = node.children[s[i]]\n            if node.cost != float('inf'):\n                results.append((i, node.cost))\n        return results\n\nclass Solution:\n    def minimumCost(self, target: str, words: List[str], costs: List[int]) -> int:\n        n = len(target)\n        dp = [float('inf')] * (n + 1)\n        dp[0] = 0\n\n        # Insert words into the Trie\n        trie = Trie()\n        for word, cost in zip(words, costs):\n            trie.insert(word[::-1], cost)  # Insert reversed word for suffix matching\n\n        # Populate DP array\n        for i in range(1, n + 1):\n            matches = trie.search(target, i - 1)\n            for start, cost in matches:\n                dp[i] = min(dp[i], dp[start] + cost)\n        \n        return dp[n] if dp[n] != float('inf') else -1\n",
    "submit_ts": "1720320309",
    "subm_id": "1312290072"
}