{
    "username": "bikashkundu99",
    "submission": "class Solution {\n    public int minimumCost(String target, String[] words, int[] costs) {\n         int n = target.length();\n        int[] dp = new int[n + 1];\n        \n        // Initialize dp array with infinity, except dp[0]\n        Arrays.fill(dp, Integer.MAX_VALUE);\n        dp[0] = 0;\n        \n        // Using a map to store words based on their starting character for quick access\n        Map<Character, List<int[]>> wordMap = new HashMap<>();\n        for (int i = 0; i < words.length; i++) {\n            char startChar = words[i].charAt(0);\n            wordMap.putIfAbsent(startChar, new ArrayList<>());\n            wordMap.get(startChar).add(new int[]{i, words[i].length(), costs[i]});\n        }\n        \n        // Dynamic programming to update dp array\n        for (int i = 0; i < n; i++) {\n            if (dp[i] == Integer.MAX_VALUE) {\n                continue;\n            }\n            char currentChar = target.charAt(i);\n            if (!wordMap.containsKey(currentChar)) {\n                continue;\n            }\n            for (int[] wordInfo : wordMap.get(currentChar)) {\n                int wordIndex = wordInfo[0];\n                int wordLength = wordInfo[1];\n                int cost = wordInfo[2];\n                if (i + wordLength <= n && target.startsWith(words[wordIndex], i)) {\n                    dp[i + wordLength] = Math.min(dp[i + wordLength], dp[i] + cost);\n                }\n            }\n        }\n        \n        return dp[n] == Integer.MAX_VALUE ? -1 : dp[n];\n    }\n}",
    "submit_ts": "1720322145",
    "subm_id": "1312341923"
}