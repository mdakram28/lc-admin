{
    "username": "MathematicalOoks",
    "submission": "class Solution:    \n    def numberOfPermutations(self, N: int, requirements: List[List[int]]) -> int:\n        '''\n        ideas::\n        i: Length of the subarray (1-based indexing).\n        dp: Dictionary storing valid permutations for previous subarrays.\n        '''\n        max_inv = 400\n        MOD = 10**9 + 7\n        \n        m = {}\n        for e, c in requirements:\n            m[e + 1] = c\n\n        dp = [[0] * (max_inv + 1) for _ in range(N + 1)]\n        dp[0][0] = 1\n        \n        for i in range(1, N + 1):\n            for j in range(max_inv + 1):\n                for k in range(i):\n                    prev = j - k\n                    if prev >= 0:\n                        # IMPORTANT RECCURENCE RELATION\n                        dp[i][j] = (dp[i][j] + dp[i - 1][prev]) % MOD\n                        \n            if i in m:\n                t = m[i]\n                for j in range(max_inv + 1):\n                    if j != t:\n                        dp[i][j] = 0\n                        \n        ans = 0\n        for c in dp[N]:\n            ans = (ans + c) % MOD\n            \n        return ans\n        \n",
    "submit_ts": "1719071490",
    "subm_id": "1296847906"
}