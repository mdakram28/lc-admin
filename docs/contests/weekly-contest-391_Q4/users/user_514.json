{
    "username": "bocha",
    "submission": "class Solution {\npublic:\n    int helper(const vector<pair<int, int>> &sums, const vector<pair<int, int>> &diffs, int idx, const int &n){\n        int sl = sums[0].second == idx ? sums[1].first : sums[0].first;\n        int sr = sums[n-1].second == idx ? sums[n-2].first : sums[n-1].first;\n        int dl = diffs[0].second == idx ? diffs[1].first : diffs[0].first;\n        int dr = diffs[n-1].second == idx ? diffs[n-2].first : diffs[n-1].first;\n        return max(sr - sl, dr - dl);\n    }\n    int minimumDistance(vector<vector<int>>& points) {\n        int n = points.size();\n        vector<pair<int, int>> sums, diffs;\n        for(int i = 0; i < n; ++i){\n            sums.emplace_back(points[i][0] + points[i][1], i);\n            diffs.emplace_back(points[i][0] - points[i][1], i);\n        }\n        sort(sums.begin(), sums.end());\n        sort(diffs.begin(), diffs.end());\n        \n        int res = helper(sums, diffs, sums[0].second, n);\n        res = min(res, helper(sums, diffs, sums[n-1].second, n));\n        res = min(res, helper(sums, diffs, diffs[0].second, n));\n        res = min(res, helper(sums, diffs, diffs[n-1].second, n));\n                  \n        // printf(\"%d %d %d %d\\n\", sums[0], sums[1], sums[n-2], sums[n-1]);\n        // int res1 = min(sums[n-2] - sums[0], sums[n-1] - sums[1]);\n        // int res2 = min(diffs[n-2] - diffs[0], diffs[n-1] - diffs[1]);\n        // int res3 = max(sums.back() - sums.front(), diffs.back() - diffs.front());\n        // printf(\"%d %d %d %d\\n\", diffs[0], diffs[1], diffs[n-2], diffs[n-1]);\n        // printf(\"%d %d %d\\n\", res1, res2, res3);\n        return res;\n    }\n};"
}