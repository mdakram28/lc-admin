{
    "username": "kaartikeyy",
    "submission": "class Solution {\npublic:\n    int minFlips(vector<vector<int>>& matrix) {\n        // int n = grid.size();\n        // int m = grid[0].size();\n        // int ans = 0;\n\n        // for (int i = 0; i < n / 2; ++i) {\n        //     for (int j = 0; j < m / 2; ++j) {\n        //         vector<int> elements = {\n        //             grid[i][j],\n        //             grid[n - i - 1][j],\n        //             grid[i][m - j - 1],\n        //             grid[n - i - 1][m - j - 1]\n        //         };\n\n        //         int ones = count(elements.begin(), elements.end(), 1);\n        //         ans += min(ones, 4 - ones);\n        //     }\n        // }\n\n        // int possible = 0;\n        // int count = 0;\n\n        // if (n % 2 != 0) {\n        //     for (int j = 0; j < m / 2; ++j) {\n        //         if (grid[n / 2][j] != grid[n / 2][m - j - 1]) {\n        //             ans += 1;\n        //             possible += 1;\n        //         } else {\n        //             if (grid[n / 2][j] == 1) {\n        //                 count += 1;\n        //             }\n        //         }\n        //     }\n        // }\n\n        // if (m % 2 != 0) {\n        //     for (int i = 0; i < n / 2; ++i) {\n        //         if (grid[i][m / 2] != grid[n - i - 1][m / 2]) {\n        //             ans += 1;\n        //             possible += 1;\n        //         } else {\n        //             if (grid[i][m / 2] == 1) {\n        //                 count += 1;\n        //             }\n        //         }\n        //     }\n        // }\n\n        // if (n % 2 != 0 && m % 2 != 0 && grid[n /2][m / 2] == 1) ans += 1;\n\n        // if (possible == 0 && count % 2 != 0) {\n        //     ans += 2;\n        // }\n\n        // return ans;\n\n        int rows = matrix.size();\n        int cols = matrix[0].size();\n        int flips = 0;\n\n        for (int i = 0;i< rows/2; ++i) {\n            for (int j = 0; j < cols/2; ++j) {\n                vector<int> cells =\n                {\n                    matrix[i][j],\n                    matrix[rows-i-1][j],\n                    matrix[i][cols-j-1],\n                    matrix[rows-i-1][cols-j-1]\n                };\n\n                int onesCount = 0;\n\n                for(auto it: cells) if(it==1) onesCount++;\n                flips += min(onesCount, 4 - onesCount);\n            }\n        }\n\n        int possibleFlips = 0;\n        int middleOnesCount = 0;\n\n        if (rows % 2 != 0) {\n            for (int j = 0; j < cols / 2; ++j) {\n                if (matrix[rows /2][j]!=matrix[rows / 2][cols - j - 1])\n                {\n                    flips += 1;\n                    possibleFlips += 1;\n                } \n                else if (matrix[rows/2][j]==1) middleOnesCount += 1;\n            }\n        }\n\n        if (cols % 2 != 0) {\n            for (int i = 0; i < rows / 2; ++i)\n            {\n                if (matrix[i][cols / 2] != matrix[rows - i - 1][cols / 2])\n                {\n                    flips += 1;\n                    possibleFlips += 1;\n                } \n                else if (matrix[i][cols / 2] == 1) middleOnesCount += 1;\n            }\n        }\n\n        if (possibleFlips == 0 && middleOnesCount % 2 != 0) flips += 2;\n        if (rows % 2 != 0 && cols % 2 != 0 && matrix[rows / 2][cols / 2] == 1) flips += 1;\n\n\n        return flips;\n    }\n};",
    "submit_ts": "1722699934",
    "subm_id": "1343226682"
}