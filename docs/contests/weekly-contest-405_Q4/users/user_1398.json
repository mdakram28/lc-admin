{
    "username": "lydxlx",
    "submission": "\nimport java.io.*;\nimport java.util.*;\nimport java.util.stream.IntStream;\n\npublic class Solution {\n\n    static class KMP {\n        int next[];\n        String pattern;\n\n        KMP(String p) {\n            pattern = p;\n            next = new int[p.length()];\n            next[0] = -1;\n            int j = -1;\n            for (int i = 1; i < next.length; i++) {\n\n                while (j > -1 && p.charAt(j + 1) != p.charAt(i)) j = next[j];\n                if (p.charAt(j + 1) == p.charAt(i)) j++;\n                next[i] = j;\n            }\n        }\n\n        ArrayList<Integer> kmp(String s) {\n            ArrayList<Integer> ans = new ArrayList<Integer>();\n            int j = -1;\n            for (int i = 0; i < s.length(); i++) {\n\n\n                while (j > -1 && pattern.charAt(j + 1) != s.charAt(i)) j = next[j];\n                if (pattern.charAt(j + 1) == s.charAt(i)) j++;\n                if (j == pattern.length() - 1) { // Find a matching!\n                    ans.add(i + 1 - pattern.length());\n                    j = next[j];\n                }\n            }\n            return ans;\n        }\n    }\n\n    public List<String> validStrings(int n) {\n        List<String> ans = new ArrayList<>();\n        for (int i = 0; i < (1 << n); i++) {\n            boolean valid = true;\n            for (int j = 1; j < n; j++) {\n                if ((i & (1 << j)) == 0 && (i & (1 << (j - 1))) == 0) {\n                    valid = false;\n                    break;\n                }\n            }\n            if (valid) {\n                var s = Integer.toBinaryString(i);\n                ans.add(s.length() == n ? Integer.toBinaryString(i) : \"0\" + Integer.toBinaryString(i));\n            }\n        }\n        return ans;\n\n    }\n\n    static int INF = 1 << 29;\n\n    static class Trie {\n        Trie[] children = new Trie[26];\n        int cost = INF;\n        int min = INF;\n    }\n\n    int[] memo;\n    static Trie root;\n\n    int f(String target, int i) {\n        if (i == target.length()) {\n            return 0;\n        }\n        if (memo[i] != -1) {\n            return memo[i];\n        }\n        int ans = INF;\n        Trie node = root;\n        for (int j = i; j < target.length(); j++) {\n            int index = target.charAt(j) - 'a';\n            if (node.children[index] == null) {\n                break;\n            }\n            node = node.children[index];\n            if (node.min >= ans) break;\n            if (node.cost < INF) ans = Math.min(ans, node.cost + f(target, j + 1));\n        }\n        memo[i] = ans;\n        return ans;\n    }\n\n\n    public int minimumCost(String target, String[] words, int[] costs) {\n        root = new Trie();\n        root.cost = 0;\n        for (int i = 0; i < words.length; i++) {\n            String word = words[i];\n            int cost = costs[i];\n            Trie node = root;\n            for (char ch : words[i].toCharArray()) {\n                int index = ch - 'a';\n                if (node.children[index] == null) {\n                    node.children[index] = new Trie();\n                }\n                node = node.children[index];\n                node.min = Math.min(node.min, costs[i]);\n            }\n            node.cost = Math.min(node.cost, cost);\n        }\n\n        memo = new int[target.length()];\n        Arrays.fill(memo, -1);\n        int ans = f(target, 0);\n        return ans < INF ? ans : -1;\n    }\n\n    public static void main(String[] args) throws Exception {\n        Reader.init(System.in);\n        BufferedWriter cout = new BufferedWriter(new OutputStreamWriter(System.out));\n        System.out.println(\"Start\");\n        {\n            Solution sol = new Solution();\n            // target = \"abcdef\", words = [\"abdef\",\"abc\",\"d\",\"def\",\"ef\"], costs = [100,1,1,10,5]\n            String target = \"abcdef\";\n            String[] words = {\"abdef\", \"abc\", \"d\", \"def\", \"ef\"};\n            int[] costs = {100, 1, 1, 10, 5};\n            System.out.println(sol.minimumCost(target, words, costs));\n        }\n        {\n            Solution sol = new Solution();\n            // target = \"aaaa\", words = [\"z\",\"zz\",\"zzz\"], costs = [1,10,100]\n            String target = \"aaaa\";\n            String[] words = {\"z\", \"zz\", \"zzz\"};\n            int[] costs = {1, 10, 100};\n            System.out.println(sol.minimumCost(target, words, costs));\n        }\n        {\n            Solution sol = new Solution();\n            // \"rrhrzfmk\"\n            //        [\"r\",\"rz\",\"k\",\"rhrzfmk\"]\n            // [11,3,7,8]\n            String target = \"rrhrzfmk\";\n            String[] words = {\"r\", \"rz\", \"k\", \"rhrzfmk\"};\n            int[] costs = {11, 3, 7, 8};\n            System.out.println(sol.minimumCost(target, words, costs));\n\n\n        }\n        {\n            Solution sol = new Solution();\n        }\n\n\n        cout.close();\n    }\n\n\n    /**\n     * Class for buffered reading int and double values\n     */\n    static class Reader {\n        static BufferedReader reader;\n        static StringTokenizer tokenizer;\n\n        /**\n         * call this method to initialize reader for InputStream\n         */\n        static void init(InputStream input) {\n            reader = new BufferedReader(new InputStreamReader(input));\n            tokenizer = new StringTokenizer(\"\");\n        }\n\n        /**\n         * get next word\n         */\n        static String next() throws IOException {\n            while (!tokenizer.hasMoreTokens()) {\n                // TODO add check for eof if necessary\n                tokenizer = new StringTokenizer(reader.readLine());\n            }\n            return tokenizer.nextToken();\n        }\n\n        static int nextInt() throws IOException {\n            return Integer.parseInt(next());\n        }\n\n        static double nextDouble() throws IOException {\n            return Double.parseDouble(next());\n        }\n    }\n}",
    "submit_ts": "1720322891",
    "subm_id": "1312361830"
}