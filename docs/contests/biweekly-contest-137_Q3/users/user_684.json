{
    "username": "tennkei",
    "submission": "//#pragma GCC optimize(\"Ofast\",\"unroll-loops\",\"omit-frame-pointer\",\"inline\")\n//#pragma GCC option(\"arch=native\",\"tune=native\",\"no-zero-upper\")\n//#pragma GCC target(\"avx2\")\n#include <bits/stdc++.h>\nusing namespace std;\n//#define INF 2147483647\n#define infL (1LL<<60)\n#define inf (1<<30)\n#define inf9 (1000000000)\n#define MOD  1000000007 //998244353 //1000000007\n#define EPS 1e-9\n#define Gr 9.8\n#define PI acos(-1)\n#define REP(i,n) for(int (i)=0;(i)<(int)(n);(i)++)\n#define REQ(i,n) for(int (i)=1;(i)<=(int)(n);(i)++)\n#define lch (rt<<1)\n#define rch (rt<<1|1)\n#define readmp(n) for(int i=0,u,v;i<n;i++) {scanf(\"%d%d\",&u,&v); mp[u].push_back(v); mp[v].push_back(u);}\ntypedef  long long ll;\ntypedef pair<int, int> pii;\ntypedef pair<int, vector<int>> piv;\ntypedef pair<ll, ll> pll;\ntypedef long double ld;\ntypedef unsigned int uint;\ntypedef unsigned long long ull;\ntypedef double ValType;\ntemplate<typename  T> void maxtt(T& t1, T t2) {\n    t1=max(t1,t2);\n}\ntemplate<typename  T> void mintt(T& t1, T t2) {\n    t1=min(t1,t2);\n}\n\n\nbool debug = 0;\nint n,m,k;\nint dx[4] = {0,1,0,-1}, dy[4] = {1,0,-1,0};\nstring direc=\"RDLU\";\nconst ll MOD2 = (ll)MOD * (ll)MOD;\nll ln, lk, lm;\nvoid etp(bool f = 0) {\n    puts(f ?\"YES\" : \"NO\");\n    exit(0);\n}\nvoid addmod(int &x, int y, int mod = MOD){\n    x+=y; if (x>=mod) x-=mod;\n    if(x<0) x+=mod;\n    assert(x>=0 && x<mod);\n}\nvoid et(int x=-1) {\n    printf(\"%d\\n\", x); exit(0);\n}\nll fastPow(ll x, ll y, int mod=MOD) {\n    ll ans = 1;\n    while(y>0) {\n        if(y&1) ans = (x * ans)%mod;\n        x = x*x%mod;\n        y>>=1;\n    }\n    return ans;\n}\nll gcd1(ll x, ll y) {\n    return y?gcd1(y,x%y):x;\n}\n\n//#include <atcoder/all>\n//using mint = atcoder::modint998244353;\n#define MAX (1000005)\n\n\nvoid fmain(int tid) {\n    scanf(\"%d\", &n);\n}\nclass Solution {\npublic:\n    long long maximumValueSum(vector<vector<int>>& board) {\n        ll ans = -infL;\n        n = board.size();\n        m = board[0].size();\n        vector<vector<ll>> dp(m,vector<ll>(m, -infL));\n        vector<int> C = board[0];\n        //i==1;\n        REP(j,m) {\n            REP(jj,m) if (jj!=j) {\n                maxtt(dp[j][jj], (ll)C[j]+board[1][jj]);\n            }\n        }\n        REP(j,m) maxtt(C[j], board[1][j]);\n        for(int i=2;i<n;i++) {\n            REP(j,m) {\n                vector<pair<ll,int>> vp;\n                REP(jj,m) if (jj!=j) {\n                    if (vp.size() <= 1) vp.emplace_back(dp[j][jj], jj);\n                    else {\n                        if (dp[j][jj] > vp[0].first) {\n                            vp[1]=vp[0]; vp[0]={dp[j][jj], jj};\n                        } else if (dp[j][jj] > vp[1].first) {\n                            vp[1] = {dp[j][jj], jj};\n                        }\n                    }\n                    if (vp.size()==2 and vp[0].first < vp[1].first) swap(vp[0], vp[1]); \n                }\n                assert(vp.size() == 2);\n                REP(jj,m) if (jj!=j) {\n                    ll tmp=board[i][jj];\n                    if (jj != vp[0].second) tmp+=vp[0].first;\n                    else tmp+=vp[1].first;\n                    maxtt(ans, tmp);\n                }\n            }\n\n            REP(j,m) {\n                REP(jj,m) if (jj!=j) {\n                    maxtt(dp[j][jj], (ll)C[j]+board[i][jj]);\n                }\n            }\n            REP(j,m) maxtt(C[j], board[i][j]);\n        }\n        return ans;\n    }\n};\nint mai1n() {\n//    freopen(\"flappy.in\",\"r\",stdin);\n//    freopen(\"flappy.out\",\"w\",stdout);\n    int t=1;\n//    ios::sync_with_stdio(false);\n//    cin.tie(0); cout.tie(0);\n//    cin>>t;\n//    scanf(\"%d\", &t);\n//    clock_t start = clock();\n    REQ(i,t) {\n       fmain(i);\n    }\n//    cout<<((double)( clock() - start )) / CLOCKS_PER_SEC<<endl;\n    return 0;\n}",
    "submit_ts": "1723907192",
    "subm_id": "556324087"
}