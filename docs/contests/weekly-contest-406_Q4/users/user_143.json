{
    "username": "Sonu_Sanju",
    "submission": "class Solution {\n    public long minimumCost(int m, int n, int[] horizontalCut, int[] verticalCut) {\n         // Sort the cuts in descending order to always pick the highest cost first\n        Integer[] hCuts = Arrays.stream(horizontalCut).boxed().toArray(Integer[]::new);\n        Integer[] vCuts = Arrays.stream(verticalCut).boxed().toArray(Integer[]::new);\n        \n        Arrays.sort(hCuts, Collections.reverseOrder());\n        Arrays.sort(vCuts, Collections.reverseOrder());\n        \n        // Initialize pieces and total cost\n        int horizontalPieces = 1;\n        int verticalPieces = 1;\n        long totalCost = 0;\n        \n        // Pointers to current cut in horizontal and vertical arrays\n        int h = 0, v = 0;\n        \n        // Process all cuts\n        while (h < hCuts.length && v < vCuts.length) {\n            if (hCuts[h] >= vCuts[v]) {\n                totalCost += (long) hCuts[h] * verticalPieces;\n                horizontalPieces++;\n                h++;\n            } else {\n                totalCost += (long) vCuts[v] * horizontalPieces;\n                verticalPieces++;\n                v++;\n            }\n        }\n        \n        // If there are remaining horizontal cuts\n        while (h < hCuts.length) {\n            totalCost += (long) hCuts[h] * verticalPieces;\n            horizontalPieces++;\n            h++;\n        }\n        \n        // If there are remaining vertical cuts\n        while (v < vCuts.length) {\n            totalCost += (long) vCuts[v] * horizontalPieces;\n            verticalPieces++;\n            v++;\n        }\n        \n        return totalCost;\n    }\n}",
    "submit_ts": "1720925117",
    "subm_id": "1320243476"
}