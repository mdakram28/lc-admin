{
    "username": "Dylan Smith",
    "submission": "typedef long long ll;\n\n#define pb push_back\n#define sz(x) (int)x.size()\n#define all(x) begin(x),end(x)\n#define lb(x,y) lower_bound(all(x),y)-begin(x)\nclass Solution {\npublic:\n    ll part1(vector<vector<int>> mat) {\n        int N = sz(mat), M = sz(mat[0]);\n        vector<vector<vector<ll>>> dp(N + 1, vector<vector<ll>>(M + 1, vector<ll>(4, LLONG_MIN)));\n        dp[0][0][0] = 0;\n        for (int i = 0; i <= N; i++) {\n            for (int j = 0; j <= M; j++) {\n                for (int k = 0; k <= 3; k++) {\n                    if (dp[i][j][k] == LLONG_MIN) continue;\n                    if (i + 1 <= N) dp[i + 1][j][k] = max(dp[i + 1][j][k], dp[i][j][k]);\n                    if (j + 1 <= M) dp[i][j + 1][k] = max(dp[i][j + 1][k], dp[i][j][k]);\n                    if (i + 1 <= N && j + 1 <= M && k + 1 <= 3) {\n                        dp[i + 1][j + 1][k + 1] = max(dp[i + 1][j + 1][k + 1], dp[i][j][k] + mat[i][j]);\n                    }\n                }\n            }\n        }\n        return dp[N][M][3];\n    }\n    ll part2(vector<vector<int>> mat) {\n        int N = sz(mat), M = sz(mat[0]);\n        vector<vector<ll>> left(N, vector<ll>(M));\n        for (int i = 0; i < N; i++) {\n            for (int j = 0; j < M; j++) {\n                left[i][j] = mat[i][j];\n                if (j > 0) left[i][j] = max(left[i][j], left[i][j - 1]);\n            }\n        }\n        vector<vector<ll>> downRight(N, vector<ll>(M));\n        for (int i = N - 1; i >= 0; i--) {\n            for (int j = M - 1; j >= 0; j--) {\n                downRight[i][j] = mat[i][j];\n                if (i + 1 < N) downRight[i][j] = max(downRight[i][j], downRight[i + 1][j]);\n                if (j + 1 < M) downRight[i][j] = max(downRight[i][j], downRight[i][j + 1]);\n            }\n        }\n        ll res = LLONG_MIN;\n        for (int j = 1; j < M - 1; j++) {\n            ll cur = LLONG_MIN;\n            for (int i = N - 3; i >= 0; i--) {\n                cur = max(cur, left[i + 1][j - 1] + downRight[i + 2][j + 1]);\n                res = max(res, cur + mat[i][j]);\n            }\n        }\n        return res;\n    }\n    vector<vector<int>> rotate(vector<vector<int>> mat) {\n        int N = sz(mat), M = sz(mat[0]);\n        vector<vector<int>> res(M, vector<int>(N));\n        for (int i = 0; i < N; i++) {\n            for (int j = 0; j < M; j++) {\n                res[j][N - 1 - i] = mat[i][j];\n            }\n        }\n        return res;\n    }\n    long long maximumValueSum(vector<vector<int>>& board) {\n        ll res = LLONG_MIN;\n        for (int t = 0; t < 2; t++) {\n            board = rotate(board);\n            res = max(res, part1(board));\n        }\n        for (int t = 0; t < 4; t++) {\n            board = rotate(board);\n            res = max(res, part2(board));\n        }\n        return res;\n    }\n};",
    "submit_ts": "1723906131",
    "subm_id": "1359036902"
}