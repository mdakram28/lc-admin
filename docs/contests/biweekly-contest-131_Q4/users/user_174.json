{
    "username": "kamui721",
    "submission": "class Solution {\n    public List<Boolean> getResults(int[][] queries) {\n        TreeSet<Integer> ts = new TreeSet<>();\n        int max = 5 * (int) 1e4 + 10;\n        ts.add(max);\n        ts.add(0);\n        List<Boolean> ans = new ArrayList<>();\n        SegTree segTree = new SegTree(max);\n        for (int[] q : queries) {\n            int type = q[0];\n            int x = q[1];\n            int sz = 0;\n            if (q.length > 2)\n                sz = q[2];\n            if (type == 1) {\n                Integer lower = ts.lower(x);\n                Integer higher = ts.higher(x);\n                int left = x - lower;\n                int right = higher - x;\n                segTree.modify(1, 1, max, higher, right);\n                segTree.modify(1, 1, max, x, left);\n                ts.add(x);\n            } else {\n                int query = segTree.query(1, 1, max, 1, x);\n                if (query >= sz) {\n                    ans.add(true);\n                    continue;\n                }\n                Integer floor = ts.floor(x);\n                if (x > floor && x - floor >= sz) {\n                    ans.add(true);\n                    continue;\n                }\n                ans.add(false);\n            }\n        }\n        return ans;\n    }\n\n    class SegTree {\n        int[] max;\n\n        public SegTree(int u) {\n            max = new int[u * 4];\n        }\n\n        private void modify(int o, int l, int r, int idx, int val) {\n            if (l == r) {\n                max[o] = val;\n                return;\n            }\n            var m = (l + r) / 2;\n            if (idx <= m) modify(o * 2, l, m, idx, val);\n            else modify(o * 2 + 1, m + 1, r, idx, val);\n            max[o] = Math.max(max[o * 2], max[o * 2 + 1]);\n        }\n\n        // \u8fd4\u56de\u533a\u95f4 [L,R] \u5185\u7684\u6700\u5927\u503c\n        private int query(int o, int l, int r, int L, int R) { // L \u548c R \u5728\u6574\u4e2a\u9012\u5f52\u8fc7\u7a0b\u4e2d\u5747\u4e0d\u53d8\uff0c\u5c06\u5176\u5927\u5199\uff0c\u89c6\u4f5c\u5e38\u91cf\n            if (L <= l && r <= R) return max[o];\n            var res = 0;\n            var m = (l + r) / 2;\n            if (L <= m) res = query(o * 2, l, m, L, R);\n            if (R > m) res = Math.max(res, query(o * 2 + 1, m + 1, r, L, R));\n            return res;\n        }\n    }\n}",
    "submit_ts": "1716651000",
    "subm_id": "534773281"
}