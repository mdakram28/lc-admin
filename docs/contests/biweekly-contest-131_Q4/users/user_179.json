{
    "username": "power1011",
    "submission": "struct bit_t\n{\n  std::vector<int> arr;\n  bit_t(int n): arr(n) {}\n  void modify(int index, int value)\n  {\n    const int n = arr.size();\n    for(;index < n;)\n    {\n        arr[index] = std::max(arr[index], value);\n        auto low_bit = index & -index;\n        index += low_bit;\n    }\n  }\n  int query(int index) const\n  {\n    int ans = 0;\n    for(;index;)\n    {\n        ans = std::max(ans, arr[index]);\n        auto low_bit = index & -index;\n        index -= low_bit;\n    }\n    return ans;\n  }\n};\nclass Solution {\npublic:\n    //               5\n    //     2\n    // x   x         x\n    // 0 1 2 3 4 5 6 7 8\n\n    //                       \n    //               7\n    //               x \n    // 0 1 2 3 4 5 6 7 8\n    \n    /*\n    modify x y O(log n)\n    query largest number between 0, x O(log n)\n    */\n    vector<bool> getResults(vector<vector<int>>& queries) {\n        std::set<int> obs;\n        obs.insert(0);\n        const auto m = queries.size();\n        for(auto &q:queries)\n        {\n            auto type = q.at(0);\n            if(type == 1)\n            {\n                obs.insert(q.at(1));\n            }\n        }\n        bit_t bit(5 * 10'000 + 1);\n        for(auto it=obs.begin();it!=obs.end();)\n        {\n            auto next_it = it;\n            ++next_it;\n            if(next_it == obs.end())\n            {\n                break;\n            }\n            auto sz = *next_it - *it;\n            bit.modify(*next_it, sz);\n            it = next_it;\n        }\n        std::vector<bool> ans{};\n        for(size_t i=m;i>0;)\n        {\n            --i;\n            auto type = queries.at(i).at(0);\n            auto pos = queries.at(i).at(1);\n            if(type == 1)\n            {\n                auto it = obs.find(pos);\n                auto next_it = it;\n                ++next_it;\n                auto prev_it = it;\n                --prev_it;\n                if(next_it != obs.end())\n                {\n                    auto sz = *next_it - *prev_it;\n                    bit.modify(*next_it, sz);\n                }\n                obs.erase(it);\n            }\n            else if(type == 2)\n            {\n                auto q_size = queries.at(i).at(2);\n                auto first_half = bit.query(pos);\n                auto it = obs.upper_bound(pos);\n                --it;\n                auto second_half = pos - *it;\n                ans.push_back(std::max(first_half, second_half) >= q_size);\n            }\n        }\n        std::reverse(ans.begin(), ans.end());\n        return ans;\n    }\n};",
    "submit_ts": "1716651107",
    "subm_id": "1267632241"
}