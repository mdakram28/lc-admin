{
    "username": "gallant-hellman60e",
    "submission": "from typing import List\n\nclass SegmentTree:\n    def __init__(self, data):\n        self.n = len(data)\n        self.tree = [0] * (2 * self.n)\n        self.build(data)\n\n    def build(self, data):\n        for i in range(self.n):\n            self.tree[self.n + i] = data[i]\n        for i in range(self.n - 1, 0, -1):\n            self.tree[i] = self.tree[i * 2] + self.tree[i * 2 + 1]\n\n    def update(self, pos, value):\n        pos += self.n\n        self.tree[pos] = value\n        while pos > 1:\n            pos //= 2\n            self.tree[pos] = self.tree[pos * 2] + self.tree[pos * 2 + 1]\n\n    def query(self, l, r):\n        l += self.n\n        r += self.n\n        res = 0\n        while l < r:\n            if l % 2:\n                res += self.tree[l]\n                l += 1\n            if r % 2:\n                r -= 1\n                res += self.tree[r]\n            l //= 2\n            r //= 2\n        return res\n\nclass Solution:\n    def countOfPeaks(self, nums: List[int], queries: List[List[int]]) -> List[int]:\n        def is_peak(nums, i):\n            if i <= 0 or i >= len(nums) - 1:\n                return False\n            return nums[i] > nums[i - 1] and nums[i] > nums[i + 1]\n\n        n = len(nums)\n        peaks = [0] * n\n        for i in range(1, n - 1):\n            peaks[i] = 1 if is_peak(nums, i) else 0\n        \n        seg_tree = SegmentTree(peaks)\n\n        results = []\n        for query in queries:\n            if query[0] == 2:  # Update operation\n                index, value = query[1], query[2]\n                nums[index] = value\n                for i in range(max(1, index - 1), min(n - 1, index + 2)):\n                    seg_tree.update(i, 1 if is_peak(nums, i) else 0)\n            elif query[0] == 1:  # Count peaks operation\n                left, right = query[1], query[2]\n                results.append(seg_tree.query(left + 1, right))\n        \n        return results\n\n",
    "submit_ts": 1718506383.0
}