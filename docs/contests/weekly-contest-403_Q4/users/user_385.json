{
    "username": "synchro9z",
    "submission": "class Solution {\npublic:\n    // r1 r2 c1 c2 are closed inteval boundaries\n    int minimumArea(const vector<vector<int>>& grid, int r1, int r2, int c1, int c2) {\n        int left = c2 + 1, right = c1 - 1, top = r2 + 1, bottom = r1 - 1;\n        for (int i = r1; i <= r2; ++i) {\n            for (int j = c1; j <= c2; ++j) {\n                if (grid[i][j] != 0) {\n                    left = min(left, j);\n                    right = max(right, j);\n                    top = min(top, i);\n                    bottom = max(bottom, i);\n                }\n            }\n        }\n        if (left > right || top > bottom) return 0;\n        return (right - left + 1) * (bottom - top + 1);\n    }\n    int minimumSum(vector<vector<int>>& grid) {\n        int m = grid.size(), n = grid[0].size();\n        int min_sum = m * n;\n        // Option 1: three horizontal divisions.\n        for (int i = 0; i < m; ++i) {\n            for (int j = i + 1; j + 1 < m; ++j) {\n                min_sum = min(min_sum, minimumArea(grid,0, i, 0, n-1) + minimumArea(grid,i+1, j, 0, n-1) + minimumArea(grid,j+1, m-1, 0, n-1));\n                // cout << i << \" \" << j << \" \" << min_sum << endl;\n            }\n        }\n        // Option 2: horizontal, then two vertical.\n        for (int i = 0; i < m; ++i) {\n            for (int j = 0; j < n; ++j) {\n                min_sum = min(min_sum, minimumArea(grid, 0, i, 0, n-1) + minimumArea(grid,i+1, m-1, 0, j) + minimumArea(grid,i+1, m-1, j+1, n-1));  \n                // cout << i << \" \" << j << \" \" << min_sum << endl;              \n            }\n        }\n        // Option 3: two vertical, then horizontal.\n        for (int i = 0; i < m; ++i) {\n            for (int j = 0; j < n; ++j) {\n                min_sum = min(min_sum, minimumArea(grid,0, i, 0, j) + minimumArea(grid,0, i, j+1, n-1) + minimumArea(grid,i+1, m-1, 0, n-1));\n                // cout << i << \" \" << j << \" \" << min_sum << endl;\n            }\n        }\n        // Option 4: vertical, then two horizontal.\n        for (int i = 0; i < m; ++i) {\n            for (int j = 0; j < n; ++j) {\n                min_sum = min(min_sum, minimumArea(grid, 0, m-1, 0, j) + minimumArea(grid,0, i, j+1, n-1) + minimumArea(grid,i+1, m-1, j+1, n-1));  \n                // cout << i << \" \" << j << \" \" << min_sum << endl;              \n            }\n        }\n        // Option 5: two horizontal, then vertical.\n        for (int i = 0; i < m; ++i) {\n            for (int j = 0; j < n; ++j) {\n                min_sum = min(min_sum, minimumArea(grid, 0, i, 0, j) + minimumArea(grid,i+1, m-1, 0, j) + minimumArea(grid,0, m-1, j+1, n-1));  \n                // cout << i << \" \" << j << \" \" << min_sum << endl;              \n            }\n        }\n        // Option 6: three vertial divisions.\n        for (int i = 0; i < n; ++i) {\n            for (int j = i + 1; j + 1 < n; ++j) {\n                min_sum = min(min_sum, minimumArea(grid,0, m-1, 0, i) + minimumArea(grid,0, m-1, i+1, j) + minimumArea(grid,0, m-1, j+1, n-1));\n                // cout << i << \" \" << j << \" \" << min_sum << endl;\n            }\n        }\n        return min_sum;\n    }\n};",
    "submit_ts": 1719113907.0
}