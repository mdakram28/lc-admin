{
    "username": "du6587",
    "submission": "class Solution {\n    public int minFlips(int[][] grid) {\n        int m = grid.length, n = grid[0].length, res = 0, m1 = m / 2, n1 = n / 2;\n        for (int i = 0; i < m1; i++)\n            for (int j = 0; j < n1; j++) {\n                int cnt = grid[i][j] + grid[i][n - 1 - j] + grid[m - 1 - i][j] + grid[m - 1 - i][n - 1 - j];\n                res += Math.min(cnt, 4 - cnt);\n            }\n        int diff = 0, cnt = 0;\n        if (m % 2 == 1)\n            for (int j = 0, k = n - 1; j < k; j++, k--) {\n                cnt += grid[m1][j] + grid[m1][k];\n                if (grid[m1][j] != grid[m1][k])\n                    diff++;\n            }\n        if (n % 2 == 1)\n            for (int i = 0, k = m - 1; i < k; i++, k--) {\n                cnt += grid[i][n1] + grid[k][n1];\n                if (grid[i][n1] != grid[k][n1])\n                    diff++;\n            }\n        res += Math.max(Math.min(cnt % 4, 4 - cnt % 4), diff);\n        return res + (m % 2 == 1 && n % 2 == 1 ? grid[m1][n1] : 0);\n    }\n}",
    "submit_ts": "1722698947",
    "subm_id": "1343196822"
}