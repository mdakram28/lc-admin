{
    "username": "Graffirn",
    "submission": "class Solution:\n    def minimumDistance(self, points: List[List[int]]) -> int:\n        def findMax(points):\n            n = len(points)\n            V = [0] * n\n            V1 = [0] * n\n\n            for i in range(n):\n                V[i] = (points[i][0] + points[i][1], points[i])\n                V1[i] = (points[i][0] - points[i][1], points[i])\n\n            V.sort()\n            V1.sort()\n\n            if V[-1][0] - V[0][0] > V1[-1][0] - V1[0][0]:\n                maximum = V[-1][0] - V[0][0]\n                p1 = V[-1][1]\n                p2 = V[0][1]\n            else:\n                maximum = V1[-1][0] - V1[0][0]\n                p1 = V1[-1][1]\n                p2 = V1[0][1]\n            return maximum, p1, p2\n        _, p1, p2 = findMax(points)\n        cnt = 1\n        points_1 = []\n        for p in points:\n            if p[0] == p1[0] and p[1] == p1[1] and cnt:\n                cnt -= 1\n                continue\n            points_1.append(p)\n        m1, _, _ = findMax(points_1)\n        \n        cnt = 1\n        points_2 = []\n        for p in points:\n            if p[0] == p2[0] and p[1] == p2[1] and cnt:\n                cnt -= 1\n                continue\n            points_2.append(p)\n        m2, _, _ = findMax(points_2)\n        \n        return min(m1, m2)"
}