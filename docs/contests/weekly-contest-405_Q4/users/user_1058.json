{
    "username": "madhurgupta12",
    "submission": "#include<bits/stdc++.h>\n\nstruct Node {\n    std::map<char, Node*> c;\n    long mCost;\n};\n\nconst long INF = 1e15; \n\nclass Solution {\npublic:\n    void addWord(Node* root, const std::string& word, long cost) {\n        Node* cur = root;\n        for (char ch : word) {\n            if (cur->c.find(ch) == cur->c.end()) {\n                cur->c[ch] = new Node();\n                cur->c[ch]->mCost = INF;\n            }\n            cur = cur->c[ch];\n        }\n        cur->mCost = std::min(cur->mCost, cost);\n    }\n\n    void updateDP(Node* root, const std::string& target, std::vector<long>& dp, int i) {\n        int j = i;\n        Node* cur = root;\n        while (j <= target.size() && cur->c.find(target[j]) != cur->c.end()) {\n            cur = cur->c[target[j]];\n            dp[i] = std::min(dp[i], dp[j + 1] + cur->mCost);\n            j++;\n        }\n    }\n\n    int minimumCost(std::string target, std::vector<std::string>& words, std::vector<int>& costs) {\n        Node* root = new Node();\n        root->mCost = -1;\n\n        for (size_t i = 0; i < words.size(); ++i) {\n            addWord(root, words[i], costs[i]);\n        }\n\n        int n = target.size();\n        std::string t = ' ' + target; \n        std::vector<long> dp(n + 2, INF);\n        dp[n + 1] = 0;\n\n        for (int i = n; i > 0; --i) {\n            updateDP(root, t, dp, i);\n        }\n\n        return dp[1] >= INF ? -1 : dp[1];\n    }\n};\n",
    "submit_ts": "1720323351",
    "subm_id": "1312373427"
}