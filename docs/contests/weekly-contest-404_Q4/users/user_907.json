{
    "username": "Hiki42",
    "submission": "class Solution:\n    def minimumDiameterAfterMerge(self, edges1: List[List[int]], edges2: List[List[int]]) -> int:\n        def get_radius(edges: List[List[int]]) -> int:\n            mem = defaultdict(list)\n            for left, right in edges:\n                mem[left].append(right)\n                mem[right].append(left)\n            \n            queue = deque([0])\n            seen = set([0])\n            last = 0\n            while queue:\n                size = len(queue)\n                for _ in range(size):\n                    curr = queue.popleft()\n                    for neig in mem[curr]:\n                        if neig not in seen:\n                            queue.append(neig)\n                            seen.add(neig)\n                            last = neig\n            \n            # get from last\n            queue = deque([last])\n            seen = set([last])\n            dist = 0\n            while queue:\n                size = len(queue)\n                dist += 1\n                for _ in range(size):\n                    curr = queue.popleft()\n                    for neig in mem[curr]:\n                        if neig not in seen:\n                            queue.append(neig)\n                            seen.add(neig)\n                            last = neig\n            \n            return dist - 1\n\n        d1, d2 = get_radius(edges1), get_radius(edges2)\n        temp = (d1 + 1) // 2 + 1 + (d2 + 1)//2\n        \n        return max(d1, d2, temp)\n",
    "submit_ts": "1719719553",
    "subm_id": "1304444791"
}