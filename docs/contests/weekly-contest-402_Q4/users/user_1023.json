{
    "username": "LakshmiRam190404",
    "submission": "class SegmentTree {\n        private int[] tree;\n        private int n;\n\n        public SegmentTree(int size) {\n            n = size;\n            tree = new int[4 * size];\n        }\n\n        private void build(int[] nums, int start, int end, int node) {\n            if (start == end) {\n                tree[node] = (start > 0 && start < n - 1 && nums[start] > nums[start - 1] && nums[start] > nums[start + 1]) ? 1 : 0;\n            } else {\n                int mid = (start + end) / 2;\n                build(nums, start, mid, 2 * node + 1);\n                build(nums, mid + 1, end, 2 * node + 2);\n                tree[node] = tree[2 * node + 1] + tree[2 * node + 2];\n            }\n        }\n\n        public void build(int[] nums) {\n            build(nums, 0, n - 1, 0);\n        }\n\n        private void update(int start, int end, int index, int value, int node) {\n            if (start == end) {\n                tree[node] = value;\n            } else {\n                int mid = (start + end) / 2;\n                if (index <= mid) {\n                    update(start, mid, index, value, 2 * node + 1);\n                } else {\n                    update(mid + 1, end, index, value, 2 * node + 2);\n                }\n                tree[node] = tree[2 * node + 1] + tree[2 * node + 2];\n            }\n        }\n\n        public void update(int index, int value) {\n            update(0, n - 1, index, value, 0);\n        }\n\n        private int query(int start, int end, int left, int right, int node) {\n            if (start > right || end < left) {\n                return 0;\n            }\n            if (start >= left && end <= right) {\n                return tree[node];\n            }\n            int mid = (start + end) / 2;\n            int leftSum = query(start, mid, left, right, 2 * node + 1);\n            int rightSum = query(mid + 1, end, left, right, 2 * node + 2);\n            return leftSum + rightSum;\n        }\n\n        public int query(int left, int right) {\n            return query(0, n - 1, left, right, 0);\n        }\n    }\nclass Solution {\n    public List<Integer> countOfPeaks(int[] nums, int[][] queries) {\n        int n = nums.length;\n        SegmentTree segTree = new SegmentTree(n);\n        segTree.build(nums);\n        List<Integer> result = new ArrayList<>();\n        for (int query[] : queries) {\n            int type = query[0];\n            if (type == 1) {\n                int li = query[1], ri = query[2];\n                if (li == ri) {\n                    result.add(0);\n                } else {\n                    result.add(segTree.query(li + 1, ri - 1));\n                }\n            } else if (type == 2) {\n                int index = query[1];\n                int val = query[2];\n                nums[index] = val;\n                if (index > 0 && index < n - 1) {\n                    segTree.update(index, (nums[index] > nums[index - 1] && nums[index] > nums[index + 1]) ? 1 : 0);\n                } if (index - 1 > 0) {\n                    segTree.update(index - 1, (nums[index - 1] > nums[index - 2] && nums[index - 1] > nums[index]) ? 1 : 0);\n                } if (index + 1 < n - 1) {\n                    segTree.update(index + 1, (nums[index + 1] > nums[index] && nums[index + 1] > nums[index + 2]) ? 1 : 0);\n                }\n            }\n        }\n        return result;\n    }\n}",
    "submit_ts": 1718509031.0
}