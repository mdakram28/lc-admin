{
    "username": "ltf0501",
    "submission": "class Solution {\npublic:\n    bool canReachCorner(int X, int Y, vector<vector<int>>& circles) {\n        int n = int(circles.size());\n        int m = n + 4 + 2;\n        vector<int> fa(m);\n        iota(fa.begin(), fa.end(), 0);\n        function<int(int)> find = [&](int x)->int {\n            return fa[x] == x ? x : fa[x] = find(fa[x]);\n        };\n        auto merge = [&](int x, int y) {\n           //cout << \"try \" << x << ' ' << y << '\\n';\n            x = find(x), y = find(y);\n            if (x == y) return;\n             //cout << x << ' ' << y << '\\n';\n            fa[x] = y;\n        };\n        auto get_circle = [&](int i) {\n            return make_tuple(circles[i][0], circles[i][1], circles[i][2]);\n        };\n        auto is_intersect = [&](int i, int j) {\n            int x = circles[i][0], y = circles[i][1], r = circles[i][2];\n            int xx = circles[j][0], yy = circles[j][1], rr = circles[j][2];\n            int64_t dis2 = 1LL * (x - xx) * (x - xx) + 1LL * (y - yy) * (y - yy);\n            //cout << dis2 << r << ' ' << rr << '\\n';\n            if (1LL * (r + rr) * (r + rr) >= dis2) return true;\n            else return false;\n        };\n        int st = n, ed = m - 1;\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                if (is_intersect(i, j)) merge(i, j);\n            }\n        }\n        //cout << \"ok\\n\";\n        merge(n, n + 1), merge(n, n + 2);\n        merge(n + 3, n + 5), merge(n + 4, n + 5);\n        for (int i = 0; i < n; i++) {\n            auto [x, y, r] = get_circle(i);\n            if (y - r <= 0) merge(i, n + 1);\n            if (y + r >= Y) merge(i, n + 3);\n            if (x + r >= X) merge(i, n + 2);\n            if (x - r <= 0) merge(i, n + 4);\n        }\n\n        if (find(st) == find(ed)) return false;\n        else return true;\n    }\n};",
    "submit_ts": "1722136477",
    "subm_id": "1335735693"
}