{
    "username": "AlthafHussain",
    "submission": "class Solution {\n    HashMap<Integer, Integer> dp[][];\n    public int minimumDifference(int[] nums, int k) {\n        int n = nums.length;\n        dp = new HashMap[n][2];\n        return f(0, 0, -1, nums, k);\n    }\n    int f(int i, int flag, int and, int nums[], int k){\n        if(i == nums.length){\n            if(and != -1)\n            return Math.abs(and-k);\n            else return (int)1e9;\n        }\n        if(dp[i][flag] != null && dp[i][flag].get(and) != null) return dp[i][flag].get(and);\n        if(flag == 1){\n           int aus1 = Math.abs(and-k);\n           int aus2 = f(i+1, flag, and&(nums[i]), nums, k);\n           if(dp[i][flag] == null)\n           dp[i][flag] = new HashMap<>();\n           dp[i][flag].put(and, Math.min(aus1, aus2));\n           return Math.min(aus1, aus2);\n           \n        }\n        else{\n           int aus1 = f(i+1, flag, and, nums, k);\n           int aus2 = f(i+1, 1, nums[i], nums, k);\n           if(dp[i][flag] == null)\n           dp[i][flag] = new HashMap<>();\n           dp[i][flag].put(and, Math.min(aus1, aus2));\n           return Math.min(aus1, aus2);\n        }\n    }\n}\n",
    "submit_ts": 1717298149.0
}