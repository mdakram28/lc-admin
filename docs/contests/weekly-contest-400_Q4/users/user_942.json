{
    "username": "osvarp",
    "submission": "class Solution {\n    private:\n    int ilog2( int num ) { return sizeof(int)*8 - __builtin_clz(num) -1;}\n    vector<vector<int>> sparse;\n    void buildSparse( vector<int>&ref ) {\n        sparse.assign( ilog2( ref.size() )+1, vector<int>(ref.size()) );\n        for ( int i = 0 ; i < (int)ref.size() ; ++i ) sparse[0][i] = ref[i];\n        for ( int i = 1 ; i <= ilog2(ref.size()) ; ++i ) {\n            for ( int j = 0 ; j+(1<<i) <= (int)ref.size() ; ++j ) {\n                sparse[i][j] = sparse[i-1][j] & sparse[i-1][j+(1<<(i-1))];\n            }\n        }\n    }\n    int query( int l, int r ) {\n        int log = ilog2( r-l+1 );\n        int res = sparse[log][l] & sparse[log][r-(1<<log)+1];\n        return res;\n    }\n    int n;\n\n    int leftBoundSearch( int strt, int k ) {\n        int r = n-1, m, l = strt, res = 1e9;\n        while ( l <= r ) {\n            m = (r+l)/2;\n            //cout << \"m \" << m << \" -> \" << query(strt,m) << endl;\n            if ( query( strt, m ) > k ) {\n                l = m+1;\n            } else {\n                r = m-1;\n            }\n            res = min( res, abs(k-query(strt,m)) );\n        }\n        //cout << strt << \" -> \" << res << endl;\n        return res;\n    }\n\npublic:\n    int minimumDifference(vector<int>& nums, int k) {\n        n = nums.size();\n        buildSparse( nums );\n        int res = 1e9;\n        for ( int i = 0 ; i < n ; ++i ) {\n            res = min( res, leftBoundSearch( i, k ) );\n        }\n        return res;\n    }\n};",
    "submit_ts": 1717299470.0
}