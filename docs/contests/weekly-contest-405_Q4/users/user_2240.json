{
    "username": "21R01A04M7",
    "submission": "#include <string>\n#include <vector>\n#include <unordered_map>\n#include <climits>\nusing namespace std;\n\nclass TrieNode {\npublic:\n    unordered_map<char, TrieNode*> children;\n    vector<pair<int, int>> word_ends; // (index, cost)\n\n    TrieNode() {}\n};\n\nclass Trie {\npublic:\n    TrieNode* root;\n\n    Trie() {\n        root = new TrieNode();\n    }\n\n    void insert(string word, int index, int cost) {\n        TrieNode* node = root;\n        for (char c : word) {\n            if (!node->children.count(c)) {\n                node->children[c] = new TrieNode();\n            }\n            node = node->children[c];\n        }\n        node->word_ends.push_back({index, cost});\n    }\n};\n\nclass Solution {\npublic:\n    int minimumCost(string target, vector<string>& wordList, vector<int>& wordCosts) {\n        int n = target.size();\n        vector<int> dp(n + 1, INT_MAX);\n        dp[0] = 0; // Base case: cost to form empty string is 0\n\n        Trie trie;\n        for (int i = 0; i < wordList.size(); ++i) {\n            trie.insert(wordList[i], i, wordCosts[i]);\n        }\n\n        for (int i = 0; i < n; ++i) {\n            if (dp[i] == INT_MAX) {\n                continue;\n            }\n            TrieNode* node = trie.root;\n            for (int j = i; j < n; ++j) {\n                char c = target[j];\n                if (node->children.count(c)) {\n                    node = node->children[c];\n                    for (auto& p : node->word_ends) {\n                        int wordLength = wordList[p.first].size();\n                        if (i + wordLength <= n) {\n                            dp[i + wordLength] = min(dp[i + wordLength], dp[i] + p.second);\n                        }\n                    }\n                } else {\n                    break;\n                }\n            }\n        }\n\n        return dp[n] == INT_MAX ? -1 : dp[n];\n    }\n};\n",
    "submit_ts": "1720324429",
    "subm_id": "1312399248"
}