{
    "username": "sank555",
    "submission": "from typing import List\n\nclass SegmentTree:\n    def __init__(self, nums):\n        self.n = len(nums)\n        self.tree = [0] * (4 * self.n)\n        self.lazy = [0] * (4 * self.n)\n        self.build(nums, 0, 0, self.n - 1)\n\n    def build(self, nums, index, low, high):\n        if low == high:\n            self.tree[index] = nums[low]\n        else:\n            mid = (low + high) // 2\n            self.build(nums, 2 * index + 1, low, mid)\n            self.build(nums, 2 * index + 2, mid + 1, high)\n            self.tree[index] = self.tree[2 * index + 1] + self.tree[2 * index + 2]\n\n    def range_query(self, left, right):\n        return self.range_query_util(0, 0, self.n - 1, left, right)\n\n    def range_query_util(self, index, low, high, left, right):\n        if self.lazy[index] != 0:\n            self.tree[index] += (high - low + 1) * self.lazy[index]\n            if low != high:\n                self.lazy[2 * index + 1] += self.lazy[index]\n                self.lazy[2 * index + 2] += self.lazy[index]\n            self.lazy[index] = 0\n\n        if low >= left and high <= right:\n            return self.tree[index]\n        elif low > right or high < left:\n            return 0\n        else:\n            mid = (low + high) // 2\n            l = self.range_query_util(2 * index + 1, low, mid, left, right)\n            r = self.range_query_util(2 * index + 2, mid + 1, high, left, right)\n            return l + r\n\n    def update_range(self, left, right, delta):\n        self.update_range_util(0, 0, self.n - 1, left, right, delta)\n\n    def update_range_util(self, index, low, high, left, right, delta):\n        if self.lazy[index] != 0:\n            self.tree[index] += (high - low + 1) * self.lazy[index]\n            if low != high:\n                self.lazy[2 * index + 1] += self.lazy[index]\n                self.lazy[2 * index + 2] += self.lazy[index]\n            self.lazy[index] = 0\n\n        if low > right or high < left:\n            return\n\n        if low >= left and high <= right:\n            self.tree[index] += (high - low + 1) * delta\n            if low != high:\n                self.lazy[2 * index + 1] += delta\n                self.lazy[2 * index + 2] += delta\n            return\n\n        mid = (low + high) // 2\n        self.update_range_util(2 * index + 1, low, mid, left, right, delta)\n        self.update_range_util(2 * index + 2, mid + 1, high, left, right, delta)\n        self.tree[index] = self.tree[2 * index + 1] + self.tree[2 * index + 2]\n\n    def update(self, i, val):\n        delta = val - self.range_query(i, i)\n        self.update_range(i, i, delta)\n\nclass Solution:\n    def countOfPeaks(self, nums: List[int], queries: List[List[int]]) -> List[int]:\n        def is_peak(nums, i):\n            if i <= 0 or i >= len(nums) - 1:\n                return False\n            return nums[i - 1] < nums[i] > nums[i + 1]\n\n        def get_peak_value(nums, i):\n            return 1 if is_peak(nums, i) else 0\n\n        N = len(nums)\n        peaks = [get_peak_value(nums, i) for i in range(N)]\n        \n        st = SegmentTree(peaks)\n\n        ans = []\n        for query in queries:\n            if query[0] == 1:\n                li, ri = query[1], query[2]\n\n                ans.append(max(0,st.range_query(li, ri)-get_peak_value(nums,li)-get_peak_value(nums,ri)))\n\n            elif query[0] == 2:\n                index, val = query[1], query[2]\n                nums[index] = val\n                for i in range(max(1, index - 1), min(N - 1, index + 1) + 1):\n                    st.update(i, get_peak_value(nums, i))\n\n        return ans\n",
    "submit_ts": 1718509153.0
}