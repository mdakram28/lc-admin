{
    "username": "mirror05",
    "submission": "class Solution {\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int n = target.size();\n        vector<int> dp(n + 1, INT_MAX);\n        dp[0] = 0;\n\n        unordered_map<string, vector<int>> wordCostMap;\n        for (int i = 0; i < words.size(); ++i) {\n            wordCostMap[words[i]].push_back(costs[i]);\n        }\n\n        for (int i = 0; i < n; ++i) {\n            if (dp[i] == INT_MAX) continue;\n\n            for (const auto& pair : wordCostMap) {\n                const string& word = pair.first;\n                int len = word.size();\n                if (i + len <= n && target.compare(i, len, word) == 0) {\n                    for (int cost : pair.second) {\n                        dp[i + len] = min(dp[i + len], dp[i] + cost);\n                    }\n                }\n            }\n        }\n\n        return dp[n] == INT_MAX ? -1 : dp[n];\n    }\n};",
    "submit_ts": "1720323090",
    "subm_id": "1312367085"
}