{
    "username": "Munbo",
    "submission": "import bisect\nimport math\nclass Solution:\n    def getResults(self, queries: list[list[int]]) -> list[bool]:\n        barrier = []\n        before_max_place = []\n        res = []\n        for query in queries:\n            if query[0]==1:\n                index = bisect.bisect_right(barrier,query[1])\n                barrier.insert(index,query[1])\n                if index==0:\n                    before_max_place.insert(index,barrier[index])\n                    try:\n                        cut_length = barrier[index+1]\n                    except:\n                        cut_length = math.inf\n                else:\n                    before_max_place.insert(index,max(barrier[index]-barrier[index-1],before_max_place[index-1]))\n                    try:\n                        cut_length = barrier[index+1]-barrier[index-1]\n                    except:\n                        cut_length = math.inf\n                for i in range(index+1,len(before_max_place)):\n                    if cut_length<before_max_place[i]:\n                        break\n                    before_max_place[i] = max(before_max_place[i-1],barrier[i]-barrier[i-1])\n            elif query[0]==2:\n                index = bisect.bisect_right(barrier,query[1])-1\n                if len(barrier)==0:\n                    res.append(query[1]>=query[2])\n                elif query[1]>=query[2] and max(before_max_place[index],query[1]-barrier[index])>=query[2]:\n                    res.append(True)\n                else:\n                    res.append(False)\n            else:\n                print(f'error with query={query}')\n\n        return res",
    "submit_ts": "1716652677",
    "subm_id": "534779805"
}