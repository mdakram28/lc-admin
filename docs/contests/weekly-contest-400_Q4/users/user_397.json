{
    "username": "ampish",
    "submission": "#include <vector>\n#include <algorithm>\n#include <climits>\n\n#define MAX 100003\n#define bitscount 32\n\nint prefix_count[bitscount][MAX];\n\nvoid findPrefixCount(vector<int>& arr, int n) {\n    for (int i = 0; i < bitscount; i++) {\n        prefix_count[i][0] = ((arr[0] >> i) & 1);\n        for (int j = 1; j < n; j++) {\n            prefix_count[i][j] = ((arr[j] >> i) & 1);\n            prefix_count[i][j] += prefix_count[i][j - 1];\n        }\n    }\n}\n\nint rangeAnd(int l, int r, vector<int>& nums) {\n    int ans = 0;\n    for (int i = 0; i < bitscount; i++) {\n        int x;\n        if (l == 0)\n            x = prefix_count[i][r];\n        else\n            x = prefix_count[i][r] - prefix_count[i][l - 1];\n\n        if (x == r - l + 1)\n            ans = (ans | (1 << i));\n    }\n    return ans;\n}\n\nclass Solution {\nprivate:\n    int calc(int l, int r, vector<int>& nums) {\n        return rangeAnd(l, r, nums);\n    }\npublic:\n    int minimumDifference(vector<int>& nums, int k) {\n        int n = nums.size();\n        findPrefixCount(nums, n);\n        int minDiff = INT_MAX;\n\n        for (int i = 0; i < n; i++) {\n            int low = i;\n            int high = n - 1;\n            int ans = INT_MAX;\n\n            while (low <= high) {\n                int mid = low + (high - low) / 2;\n                int res = calc(i, mid, nums);\n                if (res >= k) {\n                    ans = min(ans, res - k);\n                    low = mid + 1;\n                } else {\n                    high = mid - 1;\n                }\n            }\n\n            if (low < n) {\n                ans = min(ans, abs(k - calc(i, low, nums)));\n            }\n\n            minDiff = min(minDiff, ans);\n        }\n\n        return minDiff;\n    }\n};\n",
    "submit_ts": 1717298008.0
}