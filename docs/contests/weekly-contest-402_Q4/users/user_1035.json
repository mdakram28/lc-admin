{
    "username": "__kaus__",
    "submission": "class Solution {\n    \n    class BIT\n    {\n        public:\n            vector<int> bit;\n            int n;\n            void update(int x,int delta)//adds delta at index x\n            {\n                while(x <= n)\n                {\n                    bit[x] += delta;\n                    x += x & -x;\n                }\n            }\n\n            int query(int x)\n            {\n                int sum = 0;\n                while(x > 0)\n                {\n                    sum += bit[x];\n                    x -= x&-x;\n                }\n                return sum;\n            }\n    };\n\n    BIT b;\n    \n    void print(const vector<int> &v)\n    {\n        for(const int &val: v)\n        {\n            cout<<val<<\" \";\n        }\n        cout<<\"\\n\";\n    }\n    \npublic:\n    vector<int> countOfPeaks(vector<int>& nums, vector<vector<int>>& queries)\n    {\n        int n = nums.size();\n        vector<int> peak(n, 0);\n        for(int i=1;i<n-1;i++)\n        {\n            if(nums[i] > nums[i-1] && nums[i] > nums[i+1])\n            {\n                peak[i] = 1;\n            }\n        }\n        b.bit = vector<int>(n + 1, 0);\n        b.n = n;\n        for(int i=0;i<n;i++)\n        {\n            b.update(i + 1, peak[i]);\n        }\n        vector<int> res;\n        //print(peak);\n        for(const auto &q: queries)\n        {\n            if(q[0] == 1)\n            {\n                if(q[2] - q[1] < 2)\n                {\n                    res.push_back(0);\n                }\n                else\n                {\n                    res.push_back(b.query(q[2]) - b.query(q[1] + 1));\n                }\n            }\n            else\n            {\n                //print(peak);\n                int i = q[1];\n                nums[i] = q[2];\n                if(i - 1 >= 0 && i + 1 < n)\n                {\n                    int op = peak[i];\n                    peak[i] = (nums[i] > nums[i-1]) && (nums[i] > nums[i+1]);\n                    b.update(i + 1, peak[i] - op);\n                }\n                int j = i - 1;\n                if(j - 1 >= 0 && j + 1 < n)\n                {\n                    int op = peak[j];\n                    peak[j] = (nums[j] > nums[j-1]) && (nums[j] > nums[j+1]);\n                    b.update(j + 1, peak[j] - op);\n                }\n                int k = i + 1;\n                if(k - 1 >= 0 && k + 1 < n)\n                {\n                    int op = peak[k];\n                    peak[k] = (nums[k] > nums[k-1]) && (nums[k] > nums[k+1]);\n                    b.update(k + 1, peak[k] - op);\n                }\n                //print(peak);\n            }\n        }\n        return res;\n    }\n};",
    "submit_ts": 1718508160.0
}