{
    "username": "suraj_0491",
    "submission": "class Solution {\npublic:\n    long long countSubarrays(vector<int>& vec, int int_k) {\n        long long epsilon = 0; \n        int n = vec.size();\n        \n        unordered_map<long long, long long> gamma;\n\n        int alpha = 0;  // Index for it\n        while (alpha < n) {\n            \n            unordered_map<long long, long long> delta;  \n            if (int_k == vec[alpha]) {\n                ++epsilon;  // Increment count \n            }\n\n            delta[vec[alpha]] = 1;  // Record the occ. of the curr ele in delta map\n\n            auto beta = gamma.begin(); \n            while (beta != gamma.end()) {\n                long long val = beta->first;  \n                long long freq = beta->second;  // Frequency of occurrence of the previous result\n                long long newAndResult = val & vec[alpha];  // Compute the AND result with the current element\n                \n                if (newAndResult == int_k) {\n                    epsilon += freq;  // If the AND result equals int_k, add the frequency to the count\n                }\n                \n                delta[newAndResult] =  delta[newAndResult] + freq;  // Update the current results map with the new AND result\n                ++beta;  // Move to the next entry in the previous results map\n            }\n            \n            gamma = delta;  // Update previous results map with current results\n            ++alpha;  \n        }\n        \n        return epsilon; \n    }\n};\n",
    "submit_ts": "1720278843",
    "subm_id": "1311726657"
}