{
    "username": "aksharye",
    "submission": "class Solution {\npublic:\n    int maximumLength(vector<int>& nums, int k) {\n        int n = nums.size();\n        int dp [n][k+1];\n        int maxStore [n][k+1];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j <= k; j++) {\n                dp[i][j] = 1;\n                maxStore[i][j] = 1;\n            }\n        }\n        \n        int ans = 1;\n        map<int,int> last;\n\n        set<int> keys;\n        int twolast = -1;\n        int twoval = -1;\n        int oneval = nums[0];\n        last[nums[0]] = 0;\n        keys.insert(nums[0]);\n        for (int i = 1; i < n; i++) {\n            if (nums[i] != nums[i-1]) {\n                twoval = oneval;\n                oneval = nums[i-1];\n                twolast = i-1;\n            }\n            for (int c = 0; c <= k; c++) {\n                if (keys.count(nums[i])) dp[i][c] = max(dp[last[nums[i]]][c]+1, dp[i][c]);\n                if (c > 0 && twolast != -1) {\n                    dp[i][c] = max(maxStore[twolast][c-1]+1, dp[i][c]);\n                }\n                ans = max(ans, dp[i][c]);\n                maxStore[i][c] = max(maxStore[i-1][c], dp[i][c]);\n            }\n            keys.insert(nums[i]);\n            last[nums[i]] = i;\n        }\n        \n\n        return ans;\n        \n    }\n};",
    "submit_ts": 1717861363.0
}