{
    "username": "jimi1105",
    "submission": "class Solution {\npublic:\n    int numberOfAlternatingGroups(vector<int>& arr, int k) {\n        int numFound = 0;\n    int i = 0;\n    int j = 1;\n    int n = arr.size();\n\n\n// void DFS(struct Graph* graph, int vertex, bool visited[]) {\n//     visited[vertex] = true;\n//     printf(\"%d \", vertex);\n \n//     struct Node* currentNode = graph->array[vertex].head;\n//     while (currentNode) {\n//         int adjacentVertex = currentNode->data;\n//         if (!visited[adjacentVertex]) {\n//             DFS(graph, adjacentVertex, visited);\n//         }\n//         currentNode = currentNode->next;\n//     }\n// }\n    while (j < n + k && i < n) {\n        int tempJ = j;\n        int tempEnd = tempJ % n;\n\n//         void DFSTraversal(struct Graph* graph, int* order, int orderSize) {\n//     bool* visited = (bool*)malloc(graph->vertices * sizeof(bool));\n//     for (int i = 0; i < graph->vertices; i++) {\n//         visited[i] = false;\n//     }\n \n//     for (int i = 0; i < orderSize; i++) {\n//         if (!visited[order[i]]) {\n//             DFS(graph, order[i], visited);\n//         }\n//     }\n \n//     free(visited);\n// }\n\n        while (arr[tempEnd] != arr[(tempEnd - 1 + n) % n] && (tempJ < (n + k - 1))) {\n            tempJ++;\n            tempEnd = tempJ % n;\n        }\n\n        numFound += max(tempJ - i - k + 1, 0);\n        i = tempJ;\n        j = i + 1;\n    }\n\n    return numFound;\n    }\n};",
    "submit_ts": "1720280363",
    "subm_id": "1311786586"
}