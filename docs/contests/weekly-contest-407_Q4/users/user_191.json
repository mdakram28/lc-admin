{
    "username": "Ivan_len",
    "submission": "class Solution {\npublic:\n    long long minimumOperations(vector<int>& nums, vector<int>& target) {\n        int n = nums.size();\n        vector<long long> dif(n);\n        for (int i = 0; i < n; i++) dif[i] = target[i] - nums[i];\n        dif.push_back(0);\n        vector<long long> d(n + 1);\n        for (int i = 0; i <= n; i++) {\n            if (i == 0) d[i] = dif[i];\n            else d[i] = dif[i] - dif[i - 1];\n        }\n        // made d 0\n        queue<pair<long long, long long>> pos, neg;\n        for (int i = 0; i <= n; i++) {\n            if (d[i] > 0) pos.push(make_pair(i, d[i]));\n            else if (d[i] < 0) neg.push(make_pair(i, -d[i]));\n        }\n        long long ans = 0;\n        while (!pos.empty()) {\n            assert(!neg.empty());\n            int idxpos = pos.front().first;\n            int idxneg = neg.front().first;\n            if (idxpos > idxneg) swap(pos, neg);\n            long long have = pos.front().second;\n            ans += have;\n            pos.pop();\n            while (have) {\n                if (have >= neg.front().second) {\n                    have -= neg.front().second;\n                    neg.pop();\n                }\n                else {\n                    neg.front().second -= have;\n                    have = 0;\n                }\n            }\n        }\n        return ans;\n    }\n};",
    "submit_ts": "1721530716",
    "subm_id": "1327941761"
}