{
    "username": "nevergiveup",
    "submission": "class Solution {\n    \n\n    private long[][] dp;\n    private long[] acc;\n\n    private final long MOD = 1000_000_007L;\n\n    public int numberOfPermutations(int n, int[][] requirements) {\n        Map<Integer , Integer> endMap = new HashMap<>();\n        for (int[] req : requirements) {\n            endMap.put(req[0] , req[1]);\n        }\n        dp = new long[n][401];\n        acc = new long[401];\n        dp[0][0] = 1;\n        // initial is invalid\n        if (endMap.containsKey(0) && endMap.get(0) > 0) {\n            dp[0][0] = 0;\n        }\n        acc[0] = dp[0][0];\n        for (int i = 1;i <= 400;i ++) {\n            acc[i] = acc[i - 1] + dp[0][i];\n        }\n        for (int i = 1;i < n;i ++) {\n            // check all the inv\n            for (int j = 0;j <= 400;j ++) {\n                int l = Math.max(j - i , 0) , r = j;\n                long result = acc[r];\n                if (l - 1 >= 0) {\n                    result = (result - acc[l - 1] + MOD) % MOD;\n                }\n                dp[i][j] = result;\n            }\n            // mask dp when needed\n            if (endMap.containsKey(i)) {\n                int count = endMap.get(i);\n                for (int j = 0;j <= 400;j ++) {\n                    if (j != count) {\n                        dp[i][j] = 0;\n                    }\n                }\n            }\n            // build acc again\n            for (int j = 0;j <= 400;j ++) {\n                acc[j] = dp[i][j];\n                if (j > 0) {\n                    acc[j] = (acc[j - 1] + dp[i][j]) % MOD;\n                }\n            }\n        }\n        long ans = 0;\n        for (int j = 0;j <= 400;j ++) {\n            ans = (ans + dp[n - 1][j]) % MOD;\n        }\n        return (int) ans;\n    }\n\n\n}",
    "submit_ts": "1719069231",
    "subm_id": "1296790569"
}