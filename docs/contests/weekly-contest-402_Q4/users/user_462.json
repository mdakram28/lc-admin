{
    "username": "pikapika123",
    "submission": "from typing import List\n\n\nclass FenwickTree:\n    def __init__(self, n):\n        self.a = [0] * (n + 1)\n        self.n = n\n\n    def sum(self, i):\n        res = 0\n        while i > 0:\n            res += self.a[i]\n            i -= (i & -i)\n        return res\n\n    def update(self, i, x):\n        while i <= self.n:\n            self.a[i] += x\n            i += (i & -i)\n\n\nclass Solution:\n    def countOfPeaks(self, nums: List[int], queries: List[List[int]]) -> List[int]:\n        n = len(nums)\n\n        def get_peak(idx):\n            return 1 if 0 < idx < n - 1 and nums[idx - 1] < nums[idx] > nums[idx + 1] else 0\n\n        a = [get_peak(i) for i in range(n)]\n        bit = FenwickTree(n)\n\n        def change(idx, new_val):\n            if new_val != a[idx]:\n                bit.update(idx + 1, new_val - a[idx])\n                a[idx] = new_val\n\n        for i, x in enumerate(a):\n            bit.update(i + 1, x)\n        ans = []\n        for t, v1, v2 in queries:\n            if t == 1:\n                l, r = v1, v2\n                if r - l + 1 < 3:\n                    ans.append(0)\n                else:\n                    ans.append(bit.sum(r) - bit.sum(l + 1))\n            else:\n                i, x = v1, v2\n                nums[i] = x\n                if 0 < i < n - 1:\n                    new_peak = get_peak(i)\n                    change(i, new_peak)\n                if 0 < i - 1 < n - 1:\n                    new_peak = get_peak(i - 1)\n                    change(i - 1, new_peak)\n                if 0 < i + 1 < n - 1:\n                    new_peak = get_peak(i + 1)\n                    change(i + 1, new_peak)\n        return ans",
    "submit_ts": "1718507299",
    "subm_id": "1289647253"
}