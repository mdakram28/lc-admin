{
    "username": "ankush920",
    "submission": "#include <vector>\n#include <string>\n#include <unordered_map>\n#include <climits>\n#include <algorithm>\n\nclass TrieNode {\npublic:\n    std::unordered_map<char, TrieNode*> c;\n    int cst;\n    \n    TrieNode() : cst(INT_MAX) {}\n};\n\nclass Trie {\npublic:\n    TrieNode* r;\n    \n    Trie() {\n        r = new TrieNode();\n    }\n    \n    void insert(const std::string& w, int cst) {\n        TrieNode* n = r;\n        for (char c : w) {\n            if (!n->c.count(c)) {\n                n->c[c] = new TrieNode();\n            }\n            n = n->c[c];\n        }\n        n->cst = std::min(n->cst, cst);\n    }\n};\n\nclass Solution {\npublic:\n    int minimumCost(std::string t, std::vector<std::string>& w, std::vector<int>& c) {\n        int l = t.size();\n        Trie tr;\n        \n        for (int i = 0; i < w.size(); ++i) {\n            tr.insert(w[i], c[i]);\n        }\n        \n        std::vector<int> d(l + 1, INT_MAX);\n        d[0] = 0;\n        \n        for (int i = 0; i < l; ++i) {\n            if (d[i] == INT_MAX) continue;\n            TrieNode* n = tr.r;\n            \n            for (int j = i; j < l; ++j) {\n                if (!n->c.count(t[j])) break;\n                n = n->c[t[j]];\n                \n                if (n->cst != INT_MAX) {\n                    d[j + 1] = std::min(d[j + 1], d[i] + n->cst);\n                }\n            }\n        }\n        \n        return d[l] == INT_MAX ? -1 : d[l];\n    }\n};\n",
    "submit_ts": "1720322636",
    "subm_id": "1312355161"
}