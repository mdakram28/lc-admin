{
    "username": "Toshiksharma",
    "submission": "#include <vector>\n#include <string>\n#include <unordered_map>\n#include <climits>\n     //baingan is the owner of this code \n    //written on 7-07-2024\n\nclass TrieNode {\npublic:\n    std::unordered_map<char, TrieNode*> children;\n    int cost;\n    TrieNode() : cost(INT_MAX) {}\n};\n\nclass Trie {\npublic:\n    TrieNode* root;\n    Trie() {\n        root = new TrieNode();\n    }\n    \n    void insert(const std::string& word, int cost) {\n        TrieNode* node = root;\n        for (char c : word) {\n            if (!node->children.count(c)) {\n                node->children[c] = new TrieNode();\n            }\n            node = node->children[c];\n        }\n        node->cost = std::min(node->cost, cost); // store the minimum cost for the word\n    }\n    \n    int getCost(const std::string& word) {\n        TrieNode* node = root;\n        for (char c : word) {\n            if (!node->children.count(c)) {\n                return INT_MAX;\n            }\n            node = node->children[c];\n        }\n        return node->cost;\n    }\n};\n\nclass Solution {\npublic:\n    int minimumCost(std::string target, std::vector<std::string>& words, std::vector<int>& costs) {\n        int n = target.length();\n        std::vector<int> dp(n + 1, INT_MAX);\n        dp[0] = 0;\n        \n        Trie trie;\n        for (int i = 0; i < words.size(); ++i) {\n            trie.insert(words[i], costs[i]);\n        }\n        \n        for (int i = 0; i < n; ++i) {\n            if (dp[i] == INT_MAX) continue;\n            \n            TrieNode* node = trie.root;\n            for (int j = i; j < n; ++j) {\n                if (!node->children.count(target[j])) break;\n                node = node->children[target[j]];\n                if (node->cost != INT_MAX) {\n                    dp[j + 1] = std::min(dp[j + 1], dp[i] + node->cost);\n                }\n            }\n        }\n        \n        return dp[n] == INT_MAX ? -1 : dp[n];\n    }\n};\n",
    "submit_ts": "1720320294",
    "subm_id": "1312289587"
}