{
    "username": "elysia-4",
    "submission": "\nclass SegmentTree:\n    def __init__(self, data, default=0, func=max):\n        \"\"\"initialize the segment seg with data\"\"\"\n        self._default = default\n        self._func = func\n        self._len = len(data)\n        self._size = _size = 1 << (self._len - 1).bit_length()\n\n        self.data = [default] * (2 * _size)\n        self.data[_size:_size + self._len] = data\n        for i in reversed(range(_size)):\n            self.data[i] = func(self.data[i + i], self.data[i + i + 1])\n\n    def __delitem__(self, idx):\n        self[idx] = self._default\n\n    def __getitem__(self, idx):\n        return self.data[idx + self._size]\n\n    def __setitem__(self, idx, value):\n        idx += self._size\n        self.data[idx] = value\n        idx >>= 1\n        while idx:\n            self.data[idx] = self._func(self.data[2 * idx], self.data[2 * idx + 1])\n            idx >>= 1\n\n    def __len__(self):\n        return self._len\n\n    def query(self, start, stop):\n        \"\"\"func of data[start, stop)\"\"\"\n        start += self._size\n        stop += self._size\n\n        res_left = res_right = self._default\n        while start < stop:\n            if start & 1:\n                res_left = self._func(res_left, self.data[start])\n                start += 1\n            if stop & 1:\n                stop -= 1\n                res_right = self._func(self.data[stop], res_right)\n            start >>= 1\n            stop >>= 1\n\n        return self._func(res_left, res_right)\n\n    def __repr__(self):\n        return \"SegmentTree({0})\".format(self.data)\n    \n\nN = int(5e4 + 20)\n\nfrom sortedcontainers import SortedList\nclass Solution:\n    def getResults(self, q: List[List[int]]) -> List[bool]:\n        sl, t = SortedList([(0, N)]), SortedList()\n        result = []\n        seg = SegmentTree([0] * N, 0, max)\n        for i in range(len(q)):\n            if q[i][0] == 1:\n                mid = q[i][1]\n                i = sl.bisect_right((mid, 0)) - 1\n                l, r = sl[i]  \n                sl.add((l, mid))\n                sl.add((mid, r))\n                sl.remove((l, r))\n                t.add(mid)\n                pre = r - l\n                L, R = mid - l, r - mid\n                seg.__setitem__(r, R)\n                seg.__setitem__(mid, L)\n                \n            else:\n                x, y = q[i][1], q[i][2]\n                f = 0\n                if y > x:\n                    result.append(False)\n                    f = 1\n                if f:\n                    continue\n                if not t:\n                    result.append(True)\n                    f = 1\n                if f:\n                    continue\n                if seg.query(0, x + 1) >= y or x -  t[t.bisect_left(x) - 1] >= y or (t[0] >= x and x >= y):\n                    result.append(True)\n                else:\n                    result.append(False)\n        res = result.copy()\n        return res\n\n",
    "submit_ts": 1716651254.0
}