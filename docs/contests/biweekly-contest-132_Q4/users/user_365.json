{
    "username": "leetcoder_27",
    "submission": "\nclass Solution {\npublic:\n    int maximumLength(vector<int>& nums, int k) \n    {\n        int n = nums.size();\n        // vector declared in long long\n        vector<vector<long long>> dp(n, vector<long long>(k + 1, 1));\n        \n        long long prayas = 1;\n        vector<long long> rd(k + 1, -1); // Stores maximum length subsequences for each change count\n        vector<map<int, long long>> pm(k + 1); // Stores maximum lengths for each number and change count\n        \n        for (int i = 0; i < n; i++) \n        {\n            for (int j = 0; j <= k; j++) \n            {\n                // Update dp[i][j] based on previous maximum lengths\n                for (int s = 0; s < j; s++) \n                {\n                    dp[i][j] = max(dp[i][j], 1 + rd[s]);\n                }\n                \n                // Update dp[i][j] based on previous lengths with the same number\n                if (pm[j].find(nums[i]) != pm[j].end()) {\n                    dp[i][j] = max(dp[i][j], 1 + pm[j][nums[i]]);\n                }\n                prayas = max(prayas, dp[i][j]);\n            }\n            \n            // Update helper structures with current maximum lengths\n            for (int j = 0; j <= k; j++) \n            {\n                rd[j] = std::max(rd[j], dp[i][j]);\n                \n                pm[j][nums[i]] = std::max(pm[j][nums[i]], dp[i][j]);\n            }\n        }\n        return prayas;\n    }\n};",
    "submit_ts": 1717861629.0
}