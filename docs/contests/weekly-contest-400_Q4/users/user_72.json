{
    "username": "donbasta",
    "submission": "struct SparseTable {\n    const int K = 20;\n    vector<vector<int>> table;\n    int n;\n    SparseTable(const vector<int>& ar) : n(ar.size()) {\n        table.resize(K + 1);\n        for (auto& v : table) v.resize(n + 5);\n        for (int i = 0; i < n; i++) {\n            table[0][i] = ar[i];\n        }\n        for (int i = 1; i <= K; i++) {\n            for (int j = 0; (j + (1 << i)) <= n; j++) {\n                table[i][j] = (table[i - 1][j] & table[i - 1][j + (1 << (i - 1))]);\n            }\n        }\n    }\n    int bit_width(int x) {\n        if (x == 0) return 0;\n        int ret = 0;\n        while (x) {\n            x >>= 1, ret++;\n        }\n        return ret;\n    }\n    int get(int l, int r) {\n        int i = bit_width(r - l + 1) - 1;\n        return (table[i][l] & table[i][r - (1 << i) + 1]);\n    }\n};\n\nclass Solution {\npublic:\n    int minimumDifference(vector<int>& nums, int k) {\n        int n = nums.size();\n        int ans = INT_MAX;\n        SparseTable st(nums);\n        for (int i = 0; i < n; i++) {\n            int lo = i, hi = n - 1, piv = -1;\n            while (lo <= hi) {\n                int mid = (lo + hi) >> 1;\n                if (st.get(i, mid) > k) {\n                    lo = mid + 1;\n                } else {\n                    piv = mid;\n                    hi = mid - 1;\n                }\n            }\n            // piv : pertama <= k, piv - 1 > k\n            if (piv == -1) {\n                ans = min(ans, st.get(i, n - 1) - k);\n            } else {\n                ans = min(ans, k - st.get(i, piv));\n                if (piv > i) {\n                    ans = min(ans, st.get(i, piv - 1) - k);\n                }\n            }\n        }\n        return ans;\n    }\n};",
    "submit_ts": 1717297024.0
}