{
    "username": "rain-sure",
    "submission": "class Solution {\npublic:\n    vector<int> countOfPeaks(vector<int>& nums, vector<vector<int>>& queries) {\n        int n = nums.size();\n        nums.insert(begin(nums), 0);\n        vector<int> f(n + 1);\n        for(int i = 2; i < n; i ++) {\n            f[i] = (nums[i] > nums[i - 1] && nums[i] > nums[i + 1]);\n        }\n        \n        int q = queries.size();\n        vector<int> res;\n        vector<long long> tr(n + 10);\n        auto lowbit([&](int x) {\n            return x & -x; \n        });\n        auto add([&](int x, int c) {\n            for (int i = x; i <= n; i += lowbit(i)) tr[i] += c; \n        });\n        auto query([&](int x) {\n            long long res = 0;\n            for(int i = x; i ; i -= lowbit(i)) res += tr[i];\n            return res;\n        });\n        auto rangeSum([&](int l, int r) {\n           return query(r) - query(l); \n        });\n        for(int i = 1; i <= n; i ++) {\n            add(i, f[i]);\n        }\n        for(int i = 0; i < q; i ++) {\n            int op = queries[i][0];\n            if(op == 1) {\n                int l = queries[i][1], r = queries[i][2];\n                l ++, r ++;\n                int x = rangeSum(l - 1, r);\n                if(f[l]) x --;\n                if(l != r and f[r]) x --;\n                res.push_back(x);\n                \n            } else {\n                int id = queries[i][1], val = queries[i][2];\n                id ++;\n                if(nums[id] == val) continue;\n                // \u4fee\u6539i\n                if(f[id]) {\n                    if(val <= nums[id - 1] or val <= nums[id + 1]) {\n                        f[id] = 0;\n                        add(id, -1);\n                    }\n                } else {\n                    if(id > 1 and id < n and val > nums[id - 1] and val > nums[id + 1]) {\n                        f[id] = 1;\n                        add(id, 1);\n                    }\n                }\n                // \u4fee\u6539i - 1\n                if(id - 1 > 1) {\n                    if(f[id - 1]) {\n                        if(val >= nums[id - 1]) {\n                            f[id - 1] = 0;\n                            add(id - 1, -1);\n                        }\n                    } else {\n                        if(val < nums[id - 1] && nums[id - 2] < nums[id - 1]) {\n                            f[id - 1] = 1;\n                            add(id - 1, 1);\n                        }\n                    }\n                }\n                if(id + 1 < n) {\n                    if(f[id + 1]) {\n                        if(val >= nums[id + 1]) {\n                            f[id + 1] = 0;\n                            add(id + 1, -1);\n                        }\n                    } else {\n                        if(val < nums[id + 1] && nums[id + 2] < nums[id + 1]) {\n                            f[id + 1] = 1;\n                            add(id + 1, 1);\n                        }\n                    }\n                }\n                // for(int i = 1; i <= n; i ++) {\n                //     cout << f[i] << \" \\n\"[i == n];\n                // }\n                nums[id] = val;\n            }\n        }\n        return res;\n    }\n};",
    "submit_ts": 1718506863.0
}