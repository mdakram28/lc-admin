{
    "username": "cchao",
    "submission": "class Solution {\n    set<int> b;\n    int n;\n    map<int, int> m;\n    \n    int sz(int s, int e) {\n        if (s >= e) e += n;\n        return e - s;\n    }\n    \n    void add(int idx) {\n        // cout << \"add \" << idx << endl;\n        if (b.empty()) {\n            b.insert(idx);\n            m[n]++;\n            return;\n        }\n        auto it = b.upper_bound(idx);\n        int nxt = it != b.end() ? *it : *b.begin();\n        int prev;\n        if (it != b.begin()) {\n            --it;\n            prev = *it;\n        } else {\n            prev = *b.rbegin();\n        }\n        m[sz(prev, nxt)]--;\n        m[sz(prev, idx)]++;\n        m[sz(idx, nxt)]++;\n        b.insert(idx);\n    }\n    void remove(int idx) {\n        // cout << \"remove \" << idx << endl;\n        b.erase(idx);\n        if (b.empty()) {\n            m.clear();\n            return;\n        }\n        auto it = b.upper_bound(idx);\n        int nxt = it != b.end() ? *it : *b.begin();\n        int prev;\n        if (it != b.begin()) {\n            --it;\n            prev = *it;\n        } else {\n            prev = *b.rbegin();\n        }\n        m[sz(prev, nxt)]++;\n        m[sz(prev, idx)]--;\n        m[sz(idx, nxt)]--;\n    }\n    \npublic:\n    vector<int> numberOfAlternatingGroups(vector<int>& colors, vector<vector<int>>& queries) {\n        auto a = colors;\n        n = a.size();\n        b.clear();\n        m.clear();\n        for (int i = 0; i < n; ++i) {\n            int x = a[i], y = a[(i + 1) == n ? 0 : i + 1];\n            if (x == y) add(i);\n        }\n        vector<int> ans;\n        for (auto &q : queries) {\n            int op = q[0];\n            if (op == 2) {\n                int idx = q[1], c = q[2];\n                if (c == a[idx]) continue;\n                a[idx] ^= 1;\n                int prev = idx == 0 ? n - 1 : idx - 1;\n                \n                if (b.count(prev)) remove(prev);\n                else add(prev);\n\n                if (b.count(idx)) remove(idx);\n                else add(idx);\n            } else {\n                if (b.empty()) {\n                    ans.push_back(n);\n                    continue;\n                }\n                int x = q[1];\n                auto it = m.lower_bound(x);\n                int tmp = 0;\n                while (it != m.end()) {\n                    tmp += (it->first - x + 1) * it->second;\n                    ++it;\n                }\n                ans.push_back(tmp);\n            }\n        }\n        // cout << \"--\\n\";\n        return ans;\n    }\n};",
    "submit_ts": "1722742894",
    "subm_id": "1343779527"
}