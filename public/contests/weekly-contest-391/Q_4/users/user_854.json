{
    "username": "user4607v",
    "submission": "class Solution {\n    public int minimumDistance(int[][] points) {\n        int n = points.length;\n        Arrays.sort(points, (x,y)-> x[0] - y[0]);\n       // int[][] val = new int[n][2];\n        int[] maxLeftAdd = new int[n], maxLeftSub = new int[n];\n        int[] maxRightAdd = new int[n], maxRightSub = new int[n];\n        int[] minLeftAdd = new int[n], minLeftSub = new int[n];\n        int[] minRightAdd = new int[n], minRightSub = new int[n];\n        //int[] valSub = new int[n];\n        for(int i=0; i < n; i++){\n            int valAdd = points[i][0] + points[i][1];\n            int valSub = points[i][0] - points[i][1];\n            maxLeftAdd[i] =  (i>0?Math.max(maxLeftAdd[i-1], valAdd): valAdd);\n            maxLeftSub[i] =  (i>0?Math.max(maxLeftSub[i-1], valSub): valSub);\n            minLeftAdd[i] =  (i>0?Math.min(minLeftAdd[i-1], valAdd): valAdd);\n            minLeftSub[i] =  (i>0?Math.min(minLeftSub[i-1], valSub): valSub);\n            \n        }\n        for(int i =n-1; i >=0; i--){\n            int valAdd = points[i][0] + points[i][1];\n            int valSub = points[i][0] - points[i][1];\n            maxRightAdd[i] =  (i<n-1?Math.max(maxRightAdd[i+1], valAdd): valAdd);\n            maxRightSub[i] =  (i<n-1?Math.max(maxRightSub[i+1], valSub): valSub);\n            minRightAdd[i] =  (i<n-1?Math.min(minRightAdd[i+1], valAdd): valAdd);\n            minRightSub[i] =  (i<n-1?Math.min(minRightSub[i+1], valSub): valSub);\n        }\n        int ans = -1;\n        for(int i=0; i < n; i++){\n            int maxAdd, maxSub, minAdd, minSub;\n            if(i == 0){\n                maxAdd = maxRightAdd[i+1];\n                minAdd = minRightAdd[i+1];\n                maxSub = maxRightSub[i+1];\n                minSub = minRightSub[i+1];\n            }else if(i == n-1){\n                maxAdd = maxLeftAdd[i-1];\n                minAdd = minLeftAdd[i-1];\n                maxSub = maxLeftSub[i-1];\n                minSub = minLeftSub[i-1];\n            }else{\n                  maxAdd = Math.max(maxRightAdd[i+1], maxLeftAdd[i-1]);\n                  minAdd = Math.min(minRightAdd[i+1], minLeftAdd[i-1]);\n                  maxSub = Math.max(maxRightSub[i+1], maxLeftSub[i-1]);\n                  minSub = Math.min(minRightSub[i+1], minLeftSub[i-1]);\n            }\n            int val = Math.max( maxAdd - minAdd, maxSub - minSub);\n           // System.out.println(i + \":\" + val);\n            if(ans == -1){\n                ans = val;\n            }else{\n                ans = Math.min(ans ,val);\n            }\n        }\n        return ans;\n        \n    }\n}"
}