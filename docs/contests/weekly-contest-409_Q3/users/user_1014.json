{
    "username": "CelonyMire",
    "submission": "#include <bits/stdc++.h>\nusing namespace std;\n\n#ifdef LC_LOCAL\n#include \"parser.hpp\"\n#else\n#define dbg(...)\n#endif\n\n// ----- CHANGE FOR PROBLEM -----\ntemplate <typename T, invocable<T, T, int> A, invocable<T, T, int> B, invocable<T, T> U>\nstruct segment_tree_lazy {\n  vector<T> tree, delay;\n  T d0;\n  A apply;\n  B push;\n  U merge;\n  segment_tree_lazy(int n, T v, T d0, A apply, B push, U merge) : tree(2 * n, v), delay(n, d0), d0(d0), apply(apply), push(push), merge(merge) {}\n  void apply_delay(int i, T v, int k) {\n    tree[i] = apply(tree[i], v, k);\n    if (i < delay.size())\n      delay[i] = push(delay[i], v, k);\n  }\n  void lift(int l, int r) {\n    l += delay.size(), r += delay.size() - 1;\n    for (int k = 2; l > 1; k <<= 1, l >>= 1)\n      for (int i = r >>= 1; i >= l >> 1; i--)\n        tree[i] = delay[i] == d0 ? merge(tree[i << 1], tree[i << 1 | 1]) : apply(d0, delay[i], k);\n  }\n  void push_delay(int l, int r) {\n    int h = __lg(delay.size()), k = 1 << __lg(delay.size()) >> 1;\n    for (l += delay.size(), r += delay.size() - 1; h; h--, k >>= 1)\n      for (int i = l >> h; i <= r >> h; i++)\n        if (delay[i] != d0) {\n          apply_delay(i << 1, delay[i], k);\n          apply_delay(i << 1 | 1, delay[i], k);\n          delay[i] = d0;\n        }\n  }\n  void update(int l, int r, T v) { // [l, r)\n    push_delay(l, l + 1);\n    push_delay(r - 1, r);\n    int l0 = l, r0 = r, k = 1;\n    for (l += delay.size(), r += delay.size(); l < r; l >>= 1, r >>= 1, k <<= 1) {\n      if (l & 1)\n        apply_delay(l++, v, k);\n      if (r & 1)\n        apply_delay(--r, v, k);\n    }\n    lift(l0, l0 + 1);\n    lift(r0 - 1, r0);\n  }\n  T query(int l, int r, T ans = {}) { // [l, r)\n    push_delay(l, l + 1);\n    push_delay(r - 1, r);\n    auto ansl = ans, ansr = ans;\n    for (l += delay.size(), r += delay.size(); l < r; l >>= 1, r >>= 1) {\n      if (l & 1)\n        ansl = merge(ansl, tree[l++]);\n      if (r & 1)\n        ansr = merge(tree[--r], ansr);\n    }\n    return merge(ansl, ansr);\n  }\n};\n\nclass Solution {\npublic:\n  vector<int> shortestDistanceAfterQueries(int n, vector<vector<int>> &q) {\n    int m = q.size();\n    int d = 0;\n    auto apply = [&](int x, int y, int) {\n      return max(x, y);\n    };\n    auto merge = [&](int x, int y) {\n      return max(x, y);\n    };\n    segment_tree_lazy seg(n, 0, 0, apply, apply, merge);\n    vector ans(m, 0);\n    set<pair<int, int>> st;\n    for (int i = 0; i < m; i++) {\n      int x = q[i][1] - q[i][0] - 1;\n      if (seg.query(q[i][0], q[i][1]) < x) {\n        auto b = st.lower_bound({q[i][0], 0});\n        auto e = b;\n        for (; e != st.end() && e->first < q[i][1]; e++) {\n          d -= e->second;\n        }\n        st.erase(b, e);\n        d += x;\n        st.insert({q[i][0], x});\n        seg.update(q[i][0], q[i][1], x);\n      }\n      ans[i] = n - 1 - d;\n    }\n    return ans;\n  }\n};\n// ----- CHANGE FOR PROBLEM -----\n\n#ifdef LC_LOCAL\nint main() {\n  ios_base::sync_with_stdio(false);\n  cin.tie(NULL);\n  exec(&Solution::shortestDistanceAfterQueries); // CHANGE FOR PROBLEM\n}\n#endif",
    "submit_ts": "1722743203",
    "subm_id": "1343786720"
}