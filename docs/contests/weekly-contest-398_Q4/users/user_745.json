{
    "username": "CTWang",
    "submission": "using LL = long long;\nclass Solution {\npublic:\n    int waysToReachStair(int k) {\n        constexpr int maxJmp = 30; //2^30 = 1,073,741,824\n        constexpr int maxSub = maxJmp + 1;\n        \n        LL memo[maxJmp][maxSub][2];\n        memset(memo, -1, sizeof(memo));\n        \n        memo[0][0][1] = memo[0][0][0] = 1;\n        \n        function<LL(int,int,bool)> dfs = [&](int jmp, int sub, bool canSub) -> LL {\n            if(memo[jmp][sub][canSub] != -1)\n                return memo[jmp][sub][canSub];\n            \n            LL ret = 0;\n            if(jmp > 0)\n                ret += dfs(jmp-1, sub, true);\n            if(canSub && sub > 0)\n                ret += dfs(jmp, sub-1, false);\n            \n            return memo[jmp][sub][canSub] = ret;\n        };\n        \n        LL ans = 0;      \n        LL curr = 1;\n        \n        // no jump cases\n        if(k == 0)\n            ++ans;\n        if(k == 1)\n            ++ans;\n        \n        for(int jmp = 1; jmp <= maxJmp; ++jmp) {\n            int step = (1 << (jmp-1));\n            curr += step;\n            \n            int maxSub = jmp+1;\n            if(curr < k || curr - maxSub > k)\n                continue;\n            \n            int needSub = curr - k;\n            int slot = jmp + needSub;\n            ans += dfs(jmp, needSub, true);\n        }\n        \n        return ans;\n    }\n};",
    "submit_ts": 1716089751.0
}