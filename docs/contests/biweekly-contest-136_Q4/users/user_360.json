{
    "username": "vaiibhav75",
    "submission": "import java.util.*;\n\nclass Node {\n    int id;\n    int parent;\n    int max1;\n    int max2;\n    int ans;\n    \n    HashMap<Integer, Integer> childrenTime = new HashMap<>();\n    \n\n    Node(int id) {\n        this.id = id;\n    }\n}\nclass Solution {\n\n    List<Node> nodes;\n    ArrayList<ArrayList<Integer>> graph;\n    public int[] timeTaken(int[][] edges) {\n        graph = new ArrayList<>(); int n = edges.length + 1;\n        for (int i = 0; i < n; i++) {\n            graph.add(new ArrayList<>());\n        }\n\n        for (int[] edge : edges) {\n            graph.get(edge[0]).add(edge[1]);\n            graph.get(edge[1]).add(edge[0]);\n        }\n\n        nodes = new ArrayList<>();\n        for (int i = 0; i < n; i++) {\n            nodes.add(new Node(i));\n        }\n        \n        traverse(0, -1);\n        above(0, -1, 0);\n        \n        int[] res = new int[n];\n        for (int i = 0; i < n; i++) {\n            res[i] = nodes.get(i).ans;\n        }\n\n        return res;\n    }\n\n\n    int traverse (int id, int parent) {\n        Node node = nodes.get(id);\n        node.parent = parent;\n       \n        \n\n        int maxTime = 0;\n        for (int child : graph.get(id)) {\n            if (child == parent) continue;\n            int time = traverse(child, id); \n                \n            if (time >= node.max1) {\n                node.max2 = node.max1;\n                node.max1 = time;\n            } else if (time >= node.max2) {\n                node.max2 = time;\n            }\n            \n            node.childrenTime.put(child, time);\n        }\n\n\n        return node.max1 + (id % 2 == 0 ? 2 : 1);\n    }\n    \n    \n    void above (int id, int parent, int parentTime) {\n        Node node = nodes.get(id);\n        node.ans = Math.max(node.max1, parentTime);\n        \n        int currMax1 = node.max1;\n        int currMax2 = node.max2;\n        \n        if (parent != -1) {\n            if (parentTime >=  currMax1) {\n                currMax2 = currMax1;\n                currMax1 = parentTime;\n            } else if (parentTime >= currMax2) {\n                currMax2 = parentTime;\n            }\n        }\n        for (int child : graph.get(id)) {\n            if (child == parent) continue;\n            above(child, id, (currMax1 == node.childrenTime.get(child) ? currMax2 : currMax1) + (id % 2 == 0 ? 2 : 1));\n        }\n    }\n}\n",
    "submit_ts": "1722700324",
    "subm_id": "1343238404"
}