{
    "username": "gjp4_",
    "submission": "class Solution {\npublic:\n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n        int n = edges1.size()+1, m = edges2.size()+1, diameter = 0;\n        auto dfs = [&](auto &&dfs, int x, int px, vector<vector<int> >& e){\n            if(e[x].size() == 0)return 0;\n            int h1 = 0, h2 = 0;\n            for(auto nxt: e[x]){\n                if(nxt == px)continue;\n                int h = dfs(dfs, nxt, x, e)+1;\n                if(h > h1)h2 = h1, h1 = h;\n                else if(h>h2)h2 =h;\n            }\n            diameter = max(diameter, h1+h2);\n            return h1;\n        };\n        vector<vector<int> > e0(n), e1(m);\n        for(auto x: edges1){\n            e0[x[0]].push_back(x[1]);\n            e0[x[1]].push_back(x[0]);\n        }\n        for(auto x: edges2){\n            e1[x[0]].push_back(x[1]);\n            e1[x[1]].push_back(x[0]);\n        }\n        dfs(dfs, 0, 0, e0);\n        int p0 = diameter;\n        diameter = 0;\n        dfs(dfs, 0, 0, e1);\n        int p1= diameter;\n        // return 0;\n        return max({p0, p1, (p0+1)/2 + (p1+1)/2 + 1});\n    }\n};",
    "submit_ts": "1719719298",
    "subm_id": "1304438514"
}