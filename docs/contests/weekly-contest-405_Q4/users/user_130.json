{
    "username": "anau99",
    "submission": "import java.util.*;\n\nclass Solution {\n    class TrieNode {\n        Map<Character, TrieNode> children = new HashMap<>();\n        List<int[]> wordEndings = new ArrayList<>();\n    }\n\n    private TrieNode root;\n\n    public int minimumCost(String target, String[] words, int[] costs) {\n        int n = target.length();\n        int[] dp = new int[n + 1];\n        Arrays.fill(dp, Integer.MAX_VALUE);\n        dp[0] = 0;\n\n        // Build the Trie\n        root = new TrieNode();\n        for (int i = 0; i < words.length; i++) {\n            insert(words[i], costs[i], i);\n        }\n\n        // Dynamic Programming with Trie\n        for (int i = 0; i < n; i++) {\n            if (dp[i] == Integer.MAX_VALUE) continue;\n            TrieNode node = root;\n            for (int j = i; j < n; j++) {\n                node = node.children.get(target.charAt(j));\n                if (node == null) break;\n                for (int[] wordEnding : node.wordEndings) {\n                    int wordCost = wordEnding[0];\n                    int wordIndex = wordEnding[1];\n                    int endIndex = j + 1;\n                    dp[endIndex] = Math.min(dp[endIndex], dp[i] + wordCost);\n                }\n            }\n        }\n\n        return dp[n] == Integer.MAX_VALUE ? -1 : dp[n];\n    }\n\n    private void insert(String word, int cost, int index) {\n        TrieNode node = root;\n        for (char c : word.toCharArray()) {\n            node.children.putIfAbsent(c, new TrieNode());\n            node = node.children.get(c);\n        }\n        node.wordEndings.add(new int[]{cost, index});\n    }\n\n \n}\n",
    "submit_ts": "1720321155",
    "subm_id": "1312315020"
}