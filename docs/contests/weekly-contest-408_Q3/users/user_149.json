{
    "username": "deruikong",
    "submission": "class Solution {\npublic:\n    int numberOfSubstrings(string s) {\n        int n = s.size(), ans = 0;\n        vector<int> cnt(s.size() + 1), mp(n + 2, 1e9); mp[0] = 0;\n        for(int i = 1; i <= s.size(); i++){\n            cnt[i] = cnt[i - 1] + (s[i - 1] == '0');\n            if(mp[cnt[i]] == 1e9) mp[cnt[i]] = i;\n            for(int j = 0; j * j <= n && j <= cnt[i]; j++){\n                int rem = cnt[i] - j; // how many remains leftward of the region;\n                int lft = mp[rem]; // the most left we can go to find a subarray\n                int r = i - lft - j - j * j; // how many more can we go right by\n                if(r < 0) continue;\n                ans += min(min(i, mp[rem + 1]) - lft, r + 1);\n                // cout << lft << ' ' << i << ' ' << j << ' ' <<  r << ' ' << ans << '\\n';\n\n            }\n        }\n        // cout << '\\n';\n        return ans;\n    }\n};",
    "submit_ts": "1722137202",
    "subm_id": "1335757051"
}