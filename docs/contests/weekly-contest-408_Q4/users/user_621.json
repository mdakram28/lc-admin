{
    "username": "venu0029",
    "submission": "class Solution\n{\npublic:\n    bool solve(int X, int Y, vector<vector<int>> &c)\n    {\n        int len = c.size();\n        vector<vector<int>> graph(len + 4);\n        for (int i = 0; i < len; i++)\n        {\n            if (c[i][0] <= c[i][2])\n            {\n                graph[len].push_back(i);\n                graph[i].push_back(len);\n            }\n            if (X - c[i][0] <= c[i][2])\n            {\n                graph[len + 2].push_back(i);\n                graph[i].push_back(len + 2);\n            }\n            if (c[i][1] <= c[i][2])\n            {\n                graph[len + 1].push_back(i);\n                graph[i].push_back(len + 1);\n            }\n            if (Y - c[i][1] <= c[i][2])\n            {\n                graph[len + 3].push_back(i);\n                graph[i].push_back(len + 3);\n            }\n            for (int j = i + 1; j < len; ++j)\n            {\n                double dis = sqrt(pow(c[i][0] - c[j][0], 2) + pow(c[i][1] - c[j][1], 2));\n\n                int r_sum = c[i][2] + c[j][2];\n\n                if (r_sum >= dis)\n                {\n\n                    graph[i].push_back(j);\n                    graph[j].push_back(i);\n                }\n            }\n        }\n\n        int is_poss = 0;\n\n        is_poss = max(is_poss, bfs(graph, len, len + 1, len + 2, len + 4));\n\n        is_poss = max(is_poss, bfs(graph, len + 3, len + 2, len + 1, len + 4));\n\n        return is_poss == 0;\n    }\n\n    int bfs(vector<vector<int>> &graph, int s, int t1, int t2, int n)\n    {\n        queue<int> q;\n        vector<bool>vis(n + 4, false);\n        q.push(s);\n        vis[s] = true;\n        while (!q.empty())\n        {\n            int u = q.front();\n            q.pop();\n            for (int v : graph[u])\n            {\n                if (!vis[v])\n                {\n                    q.push(v);\n                    vis[v] = true;\n                }\n            }\n        }\n        return (vis[t1] || vis[t2] ? 1 : 0);\n    }\n\n    bool canReachCorner(int X, int Y, vector<vector<int>> &circles)\n    {\n        return solve(X, Y, circles);\n    }\n};",
    "submit_ts": "1722138365",
    "subm_id": "1335788922"
}