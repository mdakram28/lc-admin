{
    "username": "d11235813",
    "submission": "class Solution {\npublic:\n    vector<int> shortestDistanceAfterQueries(int n, vector<vector<int>>& queries) {\n        //no overlaps\n\n        vector<int> dp(n, 0);\n        for(int i = 0; i < n; i++){\n            dp[i] = i;\n        }\n\n        std::vector<int> ans;\n        std::vector<vector<int>> nexts;\n        // std::set<vector<int>> curr_q;\n\n        // for(auto& q: queries){\n        //     curr_q.insert(q);\n        //     for(auto& query: curr_q){\n        //         int s = query[0], e = query[1];\n    \n        //         dp[e] = std::min(dp[e], dp[s] + 1);\n        //         for(int i = e+1; i < n; i++){\n        //             dp[i] = std::min(dp[i], dp[i-1] + 1);\n        //         }\n        //     }\n        //     ans.push_back(dp[n-1]);\n        // }\n\n        //either disjoint or one is in another\n        //largest query to smallest query\n        //sort by start\n        //also sort by length\n        //if next one's start is less than curr's end discard\n\n\n        // std::sort(queries.begin(), queries.end(), [](auto& a, auto& b){\n        //     if(a[0] == b[0]){\n        //         return (a[1] - a[0]) >  (b[1] - b[0]);\n        //     }\n        //     return a[0] < b[0];\n        // });\n\n        // vector<int> curr = {-1, -1};\n        // int total = n-1;\n        // for(auto& q: queries){\n        //     int s= q[0], e = q[1];\n        //     if(s < curr[1]){\n        //         continue;\n        //     }\n\n        //     int dist = e - s - 1;\n        //     total -= dist;\n\n\n\n        //     curr = q;\n        // }\n\n\n        int total = n-1;\n\n        auto comp = [](const std::vector<int>& a, const std::vector<int>& b){\n            if(a[0] == b[0]){\n                return (a[1] - a[0]) >  (b[1] - b[0]);\n            }\n            return a[0] < b[0];\n        };\n        std::set<vector<int>, decltype(comp)> curr_q(comp);\n\n        for(auto& q: queries){\n            // std::cout << \"q\" << std::endl;\n            int s= q[0], e = q[1];\n            //lower_bound is first element not before\n            auto iter = curr_q.lower_bound(q);\n            if(iter != curr_q.end()){\n                if((*iter)[0] >= s && (*iter)[1] <= e){\n                    while(iter != curr_q.end() && (*iter)[1] <= e){\n                        // total -= (e - (*iter)[1]);\n                        // (*iter)[1] = e;\n                        total += (*iter)[1] - (*iter)[0] - 1;\n                        // std::cout << \"adding \" << (*iter)[1] - (*iter)[0] - 1 << std::endl;\n                        iter = curr_q.erase(iter);\n                    }\n                    int dist = e - s - 1;\n                    total -= dist;\n                    curr_q.insert(q);\n                }\n                else if((*iter)[0] != s){\n                    //know it's before the current one\n                    if(!(iter != curr_q.begin() && (*(--iter))[1] > s )){\n                        curr_q.insert(q);\n                        int dist = e - s - 1;\n                        total -= dist;\n                    }\n                }\n            }\n            else if(curr_q.size() == 0 || (*(--curr_q.end()))[1] <= s ){\n                curr_q.insert(q);\n                int dist = e - s - 1;\n                total -= dist;\n            }\n            ans.push_back(total);\n        }\n\n\n        return ans;\n        \n    }\n};",
    "submit_ts": "1722743156",
    "subm_id": "1343785657"
}