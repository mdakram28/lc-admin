{
    "username": "dragonman164",
    "submission": "template<class T,T(*combine) (T,T),T(*identity)()>\nclass SegmentTree{\n    private : \n    int n;\n    T *t;\n \n    void build(vector<T> &a, int v, int tl, int tr) {\n        if (tl == tr) {\n            t[v] = a[tl];\n        } else {\n            int tm = (tl + tr) / 2;\n            build(a, v*2, tl, tm);\n            build(a, v*2+1, tm+1, tr);\n            t[v] = combine(t[v*2],t[v*2+1]);\n        }\n    }\n    \n    T run_query(int v, int tl, int tr, int l, int r) {\n    if (l > r) \n        return identity();\n    if (l == tl && r == tr) {\n        return t[v];\n    }\n    int tm = (tl + tr) / 2;\n    return combine(run_query(v*2, tl, tm, l, min(r, tm))\n           ,run_query(v*2+1, tm+1, tr, max(l, tm+1), r));\n    }\n \n \n    void run_update(int v, int tl, int tr, int pos, T new_val) {\n    if (tl == tr) {\n        t[v] = new_val;\n    } else {\n        int tm = (tl + tr) / 2;\n        if (pos <= tm)\n            run_update(v*2, tl, tm, pos, new_val);\n        else\n            run_update(v*2+1, tm+1, tr, pos, new_val);\n        t[v] = combine(t[v*2],t[v*2+1]);\n    }\n    }   \n \n    public: \n \n    SegmentTree(vector<T> &a){\n        this->n = a.size();\n        this->t = new T[4*(n + 1)];\n        build(a, 1, 0, n-1);\n    }\n    T query(int l, int r){\n        return run_query(1, 0, n-1, l, r);\n    }\n \n    void update(int pos, T new_val){\n        run_update(1, 0, n-1, pos, new_val);\n    }\n    \n    \n};\nint id(){\n    return (1 << 30) - 1;\n}\nint combine(int a, int b){\n    return a & b;\n}\nclass Solution {\npublic:\n\n\nlong long countSubarrays(vector<int>& nums, int k) {\n    long long int ans = 0;\n    int n = nums.size();\n    SegmentTree<int, combine, id> sg(nums);\n    for(int i = 0; i < n ; i++ ){\n        int lo = i, hi = n - 1,ans1 = -1,ans2 = -1;\n        while(lo <= hi){\n            int mid = (lo + hi) / 2;\n            int checker = sg.query(i, mid);\n            if(checker > k)\n                lo = mid + 1;\n            else{\n                if(checker == k)\n                ans1 = mid;\n                hi = mid - 1;\n            }\n        }\n        lo = i, hi = n - 1;\n        while(lo <= hi){\n            int mid = (lo + hi) / 2;\n            int checker = sg.query(i, mid);\n\n            if(checker >= k){\n                if(checker == k)\n                    ans2 = mid;\n                lo = mid + 1;\n            }else\n                hi = mid - 1;\n            \n        }\n        if(ans1 != -1 and ans2 != -1){\n            ans += (ans2 - ans1 + 1);\n        }\n    }\n\n    return ans;\n}\n};",
    "submit_ts": "1720281085",
    "subm_id": "1311812607"
}