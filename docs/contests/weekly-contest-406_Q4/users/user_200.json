{
    "username": "cuongdz0111",
    "submission": "class Solution {\npublic:\n    long long minimumCost(int m, int n, vector<int>& horizontalCut, vector<int>& verticalCut) {\n        // Sorting the arrays in descending order to use a greedy strategy\n        sort(horizontalCut.rbegin(), horizontalCut.rend());\n        sort(verticalCut.rbegin(), verticalCut.rend());\n\n        int hIndex = 0, vIndex = 0;  // indexes to track cuts\n        int hPieces = 1, vPieces = 1;  // initially, there's 1 horizontal and 1 vertical piece\n        long long totalCost = 0;\n\n        // While there are cuts left to be made\n        while (hIndex < horizontalCut.size() || vIndex < verticalCut.size()) {\n            // If we're out of vertical cuts or the current horizontal cut is more expensive\n            if (vIndex >= verticalCut.size() || (hIndex < horizontalCut.size() && horizontalCut[hIndex] >= verticalCut[vIndex])) {\n                // Make a horizontal cut affecting all vertical pieces\n                totalCost += (long long) horizontalCut[hIndex++] * vPieces;\n                hPieces++;  // Increment the number of horizontal pieces\n            } else {\n                // Make a vertical cut affecting all horizontal pieces\n                totalCost += (long long) verticalCut[vIndex++] * hPieces;\n                vPieces++;  // Increment the number of vertical pieces\n            }\n        }\n\n        return totalCost;\n    }\n};",
    "submit_ts": "1720924941",
    "subm_id": "1320236863"
}