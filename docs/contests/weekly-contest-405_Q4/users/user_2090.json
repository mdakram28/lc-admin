{
    "username": "amalag",
    "submission": "class Solution:\n    def minimumCost(self, target: str, words: List[str], costs: List[int]) -> int:\n        # words_length = [len(word) for word in words]\n        # min_length = min(words_length)\n        # max_length = max(words_length)\n        n = len(words)\n        curr_trie = Trie()\n        for i in range(n):\n            curr_trie.insert(words[i], costs[i])\n\n        m = len(target)\n\n        @cache\n        def dp(curr_index):\n            if curr_index > m-1:\n                return 0\n            \n            if target[curr_index] not in curr_trie.trie:\n                return math.inf\n            \n            curr = curr_trie.trie\n            j = curr_index\n            count = 0\n            output = math.inf\n            while j <= m-1 and target[j] in curr:\n                curr = curr[target[j]]\n                j += 1\n                count += 1\n                if '$' in curr:\n                    output = min(output, curr['$'] + dp(curr_index+count))\n\n            return output\n\n\n        return dp(0) if dp(0) != math.inf else -1\n\n\nclass Trie:\n    '''class for Trie '''\n\n    def __init__(self):\n        '''initializing dict'''\n        self.trie = {}\n\n    def insert(self, word, cost):\n        node = self.trie\n        for ch in word:\n            if ch in node:\n                node = node[ch]\n            else:\n                node[ch] = {}\n                node = node[ch]\n        \n        if '$' in node:\n            node['$'] = min(cost,node['$'])\n        else:\n            node['$'] = cost\n\n    def search(self, word):\n        curr = self.trie\n        for ch in word:\n            if ch not in curr:\n                return False\n            curr = curr[ch]\n\n        if '$' in curr:\n            return True\n\n        return False\n        ",
    "submit_ts": "1720322015",
    "subm_id": "1312338408"
}