{
    "username": "siraj_786",
    "submission": "from collections import deque\nfrom typing import List\n\nclass Solution:\n    def minimumDiameterAfterMerge(self, edges1: List[List[int]], edges2: List[List[int]]) -> int:   \n        e1=edges1\n        e2=edges2\n        \n        \n        def custom_fn2(g):\n            f, _ = custom_fn(0, g)\n            p, m = custom_fn(f, g)\n            return m\n        \n        def custom_fn(f, g):\n            n = len(g)\n            d = [-1] * n\n            q = deque([f])\n            d[f] = 0\n            m = 0\n            p = f\n            while q:\n                u = q.popleft()\n                for v in g[u]:\n                    if d[v] == -1:\n                        d[v] = d[u] + 1\n                        q.append(v)\n                        if d[v] > m:\n                            m = d[v]\n                            p = v\n            return p, m\n        \n        def custom_fn3(e, n):\n            g = [[] for _ in range(n)]\n            for u, v in e:\n                g[u].append(v)\n                g[v].append(u)\n            return g\n        \n        n1 = len(e1) + 1\n        n2 = len(e2) + 1\n        \n        g1 = custom_fn3(e1, n1)\n        g2 = custom_fn3(e2, n2)\n        \n        d1 = custom_fn2(g1)\n        d2 = custom_fn2(g2)\n        \n        nd = max(d1, d2, (d1 + 1) // 2 + 1 + (d2 + 1) // 2)\n        \n        return nd\n\n# # Test case\n# solution = CustomSolution()\n# print(solution.min_diameter_after_merge([[0,1],[0,2],[0,3]], [[0,1]]))  # Output: 3\n# print(solution.min_diameter_after_merge([[0,1],[0,2],[0,3],[2,4],[2,5],[3,6],[2,7]], \n#                                          [[0,1],[0,2],[0,3],[2,4],[2,5],[3,6],[2,7]]))  # Output: 5\n",
    "submit_ts": 1719718894.0
}