{
    "username": "Prateek_0007",
    "submission": "\n\nclass Solution {\npublic:\n    int bfsTraversal(vector<vector<int>>& adjacencyList, int startNode, int targetNode1, int targetNode2, int totalNodes) {\n        queue<int> nodeQueue;\n        vector<int> visitedNodes(totalNodes + 4, 0);\n        nodeQueue.push(startNode);\n        visitedNodes[startNode] = 1;\n\n        while (!nodeQueue.empty()) {\n            int currentNode = nodeQueue.front();\n            nodeQueue.pop();\n            for (int neighbor : adjacencyList[currentNode]) {\n                if (!visitedNodes[neighbor]) {\n                    nodeQueue.push(neighbor);\n                    visitedNodes[neighbor] = 1;\n                }\n            }\n        }\n        return visitedNodes[targetNode1] || visitedNodes[targetNode2];\n    }\n\n    bool canReachCorner(int maxX, int maxY, vector<vector<int>>& circleData) {\n        vector<pair<pair<int, int>, int>> circles(circleData.size());\n        vector<vector<int>> adjacencyList(circleData.size() + 4);\n        int circleCount = circleData.size();\n\n        for (int i = 0; i < circleCount; ++i) {\n            circles[i].first.first = circleData[i][0];\n            circles[i].first.second = circleData[i][1];\n            circles[i].second = circleData[i][2];\n        }\n\n        for (int i = 0; i < circleCount; ++i) {\n            if (circles[i].first.first <= circles[i].second) {\n                adjacencyList[circleCount].push_back(i);\n                adjacencyList[i].push_back(circleCount);\n            }\n            if (maxX - circles[i].first.first <= circles[i].second) {\n                adjacencyList[circleCount + 2].push_back(i);\n                adjacencyList[i].push_back(circleCount + 2);\n            }\n            if (circles[i].first.second <= circles[i].second) {\n                adjacencyList[circleCount + 1].push_back(i);\n                adjacencyList[i].push_back(circleCount + 1);\n            }\n            if (maxY - circles[i].first.second <= circles[i].second) {\n                adjacencyList[circleCount + 3].push_back(i);\n                adjacencyList[i].push_back(circleCount + 3);\n            }\n            for (int j = i + 1; j < circleCount; ++j) {\n                double distance = sqrt(pow(circles[i].first.first - circles[j].first.first, 2) +\n                                       pow(circles[i].first.second - circles[j].first.second, 2));\n                int combinedRadius = circles[i].second + circles[j].second;\n                if (combinedRadius >= distance) {\n                    adjacencyList[i].push_back(j);\n                    adjacencyList[j].push_back(i);\n                }\n            }\n        }\n\n        int obstruction = 0;\n        obstruction = max(obstruction, bfsTraversal(adjacencyList, circleCount, circleCount + 1, circleCount + 2, circleCount + 4)); // Check for bottom-left corner\n        obstruction = max(obstruction, bfsTraversal(adjacencyList, circleCount + 3, circleCount + 2, circleCount + 1, circleCount + 4)); // Check for top-right corner\n        \n        if (obstruction) {\n            return false;\n        }\n        return true;\n    }\n};\n",
    "submit_ts": "1722137290",
    "subm_id": "1335759523"
}