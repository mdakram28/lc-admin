{
    "username": "AdityaChaudhari03",
    "submission": "/**\n * @param {number} X\n * @param {number} Y\n * @param {number[][]} circles\n * @return {boolean}\n */\nvar canReachCorner = function(X, Y, circles) {\n    function solve(X, Y, circles) {\n        const len = circles.length;\n        const graph = Array.from({ length: len + 4 }, () => []);\n\n        for (let i = 0; i < len; i++) {\n            if (circles[i][0] <= circles[i][2]) {\n                graph[len].push(i);\n                graph[i].push(len);\n            }\n            if (X - circles[i][0] <= circles[i][2]) {\n                graph[len + 2].push(i);\n                graph[i].push(len + 2);\n            }\n            if (circles[i][1] <= circles[i][2]) {\n                graph[len + 1].push(i);\n                graph[i].push(len + 1);\n            }\n            if (Y - circles[i][1] <= circles[i][2]) {\n                graph[len + 3].push(i);\n                graph[i].push(len + 3);\n            }\n            for (let j = i + 1; j < len; j++) {\n                const dist = Math.sqrt(Math.pow(circles[i][0] - circles[j][0], 2) + Math.pow(circles[i][1] - circles[j][1], 2));\n                const radSum = circles[i][2] + circles[j][2];\n                if (radSum >= dist) {\n                    graph[i].push(j);\n                    graph[j].push(i);\n                }\n            }\n        }\n\n        let blockOrNot = 0;\n        blockOrNot = Math.max(blockOrNot, bfs(graph, len, len + 1, len + 2, len + 4));\n        blockOrNot = Math.max(blockOrNot, bfs(graph, len + 3, len + 2, len + 1, len + 4));\n\n        return blockOrNot === 0;\n    }\n\n    function bfs(graph, s, t1, t2, n) {\n        const q = [];\n        const vis = new Array(n + 4).fill(false);\n\n        q.push(s);\n        vis[s] = true;\n\n        while (q.length > 0) {\n            const u = q.shift();\n            for (const v of graph[u]) {\n                if (!vis[v]) {\n                    q.push(v);\n                    vis[v] = true;\n                }\n            }\n        }\n\n        return vis[t1] || vis[t2] ? 1 : 0;\n    }\n\n    return solve(X, Y, circles);\n};\n\n",
    "submit_ts": "1722139136",
    "subm_id": "1335808825"
}