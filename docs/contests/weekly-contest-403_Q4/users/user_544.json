{
    "username": "Anonymous_235940",
    "submission": "struct rect\n{\n    int i_1;\n    int j_1;\n    int i_2;\n    int j_2;\n    vector<vector<int>>& grid;\n    int size(){\n        return (i_2 - i_1 + 1) * (j_2 - j_1 + 1);\n    }\n    int count_ones()\n    {\n        int c = 0;\n        for(int i = 0; i < grid.size(); ++i)\n        {\n            for(int j = 0; j < grid[0].size(); ++j)\n            {\n                c += grid[i][j];\n            }\n        }\n        return c;\n    }\n    int shrink()\n    {\n        int ni1 = i_2;\n        int ni2 = i_1;\n        int nj1 = j_2;\n        int nj2 = j_1;\n        int count = 0;\n        for(int i = i_1; i <= i_2; ++i)\n        {\n            for(int j = j_1; j <= j_2; ++j)\n            {\n                if(grid[i][j])\n                {\n                    ni1 = min(ni1, i);\n                    ni2 = max(ni2, i);\n                    nj1 = min(nj1, j);\n                    nj2 = max(nj2, j);\n                    ++count;\n                }\n            }\n        }\n        i_1 = ni1;\n        i_2 = ni2;\n        j_1 = nj1;\n        j_2 = nj2;\n        assert(count > 0);\n        return count;\n    }\n};\n\nint calc(rect r, int splits)\n{\n    if(splits == 0)\n    {\n        return r.size();\n    }\n    int ans = numeric_limits<int>::max();\n    for(int i_split = r.i_1; i_split < r.i_2; ++i_split)\n    {\n        rect r_1{r.i_1, r.j_1, i_split, r.j_2, r.grid};\n        rect r_2{i_split + 1, r.j_1, r.i_2, r.j_2, r.grid};\n        int c_1 = r_1.shrink();\n        int c_2 = r_2.shrink();\n        ans = min(ans, r_1.size() + r_2.size());\n        if(c_1 > 1)\n        {\n            ans = min(ans, calc(r_1, splits - 1) + r_2.size());\n        }\n        if(c_2 > 1)\n        {\n            ans = min(ans, calc(r_2, splits - 1) + r_1.size());\n        }\n    }\n    for(int j_split = r.j_1; j_split < r.j_2; ++j_split)\n    {\n        rect r_1{r.i_1, r.j_1, r.i_2, j_split, r.grid};\n        rect r_2{r.i_1, j_split + 1, r.i_2, r.j_2, r.grid};\n        int c_1 = r_1.shrink();\n        int c_2 = r_2.shrink();\n        ans = min(ans, r_1.size() + r_2.size());\n        if(c_1 > 1)\n        {\n            ans = min(ans, calc(r_1, splits - 1) + r_2.size());\n        }\n        if(c_2 > 1)\n        {\n            ans = min(ans, calc(r_2, splits - 1) + r_1.size());\n        }\n    }\n    return ans;\n}\n\nclass Solution {\npublic:\n    int minimumSum(vector<vector<int>>& grid) {\n        rect r{0, 0, (int)grid.size() - 1, (int)grid[0].size() - 1, grid};\n        r.shrink();\n        return calc(r, 2);\n    }\n};",
    "submit_ts": 1719115136.0
}