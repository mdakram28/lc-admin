{
    "username": "iwnRwfzapZ",
    "submission": "class Solution:\n    def minimumDifference(self, nums: List[int], k: int) -> int:\n        ans = inf\n        left = 0\n        curr_AND = (1 << 64) - 1\n        bit_counts = Counter()\n\n        # if AND is too high, try to make it less by expanding to right\n        def calc_score(bit_counts, width):\n            ans = 0\n\n            for i in range(32):\n                if bit_counts[i] == width:\n                    ans += 1 << i\n\n            return ans\n\n        for i, v in enumerate(nums):\n            for j in range(32):\n                if (1 << j) & v:\n                    bit_counts[j] += 1\n\n            while left <= i and calc_score(bit_counts, i - left + 1) < k:\n                ans = min(ans, abs(k - calc_score(bit_counts, i - left + 1)))\n\n                for j in range(32):\n                    v2 = nums[left]\n                    if (1 << j) & v2:\n                        bit_counts[j] -= 1\n                        if bit_counts[j] == 0:\n                            del bit_counts[j]\n\n                left += 1\n\n            ans = min(ans, abs(k - calc_score(bit_counts, i - left + 1)))\n\n        return ans",
    "submit_ts": 1717298062.0
}