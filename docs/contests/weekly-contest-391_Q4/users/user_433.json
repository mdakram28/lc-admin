{
    "username": "tinku_vishnu",
    "submission": "class Solution {\n    public int minimumDistance(int[][] points) {\n        int n=points.length; TreeMap<Integer,Integer>s=new TreeMap<>();\n        TreeMap<Integer,Integer>d=new TreeMap<>();\n        for(int i=0;i<n;i++){\n            int sum=points[i][0]+points[i][1];\n            int diff=points[i][0]-points[i][1];\n            if(s.containsKey(sum))s.put(sum,s.get(sum)+1);\n            else s.put(sum,1);\n            if(d.containsKey(diff))d.put(diff,d.get(diff)+1);\n            else d.put(diff,1);\n        }\n        int ans=Integer.MAX_VALUE;\n        for(int i=0;i<n;i++){\n            int sum=points[i][0]+points[i][1];\n            int diff=points[i][0]-points[i][1];\n            s.put(sum,s.get(sum)-1);\n            d.put(diff,d.get(diff)-1);\n            if(s.get(sum)==0)s.remove(sum);\n            if(d.get(diff)==0)d.remove(diff);\n            //cal ans\n            int minSumKey=s.firstKey(); int minDiffKey=d.firstKey();\n            int minSumLastKey=s.lastKey(); int minDiffLastKey=d.lastKey();\n            int max=Math.max(minSumLastKey-minSumKey,minDiffLastKey-minDiffKey);\n            ans=Math.min(max,ans);\n            if(s.containsKey(sum))s.put(sum,s.get(sum)+1);\n            else s.put(sum,1);\n            if(d.containsKey(diff))d.put(diff,d.get(diff)+1);\n            else d.put(diff,1);\n            \n        }\n        return ans;\n        \n    }\n}"
}