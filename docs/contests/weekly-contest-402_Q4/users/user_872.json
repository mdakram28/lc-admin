{
    "username": "starkid2000",
    "submission": "class Solution {\npublic:\n    void update(int i,int idx,int left,int right,vector<int> &seg,int value)\n    {\n        if(left>right)\n        {\n            return;\n        }\n        \n        if(idx<left || idx>right)\n        {\n            return;\n        }\n        if(idx == left && left == right)\n        {\n            seg[i] = value;\n            return;\n        }\n        \n        if(left == right)\n        {\n            return;\n        }\n        \n        int mid = (left+right)/2;\n        \n        update(2*i+1,idx,left,mid,seg,value);\n        \n        update(2*i+2,idx,mid+1,right,seg,value);\n        \n        int ans  = 0;\n        if(2*i+1<seg.size())\n        {\n            ans += seg[2*i+1];\n        }\n        \n        if(2*i+2<seg.size())\n        {\n            ans += seg[2*i+2];\n        }\n        \n        seg[i] = ans;\n        \n        return;\n        \n    }\n    int value_find(vector<int> &nums,int idx)\n    {\n        if(idx == 0 || idx == nums.size()-1)\n        {\n            return 0;\n        }\n        \n        if(nums[idx]>nums[idx-1] && nums[idx]>nums[idx+1])\n        {\n            return 1;\n        }\n        \n        return 0;\n    }\n    \n    int query(int idx,int i,int j,int left,int right,vector<int> &seg)\n    {\n        if(!(i<=right && left<=j))\n        {\n            return 0;\n        }\n        \n        if(left>=i && right<=j)\n        {\n            return seg[idx];\n        }\n\n        int mid = (left+right)/2;\n        int ans = 0;\n        \n        ans += query(2*idx+1,i,j,left,mid,seg);\n        ans += query(2*idx+2,i,j,mid+1,right,seg);\n        \n        \n        return ans;\n        \n    }\n    vector<int> countOfPeaks(vector<int>& nums, vector<vector<int>>& queries) {\n        \n        int n = nums.size();\n        \n        vector<int> seg(4*n,0);\n        vector<int> output;\n        \n        vector<int> has_value(n,0);\n        \n        for(int i = 1;i<n-1;i++)\n        {\n            int k = value_find(nums,i);\n            \n            if(k == 1)\n            {\n                has_value[i] = 1;\n                update(0,i,0,n-1,seg,1);\n            }\n        }\n        \n        int m = queries.size();\n    \n        for(int i = 0;i<m;i++)\n        {\n            if(queries[i][0] == 1)\n            {\n                output.push_back(query(0,queries[i][1]+1,queries[i][2]-1,0,n-1,seg));\n            }\n            else\n            {\n                \n                nums[queries[i][1]] = queries[i][2];\n                \n                \n                \n                if(queries[i][1]-1>0)\n                {\n                    int idx =  queries[i][1]-1; \n                    \n                    int value = value_find(nums,idx);\n                    \n                    if(value != has_value[idx])\n                    {\n                        has_value[idx] = value;\n                        update(0,idx,0,n-1,seg,value);\n                    }\n                    \n                }\n                \n                if(queries[i][1]+1<n-1)\n                {\n                    int idx =  queries[i][1]+1; \n                    \n                    int value = value_find(nums,idx);\n                    \n                    if(value != has_value[idx])\n                    {\n                        has_value[idx] = value;\n                        update(0,idx,0,n-1,seg,value);\n                    }\n                    \n                }\n                \n                if(queries[i][1]>0 && queries[i][1]<n-1)\n                {\n                    int idx =  queries[i][1]; \n                    \n                    int value = value_find(nums,idx);\n                    \n                    if(value != has_value[idx])\n                    {\n                        has_value[idx] = value;\n                        update(0,idx,0,n-1,seg,value);\n                    }\n                }\n                \n                \n                \n            }\n\n        }\n        \n        return output;\n        \n    }\n};",
    "submit_ts": 1718508688.0
}