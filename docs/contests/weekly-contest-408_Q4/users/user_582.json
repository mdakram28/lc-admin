{
    "username": "daksh_72",
    "submission": "#include <vector>\n#include <queue>\n#include <cmath>\n\nusing namespace std;\n\nclass Solution {\npublic:\n    bool canReachCorner(int X, int Y, vector<vector<int>>& circles2) {\n        vector<pair<pair<int, int>, int>> circles(circles2.size());\n        vector<vector<int>> graph(circles2.size() + 4);\n        int num_circles = circles2.size();\n        \n        // Initialize circles from circles2 input\n        for (int i = 0; i < num_circles; ++i) {\n            circles[i] = {{circles2[i][0], circles2[i][1]}, circles2[i][2]};\n        }\n        \n        // Build graph edges based on circle positions and boundaries\n        buildGraph(graph, circles, X, Y, num_circles);\n        \n        // Check if there's a path blocking corners\n        if (isBlocked(graph, num_circles, num_circles + 1, num_circles + 2, num_circles + 4) ||\n            isBlocked(graph, num_circles + 3, num_circles + 2, num_circles + 1, num_circles + 4)) {\n            return false;\n        }\n        \n        return true;\n    }\n\nprivate:\n    void buildGraph(vector<vector<int>>& graph, vector<pair<pair<int, int>, int>>& circles, int X, int Y, int num_circles) {\n        for (int i = 0; i < num_circles; ++i) {\n            if (circles[i].first.first <= circles[i].second) {\n                graph[num_circles].push_back(i);\n                graph[i].push_back(num_circles);\n            }\n            if (X - circles[i].first.first <= circles[i].second) {\n                graph[num_circles + 2].push_back(i);\n                graph[i].push_back(num_circles + 2);\n            }\n            if (circles[i].first.second <= circles[i].second) {\n                graph[num_circles + 1].push_back(i);\n                graph[i].push_back(num_circles + 1);\n            }\n            if (Y - circles[i].first.second <= circles[i].second) {\n                graph[num_circles + 3].push_back(i);\n                graph[i].push_back(num_circles + 3);\n            }\n            for (int j = i + 1; j < num_circles; ++j) {\n                if (distance(circles[i], circles[j]) <= (circles[i].second + circles[j].second)) {\n                    graph[i].push_back(j);\n                    graph[j].push_back(i);\n                }\n            }\n        }\n    }\n    \n    double distance(const pair<pair<int, int>, int>& circle1, const pair<pair<int, int>, int>& circle2) {\n        return sqrt(pow(circle1.first.first - circle2.first.first, 2) +\n                    pow(circle1.first.second - circle2.first.second, 2));\n    }\n    \n    bool isBlocked(const vector<vector<int>>& graph, int start, int target1, int target2, int nodes) {\n        queue<int> q;\n        vector<int> visited(nodes, 0);\n        q.push(start);\n        visited[start] = 1;\n        \n        while (!q.empty()) {\n            int u = q.front();\n            q.pop();\n            for (int v : graph[u]) {\n                if (!visited[v]) {\n                    q.push(v);\n                    visited[v] = 1;\n                }\n            }\n        }\n        \n        return visited[target1] || visited[target2];\n    }\n};\n",
    "submit_ts": "1722137070",
    "subm_id": "1335753300"
}