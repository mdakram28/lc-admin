{
    "username": "Armaan48",
    "submission": "class Solution {\npublic:\n    multiset<pair<int,int>> q[4];\n    vector<vector<int>> mvm = {{1,1},{-1,1} ,{-1,-1},{1,-1}};\n    vector<vector<int>> graph , largest ,arr;\n    \n    \n    void make(int i){\n        multiset<pair<int,int>> big;\n        for (int qi=0;qi<4;qi++){\n            int val = arr[i][0]*mvm[qi][0] + arr[i][1]*mvm[qi][1];\n            auto mx = (*--q[qi].end());\n            big.insert({mx.first - val , mx.second});\n            mx = (*----q[qi].end());\n            big.insert({mx.first - val , mx.second});\n\n        }\n        graph[(*--big.end()).second].push_back(i);\n        largest[i][0] = (*--big.end()).first;\n        for (auto v: big)\n                if (v.second != (*--big.end()).second)\n                    largest[i][1] = v.first;\n    }\n    \n    int minimumDistance(vector<vector<int>>& pts) {\n        int n = pts.size();\n        arr = pts;\n        for (int i=0;i<n;i++){\n            auto v= pts[i];\n            q[0].insert({v[0] + v[1] , i});\n            q[1].insert({-v[0] + v[1] , i});\n            q[2].insert({-v[0] -v[1] , i});\n            q[3].insert({v[0] - v[1] , i});\n        }\n        graph = vector<vector<int>> (n ) ;\n        largest=  vector<vector<int>> (n , vector<int> (2));\n        for (int i=0;i<n;i++){\n            make(i);\n        }\n        multiset<int> win ;\n        for (int i=0;i<n;i++){\n            win.insert(largest[i][0]);\n        }\n        int ans = (*--win.end());\n        for (int i=0;i<n;i++){\n            win.erase(win.find(largest[i][0]));\n            for (int child: graph[i]){\n                win.insert(largest[child][1]);\n                win.erase(win.find(largest[child][0]));\n            }\n            ans = min(ans , (*--win.end()));\n            for (int child: graph[i]){\n                win.erase(win.find(largest[child][1]));\n                win.insert(largest[child][0]);\n            }\n            win.insert(largest[i][0]);\n\n            \n        }\n        return ans;\n        \n        \n    }\n};"
}