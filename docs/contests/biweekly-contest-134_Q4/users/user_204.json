{
    "username": "sham_bhavii__",
    "submission": "class SegmentTree {\nprivate:\n    vector<int> tree;\n    int n;\n\npublic:\n    SegmentTree(vector<int>& nums) {\n        n = nums.size();\n        tree.resize(2 * n);\n\n        // Build the segment tree\n        // Initialize leaves of the tree\n        for (int i = 0; i < n; ++i) {\n            tree[n + i] = nums[i];\n        }\n\n        // Build the rest of the tree by calculating bitwise AND of parents\n        for (int i = n - 1; i > 0; --i) {\n            tree[i] = tree[2 * i] & tree[2 * i + 1];\n        }\n    }\n\n    // Update the value at index idx to val\n    void update(int idx, int val) {\n        // Update the leaf node\n        idx += n;\n        tree[idx] = val;\n\n        // Update the rest of the tree\n        while (idx > 1) {\n            idx /= 2;\n            tree[idx] = tree[2 * idx] & tree[2 * idx + 1];\n        }\n    }\n\n    // Get bitwise AND of elements from index l to r (inclusive)\n    int rangeBitwiseAnd(int l, int r) {\n        l += n;\n        r += n;\n        int res = tree[l];\n\n        while (l <= r) {\n            if (l % 2 == 1) {\n                res &= tree[l];\n                l++;\n            }\n            if (r % 2 == 0) {\n                res &= tree[r];\n                r--;\n            }\n            l /= 2;\n            r /= 2;\n        }\n\n        return res;\n    }\n};\nclass Solution {\npublic:\n    long long countSubarrays(vector<int>& nums, int k) {\n        SegmentTree st(nums);\n        long long ans = 0;\n        for(int i=0;i<nums.size();i++){\n            int low = i;\n            int high = nums.size()-1;\n            long long mini = nums.size();\n            while(low<=high){\n                int mid = (low+high)/2;\n                if(st.rangeBitwiseAnd(i,mid)>k){\n                    low=mid+1;\n                }\n                else if(st.rangeBitwiseAnd(i,mid)==k){\n                    mini = mid;\n                    high=mid-1;\n                }\n                else{\n                    high=mid-1;\n                }\n            }\n            low = i;\n            high = nums.size()-1;\n            long long maxi = nums.size();\n            while(low<=high){\n                int mid = (low+high)/2;\n                if(st.rangeBitwiseAnd(i,mid)>k){\n                    low=mid+1;\n                }\n                else if(st.rangeBitwiseAnd(i,mid)==k){\n                    maxi = mid;\n                    low=mid+1;\n                }\n                else{\n                    high=mid-1;\n                }\n            }\n            // cout<<i<<\" \"<<maxi<<\" \"<<mini<<endl;\n            if(maxi!=nums.size())ans+=(long long)(maxi-mini+1);\n        }\n        return ans;\n    }\n};",
    "submit_ts": "1720278082",
    "subm_id": "1311693535"
}