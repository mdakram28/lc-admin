{
    "username": "BattlerRein",
    "submission": "class Node {\n    int index;\n    List<Node> n;\n\n    public Node(int i) {\n        index = i;\n        n = new ArrayList<>();\n    }\n}\n\n\n\nclass Solution {\n    public boolean canReachCorner(int X, int Y, int[][] circles) {\n        int N = circles.length;\n\n        Map<Integer, Node> nodes = new HashMap<>();\n\n        nodes.put(-1, new Node(-1));\n        nodes.put(N, new Node(N));\n\n        for (int i = 0; i < N; i++) {\n            Node nodeI =  new Node(i);\n            nodes.put(i, nodeI);\n            for (int j = 0; j < i; j++) {\n                if (isIntersect(circles[i][0], circles[i][1], circles[i][2], circles[j][0], circles[j][1], circles[j][2])) {\n                    Node nodeJ = nodes.get(j);\n                    nodeI.n.add(nodeJ);\n                    nodeJ.n.add(nodeI);\n                }\n            }\n            if ((circles[i][0] <= X && Math.abs(circles[i][1] - 0) <= circles[i][2]) \n            || (circles[i][1] <= Y && Math.abs(X - circles[i][0]) <= circles[i][2])\n            || isIntersect(circles[i][0], circles[i][1], circles[i][2], 0, 0, 0)\n            || isIntersect(circles[i][0], circles[i][1], circles[i][2], X, 0, 0)\n            || isIntersect(circles[i][0], circles[i][1], circles[i][2], X, Y, 0)) {\n                Node nodeX = nodes.get(-1);\n                nodeI.n.add(nodeX);\n                nodeX.n.add(nodeI);\n            }\n\n            if ((circles[i][1] <= Y &&  Math.abs(circles[i][0]) <= circles[i][2]) \n            || (circles[i][0] <= X && Math.abs(Y - circles[i][1]) <= circles[i][2])\n            || isIntersect(circles[i][0], circles[i][1], circles[i][2], 0, 0, 0)\n            || isIntersect(circles[i][0], circles[i][1], circles[i][2], 0, Y, 0)\n            || isIntersect(circles[i][0], circles[i][1], circles[i][2], X, Y, 0)) {\n                Node nodeY = nodes.get(N);\n                nodeI.n.add(nodeY);\n                nodeY.n.add(nodeI);\n            }\n        }\n\n        // for (int i = -1; i <= N; i++) {\n        //     Node curr = nodes.get(i);\n        //     System.out.println(String.format(\"Printing n for node %s\", curr.index));\n        //     for (Node node : curr.n) {\n        //         System.out.println(node.index);\n        //     }\n        // }\n\n        Queue<Node> q = new LinkedList<>();\n        Set<Node> visited = new HashSet<>();\n        q.add(nodes.get(-1));\n        visited.add(nodes.get(-1));\n        while (!q.isEmpty()) {\n            Node curr = q.poll();\n            // System.out.println(String.format(\"Polled node %s\", curr.index));\n            if (curr.index == N) {\n                return false;\n            }\n            for (Node node : curr.n) {\n                if (!visited.contains(node)) {\n                    visited.add(node);\n                    q.add(node);\n                    // System.out.println(String.format(\"Adding node %s\", node.index));\n                }\n            }\n        }\n        return true;\n    }\n\n    private boolean isIntersect(int x1, int y1, int r1, int x2, int y2, int r2) {\n        long xD = x1 - x2;\n        long yD = y1 - y2;\n        long r = r1 + r2;\n        return xD * xD + yD * yD <= r * r;\n    }\n}",
    "submit_ts": "1722138791",
    "subm_id": "1335799738"
}