{
    "username": "dokenobuggy799",
    "submission": "class Solution {\n    int dfs(const vector<vector<int>>& adj, int start, int& farthestNode) {\n            int n = adj.size();\n            vector<int> dist(n, -1);\n            function<void(int, int)> dfsVisit = [&](int node, int d) {\n                dist[node] = d;\n                if (d > dist[farthestNode]) {\n                    farthestNode = node;\n                }\n                for (int neighbor : adj[node]) {\n                    if (dist[neighbor] == -1) {\n                        dfsVisit(neighbor, d + 1);\n                    }\n                }\n            };\n            farthestNode = start;\n            dfsVisit(start, 0);\n            return dist[farthestNode];\n        };\npublic:\n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n        int n = edges1.size(), m = edges2.size();\n        vector<vector<int>> one(n + 1);\n        vector<vector<int>> two(m + 1);\n        for (const auto& edge : edges1) {\n            one[edge[0]].push_back(edge[1]);\n            one[edge[1]].push_back(edge[0]);\n        }\n        for (const auto& edge : edges2) {\n            two[edge[0]].push_back(edge[1]);\n            two[edge[1]].push_back(edge[0]);\n        }\n        int f1 = 0, f2 = 0;\n        dfs(one, 0, f1);\n        int diameter1 = dfs(one, f1, f1);\n        dfs(two, 0, f2);\n        int diameter2 = dfs(two, f2, f2);\n        int minDiameter = max(diameter1, diameter2);\n        minDiameter = max(minDiameter, ((diameter1 + 1) / 2) + ((diameter2 + 1) / 2) + 1);\n        return minDiameter;\n    }\n};",
    "submit_ts": 1719717880.0
}