{
    "username": "hxu10",
    "submission": "from sortedcontainers import SortedList\n\nclass fenwick(object):\n    def __init__(self, n):\n        self.n = n\n        self.cul = [0]*n\n        self.maxd = len(bin(n))-3\n\n    def update(self,index,diff):\n        i = index\n        while i<self.n:\n            self.cul[i] += diff\n            i += (i+1)&(-i-1)\n\n\n    def getaccu(self,index):\n        output = 0\n        i = index\n        while i>=0:\n            output += self.cul[i]\n            i -= (i+1)&(-i-1)\n        return output\n    \n\n\n\n\n\nclass Solution(object):\n    def numberOfAlternatingGroups(self, colors, queries):\n        \"\"\"\n        :type colors: List[int]\n        :type queries: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        n = len(colors)\n        \n        blocks = SortedList()\n        \n        \n\n                \n            \n            \n        fencount = fenwick(n+1)\n        fentot = fenwick(n+1)\n        \n        \n        \n            \n            \n            \n        ans = []\n        \n        \n        \n        def update(index, flag):\n            if flag:   # remove the wall,  change from same to diff\n                if len(blocks)==1:\n                    blocks.clear()\n                    return \n                \n                loc = blocks.bisect_left(index)\n                if loc == 0:\n                    left = blocks[-1] - n\n                else:\n                    left = blocks[loc-1]\n                \n                if loc == len(blocks) - 1:\n                    right = blocks[0] + n\n                else:\n                    right = blocks[loc+1]\n                    \n                fentot.update(right-left,(right-left))\n                fencount.update(right-left,1)\n                \n                fentot.update(index-left,-(index-left))\n                fencount.update(index-left,-1)\n                \n                fentot.update(right-index,-(right-index))\n                fencount.update(right-index,-1)\n                \n                blocks.pop(loc)\n                \n            \n                \n                \n                \n            else:\n                if len(blocks)==0:\n                    blocks.add(index)\n                    return \n                \n                \n                loc = blocks.bisect_left(index)\n                if loc == 0:\n                    left = blocks[-1] - n\n                else:\n                    left = blocks[loc-1]\n                    \n                if loc == len(blocks):\n                    right = blocks[0] + n\n                else:\n                    right = blocks[loc]\n                    \n                fentot.update(right-left,-(right-left))\n                fencount.update(right-left,-1)\n                \n                fentot.update(index-left,(index-left))\n                fencount.update(index-left,1)\n                \n                fentot.update(right-index,(right-index))\n                fencount.update(right-index,1)   \n                \n                blocks.add(index)\n                \n    \n                \n        fentot.update(n,n)\n        fencount.update(n,1)          \n            \n            \n        for i in range(n):\n            if colors[i]==colors[i-1]:\n                update(i,False)\n            \n\n        \n        \n        \n    \n        for ele in queries:\n            if len(ele)==2:\n                \n               # print(blocks)\n                \n                l = ele[1]\n                if len(blocks)==0:\n                    ans.append(n)\n                    continue \n                    \n                    \n                    \n        \n                \n                count = fencount.getaccu(n) - fencount.getaccu(l-1)\n                tot = fentot.getaccu(n) - fentot.getaccu(l-1)\n                ans.append(tot - count * (l-1))\n                \n            else:\n                index = ele[1]\n                c = ele[2]\n                \n                if colors[index]==c:\n                    continue \n                    \n                \n                if colors[index]==colors[index-1]:\n                    update(index,True)\n                else:\n                    update(index,False)\n                    \n                    \n        \n                    \n                if colors[index]==colors[(index+1)%n]:\n                    update((index+1)%n,True)\n                else:\n                    update((index+1)%n,False) \n                    \n                    \n                colors[index] = c\n                \n        \n                    \n                    \n                \n                    \n                    \n        return ans\n    \n                    \n                \n                    \n                \n                \n\n                \n                \n                \n                \n                \n                \n            \n                \n                \n        ",
    "submit_ts": "1722742288",
    "subm_id": "1343765475"
}