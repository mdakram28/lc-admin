{
    "username": "SyberCage",
    "submission": "#define ll long long \n#define fr(i,s,e) for(ll i=s;i<e;i++)\nstruct UnionFind\n{\n    ll n,sz,*par,*rank;\n    UnionFind(){}\n    UnionFind(ll a)\n    {\n        n=sz=a;\n        par=new ll[n+1];\n        rank=new ll[n+1];\n        fr(i,1,n+1){par[i]=i;rank[i]=1;}\n    }\n    ll find(ll x)\n    {\n        if(x!=par[x])return par[x]=find(par[x]);\n        return x;\n    }\n    void merge(ll x, ll y)\n    {\n        ll x_r=find(x),y_r=find(y);\n        if(x_r==y_r)return;\n        if(rank[x_r]>=rank[y_r])\n        {\n            rank[x_r]+=rank[y_r];\n            par[y_r]=x_r;\n        }\n        else\n        {\n            rank[y_r]+=rank[x_r];\n            par[x_r]=y_r;\n        }\n        sz--;\n    }\n    void reset()\n    {\n        sz=n;fr(i,1,n+1){par[i]=i;rank[i]=1;}\n    }\n    ll size(){return sz;}\n    void print()\n    {\n        fr(i,1,n+1)cout<<i<<' '<<par[i]<<\"\\n\";\n    }\n};\nclass Solution {\npublic:\n    vector<int> shortestDistanceAfterQueries(int n, vector<vector<int>>& queries) {\n        vector<int>ans;\n        UnionFind uf(n);\n        for(auto x:queries){\n            int u=x[0],v=x[1];\n            u++,v++;\n            for(int i=u+1;i<v;i++){\n                if(uf.find(i)!=uf.find(i-1)){\n                    uf.merge(i,i-1);\n                }\n                else{\n                    int lo=i,hi=v-1,pos=v-1;\n                    while(lo<=hi){\n                        int mid=(lo+hi)/2;\n                        if(uf.find(mid)!=uf.find(i)){\n                            pos=mid;\n                            hi=mid-1;\n                        }\n                        else lo=mid+1;\n                    }\n                    // cout<<\"u=\"<<u<<\" v=\"<<v<<\"\\n\";\n                    // cout<<\"i=\"<<i<<\" pos=\"<<pos<<\"\\n\";\n                    if(i!=pos)i=pos-1;\n                }\n            }\n            ans.push_back(uf.sz-1);\n        }\n        return ans;\n    }\n};",
    "submit_ts": "1722740815",
    "subm_id": "1343729390"
}