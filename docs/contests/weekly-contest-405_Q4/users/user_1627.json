{
    "username": "graysage",
    "submission": "class Solution {\npublic:\n    int minCostToFormTarget(string target, vector<string>& words, vector<int>& costs) {\n        int n = target.size();\n        unordered_map<string, int> word_cost_map; \n        for (int i = 0; i < words.size(); ++i) {\n            if (word_cost_map.find(words[i]) == word_cost_map.end()) {\n                word_cost_map[words[i]] = costs[i];\n            } else {\n                word_cost_map[words[i]] = min(word_cost_map[words[i]], costs[i]);\n            }\n        }\n\n        vector<int> dp(n + 1, INT_MAX);\n        dp[0] = 0; \n\n        for (int i = 1; i <= n; ++i) {\n            for (auto& word_cost : word_cost_map) {\n                const string& word = word_cost.first;\n                int cost = word_cost.second;\n                int len = word.size();\n                if (i >= len && target.compare(i - len, len, word) == 0) {\n                    if (dp[i - len] != INT_MAX) {\n                        dp[i] = min(dp[i], dp[i - len] + cost);\n                    }\n                }\n            }\n        }\n\n        return dp[n] == INT_MAX ? -1 : dp[n];\n    }\n    bool isp( string &w, string&t, int i) {\n        for(int j = 0; j < w.size(); j++) {\n            if (t[i] != w[j])return false;\n            i++;\n        }\n        return true;\n    }\n    int memo[100000];\n    int dp( string&t, int i, vector<pair<string,int>>&vp) {\n        if (i == t.size()) {\n            return 0;\n        }\n        if(memo[i] != -1)return memo[i];\n        int ans = 1e9;\n        for (int j = 0; j < vp.size(); j++) {\n            if(isp( vp[j].first, t, i)) {\n                ans = min(ans, vp[j].second + dp( t, i +vp[j].first.size(),vp));\n            }\n        }\n        return memo[i] = ans;\n    }\n    static bool comp(pair<string, int>&a, pair<string, int>&b) {\n        return (double)a.second/(double)a.first.size() < (double)b.second/(double)b.first.size();\n    }\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        // memset(memo, -1, sizeof(memo));\n        // vector<pair<string,int>>vp;\n        // for (int i = 0; i < words.size(); i++) {\n        //     vp.push_back({words[i], costs[i]});\n        // }\n        // sort(vp.begin(), vp.end(), comp);\n        // int ans= dp( target, 0, vp);\n        return minCostToFormTarget(target, words, costs);\n        // return ans == 1e9? -1:ans;\n    }\n};",
    "submit_ts": "1720323420",
    "subm_id": "1312375124"
}