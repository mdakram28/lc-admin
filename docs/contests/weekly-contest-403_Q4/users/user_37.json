{
    "username": "Leminspector",
    "submission": "class Solution:\n    def minimumSum(self, grid: List[List[int]]) -> int:\n        n, m = len(grid), len(grid[0])\n        \n        @cache\n        def minSubSum(start_i, end_i, start_j, end_j):\n            min_i, max_i = end_i, start_i\n            min_j, max_j = end_j, start_j\n            ok = False\n            for i in range(start_i, end_i+1):\n                for j in range(start_j, end_j+1):\n                    if grid[i][j]:\n                        min_i = min(min_i, i)\n                        max_i = max(max_i, i)\n                        min_j = min(min_j, j)\n                        max_j = max(max_j, j)\n                        ok = True\n            if not ok: return 0\n            return (max_i - min_i + 1)*(max_j - min_j + 1)\n        \n        def bestVerticalDiv(start_i, end_i, start_j, end_j):\n            res = float('inf')\n            for div_j in range(start_j, end_j):\n                cost_1 = minSubSum(start_i, end_i, start_j, div_j)\n                if not cost_1: continue\n                cost_2 = minSubSum(start_i, end_i, div_j+1, end_j)\n                if not cost_2: continue\n                res = min(cost_1 + cost_2, res)\n            return res if res != float('inf') else 0\n\n        def bestHorizontalDiv(start_i, end_i, start_j, end_j):\n            res = float('inf')\n            for div_i in range(start_i, end_i):\n                cost_1 = minSubSum(start_i, div_i, start_j, end_j)\n                if not cost_1: continue\n                cost_2 = minSubSum(div_i+1, end_i, start_j, end_j)\n                if not cost_2: continue\n                res = min(cost_1 + cost_2, res)\n            return res if res != float('inf') else 0\n        \n        res = float('inf')\n        \n        # Horizontal first divide, further divide below\n        for div_i in range(n-1):\n            cost_1 = minSubSum(0, div_i, 0, m-1)\n            if not cost_1: continue\n            cost_2 = bestVerticalDiv(div_i+1, n-1, 0, m-1)\n            if cost_2: res = min(res, cost_1 + cost_2)\n            cost_3 = bestHorizontalDiv(div_i+1, n-1, 0, m-1)\n            if cost_3: res = min(res, cost_1 + cost_3)\n                \n        # Horizontal first divide, further divide above\n        for div_i in range(n-1):\n            cost_1 = minSubSum(div_i+1, n-1, 0, m-1)\n            if not cost_1: continue\n            cost_2 = bestVerticalDiv(0, div_i, 0, m-1)\n            if cost_2: res = min(res, cost_1 + cost_2)\n            cost_3 = bestHorizontalDiv(0, div_i, 0, m-1)\n            if cost_3: res = min(res, cost_1 + cost_3)\n            \n        # Vertical first divide, further divide right\n        for div_j in range(m-1):\n            cost_1 = minSubSum(0, n-1, 0, div_j)\n            if not cost_1: continue\n            cost_2 = bestVerticalDiv(0, n-1, div_j+1, m-1)\n            if cost_2: res = min(res, cost_1 + cost_2)\n            cost_3 = bestHorizontalDiv(0, n-1, div_j+1, m-1)\n            if cost_3: res = min(res, cost_1 + cost_3)\n                \n        # Vertical first divide, further divide left\n        for div_j in range(m-1):\n            cost_1 = minSubSum(0, n-1, div_j+1, m-1)\n            if not cost_1: continue\n            cost_2 = bestVerticalDiv(0, n-1, 0, div_j)\n            if cost_2: res = min(res, cost_1 + cost_2)\n            cost_3 = bestHorizontalDiv(0, n-1, 0, div_j)\n            if cost_3: res = min(res, cost_1 + cost_3)\n        \n        return res\n            \n                    \n                    ",
    "submit_ts": 1719111794.0
}