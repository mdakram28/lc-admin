{
    "username": "fornoreason",
    "submission": "class Segment {\npublic:\n\tint sum;\n\tSegment(): sum(0) {}\n};\n\nbool isPeak(int left, const vector<int> &nums) {\n    return left - 1 >= 0 && left + 1 < nums.size() && nums[left] > nums[left - 1] && nums[left] > nums[left + 1];\n}\n\nint buildSegmentTree(vector<Segment> &segmentTree, int left, int right, int index, const vector<int> &nums) {\n\t// cout << \"[debug]left: \" << left << \", right: \" << right << \", index: \" << index << endl;\n\tif (left == right) {\n\t\t// assert (index < 4 * N - 1);\n\t\tsegmentTree[index].sum = isPeak(left, nums);\n        // if (segmentTree[index].sum > 0) {\n        //     std::cout << \"[debug]left: \" << left << \", index: \" << index << std::endl;\n        // }\n\t\treturn segmentTree[index].sum;\n\t}\n\n\tint mid = left + (right - left) / 2;\n\t// assert (index < 4 * N - 1);\n\tsegmentTree[index].sum = buildSegmentTree(segmentTree, left, mid, 2 * index + 1, nums) + buildSegmentTree(segmentTree, mid + 1, right, 2 * index + 2, nums);\n\treturn segmentTree[index].sum;\n}\n\nint getSum(vector<Segment> &segmentTree, int left, int right, const int lindex, const int rindex, int index) {\n\tif (lindex > right || rindex < left) {\n\t\treturn 0;\n\t}\n\n\tif (lindex <= left && right <= rindex) {\n\t\treturn segmentTree[index].sum;\n\t}\n\n\tint mid = left + (right - left) / 2;\n\treturn getSum(segmentTree, left, mid, lindex, rindex, 2 * index + 1) + getSum(segmentTree, mid + 1, right, lindex, rindex, 2 * index + 2);\n}\n\nvoid update(vector<Segment> &segmentTree, int left, int right, const int lindex, const int rindex, int index, const vector<int> &nums) {\n\tif (lindex > right || rindex < left) {\n\t\treturn;\n\t}\n\n\tif (left == right) {\n\t\t// assert (index < 4 * N - 1);\n\t\tsegmentTree[index].sum = isPeak(left, nums);\n        // if (segmentTree[index].sum > 0) {\n        //     std::cout << \"[debug]left: \" << left << \", index: \" << index << std::endl;\n        // }\n\t\treturn;\n\t}\n\n\tint mid = left + (right - left) / 2;\n\tupdate(segmentTree, left, mid, lindex, rindex, 2 * index + 1, nums);\n\tupdate(segmentTree, mid + 1, right, lindex, rindex, 2 * index + 2, nums);\n\tsegmentTree[index].sum = segmentTree[2 * index + 1].sum + segmentTree[2 * index + 2].sum;\n}\n\nvoid printSegmentTree(const vector<Segment> &segmentTree)\n{\n\tstd::cout << \"segmentTree:\" << std::endl;\n\tfor (int i = 0; i < segmentTree.size(); ++i) {\n\t\tstd::cout << i << \": \" << segmentTree[i].sum << \", \";\n\t}\n\tstd::cout << std::endl;\n}\n\nclass Solution {\npublic:\n    vector<int> countOfPeaks(vector<int>& nums, vector<vector<int>>& queries) {\n        const int n = nums.size();\n        std::vector<Segment> segmentTree(4 * n);\n        buildSegmentTree(segmentTree, 0, n - 1, 0, nums);\n        std::vector<int> count;\n        for (auto &query : queries) {\n            if (query[0] == 1) {\n                int lindex = query[1];\n                int rindex = query[2];\n                int c = getSum(segmentTree, 0, n - 1, lindex, rindex, 0) - isPeak(lindex, nums) - (rindex != lindex && isPeak(rindex, nums));\n                count.push_back(c);\n            } else {\n                // printSegmentTree(segmentTree);\n                nums[query[1]] = query[2];\n                update(segmentTree, 0, n - 1, query[1] - 1, query[1] + 1, 0, nums);\n                // printSegmentTree(segmentTree);\n            }\n        }\n        return count;\n        \n    }\n    \n};",
    "submit_ts": "1718508768",
    "subm_id": "1289690629"
}