{
    "username": "keerthykaushik",
    "submission": "class Solution:\n    \n    def recursion(self, ind, nums, k, curr, dp):\n        if ind >= len(nums):\n            if curr == -1:\n                return float('inf')\n            return abs(k-curr)\n        if (ind, curr) in dp:\n            return dp[(ind, curr)]\n        if curr == -1:\n            pick = self.recursion(ind+1, nums, k, nums[ind], dp)\n        else:\n            pick = self.recursion(ind+1, nums, k, nums[ind] & curr, dp)\n        notPick = min(self.recursion(ind+1, nums, k, -1, dp), self.recursion(len(nums), nums, k, curr, dp))\n        dp[(ind, curr)] = min(pick, notPick)\n        return min(pick, notPick)\n        \n        \n    def minimumDifference(self, nums: List[int], k: int) -> int:\n        dp = {}\n        return self.recursion(0, nums, k, -1, dp)",
    "submit_ts": 1717300399.0
}