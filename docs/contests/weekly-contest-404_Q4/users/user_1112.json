{
    "username": "AdityaGore",
    "submission": "class Solution {\n    public int minimumDiameterAfterMerge(int[][] edges1, int[][] edges2) {\n        int n1 = edges1.length + 1;\n        int n2 = edges2.length + 1;\n\n        List<Integer>[] tree1 = buildTree(edges1, n1);\n        List<Integer>[] tree2 = buildTree(edges2, n2);\n\n        int diameter1 = findDiameter(tree1, n1);\n        int diameter2 = findDiameter(tree2, n2);\n\n        return Math.max(Math.max(diameter1, diameter2), (diameter1 + 1) / 2 + (diameter2 + 1) / 2 + 1);\n    }\n\n    private int findDiameter(List<Integer>[] tree, int n) {\n        int[] dist = new int[n];\n        int farthestNode = bfs(tree, 0, dist);\n        farthestNode = bfs(tree, farthestNode, dist);\n        return dist[farthestNode];\n    }\n\n    private int bfs(List<Integer>[] tree, int start, int[] dist) {\n        Arrays.fill(dist, -1);\n        Queue<Integer> queue = new LinkedList<>();\n        queue.offer(start);\n        dist[start] = 0;\n        int farthestNode = start;\n\n        while (!queue.isEmpty()) {\n            int node = queue.poll();\n            for (int neighbor : tree[node]) {\n                if (dist[neighbor] == -1) {\n                    dist[neighbor] = dist[node] + 1;\n                    queue.offer(neighbor);\n                    if (dist[neighbor] > dist[farthestNode]) {\n                        farthestNode = neighbor;\n                    }\n                }\n            }\n        }\n\n        return farthestNode;\n    }\n\n    private List<Integer>[] buildTree(int[][] edges, int n) {\n        List<Integer>[] tree = new ArrayList[n];\n        for (int i = 0; i < n; i++) {\n            tree[i] = new ArrayList<>();\n        }\n        for (int[] edge : edges) {\n            tree[edge[0]].add(edge[1]);\n            tree[edge[1]].add(edge[0]);\n        }\n        return tree;\n    }\n}",
    "submit_ts": "1719716946",
    "subm_id": "1304378297"
}