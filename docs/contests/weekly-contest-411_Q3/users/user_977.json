{
    "username": "Jeremy Do",
    "submission": "class Solution:\n    def largestPalindrome(self, n: int, k: int) -> str:\n        def create_palindrome(left_half: str, odd_length: bool) -> int:\n            if odd_length:\n                return int(left_half + left_half[-2::-1])\n            else:\n                return int(left_half + left_half[::-1])\n    \n        half_length = (n + 1) // 2\n        largest_half = \"9\" * half_length\n\n        \n        if k == 1:\n            return \"9\" * n\n        \n        if k == 2:\n            if n == 1:\n                return \"8\"\n            return \"8\" + \"9\" * (n-2) + \"8\"\n        \n        if k in [3, 9]:\n            return \"9\" * n\n        \n        if k == 4:\n            if n == 1:\n                return '8'\n            elif n == 2:\n                return '88'\n            elif n == 3:\n                return '888'\n            else:\n                return '88' + '9' * (n - 4) + '88'\n        \n        if k == 5:\n            if n == 1:\n                return \"5\"\n            return \"5\" + \"9\" * (n - 2) + \"5\"\n\n        \n        if k == 6:\n            if n < 3:\n                return \"6\" * n\n\n            if n % 2 == 1:\n                return \"8\" + \"9\" * (half_length - 2) + \"8\" +  \"9\" * (half_length - 2) + \"8\"\n            if n >= 6:\n                return \"8\" + \"9\" * (half_length - 2) + \"77\" + \"9\" * (half_length - 2) + \"8\"\n            if n == 4:\n                return \"8778\"\n        \n        if k == 7:\n            d = [\n                \"7\",\n                \"77\",\n                \"959\",\n                \"9779\",\n                \"99799\",\n                \"999999\",\n                \"9994999\",\n                \"99944999\",\n                \"999969999\",\n                \"9999449999\",\n                \"99999499999\"\n            ]\n            if n < 12:\n                return d[n-1]\n            if n == 12:\n                return \"999999999999\"\n            s = n % 12\n            t = n//12\n            \n            if s == 0:\n                return \"999999\" * t + \"999999\" * t\n\n            return \"999999\" * t + d[s-1] + \"999999\" * t\n            \n\n        if k == 8:\n            if n >= 6:\n                return \"888\" + \"9\" * (n-6) + \"888\"\n            return \"8\" * n\n           \n        return \"\"\n\n\n        # # Helper function to check if a number is a palindrome\n        # def is_palindrome(x: int) -> bool:\n        #     s = str(x)\n        #     return s == s[::-1]\n        \n        # # Start with the largest n-digit number\n        # max_num = 10**n - 1\n        \n        # # Generate the largest possible palindromes and check for divisibility\n        # for num in range(max_num, 10**(n-1) - 1, -1):\n        #     if is_palindrome(num) and num % k == 0:\n        #         return str(num)\n        \n        # return \"\"",
    "submit_ts": "1723952567",
    "subm_id": "1359799283"
}