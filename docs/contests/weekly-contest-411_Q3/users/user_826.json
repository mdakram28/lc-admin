{
    "username": "yu46656",
    "submission": "class Solution {\npublic:\n    std::string largestPalindrome(int n, int k) {\n        int m{ (n + 1) / 2 };\n\n        std::vector<int> mod_table;\n        mod_table.resize(n + 1, 1);\n\n        for (int i{ 1 }; i <= n; ++i) {\n            mod_table[i] = (mod_table[i - 1] * 10) % k;\n        }\n\n        std::vector<int> ress;\n        ress.resize(m);\n\n        for (int i{ 0 }; i < m - 1; ++i) {\n            ress[i] = (mod_table[i] + mod_table[n - 1 - i]) % k;\n        }\n\n        if (n % 2 == 0) {\n            ress[m - 1] = (mod_table[m - 1] + mod_table[m]) % k;\n        } else {\n            ress[m - 1] = mod_table[m - 1];\n        }\n\n        std::vector<std::array<bool, 10>> rs;\n        rs.resize(m);\n\n        rs[m - 1][0] = true;\n        for (int j{ 1 }; j < 10; ++j) { rs[m - 1][j] = false; }\n\n        for (int i{ m - 2 }; 0 <= i; --i) {\n            for (int j{ 0 }; j < 10; ++j) { rs[i][j] = false; }\n\n            for (int j{ 0 }; j < 10; ++j) {\n                for (int prv_j{ 0 }; prv_j < 10; ++prv_j) {\n                    rs[i][(ress[i + 1] * j + prv_j) % k] |= rs[i + 1][prv_j];\n                }\n            }\n        }\n\n        std::vector<int> digits;\n        digits.resize(m);\n\n        int cur_res{ 0 };\n\n        for (int i{ 0 }; i < m; ++i) {\n            for (int j{ 9 }; 0 <= j; --j) {\n                int nxt_res{ (cur_res + ress[i] * j) % k };\n\n                if (rs[i][(k - nxt_res) % k]) {\n                    digits[i] = j;\n                    cur_res = nxt_res;\n                    break;\n                }\n            }\n        }\n\n        std::string ret;\n        ret.resize(n);\n\n        for (int i{ 0 }; i < m; ++i) {\n            ret[i] = ret[n - 1 - i] = '0' + digits[i];\n        }\n\n        return ret;\n    }\n};\n",
    "submit_ts": "1723953285",
    "subm_id": "1359817230"
}