{
    "username": "Turkhuu",
    "submission": "class Solution {\npublic:\n    int minimumDiameterAfterMerge(vector<vector<int>>& e1, vector<vector<int>>& e2) {\n        int n[2];\n        n[0] = e1.size() + 1;\n        n[1] = e2.size() + 1;\n        vector<vector<int>> adj[2];\n        adj[0].resize(n[0]);\n        for (auto v : e1) {\n            int x = v[0], y = v[1];\n            adj[0][x].push_back(y);\n            adj[0][y].push_back(x);\n        }\n        adj[1].resize(n[1]);\n        for (auto v : e2) {\n            int x = v[0], y = v[1];\n            adj[1][x].push_back(y);\n            adj[1][y].push_back(x);\n        }\n        auto bfs = [&](int z, int s) {\n            vector<int> dis(n[z], -1);\n            queue<int> q;\n            q.push(s);\n            dis[s] = 0;\n            int t;\n            while (!q.empty()) {\n                int x = t = q.front();\n                q.pop();\n                for (auto y : adj[z][x]) {\n                    if (dis[y] == -1) {\n                        dis[y] = dis[x] + 1;\n                        q.push(y);\n                    }\n                }\n            }\n            return make_pair(dis, t);\n        };\n        vector<int> dx[2], dy[2];\n        int ans = 0;\n        int mn[2];\n        mn[0] = mn[1] = 1e9;\n        for (int z = 0; z < 2; z++) {\n            auto [A, x] = bfs(z, 0);\n            auto [d0, y] = bfs(z, x);\n            dx[z] = d0;\n            dy[z] = bfs(z, y).first;\n            ans = max(ans, dx[z][y]);\n            for (int i = 0; i < n[z]; i++) {\n                mn[z] = min(mn[z], max(dx[z][i], dy[z][i]));\n            }\n        }\n        ans = max(ans, mn[0] + mn[1] + 1);\n        return ans;\n    }\n};",
    "submit_ts": 1719715803.0
}