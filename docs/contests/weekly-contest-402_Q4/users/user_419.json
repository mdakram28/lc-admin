{
    "username": "raincoat911",
    "submission": "class Solution {\npublic:\n    vector<int> countOfPeaks(vector<int>& nums, vector<vector<int>>& queries) {\n        tree.resize(nums.size() + 1);\n        for (int i = 0; i < nums.size(); i++) {\n            if (ispeak(nums, i)) update(i, 1);\n        }\n        vector<int> res;\n        for (auto& q : queries) {\n            if (q[0] == 2) f(nums, q[1], q[2]);\n            else {\n                // for (int i = 0; i <= nums.size(); i++) cout << query(i) << \" \";\n                // cout << endl;\n                res.push_back(max(0, query(q[2]) - query(q[1] + 1)));\n            }\n        }\n        return res;\n    }\n    \nprivate:\n    vector<int> tree;\n    \n    void f(vector<int>& nums, int i, int n) {\n        int p = nums[i], l = nums.size();\n        // cout << \"update\" << i << \" \" << n << endl;\n        for (int j = i - 1; j <= i + 1 && j < l; j++) {\n            nums[i] = p;\n            bool a = ispeak(nums, j);\n            nums[i] = n;\n            bool b = ispeak(nums, j);\n            // cout << a << \" \" << b << endl;\n            if (a != b) {\n                // cout << \"update\" << endl;\n                if (a) update(j, -1);\n                else update(j, 1);\n            }\n        }\n        nums[i] = n;\n    }\n    \n    bool ispeak(vector<int>& nums, int i) {\n        if (i <= 0 || i >= nums.size() - 1) return false;\n        int a = nums[i - 1], b = nums[i], c = nums[i + 1];\n        // cout<<\"peak \" <<a << \" \" << b << \" \" << c << endl;\n        return a < b && b > c;\n    }\n    \n    void update(int i, int d) {\n        for (i = i + 1; i < tree.size(); i += i & -i) tree[i] += d;\n    }\n    \n    int query(int i) {\n        int res = 0;\n        for (; i; i -= i & -i) res += tree[i];\n        return res;\n    }\n    \n};",
    "submit_ts": "1718506911",
    "subm_id": "1289635011"
}