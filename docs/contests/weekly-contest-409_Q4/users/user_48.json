{
    "username": "peterrockwave",
    "submission": "def binsearch(l,x):\n    lo = -1\n    hi = len(l)\n    while lo!=hi-1:\n        mi = (lo+hi)//2\n        if l[mi] < x:\n            lo = mi\n        elif l[mi] > x:\n            hi = mi\n        else:\n            return mi\n    return -1\n\ndef find_last_leq(l,x):\n    lo = -1\n    hi = len(l)\n    while lo!=hi-1:\n        mi = (lo+hi)//2\n        if l[mi] <= x:\n            lo = mi\n        else:\n            hi = mi\n    return lo\n\nclass Solution:\n    def numberOfAlternatingGroups(self, colors: List[int], queries: List[List[int]]) -> List[int]:\n        n = len(colors)\n        pairs = [] # locations where i == i-1. Notably, areas between adjacent pairs are alternating\n        groupsizes = {}\n        # if pairs is empty, so should groupsize\n\n        # helpers\n        def get_groupsize(p1,p2): # p1 is \"before\" p2\n            gs = p2 - p1\n            if gs <= 0:\n                gs += n\n            return gs\n        def addgroup(gs):\n            groupsizes[gs] = groupsizes.get(gs,0)+1\n        def removegroup(gs):\n            groupsizes[gs] -= 1\n            if groupsizes[gs] == 0:\n                del groupsizes[gs]\n        def addpair(index):\n            j = find_last_leq(pairs,index)+1\n            pairs.insert(j, index)\n            if len(pairs)==1: # was empty\n                addgroup(n)\n            else:\n                oldstart = pairs[j-1]\n                oldend = pairs[(j+1)%len(pairs)]\n                removegroup(get_groupsize(oldstart,oldend))\n                addgroup(get_groupsize(oldstart, index))\n                addgroup(get_groupsize(index, oldend))\n        def removepair(index):\n            j = binsearch(pairs,index)\n            if j == -1:\n                # print(\"removing nonexistant pair\")\n                # return\n                raise RuntimeError(\"removing nonexistant pair\")\n            pairs.pop(j)\n            if len(pairs) == 0:\n                groupsizes.clear()\n            else:\n                newstart = pairs[j-1]\n                newend = pairs[j%len(pairs)]\n                removegroup(get_groupsize(newstart, index))\n                removegroup(get_groupsize(index, newend))\n                addgroup(get_groupsize(newstart, newend))\n\n\n        # init\n        for i in range(n):\n            if colors[i-1] == colors[i]:\n                pairs.append(i)\n        for j in range(len(pairs)):\n            addgroup(get_groupsize(pairs[j-1], pairs[j]))\n        # queries\n        ans = []\n        for q in queries:\n            # print(pairs)\n            # print(groupsizes)\n            # print(q)\n            if q[0] == 1:\n                tempans = 0\n                if len(pairs) == 0:\n                    tempans = n\n                else:\n                    size = q[1]\n                    for gs in groupsizes:\n                        if gs >= size:\n                            tempans += (gs-size+1)*groupsizes[gs]\n                ans.append(tempans)\n            else:\n                index = q[1]\n                color = q[2]\n                if colors[index] == color:\n                    continue\n                if colors[index-1] == color and colors[(index+1)%n] == color:\n                    # ABA -> AAA\n                    addpair(index)\n                    addpair((index+1)%n)\n                elif colors[index-1] != color and colors[(index+1)%n] != color:\n                    # AAA -> ABA\n                    removepair(index)\n                    removepair((index+1)%n)\n                elif colors[index-1] == color and colors[(index+1)%n] != color:\n                    # ABB -> AAB\n                    addpair(index)\n                    removepair((index+1)%n)\n                elif colors[index-1] != color and colors[(index+1)%n] == color:\n                    # BBA -> BAA\n                    removepair(index)\n                    addpair((index+1)%n)\n                colors[index] = color\n        return ans",
    "submit_ts": "1722743265",
    "subm_id": "1343788099"
}