{
    "username": "objectkuan",
    "submission": "class Solution {\n    inline long long comb(long long n, long long m) {\n        vector<vector<long long>> dp(n + 1, vector<long long>(m + 1, 0));\n        for (int i = 0; i <= n; i++) {\n            dp[i][0] = 1;\n        }\n        for (int i = 1; i <= n; i++) {\n            for (int j = 1; j <= m; j++) {\n                dp[i][j] = dp[i - 1][j] + dp[i - 1][j - 1];\n            }\n        }\n        return dp[n][m];\n    }\n\n   public:\n    int waysToReachStair(int k) {\n        if (k == 0) return 2;\n        if (k == 1) return 4;\n        if (k == 2) return 4;\n        if (k == 3) return 3;\n        if (k == 4) return 2;\n        long long n2 = 8, m = -1, m2 = -1;\n        for (int n = 3; n < 33; n++) {\n            if (n2 - n - 1 <= k && k <= n2) {\n                m = n;\n                m2 = n2;\n                break;\n            }\n            n2 <<= 1;\n        }\n        if (m == -1) return 0;\n        // Calculate C(m + 1, m2 - k)\n        return comb(m + 1, m2 - k);\n    }\n};\n",
    "submit_ts": 1716089948.0
}