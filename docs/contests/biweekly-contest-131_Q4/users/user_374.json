{
    "username": "awesson",
    "submission": "class SegTree\n{\npublic:\n\tSegTree(int _n)\n\t{\n\t\tn = _n;\n\t\ttree.resize(n * 4, 0);\n\t}\n\n\tint GetMax(int x) const\n\t{\n\t\treturn GetRangeValueInternal(0, x, 1, 0, n - 1);\n\t}\n\n\tvoid UpdateValue(int index, int newValue)\n\t{\n\t\tUpdateValueInternal(index, newValue, 1, 0, n - 1);\n\t}\n\nprivate:\n\tint GetRangeValueInternal(int left, int right, int nodeIndex, int nodeRangeLeftIndex, int nodeRangeRightIndex) const\n\t{\n\t\tif (left > right)\n\t\t\treturn 0;\n\n\t\tif (left == nodeRangeLeftIndex && right == nodeRangeRightIndex)\n\t\t\treturn tree[nodeIndex];\n\n\t\tint rangeMid = (nodeRangeLeftIndex + nodeRangeRightIndex) / 2;\n\t\tint leftV = GetRangeValueInternal(left, min(right, rangeMid), nodeIndex * 2, nodeRangeLeftIndex, rangeMid);\n\t\tint rightV = GetRangeValueInternal(max(left, rangeMid + 1), right, nodeIndex * 2 + 1, rangeMid + 1, nodeRangeRightIndex);\n\t\treturn max(leftV, rightV);\n\t}\n\n\tvoid UpdateValueInternal(int index, int newValue, int nodeIndex, int nodeRangeLeftIndex, int nodeRangeRightIndex)\n\t{\n\t\tif (nodeRangeLeftIndex == nodeRangeRightIndex)\n\t\t{\n\t\t\ttree[nodeIndex] = newValue;\n\t\t\treturn;\n\t\t}\n\n\t\tint mid = (nodeRangeLeftIndex + nodeRangeRightIndex) / 2;\n\t\tint leftChild = nodeIndex * 2;\n\t\tint rightChild = leftChild + 1;\n\t\tif (index <= mid)\n\t\t{\n\t\t\tUpdateValueInternal(index, newValue, leftChild, nodeRangeLeftIndex, mid);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tUpdateValueInternal(index, newValue, rightChild, mid + 1, nodeRangeRightIndex);\n\t\t}\n\t\ttree[nodeIndex] = max(tree[leftChild], tree[rightChild]);\n\t}\n\n\tint n;\n\tvector<int> tree;\n};\n\nconstexpr int MaxX = 50001;\n\nclass Solution\n{\npublic:\n\tvector<bool> getResults(vector<vector<int>>& queries)\n\t{\n\t\tSegTree seg(MaxX);\n\t\tset<int> obs;\n\t\tobs.insert(0);\n\t\tobs.insert(MaxX);\n\n\t\tvector<bool> ans;\n\t\tfor (auto& q : queries)\n\t\t{\n\t\t\tint x = q[1];\n\t\t\tif (q[0] == 1)\n\t\t\t{\n\t\t\t\tauto itr = obs.upper_bound(x);\n\t\t\t\tint r = *itr;\n\t\t\t\tint l = *(--itr);\n\t\t\t\tobs.insert(q[1]);\n\t\t\t\tseg.UpdateValue(x, x - l);\n\t\t\t\tseg.UpdateValue(r, r - x);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tint sz = q[2];\n\t\t\t\tbool isValid = seg.GetMax(x) >= sz;\n\t\t\t\tif (!isValid)\n\t\t\t\t{\n\t\t\t\t\tauto itr = obs.lower_bound(x);\n\t\t\t\t\tif (*itr != x)\n\t\t\t\t\t{\n\t\t\t\t\t\tisValid = (x - *(--itr)) >= sz;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tans.push_back(isValid);\n\t\t\t}\n\t\t}\n\n\t\treturn ans;\n\t}\n};",
    "submit_ts": 1716652479.0
}