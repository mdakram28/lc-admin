{
    "username": "jod0311",
    "submission": "class Solution {\npublic:\n    int bfs(vector<vector<int>> &graph, int start, int target1, int target2, int nodes) {\n    queue<int> q;\n    vector<int> visited(nodes + 4, 0);\n    q.push(start);\n    visited[start] = 1;\n    \n    while (!q.empty()) {\n        int node = q.front();\n        q.pop();\n        for (int v : graph[node]) {\n            if (!visited[v]) {\n                q.push(v);\n                visited[v] = 1;\n            }\n        }\n    }\n    return visited[target1] || visited[target2];\n}\n    \n    bool canReachCorner(int X, int Y, vector<vector<int>>& given) {\n         vector<pair<pair<int, int>, int>> c(given.size());\n         vector<vector<int>> graph(given.size() + 4);\n        int count=given.size();\n        \n        for (int i = 0; i < count; ++i) {\n            c[i].first.first=given[i][0];\n            c[i].first.second=given[i][1];\n            c[i].second=given[i][2];\n        }\n        \n        \n        \n         for (int i = 0; i < count; ++i) {\n             \n            if (c[i].first.first <= c[i].second) {\n                graph[count].push_back(i);\n                graph[i].push_back(count);\n            }\n            if (X - c[i].first.first <= c[i].second) {\n                graph[count + 2].push_back(i);\n                graph[i].push_back(count + 2);\n            }\n            if (c[i].first.second <= c[i].second) {\n                graph[count + 1].push_back(i);\n                graph[i].push_back(count + 1);\n            }\n            if (Y - c[i].first.second <= c[i].second) {\n                graph[count + 3].push_back(i);\n                graph[i].push_back(count + 3);\n            }\n            for (int j = i + 1; j < count; ++j) {\n                double distance = sqrt(pow(c[i].first.first - c[j].first.first, 2) +\n                                       pow(c[i].first.second - c[j].first.second, 2));\n                int radius_sum = c[i].second + c[j].second;\n                if (radius_sum >= distance) {\n                    graph[i].push_back(j);\n                    graph[j].push_back(i);\n                }\n            }\n        }\n        \n        int checker = 0;\n    checker = max(checker, bfs(graph, count, count + 1, count + 2, count + 4)); \n    checker = max(checker, bfs(graph, count + 3, count + 2, count + 1, count + 4)); \n\n        if (checker){return false;}\n        return true;\n       \n        \n    }\n};",
    "submit_ts": "1722136622",
    "subm_id": "1335740128"
}