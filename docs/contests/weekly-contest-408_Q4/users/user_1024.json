{
    "username": "flyinglemonjx",
    "submission": "class Solution:\n    def canReachCorner(self, X: int, Y: int, circles: List[List[int]]) -> bool:\n        \"\"\"\n        len(cricles) <= 1000\n        \n        \n        \u5f9e\u7bc4\u4f8b\u4e09\u53ef\u4ee5\u770b\u51fa\uff0c\u6211\u5011\u4e0d\u80fd\u8d70\u908a\uff0c\u800c\u5713\u4e0a\u4efb\u4f55\u4e00\u908a\u90fd\u4e0d\u80fd\u89f8\u78b0\n        \u5f9e\u7bc4\u4f8b\u4e8c\u53ef\u4ee5\u505a\u4e00\u500b\u5feb\u901f\u6aa2\u67e5\uff0c\u5982\u679cstart\u548cend\u90fd\u88ab\u5713\u6db5\u84cb\uff0c\u5247\u5fc5\u7121\u6cd5\u78b0\u5230\n        \n        \u6211\u5011\u53ef\u4ee5\u5206\u5225\u5f9ex\u65b9\u5411\u548cy\u65b9\u5411\u6aa2\u67e5\n        \u662f\u5426\u6709\u6a5f\u6703\u7a7f\u8d8a\n        \u4e5f\u5c31\u662f\u8aaa\uff0cn\u500b\u5713\u5c0dn\u500b\u5713\uff0c\u662f\u5426\u91cd\u758a/\u76f8\u5207\n        \n        \u7136\u5f8c\uff0c\u9084\u8981\u6aa2\u67e5\u5713\u548c\u5713\u5f7c\u6b64\u662f\u5426\u76f8\u9130\n        \"\"\"\n        def sol1():\n            n = len(circles)\n\n            def is_circle_connect_circle(c1, c2):\n                x1, y1, r1 = c1\n                x2, y2, r2 = c2\n                return (x1-x2)**2 + (y1-y2)**2 <= (r1+r2)**2\n            \n            # \u963b\u64cb\u4e86\u8d77\u59cb\u9ede\u7684\u60c5\u6cc1\n            for c in circles:\n                if is_circle_connect_circle(c, (0, 0, 0)):\n                    return False\n                if is_circle_connect_circle(c, (X, Y, 0)):\n                    return False\n            \n            # \u6709\u4e00\u9846\u7403\u585e\u4f4f\u4e0a\u4e0b\u908a\u7684\u60c5\u6cc1\n            def check_block_x(X1, X2):\n                for i in range(n):\n                    cx, _, r = circles[i]\n                    if abs(cx-X1) <= r and abs(cx-X2) <= r:\n                        return True\n                return False\n            \n            def check_block_y(X1, X2):\n                for i in range(n):\n                    _, cx, r = circles[i]\n                    if abs(cx-X1) <= r and abs(cx-X2) <= r:\n                        return True\n                return False\n\n            if check_block_x(0, X):\n                return False\n            \n            if check_block_y(0, Y):\n                return False\n            \n            # \u5f88\u591a\u9846\u7403\u4e32\u8d77\u4f86\uff0c\u963b\u64cb\u5230\u6574\u500b\u908a\u7684\u60c5\u6cc1\n            \"\"\"\n                Y2\n                 |\n            X1 ----- X2\n                 |\n                Y1\n            \n            \u53ef\u4ee5\u662fX1-X2\u963b\u64cb\n            Y1-Y2\n            \n            \u4e5f\u53ef\u4ee5\u662fY2-X2\n            X1-Y1\n            \n            \"\"\"\n             \n            \n            adj = defaultdict(list)\n            for i in range(n):\n                for j in range(n):\n                    if i == j:\n                        continue\n                    if is_circle_connect_circle(circles[i], circles[j]):\n                        adj[i].append(j)\n                        adj[j].append(i)\n            \n\n            \n            \n            def find_touch_x(x):\n                ret = []\n                for i in range(n):\n                    cx, _, r = circles[i]\n                    if abs(cx-x) <= r:\n                        ret.append(i)\n                return ret\n            \n            def find_touch_y(y):\n                ret = []\n                for i in range(n):\n                    _, cy, r = circles[i]\n                    if abs(cy - y) <= r:\n                        ret.append(i)\n                return set(ret)\n            \n            \n            X1 = find_touch_x(0)\n            X2 = find_touch_x(X)\n            \n            Y1 = find_touch_y(0)\n            Y2 = find_touch_y(Y)\n\n            \n            def circles_connect(X1, X2):\n                visited = set()\n                que = deque()\n                for i in X1:\n                    que.append(i)\n                \n                while(que):\n                    i = que.popleft()\n                    if i in visited:\n                        continue\n                    visited.add(i)\n                    \n                    if i in X2:\n                        return True\n                    \n                    for nxt in adj[i]:\n                        que.append(nxt)\n                \n                return False\n                \n                \n            \n            \n            if circles_connect(X1, X2):\n                return False\n            if circles_connect(Y1, Y2):\n                return False\n            \n            if circles_connect(X1, Y1):\n                return False\n            if circles_connect(X2, Y2):\n                return False\n            \n            return True\n        \n        return sol1()",
    "submit_ts": "1722138777",
    "subm_id": "1335799398"
}