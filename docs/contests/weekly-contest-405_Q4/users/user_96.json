{
    "username": "neon772",
    "submission": "struct Node {\n    unordered_map<char, Node*> children; \n    int countEnd = 0; \n    int countPrefix = 0; \n    // \n    int cost;\n    Node() : cost(INT_MAX) {}\n};\n\nclass Trie {\nprivate:\n    Node *root;\n\npublic:\n    Trie() {\n        root = new Node();\n    }\n    Node* getRoot() {\n        return root;\n    }\n\n    void insert(string &s, int cost) {\n        int n = s.size();\n        Node* node = root;\n        for (int i = 0; i < n; i++) {\n            if (node->children.find(s[i]) == node->children.end()) {\n                node->children[s[i]] = new Node();\n            }\n            node = node->children[s[i]];\n            node->countPrefix++;\n        }\n        node->cost = min(node->cost, cost);\n        node->countEnd++;\n    }\n\n    int findNo_oFString(string &s) {\n        int n = s.size();\n        Node* node = root;\n        for (int i = 0; i < n; i++) {\n            if (node->children.find(s[i]) == node->children.end()) {\n                return 0;\n            }\n            node = node->children[s[i]];\n        }\n        return node->countEnd;\n    }\n\n    int No_oF_StringStartWith(string &s) {\n        int n = s.size();\n        Node* node = root;\n        int count = 0;\n        for (int i = 0; i < n; i++) {\n            if (node->children.find(s[i]) == node->children.end()) {\n                return 0;\n            }\n            node = node->children[s[i]];\n            count += (node->countPrefix);\n        }\n        return count;\n    }\n\n    void remove(string &s) {\n        int n = s.size();\n        Node* node = root;\n        for (int i = 0; i < n; i++) {\n            node = node->children[s[i]];\n            node->countPrefix--;\n        }\n        node->countEnd--;\n    }\n};\n\nclass Solution {\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        Trie trie;\n\n        for (int i = 0; i < words.size(); i++) {\n            trie.insert(words[i], costs[i]); \n        }\n\n        int n = target.size();\n        vector<int> dp(n + 1, INT_MAX);\n        dp[0] = 0;\n        Node* root = trie.getRoot();\n\n        for (int i = 0; i < n; i++) {\n            if (dp[i] == INT_MAX) continue;\n            Node* node = root;\n            for (int j = i; j < n; j++) {\n                if (node->children.find(target[j]) == node->children.end()) break;\n                node = node->children[target[j]];\n                if (node->countEnd != 0) {\n                    dp[j + 1] = min(dp[j + 1], dp[i] + node->cost);\n                }\n            }\n        }\n\n        return dp[n] == INT_MAX ? -1 : dp[n];\n    }\n};\n\n",
    "submit_ts": "1720321320",
    "subm_id": "1312319661"
}