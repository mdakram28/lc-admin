{
    "username": "vominhtriet02",
    "submission": "class Solution {\npublic:\n    int minimumDistance(vector<vector<int>>& points) {\n        auto [p1, p2, dist] = find_max_manhattan(points);\n        auto [i1, i2, max1] = find_max_manhattan(without_point(points, p1));\n        auto [i3, i4, max2] = find_max_manhattan(without_point(points, p2));\n\n        return min(max1, max2);\n    }\n    \n    tuple<int,int, int> find_max_manhattan(const vector<vector<int>>& points) {\n        int maxsum, minsum, maxdiff, mindiff;\n        int maxsum_i = 0, minsum_i = 0, maxdiff_i = 0, mindiff_i = 0;\n        maxsum = minsum = points[0][0] + points[0][1];\n        maxdiff = mindiff = points[0][0] - points[0][1];\n        \n        for(int i = 1; i < points.size(); ++i) {\n            int sum = points[i][0] + points[i][1], diff = points[i][0] - points[i][1];\n            \n            if(sum < minsum) minsum = sum, minsum_i = i;\n            else if(sum > maxsum) maxsum = sum, maxsum_i = i;\n            if(diff < mindiff) mindiff = diff, mindiff_i = i;\n            else if(diff > maxdiff) maxdiff = diff, maxdiff_i = i;\n        }\n\n        if(maxsum - minsum > maxdiff - mindiff)\n            return {maxsum_i, minsum_i, maxsum - minsum};\n        return {maxdiff_i, mindiff_i, maxdiff - mindiff};\n    }\n    \n    vector<vector<int>> without_point(const vector<vector<int>>& points, int idx) {\n        vector<vector<int>> ret;\n        for(int i = 0; i < points.size(); ++i) {\n            if(i != idx)\n                ret.push_back(points[i]);\n        }\n        return ret;\n    }\n};"
}