{
    "username": "ywwbill",
    "submission": "class Solution:\n    def countKConstraintSubstrings(self, s: str, k: int, queries: List[List[int]]) -> List[int]:\n        n = len(s)\n        right = [n] * n\n        n0, n1 = 0, 0\n        r = 0\n        for i in range(n):\n            while (n0 <= k or n1 <= k) and r < n:\n                if s[r] == \"0\":\n                    n0 += 1\n                else:\n                    n1 += 1\n                r += 1\n            if n0 > k and n1 > k:\n                right[i] = r - 1\n            if s[i] == \"0\":\n                n0 -= 1\n            else:\n                n1 -= 1\n        p_sum = [0] * n\n        p_sum[0] = right[0]\n        for i in range(1, n):\n            p_sum[i] = p_sum[i - 1] + right[i]\n        m = len(queries)\n        answer = [0] * m\n        for i in range(m):\n            l, r = queries[i]\n            length = r - l + 1\n            total = length * (length + 1) // 2\n            pos = bisect.bisect_left(right, r + 1)\n            num_invalid = 0\n            if pos > 0:\n                pos -= 1\n                if pos >= l:\n                    count = pos - l + 1\n                    num_invalid = (r + 1) * count - p_sum[pos]\n                    if l - 1 >= 0:\n                        num_invalid += p_sum[l - 1]\n            answer[i] = total - num_invalid\n        return answer",
    "submit_ts": "1723952982",
    "subm_id": "556414773"
}