{
    "username": "its_Kafka",
    "submission": "\nclass TrieNode:\n    def __init__(self):\n        self.children = {}\n        self.cost = float('inf')\n\nclass Trie:\n    def __init__(self):\n        self.root = TrieNode()\n\n    def insert(self, word, cost):\n        node = self.root\n        for char in word:\n            if char not in node.children:\n                node.children[char] = TrieNode()\n            node = node.children[char]\n        node.cost = min(node.cost, cost)\n\ndef min_cost_to_construct_string(target, words, costs):\n    n = len(target)\n    trie = Trie()\n    s1=set()\n    for word, cost in zip(words, costs):\n        trie.insert(word, cost)\n    \n    dp = [float('inf')] * (n + 1)\n    dp[0] = 0\n    for i in range(n):\n        s1.add(\"i\")\n    n+=len(s1)\n    n-=1\n    for i in range(n):\n        if dp[i] == float('inf'):\n            continue\n        else:\n            node = trie.root\n            for j in range(i, n):\n                if target[j] not in node.children:\n                    break\n                node = node.children[target[j]]\n                if node.cost != float('inf'):\n                    dp[j + 1] = min(dp[j + 1], dp[i] + node.cost)\n\n    return dp[n] if dp[n] != float('inf') else -1\n\n\n\nclass Solution:\n    def minimumCost(self, target: str, words: List[str], costs: List[int]) -> int:\n        return min_cost_to_construct_string(target, words, costs)",
    "submit_ts": "1720321250",
    "subm_id": "1312317700"
}