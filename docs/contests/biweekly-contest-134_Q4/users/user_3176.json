{
    "username": "kg_codex",
    "submission": "#include <unordered_map>\n#include <vector>\n\nclass Solution {\nprivate:\n   \n    unordered_map<long long, long long> computePrefixAndResults(std::vector<int>& nums) {\n        int n = nums.size();\n        unordered_map<long long, long long> prefixResults;\n        prefixResults[0] = 1; \n        \n        for (int i = 0; i < n; ++i) {\n            prefixResults[nums[i]]++;\n        }\n        \n        return prefixResults;\n    }\n    \npublic:\n    \n    long long countSubarrays(vector<int>& nums, int k) {\n        int n = nums.size();\n        long long totalCount = 0;\n        \n    unordered_map<long long, long long> previousResults;\n\n        for (int i = 0; i < n; ++i) {\n            unordered_map<long long, long long> currentResults; \n\n            if (nums[i] == k) {\n                ++totalCount;\n            }\n            currentResults[nums[i]] = 1;\n\n            for (auto& [val, freq] : previousResults) {\n                long long newAndResult = val & nums[i];\n                if (newAndResult == k) {\n                    totalCount += freq;\n                }\n                currentResults[newAndResult] += freq;\n            }\n            \n            previousResults = currentResults;\n        }\n        \n        return totalCount;\n    }\n};\n",
    "submit_ts": "1720281047",
    "subm_id": "1311811260"
}