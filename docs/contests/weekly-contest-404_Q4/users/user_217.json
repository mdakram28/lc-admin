{
    "username": "FSPINDLE",
    "submission": "class Solution {\npublic:\n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n           \n             int n1 = edges1.size() + 1 , n2 = edges2.size() + 1 ;\n             vector<int>adj1[n1] ,adj2[n2] ;\n            \n             for(auto it : edges1){\n                       adj1[it[0]].push_back(it[1]) ;\n                     adj1[it[1]].push_back(it[0]);\n             }\n             for(auto it : edges2){\n                       adj2[it[0]].push_back(it[1]) ;\n                      adj2[it[1]].push_back(it[0]);\n             }\n            \n            auto give_diameter = [&](vector<int>adj[] , int n ) {\n                    \n            \n              auto bfs=[&](int node)->pair<int,int>{\n \n                       vector<int>dist(n,1e9);\n                       queue<int>q;\n                       q.push(node);\n                       dist[node]=0;\n \n                        while(!q.empty()){\n                             auto node=q.front();\n                             q.pop();             \n                              for(auto it:adj[node]){ \n                                  if(dist[it]!=1e9) continue;\n                                   dist[it]=1+dist[node];\n                                   q.push(it);\n                              }\n                        }\n \n                        int mx=*max_element(dist.begin() ,dist.end());\n                        for(int i=0;i<n;i++){\n                            if(dist[i]==mx) return {i,mx};\n                        }\n                       return {-1 , -1} ;\n \n                  };\n                 \n                    return bfs(bfs(0).first).second;\n            };\n            \n             int d1 = give_diameter(adj1 , n1) ;\n             int d2 = give_diameter(adj2 , n2);\n             \n             int ans = 1 + (d1 + 1) / 2 + (d2 + 1) / 2;\n            ans = max({ans , d1 , d2}) ;\n            return ans;\n    }\n};",
    "submit_ts": 1719717862.0
}