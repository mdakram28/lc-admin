{
    "username": "thedeceptor",
    "submission": "class Solution {\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int n = target.length();\n        vector<long long> dp(n+1,LLONG_MAX);\n        dp[0] = 0;\n        unordered_map<string, int> wC;\n        for (int i = 0; i < words.size(); i++) {\n            wC[words[i]] = min(wC.count(words[i]) ?wC[words[i]]:INT_MAX, costs[i]);\n        }\n        for (int i = 1; i <= n; i++) {\n            for (const auto& [word, cost] : wC) {\n                if (i >= word.length() && target.compare(i - word.length(), word.length(), word) == 0) {\n                    if (dp[i - word.length()]!=LLONG_MAX) {\n                        dp[i] = min(dp[i], dp[i - word.length()] + cost);\n                    }\n                }\n            }\n        }\n        return dp[n] == LLONG_MAX ? -1 : dp[n];\n    }\n};",
    "submit_ts": "1720321503",
    "subm_id": "1312324622"
}