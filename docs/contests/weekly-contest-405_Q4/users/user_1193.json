{
    "username": "castle_byers",
    "submission": "class Solution {\npublic:\n    struct TrieNode {\n        vector<pair<int,int>> wor;\n        unordered_map<char,TrieNode*> child;\n    };\n    class Trie {\n    public:\n        Trie() { root = new TrieNode(); }\n        void place(const string& word, int ind, int cost) {\n            TrieNode* node = root;\n            for (char c : word) {\n                if (node->child.find(c) == node->child.end()) {\n                    node->child[c] = new TrieNode();\n                }\n                node = node->child[c];\n            }\n            node->wor.push_back({word.size(), cost});\n        }void change(){\n            return;\n        }\n        TrieNode* root;\n    };\n    void change(){\n        return;\n    }\n    int minimumCost(string tar, vector<string>& wor, vector<int>& cs) {\n        int n = tar.size(),m=wor.size(),i,j,k;\n        int ans=2e9;\n        change();\n        vector<int> dp(n + 1, 2e9);\n        Trie trie;\n        for (i = 0; i < m; ++i) trie.place(wor[i], i, cs[i]);\n        dp[0] = 0; \n        for (j = 0; j < n; ++j) {\n            if (dp[j]<(int)2e9){\n                TrieNode* node = trie.root;\n                for (int k = j; k < n; ++k) {\n                    if (node->child.find(tar[k]) == node->child.end()) break;\n                    node = node->child[tar[k]];\n                    for (auto& pair : node->wor) {\n                        int word_len = pair.first;\n                        int cost = pair.second;\n                        if (j + word_len <= n) {\n                            dp[j + word_len] = min(dp[j + word_len], dp[j] + cost);\n                        }\n                    }\n                }\n            }else{\n                continue;\n            }\n        }\n        if(dp[n]==2e9) return -1;\n        return dp[n];\n        }\n};",
    "submit_ts": "1720323050",
    "subm_id": "1312366065"
}