{
    "username": "WORTH_IT",
    "submission": "// import java.util.*;\n// import java.util.function.*;\n\n// public class Main {\n//     public static void main(String[] args) throws Exception {\n//         System.out.println(new Solution().solve());\n//     }\n// }\n\nclass Solution {\n    public boolean canReachCorner(int X, int Y, int[][] circles) {\n        int n = circles.length;\n        DSU dsu = new DSU(n);\n        HashSet<Integer> up = new HashSet<>();\n        HashSet<Integer> down = new HashSet<>();\n        HashSet<Integer> left = new HashSet<>();\n        HashSet<Integer> right = new HashSet<>();\n        for (int i = 0; i < n; i++) {\n            long x1 = circles[i][0], y1 = circles[i][1], r1 = circles[i][2];\n\n            for (int j = 0; j < i; j++) {\n                long x2 = circles[j][0], y2 = circles[j][1], r2 = circles[j][2];\n                long d = (x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1);\n                if (d <= (r1 + r2) * (r1 + r2))\n                    dsu.merge(i, j);\n            }\n        }\n\n        // (x - x1)^2 + (y - y1)^2 = r^2\n        for (int i = 0; i < n; i++) {\n            int x = circles[i][0], y = circles[i][1], r = circles[i][2];\n            if (r >= x)\n                left.add(dsu.leader(i));\n            if (r + x >= X)\n                right.add(dsu.leader(i));\n\n            if (r >= y)\n                down.add(dsu.leader(i));\n            if (r + y >= Y)\n                up.add(dsu.leader(i));\n        }\n\n        for (int i : up) {\n            if (right.contains(i) || down.contains(i))\n                return false;\n        }\n        for (int i : left) {\n            if (right.contains(i) || down.contains(i))\n                return false;\n        }\n\n        return true;\n    }\n}\n\nclass DSU {\n    private int n;\n    private int[] parentOrSize;\n\n    public DSU(int n) {\n        this.n = n;\n        this.parentOrSize = new int[n];\n        Arrays.fill(parentOrSize, -1);\n    }\n\n    int merge(int a, int b) {\n        if (!(0 <= a && a < n))\n            throw new IndexOutOfBoundsException(\"a=\" + a);\n        if (!(0 <= b && b < n))\n            throw new IndexOutOfBoundsException(\"b=\" + b);\n\n        int x = leader(a);\n        int y = leader(b);\n        if (x == y) return x;\n        if (-parentOrSize[x] < -parentOrSize[y]) {\n            int tmp = x;\n            x = y;\n            y = tmp;\n        }\n        parentOrSize[x] += parentOrSize[y];\n        parentOrSize[y] = x;\n        return x;\n    }\n\n    boolean same(int a, int b) {\n        if (!(0 <= a && a < n))\n            throw new IndexOutOfBoundsException(\"a=\" + a);\n        if (!(0 <= b && b < n))\n            throw new IndexOutOfBoundsException(\"b=\" + b);\n        return leader(a) == leader(b);\n    }\n\n    int leader(int a) {\n        if (parentOrSize[a] < 0) {\n            return a;\n        } else {\n            parentOrSize[a] = leader(parentOrSize[a]);\n            return parentOrSize[a];\n        }\n    }\n\n    int size(int a) {\n        if (!(0 <= a && a < n))\n            throw new IndexOutOfBoundsException(\"\" + a);\n        return -parentOrSize[leader(a)];\n    }\n\n    ArrayList<ArrayList<Integer>> groups() {\n        int[] leaderBuf = new int[n];\n        int[] groupSize = new int[n];\n        for (int i = 0; i < n; i++) {\n            leaderBuf[i] = leader(i);\n            groupSize[leaderBuf[i]]++;\n        }\n        ArrayList<ArrayList<Integer>> result = new ArrayList<>(n);\n        for (int i = 0; i < n; i++) {\n            result.add(new ArrayList<>(groupSize[i]));\n        }\n        for (int i = 0; i < n; i++) {\n            result.get(leaderBuf[i]).add(i);\n        }\n        result.removeIf(ArrayList::isEmpty);\n        return result;\n    }\n}",
    "submit_ts": "1722135680",
    "subm_id": "1335710019"
}