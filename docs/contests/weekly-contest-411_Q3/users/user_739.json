{
    "username": "dokenobuggy799",
    "submission": "#include <string>\n#include <algorithm>\n\nclass Solution {\npublic:\n    char palinDP[100001][7];\n    char nonZeroDP[100001][7];\n    int modTransition[100001][7];\n    int nonZeroModTransition[100001][7];\n    \n    string largestPalindrome(int length, int divisor) {\nif (divisor == 1 || divisor == 3 || divisor == 9) return string(length, '9');\nif (divisor == 2) return length == 1 ? \"8\" : \"8\" + string(length - 2, '9') + \"8\";\nif (divisor == 5) return length == 1 ? \"5\" : \"5\" + string(length - 2, '9') + \"5\";\nif (divisor == 4) return length <= 3 ? string(length, '8') : \"88\" + string(length - 4, '9') + \"88\";\nif (divisor == 8) return length <= 5 ? string(length, '8') : \"888\" + string(length - 6, '9') + \"888\";\nif (divisor == 6) {\n    if (length == 1) return \"6\";\n    if (length == 2) return \"66\";\n    if (length == 3) return \"888\";\n    string result(length, '9');\n    result[0] = '8';\n    result[length - 1] = '8';\n    if (length % 2 == 1) {\n        result[length / 2] = '8';\n    } else {\n        result[length / 2] = '7';\n        result[length / 2 - 1] = '7';\n    }\n    return result;\n}\n\n\n        if (divisor == 7) {\n            if (length == 1) {\n                return \"7\";\n            }\n            \n            fill(&palinDP[0][0], &palinDP[0][0] + sizeof(palinDP), 0);\n            fill(&nonZeroDP[0][0], &nonZeroDP[0][0] + sizeof(nonZeroDP), 0);\n\n            for (int i = 1; i < 10; ++i) {\n                palinDP[1][i % 7] = '0' + i;\n                if (i != 0) {\n                    nonZeroDP[1][i % 7] = '0' + i;\n                }\n            }\n\n            int modBase = 10 % 7;\n            for (int i = 0; i <= 100000 - 2; ++i) {\n                for (int j = 0; j < 7; ++j) {\n                    if ((i == 0 && j != 0) || (i > 0 && palinDP[i][j] == 0)) {\n                        continue;\n                    }\n                    for (int digit = 9; digit >= 0; --digit) {\n                        int newMod = (modBase * digit + digit + j * 10) % 7;\n                        if (palinDP[i + 2][newMod] == 0 || palinDP[i + 2][newMod] < '0' + digit) {\n                            palinDP[i + 2][newMod] = '0' + digit;\n                            modTransition[i + 2][newMod] = j;\n                        }\n                        if (digit == 0) continue;\n                        if (nonZeroDP[i + 2][newMod] == 0 || nonZeroDP[i + 2][newMod] < '0' + digit) {\n                            nonZeroDP[i + 2][newMod] = '0' + digit;\n                            nonZeroModTransition[i + 2][newMod] = j;\n                        }\n                    }\n                }\n                modBase = (modBase * 10) % 7;\n            }\n\n            int remaining = length;\n            string front(1, nonZeroDP[remaining][0]);\n            string back(1, nonZeroDP[remaining][0]);\n            int mod = nonZeroModTransition[remaining][0];\n            remaining -= 2;\n            while (remaining) {\n                front += palinDP[remaining][mod];\n                if (remaining > 1) back += palinDP[remaining][mod];\n                else break;\n                mod = modTransition[remaining][mod];\n                remaining -= 2;\n            }\n            reverse(back.begin(), back.end());\n            return front + back;\n        }\n\n        return \"\";\n    }\n};\n",
    "submit_ts": "1723953397",
    "subm_id": "1359820197"
}