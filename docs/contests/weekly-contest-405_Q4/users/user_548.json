{
    "username": "tourmaline",
    "submission": "struct TrieNode {\n    char letter;\n    int cost;\n    map<char,TrieNode*> children;\n    bool isWordEnd;\n};\n\nclass Trie {\npublic:\n    Trie() {\n        root = new TrieNode();\n        root->letter = ' ';\n        root->cost = INT_MAX;\n        root->isWordEnd = false;\n    }\n    \n    void insert(const string& word, int cost) {\n        TrieNode* node = root;\n        for (char letter : word) {\n            if (!node->children.count(letter)) {\n                node->children[letter] = new TrieNode();\n                node->children[letter]->letter = letter;\n                node->children[letter]->cost = INT_MAX;\n                node->children[letter]->isWordEnd = false;\n            }\n            node = node->children[letter];\n        }\n        node->isWordEnd = true;\n        // handles duplicated words\n        node->cost = min(node->cost, cost);\n    }\n    \n    TrieNode* root;\n};\n\nclass Solution {\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        Trie trie;\n        int m = words.size();\n        for (int i = 0; i < m; i++) {\n            trie.insert(words[i], costs[i]);\n        }\n            \n        int n = target.size();\n        // A[i] is the min cost to form target[i:]\n        vector<long long> A(n, INT_MAX);\n        for (int i = n - 1; i >= 0; i--) {\n            TrieNode* node = trie.root;\n            int j = i;\n            while (j < n && node->children.count(target[j])) {\n                node = node->children[target[j]];\n                if (node->isWordEnd) {\n                    A[i] = min(A[i], node->cost + (j == n - 1 ? 0 : A[j+1]));\n                }\n                j += 1;\n            }\n        }\n        return A[0] == INT_MAX ? -1 : A[0];\n    }\n};",
    "submit_ts": "1720322710",
    "subm_id": "1312357069"
}