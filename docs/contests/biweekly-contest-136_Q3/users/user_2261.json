{
    "username": "Jack_NP_123",
    "submission": "class Solution:\n    def minFlips(self, grid: List[List[int]]) -> int:\n        ans = 0\n        n = len(grid)\n        m = len(grid[0])\n        def process(i,k):\n            rightTop = grid[i][m - 1 - k]\n            leftBottom = grid[n - 1 - i][k]\n            rightBottom = grid[n - 1 - i][m - 1 - k]\n            me = grid[i][k]\n            all_ = (rightTop + leftBottom + rightBottom + me)\n            # if m - 1 - k == k or n - 1 - i == i:\n            #     return \n            # print(i,k,all_)\n            return min(4 - all_,all_)\n        \n        def pali(arr,tar):\n            if len(arr) ==1:\n                if tar==2:return inf\n                return 0\n            ones = sum(arr)\n            if len(arr)%2==1:\n                ones -= arr[len(arr)//2]\n            cnt = 0\n            for i in range(len(arr)//2):\n                if arr[i] != arr[len(arr) - 1 -i]:\n                    cnt+=1\n            if tar == 2 and ones == 0:\n                return 2\n\n            mn = min(ones % 4, tar - ones % 4)\n            # print(tar,arr,mn)\n            if mn > cnt:\n                return mn\n            return cnt\n        \n        \n        for i in range(n//2):\n            for k in range(m//2):\n                ans += process(i,k)\n        if n%2==1 and m%2==1:\n            ans += min(pali(grid[(n//2)],2) + pali([grid[k][m//2] for k in range(n)],2) , pali(grid[(n//2)],4) + pali([grid[k][m//2] for k in range(n)],4))\n            ans += grid[n//2][m//2]\n        elif n%2==1:\n            ans += pali(grid[(n//2)],4)\n        elif m%2==1:\n            ans += pali([grid[k][m//2] for k in range(n)],4)\n\n        return ans",
    "submit_ts": "1722698870",
    "subm_id": "552272925"
}