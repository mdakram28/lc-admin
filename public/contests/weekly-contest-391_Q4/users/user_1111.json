{
    "username": "zac4",
    "submission": "class Solution {\n    public int minimumDistance(int[][] points) {\n        int N = 1_0000_0000;\n        PriorityQueue<Integer> NE = new PriorityQueue<Integer>((a, b) -> ((points[b][0] + points[b][1]) - (points[a][0] + points[a][1])));\n        PriorityQueue<Integer> NW = new PriorityQueue<Integer>((a, b) -> ((points[b][0] + N - points[b][1]) - (points[a][0] + N - points[a][1])));\n        PriorityQueue<Integer> SE = new PriorityQueue<Integer>((a, b) -> ((N - points[b][0] + points[b][1]) - (N - points[a][0] +points[a][1])));\n        PriorityQueue<Integer> SW = new PriorityQueue<Integer>((a, b) -> ((2 * N - points[b][0] - points[b][1]) - (2 * N -points[a][0] - points[a][1])));\n        for (int i = 0; i < points.length; i++) {\n            NE.offer(i);\n            NW.offer(i);\n            SE.offer(i);\n            SW.offer(i);\n            if (NE.size() > 2) {\n                NE.poll();\n            }\n            if (NW.size() > 2) {\n                NW.poll();\n            }\n            if (SE.size() > 2) {\n                SE.poll();\n            }\n            if (SW.size() > 2) {\n                SW.poll();\n            }\n        }\n        Set<Integer> set = new HashSet();\n        set.addAll(NE);\n        set.addAll(NW);\n        set.addAll(SE);\n        set.addAll(SW);\n        List<Integer> list = new ArrayList(set);\n        int min = Integer.MAX_VALUE;\n        for (int k = 0; k < list.size(); k++) {\n            int max = 0;\n            for (int i = 0; i < list.size(); i++) {\n                if (k == i) {\n                    continue;\n                }\n                int[] a = points[list.get(i)];\n                for (int j = i + 1; j < list.size(); j++) {\n                    if (k == j) {\n                        continue;\n                    }\n                    int[] b = points[list.get(j)];\n                    max = Math.max(max, Math.abs(a[0] - b[0]) + Math.abs(a[1] - b[1]));\n                }\n            }\n            min = Math.min(min, max);\n        }\n        return min;\n    }\n}"
}