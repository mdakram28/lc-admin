{
    "username": "DIGVIJAY2003",
    "submission": "#define MODD 1000000007\n#define MAX 1000\n#define FOR(i, a, b) for(int i = a; i < b; ++i)\n#define DFOR(i, a, b) for(int i = a; i >= b; --i)\n\nclass Solution {\npublic:\n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n        if (edges1.empty() && edges2.empty()) return 1;\n        if (edges1.empty() || edges2.empty()) return 2;\n\n        int d1 = treeDiameter(edges1);\n        int d2 = treeDiameter(edges2);\n\n        vector<int> centers1 = findTreeCenters(edges1);\n        vector<int> centers2 = findTreeCenters(edges2);\n\n        int minDiameter = INT_MAX;\n        FOR(i, 0, centers1.size()) {\n            FOR(j, 0, centers2.size()) {\n                int newDiameter = max({ d1, d2, (d1 + 1) / 2 + (d2 + 1) / 2 + 1 });\n                minDiameter = min(minDiameter, newDiameter);\n            }\n        }\n\n        return minDiameter;\n    }\n\nprivate:\n    int treeDiameter(vector<vector<int>>& edges) {\n        int n = edges.size() + 1;\n        vector<vector<int>> adj(n);\n        vector<int> degree(n, 0);\n\n        FOR(i, 0, edges.size()) {\n            adj[edges[i][0]].push_back(edges[i][1]);\n            adj[edges[i][1]].push_back(edges[i][0]);\n            degree[edges[i][0]]++;\n            degree[edges[i][1]]++;\n        }\n\n        int start = 0;\n        int farthestNode = bfs(adj, degree, start).first;\n        return bfs(adj, degree, farthestNode).second;\n    }\n\n    vector<int> findTreeCenters(vector<vector<int>>& edges) {\n        int n = edges.size() + 1;\n        vector<vector<int>> adj(n);\n        vector<int> degree(n, 0);\n        queue<int> leaves;\n\n        FOR(i, 0, edges.size()) {\n            adj[edges[i][0]].push_back(edges[i][1]);\n            adj[edges[i][1]].push_back(edges[i][0]);\n            degree[edges[i][0]]++;\n            degree[edges[i][1]]++;\n        }\n\n        FOR(i, 0, n) {\n            if (degree[i] == 1) {\n                leaves.push(i);\n            }\n        }\n\n        int remainingNodes = n;\n        while (remainingNodes > 2) {\n            int leavesCount = leaves.size();\n            remainingNodes -= leavesCount;\n            FOR(i, 0, leavesCount) {\n                int leaf = leaves.front();\n                leaves.pop();\n                FOR(j, 0, adj[leaf].size()) {\n                    if (--degree[adj[leaf][j]] == 1) {\n                        leaves.push(adj[leaf][j]);\n                    }\n                }\n            }\n        }\n\n        vector<int> centers;\n        while (!leaves.empty()) {\n            centers.push_back(leaves.front());\n            leaves.pop();\n        }\n\n        return centers;\n    }\n\n    pair<int, int> bfs(vector<vector<int>>& adj, vector<int>& degree, int start) {\n        int n = adj.size();\n        vector<int> dist(n, -1);\n        queue<int> q;\n        q.push(start);\n        dist[start] = 0;\n        int farthestNode = start;\n\n        while (!q.empty()) {\n            int node = q.front();\n            q.pop();\n            FOR(i, 0, adj[node].size()) {\n                int neighbor = adj[node][i];\n                if (dist[neighbor] == -1) {\n                    dist[neighbor] = dist[node] + 1;\n                    q.push(neighbor);\n                    if (dist[neighbor] > dist[farthestNode]) {\n                        farthestNode = neighbor;\n                    }\n                }\n            }\n        }\n\n        return make_pair(farthestNode, dist[farthestNode]);\n    }\n};",
    "submit_ts": 1719719977.0
}