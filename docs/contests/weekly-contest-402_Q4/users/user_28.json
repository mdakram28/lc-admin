{
    "username": "ShikiNatsume",
    "submission": "class SegmentTreeNode:\n    def __init__(self, start, end):\n        self.start = start\n        self.end = end\n        self.peak_count = 0\n        self.left = None\n        self.right = None\n        \ndef build_segment_tree(nums, start, end):\n    if start > end:\n        return None\n    \n    node = SegmentTreeNode(start, end)\n    \n    if start == end:\n        node.peak_count = 0 \n    else:\n        mid = (start + end) // 2\n        node.left = build_segment_tree(nums, start, mid)\n        node.right = build_segment_tree(nums, mid + 1, end)\n        node.peak_count = node.left.peak_count + node.right.peak_count\n\n    return node\n\ndef query_tree(node, start, end):\n    if not node or start > end:\n        return 0\n    \n    if start <= node.start and end >= node.end:\n        return node.peak_count\n    if end < node.start or start > node.end:\n        return 0\n    \n    mid = (node.start + node.end) // 2\n    if end <= mid:\n        return query_tree(node.left, start, end)\n    if start > mid:\n        return query_tree(node.right, start, end)\n    return query_tree(node.left, start, mid) + query_tree(node.right, mid + 1, end)\n\ndef update_tree(nums, node, index, value):\n    if not node or node.start > node.end or index < node.start or index > node.end:\n        return\n    \n    if node.start == node.end:\n        node.peak_count = 1 if is_peak(nums, index) else 0\n    else:\n        update_tree(nums, node.left, index, value)\n        update_tree(nums, node.right, index, value)\n        node.peak_count = node.left.peak_count + node.right.peak_count\n\ndef is_peak(nums, index):\n    if 0 < index < len(nums) - 1 and nums[index - 1] < nums[index] > nums[index + 1]:\n        return True\n    return False\n\nclass Solution:\n    def countOfPeaks(self, nums: List[int], queries: List[List[int]]) -> List[int]:\n        root = build_segment_tree(nums, 0, len(nums) - 1)\n        for i in range(1, len(nums) - 1):\n            if is_peak(nums, i):\n                update_tree(nums, root, i, nums[i])\n\n        results = []\n        for query in queries:\n            qtype, i, j = query\n            if qtype == 1: \n                results.append(query_tree(root, i + 1, j - 1))\n            else:  # Update query\n                nums[i] = j\n                if i > 0:\n                    update_tree(nums, root, i, j)\n                if i > 1:\n                    update_tree(nums, root, i - 1, nums[i-1])\n                if i < len(nums) - 1:\n                    update_tree(nums, root, i + 1, nums[i+1])\n\n        return results",
    "submit_ts": 1718506104.0
}