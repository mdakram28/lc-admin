{
    "username": "ThePrime1",
    "submission": "class Solution:\n    def minimumCost(self, target: str, words: List[str], costs: List[int]) -> int:\n        res = float('inf')\n\n        class Node:\n            def __init__(self, cost = float('inf'), end = False):\n                self.end = end\n                self.cost = cost\n                self.children = dict()\n\n        class trie:\n            def __init__(self):\n                self.root = Node()\n            \n        trie = trie()\n\n        for i in range(len(words)):\n\n            curr = trie.root\n            for ch in words[i]:\n                if ch not in curr.children:\n                    curr.children[ch] = Node()\n                curr = curr.children[ch]\n\n            curr.end = True\n            curr.cost = min(costs[i], curr.cost)\n\n        dp = [float('inf') for _ in range(len(target) + 1)]\n        dp[0] = 0\n\n        for i in range(len(target)):\n            # go down trie starting at target[i]\n            curr = trie.root\n            for j in range(i, len(target)):\n                if target[j] in curr.children:\n                    curr = curr.children[target[j]]\n                else:\n                    break\n\n                if curr.end:\n                    dp[j + 1] = min(dp[j + 1], dp[i] + curr.cost)\n                \n                if j == len(target) - 1:\n                    res = min(dp[-1], res)\n        \n        res = min(dp[-1], res)\n\n        if res == float('inf'):\n            return -1\n        return res",
    "submit_ts": "1720321606",
    "subm_id": "1312327362"
}