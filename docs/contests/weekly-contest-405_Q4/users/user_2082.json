{
    "username": "imankitm",
    "submission": "#include <vector>\n#include <string>\n#include <algorithm>\n#include <climits>\n#include <unordered_map>\n#include <queue>\n\nusing namespace std;\n\nclass Solution {\npublic:\n    struct TrieNode {\n        unordered_map<char, TrieNode*> children;\n        vector<pair<int, int>> word_indices; // (word_index, cost)\n    };\n\n    void insert(TrieNode* root, const string& word, int index, int cost) {\n        TrieNode* node = root;\n        for (char c : word) {\n            if (node->children.find(c) == node->children.end()) {\n                node->children[c] = new TrieNode();\n            }\n            node = node->children[c];\n        }\n        node->word_indices.push_back({index, cost});\n    }\n\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int n = target.size();\n        vector<int> dp(n + 1, INT_MAX);\n        dp[0] = 0;\n\n        TrieNode* root = new TrieNode();\n        for (int i = 0; i < words.size(); ++i) {\n            insert(root, words[i], i, costs[i]);\n        }\n\n        for (int i = 0; i < n; ++i) {\n            if (dp[i] == INT_MAX) continue;\n\n            TrieNode* node = root;\n            for (int j = i; j < n; ++j) {\n                if (node->children.find(target[j]) == node->children.end()) break;\n                node = node->children[target[j]];\n                for (auto& p : node->word_indices) {\n                    int word_index = p.first;\n                    int cost = p.second;\n                    int next_pos = i + words[word_index].size();\n                    if (next_pos <= n) {\n                        dp[next_pos] = min(dp[next_pos], dp[i] + cost);\n                    }\n                }\n            }\n        }\n\n        return dp[n] == INT_MAX ? -1 : dp[n];\n    }\n};\n",
    "submit_ts": "1720322439",
    "subm_id": "1312349977"
}