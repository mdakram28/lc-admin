{
    "username": "abhaytiv",
    "submission": "class Solution {\n    public int minimumDistance(int[][] points) {\n        int n = points.length, res = 2_000_000_000;\n        \n        TreeMap<Integer, Integer> map1 = new TreeMap<>();\n        TreeMap<Integer, Integer> map2 = new TreeMap<>();\n        for(int i = 0; i < n; ++i)\n        {\n            int a = points[i][0] + points[i][1];\n            int b = points[i][0] - points[i][1];\n            map1.put(a, map1.getOrDefault(a, 0) + 1);\n            map2.put(b, map2.getOrDefault(b, 0) + 1);\n        }\n        \n        // System.out.println(map1);\n        // System.out.println(map2);\n        \n        for(int i = 0; i < n; ++i)\n        {\n            int a = points[i][0] + points[i][1];\n            int b = points[i][0] - points[i][1];\n            \n            map1.put(a, map1.getOrDefault(a, 0) - 1);\n            if(map1.get(a) == 0) map1.remove(a);\n            map2.put(b, map2.getOrDefault(b, 0) - 1);\n            if(map2.get(b) == 0) map2.remove(b);\n            \n            int res1 = map1.lastKey() - map1.firstKey();\n            int res2 = map2.lastKey() - map2.firstKey();\n            \n            res = Math.min(res, Math.max(res1, res2));\n            \n            map1.put(a, map1.getOrDefault(a, 0) + 1);\n            map2.put(b, map2.getOrDefault(b, 0) + 1);\n        }\n        \n        return res;\n    }\n}"
}