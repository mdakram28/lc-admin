{
    "username": "mihn1",
    "submission": "class Solution:\n    def minimumDifference(self, nums: List[int], k: int) -> int:\n        prefixMask = [[0] * 32 for _ in range(len(nums))] # prefix bitwise and\n\n        prevMask = prefixMask[0]\n        for i, n in enumerate(nums):\n            for bi in range(32):\n                prefixMask[i][bi] = prevMask[bi]\n                if 1 << bi & n != 0:\n                    prefixMask[i][bi] += 1\n\n            prevMask = prefixMask[i]\n\n        def getMaskValue(mask, length):\n            val = 0\n            for i in range(32):\n                if mask[i] == length:\n                    val += 2 ** i\n            return val\n\n        cur = nums[0]\n        res = abs(cur - k)\n        l = 0\n\n        for r in range(len(nums)):\n            cur &= nums[r]\n            res = min(res, abs(cur - k))\n\n            while cur < k and l < r:\n                # substrack prefixMask[l] from prefixMask[r]\n                subMask = [prefixMask[r][i] - prefixMask[l][i] for i in range(32)]\n                cur = getMaskValue(subMask, r - l)\n                # print('left', l, r, cur, subMask)\n                res = min(res,  abs(cur - k))\n                l += 1\n\n            # print('end', res)\n            if res == 0:\n                return 0\n        \n        return res\n\n\n",
    "submit_ts": 1717300570.0
}