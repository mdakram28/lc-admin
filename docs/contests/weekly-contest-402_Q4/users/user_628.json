{
    "username": "GaleStarr",
    "submission": "class Solution {\n    static int modulo =(int)1e9 + 7;\n    public List<Integer> countOfPeaks(int[] nums, int[][] queries) \n    {\n        int n=nums.length;\n        long peaks[] = new long[n];    \n        \n        for(int i=1;i<n-1;i++) \n        {\n            if(nums[i]>nums[i-1] && nums[i]>nums[i+1])peaks[i]=1;\n        }\n        \n        long trees[] = create(peaks);\n        \n        List<Integer> ans = new ArrayList<>();\n        \n        for(int i=0;i<queries.length;i++) \n        {\n            int type=queries[i][0];\n            \n            if(type==1) \n            {\n                ans.add((int)query(queries[i][1]+1,queries[i][2]-1,trees,peaks));\n            }\n            else \n            {\n                int newval=queries[i][2];\n                int newidx=queries[i][1];\n                nums[newidx]=newval;\n                if(isValid(newidx,nums) && nums[newidx-1]<nums[newidx] && nums[newidx+1]<nums[newidx])\n                {\n                    update(trees,1,newidx,peaks);\n                }\n                else \n                {\n                    update(trees,0,newidx,peaks);\n                }\n                if(isValid(newidx-1,nums) && nums[newidx-2]<nums[newidx-1] && nums[newidx]<nums[newidx-1])\n                {\n                    update(trees,1,newidx-1,peaks);\n                }\n                else \n                {\n                    update(trees,0,newidx-1,peaks);\n                }\n                if(isValid(newidx+1,nums) && nums[newidx+2]<nums[newidx+1] && nums[newidx]<nums[newidx+1])\n                {\n                    update(trees,1,newidx+1,peaks);\n                }\n                else \n                {\n                    update(trees,0,newidx+1,peaks);\n                }\n            }\n        }\n        \n        return ans;\n    }\n    \n    public boolean isValid(int idx,int nums[]) \n    {\n        int n=nums.length;\n        if(idx>0 && idx<n-1)return true;\n        return false;\n    }\n    \n     public static long query(int l , int r,long[] trees,long arr[]) \n    {\n        long ans=query(0,arr.length-1,l,r,trees,0);\n        return ans;\n    }\n \n    public static long query(int st,int end,int l,int r,long[]trees,int idx) \n    {\n        if(st>r || end<l) \n        {\n           \n            return 0;\n        }\n        if(st>=l && end<=r) \n        {\n            \n             long arr= trees[idx];\n            return arr;\n        }\n        int mid=(st+end)/2;\n \n        long arr1=query(st,mid,l,r,trees,2*idx+1);\n        long arr2 =query(mid+1,end,l,r,trees,2*idx+2);\n        long ans = (arr1+arr2);\n \n\n        return ans%modulo;\n    }\n \n    public static void update(long [] trees, long diff, int idx,long arr[]) \n    {\n        updateTrees(trees,diff,idx,0,arr.length-1,0);\n        if(idx<arr.length && idx>=0)arr[idx]=diff;\n    }\n \n    public static void updateTrees(long[] trees, long diff,int idx,int st,int end,int curidx) \n    {\n        if(st>idx || end<idx) \n        {\n            return;\n        }\n        if(st==idx && end==idx) \n        {\n            trees[curidx]=diff;\n            return;\n        }\n \n        int mid=(st+end)/2;\n \n        updateTrees(trees, diff, idx, st, mid, 2*curidx+1);\n        updateTrees(trees, diff, idx, mid+1, end, 2*curidx+2);\n \n         trees[curidx]= (trees[2*curidx+1]+trees[2*curidx+2]);\n      //   trees[curidx][1]=0;   \n    }\n \n    public static long[] create(long arr[]) \n    {\n        long trees[] = new long[4*arr.length];\n        createTrees(trees,arr,0,arr.length-1,0);\n        return trees;\n    }\n \n    public static void createTrees(long trees[],long arr[],int st,int end,int idx) \n    {\n        if(st==end) \n        {\n            trees[idx]=arr[st];\n            trees[idx]%=modulo;\n            return ;\n        }\n \n        int mid=(st+end)/2;\n \n        createTrees(trees, arr, st, mid, 2*idx+1);\n        createTrees(trees, arr, mid+1, end, 2*idx+2);\n \n        trees[idx] = (trees[idx*2+1]+trees[2*idx+2])%modulo; \n      }\n       \n \n}",
    "submit_ts": 1718507469.0
}