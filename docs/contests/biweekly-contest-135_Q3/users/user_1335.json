{
    "username": "fake_name",
    "submission": "class Solution {\npublic:\n\n    int count(vector<int> &v, int x) {\n        int n = v.size(); \n        int l = 0, r = n - 1; \n        int ind = 0;\n        while (l <= r) {\n            int m = l + (r - l) / 2; \n            if (v[m] < x) {\n                l = m + 1; \n            } else {\n                ind = m;\n                r = m - 1; \n            }\n        }\n        return ind; \n    }\n \n    int minChanges(vector<int>& nums, int k) {\n        int n = nums.size(); \n        vector<int> oneStep; \n        map<int,int> mp; \n        for (int i = 0; i < n / 2; i++) {\n            int x = max(nums[i], nums[n - i - 1]); \n            int y = min(nums[i], nums[n - i - 1]); \n            // cout << x << ' ' << y << ' ' << max(x, k - y) << endl; \n            oneStep.push_back(max(x, k - y)); \n            mp[x - y]++; \n        }\n        sort(oneStep.begin(), oneStep.end()); \n        // for (auto it: oneStep) {\n        //     cout << it << ' '; \n        // }\n        // cout << endl; \n        int ans = n; \n        for (auto it: mp) {\n            int ind = count(oneStep, it.first); \n            ans = min(ans, n / 2 - it.second + ind); \n            // cout << it.first << ' ' << it.second << ' ' << ind << ' ' << ans << endl; \n        }\n        return ans; \n    }\n};",
    "submit_ts": "1721488494",
    "subm_id": "1327424070"
}