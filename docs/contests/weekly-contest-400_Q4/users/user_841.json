{
    "username": "SalvadorDali",
    "submission": "struct SegmentTree {\n  n: usize,\n  tree: Vec<i32>,\n}\n\n\nimpl SegmentTree {\n\n  fn new(nums: &Vec<i32>) -> Self {\n    let mut tree = SegmentTree {\n      n: nums.len(),\n      tree: vec![0; 4 * nums.len()],\n    };\n    tree.build(nums, 1, 0, nums.len() - 1);\n    return tree;\n  }\n\n  fn build(&mut self, nums: &Vec<i32>, pos: usize, l: usize, r: usize) {\n    if l == r {\n      self.tree[pos] = nums[l];\n    } else {\n      let m = (l + r) / 2;\n      self.build(nums, 2 * pos, l, m);\n      self.build(nums, 2 * pos + 1, m + 1, r);\n      self.tree[pos] = self.tree[2 * pos] & self.tree[2 * pos + 1];\n    }\n  }\n  \n\n  fn _range(&self, query_l: usize, query_r: usize, pos: usize, l: usize, r: usize) -> i32 {\n    if r < query_l || l > query_r {\n      return -1;\n    }\n\n    if l >= query_l && r <= query_r {\n      return self.tree[pos];\n    }\n\n    let m = (l + r) / 2;\n    let vl = self._range(query_l, query_r, 2 * pos, l, m);\n    let vr = self._range(query_l, query_r, 2 * pos + 1, m + 1, r);\n    if vl == -1 {\n      return vr;\n    }\n    if vr == -1 {\n      return vl\n    }\n    return vl & vr;\n  }\n  \n  fn range(&self, left: usize, right: usize) -> i32 {\n    return self._range(left, right, 1, 0, self.n - 1);  \n  }\n}\n\n\nimpl Solution {\n  pub fn minimum_difference(nums: Vec<i32>, k: i32) -> i32 {\n    let mut st = SegmentTree::new(&nums);\n    let mut res = i32::MAX;\n    for i in 0 .. nums.len() {\n      let (mut lo, mut hi) = (i, nums.len());\n      while lo < hi {\n        let m = (lo + hi) / 2;\n        let val_and = st.range(i, m);\n        if val_and == k {\n          return 0;\n        }\n        if val_and < k {\n          res = res.min(k - val_and);\n          hi = m;\n        } else {\n          res = res.min(val_and - k);\n          lo = m + 1;\n        }\n      }\n    }\n    \n    return res; \n  }\n}\n\n\n",
    "submit_ts": 1717299819.0
}