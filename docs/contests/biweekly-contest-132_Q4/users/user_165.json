{
    "username": "samad_987",
    "submission": "class Solution {\n    static HashMap<Integer,TreeSet<Integer>> hm;\n    static HashMap<Integer,HashMap<Integer,Integer>> hm2;\n    static int dp[][][];\n    public int maximumLength(int[] nums, int k) {\n        hm=new HashMap<>();\n        hm2=new HashMap<>();\n        dp=new int[nums.length][2][k+1];\n        for(int i=0;i<nums.length;i++){\n            for(int j=0;j<2;j++)Arrays.fill(dp[i][j],-1);\n        }\n        for(int i=0;i<nums.length;i++){\n            if(!hm.containsKey(nums[i]))hm.put(nums[i],new TreeSet<>());\n            if(!hm2.containsKey(nums[i]))hm2.put(nums[i],new HashMap<>());\n            hm.get(nums[i]).add(i);\n            int v=hm.get(nums[i]).size()-1;\n            hm2.get(nums[i]).put(i,v);\n        }\n        int ans=0;\n        for(int i=0;i<nums.length;i++){\n            ans=Math.max(ans,Math.max(eval(nums,i,0,k),eval(nums,i,1,k)));\n        }\n        return ans;\n    }\n static int eval(int a[],int i,int bit,int k){\n     if(k<0)return (int)(-1e6);\n     if(i>=a.length)return 0;\n     if(dp[i][bit][k]!=-1)return dp[i][bit][k];\n     int ans=0;\n     if(bit==1 && hm.get(a[i]).higher(i)!=null){\n         int v= hm.get(a[i]).higher(i);\n         ans=Math.max(ans,1+eval(a,v,1,k));\n     // int ind=hm2.get(a[i]).get(i);\n     // ArrayList<Integer> tp=hm.get(a[i]);\n     // for(int j=ind+1;j<tp.size();j++){\n     //     ans=Math.max(ans,1+eval(a,tp.get(j),1,k));\n     // }\n     }\n     ans=Math.max(ans,bit+Math.max(eval(a,i+1,1,k-1),eval(a,i+1,0,k)));\n     return dp[i][bit][k]=ans;\n }   \n}",
    "submit_ts": "1717860015",
    "subm_id": "1281742720"
}