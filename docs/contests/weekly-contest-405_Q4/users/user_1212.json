{
    "username": "lmhhhml2",
    "submission": "class Solution:\n    def minimumCost(self, target: str, words: List[str], costs: List[int]) -> int:\n        class Node:\n            def __init__(self):\n                self.childs = collections.defaultdict(Node)\n                self.is_word_end = []    \n\n        class Trie:\n            def __init__(self): \n                self.root = Node()\n\n            def insert(self, word, idx):\n                current = self.root\n                for char in word:\n                    current = current.childs[char]\n                current.is_word_end.append(idx)\n\n            def find(self, word):\n                current = self.root\n                ret = []\n                for char in word:\n                    current = current.childs.get(char)\n                    if current == None:\n                        break\n                    ret.extend(current.is_word_end)\n                return ret\n\n        word_cost = {}\n        for word, cost in zip(words, costs):\n            if word not in word_cost:\n                word_cost[word] = cost\n            word_cost[word] = min(word_cost[word], cost)\n        words = list(word_cost.keys())\n        costs = [word_cost[word] for word in words]\n        trie = Trie()\n        for idx, word in enumerate(words):\n            trie.insert(word, idx)\n        @lru_cache(None)\n        def dfs(start_idx):\n            nonlocal trie\n            if start_idx == len(target):\n                return 0\n            ret = float(\"inf\")\n            candidates = trie.find(target[start_idx:])\n            if not candidates:\n                return -1\n            for idx in candidates:\n                word = words[idx]\n                next_cost = dfs(start_idx + len(word))\n                if next_cost != -1:\n                    ret = min(ret, costs[idx] + next_cost)\n            return -1 if ret == float(\"inf\") else ret\n        return dfs(0)\n",
    "submit_ts": "1720322801",
    "subm_id": "1312359430"
}