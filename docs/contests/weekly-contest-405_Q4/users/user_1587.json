{
    "username": "sasank2102",
    "submission": "class Solution {\n    \n    class TrieNode {\n        int cost; \n        boolean isWord; \n        TrieNode[] nxt; \n        \n        TrieNode() {\n            isWord = false; \n            cost = Integer.MAX_VALUE; \n            nxt = new TrieNode[26]; \n        }\n    }\n    \n    \n    \n    private int getIdx(char c) {\n        return c - 'a'; \n    }\n    \n    private void insert(TrieNode root, String s, int cost) {\n        TrieNode cur = root; \n        for (int i = 0; i < s.length(); i++) {\n            char curChar = s.charAt(i); \n            int idx = getIdx(curChar); \n            if (cur.nxt[idx] == null) {\n                cur.nxt[idx] = new TrieNode(); \n            }\n            cur = cur.nxt[idx]; \n        }\n        cur.isWord = true; \n        if (cost < cur.cost)\n            cur.cost = cost; \n    }\n    \n    \n    public int minimumCost(String target, String[] words, int[] costs) {\n        TrieNode root = new TrieNode(); \n        int n = words.length; \n        for (int i = 0; i < n; i++) {\n            insert(root, words[i], costs[i]); \n        }\n        \n        int[] dp = new int[target.length()]; \n        Arrays.fill(dp, Integer.MAX_VALUE); \n        \n        int cost =  cost(target, 0, root, dp); \n        if (cost == Integer.MAX_VALUE) return -1; \n        return cost; \n    }\n    \n    private int cost(String target, int idx, TrieNode root, int[] dp) {\n        // System.out.println(\"calling: \" + idx);\n        if (idx == target.length()) return 0; \n        if (dp[idx] != Integer.MAX_VALUE) return dp[idx]; \n        \n        TrieNode cur = root; \n        int minCost = Integer.MAX_VALUE; \n        \n        for (int i = idx; i < target.length(); i++) {\n            char curChar = target.charAt(i); \n            int curIdx = getIdx(curChar); \n            if (cur.nxt[curIdx] == null) break;\n            cur = cur.nxt[curIdx]; \n            if (cur.isWord) { \n                // System.out.println(curChar + \" \" + \"isWord:\" + i);\n                int curCost = cur.cost;                 \n                int remaining = cost(target, i+1, root, dp); \n                // System.out.println(i + \" \" + i + \" \" + curCost + \" \" + remaining);\n                if (remaining == Integer.MAX_VALUE)\n                    curCost = Integer.MAX_VALUE; \n                else \n                    curCost = curCost + remaining;                     \n                minCost = Math.min(minCost, curCost); \n            }\n        }\n        return dp[idx] = minCost;         \n    }\n    \n    \n}",
    "submit_ts": "1720324524",
    "subm_id": "1312401621"
}