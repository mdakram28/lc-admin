{
    "username": "Hritik kumar",
    "submission": "#include <vector>\n#include <algorithm>\n#include <climits>\n\nclass Solution {\npublic:\n    long long maximumValueSum(std::vector<std::vector<int>>& board) {\n        int n = board.size();\n        int m = board[0].size();\n        std::vector<std::tuple<long long, int, int>> candidates; // Use long long for value to avoid overflow\n\n        // Find top 3 values for each column\n        for (int j = 0; j < m; j++) {\n            long long max1 = LLONG_MIN, max2 = LLONG_MIN, max3 = LLONG_MIN;\n            int max1_row = -1, max2_row = -1, max3_row = -1;\n            \n            for (int i = 0; i < n; i++) {\n                if (board[i][j] > max1) {\n                    max3 = max2; max3_row = max2_row;\n                    max2 = max1; max2_row = max1_row;\n                    max1 = board[i][j]; max1_row = i;\n                } else if (board[i][j] > max2) {\n                    max3 = max2; max3_row = max2_row;\n                    max2 = board[i][j]; max2_row = i;\n                } else if (board[i][j] > max3) {\n                    max3 = board[i][j]; max3_row = i;\n                }\n            }\n\n            if (max1_row != -1) candidates.push_back({max1, max1_row, j});\n            if (max2_row != -1) candidates.push_back({max2, max2_row, j});\n            if (max3_row != -1) candidates.push_back({max3, max3_row, j});\n        }\n\n        // Sort candidates by value in descending order\n        std::sort(candidates.begin(), candidates.end(), [](const std::tuple<long long, int, int>& a, const std::tuple<long long, int, int>& b) {\n            return std::get<0>(a) > std::get<0>(b);\n        });\n\n        // Find the maximum sum with three unique rows and columns\n        long long max_sum = LLONG_MIN;\n        int candidate_size = candidates.size();\n        for (int i = 0; i < candidate_size; i++) {\n            for (int j = i + 1; j < candidate_size; j++) {\n                for (int k = j + 1; k < candidate_size; k++) {\n                    long long value1, value2, value3;\n                    int row1, col1, row2, col2, row3, col3;\n                    std::tie(value1, row1, col1) = candidates[i];\n                    std::tie(value2, row2, col2) = candidates[j];\n                    std::tie(value3, row3, col3) = candidates[k];\n\n                    // Ensure all rows and columns are unique\n                    if (row1 != row2 && row1 != row3 && row2 != row3 && col1 != col2 && col1 != col3 && col2 != col3) {\n                        // Perform addition only if the combination is valid\n                        long long sum = value1 + value2 + value3;\n                        max_sum = std::max(max_sum, sum);\n                    }\n                }\n            }\n        }\n\n        return max_sum;\n    }\n};\n",
    "submit_ts": "1723907111",
    "subm_id": "1359090610"
}