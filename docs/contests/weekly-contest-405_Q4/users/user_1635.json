{
    "username": "adtyx",
    "submission": "class Solution {\npublic:\n    struct TrieNode {\n        unordered_map<char, TrieNode*> children;\n        vector<int> wordEnds;  // stores indexes of words ending at this node\n    };\n\n    void insertWord(TrieNode* root, const string& word, int index) {\n        TrieNode* node = root;\n        for (char c : word) {\n            if (node->children.find(c) == node->children.end()) {\n                node->children[c] = new TrieNode();\n            }\n            node = node->children[c];\n        }\n        node->wordEnds.push_back(index);  // Mark the end of a word\n    }\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n    int n = target.length();\n    vector<int> dp(n + 1, INT_MAX);\n    dp[0] = 0;\n    TrieNode* root = new TrieNode();\n\n    // Build the Trie for words\n    for (int i = 0; i < words.size(); ++i) {\n        insertWord(root, words[i], i);\n    }\n\n    // Process each position in target using Trie\n    for (int i = 0; i < n; ++i) {\n        if (dp[i] == INT_MAX) continue; // Skip unreachable positions\n        TrieNode* node = root;\n        for (int j = i; j < n && node != nullptr; ++j) {\n            node = node->children[target[j]];\n            if (!node) break;\n            for (int idx : node->wordEnds) {\n                int newCost = dp[i] + costs[idx];\n                if (j + 1 <= n) {\n                    dp[j + 1] = min(dp[j + 1], newCost);\n                }\n            }\n        }\n    }\n\n    return dp[n] == INT_MAX ? -1 : dp[n];\n    }\n};",
    "submit_ts": "1720324636",
    "subm_id": "1312404352"
}