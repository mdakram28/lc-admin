{
    "username": "Starscourge_lord",
    "submission": "struct TrieNode {\n    unordered_map<char, TrieNode*> children;\n    vector<pair<int, int>> wordIndices; // Stores pairs of (index in words array, cost)\n};\n\nclass Solution {\npublic:\n    void insert(TrieNode* root, const string& word, int index, int cost) {\n        TrieNode* node = root;\n        for (char ch : word) {\n            if (!node->children.count(ch)) {\n                node->children[ch] = new TrieNode();\n            }\n            node = node->children[ch];\n        }\n        node->wordIndices.push_back({index, cost});\n    }\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n         int n = target.size();\n        TrieNode* root = new TrieNode();\n        for (int i = 0; i < words.size(); ++i) {\n            insert(root, words[i], i, costs[i]);\n        }\n\n        vector<int> dp(n + 1, INT_MAX); // dp[i] will hold the minimum cost to form the first i characters of target\n        dp[0] = 0; // base case: cost to form an empty string is 0\n\n        for (int i = 0; i < n; ++i) {\n            if (dp[i] == INT_MAX) continue; // skip if i-th position is not reachable\n\n            TrieNode* node = root;\n            for (int j = i; j < n && node; ++j) {\n                if (node->children.count(target[j])) {\n                    node = node->children[target[j]];\n                    for (auto [index, cost] : node->wordIndices) {\n                        int wordLen = words[index].length();\n                        if (j + 1 == i + wordLen) {\n                            dp[j + 1] = min(dp[j + 1], dp[i] + cost);\n                        }\n                    }\n                } else {\n                    break;\n                }\n            }\n        }\n\n        return dp[n] == INT_MAX ? -1 : dp[n];\n    }\n};",
    "submit_ts": "1720324243",
    "subm_id": "1312394896"
}