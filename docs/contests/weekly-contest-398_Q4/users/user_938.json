{
    "username": "vaishnaviyadav_25",
    "submission": "class Solution:\n    def __init__(self):\n        self.memo = {}\n\n    def dfs(self, target_stair, current_stair, current_jump, can_jump):\n        # Base case: if current stair exceeds target + 5 or jump exceeds 31, return 0\n        if current_stair > target_stair + 5 or current_jump > 31:\n            return 0\n\n        # If the result is already memoized, return it\n        if current_stair in self.memo and self.memo[current_stair][current_jump][can_jump] != -1:\n            return self.memo[current_stair][current_jump][can_jump]\n\n        # Initialize answer\n        ans = 1 if current_stair == target_stair else 0\n\n        # Recursive cases\n        if can_jump:\n            ans += self.dfs(target_stair, current_stair - 1, current_jump, False)\n        if current_stair + (1 << current_jump) <= target_stair + 1:\n            ans += self.dfs(target_stair, current_stair + (1 << current_jump), current_jump + 1, True)\n\n        # Memoize the result\n        if current_stair not in self.memo:\n            self.memo[current_stair] = [[-1] * 2 for _ in range(32)]\n        self.memo[current_stair][current_jump][can_jump] = ans\n\n        return ans\n\n    def waysToReachStair(self, k):\n        return self.dfs(k, 1, 0, True)  # Start recursion from stair 1 with initial jump 0 and can_jump set to True\n",
    "submit_ts": 1716089333.0
}