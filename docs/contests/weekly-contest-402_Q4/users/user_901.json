{
    "username": "urimaj",
    "submission": "class Solution {\npublic:\n    int tree[400010] = {0};\n    vector<int> countOfPeaks(vector<int>& nums, vector<vector<int>>& queries) {\n        vector<int> ans;\n        unordered_map<int, set<int>> m;\n        for (int i = 0; i < nums.size(); i++) {\n            if (i && i != nums.size() - 1) {\n                update(i, nums);\n            }\n        }\n        \n\n        for (auto& q : queries) {\n            if (q[0] == 1) {\n                int l = q[1];\n                int r = q[2];\n                auto res = query(0, 0, nums.size() - 1, q[1] + 1, q[2] - 1);\n                ans.push_back(res);\n                \n            }\n            else {\n                int index = q[1];\n                int val = q[2];\n                nums[index] = val;\n                update(index, nums);\n                update(index - 1, nums);\n                update(index + 1, nums);\n                                \n\n            }\n        }\n        return ans;\n    }\n    \n    void update(int index, vector<int>& nums) {\n        if (index < nums.size() - 1 && index > 0) {\n            if (nums[index] > nums[index - 1] && nums[index] > nums[index + 1]) {\n                updateTree(0, 0, nums.size() - 1, index, 1);\n            }\n            else {\n                updateTree(0, 0, nums.size() - 1, index, 0);\n            }\n        }\n    }\n    \n    void updateTree(int idx, int s, int e, int pos, long long val) {\n        if (pos < s || pos > e) return;\n\n        if (s == e) {\n            if (pos == e) {\n                tree[idx] = val;\n            }\n            return;\n        }\n\n        int mid = (s + e) / 2;\n        updateTree(2 * idx + 1, s, mid, pos, val);\n        updateTree(2 * idx + 2, mid + 1, e, pos, val);\n        tree[idx] = tree[2 * idx + 1] + tree[2 * idx + 2];\n    }\n    \n    long long query(int idx, int s, int e, int qs, int qe) {\n        // out of range\n        if (e < qs || s > qe) return 0;\n\n        // in range\n        if (s >= qs && e <= qe) return tree[idx];\n\n        int mid = (s + e) / 2;\n        return (query(2 * idx + 1, s, mid, qs, qe) + query(2 * idx + 2, mid + 1, e, qs, qe));\n    }\n};",
    "submit_ts": "1718507856",
    "subm_id": "1289664520"
}