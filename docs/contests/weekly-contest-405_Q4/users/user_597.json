{
    "username": "Manvi_surya",
    "submission": "class Solution {\n    class TrieNode {\n        Map<Character, TrieNode> children;\n        List<int[]> costs; \n        \n        TrieNode() {\n            children = new HashMap<>();\n            costs = new ArrayList<>();\n        }\n    }\n    public int minimumCost(String target, String[] words, int[] costs) {   \n    TrieNode root = new TrieNode();\n        \n        // Build the trie from words\n        for (int i = 0; i < words.length; i++) {\n            String word = words[i];\n            int cost = costs[i];\n            insert(root, word, cost);\n        }\n        \n        int n = target.length();\n        int[] dp = new int[n + 1];\n        Arrays.fill(dp, Integer.MAX_VALUE);\n        dp[0] = 0;\n        \n        // DP traversal\n        for (int i = 0; i < n; i++) {\n            if (dp[i] == Integer.MAX_VALUE) continue;\n            TrieNode node = root;\n            for (int j = i; j < n; j++) {\n                char c = target.charAt(j);\n                if (!node.children.containsKey(c)) break;\n                node = node.children.get(c);\n                for (int[] pair : node.costs) {\n                    int len = pair[0];\n                    int cost = pair[1];\n                    if (i + len <= n) {\n                        dp[i + len] = Math.min(dp[i + len], dp[i] + cost);\n                    }\n                }\n            }\n        }\n        \n        return dp[n] == Integer.MAX_VALUE ? -1 : dp[n];\n    }\n    \n    private void insert(TrieNode root, String word, int cost) {\n        TrieNode node = root;\n        for (char c : word.toCharArray()) {\n            node.children.putIfAbsent(c, new TrieNode());\n            node = node.children.get(c);\n        }\n        node.costs.add(new int[]{word.length(), cost});\n    }\n    \n}",
    "submit_ts": "1720321921",
    "subm_id": "1312335854"
}