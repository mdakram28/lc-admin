{
    "username": "himcoder0",
    "submission": "/************************ SEGEMENT TREE ****************************/\nclass SegmentTree {\n    int seg[4 * 100005];\n    vector<int> a;\n    int n;\n    bool isPeak(int i)\n    {\n        if (i <= 0 || i >= n - 1)\n            return 0;\n        return a[i] > a[i - 1] && a[i] > a[i + 1];\n    }\n    void build(int ind, int low, int high)\n    {\n        if (low == high)\n        {\n            seg[ind] = isPeak(low) ? 1 : 0;\n            return;\n        }\n        int mid = (low + high) / 2;\n        build(2 * ind + 1, low, mid);\n        build(2 * ind + 2, mid + 1, high);\n        seg[ind] = seg[2 * ind + 1] + seg[2 * ind + 2];\n    }\n    int query(int ind, int low, int high, int l, int r)\n    {\n        if (low >= l && high <= r)\n        { \n            return seg[ind];\n        }\n        if (high < l || low > r)\n        {\n            return 0;\n        }\n        int mid = (low + high) / 2;\n        int left = query(2 * ind + 1, low, mid, l, r);\n        int right = query(2 * ind + 2, mid + 1, high, l, r);\n        return left + right;\n    }\n    void update(int ind, int start, int end, int idx)\n    {\n        if (start == end)\n        {\n            seg[ind] = isPeak(idx) ? 1 : 0;\n        }\n        else\n        {\n            int mid = (start + end) / 2;\n            if (start <= idx && idx <= mid)\n            {\n                update(2 * ind + 1, start, mid, idx);\n            }\n            else\n            {\n                update(2 * ind + 2, mid + 1, end, idx);\n            }\n            seg[ind] = seg[2 * ind + 1] + seg[2 * ind + 2];\n        }\n    }\npublic :\n    SegmentTree (vector<int> nums)\n    {\n        a = nums;\n        n = nums.size();\n        build(0, 0, n - 1);\n    }\n    int make_query(int l, int r)\n    {\n        if (l > r)\n            return 0;\n        return query(0, 0, n - 1, l + 1, r - 1);\n    }\n    void update_val(int idx, int val)\n    {\n        a[idx] = val;\n        if (idx > 0)\n            update(0, 0, n - 1, idx - 1);\n        update(0, 0, n - 1, idx);\n        if (idx < n - 1)\n            update(0, 0, n - 1, idx + 1);\n    }\n};\n/************************ SEGEMENT TREE ENDS ****************************/\n\nclass Solution {\npublic:\n    vector<int> countOfPeaks(vector<int>& nums, vector<vector<int>>& queries) {\n        SegmentTree obj(nums);\n        vector<int> res;\n        for (auto &q : queries) \n        {\n            if (q[0] == 1) \n            {\n                res.push_back(obj.make_query(q[1], q[2]));\n            } \n            else \n            {\n                obj.update_val(q[1], q[2]);\n            }\n        }\n        return res;\n    }\n};",
    "submit_ts": 1718508377.0
}