{
    "username": "sobols",
    "submission": "class Solution {\npublic:\n    int minimumDistance(vector<vector<int>>& points) {\n        int n = points.size();\n        \n        vector<pair<int, int>> sums(n);\n        vector<pair<int, int>> diffs(n);\n        for (int i = 0; i < n; ++i) {\n            int x = points[i][0], y = points[i][1];\n            sums[i] = {x+y, i};\n            diffs[i] = {x-y, i};\n        }\n        \n        sort(sums.begin(), sums.end());\n        sort(diffs.begin(), diffs.end());\n        \n        auto get = [](const vector<pair<int, int>>& v, int i, int di, int forb) {\n            if (v[i].second != forb) {\n                return v[i].first;\n            } else {\n                return v[i+di].first;\n            }\n        };\n        \n        int ans = numeric_limits<int>::max();\n        for (int i = 0; i < n; ++i) {\n            int cur = max(\n                get(sums, n-1, -1, i) - get(sums, 0, +1, i),\n                get(diffs, n-1, -1, i) - get(diffs, 0, +1, i)\n            );\n            ans = min(cur, ans);\n        }\n        return ans;\n    }\n};"
}