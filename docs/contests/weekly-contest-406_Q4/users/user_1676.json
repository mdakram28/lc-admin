{
    "username": "saffier",
    "submission": "class Solution {\n    public long minimumCost(int m, int n, int[] horizontalCut, int[] verticalCut) {\n        PriorityQueue<Integer> q1 = new PriorityQueue<>((a,b)-> (b-a));\n        PriorityQueue<Integer> q2 = new PriorityQueue<>((a,b)-> (b-a));\n        for(int i:horizontalCut)q1.add(i);\n        for(int i:verticalCut)q2.add(i);\n        int hcount = 1;\n        int vcount = 1;\n        long cost = 0;\n        while(!q1.isEmpty() && !q2.isEmpty()){\n            if(q1.peek()>q2.peek()){\n                int curcost = q1.poll();\n                cost+= curcost * vcount;\n                hcount++;\n            }else{\n                int curcost = q2.poll();\n                cost+= curcost * hcount;\n                vcount++;\n            }\n        }\n        \n        while(!q1.isEmpty()){\n            int curcost = q1.poll();\n            cost+= curcost * vcount;\n            hcount++;\n        }\n        \n        while(!q2.isEmpty()){\n          int curcost = q2.poll();\n            cost+= curcost * hcount;\n            vcount++;\n        }\n        \n        return cost;\n    }\n}",
    "submit_ts": "1720926091",
    "subm_id": "546444006"
}