{
    "username": "shiva_San",
    "submission": "class Solution {\npublic:\n    long long minimumCost(int m, int n, vector<int>& horizontalCut, vector<int>& verticalCut) {\n        priority_queue<int> hCuts(horizontalCut.begin(), horizontalCut.end());\n        priority_queue<int> vCuts(verticalCut.begin(), verticalCut.end());\n\n        int horizontalSegments = 1;\n        int verticalSegments = 1;\n\n        long long totalCost = 0;\n\n        while (!hCuts.empty() || !vCuts.empty()) {\n            if (vCuts.empty() || (!hCuts.empty() && hCuts.top() > vCuts.top())) {\n                totalCost += hCuts.top() * verticalSegments;\n                hCuts.pop();\n                horizontalSegments++;\n            } else {\n                totalCost += vCuts.top() * horizontalSegments;\n                vCuts.pop();\n                verticalSegments++;\n            }\n        }\n\n        return totalCost;\n    }\n};",
    "submit_ts": "1720926193",
    "subm_id": "1320278722"
}