{
    "username": "rohandhobale1602",
    "submission": "class Solution {\n    public int numberOfPermutations(int n, int[][] requirements) {\n                      final int MOD = 1_000_000_007;\n        \n        // DP array\n        int[][] dp = new int[n + 1][n * (n - 1) / 2 + 1];\n        dp[0][0] = 1;\n        \n        // Populate DP table\n        for (int i = 1; i <= n; i++) {\n            for (int j = 0; j <= n * (n - 1) / 2; j++) {\n                dp[i][j] = dp[i - 1][j];\n                if (j >= i) {\n                    dp[i][j] = (dp[i][j] + dp[i][j - i]) % MOD;\n                }\n            }\n        }\n\n        // Initialize the number of ways to have exactly cnt inversions in the first i elements\n        int[][] ways = new int[n + 1][401];\n        ways[0][0] = 1;\n\n        for (int i = 1; i <= n; i++) {\n            for (int j = 0; j <= 400; j++) {\n                for (int k = 0; k <= i - 1 && j - k >= 0; k++) {\n                    ways[i][j] = (ways[i][j] + ways[i - 1][j - k]) % MOD;\n                }\n            }\n        }\n\n        // Initialize the list of valid ways\n        List<Integer> valid = new ArrayList<>(Collections.nCopies(n, -1));\n        for (int[] req : requirements) {\n            valid.set(req[0], req[1]);\n        }\n\n        // DP to count permutations\n        int[][] permDP = new int[n + 1][401];\n        permDP[0][0] = 1;\n\n        for (int i = 1; i <= n; i++) {\n            for (int j = 0; j <= 400; j++) {\n                if (valid.get(i - 1) != -1 && valid.get(i - 1) != j) {\n                    continue;\n                }\n                for (int k = 0; k <= j && k < i; k++) {\n                    permDP[i][j] = (permDP[i][j] + permDP[i - 1][j - k]) % MOD;\n                }\n            }\n        }\n\n        return permDP[n][valid.get(n - 1)];\n    }\n}",
    "submit_ts": "1719067686",
    "subm_id": "1296736049"
}