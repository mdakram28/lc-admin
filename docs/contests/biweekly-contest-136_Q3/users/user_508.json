{
    "username": "6cdh",
    "submission": "(define (min-flips grid)\n  (set! grid (list2d->vector2d grid))\n  (define-values (m n) (vector2d-dims grid))\n  (define same-bit-counter (make-hash))\n  (define added (mutable-set))\n\n  (define (add-pos i j tag)\n    (define pos (list i j))\n    (when (not (set-member? added (list i j)))\n      (set-add! added pos)\n      (hash-update! same-bit-counter tag\n                    (\u03bb (old) (list-update old (aref grid i j) add1))\n                    '(0 0))\n      (add-pos i (- n 1 j) tag)\n      (add-pos (- m 1 i) j tag)))\n\n  (define inf (* m n))\n\n  (define (mod4 x) (modulo x 4))\n\n  (define (pick idx ones%4)\n    (cond [(= idx (vector-length counter))\n           (if (zero? ones%4) 0 inf)]\n          [else\n           (match-define (list zeros ones) (aref counter idx))\n           (min (+ zeros (pick (add1 idx) (mod4 (+ ones%4 zeros ones))))\n                (+ ones (pick (add1 idx) ones%4)))]))\n\n  (for* ([i m]\n         [j n])\n    (add-pos i j (hash-count same-bit-counter)))\n\n  (define counter (list->vector (hash-values same-bit-counter)))\n  (cachef-vec! pick (vector-length counter) 4 -1)\n  (pick 0 0))\n\n(require syntax/parse/define)\n\n(define-syntax make-array\n  (syntax-rules ()\n    [(_ n init)\n     (build-vector n (\u03bb _ init))]\n    [(_ n args ...)\n     (build-vector n (\u03bb _ (make-array args ...)))]))\n\n(define-syntax aref\n  (syntax-rules ()\n    [(_ arr) arr]\n    [(_ arr i dims ...)\n     (aref (vector-ref arr i) dims ...)]))\n\n(define-syntax aset!\n  (syntax-rules ()\n    [(_ arr dim new-val)\n     (vector-set! arr dim new-val)]\n    [(_ arr dim1 dims ... new-val)\n     (aset! (vector-ref arr dim1) dims ... new-val)]))\n\n(define (list2d->vector2d lst)\n  (list->vector (map list->vector lst)))\n\n(define (vector2d-dims vecvec)\n  (define m (vector-length vecvec))\n  (define n (if (= 0 m) 0 (vector-length (vector-ref vecvec 0))))\n  (values m n))\n\n(define-syntax-parse-rule (cachef-vec! fn:id hints:expr ... init)\n  (set! fn (cachef-vec fn hints ... init)))\n\n(define-syntax-parser cachef-vec\n  [(_ fn:id hints:expr ... init)\n   (with-syntax ([(args ...) (generate-temporaries #'(hints ...))])\n     #'(let* ([cache (make-array hints ... init)]\n              [ori-fn fn])\n         (lambda (args ...)\n           (cond [(or (< args 0) ...\n                      (>= args hints) ...)\n                  (ori-fn args ...)]\n                 [else\n                  (when (equal? init (aref cache args ...))\n                    (aset! cache args ... (ori-fn args ...)))\n                  (aref cache args ...)]))))])",
    "submit_ts": "1722697541",
    "subm_id": "1343150269"
}