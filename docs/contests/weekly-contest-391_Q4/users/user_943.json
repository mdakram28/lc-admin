{
    "username": "Sariabell",
    "submission": "class Solution {\npublic:\n    int k_up(vector<int>& v) {\n        return v[1] - v[0];\n    }\n    \n    int k_down(vector<int>& v) {\n        return v[0] + v[1];\n    }\n    \n    // max_distance\n    vector<int> solve(vector<vector<int>>& points, int ex = -1) {\n        int s = 0;\n        if (ex == 0)\n            s = 1;\n        int n = points.size();\n        int l1 = s;\n        int k1 = k_up(points[s]);\n        int l2 = s;\n        int k2 = k_down(points[s]);\n        int max_dis = 0;\n        int max_l = s;\n        int max_r = s;\n        \n        auto get_dis = [&](int l, int r) {\n            return abs(points[l][0] - points[r][0]) + abs(points[l][1] - points[r][1]);\n        };\n        \n        for (int i = s + 1; i < n; ++i) {\n            if (i == ex) continue;\n            \n            int d = get_dis(l1, i);\n            if (max_dis < d) {\n                max_l = l1;\n                max_r = i;\n                max_dis = d;\n            }\n            \n            d = get_dis(l2, i);\n            if (max_dis < d) {\n                max_l = l2;\n                max_r = i;\n                max_dis = d;\n            }\n            \n            int tk1 = k_up(points[i]);\n            if (k1 < tk1) {\n                l1 = i;\n                k1 = tk1;\n            }\n            \n            int tk2 = k_down(points[i]);\n            if (tk2 < k2) {\n                l2 = i;\n                k2 = tk2;\n            }\n        }\n        \n        return { max_dis, max_l, max_r };\n    }\n    \n    int minimumDistance(vector<vector<int>>& points) {\n        sort(points.begin(), points.end(), [](auto& l, auto& r) {\n            if (l[0] == r[0])\n                return l[1] < r[1];\n            return l[0] < r[0];\n        });\n        auto v1 = solve(points);\n        auto v2 = solve(points, v1[1]);\n        auto v3 = solve(points, v1[2]);\n        return min(v2[0], v3[0]);\n    }\n};"
}