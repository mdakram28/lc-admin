{
    "username": "AnnieW",
    "submission": "class Solution {\nprivate:\n    vector<unordered_set<int>> g(vector<vector<int>>& edges1) {\n        int n = edges1.size() + 1;\n        vector<unordered_set<int>> ret(n);\n        for (auto& e: edges1) {\n            ret[e[0]].insert(e[1]);\n            ret[e[1]].insert(e[0]);\n        }\n        return ret;\n    }\n    queue<int> find_leaves(vector<unordered_set<int>>& G) {\n        queue<int> ret;\n        for (int i = 0; i < G.size(); ++i) {\n            if (G[i].size() == 1) ret.push(i);\n        }\n        return ret;\n    }\n    pair<int, int> d(vector<unordered_set<int>>& G, queue<int>& l) { // diameter, local max path\n        int ret = 0;\n        int len;\n        while (!l.empty()) {\n            ++ret;\n            len = l.size();\n            for (int i = 0; i < len; ++i) {\n                int cur = l.front();\n                l.pop();\n                if (G[cur].empty()) continue;\n                int p = *(G[cur].begin());\n                G[p].erase(cur);\n                if (G[p].size() == 1) l.push(p);\n            }\n        }\n        int p1 = (len == 1) ? (ret - 1) : ret;\n        int p2 = (len == 1) ? (2 * ret - 2) : (2 * ret - 1);\n        return make_pair(p1, p2);\n    }\n    pair<int, int> f(vector<vector<int>>& edges1) {\n        int n = edges1.size();\n        vector<unordered_set<int>> G1 = g(edges1);\n        queue<int> l1 = find_leaves(G1);\n        return d(G1, l1);\n    }\npublic:\n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n        if (edges1.empty() || edges2.empty()) {\n            if (edges1.empty() && edges2.empty()) return 1;\n            if (edges1.empty()) return f(edges2).first + 1;\n            if (edges2.empty()) return f(edges1).first + 1;\n        }\n        pair<int, int> d1 = f(edges1);\n        pair<int, int> d2 = f(edges2);\n        return max(d1.first + d2.first + 1, max(d1.second, d2.second));\n    }\n};",
    "submit_ts": "1719718233",
    "subm_id": "1304412074"
}