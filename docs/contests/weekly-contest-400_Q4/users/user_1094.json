{
    "username": "winter_dragon",
    "submission": "class Solution {\npublic:\n    int minimumDifference(vector<int>& nums, int k) {\n        memset(prefix, 0, sizeof prefix);\n        N = nums.size();\n        for (int i = 0;i < N; i++) {\n            for (int bit = 0;bit < BITS; bit++) {\n                prefix[i + 1][bit] = prefix[i][bit];\n                if (nums[i] & (1 << bit)) prefix[i + 1][bit]++;\n            }\n        }\n        \n        int ret = 1 << BITS;\n        for (int i = 0;i < N; i++) {\n            if (nums[i] < k) {\n                ret = min(ret, k - nums[i]);\n                continue;\n            }\n            int worst = range_and(i, N);\n            if (worst >= k) {\n                ret = min(ret, worst - k);\n                continue;\n            }\n            \n            int lo = i + 1, hi = N;\n            while (hi - lo > 1) {\n                int mid = (lo + hi) / 2;\n                if (range_and(i, mid) >= k) lo = mid;\n                else hi = mid;\n            }\n            \n            ret = min(ret, range_and(i, lo) - k);\n            ret = min(ret, k - range_and(i, hi));\n        }\n        return ret;\n    }\nprivate:\n    static const int BITS = 30, MAXN = 100101;\n    int prefix[MAXN][BITS], N;\n    \n    int range_and(int l, int r) {\n        int ret = 0;\n        for (int bit = 0;bit < BITS; bit++) {\n            if (prefix[r][bit] - r == prefix[l][bit] - l) ret |= 1 << bit;\n        }\n        return ret;\n    }\n};",
    "submit_ts": 1717298690.0
}