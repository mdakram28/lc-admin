{
    "username": "kfwu",
    "submission": "class Solution {\npublic:\n    long long minimumCost(int m, int n, vector<int>& horizontalCut, vector<int>& verticalCut) {\n        // \n        std::sort(horizontalCut.begin(), horizontalCut.end(), std::greater<int>());\n        std::sort(verticalCut.begin(), verticalCut.end(), std::greater<int>());\n\n        // \n        long long totalCost = 0;\n\n        // \n        int hPieces = 1;\n        int vPieces = 1;\n\n        // \n        int hCutted = 0;\n        int vCutted = 0;\n\n        // \n        while (hCutted < m - 1 && vCutted < n - 1) {\n            // cut horizontal\n            if (horizontalCut[hCutted] > verticalCut[vCutted]) {\n                totalCost += static_cast<long long>(horizontalCut[hCutted] * vPieces);\n                hPieces++;\n                hCutted++;\n            }\n            else {\n                totalCost += static_cast<long long>(verticalCut[vCutted] * hPieces);\n                vPieces++;\n                vCutted++;\n            }\n        }\n\n        //\n        while (hCutted < m - 1) {\n            totalCost += static_cast<long long>(horizontalCut[hCutted] * vPieces);\n            hPieces++;\n            hCutted++;\n        }\n        while (vCutted < n - 1) {\n            totalCost += static_cast<long long>(verticalCut[vCutted] * hPieces);\n            vPieces++;\n            vCutted++;\n        }\n\n        // \n        return totalCost;\n    }\n};",
    "submit_ts": "1720925874",
    "subm_id": "1320268988"
}