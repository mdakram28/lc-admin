{
    "username": "Devman_24",
    "submission": "class TrieNode {\npublic:\n    vector<TrieNode*> children;\n    vector<pair<int, int>> wordIndices;  // (word index, cost)\n    \n    TrieNode() : children(26, nullptr) {}\n};\n\nclass Solution {\nprivate:\n    void buildTrie(TrieNode* root, const vector<string>& words, const vector<int>& costs) {\n        for (int i = 0; i < words.size(); ++i) {\n            TrieNode* node = root;\n            for (char c : words[i]) {\n                if (!node->children[c - 'a']) {\n                    node->children[c - 'a'] = new TrieNode();\n                }\n                node = node->children[c - 'a'];\n            }\n            node->wordIndices.emplace_back(i, costs[i]);\n        }\n    }\n\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int n = target.length();\n        TrieNode* root = new TrieNode();\n        buildTrie(root, words, costs);\n        \n        vector<long long> dp(n + 1, LLONG_MAX);\n        dp[0] = 0;\n        \n        for (int i = 0; i < n; ++i) {\n            if (dp[i] == LLONG_MAX) continue;\n            \n            TrieNode* node = root;\n            for (int j = i; j < n; ++j) {\n                if (!node->children[target[j] - 'a']) break;\n                node = node->children[target[j] - 'a'];\n                for (auto& [idx, cost] : node->wordIndices) {\n                    long long newCost = dp[i] + cost;\n                    if (newCost < dp[j + 1]) {\n                        dp[j + 1] = newCost;\n                    }\n                }\n            }\n        }\n        \n        return dp[n] == LLONG_MAX ? -1 : dp[n];\n    }\n};",
    "submit_ts": "1720323941",
    "subm_id": "1312387761"
}