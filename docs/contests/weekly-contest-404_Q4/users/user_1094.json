{
    "username": "Yonghui-Lee",
    "submission": "class Solution {\n    pair<int,int> findMinHeightTrees( vector<vector<int>>& edges) {\n        int n = edges.size()+ 1;\n    if (n == 1) {\n        return make_pair(1,0);\n    }\n    vector<int> degree(n);\n    vector<vector<int>> adj(n);\n    for (auto & edge : edges){\n        adj[edge[0]].emplace_back(edge[1]);\n        adj[edge[1]].emplace_back(edge[0]);\n        degree[edge[0]]++;\n        degree[edge[1]]++;\n    }\n    queue<int> qu;\n    vector<int> ans;\n    for (int i = 0; i < n; i++) {\n        if (degree[i] == 1) {\n            qu.emplace(i);\n        }\n    }\n    int remainNodes = n;\n    int height = 1;\n    while (remainNodes > 2) {\n        int sz = qu.size();\n        remainNodes -= sz;\n        for (int i = 0; i < sz; i++) {\n            int curr = qu.front();\n            qu.pop();\n            for (auto & v : adj[curr]) {\n                if (--degree[v] == 1) {\n                    qu.emplace(v);\n                }\n            }\n        }\n        height++;\n    }\n    if(remainNodes == 1){\n        return make_pair(height,height+height - 2);\n    }\n    return make_pair(height + 1, height+height - 1);\n}\npublic:\n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n        auto t1 = findMinHeightTrees(edges1);\n        auto t2 = findMinHeightTrees(edges2);\n        // cout<<t1<<\" \"<<t2;\n        return max(t1.first + t2.first - 1,max(t1.second, t2.second));\n    }\n};",
    "submit_ts": 1719719938.0
}