{
    "username": "chuka231",
    "submission": "using namespace std;\n#include<iostream>\n#include<iomanip>\n#include<cstdio>\n#include<algorithm>\n#include<cassert>\n#include<cmath>\n#include<vector>\n#include<map>\n#include<set>\n#include<string>\n#include<queue>\n#include<stack>\n#include<list>\n#include<tuple>\n#include <cstring>\n#include <functional>\n#include<unordered_map>\n#include<unordered_set>\n#include<bitset>\n#include <time.h>\n#include <ctime>\n#include <random>\n#include <chrono>\n\n#define INF ((1<<30)-1)\n#define LINF ((Int)1<<61)\n#define EPS (1e-10)\n#define REP(i,n) for(int i=0; i<(int)(n); ++i)\n#define RREP(i,n) for(int i=1; i<=(int)(n); ++i)\n#define all(x) (x).begin(),(x).end()\n#define MOD 1000000007\n#define MOD2 998244353\n#define Pi 3.14159265359\ntypedef long long Int;\ntypedef unsigned long long uInt;\ntypedef pair<Int, Int> PI;\ntypedef pair<int, int> pi;\ntypedef pair<double, double> pd;\ntypedef tuple<Int, Int, Int> tp; // get<0>(x);\nconst int N = 200005;\n//////////////////////////////\n\n\nint dp[50004];\n\nclass Node {\npublic:\n    int cost;\n    Node* child[26];\n    Node() {\n        cost = 0;\n        for (int i = 0; i < 26; i++) child[i] = NULL;\n    }\n};\n\nclass Trie {\npublic:\n    Node* root;\n    Trie() {\n        root = new Node();\n    }\n\n    void insert(string& word, int cost) {\n        Node* p = root;\n        for (char x : word) {\n            int ind = x - 'a';\n            if (p->child[ind] == NULL) p->child[ind] = new Node();\n            p = p->child[ind];\n        }\n        if (p->cost == 0) p->cost = cost;\n        else p->cost = min(p->cost, cost);\n    }\n\n    void search(string& word, int start) {\n        Node* p = root;\n        int i = start;\n        while (i >= 0) {\n            int ind = word[i] - 'a';\n            if (p->child[ind] == NULL) return;\n            p = p->child[ind];\n            if (dp[i] > -1 && p->cost > 0) {\n                dp[start + 1] = min(dp[start + 1], dp[i] + p->cost);\n            }\n            i--;\n        }\n    }\n};\n\nclass Solution {\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int n = target.size();\n        for (int i = 0; i <= n; i++) {\n            dp[i] = 1e9;\n        }\n        dp[0] = 0;\n\n        Trie trie;\n        for (int j = 0; j < words.size(); j++) {\n            reverse(words[j].begin(), words[j].end());\n            trie.insert(words[j], costs[j]);\n        }\n\n        for (int i = 0; i < n; i++) {\n            trie.search(target, i);\n        }\n        return dp[n]==1e9 ? -1 : dp[n];\n    }\n};\n",
    "submit_ts": "1720323344",
    "subm_id": "1312373278"
}