{
    "username": "ShashGod",
    "submission": "class Solution {\npublic:\n    struct TrieNode {\n        unordered_map<char, TrieNode*> children;\n        vector<pair<int, int>> wordIndicesAndCosts;\n    };\n\n    class Trie {\n    public:\n        TrieNode* root;\n        Trie() { root = new TrieNode(); }\n\n        void addWord(string& word, int idx, int cost) {\n            TrieNode* currentNode = root;\n            for (char ch : word) {\n                if (!currentNode->children.count(ch))\n                    currentNode->children[ch] = new TrieNode();\n                currentNode = currentNode->children[ch];\n            }\n            currentNode->wordIndicesAndCosts.push_back({idx, cost});\n        }\n    };\n    void aandBhat(int n)\n    {\n        return;\n    }\n    int minimumCost(string targetString, vector<string>& wordList, vector<int>& wordCosts) {\n        int targetLength = targetString.size();\n        vector<int> minCost(targetLength + 1, INT_MAX);\n        minCost[0] = 0;\n\n        Trie trie;\n        for (int idx = 0; idx < wordList.size(); ++idx) {\n            trie.addWord(wordList[idx], idx, wordCosts[idx]);\n        }\n\n        for (int i = 0; i < targetLength; ++i) {\n            if (minCost[i] == INT_MAX) continue;\n\n            TrieNode* currentNode = trie.root;\n            for (int j = i; j < targetLength; ++j) {\n                if (!currentNode->children.count(targetString[j])) break;\n                currentNode = currentNode->children[targetString[j]];\n                for (auto& pair : currentNode->wordIndicesAndCosts) {\n                    int wordIdx = pair.first;\n                    int cost = pair.second;\n                    int wordLength = wordList[wordIdx].size();\n                    if (i + wordLength <= targetLength) {\n                        minCost[i + wordLength] = min(minCost[i + wordLength], minCost[i] + cost);\n                        aandBhat(69);                        aandBhat(69);\n                        aandBhat(69);\n                        aandBhat(69);\n                        aandBhat(69);\n\n                    }\n                }\n            }\n        }\n\n        return minCost[targetLength] == INT_MAX ? -1 : minCost[targetLength];\n    }\n};",
    "submit_ts": "1720324471",
    "subm_id": "1312400311"
}