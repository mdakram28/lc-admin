{
    "username": "Yawn_Sean",
    "submission": "min = lambda x, y: x if x < y else y\nmax = lambda x, y: x if x > y else y\n\nclass Solution:\n    def minimumSum(self, grid: List[List[int]]) -> int:\n        def solve(grid):\n            n, m = len(grid), len(grid[0])\n            pref_xl = [[n] * m for _ in range(n)]\n            pref_xr = [[-1] * m for _ in range(n)]\n            pref_yl = [[m] * m for _ in range(n)]\n            pref_yr = [[-1] * m for _ in range(n)]\n            \n            ans = [[0] * m for _ in range(n)]\n            \n            for i in range(n):\n                for j in range(m):\n                    if i:\n                        pref_xl[i][j] = min(pref_xl[i-1][j], pref_xl[i][j])\n                        pref_xr[i][j] = max(pref_xr[i-1][j], pref_xr[i][j])\n                        pref_yl[i][j] = min(pref_yl[i-1][j], pref_yl[i][j])\n                        pref_yr[i][j] = max(pref_yr[i-1][j], pref_yr[i][j])\n                    if j:\n                        pref_xl[i][j] = min(pref_xl[i][j-1], pref_xl[i][j])\n                        pref_xr[i][j] = max(pref_xr[i][j-1], pref_xr[i][j])\n                        pref_yl[i][j] = min(pref_yl[i][j-1], pref_yl[i][j])\n                        pref_yr[i][j] = max(pref_yr[i][j-1], pref_yr[i][j])\n                    if grid[i][j]:\n                        pref_xl[i][j] = min(pref_xl[i][j], i)\n                        pref_xr[i][j] = max(pref_xr[i][j], i)\n                        pref_yl[i][j] = min(pref_yl[i][j], j)\n                        pref_yr[i][j] = max(pref_yr[i][j], j)\n                    ans[i][j] = max(pref_xr[i][j] - pref_xl[i][j] + 1, 0) * max(pref_yr[i][j] - pref_yl[i][j] + 1, 0)\n            \n            for x in grid:\n                x.reverse()\n            \n            pref_xl = [[n] * m for _ in range(n)]\n            pref_xr = [[-1] * m for _ in range(n)]\n            pref_yl = [[m] * m for _ in range(n)]\n            pref_yr = [[-1] * m for _ in range(n)]\n            \n            for i in range(n):\n                for j in range(m):\n                    if i:\n                        pref_xl[i][j] = min(pref_xl[i-1][j], pref_xl[i][j])\n                        pref_xr[i][j] = max(pref_xr[i-1][j], pref_xr[i][j])\n                        pref_yl[i][j] = min(pref_yl[i-1][j], pref_yl[i][j])\n                        pref_yr[i][j] = max(pref_yr[i-1][j], pref_yr[i][j])\n                    if j:\n                        pref_xl[i][j] = min(pref_xl[i][j-1], pref_xl[i][j])\n                        pref_xr[i][j] = max(pref_xr[i][j-1], pref_xr[i][j])\n                        pref_yl[i][j] = min(pref_yl[i][j-1], pref_yl[i][j])\n                        pref_yr[i][j] = max(pref_yr[i][j-1], pref_yr[i][j])\n                    if grid[i][j]:\n                        pref_xl[i][j] = min(pref_xl[i][j], i)\n                        pref_xr[i][j] = max(pref_xr[i][j], i)\n                        pref_yl[i][j] = min(pref_yl[i][j], j)\n                        pref_yr[i][j] = max(pref_yr[i][j], j)\n                    if j < m - 1:\n                        ans[i][m - 2 - j] += max(pref_xr[i][j] - pref_xl[i][j] + 1, 0) * max(pref_yr[i][j] - pref_yl[i][j] + 1, 0)\n            \n            xl, xr = n, -1\n            yl, yr = m, -1\n            \n            for i in range(n - 1, 0, -1):\n                for j in range(m):\n                    if grid[i][j]:\n                        xl = min(xl, i)\n                        xr = max(xr, i)\n                        yl = min(yl, j)\n                        yr = max(yr, j)\n                res = max(xr - xl + 1, 0) * max(yr - yl + 1, 0)\n                for j in range(m):\n                    ans[i-1][j] += res\n            \n            final_ans = n * m\n            for i in range(n):\n                for j in range(m):\n                    if ans[i][j] < final_ans: final_ans = ans[i][j]\n            \n            ylnote = [m] * n\n            yrnote = [-1] * n\n            \n            for i in range(n):\n                for j in range(m):\n                    if grid[i][j]:\n                        ylnote[i] = min(ylnote[i], j)\n                        yrnote[i] = max(yrnote[i], j)\n            \n            def get_area(i, j):\n                xl, xr = n, -1\n                yl, yr = m, -1\n                for idx in range(i, j + 1):\n                    if ylnote[idx] < m:\n                        xl = min(xl, idx)\n                        xr = max(xr, idx)\n                        yl = min(yl, ylnote[idx])\n                        yr = max(yr, yrnote[idx])\n                return max(xr - xl + 1, 0) * max(yr - yl + 1, 0)\n            \n            for i in range(n-1):\n                for j in range(i):\n                    final_ans = min(final_ans, get_area(0, j) + get_area(j + 1, i) + get_area(i + 1, n - 1))\n            \n            return final_ans\n                \n        \n        ans = solve(grid)\n        grid.reverse()\n        ans = min(ans, solve(grid))\n        grid = [list(x) for x in (zip(*grid))]\n        ans = min(ans, solve(grid))\n        grid.reverse()\n        ans = min(ans, solve(grid))\n        return ans",
    "submit_ts": 1719111788.0
}