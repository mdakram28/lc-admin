{
    "username": "indrazit",
    "submission": "from sortedcontainers import SortedList\n\nclass Solution:\n    def shortestDistanceAfterQueries(self, n: int, queries: List[List[int]]) -> List[int]:\n        answer = []\n        distance = n - 1\n        jumps = SortedList()\n        for query_in_list in queries:\n            query = tuple(query_in_list)\n            #print(query)\n            skip_query = False\n            to_be_discarded = []\n            left_index = jumps.bisect_left(query)\n            if left_index > 0:\n                left_jump = jumps[left_index - 1]\n                if left_jump[0] == query[0]:\n                    #print('case 1')\n                    to_be_discarded.append(left_jump)\n                    distance += left_jump[1] - left_jump[0] - 1\n                elif left_jump[1] > query[0]:\n                    #print('case 2')\n                    skip_query = True\n            if left_index < len(jumps):\n                right_jump = jumps[left_index]\n                if right_jump[0] == query[0]:\n                    #print('case 3')\n                    skip_query = True\n                elif right_jump[1] <= query[1]:\n                    #print('case 4')\n                    to_be_discarded.append(right_jump)\n                    distance += right_jump[1] - right_jump[0] - 1\n            for jump in to_be_discarded:\n                jumps.discard(jump)\n            if not skip_query:\n                jumps.add(query)\n                distance -= query[1] - query[0] - 1\n            answer.append(distance)\n        return answer\n        ",
    "submit_ts": "1722742050",
    "subm_id": "1343759747"
}