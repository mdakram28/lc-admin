{
    "username": "panwu5588",
    "submission": "class Solution {\n    public int[] shortestDistanceAfterQueries(int n, int[][] queries) {\n        /**\n         the steps from 0 to n-1 \n          is n-1 \n        \n        group queries by int[0] and keep the largest int[1]\n        in the end \n        each group will shorten the steps by end-start-1\n\n        n = 5, queries = [[2,4],[0,2],[0,4]]\n        \n        groups              i       q       oldMax      newMax  steps\n        0,1,2,3,4\n        1 2 3 4 5                                                4   \n        1 2 4 4 5           0       [2,4]       3       4        3\n        2 2 4 4 5           1       [0,2]       1       2        2\n                            2       [0,4]       2       4        0\n\n        how to merge?\n\n        0-2-3-5\n        0-5\n\n        1--4\n         2-4\n\n        0-2\n        0--4\n        */\n        \n        int m = queries.length;\n        int[] ans = new int[m];\n        int steps = n-1;\n        int[] groups = new int[n];//groups[i]= the largest end point\n        int[] dest = new int[n+1];//dest[i] = the smallest start point\n        \n        for(int i=0;i<n;i++){\n            groups[i]=i+1;\n            dest[i+1]=i;\n        }\n\n        for(int i =0;i<m;i++){\n            int[] q = queries[i];\n            int oldMax = groups[q[0]];\n            int newMax = Math.max(oldMax,q[1]);\n\n            int oldMin = dest[q[1]];\n            int newMin = Math.min(oldMin,q[0]);\n            /**\n            1-->4\n             2->4\n            \n            1->2->4\n            1---->4\n\n            1->3\n            1-->4\n\n            1-->4 \n            1->3\n\n            1->2->3\n            1->3\n\n            1----->8\n              4->6\n            */\n            if((newMax>oldMax && groups[q[1]]!=-1) || (newMin<oldMin && groups[q[0]]!=-1)){\n                int temp = findSteps(groups,q);\n                steps-= (temp-1);\n                groups[q[0]] = newMax;\n                dest[q[1]] = newMin;\n            }\n            ans[i]=steps;\n        }\n        return ans;\n        \n    }\n    private int findSteps(int[] groups, int[] q){\n        int steps=0;\n        for(int i =q[0];i<q[1] && i!=-1;steps++){\n            int j = i;\n            i=groups[i];\n            groups[j]=-1;\n        }\n        groups[q[0]]=q[1];\n        return steps;\n    }\n}",
    "submit_ts": "1722742763",
    "subm_id": "1343776611"
}