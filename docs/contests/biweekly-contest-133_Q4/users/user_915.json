{
    "username": "Soumyadeep_Singh2004",
    "submission": "class Solution {\npublic:\n    int mod=1000000007;\n    int maxi = 400;\n    int minOperations(vector<int>&a) {\n        int ans=0;\n        int i,n=a.size();\n        for(i=0;i<n;i++)\n        {\n            if(a[i]==0)\n            {\n                if(i+2>=n)\n                {\n                    return -1;\n                }\n                a[i]=1;\n                a[i+1]=a[i+1]==0?1:0;\n                 a[i+2]=a[i+2]==0?1:0;\n                ans++;\n            }\n        }\n        return ans;\n    }\n    int minimumOperations(vector<int>&a) {\n        int ans=0;\n        int i,n=a.size();\n        for(i=0;i<n;i++)\n        {\n            int t=a[i]/3;\n            int t1=t*3,t2=t*3+3;\n            ans+=min(a[i]-t1,t2-a[i]);\n        }\n        return ans;\n    }\n    int numberOfPermutations(int n, vector<vector<int>>&a) {\n        unordered_map<int, int>mpp;\n        for(auto it:a)\n        {\n            mpp[it[0]+1]=it[1];\n        }\n        vector<vector<long long>>v(n + 1, vector<long long>(maxi+ 1, 0));\n        v[0][0]=1;\n        int i,j,k;\n        for(i=1;i<=n;i++)\n        {\n            for(j=0;j<=maxi;j++)\n            {\n                for(k=0;k<i;k++)\n                {\n                    int t=j-k;\n                    if(t>=0)\n                    {\n                        v[i][j]=(v[i][j]+v[i-1][t])%mod;\n                    }\n                }\n            }\n            if(mpp.count(i)>0)\n            {\n                int t=mpp[i];\n                for(j=0;j<=maxi;j++)\n                {\n                    if(j!=t)\n                    {\n                        v[i][j]=0;\n                    }\n                }\n            }\n        }\n        long long ans=0;\n        for(i=0;i<=maxi;i++)\n        {\n            ans=(ans+v[n][i])%mod;\n        }\n        return ans;\n    }\n    int square() {\n    int number = 5;\n    return number * number;\n}\n// Function to calculate the cube of a number\nint cube() {\n    int number = 3;\n    return number * number * number;\n}\n\n// Function to calculate the square root of a number\ndouble squareRoot() {\n    double number = 16.0;\n    return std::sqrt(number);\n}\n\n// Function to manipulate an array (double each element)\nvoid manipulateArray() {\n    std::vector<int> array = {1, 2, 3, 4, 5};\n\n    for (int &element : array) {\n        element *= 2;\n    }\n}\n\n// Function to concatenate two strings\nstd::string concatenateStrings() {\n    std::string str1 = \"Hello, \";\n    std::string str2 = \"world!\";\n    \n    return str1 + str2;\n}\n\n// Function to find the length of a string\nsize_t stringLength() {\n    std::string myString = \"This is a sample string.\";\n    return myString.length();\n}\nvoid abc()\n{\n    int result1 = square();\n    int result2 = cube();\n    double result3 = squareRoot();\n    \n    manipulateArray();\n\n    std::string concatenatedString = concatenateStrings();\n    size_t lengthOfString = stringLength();\n}\n};",
    "submit_ts": "1719071541",
    "subm_id": "1296848976"
}