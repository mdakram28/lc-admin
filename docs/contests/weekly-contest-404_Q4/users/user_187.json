{
    "username": "weirdsmoothie",
    "submission": "class Solution {\npublic:\n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n        int n = edges1.size(), m = edges2.size(), res;\n        auto x = findMinHeight(n + 1, edges1);\n        auto y = findMinHeight(m + 1, edges2);\n        return max(x.first + y.first + 1, max(x.second, y.second));\n    }\n    \n    pair<int, int> findMinHeight(int n, vector<vector<int>>& edges) {\n        if (n == 1) return make_pair(0, 0);\n        int k, height[100005]{};\n        vector<int> adj[100005];\n        for (auto &e: edges) {\n            adj[e[0]].push_back(e[1]);\n            adj[e[1]].push_back(e[0]);\n        }\n        DFS1(adj, height, 0, -1);\n        DFS2(adj, height, 0, -1, 0);\n        k = *min_element(height, height + n);\n        while (n--) {\n            if (height[n] == k) break;\n        }\n        if (adj[n].size() == 1) return make_pair(k - 1, k - 1);\n        int x = 0, y = 0;\n        DFS3(adj, height, n, -1);\n        for (int v: adj[n]) {\n            if (height[v] > x) y = x, x = height[v];\n            else if (height[v] > y) y = height[v];\n        }\n        return make_pair(k - 1, x + y + 2);\n    }\n\n    void DFS1(vector<int> adj[], int height[], int u, int p) {\n        for (int v: adj[u]) {\n            if (v == p) continue;\n            DFS1(adj, height, v, u);\n            height[u] = max(height[u], height[v]);\n        }\n        height[u]++;\n    }\n\n    void DFS2(vector<int> adj[], int height[], int u, int p, int k) {\n        int x = 0, y = 0, z;\n        for (int v: adj[u]) {\n            if (v == p) continue;\n            if (height[v] > x) y = x, x = height[v];\n            else if (height[v] > y) y = height[v];\n        }\n        for (int v: adj[u]) {\n            if (v == p) continue;\n            z = (height[v] == x)? y: x;\n            DFS2(adj, height, v, u, max(z, k) + 1);\n        }\n        height[u] = max(height[u], max(z, k) + 1);\n    }\n    \n    void DFS3(vector<int> adj[], int height[], int u, int p) {\n        height[u] = 0;\n        for (int v: adj[u]) {\n            if (v == p) continue;\n            DFS3(adj, height, v, u);\n            height[u] = max(height[u], height[v] + 1);\n        }\n    }\n};",
    "submit_ts": 1719717202.0
}