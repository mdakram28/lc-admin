{
    "username": "power1011",
    "submission": "class Solution {\npublic:\n    int numberOfPermutations(int n, vector<vector<int>>& requirements) {\n        // ith prefix contains i number [0, 1, 2, ..., i-1]\n        // 3th -> 4th\n        // 4!\n\n        // 0, 2, 3, 1 inversion increased by 4-1-1 = 2\n        // 0, 3, 2, 1 \n        // 2, 0, 3, 1\n        // 2, 3, 0, 1\n        // 3, 0, 2, 1\n        // 3, 2, 0, 1\n        // append x at the end => inversion increased by n-1-x\n        \n        // assume we know all dp[ith prefix][number of inversions]\n        // for each state in (ith prefix, number of inversions) we can append 0 ~ i+1\n        // dp[(i+1)th prefix][number of inversions]\n        //               insert i+1   insert i                                   insert 0 \n        // dp[i+1][k] += dp[i][k-0] + dp[i][k-1] + dp[i][k-2] + dp[i][k-3] ... dp[i][k-i]\n        // O(300 * 400) * O(400) = O(n * max(count)^2)\n        using i64 = std::int64_t;\n        const int max_cnt = 512;\n        constexpr i64 mod = 1'000'000'000 + 7;\n        std::vector<std::vector<i64>> dp(n, std::vector<i64>(max_cnt));\n        std::vector<int> cnt(n, -1);\n        for(auto &r:requirements)\n        {\n            cnt[r.at(0)] = r.at(1);\n        }\n        for(int i=0;i<n;++i)\n        {\n            if(i==0)\n            {\n                dp[0][0] = 1;\n            }\n            else\n            {\n                for(int k=0;k<max_cnt;++k)\n                {\n                    dp[i][k] = 0;\n                    for(int j = 0;j<=i && j<=k;++j)\n                    {\n                        dp[i][k] += dp[i-1][k-j];\n                    }\n                    dp[i][k] %= mod;\n                }\n                // dp[1][0] = dp[0][0] = 1; 0 1\n                // dp[1][1] = dp[0][1] = 1; 1 0\n\n                // dp[2][0] = dp[1][0] = 1; 0 1 2\n                // dp[2][1] += dp[1][1]; 1, 0, 2\n                // dp[2][1] += dp[1][0]; 2, 0, 1\n                // dp[2][1] = 2; \n            }\n            // for(int k=0;k<max_cnt;++k)\n            // {\n            //     std::cout << dp[i][k] << \" \";\n            // }\n            // std::cout << \"\\n\";\n            if(cnt[i]!=-1)\n            {\n                for(int k=0;k<max_cnt;++k)\n                {\n                    if(k != cnt[i])\n                    {\n                        dp[i][k] = 0;\n                    }\n                }\n            }\n\n        }\n        return dp[n-1][cnt[n-1]];\n    }\n};",
    "submit_ts": "1719069409",
    "subm_id": "1296795742"
}