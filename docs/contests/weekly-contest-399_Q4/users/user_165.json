{
    "username": "kexunz1",
    "submission": "from typing import List\n\nclass Node:\n    def __init__(self):\n        self.dp = [[-1e10, -1e10], [-1e10, -1e10]]\n\nclass Solution:\n    \n    def pushup(self, x, tree):\n        lc = x * 2\n        rc = x * 2 + 1\n        for i in range(2):\n            for j in range(2):\n                tree[x].dp[i][j] = -1e10\n                tree[x].dp[i][j] = max(tree[x].dp[i][j], tree[lc].dp[i][0] + tree[rc].dp[0][j])\n                tree[x].dp[i][j] = max(tree[x].dp[i][j], tree[lc].dp[i][1] + tree[rc].dp[0][j])\n                tree[x].dp[i][j] = max(tree[x].dp[i][j], tree[lc].dp[i][0] + tree[rc].dp[1][j])\n    \n    def build_tree(self, x, l, r, nums, tree):\n        if l == r:\n            tree[x].dp[1][1] = nums[l] # dp[1][1] = maximum subseq sum with both ends included\n            tree[x].dp[0][0] = 0 # dp[0][0] = maximum subseq sum with both ends excluded\n            return\n        \n        m = (l + r) // 2\n        self.build_tree(2*x, l, m, nums, tree)\n        self.build_tree(2*x+1, m+1, r, nums, tree)\n        self.pushup(x, tree)\n    \n    def update_tree(self, x, l, r, pos, val, tree):\n        if l == r:\n            tree[x].dp[1][1] = val\n            return\n        \n        m = (l + r) // 2\n        if pos <= m:\n            self.update_tree(2*x, l, m, pos, val, tree)\n        else:\n            self.update_tree(2*x+1, m+1, r, pos, val, tree)\n        self.pushup(x, tree)\n    \n    \n    def maximumSumSubsequence(self, nums: List[int], queries: List[List[int]]) -> int:\n        n = len(nums)\n        \n        tree = [Node() for _ in range(4*n)]\n        \n        self.build_tree(1, 0, n-1, nums, tree)\n        \n        ans = 0\n        for pos, x in queries:\n            self.update_tree(1, 0, n-1, pos, x, tree)\n            ans = (ans + max(tree[1].dp[0][0], tree[1].dp[0][1], tree[1].dp[1][0], tree[1].dp[1][1])) % (10**9 + 7)\n        \n        return ans",
    "submit_ts": 1716695305.0
}