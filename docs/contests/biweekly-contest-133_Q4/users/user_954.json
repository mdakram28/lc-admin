{
    "username": "nasaheck",
    "submission": "class Solution {\npublic:\n    const int MOD = int(1e9 + 7);\n    int memo[301][401];\n\n    int numberOfPermutations(int totalElements, vector<vector<int>>& constraintsList) {\n        unordered_map<int, int> constraints;\n\n        // Populate the constraints map from the list\n        for (auto& constraint : constraintsList) {\n            constraints[constraint[0]] = constraint[1];\n        }\n\n        // Sort and reverse the constraints list\n        sort(constraintsList.begin(), constraintsList.end());\n        reverse(constraintsList.begin(), constraintsList.end());\n\n        // Determine the maximum number of inverse pairs based on constraints\n        int highestConstraintElement = constraintsList[0][0];\n        int maxInversePairs;\n        if (highestConstraintElement == totalElements - 1) {\n            maxInversePairs = constraintsList[0][1];\n        } else {\n            maxInversePairs = 400;\n        }\n\n        // Initialize memoization table\n        memset(memo, -1, sizeof(memo));\n\n        // Lambda function for memoized calculation of ways\n        function<int(int, int)> calculateWays = [&](int elementsLeft, int inversePairsLeft) -> int {\n            if (constraints.find(elementsLeft) != constraints.end() && constraints[elementsLeft] != inversePairsLeft) {\n                return 0;\n            }\n            if (inversePairsLeft < 0) return 0;\n            if (elementsLeft == 0) return inversePairsLeft == 0 ? 1 : 0;\n            if (memo[elementsLeft][inversePairsLeft] != -1) return memo[elementsLeft][inversePairsLeft];\n\n            int ways = 0;\n            for (int i = 0; i <= elementsLeft; ++i) {\n                if (inversePairsLeft - i >= 0) {\n                    ways = (ways + calculateWays(elementsLeft - 1, inversePairsLeft - i)) % MOD;\n                }\n            }\n            return memo[elementsLeft][inversePairsLeft] = ways;\n        };\n\n        // Start the calculation with the total number of elements and the determined max inverse pairs\n        return calculateWays(totalElements - 1, maxInversePairs);\n    }\n};\n",
    "submit_ts": "1719071054",
    "subm_id": "1296838033"
}