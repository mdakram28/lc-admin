{
    "username": "LessThanExpert",
    "submission": "class Trie:\n    def __init__(self):\n        self.children = [None] * 26\n        self.is_leaf = False\n        self.is_prefix = False\n        self.leaf_count = 0\n        self.cost = float('inf')\n        self.prefix_count = 0\n\n    def insert(self, root, s, c):\n        for char in s:\n            j = ord(char) - ord('a')\n            root.is_prefix = True\n            root.prefix_count += 1\n            if root.children[j]:\n                root = root.children[j]\n            else:\n                new_node = Trie()\n                root.children[j] = new_node\n                root = new_node\n        root.is_leaf = True\n        if not root.leaf_count:\n            root.cost = c\n        else:\n            root.cost = min(root.cost, c)\n        root.leaf_count += 1\n        root.is_prefix = True\n        root.prefix_count += 1\n\n    def search(self, root, i, s, dp):\n        for ind in range(i, 0, -1):\n            j = ord(s[ind - 1]) - ord('a')\n            if root.children[j]:\n                root = root.children[j]\n                if root.is_leaf:\n                    dp[i] = min(dp[i], root.cost + dp[ind - 1])\n            else:\n                return\n        if root and root.is_leaf:\n            dp[i] = min(dp[i], root.cost + dp[0])\n\n\nclass Solution:\n    def minimumCost(self, target: str, words: List[str], costs: List[int]) -> int:\n        root = Trie()\n        for i in range(len(words)):\n            words[i] = words[i][::-1]  \n            root.insert(root, words[i], costs[i])\n        \n        n = len(target)\n        dp = [float('inf')] * (n + 1)\n        dp[0] = 0\n\n        for i in range(1, n + 1):\n            root.search(root, i, target, dp)\n        \n        return -1 if dp[n] == float('inf') else dp[n]\n",
    "submit_ts": "1720322585",
    "subm_id": "1312353802"
}