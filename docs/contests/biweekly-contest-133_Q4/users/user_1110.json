{
    "username": "goog_ol",
    "submission": "class Solution {\npublic:\n    const int MOD = 1e9 + 7;\n    \n    int numberOfPermutations(int n, vector<vector<int>>& requi) {\n        int max_inv = 400;\n       unordered_map<int, int> hash;\n        for (auto req : requi) {\n            hash[req[0] + 1] = req[1];\n        }\n         vector<vector<long long>> dp(n + 1, vector<long long>(max_inv+1, 0));\n        dp[0][0]=1;\n        \n         for (int k = 1; k <= n; ++k) {\n           for (int inv{}; inv <= max_inv; ++inv) {\n            for (int pos{}; pos < k; ++pos) {\n                if (inv - pos >= 0) {\n                    dp[k][inv] = (dp[k][inv] + dp[k - 1][inv - pos]) % MOD;\n                 }\n            }\n          }\n        \n        \n        if (hash.find(k) != hash.end()) {\n                int targetInv = hash[k];\n                for (int inv{}; inv <= max_inv; ++inv) {\n                    if (inv != targetInv) {\n                        dp[k][inv] = 0;\n                    }\n                }\n            }\n         }\n\n        long long res = 0;\n        for (auto count : dp[n]) {\n            res = (res + count) % MOD;\n        }\n\n        return static_cast<int>(res);\n    }\n};\n\n",
    "submit_ts": "1719071773",
    "subm_id": "1296853828"
}