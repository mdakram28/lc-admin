{
    "username": "minixue",
    "submission": "class Solution {\npublic:\n    map<int,int> cache;\n    int f(vector<vector<int>> &grid, int y1, int y2, int x1, int x2) {\n        int key = (x1 << 18) | (x2 << 12) | (y1 << 6) | y2; \n        int top = INT_MAX, bottom = INT_MIN, left = INT_MAX, right = INT_MIN;\n        for(int i = y1; i < y2; ++ i) {\n            for(int j = x1; j < x2; ++ j) {\n                if(grid[i][j]) {\n                    top = min(top, i);\n                    bottom = max(bottom, i);\n                    left = min(left, j);\n                    right = max(right, j);\n                }\n            }\n        }\n        if(top == INT_MAX) return 0;\n        return cache[key] = (bottom - top + 1) * (right - left + 1);\n    }\n    int g(vector<vector<int>>& grid) {\n        int res = INT_MAX;\n        for(int i = 0; i < grid.size() - 1; ++ i) {\n            for(int j = i + 1; j < grid.size(); ++ j) {\n                res = min(res, f(grid, 0, i, 0, grid[0].size()) + f(grid, i, j, 0, grid[0].size()) + f(grid, j, grid.size(), 0,                                     grid[0].size()));\n            }\n        }\n        for(int i = 0; i < grid.size(); ++ i) {\n            for(int j = 0; j < grid[0].size(); ++ j) {\n                res = min(res, f(grid,0, i, 0, grid[0].size()) + f(grid, i, grid.size(), 0, j) + f(grid, i, grid.size(), j, grid[0].size()));\n                res = min(res, f(grid, 0, i, 0, j) + f(grid, 0, i, j, grid[0].size()) + f(grid, i, grid.size(), 0, grid[0].size()));\n            }\n        }\n        return res;\n    }\n    int minimumSum(vector<vector<int>> &grid) {\n        vector<vector<int>> copy(grid[0].size(), vector<int>(grid.size()));\n        for(int i = 0; i < grid.size(); ++ i) {\n            for(int j = 0; j < grid[0].size(); ++ j) {\n                copy[j][i] = grid[i][j];\n            }\n        }\n        return min(g(grid), g(copy));\n    }\n}; ",
    "submit_ts": 1719114471.0
}