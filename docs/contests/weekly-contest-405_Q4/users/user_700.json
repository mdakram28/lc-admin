{
    "username": "deadRabbit",
    "submission": "\nint INF = 1<<30;\n\nstruct node {\n    int next[26];\n    int cost;\n    node(){\n        memset(next,-1,sizeof(next));\n        cost = INF;\n    }\n};\n\nvector<node> T;\n\nint dp[50000+100];\nstring S;\nint go(int p) {\n    if (p==S.size()) return 0;\n    int &r = dp[p];\n    if (r==-1) {\n        r = INF;\n        int t = 0;\n        for (int i = p; i < S.size(); ++i) {\n            if (T[t].next[S[i]-'a']!=-1) {\n                t = T[t].next[S[i]-'a'];\n            } else {\n                break;\n            }\n            if (T[t].cost < INF) {\n                r = min(r, T[t].cost + go(i+1));\n            }\n        }\n    }\n    return r;\n}\n\nclass Solution {\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        S = target;\n        T = {node()};\n        int index = 0;\n        for (string &w : words) {\n            int p = 0;\n            for (char c : w) {\n                if (T[p].next[c-'a']==-1) {\n                    T[p].next[c-'a'] = T.size();\n                    T.push_back(node());\n                } \n                p = T[p].next[c-'a'];\n            }\n            if (T[p].cost>costs[index]) T[p].cost=costs[index];\n            index++;\n        }\n        memset(dp,-1,sizeof(dp));\n        int res = go(0);\n        return res==INF ? -1 : res;\n    }\n};",
    "submit_ts": "1720322102",
    "subm_id": "1312340705"
}