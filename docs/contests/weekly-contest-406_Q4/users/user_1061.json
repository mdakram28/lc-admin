{
    "username": "Hughstudy",
    "submission": "class Solution {\n    public long minimumCost(int m, int n, int[] horizontalCut, int[] verticalCut) {\n        long horizontalCutCount = 1, verticalCutCount = 1;\n        long res = 0;\n        Integer[] horizontalSort = sortByIndex(horizontalCut), verticalSort = sortByIndex(verticalCut);\n        int l1 = 0, l2 = 0;\n        while (l1 < horizontalSort.length && l2 < verticalSort.length) {\n            if (horizontalCut[horizontalSort[l1]] > verticalCut[verticalSort[l2]]) {\n                res += horizontalCutCount * horizontalCut[horizontalSort[l1++]];\n                verticalCutCount++;\n            } else {\n                res += verticalCutCount * verticalCut[verticalSort[l2++]];\n                horizontalCutCount++;\n            }\n        }\n\n        while (l1 < horizontalSort.length) {\n            res += horizontalCutCount * horizontalCut[horizontalSort[l1++]];\n        }\n\n        while (l2 < verticalSort.length) {\n            res += verticalCutCount * verticalCut[verticalSort[l2++]];\n        }\n        return res;\n    }\n\n    private Integer[] sortByIndex(int[] arr) {\n        Integer[] sort = new Integer[arr.length];\n        for (int i = 0; i < arr.length; ++i) {\n            sort[i] = i;\n        }\n        Arrays.sort(sort, (a, b) -> (Integer.compare(arr[b], arr[a])));\n        return sort;\n    }\n}",
    "submit_ts": "1720925579",
    "subm_id": "546440455"
}