{
    "username": "andrewmca",
    "submission": "class Solution {\npublic:\n    \n    int tree[4 * 2 * 100001];\n    int n;\n    \n    // i is the index of the current interval which has bounds [l, r]\n    // returns the new answer on this interval after the update\n    int update(int i, int l, int r, int j, int v) {\n        if(j < l || j > r) return tree[i];\n        if(j == l && j == r) return tree[i] = v;\n        return tree[i] = update(i * 2 + 1, l, (l + r) / 2, j, v) + update(i * 2 + 2, (l + r) / 2 + 1, r, j, v);\n    }\n\n    // update index j to have value v\n    int update(int j, int v) {\n        return update(0, 0, n - 1, j, v);\n    }\n\n    // i is the index of the current interval which has bounds [l, r]\n    // returns the answer only for the current interval\n    int query(int i, int l, int r, int a, int b) {\n        if(b < l || a > r) return 0;\n        if(a <= l && b >= r) return tree[i];\n        return query(i * 2 + 1, l, (l + r) / 2, a, b) + query(i * 2 + 2, (l + r) / 2 + 1, r, a, b);\n    }\n\n    // query the range [a, b] at index i\n    int query(int a, int b) {\n        return query(0, 0, n - 1, a, b);\n    }\n    \n    void updateIndex(int index, vector<int> &nums) {\n        if(index > 0 && index < nums.size() - 1 && nums[index] > nums[index - 1] && nums[index] > nums[index + 1]) {\n            update(index, 1);\n            cout << \"here\" << endl;\n        }\n        else {\n            update(index, 0);\n            cout << \"there\" << endl;\n        }\n    }\n\n    \n    vector<int> countOfPeaks(vector<int>& nums, vector<vector<int>>& queries) {\n        n = nums.size();\n        for(int i = 1; i < nums.size() - 1; i++) {\n            if(nums[i] > nums[i - 1] && nums[i] > nums[i + 1]) {\n                update(i, 1);\n            }\n            else {\n                update(i, 0);\n            }\n        }\n        update(0, 0);\n        update(n - 1, 0);\n        \n        vector<int> ans;\n        for(int i = 0; i < queries.size(); i++) {\n            if(queries[i][0] == 1) {\n                int v = query(queries[i][1] + 1, queries[i][2] - 1);\n                ans.push_back(v);\n            }\n            else {\n                int index = queries[i][1];\n                int val = queries[i][2];\n                nums[index] = val;\n                updateIndex(index - 1, nums);\n                updateIndex(index, nums);\n                updateIndex(index + 1, nums);\n            }\n        }\n        return ans;\n    }\n};",
    "submit_ts": 1718508668.0
}