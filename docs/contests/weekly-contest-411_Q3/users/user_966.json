{
    "username": "ccww",
    "submission": "const int base = 1000000000;\nconst int base_digits = 9; // \u5206\u89e3\u4e3a\u4e5d\u4e2a\u6570\u4f4d\u4e00\u4e2a\u6570\u5b57\nstruct bigint {\n    vector<int> a;\n    int sign;\n\n    bigint() : sign(1) {}\n    bigint operator-() const {\n        bigint res = *this;\n        res.sign = -sign;\n        return res;\n    }\n    bigint(long long v) {\n        *this = v;\n    }\n    bigint(const string &s) {\n        read(s);\n    }\n    void operator=(const bigint &v) {\n        sign = v.sign;\n        a = v.a;\n    }\n    void operator=(long long v) {\n        a.clear();\n        sign = 1;\n        if (v < 0) sign = -1, v = -v;\n        for (; v > 0; v = v / base) {\n            a.push_back(v % base);\n        }\n    }\n\n    // \u57fa\u7840\u52a0\u51cf\u4e58\u9664\n    bigint operator+(const bigint &v) const {\n        if (sign == v.sign) {\n            bigint res = v;\n            for (int i = 0, carry = 0; i < (int)max(a.size(), v.a.size()) || carry; ++i) {\n                if (i == (int)res.a.size()) {\n                    res.a.push_back(0);\n                }\n                res.a[i] += carry + (i < (int)a.size() ? a[i] : 0);\n                carry = res.a[i] >= base;\n                if (carry) {\n                    res.a[i] -= base;\n                }\n            }\n            return res;\n        }\n        return *this - (-v);\n    }\n    bigint operator-(const bigint &v) const {\n        if (sign == v.sign) {\n            if (abs() >= v.abs()) {\n                bigint res = *this;\n                for (int i = 0, carry = 0; i < (int)v.a.size() || carry; ++i) {\n                    res.a[i] -= carry + (i < (int)v.a.size() ? v.a[i] : 0);\n                    carry = res.a[i] < 0;\n                    if (carry) {\n                        res.a[i] += base;\n                    }\n                }\n                res.trim();\n                return res;\n            }\n            return -(v - *this);\n        }\n        return *this + (-v);\n    }\n    void operator*=(int v) {\n        check(v);\n        for (int i = 0, carry = 0; i < (int)a.size() || carry; ++i) {\n            if (i == (int)a.size()) {\n                a.push_back(0);\n            }\n            long long cur = a[i] * (long long)v + carry;\n            carry = (int)(cur / base);\n            a[i] = (int)(cur % base);\n        }\n        trim();\n    }\n    void operator/=(int v) {\n        check(v);\n        for (int i = (int)a.size() - 1, rem = 0; i >= 0; --i) {\n            long long cur = a[i] + rem * (long long)base;\n            a[i] = (int)(cur / v);\n            rem = (int)(cur % v);\n        }\n        trim();\n    }\n    int operator%(int v) const {\n        if (v < 0) {\n            v = -v;\n        }\n        int m = 0;\n        for (int i = a.size() - 1; i >= 0; --i) {\n            m = (a[i] + m * (long long)base) % v;\n        }\n        return m * sign;\n    }\n\n    void operator+=(const bigint &v) {\n        *this = *this + v;\n    }\n    void operator-=(const bigint &v) {\n        *this = *this - v;\n    }\n    bigint operator*(int v) const {\n        bigint res = *this;\n        res *= v;\n        return res;\n    }\n    bigint operator/(int v) const {\n        bigint res = *this;\n        res /= v;\n        return res;\n    }\n    void operator%=(const int &v) {\n        *this = *this % v;\n    }\n\n    bool operator<(const bigint &v) const {\n        if (sign != v.sign) return sign < v.sign;\n        if (a.size() != v.a.size()) return a.size() * sign < v.a.size() * v.sign;\n        for (int i = a.size() - 1; i >= 0; i--)\n            if (a[i] != v.a[i]) return a[i] * sign < v.a[i] * sign;\n        return false;\n    }\n    bool operator>(const bigint &v) const {\n        return v < *this;\n    }\n    bool operator<=(const bigint &v) const {\n        return !(v < *this);\n    }\n    bool operator>=(const bigint &v) const {\n        return !(*this < v);\n    }\n    bool operator==(const bigint &v) const {\n        return !(*this < v) && !(v < *this);\n    }\n    bool operator!=(const bigint &v) const {\n        return *this < v || v < *this;\n    }\n\n    bigint abs() const {\n        bigint res = *this;\n        res.sign *= res.sign;\n        return res;\n    }\n    void check(int v) { // \u68c0\u67e5\u8f93\u5165\u7684\u662f\u5426\u4e3a\u8d1f\u6570\n        if (v < 0) {\n            sign = -sign;\n            v = -v;\n        }\n    }\n    void trim() { // \u53bb\u9664\u524d\u5bfc\u96f6\n        while (!a.empty() && !a.back()) a.pop_back();\n        if (a.empty()) sign = 1;\n    }\n    bool isZero() const { // \u5224\u65ad\u662f\u5426\u7b49\u4e8e\u96f6\n        return a.empty() || (a.size() == 1 && !a[0]);\n    }\n    friend bigint gcd(const bigint &a, const bigint &b) {\n        return b.isZero() ? a : gcd(b, a % b);\n    }\n    friend bigint lcm(const bigint &a, const bigint &b) {\n        return a / gcd(a, b) * b;\n    }\n    void read(const string &s) {\n        sign = 1;\n        a.clear();\n        int pos = 0;\n        while (pos < (int)s.size() && (s[pos] == '-' || s[pos] == '+')) {\n            if (s[pos] == '-') sign = -sign;\n            ++pos;\n        }\n        for (int i = s.size() - 1; i >= pos; i -= base_digits) {\n            int x = 0;\n            for (int j = max(pos, i - base_digits + 1); j <= i; j++) x = x * 10 + s[j] - '0';\n            a.push_back(x);\n        }\n        trim();\n    }\n    friend istream &operator>>(istream &stream, bigint &v) {\n        string s;\n        stream >> s;\n        v.read(s);\n        return stream;\n    }\n    friend ostream &operator<<(ostream &stream, const bigint &v) {\n        if (v.sign == -1) stream << '-';\n        stream << (v.a.empty() ? 0 : v.a.back());\n        for (int i = (int)v.a.size() - 2; i >= 0; --i)\n            stream << setw(base_digits) << setfill('0') << v.a[i];\n        return stream;\n    }\n\n    /* \u5927\u6574\u6570\u4e58\u9664\u5927\u6574\u6570\u90e8\u5206 */\n    typedef vector<long long> vll;\n    bigint operator*(const bigint &v) const { // \u5927\u6574\u6570\u4e58\u5927\u6574\u6570\n        vector<int> a6 = convert_base(this->a, base_digits, 6);\n        vector<int> b6 = convert_base(v.a, base_digits, 6);\n        vll a(a6.begin(), a6.end());\n        vll b(b6.begin(), b6.end());\n        while (a.size() < b.size()) a.push_back(0);\n        while (b.size() < a.size()) b.push_back(0);\n        while (a.size() & (a.size() - 1)) a.push_back(0), b.push_back(0);\n        vll c = karatsubaMultiply(a, b);\n        bigint res;\n        res.sign = sign * v.sign;\n        for (int i = 0, carry = 0; i < (int)c.size(); i++) {\n            long long cur = c[i] + carry;\n            res.a.push_back((int)(cur % 1000000));\n            carry = (int)(cur / 1000000);\n        }\n        res.a = convert_base(res.a, 6, base_digits);\n        res.trim();\n        return res;\n    }\n    friend pair<bigint, bigint> divmod(const bigint &a1,\n                                       const bigint &b1) { // \u5927\u6574\u6570\u9664\u5927\u6574\u6570\uff0c\u540c\u65f6\u8fd4\u56de\u7b54\u6848\u4e0e\u4f59\u6570\n        int norm = base / (b1.a.back() + 1);\n        bigint a = a1.abs() * norm;\n        bigint b = b1.abs() * norm;\n        bigint q, r;\n        q.a.resize(a.a.size());\n        for (int i = a.a.size() - 1; i >= 0; i--) {\n            r *= base;\n            r += a.a[i];\n            int s1 = r.a.size() <= b.a.size() ? 0 : r.a[b.a.size()];\n            int s2 = r.a.size() <= b.a.size() - 1 ? 0 : r.a[b.a.size() - 1];\n            int d = ((long long)base * s1 + s2) / b.a.back();\n            r -= b * d;\n            while (r < 0) r += b, --d;\n            q.a[i] = d;\n        }\n        q.sign = a1.sign * b1.sign;\n        r.sign = a1.sign;\n        q.trim();\n        r.trim();\n        return make_pair(q, r / norm);\n    }\n    static vector<int> convert_base(const vector<int> &a, int old_digits, int new_digits) {\n        vector<long long> p(max(old_digits, new_digits) + 1);\n        p[0] = 1;\n        for (int i = 1; i < (int)p.size(); i++) p[i] = p[i - 1] * 10;\n        vector<int> res;\n        long long cur = 0;\n        int cur_digits = 0;\n        for (int i = 0; i < (int)a.size(); i++) {\n            cur += a[i] * p[cur_digits];\n            cur_digits += old_digits;\n            while (cur_digits >= new_digits) {\n                res.push_back((int)(cur % p[new_digits]));\n                cur /= p[new_digits];\n                cur_digits -= new_digits;\n            }\n        }\n        res.push_back((int)cur);\n        while (!res.empty() && !res.back()) res.pop_back();\n        return res;\n    }\n    static vll karatsubaMultiply(const vll &a, const vll &b) {\n        int n = a.size();\n        vll res(n + n);\n        if (n <= 32) {\n            for (int i = 0; i < n; i++) {\n                for (int j = 0; j < n; j++) {\n                    res[i + j] += a[i] * b[j];\n                }\n            }\n            return res;\n        }\n\n        int k = n >> 1;\n        vll a1(a.begin(), a.begin() + k);\n        vll a2(a.begin() + k, a.end());\n        vll b1(b.begin(), b.begin() + k);\n        vll b2(b.begin() + k, b.end());\n\n        vll a1b1 = karatsubaMultiply(a1, b1);\n        vll a2b2 = karatsubaMultiply(a2, b2);\n\n        for (int i = 0; i < k; i++) a2[i] += a1[i];\n        for (int i = 0; i < k; i++) b2[i] += b1[i];\n\n        vll r = karatsubaMultiply(a2, b2);\n        for (int i = 0; i < (int)a1b1.size(); i++) r[i] -= a1b1[i];\n        for (int i = 0; i < (int)a2b2.size(); i++) r[i] -= a2b2[i];\n\n        for (int i = 0; i < (int)r.size(); i++) res[i + k] += r[i];\n        for (int i = 0; i < (int)a1b1.size(); i++) res[i] += a1b1[i];\n        for (int i = 0; i < (int)a2b2.size(); i++) res[i + n] += a2b2[i];\n        return res;\n    }\n\n    void operator*=(const bigint &v) {\n        *this = *this * v;\n    }\n    bigint operator/(const bigint &v) const {\n        return divmod(*this, v).first;\n    }\n    void operator/=(const bigint &v) {\n        *this = *this / v;\n    }\n    bigint operator%(const bigint &v) const {\n        return divmod(*this, v).second;\n    }\n    void operator%=(const bigint &v) {\n        *this = *this % v;\n    }\n};\nclass Solution {\npublic:\n    string largestPalindrome(int n, int k) {\n        if (k == 1) {\n            string ans = \"\";\n            for (int i = 0; i < n; i++) {\n                ans.push_back('9');\n            }\n            return ans;\n        }\n\n        if (k == 2) {\n            if (n <= 2) {\n                string ans = \"\";\n                for (int i = 0; i < n; i++) {\n                    ans.push_back('8');\n                }\n                return ans;\n            }\n            string ans = \"8\";\n            for (int i = 0; i < n - 2; i++) {\n                ans.push_back('9');\n            }\n            ans.push_back('8');\n            return ans;\n        }\n\n        if (k == 3) {\n            string ans = \"\";\n            for (int i = 0; i < n; i++) {\n                ans.push_back('9');\n            }\n            return ans;\n        }\n\n        if (k == 4) {\n            if (n < 4) {\n                string ans = \"\";\n                for (int i = 0; i < n; i++) {\n                    ans.push_back('8');\n                }\n                return ans;\n            }\n            string ans = \"88\";\n            for (int i = 0; i < n - 4; i++) {\n                ans.push_back('9');\n            }\n            ans.push_back('8');\n            ans.push_back('8');\n            return ans;\n        }\n\n        if (k == 5) {\n            if (n == 1) return \"5\";\n            string ans = \"5\";\n            for (int i = 0; i < n - 2; i++) {\n                ans.push_back('9');\n            }\n            ans.push_back('5');\n            return ans;\n        }\n\n        if (k == 6) {\n            if (n == 1) {\n                return \"6\";\n            }\n            if (n == 2) {\n                return \"66\";\n            }\n\n            if (n & 1) {\n                string ans = \"8\";\n                for (int i = 0; i < n - 2; i++) {\n                    if (i == (n - 2) / 2) {\n                        int x = ((n - 3) * 9 + 16) % 3;\n                        ans.push_back(9 - x + '0');\n                        continue;\n                    }\n                    ans.push_back('9');\n                }\n                ans.push_back('8');\n                return ans;\n            } else {\n                string ans = \"8\";\n                for (int i = 0; i < n - 2; i++) {\n                    if (i == (n - 2) / 2) {\n                        ans.push_back('7');\n                        continue;\n                    }\n                    if (i == (n - 2) / 2 - 1) {\n                        ans.push_back('7');\n                        continue;\n                    }\n                    ans.push_back('9');\n                }\n                ans.push_back('8');\n                return ans;\n            }\n        }\n\n        if (k == 7) {\n            if (n == 1) return \"7\";\n            if (n == 2) return \"77\";\n            if (n == 3) return \"959\";\n            if (n == 4) return \"9779\";\n            if (n == 5) return \"99799\";\n            if (n == 6) return \"999999\";\n            // if (n & 1) {\n            //     string ans = \"\";\n            //     for (int i = 0; i < n; i++) {\n            //         if (i == n / 2) {\n            //             int x = (n - 1) * 9 % 7;\n            //             cout << x << endl;\n            //             ans.push_back(9 - x + '0');\n            //             continue;\n            //         }\n            //         ans.push_back('9');\n            //     }\n            //     return ans;\n            // } else {\n            //     string ans = \"\";\n            //     for (int i = 0; i < n; i++) {\n            //         ans.push_back('7');\n            //     }\n            //     return ans;\n            // }\n\n            string s = \"\";\n            for (int i = 0; i < n; i++) s += '9';\n            if (n & 1) {\n                for (int i = 9; i >= 1; i--) {\n                    s[n / 2] = i + '0';\n                    if (bigint(s) % 7 == 0) {\n                        return s;\n                    }\n                }\n            } else {\n                for (int i = 9; i >= 1; i--) {\n                    s[n / 2 - 1] = i + '0';\n                    s[n / 2] = i + '0';\n                    if (bigint(s) % 7 == 0) {\n                        return s;\n                    }\n                }\n            }\n        }\n\n        if (k == 8) {\n            if (n == 1) return \"8\";\n            if (n == 2) return \"88\";\n            if (n == 3) return \"888\";\n            if (n == 4) return \"8888\";\n            if (n == 5) return \"88888\";\n            string ans = \"888\";\n            for (int i = 0; i < n - 6; i++) {\n                ans.push_back('9');\n            }\n            ans = ans + \"888\";\n            return ans;\n        }\n\n        if (k == 9) {\n            string ans = \"\";\n            for (int i = 0; i < n; i++) {\n                ans.push_back('9');\n            }\n            return ans;\n        }\n\n        return \"99\";\n    }\n};",
    "submit_ts": "1723952642",
    "subm_id": "556412804"
}