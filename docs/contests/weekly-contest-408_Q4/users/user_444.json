{
    "username": "viksin9076",
    "submission": "class DisjointSet{\n    vector<int> rank,size,parent;\n    public:\n    DisjointSet(int n){\n        rank.resize(n+1,0);\n        size.resize(n+1,1);\n        parent.resize(n+1);\n        for(int i=0;i<=n;i++) parent[i]=i;\n    }\n    \n    int findUP(int node){\n        if(node==parent[node]) return node;\n        return parent[node]=findUP(parent[node]);\n    }\n    \n    void UnionbyRank(int u, int v){\n        int ulp_u=findUP(u);\n        int ulp_v=findUP(v);\n        if(ulp_u==ulp_v) return;\n        if(rank[ulp_u] < rank[ulp_v]){\n            parent[ulp_u]=ulp_v;\n        }\n        else if(rank[ulp_u] > rank[ulp_v]){\n            parent[ulp_v]=ulp_u;\n        }\n        else{\n            parent[ulp_u]=ulp_v;\n            rank[ulp_v]++;\n        }\n    }\n    \n    void UnionbySize(int u, int v){\n        int ulp_u=findUP(u);\n        int ulp_v=findUP(v);\n        if(ulp_u==ulp_v) return;\n        if(size[ulp_u] < size[ulp_v]){\n            parent[ulp_u]=ulp_v;\n            size[ulp_v]+=size[ulp_u];\n        }\n        else{\n            parent[ulp_v]=ulp_u;\n            size[ulp_u]+=size[ulp_v];\n        }\n    }\n};\n\nclass Solution {\npublic:\n    bool canReachCorner(int x, int y, vector<vector<int>>& circles) {\n        int n=circles.size();\n        vector<vector<int>> arr(n,vector<int>(4));\n        vector<vector<long long int>> dist(n,vector<long long int>(3));\n        for(int i=0;i<n;i++){\n            int cx,cy,r;\n            cx=circles[i][0],cy=circles[i][1],r=circles[i][2];\n            dist[i][0]=cx,dist[i][1]=cy,dist[i][2]=r;\n            //top,left,bottom,right\n            int top=0,left=0,bottom=0,right=0;\n            if(r>=(y-cy)) top=1;\n            if(r>=cx) left=1;\n            if(r>=cy) bottom=1;\n            if(r>=(x-cx)) right=1;\n            arr[i][0]=top,arr[i][1]=left,arr[i][2]=bottom,arr[i][3]=right;\n        }\n        DisjointSet ds(n);\n        for(int i=0;i<n;i++){\n            for(int j=i+1;j<n;j++){\n                long long int cent=((dist[i][0]-dist[j][0])*(dist[i][0]-dist[j][0])) + ((dist[i][1]-dist[j][1])*(dist[i][1]-dist[j][1]));\n                long long int rad=(dist[i][2]+dist[j][2])*(dist[i][2]+dist[j][2]);\n                if(rad>=cent){\n                    ds.UnionbyRank(i,j);\n                }\n            }\n        }\n        for(int i=0;i<n;i++){\n            for(int j=0;j<n;j++){\n                if(ds.findUP(i)==ds.findUP(j) && ((arr[i][0]==1 && arr[j][3]==1) || (arr[i][3]==1 && arr[j][0]==1) || (arr[i][0]==1 && arr[j][2]==1) || (arr[i][2]==1 && arr[j][0]==1) || (arr[i][2]==1 && arr[j][1]==1) || (arr[i][1]==1 && arr[j][2]==1) || (arr[i][1]==1 && arr[j][3]==1) || (arr[i][3]==1 && arr[j][1]==1))){\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n};",
    "submit_ts": "1722137134",
    "subm_id": "1335755153"
}