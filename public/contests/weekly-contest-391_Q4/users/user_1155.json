{
    "username": "harry-f9",
    "submission": "class Solution:\n    def minimumDistance(self, points: List[List[int]]) -> int:\n        sum_ = [(x + y, i) for i, (x, y) in enumerate(points)]\n        diff = [(y - x, i) for i, (x, y) in enumerate(points)]\n        sum_.sort()\n        diff.sort()\n        sum_max = sum_[-1][0] - sum_[0][0]\n        diff_max = diff[-1][0] - diff[0][0]\n        if sum_max > diff_max:\n            return self.resolve_sum(sum_, diff)\n        elif sum_max < diff_max:\n            return self.resolve_diff(sum_, diff)\n        return max(self.resolve_sum(sum_, diff), self.resolve_diff(sum_, diff))\n    \n    def resolve_sum(self, sum_, diff):\n        sum_max = sum_[-1][0] - sum_[0][0]\n        start_points = [sum_[0][1]]\n        end_points = [sum_[-1][1]]\n        for i in range(1, len(sum_)):\n            if sum_[i][0] == sum_[0][0]:\n                start_points.append(i)\n            else:\n                break\n        for i in range(len(sum_) - 2, -1, -1):\n            if sum_[i][0] == sum_[-1][0]:\n                end_points.append(i)\n            else:\n                break\n        if len(start_points) == 1 and len(end_points) == 1:\n            start_id = sum_[0][1]\n            end_id = sum_[-1][1]\n            return min(self.try_remove(start_id, sum_, diff), self.try_remove(end_id, sum_, diff))\n        elif len(start_points) == 1:\n            start_id = sum_[0][1]\n            return self.try_remove(start_id, sum_, diff)\n        elif len(end_points) == 1:\n            end_id = sum_[-1][1]\n            return self.try_remove(end_id, sum_, diff)\n        return sum_max\n\n    def resolve_diff(self, sum_, diff):\n        diff_max = diff[-1][0] - diff[0][0]\n        start_points = [diff[0][1]]\n        end_points = [diff[-1][1]]\n        for i in range(1, len(diff)):\n            if diff[i][0] == diff[0][0]:\n                start_points.append(i)\n            else:\n                break\n        for i in range(len(diff) - 2, -1, -1):\n            if diff[i][0] == diff[-1][0]:\n                end_points.append(i)\n            else:\n                break\n        if len(start_points) == 1 and len(end_points) == 1:\n            start_id = diff[0][1]\n            end_id = diff[-1][1]\n            return min(self.try_remove(start_id, sum_, diff), self.try_remove(end_id, sum_, diff))\n        elif len(start_points) == 1:\n            start_id = diff[0][1]\n            return self.try_remove(start_id, sum_, diff)\n        elif len(end_points) == 1:\n            end_id = diff[-1][1]\n            return self.try_remove(end_id, sum_, diff)\n        return diff_max\n    \n    @staticmethod\n    def try_remove(id_, sum_, diff):\n        print('try remove', id_, sum_, diff)\n        sum_max, max_id = sum_[-1]\n        if max_id == id_:\n            sum_max, max_id = sum_[-2]\n        \n        sum_min, min_id = sum_[0]\n        if min_id == id_:\n            sum_min, min_id = sum_[1]\n        \n        diff_max, max_id = diff[-1]\n        if max_id == id_:\n            diff_max, max_id = diff[-2]\n        \n        diff_min, min_id = diff[0]\n        if min_id == id_:\n            diff_min, min_id = diff[1]\n        \n        return max(sum_max - sum_min, diff_max - diff_min)\n        "
}