{
    "username": "SpitfireRF",
    "submission": "class Solution {\npublic:\n    struct node_t {\n        int val, i, j;\n        bool operator<(const node_t &o) const { return tie(val, i, j) < tie(o.val, o.i, o.j); }\n    };\n\n    static long place(const vector<vector<int>> &b, const set<node_t> &ps, int rooks, unordered_multiset<int> &is, unordered_multiset<int> &js) {\n        if (rooks == 0) {\n            return 0l;\n        }\n        int n = b.size(), m = b[0].size();\n        long max_sum = LONG_MIN;\n        auto it = ps.rbegin();\n        for (int k = 0; k < (rooks == 1 ? 1 : 4); ++k, ++it) {\n            while (is.contains(it->i) || js.contains(it->j)) {\n                ++it;\n            }\n            is.insert(it->i);\n            js.insert(it->j);\n            max_sum = max(max_sum, it->val + place(b, ps, rooks - 1, is, js));\n            is.erase(is.find(it->i));\n            js.erase(js.find(it->j));\n        }\n        return max_sum;\n    }\n\n    static long long maximumValueSum(vector<vector<int>>& b) {\n        int n = b.size(), m = b[0].size();\n        set<node_t> s;\n        for (int i = 0; i < n; ++i) {\n            for (int j = 0; j < m; ++j) {\n                s.insert(node_t{b[i][j], i, j});\n            }\n        }\n        unordered_multiset<int> is, js;\n        return place(b, s, 3, is, js);\n    }\n};",
    "submit_ts": "1723909386",
    "subm_id": "1359190603"
}