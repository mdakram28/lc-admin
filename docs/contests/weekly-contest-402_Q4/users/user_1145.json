{
    "username": "jithin420",
    "submission": "class Solution:\n    def countOfPeaks(self, nums: List[int], queries: List[List[int]]) -> List[int]:\n        l = len(nums)\n        tree = [0] * 2 * l\n\n        peak = [0] * l\n        for i in range(1, l - 1):\n            if nums[i - 1] < nums[i] > nums[i + 1]:\n                peak[i] += 1\n\n        for i in range(l):\n            tree[i + l] = peak[i]\n\n        for i in range(l - 1, 0, -1):\n            tree[i] = tree[2 * i] + tree[2 * i + 1]\n\n        def updatepeak(idx):\n            if 0 < idx < l - 1:\n                peak[idx] = 1 if nums[idx - 1] < nums[idx] > nums[idx + 1] else 0\n\n        def backprop(idx):\n            if 0 <= idx < l:\n                tree[idx + l] = peak[idx]\n                idx += l\n                while idx > 1:\n                    # print(\"idx = \", idx)\n                    tree[idx // 2] = tree[idx] + tree[idx ^ 1]\n                    idx = idx // 2\n\n        def update(idx, val):\n            nums[idx] = val\n            updatepeak(idx)\n            updatepeak(idx - 1)\n            updatepeak(idx + 1)\n            backprop(idx)\n            backprop(idx - 1)\n            backprop(idx + 1)\n\n        def query(left, right):\n            left += l\n            right += l\n            ans = 0\n\n            while left < right:\n                if left & 1:\n                    ans += tree[left]\n                    left += 1\n                if right & 1:\n                    right -= 1\n                    ans += tree[right]\n                left //= 2\n                right //= 2\n            return ans\n\n        res = []\n        for [q, a, b] in queries:\n            # print(peak)\n            # print(tree)\n            if q == 1:\n                res.append(query(a + 1, b))\n            else:\n                update(a, b)\n        return res",
    "submit_ts": 1718508465.0
}