{
    "username": "KayBee03",
    "submission": "class Solution {\npublic:\n    long long countSubarrays(vector<int>& nums, int k) {\n        int n=nums.size(),mb=30; if(n==1) return (nums[0]==k); long long ans=0;\n        vector<vector<int>> bf(mb,vector<int>(n,0)),v(mb,vector<int>(n));\n        for(int i=0;i<mb;i++) if(nums.back()&(1<<i)) bf[i].back()=1;\n        for(int i=n-2;i>=0;i--)\n        {\n            for(int j=0;j<mb;j++)\n            {\n                bf[j][i]=bf[j][i+1]+((nums[i]&(1<<j))>0);\n            }\n        }\n        for(int i=0;i<n;i++) for(int j=0;j<mb;j++) v[j][i]=bf[j][i]-(n-i);\n        for(int i=0;i<n;i++)\n        {\n            int flag=1,extra=i+1,edge=0;\n            for(int j=0;j<mb;j++)\n            {\n                if(k&(1<<j)&&!(nums[i]&(1<<j))) flag=0;\n            }\n            if(flag) \n            for(int j=0;j<mb;j++)\n            {\n                if(!(nums[i]&(1<<j))) continue;\n                if(k&(1<<j))\n                {\n                    auto it=lower_bound(v[j].begin(),v[j].end(),v[j][i])-v[j].begin();\n                    edge=max<int>(edge,it);\n                }\n                else\n                {\n                    // cout<<i<<' '<<j<<endl;\n                    auto it=lower_bound(v[j].begin(),v[j].end(),v[j][i])-v[j].begin();\n                    extra=min<int>(extra,it);\n                }\n            }\n            if(extra>edge&&flag) ans+=extra-edge;\n            // cout<<ans<<' '<<extra<<' '<<edge<<endl;\n        }\n        return ans;\n    }\n};",
    "submit_ts": "1720280717",
    "subm_id": "1311799575"
}