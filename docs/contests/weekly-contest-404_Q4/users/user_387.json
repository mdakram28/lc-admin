{
    "username": "TooMuchFreeTime",
    "submission": "class Solution {\npublic:\n    \n    int dfs(int node,int par,vector<int>adj[],int &ans){\n    int mx = -1 , mx2 = -1;\n    for(auto child : adj[node]){\n        if(child == par) continue;\n        int curr = dfs(child,node,adj,ans);\n        if(curr>mx){\n            mx2 = mx;\n            mx = curr;\n        }\n        else if(curr>mx2){\n            mx2 = curr;\n        }\n    }\n    if(mx==-1) return 0;\n    if(mx2==-1){\n        ans = max(ans , 1 + mx);\n        return 1 + mx;\n    }\n    ans = max(ans,2+mx+mx2);\n    return 1 + mx;\n    }\n    \n    int helper(vector<vector<int>>&edges){\n    int n = edges.size();\n    vector<int>adj[n+1];    \n    for(auto it : edges){\n        adj[it[0]].push_back(it[1]);\n        adj[it[1]].push_back(it[0]);\n    }\n    int ans = 0;\n    dfs(0,-1,adj,ans);\n    return ans;\n    }\n\n    \n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n        int d1 = helper(edges1);\n        int d2 = helper(edges2);\n        int x = (d1+1)/2 , y = (d2+1)/2;\n        int ans = max(d1,d2);\n        ans = max(ans,x+y+1);\n        return ans;\n    }\n};",
    "submit_ts": "1719717438",
    "subm_id": "1304391541"
}