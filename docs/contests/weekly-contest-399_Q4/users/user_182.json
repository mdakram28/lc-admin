{
    "username": "SupervisorMayHap",
    "submission": "    \n\nclass Solution:\n    def maximumSumSubsequence(self, nums: List[int], queries: List[List[int]]) -> int:\n        \n        class SegmentTree():    \n            def __init__(self, left, right):\n                self.left = left\n                self.right = right\n                #.         00  01 10 11\n                self.arr = [0, 0, 0, 0]\n                self.left_child = None\n                self.right_child = None\n                \n                if left == right:\n                    self.arr = [0, 0, 0, nums[left]]\n                else:\n                    mid = (left + right) // 2\n                    self.left_child = SegmentTree(left, mid)\n                    self.right_child = SegmentTree(mid + 1, right)\n                    a1 = self.left_child.arr\n                    a2 = self.right_child.arr                    \n                    self.arr = [\n                        max(a1[0] + a2[0], a1[0] + a2[2], a1[1] + a2[0]), #00\n                        max(a1[0] + a2[1], a1[0] + a2[3], a1[1] + a2[1]), #01\n                        max(a1[2] + a2[0], a1[2] + a2[2], a1[3] + a2[0]), #10\n                        max(a1[2] + a2[1], a1[2] + a2[3], a1[3] + a2[1]) #11\n                    ]\n                    \n            def update(self, pos, value):\n                if pos < self.left:\n                    return\n                if pos > self.right:\n                    return\n                if self.left == pos and pos == self.right:\n                    nums[pos] = value\n                    self.arr = [0, 0, 0, nums[pos]]\n                    return\n                    \n                mid = (self.left + self.right) // 2\n                \n                if pos <= mid:\n                    self.left_child.update(pos, value)\n                else:\n                    self.right_child.update(pos, value)\n                a1 = self.left_child.arr\n                a2 = self.right_child.arr                    \n                self.arr = [\n                    max(a1[0] + a2[0], a1[0] + a2[2], a1[1] + a2[0]), #00\n                    max(a1[0] + a2[1], a1[0] + a2[3], a1[1] + a2[1]), #01\n                    max(a1[2] + a2[0], a1[2] + a2[2], a1[3] + a2[0]), #10\n                    max(a1[2] + a2[1], a1[2] + a2[3], a1[3] + a2[1]) #11\n                ]\n                    \n        segment_tree = SegmentTree(0, len(nums) - 1)\n        \n        total = 0\n        mod = 1_000_000_007\n        for pos, value in queries:\n            segment_tree.update(pos, value)\n            total += max(segment_tree.arr)\n            total %= mod\n\n        return total",
    "submit_ts": "1716695115",
    "subm_id": "1268133683"
}