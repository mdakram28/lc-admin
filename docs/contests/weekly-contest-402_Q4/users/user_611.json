{
    "username": "waiting_you",
    "submission": "class SegmentTree {\nprivate:\n    vector<int> segTree;\n    vector<int> nums;\n    int n;\n\n    // Function to check if the current element is a peak\n    bool isPeak(int i) {\n        if (i <= 0 || i >= n-1) return false;\n        return nums[i] > nums[i-1] && nums[i] > nums[i+1];\n    }\n\n    // Build the segment tree\n    void build(int si, int ss, int se) {\n        if (ss == se) {\n            segTree[si] = isPeak(ss) ? 1 : 0;\n            return;\n        }\n        int mid = (ss + se) / 2;\n        build(2 * si + 1, ss, mid);\n        build(2 * si + 2, mid + 1, se);\n        segTree[si] = segTree[2 * si + 1] + segTree[2 * si + 2];\n    }\n\n    // Update the segment tree\n    void update(int si, int ss, int se, int idx) {\n        if (ss == se) {\n            segTree[si] = isPeak(ss) ? 1 : 0;\n            return;\n        }\n        int mid = (ss + se) / 2;\n        if (idx <= mid) update(2 * si + 1, ss, mid, idx);\n        else update(2 * si + 2, mid + 1, se, idx);\n        segTree[si] = segTree[2 * si + 1] + segTree[2 * si + 2];\n    }\n\n    // Range query to count peaks\n    int query(int si, int ss, int se, int qs, int qe) {\n        if (qs > se || qe < ss) return 0;\n        if (qs <= ss && qe >= se) return segTree[si];\n        int mid = (ss + se) / 2;\n        return query(2 * si + 1, ss, mid, qs, qe) + query(2 * si + 2, mid + 1, se, qs, qe);\n    }\n\npublic:\n    SegmentTree(vector<int>& nums) : nums(nums) {\n        n = nums.size();\n        segTree.resize(4 * n);\n        build(0, 0, n-1);\n    }\n\n    void update(int idx, int val) {\n        nums[idx] = val;\n        if (idx > 0) update(0, 0, n-1, idx-1);\n        update(0, 0, n-1, idx);\n        if (idx < n-1) update(0, 0, n-1, idx+1);\n    }\n\n    int query(int l, int r) {\n        return query(0, 0, n-1, l, r);\n    }\n};\nclass Solution {\npublic:\n    vector<int> countOfPeaks(vector<int>& nums, vector<vector<int>>& queries) {\n        SegmentTree segTree(nums);\n        vector<int> result;\n        for (auto& q : queries) {\n            if (q[0] == 1) {\n                result.push_back(segTree.query(q[1]+1, q[2]-1));\n            } else if (q[0] == 2) {\n                segTree.update(q[1], q[2]);\n            }\n        }\n        return result;\n    }\n};",
    "submit_ts": 1718507429.0
}