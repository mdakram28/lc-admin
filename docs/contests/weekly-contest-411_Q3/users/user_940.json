{
    "username": "Ruslan Rakhmedov",
    "submission": "class Solution {\n\tpublic String largestPalindrome(int n, int k) {\n\t\tchar[] curr = new char[n];\n\t\tif (k == 1 || k == 3 || k == 9) {\n\t\t\tArrays.fill(curr, '9');\n\t\t\treturn String.valueOf(curr);\n\t\t} else if (k == 2) {\n\t\t\tArrays.fill(curr, '8');\n\t\t\tfor (int i = 1; i < curr.length - 1; i++) {\n\t\t\t\tcurr[i] = '9';\n\t\t\t}\n\t\t\treturn String.valueOf(curr);\n\t\t} else if (k == 4) {\n\t\t\tArrays.fill(curr, '8');\n\t\t\tfor (int i = 2; i < curr.length - 2; i++) {\n\t\t\t\tcurr[i] = '9';\n\t\t\t}\n\t\t\treturn String.valueOf(curr);\n\t\t} else if (k == 5) {\n\t\t\tArrays.fill(curr, '5');\n\t\t\tfor (int i = 1; i < curr.length - 1; i++) {\n\t\t\t\tcurr[i] = '9';\n\t\t\t}\n\t\t\treturn String.valueOf(curr);\n\t\t} else if (k == 6) {\n\t\t\tif (n == 1) {\n\t\t\t\treturn \"6\";\n\t\t\t} else if (n == 2) {\n\t\t\t\treturn \"66\";\n\t\t\t} else if (n == 3) {\n\t\t\t\treturn \"888\";\n\t\t\t} else if (n == 4) {\n\t\t\t\treturn \"8778\";\n\t\t\t}\n\t\t\tArrays.fill(curr, '8');\n\t\t\tfor (int i = 1; i < curr.length - 1; i++) {\n\t\t\t\tcurr[i] = '9';\n\t\t\t}\n\n\t\t\tif (curr.length % 2 == 1) {\n\t\t\t\tcurr[curr.length / 2] = '8';\n\t\t\t} else {\n\t\t\t\tcurr[curr.length / 2 - 1] = '7';\n\t\t\t\tcurr[curr.length / 2] = '7';\n\t\t\t}\n\t\t\treturn String.valueOf(curr);\n\t\t} else if (k == 7) {\n\t\t\tif (n == 1) {\n\t\t\t\treturn \"7\";\n\t\t\t} else if (n == 2) {\n\t\t\t\treturn \"77\";\n\t\t\t} else if (n == 3) {\n\t\t\t\treturn \"959\";\n\t\t\t} else if (n == 4) {\n\t\t\t\treturn \"9779\";\n\t\t\t}\n\t\t\tArrays.fill(curr, '9');\n\t\t\tif (n % 2 == 1) {\n\t\t\t\treturn dfs(n / 2 - 2, n / 2 + 2, curr, java.math.BigInteger.valueOf(k));\n\t\t\t}\n\t\t\treturn dfs(n / 2 - 2, n / 2 + 1, curr, java.math.BigInteger.valueOf(k));\n\t\t} else if (k == 8) {\n\t\t\tArrays.fill(curr, '8');\n\t\t\tfor (int i = 3; i < curr.length - 3; i++) {\n\t\t\t\tcurr[i] = '9';\n\t\t\t}\n\t\t\treturn String.valueOf(curr);\n\t\t}\n\t\treturn \"\";\n\t}\n\n\tprivate String dfs(int left, int right, char[] chars, java.math.BigInteger k) {\n\t\tif (left > right) {\n\t\t\tif (new java.math.BigInteger(String.valueOf(chars)).remainder(k).equals(java.math.BigInteger.ZERO)) {\n\t\t\t\treturn String.valueOf(chars);\n\t\t\t}\n\t\t\treturn \"\";\n\t\t}\n\t\tfor (int digit = 9; digit >= 0; digit--) {\n\t\t\tchars[left] = (char) (digit + '0');\n\t\t\tchars[right] = chars[left];\n\t\t\tString res = dfs(left + 1, right - 1, chars, k);\n\t\t\tif (!\"\".equals(res)) {\n\t\t\t\treturn res;\n\t\t\t}\n\t\t}\n\t\treturn \"\";\n\t}\n}",
    "submit_ts": "1723953164",
    "subm_id": "1359814064"
}