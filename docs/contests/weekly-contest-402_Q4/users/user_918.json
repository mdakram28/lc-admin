{
    "username": "wivole4747",
    "submission": "class SegmentTree:\n    def __init__(self, data):\n        self.n = len(data)\n        self.tree = [0] * (2 * self.n)\n        # Build the tree\n        for i in range(self.n):\n            self.tree[self.n + i] = data[i]\n        for i in range(self.n - 1, 0, -1):\n            self.tree[i] = self.tree[i * 2] + self.tree[i * 2 + 1]\n\n    def update(self, index, value):\n        # Set value at position index\n        index += self.n\n        self.tree[index] = value\n        while index > 1:\n            index //= 2\n            self.tree[index] = self.tree[2 * index] + self.tree[2 * index + 1]\n\n    def range_query(self, left, right):\n        # Get sum of elements in range [left, right] (inclusive)\n        left += self.n\n        right += self.n + 1\n        sum = 0\n        while left < right:\n            if left % 2:\n                sum += self.tree[left]\n                left += 1\n            if right % 2:\n                right -= 1\n                sum += self.tree[right]\n            left //= 2\n            right //= 2\n        return sum\n\n\n# # Example usage:\n# data = [3, 2, -1, 6, 5]\n# st = SegmentTree(data)\n# # Query the range sum from index 1 to 4\n# print(st.range_query(1, 4))  # Output: 7 (sum of elements from index 1 to 3)\n# # Update the element at index 2\n# st.update(2, 2)\n# # Query the range sum from index 1 to 4 again\n# print(st.range_query(1, 4))  # Output: 10 (sum of elements from index 1 to 3 after the update)\n\n\nclass Solution:\n    def countOfPeaks(self, nums: List[int], queries: List[List[int]]) -> List[int]:\n        data = [0]\n        n = len(nums)\n        for i in range(1, n - 1):\n            if nums[i - 1] < nums[i] > nums[i + 1]:\n                data.append(1)\n            else:\n                data.append(0)\n        data.append(0)\n        st = SegmentTree(data)\n        res = []\n        for q in queries:\n            if q[0] == 1:\n                l, r = q[1] + 1, q[2] - 1\n                if l <= r:\n                    res.append(st.range_query(l, r))\n                else:\n                    res.append(0)\n            else:\n                index, val = q[1], q[2]\n                old = nums[index]\n                nums[index] = val\n                if index != 0 and index != n - 1:\n                    if nums[index - 1] < nums[index] > nums[index + 1]:\n                        st.update(index, 1)\n                if 0 < index < n-1:\n                    if nums[index-1] < old > nums[index+1]:\n                        if nums[index-1] >= nums[index] or nums[index+1] >= nums[index]:\n                            st.update(index , 0)\n                if index - 1 >= 0:\n                    if (old < nums[index - 1] and nums[index] >= nums[index - 1] and index - 2 >= 0 and nums[\n                        index - 1] > nums[index - 2]):\n                        st.update(index - 1, 0)\n                    if (index - 2 >= 0 and old >= nums[index - 1] and nums[index] < nums[index - 1] > nums[index - 2]):\n                        st.update(index - 1, 1)\n                if index + 1 < n:\n                    if (old < nums[index + 1] and nums[index] >= nums[index + 1] and index + 2 < n and nums[index + 1] >\n                            nums[index + 2]):\n                        st.update(index + 1, 0)\n                    if (index + 2 < n and old >= nums[index + 1] and nums[index] < nums[index + 1] and nums[index + 1] >\n                            nums[index + 2]):\n                        st.update(index + 1, 1)\n        return res",
    "submit_ts": 1718508493.0
}