{
    "username": "lone17",
    "submission": "class Solution:\n    def minimumCost(self, target: str, words: List[str], costs: List[int]) -> int:\n        n = len(words)\n        m = len(target)\n        trie = {}\n        for w in words:\n            cur = trie\n            for c in w:\n                if c not in cur:\n                    cur[c] = {}\n                cur = cur[c]\n            cur['$'] = w\n        \n        w2c = {}\n        for w, c in zip(words, costs):\n            if w not in w2c:\n                w2c[w] = c\n            else:\n                w2c[w] = min(c, w2c[w])\n        \n        def search(target, i, root):\n            j = i\n            while j <= m:\n                if '$' in root:\n                    yield root['$']\n                if j == m:\n                    break\n                if target[j] in root:\n                    root = root[target[j]]\n                    j += 1\n                else:\n                    break\n            \n            # if '$' in root:\n            #     yield root['$']\n            \n            # if i == len(target):\n            #     return\n            \n            # if target[i] in root:\n            #     yield from search(target, i + 1, root[target[i]])\n        \n\n        # # h = [(0, m)]\n        # q = deque([(0, m)])\n        # while q:\n        #     # cur_cost, left = heappop(h)\n        #     cur_cost, left = q.popleft()\n        #     if left == 0:\n        #         return cur_cost\n        #     i = m - left\n        #     cands = list(search(target, i, trie))\n        #     cands.sort(key=lambda w: (w2c[w], -len(w)))\n        #     for w in cands:\n        #         # heappush(h, (cur_cost + w2c[w], left - len(w)))\n        #         q.append((cur_cost + w2c[w], left - len(w)))\n        \n        @cache\n        def backtrack(i):\n            if i == m:\n                return 0\n            cands = list(search(target, i, trie))\n            # cands.sort(key=lambda w: (w2c[w] / len(w)))\n\n            res = inf\n            for w in cands:\n                c = w2c[w] + backtrack(i + len(w))\n                res = min(res, c)\n            \n            return res\n        \n        ans = backtrack(0)\n        if ans != inf:\n            return ans\n\n        # dp = [inf] * (m + 1)\n        # for i in range(m):\n        #     cands = \n        \n        return -1",
    "submit_ts": "1720323362",
    "subm_id": "1312373678"
}