{
    "username": "pedantic-newtoncsf",
    "submission": "class Solution {\npublic:\n    int minFlips(vector<vector<int>>& grid) {\n        int n = grid.size();\n        int m = grid[0].size();\n        int result = 0;\n        for(int i = 0; i < n / 2; i++){\n            for(int j = 0; j < m / 2; j++){\n                int one = grid[i][j] + grid[n - i - 1][j] + grid[i][m - 1 - j]\n                    + grid[n - 1 - i][m - 1 - j];\n                int zero = 4 - one;\n                result += min(one, zero);\n            }\n        }\n\n        int allone = 0, allzero = 0, oz = 0, center = 0;\n        if(n % 2){\n            for(int i = 0; i < m / 2; i++){\n                int a = grid[n / 2][i];\n                int b = grid[n / 2][m - i - 1];\n                if(a == 1 && b == 1) allone++;\n                else if(a == 0 && b == 0) allzero++;\n                else oz++;\n            }\n        }\n        if(m % 2){\n            for(int i = 0; i < n / 2; i++){\n                int a = grid[i][m / 2];\n                int b = grid[n - i - 1][m / 2];\n                if(a == 1 && b == 1) allone++;\n                else if(a == 0 && b == 0) allzero++;\n                else oz++;\n            }            \n        }\n\n        if(m % 2 && n % 2) center = grid[n / 2][m / 2];\n        result += oz;\n        \n        result += center;\n\n        if(allone % 2 && oz == 0) result += 2; \n\n        return result;\n    }\n};",
    "submit_ts": "1722698574",
    "subm_id": "552271498"
}