{
    "username": "bloderxd",
    "submission": "class Solution {\n    fun numberOfPermutations(n: Int, requirements: Array<IntArray>): Int {\n    val maxInv = 400\n    val mod = 1000000007\n    val requirementMap: MutableMap<Int, Int> = HashMap()\n    for (r in requirements) requirementMap[r[0] + 1] = r[1]\n    val permutations = Array(n + 1) { LongArray(maxInv + 1) }\n    permutations[0][0] = 1\n    for (length in 1..n) {\n        for (inv in 0..maxInv) {\n            for (newPos in 0..<length) {\n                val prevInv = inv - newPos\n                if (prevInv >= 0) {\n                    permutations[length][inv] = (permutations[length][inv] + permutations[length - 1][prevInv]) % mod\n                }\n            }\n        }\n        if (requirementMap.containsKey(length)) {\n            val currInv = requirementMap[length]!!\n            for (inv in 0..maxInv) {\n                if (inv != currInv) {\n                    permutations[length][inv] = 0\n                }\n            }\n        }\n    }\n    var result: Long = 0\n    for (count in permutations[n]) result = (result + count) % mod\n    return result.toInt()\n}\n}",
    "submit_ts": "1719070583",
    "subm_id": "1296826628"
}