{
    "username": "j1r4ch1",
    "submission": "class TrieNode:\n    def __init__(self):\n        self.children = {}\n        self.cost = 1e9\n\nclass Trie:\n    def __init__(self):\n        self.root = TrieNode()\n    \n    def insert(self, word, cost):\n        node = self.root\n        for char in word:\n            if char not in node.children:\n                node.children[char] = TrieNode()\n            node = node.children[char]\n        node.cost = min(cost, node.cost)\n    \n    def find(self, target, start):\n        node = self.root\n        pre = []\n        for i in range(start, len(target)):\n            char = target[i]\n            if char not in node.children:\n                break\n            node = node.children[char]\n            if node.cost != 1e9:\n                pre.append((i+1, node.cost))\n        return pre\n\n    \nclass Solution:\n    def minimumCost(self, target: str, words: List[str], costs: List[int]) -> int:\n        n = len(target)\n        dp = [1e9] * (n+1)\n        dp[0] = 0\n\n        trie = Trie()\n        for word, cost in zip(words, costs):\n            trie.insert(word, cost)\n\n        for i in range(n):\n            if dp[i] == 1e9:\n                continue\n            for end, cost in trie.find(target, i):\n                dp[end] = min(dp[end], dp[i] + cost)\n\n        return dp[n] if dp[n] != 1e9 else -1\n",
    "submit_ts": "1720323563",
    "subm_id": "1312378604"
}