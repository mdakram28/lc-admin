{
    "username": "samarth_varshney",
    "submission": "class Solution {\npublic:\n    int bfs(vector<vector<int>> &graph, int start, int target1, int target2, int nodes) {\n        queue<int> qu;\n        vector<int> visit(nodes + 4, 0);\n        qu.push(start);\n        visit[start] = 1;\n        \n        while (!qu.empty()) {\n            int u = qu.front();\n            qu.pop();\n            for (int v : graph[u]) {\n                if (!visit[v]) {\n                    qu.push(v);\n                    visit[v] = 1;\n                }\n            }\n        }\n        return visit[target1] || visit[target2];\n    }\n        \n    bool canReachCorner(int X, int Y, vector<vector<int>>& cir) {\n       \n        vector<pair<pair<int, int>, int>> circles(cir.size());\n        vector<vector<int>> graph(cir.size() + 4);\n        int num_circles=cir.size();\n        \n        for (int i = 0; i < num_circles; ++i) {\n\n            circles[i].first.first=cir[i][0];\n\n            circles[i].first.second=cir[i][1];\n\n            circles[i].second=cir[i][2];\n\n        }\n        \n        \n        \n        for (int i = 0; i < num_circles; ++i) {\n            \n            if (circles[i].first.first <= circles[i].second) {\n                graph[num_circles].push_back(i);\n                graph[i].push_back(num_circles);\n            }\n\n            if (X - circles[i].first.first <= circles[i].second) {\n                graph[num_circles + 2].push_back(i);\n                graph[i].push_back(num_circles + 2);\n            }\n\n            if (circles[i].first.second <= circles[i].second) {\n                graph[num_circles + 1].push_back(i);\n                graph[i].push_back(num_circles + 1);\n            }\n\n            if (Y - circles[i].first.second <= circles[i].second) {\n                graph[num_circles + 3].push_back(i);\n                graph[i].push_back(num_circles + 3);\n            }\n\n            for (int j = i + 1; j < num_circles; ++j) {\n                \n                double distance = sqrt(pow(circles[i].first.first - circles[j].first.first, 2) +\n                                    pow(circles[i].first.second - circles[j].first.second, 2));\n                int radius_sum = circles[i].second + circles[j].second;\n                \n                if (radius_sum >= distance) {\n                    graph[i].push_back(j);\n                    graph[j].push_back(i);\n                }\n            }\n\n        }\n        \n        int blocked = 0;\n    \n        blocked = max(blocked, bfs(graph, num_circles, num_circles + 1, num_circles + 2, num_circles + 4));\n        blocked = max(blocked, bfs(graph, num_circles + 3, num_circles + 2, num_circles + 1, num_circles + 4)); \n        \n        if (blocked){return false;}\n        return true;\n            \n        }\n    };",
    "submit_ts": "1722138843",
    "subm_id": "1335801139"
}