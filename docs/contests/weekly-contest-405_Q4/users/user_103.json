{
    "username": "RaymondQiu",
    "submission": "class Solution:\n    def minimumCost(self, target: str, words: List[str], costs: List[int]) -> int:\n#         n = len(target)\n#         dp = [float('inf')] * (n + 1)\n#         dp[0] = 0  # Cost to form an empty string is 0\n\n#         for i in range(n):\n#             if dp[i] == float('inf'):\n#                 continue  # If current prefix is not formable, skip\n\n#             for j in range(len(words)):\n#                 word = words[j]\n#                 cost = costs[j]\n#                 length = len(word)\n\n#                 if i + length <= n and target[i:i+length] == word:\n#                     dp[i + length] = min(dp[i + length], dp[i] + cost)\n\n#         return dp[n] if dp[n] != float('inf') else -1\n        n = len(target)\n        dp = [float('inf')] * (n + 1)\n        dp[0] = 0  # Cost to form an empty string is 0\n\n        # Convert words to a dictionary with their corresponding costs for fast lookup\n        word_cost_dict = {}\n        for word, cost in zip(words, costs):\n            if word not in word_cost_dict:\n                word_cost_dict[word] = cost\n            else:\n                word_cost_dict[word] = min(word_cost_dict[word], cost)\n\n        for i in range(n):\n            if dp[i] == float('inf'):\n                continue  # If current prefix is not formable, skip\n\n            for word in word_cost_dict:\n                cost = word_cost_dict[word]\n                length = len(word)\n\n                if i + length <= n and target[i:i+length] == word:\n                    dp[i + length] = min(dp[i + length], dp[i] + cost)\n\n        return dp[n] if dp[n] != float('inf') else -1",
    "submit_ts": "1720320766",
    "subm_id": "1312303924"
}