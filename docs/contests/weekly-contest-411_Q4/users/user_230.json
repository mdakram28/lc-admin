{
    "username": "Huy Ph\u01b0\u1edbc",
    "submission": "class Solution {\npublic:\n    #define st first\n    #define nd second\n    long long D[400001],dapan[100001],l,r,c0,c1,d,lazy[400001];\n    vector<long long> ans;\n    pair< pair<long long,long long>,long long> Q[100001];\n    void down(long long id,long long l,long long r){\n        long long bonus=lazy[id];\n        long long mid=(l+r)/2;\n        lazy[id]=0;\n\n        D[id*2]+=bonus*(mid-l+1);\n        lazy[id*2]+=bonus;\n\n        D[id*2+1]+=bonus*(r-mid);\n        lazy[id*2+1]+=bonus;\n\n\n    }\n    void update(long long id,long long l,long long r,long long u,long long v){\n        if(r<u || l>v) return;\n        if(u<=l && r<=v){\n            D[id]+=(r-l+1);\n            lazy[id]++;\n            return;\n        }\n        down(id,l,r);\n        long long mid=(l+r)/2;\n        update(id*2,l,mid,u,v);\n        update(id*2+1,mid+1,r,u,v);\n        D[id]=D[id*2]+D[id*2+1];\n    }\n    long long get(long long id,long long l,long long r,long long u,long long v){\n        if(r<u || l>v) return 0;\n        if(u<=l && r<=v) return D[id];\n        down(id,l,r);\n        long long mid=(l+r)/2;\n        return get(id*2,l,mid,u,v)+get(id*2+1,mid+1,r,u,v);\n    }\n    vector<long long> countKConstraintSubstrings(string s, int k, vector<vector<int>>& queries) {\n        long long q=queries.size();\n        for(long long i=0; i<q; i++){\n            Q[i].st.nd=queries[i][0];\n            Q[i].st.st=queries[i][1];\n            Q[i].nd=i;\n        }\n        sort(Q,Q+q);\n        for(long long i=0; i<q; i++){\n            swap(Q[i].st.nd,Q[i].st.st);\n        }\n        d=0;\n        l=0;\n        long long n=s.size()-1;\n        for(long long i=0; i<s.size(); i++){\n            if(s[i]=='0') c0++;\n            else c1++;\n            while(c0>k && c1>k){\n                if(s[l]=='0') c0--;\n                else c1--;\n                l++;\n            }\n            update(1,1,n+1,l+1,i+1);\n        //    cout<<D[1]<<'\\n';\n            while(d<q && i==Q[d].st.nd){\n                dapan[Q[d].nd]=get(1,1,n+1,Q[d].st.st+1,Q[d].st.nd+1);\n                d++;\n            }\n        }\n        for(long long i=0; i<q; i++) ans.push_back(dapan[i]);\n        return ans;\n    }\n};\n",
    "submit_ts": "1723950775",
    "subm_id": "1359754740"
}