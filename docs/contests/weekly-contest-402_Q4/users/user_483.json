{
    "username": "mfujwiara",
    "submission": "class SegmentTree:\n    def __init__(self, init_val, seg_func, ide_ele):\n        size = len(init_val)\n        self.seg_func = seg_func\n        self.ide_ele = ide_ele\n        self.n = 1 << (size - 1).bit_length()\n        self.node = [ide_ele] * 2 * self.n\n        for i in range(size):\n            self.node[self.n + i - 1] = init_val[i]\n        for i in range(self.n - 2, -1, -1):\n            self.node[i] = self.seg_func(self.node[2 * i + 1], self.node[2 * i + 2])\n\n    def update(self, index, val):\n        i = index + self.n - 1\n        self.node[i] = val\n        while i > 0:\n            i = int((i - 1)//2)\n            l = self.node[2*i+1]\n            r = self.node[2*i+2]\n            self.node[i] =  self.seg_func(l, r)\n  \n    def query(self, left, right):\n        ret=self.ide_ele\n        left+=self.n-1\n        right+=self.n-1\n        while left<right:\n            if left%2==0:\n                ret = self.seg_func(ret, self.node[left])\n                left+=1\n            if right%2==0:\n                right-=1\n                ret = self.seg_func(ret, self.node[right])\n            left=int(left//2)\n            right=int(right//2)\n        return ret\n\ndef plus(a,b):\n    return a+b\n\nclass Solution:\n    def countOfPeaks(self, nums: List[int], queries: List[List[int]]) -> List[int]:\n        n=len(nums)\n        peaks=[0]*n\n        for i in range(1,n-1):\n            if nums[i-1]<nums[i] and nums[i+1]<nums[i]:\n                peaks[i]=1\n        tree=SegmentTree(peaks,plus,0)\n        rets=[]\n        #print(peaks)\n        for t,a,b in queries:\n            if t==1:\n                rets.append(tree.query(a+1,b))\n            else:\n                nums[a]=b\n                for i in [a-1,a,a+1]:\n                    if 1<=i<n-1:\n                        if nums[i-1]<nums[i] and nums[i+1]<nums[i]:\n                            peaks[i]=1\n                            tree.update(i,1)\n                        else:\n                            peaks[i]=0\n                            tree.update(i,0)\n            #print(peaks, nums)\n        return rets",
    "submit_ts": "1718507358",
    "subm_id": "1289649068"
}