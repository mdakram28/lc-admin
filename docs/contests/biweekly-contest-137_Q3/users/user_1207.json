{
    "username": "Ankit Kumar",
    "submission": "#define ll long long\n#define ppi pair<int, int>\n#define ff first\n#define ss second\nclass Solution {\npublic:\n\n    long long maximumValueSum(vector<vector<int>>& board) {\n        ll maxm= 0LL + board[0][0] + board[1][1] + board[2][2];\n        // return maxm;\n        int n=board.size();\n        int m=board[0].size();\n\n\n        // store all elements and sort\n        vector<pair<int, ppi>> vec; // {cal, {i,j}}\n        for(int i=0;i<n;i++) {\n            for(int j=0;j<m;j++) {\n                vec.push_back({board[i][j],{i,j}});\n            }\n        }\n\n        sort(vec.begin(), vec.end(), greater<pair<int, ppi>>());\n\n        // start from last and try at most 3*(n+m) combos\n        int sz = vec.size();\n        int idx = sz-1;\n\n        int totry = 2*(n+m)+10;\n        vector<bool> row(n,0), col(m,0);\n        for(int i=0;i<sz && i<totry; i++) {\n            for(int j=0; j<sz && j<totry;j++) {\n                for(int k=0;k<sz && k<totry; k++) {\n                    // see if this is possible answer\n                    ppi idx1 = vec[i].ss;\n                    ppi idx2 = vec[j].ss;\n                    ppi idx3 = vec[k].ss;\n\n                    if(idx1.ff == idx2.ff || idx2.ff == idx3.ff || idx3.ff == idx1.ff) {\n                        continue;\n                    }\n\n                    if(idx1.ss == idx2.ss || idx2.ss == idx3.ss || idx3.ss == idx1.ss) {\n                        continue;\n                    }\n\n                    maxm = max(maxm, 0LL+vec[i].ff+vec[j].ff+vec[k].ff);\n                }\n            }\n        }\n\n        return maxm;\n    }\n};",
    "submit_ts": "1723910191",
    "subm_id": "1359220758"
}