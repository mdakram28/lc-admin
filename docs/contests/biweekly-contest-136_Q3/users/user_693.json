{
    "username": "Zakaria-Arshad",
    "submission": "class Solution:\n    def minFlips(self, grid: List[List[int]]) -> int:\n        rows, cols = len(grid), len(grid[0])\n        # treat every node as a corner of a box\n        # need a top barrier, bottom barrier, left barrier, right barrier\n        # runs while top < bottom\n        # move left and right inward until left > right\n        # deal with middle column and middle row if necessary at end\n        top, bottom = 0, rows - 1\n        ans = 0\n        while top < bottom:\n            left, right = 0, cols - 1\n            while left < right:\n                top_left, top_right, bottom_left, bottom_right = grid[top][left], grid[top][right], grid[bottom][left], grid[bottom][right]\n                curr_total = top_left + top_right + bottom_left + bottom_right\n                ans += min(4 - curr_total, 4 - (4 - curr_total))\n                left, right = left + 1, right - 1\n            top += 1\n            bottom -= 1\n        # handling middle row and col as needed\n        # very middle always needs to be a 0\n        # count how many 1 pairs we have, and how many mismatched pairs we have for both row and col\n        ones_pairs, zeros_pairs, mismatched_pairs = 0, 0, 0\n        if rows % 2 != 0:\n            middle_row = rows // 2\n            left, right = 0, cols - 1\n            while left < right:\n                if grid[middle_row][left] == 1 and grid[middle_row][right] == 1:\n                    ones_pairs += 1\n                elif grid[middle_row][left] != grid[middle_row][right]:\n                    mismatched_pairs += 1\n                else:\n                    zeros_pairs += 1\n                left += 1\n                right -= 1\n        if cols % 2 != 0:\n            middle_col = cols // 2\n            top, bottom = 0, rows - 1\n            while top < bottom:\n                if grid[top][middle_col] == 1 and grid[bottom][middle_col] == 1:\n                    ones_pairs += 1\n                elif grid[top][middle_col] != grid[bottom][middle_col]:\n                    mismatched_pairs += 1\n                else:\n                    zeros_pairs += 1\n                top += 1\n                bottom -= 1 \n        if rows % 2 != 0 and cols % 2 != 0:\n            middle_row, middle_col = rows // 2, cols // 2\n            ans += grid[middle_row][middle_col]\n        curr_ones = ones_pairs * 2 # only counts 1s in pairs\n        if curr_ones % 4 == 0 or mismatched_pairs > 0: # either we're good to go, or we need to use one mismatched pair to get to divisble by 4\n            ans += mismatched_pairs\n        else:\n            ans += 2\n        return ans\n            \n\n\n\n\n        \n\n            \n\n        \n",
    "submit_ts": "1722698179",
    "subm_id": "1343172311"
}