{
    "username": "Dinesh_k40",
    "submission": "class Solution {\n    public long minimumCost(int m, int n, int[] horizontalCut, int[] verticalCut) {\n        int hparts = 1, vparts = 1;\n        \n        PriorityQueue<int[]> pq = new PriorityQueue<>((a, b) -> {\n            return b[0] - a[0];\n        });\n        \n        for(int i = 0; i<m-1; i++){\n            pq.add(new int[]{horizontalCut[i], 0});\n        }\n        \n        for(int i = 0; i<n-1; i++){\n            pq.add(new int[]{verticalCut[i], 1});\n        }\n        \n        long cost = 0;\n        \n        while(!pq.isEmpty()){\n            int[] cut = pq.remove();\n            \n            if(cut[1] == 0){\n                cost += hparts * cut[0];\n                vparts++;\n                \n            }else if(cut[1] == 1){\n                cost += vparts * cut[0];\n                hparts++;\n            }\n        }\n        \n        return cost;\n    }\n}",
    "submit_ts": "1720926103",
    "subm_id": "1320276072"
}