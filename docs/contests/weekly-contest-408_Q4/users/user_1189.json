{
    "username": "tw1n_k0i",
    "submission": "import math\nfrom collections import defaultdict\n\nclass Solution:\n    def canReachCorner(self, X: int, Y: int, circles: List[List[int]]) -> bool:\n        def distance(x1, y1, x2, y2):\n            return math.sqrt((x1-x2)*(x1-x2) + (y1-y2)*(y1-y2))\n        \n        for xi, yi, ri in circles:\n            if distance(xi,yi,0,0) <= ri:\n                return False\n            if distance(xi,yi,X,Y) <= ri:\n                return False\n            if (xi <= ri or (Y-yi) <= ri) and ((X-xi) <= ri or yi <= ri):\n                return False\n        \n        left_circles = []\n        right_circles = []\n        for xi, yi, ri in circles:\n            if xi <= ri or (Y-yi) <= ri:\n                left_circles.append((xi, yi, ri))\n            if (X-xi) <= ri or yi <= ri:\n                right_circles.append((xi, yi, ri))\n\n        graph = defaultdict(list)\n        for xi, yi, ri in circles:\n            for xj, yj, rj in circles:\n                if distance(xi,yi,xj,yj) <= ri+rj:\n                    graph[(xi, yi, ri)].append((xj, yj, rj))\n                    graph[(xj, yj, rj)].append((xi, yi, ri))\n\n        right_circles = set(right_circles)\n        for xi, yi, ri in left_circles:\n            stack = [(xi, yi, ri)]\n            visited = set(stack)\n            while stack:\n                xj, yj, rj = stack.pop()\n                for xk, yk, rk in graph[(xj, yj, rj)]:\n                    if (xk, yk, rk) in right_circles:\n                        return False\n                    if (xk, yk, rk) not in visited:\n                        stack.append((xk, yk, rk))\n                        visited.add((xk, yk, rk))\n        return True",
    "submit_ts": "1722138892",
    "subm_id": "1335802366"
}