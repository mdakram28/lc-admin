{
    "username": "sohelH",
    "submission": "struct Node {\n    int val;\n    int idx;\n};\n\nbool cmp(const Node &node1, const Node &node2) {\n    if (node1.val != node2.val) return node1.val < node2.val;\n    return node1.idx < node2.idx;\n}\n\nclass Solution {\npublic:\n    int minimumDistance(vector<vector<int>>& points) {\n        vector<Node> S, D;\n        int cnt = 0;\n        for (vector<int> v: points) {\n            Node node;\n            node.val = v[0] + v[1];\n            node.idx = cnt;\n            S.push_back(node);\n            node.val = v[0] - v[1];\n            D.push_back(node);\n            cnt++;\n        }\n        sort(S.begin(), S.end(), cmp);\n        sort(D.begin(), D.end(), cmp);\n        int res = 1e9;\n        set<int> st;\n        for (int i = 0; i < 2; i++) {\n            st.insert(S[i].idx);\n            st.insert(S[S.size() - i - 1].idx);\n            st.insert(D[i].idx);\n            st.insert(D[D.size() - i - 1].idx);\n        }\n        \n        for (int x: st) {\n            int start, end;\n            start = 0;\n            end = S.size() - 1;\n            if (S[start].idx == x) start++;\n            if (S[end].idx == x) end--;\n            int can = S[end].val - S[start].val;\n            \n            start = 0;\n            end = D.size() - 1;\n            if (D[start].idx == x) start++;\n            if (D[end].idx == x) end--;\n            int can2 = D[end].val - D[start].val;\n            \n            can = max(can, can2);\n            res = min(res, can);\n        }\n        return res;\n        \n    }\n};"
}