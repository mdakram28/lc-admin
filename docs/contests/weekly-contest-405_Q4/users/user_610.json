{
    "username": "aaradhya_sangal",
    "submission": "class TrieNode {\npublic:\n    unordered_map<char, TrieNode*> children;\n    vector<pair<int, int>> word_ends; // Stores (index, cost)\n\n    TrieNode() {}\n};\n\nclass Trie {\npublic:\n    TrieNode* root;\n\n    Trie() {\n        root = new TrieNode();\n    }\n\n    void insert(const string& word, int index, int cost) {\n        TrieNode* node = root;\n        for (char c : word) {\n            if (node->children.find(c) == node->children.end()) {\n                node->children[c] = new TrieNode();\n            }\n            node = node->children[c];\n        }\n        node->word_ends.push_back({index, cost});\n    }\n};\n\nclass Solution {\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int n = target.size();\n        vector<int> dp(n + 1, numeric_limits<int>::max());\n        dp[0] = 0;\n\n        Trie trie;\n        for (int i = 0; i < words.size(); ++i) {\n            trie.insert(words[i], i, costs[i]);\n        }\n\n        for (int i = 0; i < n; ++i) {\n            if (dp[i] == numeric_limits<int>::max()) {\n                continue;\n            }\n\n            TrieNode* node = trie.root;\n            for (int j = i; j < n; ++j) {\n                if (node->children.find(target[j]) == node->children.end()) {\n                    break;\n                }\n                node = node->children[target[j]];\n                for (auto& entry : node->word_ends) {\n                    int word_index = entry.first;\n                    int word_cost = entry.second;\n                    int word_len = words[word_index].size();\n                    if (i + word_len <= n) {\n                        dp[i + word_len] = min(dp[i + word_len], dp[i] + word_cost);\n                    }\n                }\n            }\n        }\n\n        return dp[n] != numeric_limits<int>::max() ? dp[n] : -1;\n    }\n};",
    "submit_ts": "1720322622",
    "subm_id": "1312354798"
}