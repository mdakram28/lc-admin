{
    "username": "RohanBhardwaj08",
    "submission": "class Solution {\npublic:\n    const int mod = 1000000007;\n    \n    int countOfPairs(vector<int>& nums) {\n        int n = nums.size();\n        int maxNum = *max_element(nums.begin(), nums.end());\n        vector<vector<long>> dp(maxNum + 1, vector<long>(n + 1, 0));\n        vector<long> prefixSum(maxNum + 2, 0);\n        \n        // Base case: when idx == n\n        for (int last = 0; last <= maxNum; last++) {\n            dp[last][n] = 1;\n        }\n        \n        // Fill the dp table\n        for (int idx = n - 1; idx >= 0; idx--) {\n            // Calculate prefix sum for the current column\n            prefixSum[0] = 0;\n            for (int i = 1; i <= maxNum + 1; i++) {\n                prefixSum[i] = (prefixSum[i-1] + dp[i-1][idx+1]) % mod;\n            }\n            \n            for (int last = 0; last <= maxNum; last++) {\n                if (idx == 0) {\n                    dp[last][idx] = prefixSum[nums[0] + 1];\n                } else {\n                    int l_inc = last;\n                    int l_dec = nums[idx - 1] - last;\n                    int start = max(l_inc, nums[idx] - l_dec);\n                    int end = nums[idx];\n                    \n                    if (start <= end) {\n                        dp[last][idx] = (prefixSum[end + 1] - prefixSum[start] + mod) % mod;\n                    } else {\n                        dp[last][idx] = 0;\n                    }\n                }\n            }\n        }\n        \n        return dp[0][0];\n    }\n};",
    "submit_ts": "1723347411",
    "subm_id": "1351598229"
}