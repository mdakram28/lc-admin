{
    "username": "user3744L",
    "submission": "class Solution {\npublic:\n    #define ll long long\n    class DSU {\n    public:\n        DSU(int n) : parent(n), rank(n, 0), touchesSide(n, vector<bool>(4, false)) {\n            for (int i = 0; i < n; ++i) {\n                parent[i] = i;\n            }\n        }\n\n        int find(int u) {\n            if (u != parent[u]) {\n                parent[u] = find(parent[u]);\n            }\n            return parent[u];\n        }\n\n        void unite(int u, int v) {\n            int pu = find(u);\n            int pv = find(v);\n            if (pu != pv) {\n                if (rank[pu] < rank[pv]) {\n                    parent[pu] = pv;\n                    for (int i = 0; i < 4; ++i) {\n                        touchesSide[pv][i] = touchesSide[pv][i] || touchesSide[pu][i];\n                    }\n                } else if (rank[pu] > rank[pv]) {\n                    parent[pv] = pu;\n                    for (int i = 0; i < 4; ++i) {\n                        touchesSide[pu][i] = touchesSide[pu][i] || touchesSide[pv][i];\n                    }\n                } else {\n                    parent[pv] = pu;\n                    for (int i = 0; i < 4; ++i) {\n                        touchesSide[pu][i] = touchesSide[pu][i] || touchesSide[pv][i];\n                    }\n                    rank[pu]++;\n                }\n            }\n        }\n\n        void setTouch(int u, int side) {\n            int pu = find(u);\n            touchesSide[pu][side] = true;\n        }\n\n        bool isBlocked() {\n            for (int i = 0; i < parent.size(); ++i) {\n                int p = find(i);\n                if ((touchesSide[p][0] && touchesSide[p][1]) || (touchesSide[p][2] && touchesSide[p][3]) || (touchesSide[p][1] && touchesSide[p][3]) || (touchesSide[p][0] && touchesSide[p][2])) {\n                    return true;\n                }\n            }\n            return false;\n        }\n\n    private:\n        vector<int> parent;\n        vector<int> rank;\n        vector<vector<bool>> touchesSide; // tracks if a component touches a side of the rectangle\n    };\n\n    double distance(double x1, double y1, double x2, double y2) {\n        return sqrt(pow(x1 - x2, 2) + pow(y1 - y2, 2));\n    }\n\n    // Function to check if two circles are connected\n    bool areCirclesConnected(int x1, int y1, int r1, int x2, int y2, int r2) {\n        return distance(x1, y1, x2, y2) <= (r1 + r2);\n    }\n\n    // Function to check if a circle intersects a line\n    bool doesCircleIntersectLine(ll cx, ll cy, ll r, ll x1, ll y1, ll x2, ll y2) {\n        double a = y2 - y1;\n        double b = x1 - x2;\n        double c = x2 * y1 - x1 * y2;\n        double dist = abs(a * cx + b * cy + c) / sqrt(a * a + b * b);\n        return dist <= r;\n    }\n\n    bool canReachCorner(int X, int Y, vector<vector<int>>& circles) {\n        int n = circles.size();\n        DSU dsu(n);\n\n        for (int i = 0; i < n; ++i) {\n            int cx = circles[i][0], cy = circles[i][1], r = circles[i][2];\n\n            if (doesCircleIntersectLine(cx, cy, r, 0, 0, 0, Y)) {\n                dsu.setTouch(i, 0); // Left side (AC)\n            }\n            if (doesCircleIntersectLine(cx, cy, r, X, 0, X, Y)) {\n                dsu.setTouch(i, 1); // Right side (BD)\n            }\n            if (doesCircleIntersectLine(cx, cy, r, 0, 0, X, 0)) {\n                dsu.setTouch(i, 2); // Bottom side (AB)\n            }\n            if (doesCircleIntersectLine(cx, cy, r, 0, Y, X, Y)) {\n                dsu.setTouch(i, 3); // Top side (CD)\n            }\n\n            for (int j = 0; j < i; ++j) {\n                if (areCirclesConnected(cx, cy, r, circles[j][0], circles[j][1], circles[j][2])) {\n                    dsu.unite(i, j);\n                }\n            }\n        }\n\n        return !dsu.isBlocked();\n    }\n};",
    "submit_ts": "1722138769",
    "subm_id": "1335799167"
}