{
    "username": "Chiu",
    "submission": "class Solution {\npublic:    \n    vector<long long> countKConstraintSubstrings(string s, int k, vector<vector<int>>& queries) {\n        vector<long long> res;\n        vector<pair<long long, int>> dp(s.length());\n        solve(s, k, dp);\n        for (auto q : queries) {\n            if (q[0] == 0) {\n                res.push_back(dp[q[1]].first);\n            }\n            else {\n                long long cur = dp[q[1]].first - dp[q[0]-1].first;\n                for (int i=q[0]; i<=q[1]; i++) {\n                    if (dp[i].second >= q[0]) {\n                        break;\n                    }\n                    cur -= (q[0]-dp[i].second);\n                }\n                res.push_back(cur);\n            }\n        }\n        return res;\n    }\n\n    void solve(string &s, int k, vector<pair<long long, int>> &dp) {\n        long long count = 0;\n        int l, r, ones, zeros;\n        l = r = ones = zeros = 0;\n        while (r<s.length()) {\n            if (s[r] == '1') {\n                ones++;\n            }\n            else {\n                zeros++;\n            }\n            while (ones > k && zeros > k) {\n                if (s[l++] == '1') {\n                    ones--;\n                }\n                else {\n                    zeros--;\n                }\n            }\n            dp[r].first = count += r-l+1;\n            dp[r].second = l;\n            r++;\n        }        \n    }\n};",
    "submit_ts": "1723952795",
    "subm_id": "1359804823"
}