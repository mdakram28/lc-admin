{
    "username": "Rad0miR",
    "submission": "public class Solution {\n    public bool CanReachCorner(int X, int Y, int[][] circles) \n    {\n        int n = circles.Length + 2;\n        int start = n - 1, finish = n - 2;\n        List<int>[] gr = Enumerable.Range(0, n).Select(i => new List<int>()).ToArray();\n        \n        for (int i = 0; i < circles.Length; ++i) \n        {\n            for (int j = i + 1; j < circles.Length; ++j) \n            {\n                if (Dist(circles[i], circles[j])) \n                {\n                    gr[i].Add(j);\n                    gr[j].Add(i);\n                }\n                \n                bool Dist(int[] c1, int[] c2) \n                {\n                    long dx = (c1[0] - c2[0]), dy = (c1[1] - c2[1]), rs = (c1[2] + c2[2]);\n                    return dx * dx + dy * dy <= rs * rs;\n                }\n            }\n            \n            if (circles[i][2] >= circles[i][0] || Y - circles[i][2] <= circles[i][1]) \n            {\n                gr[i].Add(start);\n                gr[start].Add(i);\n            }\n            \n            if (circles[i][2] >= circles[i][1] || X - circles[i][2] <= circles[i][0]) \n            {\n                gr[i].Add(finish);\n                gr[finish].Add(i);\n            }\n        }\n        \n        bool[] used = new bool[n];\n        return !Dfs(start);\n        \n        bool Dfs(int v) \n        {\n            if (v == finish) return true;\n            if (used[v]) return false;\n            used[v] = true;\n            return gr[v].Any(u => Dfs(u));\n        }\n    }\n}",
    "submit_ts": "1722136035",
    "subm_id": "1335721679"
}