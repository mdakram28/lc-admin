{
    "username": "mrdhrumil2002",
    "submission": "class TrieNode {\npublic:\n    vector<TrieNode*> childN;\n    int minCost;\n    \n    TrieNode() : childN(26, nullptr), minCost(INT_MAX) {}\n};\nclass Solution {\n    void insertWord(TrieNode* root, const string& word, int cost) {\n        TrieNode* node = root;\n        for (char c : word) {\n            if (!node->childN[c - 'a']) {\n                node->childN[c - 'a'] = new TrieNode();\n            }\n            node = node->childN[c - 'a'];\n        }\n        node->minCost = min(node->minCost, cost);\n    }\n\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int n = target.size();\n        vector<long long> dp(n + 1, LLONG_MAX);\n        dp[0] = 0;\n\n        // Build trie\n        TrieNode* root = new TrieNode();\n        for (int i = 0; i < words.size(); ++i) {\n            insertWord(root, words[i], costs[i]);\n        }\n\n        for (int i = 0; i < n; ++i) {\n            if (dp[i] == LLONG_MAX)\n                continue;\n\n            TrieNode* node = root;\n            for (int j = i; j < n; ++j) {\n                if (!node->childN[target[j] - 'a'])\n                    break;\n                node = node->childN[target[j] - 'a'];\n                if (node->minCost != INT_MAX && dp[i] != LLONG_MAX) {\n                    dp[j + 1] = min(dp[j + 1], dp[i] + node->minCost);\n                }\n            }\n        }\n\n        return dp[n] != LLONG_MAX ? dp[n] : -1;\n    }\n};",
    "submit_ts": "1720323123",
    "subm_id": "1312367833"
}