{
    "username": "Wei Liu",
    "submission": "class Solution {\n\n\n    private int[] values = new int[100010];\n    private int[][] dp = new int[50010][10];\n\n    public String largestPalindrome(int n, int k) {\n        if (n == 1) {\n            for (int i = 9;i >= 1;i --) {\n                if (i % k == 0) {\n                    return Integer.toString(i);\n                }\n            }\n            return \"\";\n        } else {\n            // build values\n            values[0] = 1;\n            for (int i = 1;i < n;i ++) {\n                values[i] = (values[i - 1] * 10) % k;\n            }\n            // build weights\n            List<Integer> weights = new ArrayList<>();\n            for (int i = 0;i < n / 2;i ++) {\n                int tmp = (values[i] + values[n - i - 1]) % k;\n                weights.add(tmp);\n            }\n            if (n % 2 == 1) {\n                weights.add(values[n / 2] % k);\n            }\n            // dp from last\n            for (int i = 0;i < 10;i ++) {\n                dp[weights.size()][i] = - 1;\n            }\n            dp[weights.size()][0] = 0;\n            for (int i = weights.size() - 1;i >= 0;i --) {\n                int start = 0;\n                if (i == 0) {\n                    start = 1;\n                }\n                if (i == weights.size() - 1) {\n                    for (int j = start;j < 10;j ++) {\n                        int value = (weights.get(i) * j) % k;\n                        dp[i][value] = 1;\n                    }\n                } else {\n                    // current digit\n                    for (int j = start;j < 10;j ++) {\n                        // next mod\n                        for (int mod = 0;mod < 10;mod ++) {\n                            int nextMod = (mod + weights.get(i) * j) % k;\n                            if (dp[i + 1][mod] > 0) {\n                                dp[i][nextMod] = Math.max(dp[i][nextMod], dp[i + 1][mod] + 1);\n                            }\n                        }\n                    }\n                }\n            }\n            // build result\n            int curMod = 0;\n            StringBuilder builder = new StringBuilder();\n            for (int i = 0;i < weights.size();i ++) {\n                for (int j = 9;j >= 0;j --) {\n                    int nextMod = (curMod - ((weights.get(i) * j) % k) + k) % k;\n                    if (dp[i][curMod] == dp[i + 1][nextMod] + 1) {\n                        builder.append(j);\n                        curMod = nextMod;\n                        break;\n                    }\n                }\n            }\n            String string = builder.toString();\n            if (n % 2 == 1) {\n                for (int i = string.length() - 2;i >= 0;i --) {\n                    builder.append(string.charAt(i));\n                }\n            } else {\n                builder.append(new StringBuilder(string).reverse());\n            }\n            return builder.toString();\n        }\n    }\n\n\n}",
    "submit_ts": "1723950780",
    "subm_id": "1359754849"
}