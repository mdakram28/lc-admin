{
    "username": "sveng101",
    "submission": "class Solution:\n    def minimumDifference(self, nums: List[int], k: int) -> int:\n        \n        \n        \"\"\"\n        k_bits = set()\n        plc = 0\n        k2 = k\n        while k2:\n            if k2 & 1:\n                k_bits.add(plc)\n            k2 >>= 1\n            plc += 1\n        print(k_bits)\n        mx_k_bit = max(k_bits)\n        \"\"\"\n        first_dict = {}\n        res = float(\"inf\")\n        for i, num in enumerate(nums):\n            num2 = num\n            plc = 0\n            prev_first_dict = first_dict\n            first_dict = {}\n            while num2:\n                if num2 & 1:\n                    first_dict[plc] = prev_first_dict.get(plc, i)\n                num2 >>= 1\n                plc += 1\n            minus_dict = {}\n            for plc, idx in first_dict.items():\n                minus_dict.setdefault(idx, 0)\n                minus_dict[idx] += 1 << plc\n            #print(i, num, first_dict, minus_dict)\n            curr = num\n            if curr < k:\n                res = min(res, abs(curr - k))\n                continue\n            inds = sorted(minus_dict.keys())\n            for j in reversed(range(inds[0] == 0, len(inds))):\n                idx = inds[j]\n                if not idx: break\n                prev = curr\n                curr = prev - minus_dict[idx]\n                if curr < k:\n                    res = min(res, abs(curr - k), abs(prev - k))\n                    break\n            else: res = min(res, abs(curr - k))\n        return res",
    "submit_ts": 1717299908.0
}