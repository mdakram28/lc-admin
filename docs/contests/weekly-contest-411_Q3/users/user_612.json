{
    "username": "Darwin-Che",
    "submission": "impl Solution {\n    pub fn largest_palindrome(n: i32, k: i32) -> String {\n        let n = n as usize;\n        match k {\n            1 | 3 | 9 => {\n                return \"9\".repeat(n);\n            },\n            2 => {\n                if n == 1 {\n                    return \"8\".to_string();\n                }\n                return format!(\"8{}8\", \"9\".repeat(n-2));\n            },\n            4 => {\n                if n == 1 {\n                    return \"8\".to_string();\n                } else if n == 2 {\n                    return \"88\".to_string();\n                } else if n == 3 {\n                    return \"888\".to_string();\n                }\n                return format!(\"88{}88\", \"9\".repeat(n-4));\n            },\n            5 => {\n                if n == 1 {\n                    return \"5\".to_string();\n                }\n                return format!(\"5{}5\", \"9\".repeat(n-2));\n            },\n            6 => {\n                if n == 1 {\n                    return \"6\".to_string();\n                } else if n == 2 {\n                    return \"66\".to_string();\n                } else if n == 3 {\n                    return \"888\".to_string();\n                }\n                let mut remainder = 8 + 8 + 9 * (n-2);\n                remainder %= 3;\n                if remainder == 0 {\n                    return format!(\"8{}8\", \"9\".repeat(n-2));\n                } else if remainder == 1 {\n                    if n % 2 == 0 {\n                        let m = (n-2) / 2;\n                        return format!(\"8{}77{}8\", \"9\".repeat(m - 1),\"9\".repeat(m - 1));\n                    } else {\n                        let m = (n-2) / 2;\n                        return format!(\"8{}8{}8\", \"9\".repeat(m),\"9\".repeat(m));\n                    }\n                } else if remainder == 2 {\n                    if n % 2 == 0 {\n                        let m = (n-2) / 2;\n                        return format!(\"8{}88{}8\", \"9\".repeat(m-1),\"9\".repeat(m-1));\n                    } else {\n                        let m = (n-2) / 2;\n                        return format!(\"8{}7{}8\", \"9\".repeat(m),\"9\".repeat(m));\n                    }\n                }\n            },\n            7 => {\n                if n == 1 {\n                    return \"7\".to_string();\n                } else if n == 2 {\n                    return \"77\".to_string();\n                }\n                if n % 2 == 0 {\n                    let mut m1 = n / 2 - 1;\n                    let mut m1_mod = 0;\n                    let mut m2_mod = 0;\n                    let mut m2 = n / 2;\n                    let mut last_mod = 0;\n                    let mut total_mod = 0;\n                    for i in 0..n {\n                        let this_mod = if i == 0 {\n                            1\n                        } else {\n                            (last_mod * 10) % 7\n                        };\n                        if i == m1 {\n                            m1_mod = this_mod;\n                        }\n                        if i == m2 {\n                            m2_mod = this_mod;\n                        }\n                        total_mod += this_mod * 9;\n                        total_mod %= 7;\n                        last_mod = this_mod;\n                    }\n\n                    let m_mod = (m1_mod + m2_mod) % 7;\n                    for i in 0..9 {\n                        if (total_mod + (7 - m_mod) * i) % 7 == 0 {\n                            return format!(\"{}{}{}\",\n                            \"9\".repeat(m1),\n                            (9-i).to_string().repeat(2),\n                            \"9\".repeat(m1));\n                        }\n                    }\n\n                    panic!(\"cannot find for 7, %2 = 0\");\n                } else {\n                    let m = n / 2;\n                    let mut m_mod = 0;\n                    let mut last_mod = 0;\n                    let mut total_mod = 0;\n                    for i in 0..n {\n                        let this_mod = if i == 0 {\n                            1\n                        } else {\n                            (last_mod * 10) % 7\n                        };\n                        if i == m {\n                            m_mod = this_mod;\n                        }\n                        total_mod += this_mod * 9;\n                        total_mod %= 7;\n                        last_mod = this_mod;\n                    }\n\n                    for i in 0..9 {\n                        if (total_mod + (7 - m_mod) * i) % 7 == 0 {\n                            return format!(\"{}{}{}\",\n                            \"9\".repeat(m),\n                            (9-i).to_string(),\n                            \"9\".repeat(m));\n                        }\n                    }\n\n                    panic!(\"cannot find for 7, %2 = 1\");\n                }\n            },\n            8 => {\n                if n <= 6 {\n                    return \"8\".repeat(n);\n                }\n                return format!(\"888{}888\", \"9\".repeat(n-6));\n            },\n            _ => {\n                panic!(\"unhandled k\");\n            }\n        }\n\n        panic!(\"end of program\")\n    }\n}",
    "submit_ts": "1723953483",
    "subm_id": "1359822482"
}