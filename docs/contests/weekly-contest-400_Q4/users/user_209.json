{
    "username": "harshit_08",
    "submission": "\nusing namespace std;\n\n#define MAX_VALUE INT32_MAX\n\nclass RangeSumTree {\npublic:\n  vector<int> data;\n  int size;\n\n  RangeSumTree(vector<int>& arr) {\n    size = arr.size();\n    data.resize(4 * size);\n    build(arr, 0, 0, size - 1);\n  }\n\n  void build(vector<int>& arr, int node, int start, int end) {\n    if (start == end) {\n      data[node] = arr[start];\n    } else {\n      int mid = (start + end) / 2;\n      build(arr, 2 * node + 1, start, mid);\n      build(arr, 2 * node + 2, mid + 1, end);\n\n      data[node] = data[2 * node + 1] & data[2 * node + 2];\n    }\n  }\n\n  int query(int left, int right) {\n    return query(0, 0, size - 1, left, right);\n  }\n\n  int query(int node, int start, int end, int left, int right) {\n    if (right < start || end < left) {\n      return MAX_VALUE;\n    }\n    if (left <= start && end <= right) {\n      return data[node];\n    }\n    int mid = (start + end) / 2;\n    int leftSum = query(2 * node + 1, start, mid, left, right);\n    int rightSum = query(2 * node + 2, mid + 1, end, left, right);\n    return leftSum & rightSum;\n  }\n};\n\nclass Solution {\npublic:\n  int minimumDifference(vector<int>& arr, int target) {\n    int n = arr.size();\n    RangeSumTree rangeSumTree(arr);\n    int minDiff = MAX_VALUE;\n    for (int i = 0; i < n; i++) {\n      int left = i - 1, right = n - 1, mid;\n\n      while (right - left > 1) {\n        mid = (left + right) / 2;\n        if (rangeSumTree.query(i, mid) >= target) {\n          left = mid;\n        } else {\n          right = mid;\n        }\n      }\n      if (left != i - 1) {\n        minDiff = min(minDiff, abs(rangeSumTree.query(i, left) - target));\n      }\n      minDiff = min(minDiff, abs(target - rangeSumTree.query(i, right)));\n    }\n    return minDiff;\n  }\n};\n",
    "submit_ts": 1717297823.0
}