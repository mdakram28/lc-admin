{
    "username": "SpellMyName",
    "submission": "class Solution {\npublic:\n    int minChanges(vector<int>& nums, int k) {\n        map<int, vector<int>> diffToX;\n        vector<int> maxValues;\n        \n        int n = nums.size();\n        int halfSize = n / 2;\n\n        for (int i = 0; i < halfSize; ++i) {\n            int start = nums[i];\n            int end = nums[n - i - 1];\n            int diff = abs(start - end);\n            int maxValue = max({start, end, k - start, k - end});\n            \n            diffToX[diff].push_back(maxValue);\n            maxValues.push_back(maxValue);\n        }\n\n        int minimumChanges = n;\n        sort(maxValues.begin(), maxValues.end());\n\n        for (const auto& entry : diffToX) {\n            int currentDiff = entry.first;\n            int adjustmentsNeeded = lower_bound(maxValues.begin(), maxValues.end(), currentDiff) - maxValues.begin();\n            adjustmentsNeeded = adjustmentsNeeded * 2 + (halfSize - adjustmentsNeeded);\n\n            for (int value : entry.second) {\n                if (value < currentDiff) {\n                    adjustmentsNeeded -= 2;\n                } else {\n                    adjustmentsNeeded -= 1;\n                }\n            }\n\n            minimumChanges = min(minimumChanges, adjustmentsNeeded);\n        }\n\n        return minimumChanges;\n    }\n};",
    "submit_ts": "1721489466",
    "subm_id": "1327454102"
}