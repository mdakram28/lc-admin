{
    "username": "amanlearnscode",
    "submission": "/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number}\n */\nvar minChanges = function (nums, k) {\n    const diffMap = new Map();\n    const maxDiffs = [];\n    const halfSize = Math.floor(nums.length / 2);\n\n    for (let i = 0; i < halfSize; i++) {\n        const leftNum = nums[i];\n        const rightNum = nums[nums.length - i - 1];\n        const diff = Math.abs(leftNum - rightNum);\n        const maxDiff = Math.max(leftNum, rightNum, k - leftNum, k - rightNum);\n        if (!diffMap.has(diff)) {\n            diffMap.set(diff, []);\n        }\n        diffMap.get(diff).push(maxDiff);\n        maxDiffs.push(maxDiff);\n    }\n\n    let minChanges = nums.length;\n    maxDiffs.sort((a, b) => a - b);\n\n    for (const [diff, values] of diffMap) {\n        let changesCount = binarySearch(maxDiffs, diff);\n        changesCount = changesCount * 2 + (halfSize - changesCount);\n\n        for (const maxDiff of values) {\n            if (maxDiff < diff) {\n                changesCount -= 2;\n            } else {\n                changesCount -= 1;\n            }\n        }\n\n        minChanges = Math.min(minChanges, changesCount);\n    }\n\n    return minChanges;\n};\n\nvar binarySearch = function (arr, target) {\n    let left = 0;\n    let right = arr.length;\n\n    while (left < right) {\n        const mid = left + Math.floor((right - left) / 2);\n        if (arr[mid] < target) {\n            left = mid + 1;\n        } else {\n            right = mid;\n        }\n    }\n\n    return left;\n}",
    "submit_ts": "1721490079",
    "subm_id": "1327472421"
}