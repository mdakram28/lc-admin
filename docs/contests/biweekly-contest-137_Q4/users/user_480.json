{
    "username": "nedmv",
    "submission": "class Solution {\n    vector<pair<int, int>> find_best_choices(const vector<int> &v) {\n        vector<pair<int, int>> ans(3, {INT_MIN, 0});\n        for (int i = 0; i < v.size(); ++i) {\n            int cur = v[i];\n            if (cur > ans[0].first) {\n                ans[2] = ans[1];\n                ans[1] = ans[0];\n                ans[0].first = cur;\n                ans[0].second = i;\n            } else if (cur > ans[1].first) {\n                ans[2] = ans[1];\n                ans[1].first = cur;\n                ans[1].second = i;\n            } else if (cur > ans[2].first) {\n                ans[2].first = cur;\n                ans[2].second = i;\n            }\n        }\n        return ans;\n    }\npublic:\n    long long maximumValueSum(vector<vector<int>>& board) {\n        int rows = board.size();\n        int cols = board[0].size();\n\n        struct Data {\n            int val;\n            int row;\n            int col;\n        };\n        vector<Data> data;\n        data.reserve(rows * 3);\n        for (int i = 0; i < rows; ++i) {\n            auto best_in_row = find_best_choices(board[i]);\n            for (auto &e: best_in_row) {\n                Data d;\n                d.row = i;\n                d.col = e.second;\n                d.val = e.first;\n                data.push_back(d);\n            }\n        }\n        sort(data.begin(), data.end(), [](const auto &l, const auto &r){\n            return r.val < l.val;\n        });\n        int choices = data.size();\n\n        struct Candidate {\n            long long sum = 0;\n            int needs = 2;\n            int row1 = -1;\n            int row2 = -1;\n            int col1 = -1;\n            int col2 = -1;\n        };\n\n        vector<Candidate> candidates;\n        long long ans = LLONG_MIN;\n        for (int i = 0; i < choices; ++i) {\n            int val = data[i].val;\n            int row = data[i].row;\n            int col = data[i].col;\n            vector<Candidate> next;\n            for (auto &c: candidates) {\n                if (row == c.row1 || row == c.row2 || col == c.col1 || col == c.col2) {\n                    next.push_back(c);\n                    continue;\n                }\n                if (c.needs == 1) {\n                    ans = max(ans, c.sum + val);\n                    continue;\n                }\n                next.push_back(c);\n                c.sum += val;\n                c.needs -= 1;\n                c.row2 = row;\n                c.col2 = col;\n                next.push_back(c);\n            }\n            Candidate newest;\n            newest.sum = val;\n            newest.row1 = row;\n            newest.col1 = col;\n            next.push_back(newest);\n            sort(next.begin(), next.end(), [](const auto &l, const auto &r){\n                return r.sum < l.sum;\n            });\n            if (next.size() > 100) {\n                next.erase(next.begin()+100, next.end());\n            }\n            candidates = next;\n        \n            // for (auto &c: candidates) {\n            //     cout << c.sum << endl;\n            // }\n            // cout << endl;\n        }\n        return ans;\n        // long long ans = LLONG_MIN;\n        // for (int i = 0; i < choices; ++i) {\n        //     for (int j = i+1; j < choices; ++j) {\n        //         if (data[i].row == data[j].row || data[i].col == data[j].col) {\n        //             continue;\n        //         }\n        //         for (int k = j+1; k < choices; ++k) {\n        //             if (data[i].row == data[k].row || data[j].row == data[k].row ||\n        //                 data[i].col == data[k].col || data[j].col == data[k].col) {\n        //                     continue;\n        //                 }\n        //             long long cur = data[i].val;\n        //             cur += data[j].val;\n        //             cur += data[k].val;\n        //             ans = max(ans, cur);\n        //         }\n        //     }\n        // }\n        // return ans;\n    }\n};",
    "submit_ts": "1723910245",
    "subm_id": "1359222763"
}