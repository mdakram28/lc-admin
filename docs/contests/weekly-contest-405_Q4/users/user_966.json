{
    "username": "btufts8",
    "submission": "class TrieNode:\n    def __init__(self):\n        self.children = {}\n        self.cost = None\n\nclass Trie:\n    def __init__(self):\n        self.root = TrieNode()\n    def insert(self, word, cost):\n        node = self.root\n        for char in word:\n            if char not in node.children:\n                node.children[char] = TrieNode()\n            node = node.children[char]\n        if node.cost is None:\n            node.cost = cost\n        else:\n            node.cost = min(node.cost, cost)\n\nclass Solution:\n    def minimumCost(self, target: str, words: List[str], costs: List[int]) -> int:\n        n = len(target)\n        dp = [float('inf')] * (n+1)\n        dp[0] = 0\n\n        trie = Trie()\n        for word, cost in zip(words, costs):\n            trie.insert(word, cost)\n        \n        for i in range(n):\n            if dp[i] == float('inf'):\n                continue\n            node = trie.root\n            for j in range(i,n):\n                if target[j] not in node.children:\n                    break\n                node = node.children[target[j]]\n                if node.cost is not None:\n                    dp[j+1] = min(dp[j+1], dp[i]+node.cost)\n        return dp[n] if dp[n] != float('inf') else -1",
    "submit_ts": "1720321860",
    "subm_id": "1312334249"
}