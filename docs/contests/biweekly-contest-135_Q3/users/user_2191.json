{
    "username": "sonner",
    "submission": "from collections import defaultdict\nfrom typing import List, NamedTuple\nimport bisect\n\n\nclass Solution:\n    def minChanges(self, nums: List[int], k: int) -> int:\n        n = len(nums)\n\n        class Pair(NamedTuple):\n            x: int\n            y: int\n\n            def max_x_for_one_op(self) -> int:\n                return max(self.y, k - self.x)\n\n        pairs: list[Pair] = []\n\n        for i in range(n // 2):\n            x = nums[i]\n            y = nums[n - i - 1]\n            if x > y:\n                x, y = y, x\n            pairs.append(Pair(x, y))\n\n        pairs.sort(key=lambda p: p.max_x_for_one_op())\n\n        pair_dist_to_indexes: dict[int, list[int]] = defaultdict(list)\n        for pair_index, pair in enumerate(pairs):\n            pair_dist_to_indexes[pair.y - pair.x].append(pair_index)\n\n        result = 2_000_000_000\n\n        for X in list(pair_dist_to_indexes) + [0]:\n            X_indexes = pair_dist_to_indexes[X]\n            split_index = bisect.bisect_left(pairs, X, key=lambda p: p.max_x_for_one_op())\n            left_count = split_index\n            right_count = len(pairs) - split_index\n            for index in X_indexes:\n                if index < split_index:\n                    left_count -= 1\n                else:\n                    right_count -= 1\n\n            this_result = 2 * left_count + right_count\n            result = min(result, this_result)\n\n        return result",
    "submit_ts": "1721489915",
    "subm_id": "1327467565"
}