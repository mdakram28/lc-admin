{
    "username": "msa_tanzeel",
    "submission": "#define loopf(i, a, b) for (int i = a; i < b; i++)\n#define ll long long\n#define fast                          \\\n    ios_base::sync_with_stdio(false); \\\n    cin.tie(NULL);\n\n\nint compare(int &a, int &b)\n{\n    return (a&b);\n}\n\nclass RangeQueries\n{\npublic:\n    vector<vector<int>> sparse;\n    int n;\n    int logN;\n\n    RangeQueries(vector<int> &arr)\n    {\n        n = arr.size();\n        logN = ceil(log2(n));\n        sparse.resize(n, vector<int>(logN + 1, (1<<30)-1));\n\n\n        for (int i = 0; i < n; i++)\n        {\n            sparse[i][0] = arr[i];\n        }\n\n        for (int j = 1; j <= logN; j++)\n        {\n            for (int i = 0; i + (1 << (j - 1)) < n; i++)\n            {\n                sparse[i][j] = compare(sparse[i][j - 1], sparse[i + (1 << (j - 1))][j - 1]);\n            }\n        }\n    }\n\n    int query(int l, int r)\n    {\n        int len = (r - l + 1);\n        int power = 0;\n        while (1 << (power + 1) <= len)\n            power++;\n        return compare(sparse[l][power], sparse[r - (1 << power) + 1][power]);\n    }\n};\n\nclass Solution\n{\npublic:\n    long long countSubarrays(vector<int> &v, int k)\n    {\n        fast;\n        int n = v.size();\n        RangeQueries rangeQuerie(v);\n\n        ll ans = 0;\n        loopf(i, 0, n)\n        {\n            int l, r;\n            int low = -1, high = -1;\n\n            l = i, r = n - 1;\n\n            while (l <= r)\n            {\n                int mid = (l + r) / 2;\n                int curr = rangeQuerie.query(i, mid);\n                if (curr == k)\n                {\n                    low = mid;\n                    r = mid - 1;\n                }\n                else if (curr < k)\n                {\n                    r = mid - 1;\n                }\n                else\n                {\n                    l = mid + 1;\n                }\n            }\n\n            l = i;\n            r = n - 1;\n\n            while (l <= r)\n            {\n                int mid = (l + r) / 2;\n                int curr = rangeQuerie.query(i, mid);\n                if (curr == k)\n                {\n                    high = mid;\n                    l = mid + 1;\n                }\n                else if (curr < k)\n                {\n                    r = mid - 1;\n                }\n                else\n                {\n                    l = mid + 1;\n                }\n            }\n            \n            if (low == -1 || high == -1)\n                continue;\n            \n            ans += (high - low + 1);\n        }\n        return ans;\n    }\n};\n\n",
    "submit_ts": "1720278970",
    "subm_id": "1311731951"
}