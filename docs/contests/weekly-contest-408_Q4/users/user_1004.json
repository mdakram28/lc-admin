{
    "username": "Manu9084",
    "submission": "#include <vector>\n#include <queue>\n#include <cmath>\n\nusing namespace std;\nclass Solution {\npublic:\n    int performBFS(const vector<vector<int>>& adjList, int startNode, int grt1, int grt2, int totalNodes) {\n        queue<int> ueque;\n        vector<int> dekhliya(totalNodes + 4, 0);\n         bool angr=true;\n        ueque.push(startNode);\n        dekhliya[startNode] = 1;\n\n        while (!ueque.empty()) {\n            int NodeCur = ueque.front();\n            ueque.pop();\n            \n            for (int neighbor : adjList[NodeCur]) {\n                if (!dekhliya[neighbor]) {\n                    ueque.push(neighbor);\n                    dekhliya[neighbor] = 1;\n                }\n            }\n        }\n        return dekhliya[grt1] || dekhliya[grt2];\n    }\n    \n    bool canReachCorner(int width, int height, const vector<vector<int>>& crclDta) {\n        int numcrcl = crclDta.size();\n        int cdr=0;\n        vector<pair<pair<int, int>, int>> crcl(numcrcl);\n        vector<vector<int>> adjList(numcrcl + 4);\n\n        for (int i = 0; i < numcrcl; ++i) {\n            int x = crclDta[i][0];\n            int y = crclDta[i][1];\n            int r = crclDta[i][2];\n            crcl[i] = {{x, y}, r};\n        }\n        \n        for (int i = 0; i < numcrcl; ++i) {\n            int x1 = crcl[i].first.first;\n            int y1 = crcl[i].first.second;\n            int r1 = crcl[i].second;\n\n            if (x1 <= r1) {\n                adjList[numcrcl].push_back(i);\n                adjList[i].push_back(numcrcl);\n            }\n            if (width - x1 <= r1) {\n                adjList[numcrcl + 2].push_back(i);\n                adjList[i].push_back(numcrcl + 2);\n            }\n            if (y1 <= r1) {\n                adjList[numcrcl + 1].push_back(i);\n                adjList[i].push_back(numcrcl + 1);\n            }\n            if (height - y1 <= r1) {\n                adjList[numcrcl + 3].push_back(i);\n                adjList[i].push_back(numcrcl + 3);\n            }\n\n            for (int j = i + 1; j < numcrcl; ++j) {\n                int x2 = crcl[j].first.first;\n                int y2 = crcl[j].first.second;\n                int r2 = crcl[j].second;\n\n                double fss = sqrt(pow(x1 - x2, 2) + pow(y1 - y2, 2));\n                int cRD = r1 + r2;\n\n                if (fss <= cRD) {\n                    adjList[i].push_back(j);\n                    adjList[j].push_back(i);\n                }\n            }\n        }\n        int pBL = 0;\n        int cset=0;\n        pBL = max(pBL, performBFS(adjList, numcrcl, numcrcl + 1, numcrcl + 2, numcrcl + 4)); \n        pBL = max(pBL, performBFS(adjList, numcrcl + 3, numcrcl + 2, numcrcl + 1, numcrcl + 4));\n        \n        return pBL == 0;\n    }\n};\n",
    "submit_ts": "1722138978",
    "subm_id": "1335804599"
}