{
    "username": "William Zhou",
    "submission": "import math\nimport sys\n\nclass Solution:\n    def largestPalindrome(self, n: int, k: int) -> str:\n        sys.set_int_max_str_digits(1000000)\n        if k == 1 or k == 3 or k == 9:\n            return ''.join(['9'] * n)\n        if k == 2 or k == 4 or k == 8:\n            number_of_8s = round(math.log2(k))\n            if n <= number_of_8s * 2:\n                return ''.join(['8'] * n)\n            else:\n                return ''.join((['8'] * number_of_8s) + ['9'] * (n - number_of_8s * 2) + (['8'] * number_of_8s))\n        if k == 5:\n            if n <= 2:\n                return ''.join(['5'] * n)\n            else:\n                return ''.join(['5'] + ['9'] * (n-2) + ['5'])\n        if k == 6:\n            if n <= 2:\n                return ''.join(['6'] * n)\n            else:\n                if n % 2 == 0:\n                    # Even number of digits\n                    one_side = ['8'] + ['9'] * ((n//2) - 2) + ['7']\n                    other_side = list(reversed(one_side))\n                    return ''.join(one_side + other_side)\n                else:\n                    # Odd number of digits\n                    one_side = ['8'] + ['9'] * (math.floor(n/2) - 1)\n                    other_side = list(reversed(one_side))\n                    return ''.join(one_side + ['8'] + other_side)\n        if k == 7:\n            if n <= 2:\n                return ''.join(['7'] * n)\n            else:\n                largest_palindrome = 0\n                if n % 2 == 0:\n                    # Even number of digits.\n                    start = int(''.join(['9'] * ((n//2) - 1) + ['0']))\n                    end = int(''.join(['1'] + ['0'] * (n//2)))\n                    for i in range(start, end):\n                        one_side = list(str(i))\n                        other_side = list(reversed(one_side))\n                        full = int(''.join(one_side + other_side))\n                        if full % 7 == 0:\n                            largest_palindrome = full\n                else:\n                    # Odd number of digits.\n                    one_side = ['9'] * math.floor(n / 2)\n                    other_side = list(reversed(one_side))\n                    for i in range(10):\n                        full = int(''.join(one_side + [str(i)] + other_side))\n                        if full % 7 == 0:\n                            largest_palindrome = full\n                return str(largest_palindrome)\n        ",
    "submit_ts": "1723952121",
    "subm_id": "1359788401"
}