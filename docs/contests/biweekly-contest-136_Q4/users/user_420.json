{
    "username": "sodacorsair",
    "submission": "class Solution {\n    public int[] timeTaken(int[][] edges) {\n        int n = edges.length + 1;\n        List<Integer>[] map = new List[n];\n        Arrays.setAll(map, _ -> new ArrayList());\n        for (int[] e : edges)\n        {\n            map[e[0]].add(e[1]);\n            map[e[1]].add(e[0]);\n        }\n        Integer[][] dp = new Integer[n][2];\n\n        dfs(map, dp, 0, -1);\n        dfs1(map, dp, 0, -1);\n\n        int[] ans = new int[n];\n        for (int i = 0; i < n; i++) ans[i] = dp[i][0];\n        return ans;\n    }\n\n    private void dfs(List<Integer>[] map, Integer[][] dp, int cur, int pre)\n    {\n        dp[cur][0] = 0;\n        for (int next : map[cur])\n        {\n            if (next == pre) continue;\n            dfs(map, dp, next, cur);\n            int t = (next % 2 == 0 ? 2 : 1) + dp[next][0];\n            if (t >= dp[cur][0])\n            {\n                dp[cur][1] = dp[cur][0];\n                dp[cur][0] = t;\n            }\n            else if (dp[cur][1] == null || t > dp[cur][1]) dp[cur][1] = t;\n        }\n    }\n\n    private void dfs1(List<Integer>[] map, Integer[][] dp, int cur, int pre)\n    {\n        if (pre != -1)\n        {\n            int t = (cur % 2 == 0 ? 2 : 1) + dp[cur][0];\n            if (t == dp[pre][0]) t = dp[pre][1] + (pre % 2 == 0 ? 2 : 1);\n            else t = dp[pre][0] + (pre % 2 == 0 ? 2 : 1);\n            if (t >= dp[cur][0])\n            {\n                dp[cur][1] = dp[cur][0];\n                dp[cur][0] = t;\n            }\n            else if (dp[cur][1] == null || t > dp[cur][1]) dp[cur][1] = t;\n        }\n\n        for (int next : map[cur])\n        {\n            if (next == pre) continue;\n            dfs1(map, dp, next, cur);\n        }\n    }\n}",
    "submit_ts": "1722697535",
    "subm_id": "1343150045"
}