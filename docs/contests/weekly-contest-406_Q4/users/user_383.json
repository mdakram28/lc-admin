{
    "username": "bluepaper625",
    "submission": "class Solution:\n    def minimumCost(self, m: int, n: int, horizontalCut: List[int], verticalCut: List[int]) -> int:\n        num_vertical_needed = 1\n        num_horizontal_needed = 1\n\n        max_heap = []\n\n        for item in horizontalCut:\n            heapq.heappush(max_heap, (-item, 'h'))\n        for item in verticalCut:\n            heapq.heappush(max_heap, (-item, 'v'))\n\n        total_cost = 0\n\n        while max_heap:\n            cur_move = heapq.heappop(max_heap)\n            if cur_move[1] == 'h':\n                total_cost += -cur_move[0] * num_horizontal_needed\n                num_vertical_needed += 1\n            else:\n                total_cost += -cur_move[0] * num_vertical_needed\n                num_horizontal_needed += 1\n        \n        return total_cost",
    "submit_ts": "1720925468",
    "subm_id": "1320255719"
}