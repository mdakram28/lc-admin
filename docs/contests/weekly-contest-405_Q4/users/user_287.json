{
    "username": "Chandrachur",
    "submission": "class Node {\n  public:\n  Node* links[26];\n  bool flag;\n  int cost;\n\n  Node() {\n    for(int i = 0; i < 26; i++) links[i] = nullptr;\n    flag = 0;\n    cost = 1e9;\n  }\n  Node* get(char c) {\n    return links[c - 'a'];\n  }\n  void put(char c, Node* node) {\n    links[c - 'a'] = node;\n  }\n  bool containsKey(char c) {\n    return links[c - 'a'] != nullptr;\n  }\n  void setEnd()   {flag = true;}\n  bool isEnd()    {return flag;}\n  void setCost(int cost) {\n    this->cost = min(this->cost, cost);\n  }\n  int getCost() {\n    return cost;\n  }\n};\n\nclass Trie {\n  Node* root;\npublic:\n  Trie() {\n    root = new Node();\n  }\n  void insert(string &word, int cost) {\n    Node* curr = root;\n    for(char &c : word) {\n      if(curr->containsKey(c) == false) {\n        curr->put(c, new Node());\n      }\n      curr = curr->get(c);\n    }\n    curr->setEnd();\n    curr->setCost(cost);\n  }\n\n  int search(string &target, int ind, vector<int> &dp) {\n    if(ind == target.length()) {\n      return 0;\n    }\n    if(dp[ind] != -1) {\n      return dp[ind];\n    }\n\n    int res = 1e9;\n    Node* curr = root;\n    for(int i = ind; i < target.length(); i++) {\n      char c = target[i];\n      if(curr->containsKey(c) == false) {\n         break;\n      } \n      curr = curr->get(c);\n      if(curr->isEnd()) {\n        res = min(res, curr->getCost() + search(target, i + 1, dp));\n      }\n    }\n    return dp[ind] = res;\n  }\n};\n\nclass Solution {\npublic:\n  int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n    Trie trie;\n    for(int i = 0; i < words.size(); i++) {\n      trie.insert(words[i], costs[i]);\n    }\n    vector<int> dp(target.size() + 1, -1);\n    int cost = trie.search(target, 0, dp);\n    if(cost >= 1e9) return -1;\n    return cost;\n  }\n};",
    "submit_ts": "1720322011",
    "subm_id": "1312338323"
}