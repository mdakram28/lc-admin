{
    "username": "pratyush_codes",
    "submission": "import java.util.*;\n\nclass Solution {\n    public int bfs(List<List<Integer>> graph, int start, int target1, int target2, int nodes) {\n        Queue<Integer> q = new LinkedList<>();\n        boolean[] visited = new boolean[nodes + 4];\n        q.add(start);\n        visited[start] = true;\n        \n        while (!q.isEmpty()) {\n            int u = q.poll();\n            for (int v : graph.get(u)) {\n                if (!visited[v]) {\n                    q.add(v);\n                    visited[v] = true;\n                }\n            }\n        }\n        return (visited[target1] || visited[target2]) ? 1 : 0;\n    }\n    \n    public boolean canReachCorner(int X, int Y, int[][] circles2) {\n        List<int[]> circles = new ArrayList<>(circles2.length);\n        List<List<Integer>> graph = new ArrayList<>(circles2.length + 4);\n        int num_circles = circles2.length;\n        \n        for (int i = 0; i < num_circles; ++i) {\n            circles.add(new int[]{circles2[i][0], circles2[i][1], circles2[i][2]});\n        }\n        \n        for (int i = 0; i < num_circles + 4; ++i) {\n            graph.add(new ArrayList<>());\n        }\n        \n        for (int i = 0; i < num_circles; ++i) {\n            int[] circle = circles.get(i);\n            if (circle[0] <= circle[2]) {\n                graph.get(num_circles).add(i);\n                graph.get(i).add(num_circles);\n            }\n            if (X - circle[0] <= circle[2]) {\n                graph.get(num_circles + 2).add(i);\n                graph.get(i).add(num_circles + 2);\n            }\n            if (circle[1] <= circle[2]) {\n                graph.get(num_circles + 1).add(i);\n                graph.get(i).add(num_circles + 1);\n            }\n            if (Y - circle[1] <= circle[2]) {\n                graph.get(num_circles + 3).add(i);\n                graph.get(i).add(num_circles + 3);\n            }\n            for (int j = i + 1; j < num_circles; ++j) {\n                double distance = Math.sqrt(Math.pow(circle[0] - circles.get(j)[0], 2) +\n                                            Math.pow(circle[1] - circles.get(j)[1], 2));\n                int radius_sum = circle[2] + circles.get(j)[2];\n                if (radius_sum >= distance) {\n                    graph.get(i).add(j);\n                    graph.get(j).add(i);\n                }\n            }\n        }\n        \n        int is_blocked = 0;\n        is_blocked = Math.max(is_blocked, bfs(graph, num_circles, num_circles + 1, num_circles + 2, num_circles + 4)); // Check for bottom-left corner\n        is_blocked = Math.max(is_blocked, bfs(graph, num_circles + 3, num_circles + 2, num_circles + 1, num_circles + 4)); // Check for top-right corner\n        if (is_blocked == 1) {\n            return false;\n        }\n        return true;\n    }\n}\n",
    "submit_ts": "1722136963",
    "subm_id": "1335750093"
}