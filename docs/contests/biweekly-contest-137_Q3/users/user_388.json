{
    "username": "John Liao",
    "submission": "class Solution {\npublic:\n    long long largest(vector<pair<int, int>>& a, vector<pair<int, int>>& b, vector<pair<int, int>>& c) {\n        long long m = LONG_MIN;\n        for (auto an : a) {\n            for (auto bn : b) {\n                if (an.first == bn.first) continue;\n                for (auto cn : c) {\n                    if (an.first == cn.first or bn.first == cn.first) continue;\n\n                    m = max(m, ((long long)an.second + bn.second + cn.second));\n                }\n            }\n        }\n\n        return m;\n    }\n    long long maximumValueSum(vector<vector<int>>& board) {\n        vector<vector<pair<int, int>>> high;\n        for (auto row : board) {\n            // take highest three\n            vector<pair<int, int>> highest_three({make_pair(-1, INT_MIN), make_pair(-1, INT_MIN), make_pair(-1, INT_MIN)});\n            int i = 0; \n            for (auto col: row) {\n                if (col > highest_three[0].second) {\n                    highest_three[2] = highest_three[1];\n                    highest_three[1] = highest_three[0];\n                    highest_three[0] = make_pair(i, col);\n                } else if (col > highest_three[1].second) {\n                    highest_three[2] = highest_three[1];\n                    highest_three[1] = make_pair(i, col);\n                } else if (col > highest_three[2].second) {\n                    highest_three[2] = make_pair(i, col);\n                }\n                i++;\n            }\n\n            high.push_back(highest_three);\n        }\n\n        long long _max = LONG_MIN;\n        for (int i = 0; i < board.size(); i++) {\n            for (int j = i + 1; j < board.size(); j++) {\n                for (int k = j + 1; k < board.size(); k++) {\n                    _max = max(_max, largest(high[i], high[j], high[k]));\n                }\n            }\n        }\n\n        return _max;\n    }\n};",
    "submit_ts": "1723908493",
    "subm_id": "1359154956"
}