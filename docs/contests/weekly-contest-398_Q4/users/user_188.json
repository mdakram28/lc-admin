{
    "username": "tanakat01",
    "submission": "class Solution:\n    def waysToReachStair(self, k: int) -> int:\n        ans = 0\n        jsums = [0]\n        for j in range(0, 64):\n            jsums.append(jsums[-1] + 2 ** j)\n        def sub(jcount, deccount):\n            ans = [[[0, 0] for _ in range(deccount + 1)] for _ in range(jcount + 1)]\n            ans[0][0][0] = 1\n            for jc in range(0, jcount + 1):\n                for dc in range(0, deccount + 1):\n                    if jc > 0:\n                        ans[jc][dc][0] += sum(ans[jc - 1][dc])\n                    if dc > 0 and dc <= jsums[jc] + 1:\n                        ans[jc][dc][1] += ans[jc][dc - 1][0]\n            #print(f'sub({jcount}, {deccount}), ans={ans}')\n            return sum(ans[jcount][deccount])\n        for j in range(0, 64):\n            diff = jsums[j] - (k - 1)\n            if diff >= 0:\n                if diff > j + 1:\n                    break\n                ans += sub(j, diff)\n        return ans",
    "submit_ts": 1716087858.0
}