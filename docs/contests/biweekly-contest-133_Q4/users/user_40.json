{
    "username": "TuongPK",
    "submission": "class Solution {\n    private static final int MOD = 1000000007;\n\n    public int numberOfPermutations(int n, int[][] requirements) {\n        // Sort requirements by end index\n        Arrays.sort(requirements, (a, b) -> Integer.compare(a[0], b[0]));\n        int numReqs = requirements.length;\n\n        // Create a 3D DP array\n        int[][][] dp = new int[n + 1][401][numReqs + 1];\n        dp[0][0][0] = 1;\n\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j <= 400; j++) {\n                for (int k = 0; k <= numReqs; k++) {\n                    if (dp[i][j][k] > 0) {\n                        for (int x = 0; x <= i; x++) {\n                            int newInversions = j + (i - x);\n                            if (newInversions <= 400) {\n                                int nextReq = k;\n                                if (nextReq < numReqs && requirements[nextReq][0] == i) {\n                                    if (newInversions == requirements[nextReq][1]) {\n                                        nextReq++;\n                                    } else {\n                                        continue;\n                                    }\n                                }\n                                dp[i + 1][newInversions][nextReq] = (dp[i + 1][newInversions][nextReq] + dp[i][j][k]) % MOD;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        // Sum up all valid permutations that meet all requirements\n        int result = 0;\n        for (int j = 0; j <= 400; j++) {\n            result = (result + dp[n][j][numReqs]) % MOD;\n        }\n\n        return result;\n    }\n}\n",
    "submit_ts": 1719067389.0
}