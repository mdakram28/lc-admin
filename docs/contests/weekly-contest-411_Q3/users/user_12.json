{
    "username": "Ma Lin",
    "submission": "class Solution {\npublic:\n    string largestPalindrome(int n, int K) {\n        int yh[100005], i, j, t, c, now = 0, p, L, u;\n        string res(n, '0');\n        vector<int> weight, gys;\n        yh[0] = 1;\n        for (i = 1; i < n; ++i) yh[i] = (yh[i - 1] * 10) % K;\n        i = 0; j = n - 1;\n        while (i <= j){\n            if (i == j) weight.push_back(yh[i] % K);\n            else weight.push_back((yh[i] + yh[j]) % K);\n            ++i;\n            --j;\n        }\n        \n        gys = weight;\n        L = weight.size();\n        for (i = gys.size() - 1; i >= 0; --i){\n            if (weight[i] == 0) gys[i] = K;\n            if (i + 1 < gys.size()) \n                gys[i] = __gcd(gys[i], gys[i + 1]);\n        }\n        i = 0; j = n - 1; p = 0;\n        while (i <= j){\n            for (c = 9; c >= 0; --c){\n                t = (now + c * weight[p]) % K;\n                if (p == L - 1){\n                    if (t != 0) continue;\n                }else{\n                    if (gys[p + 1] == K){\n                        if (t != 0) continue;\n                    }\n                    else{\n                        u = __gcd(gys[p + 1], K);\n                        if ((K - t) % u != 0) continue;\n                    }\n                }\n                \n                res[i] = res[j] = (char)('0' + c);\n                now = t;\n                break;\n            }\n            \n            ++i; --j;\n            ++p;\n        }\n        \n        return res;\n    }\n};",
    "submit_ts": "1723949468",
    "subm_id": "1359720315"
}