{
    "username": "sepehry",
    "submission": "#include <vector>\n#include <array>\n#include <algorithm>\n#include <climits>\n#include <functional>\n\nusing namespace std;\n\n\nclass Solution {\npublic:\n    int minimumSum(vector<vector<int>>& grid) {\n        std::array<std::array<int, 4>, 3> MM;\n        for (auto& row : MM) {\n            row = {INT_MAX, INT_MAX, INT_MIN, INT_MIN};\n        }\n\n        int n = grid.size();\n        int m = grid[0].size();\n        std::vector<std::pair<int, int>> ones;\n        for (int ii = 0; ii < n; ++ii) {\n            for (int jj = 0; jj < m; ++jj) {\n                if (grid[ii][jj]) {\n                    ones.emplace_back(ii, jj);\n                }\n            }\n        }\n\n        auto ok = [&](int k1, int k2) {\n            const auto& [minx1, miny1, maxx1, maxy1] = MM[k1];\n            const auto& [minx2, miny2, maxx2, maxy2] = MM[k2];\n            return maxx1 < minx2 || maxx2 < minx1 || maxy1 < miny2 || maxy2 < miny1;\n        };\n\n        auto ok0 = [&]() {\n            for (int k1 = 0; k1 < 3; ++k1) {\n                for (int k2 = k1 + 1; k2 < 3; ++k2) {\n                    if (!ok(k1, k2)) {\n                        return false;\n                    }\n                }\n            }\n            return true;\n        };\n\n        auto area = [&]() {\n            long long sum = 0;\n            for (const auto& [minx, miny, maxx, maxy] : MM) {\n                if (minx == INT_MAX) continue;  // Skip uninitialized rectangles\n                sum += static_cast<long long>(maxx - minx + 1) * (maxy - miny + 1);\n            }\n            return sum;\n        };\n\n        int sol = INT_MAX;\n\n        std::function<void(int)> search = [&](int k) {\n            if (k == static_cast<int>(ones.size())) {\n                sol = std::min(sol, static_cast<int>(area()));\n                return;\n            }\n            \n            long long aaa = area();\n            if (aaa != 0 && aaa > sol) {\n                return;\n            }\n            \n            auto [x, y] = ones[k];\n            for (int c = 0; c < 3; ++c) {\n                auto [minx0, miny0, maxx0, maxy0] = MM[c];\n                int minx = std::min(minx0, x);\n                int maxx = std::max(maxx0, x);\n                int miny = std::min(miny0, y);\n                int maxy = std::max(maxy0, y);\n                \n                MM[c] = {minx, miny, maxx, maxy};\n                if (ok0()) {\n                    search(k + 1);\n                }\n                MM[c] = {minx0, miny0, maxx0, maxy0};\n            }\n        };\n\n        search(0);\n        return sol;\n    }\n};",
    "submit_ts": 1719112469.0
}