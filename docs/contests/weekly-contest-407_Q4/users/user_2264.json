{
    "username": "animeshnath",
    "submission": "class Solution {\n    public long minimumOperations(int[] nums, int[] target) {\n        int n = nums.length;\n        for (int i = 0; i < n; i++) nums[i] = target[i] - nums[i];\n        long ans = 0;\n        // System.out.println(Arrays.toString(nums));\n        for (int i = 0; i < n; i++) {\n            if (nums[i] != 0) {\n                int sign = nums[i] / nums[i];\n                boolean pos = nums[i] > 0;\n                int end = i;\n                while (end + 1 < n && nums[end + 1] != 0 && (nums[end + 1] > 0) == pos) end++;\n                ans += min(nums, i, end);\n                i = end;\n            }\n        }\n        return ans;\n    }\n    \n    long min(int[] nums, int l, int r) {\n        // System.out.println(l + \" \" + r);\n        Deque<Integer> stack = new ArrayDeque<>();\n        long ans = 0;\n        \n        for (int i = l; i <= r; i++) {\n            int curr = Math.abs(nums[i]);\n            while (!stack.isEmpty() && stack.peek() > curr) {\n                int prev = stack.pop();\n                int left = curr;\n                if (!stack.isEmpty()) left = stack.peek();\n                ans += prev - Math.max(curr, left);\n            }\n            if (stack.isEmpty() || stack.peek() < curr) stack.push(curr);\n        }\n        \n        int x = 0;\n            while (!stack.isEmpty() && stack.peek() > x) {\n                int prev = stack.pop();\n                int left = x;\n                if (!stack.isEmpty()) left = stack.peek();\n                ans += prev - Math.max(x, left);\n            }\n        \n        return ans;\n    }\n}",
    "submit_ts": "1721534172",
    "subm_id": "1328025003"
}