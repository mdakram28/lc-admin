{
    "username": "StanleyDodds",
    "submission": "public class Solution {\n    public int NumberOfPermutations(int n, int[][] requirements) {\n        Array.Sort(requirements, (x, y) => x[0].CompareTo(y[0]));\n        long total = 1;\n        int prevEnd = -1;\n        int prevCnt = 0;\n        foreach (int[] requirement in requirements) {\n            int end = requirement[0];\n            int cnt = requirement[1];\n            int newInversions = cnt - prevCnt;\n            //can introduce anything from 0 to prevEnd + x inversions on the xth element added\n            long[] dp = new long[newInversions + 1];\n            dp[0] = total;\n            for (int i = prevEnd + 1; i <= end; i++) {\n                long[] next = new long[newInversions + 1];\n                for (int j = 0; j <= newInversions; j++) {\n                    for (int k = 0; k <= Math.Min(i, newInversions - j); k++) {\n                        next[j + k] = (next[j + k] + dp[j]) % 1_000_000_007;\n                    }\n                }\n                dp = next;\n            }\n            total = dp[newInversions];\n            prevEnd = end;\n            prevCnt = cnt;\n        }\n        return (int)total;\n    }\n}",
    "submit_ts": "1719068463",
    "subm_id": "1296766244"
}