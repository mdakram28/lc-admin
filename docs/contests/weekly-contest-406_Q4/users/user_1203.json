{
    "username": "yogitak987",
    "submission": "class Solution {\npublic:\n    long long minimumCost(int m, int n, vector<int>& horizontalCut, vector<int>& verticalCut) {\n        std::sort(horizontalCut.begin(), horizontalCut.end(), std::greater<int>());\n        std::sort(verticalCut.begin(), verticalCut.end(), std::greater<int>());\n        \n        int h = 1; // Number of horizontal pieces\n        int v = 1; // Number of vertical pieces\n        long long totalCost = 0; // To store the total cost of cuts\n        \n        int i = 0, j = 0;\n        // Traverse both cut arrays\n        while (i < horizontalCut.size() || j < verticalCut.size()) {\n            // Compare the current horizontal and vertical cut costs\n            if (i < horizontalCut.size() && (j >= verticalCut.size() || horizontalCut[i] >= verticalCut[j])) {\n                // Perform a horizontal cut\n                totalCost += (horizontalCut[i] * v); // Each cut adds a cost of current horizontalCut[i]\n                ++h; // Increase the horizontal piece count\n                ++i; // Move to the next horizontal cut\n            } else {\n                // Perform a vertical cut\n                totalCost += (verticalCut[j] * h); // Each cut adds a cost of current verticalCut[j]\n                ++v; // Increase the vertical piece count\n                ++j; // Move to the next vertical cut\n            }\n        }\n        \n        return totalCost;\n    }\n};",
    "submit_ts": "1720925101",
    "subm_id": "1320242853"
}