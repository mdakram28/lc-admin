{
    "username": "Manimaran S",
    "submission": "class Solution {\n    private int[][] board;\n    private Map<Integer, Long> cache;\n    private static final int defaultVal = 100;\n    \n    public long maximumValueSum(int[][] board) {\n        this.board = board;\n        this.cache = new HashMap<>();\n        return dfs(0, defaultVal, defaultVal);\n    }\n\n    private long dfs(int row, int one, int two) {\n        if (board.length == row) {\n            return Long.MIN_VALUE;\n        }\n\n        if (one > two) {\n            int temp = one;\n            one = two;\n            two = temp;\n        }\n        \n        int key = (((row << 7) ^ one) << 7) ^ two;\n        if (cache.containsKey(key)) {\n            return cache.get(key);\n        }\n\n        // No Take\n        long output = dfs(row+1, one, two);\n\n        // Take\n        for (int j = 0; j < board[row].length; j++) {\n            if (one == j || two == j) {\n                continue;\n            }\n\n            long take;\n            if (one == defaultVal) {\n                take = dfs(row+1, j, defaultVal);\n            } else if (two == defaultVal) {\n                take = dfs(row+1, one, j);\n            } else {\n                take = 0;\n            }\n\n            if (take != Long.MIN_VALUE) {\n                output = Math.max(output, take + board[row][j]);\n            }\n        }\n\n        cache.put(key, output);\n        return output;\n    }\n}",
    "submit_ts": "1723908800",
    "subm_id": "1359167639"
}