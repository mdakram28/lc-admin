{
    "username": "Sarthak_Shishodia20",
    "submission": "import java.util.Arrays;\nimport java.util.Collections;\n\nclass Solution {\n    public long minimumCost(int m, int n, int[] horizontalCut, int[] verticalCut) {\n        // Convert the arrays to Integer arrays and sort them in descending order\n        Integer[] hCuts = Arrays.stream(horizontalCut).boxed().toArray(Integer[]::new);\n        Integer[] vCuts = Arrays.stream(verticalCut).boxed().toArray(Integer[]::new);\n        Arrays.sort(hCuts, Collections.reverseOrder());\n        Arrays.sort(vCuts, Collections.reverseOrder());\n\n        int h = 0;\n        int v = 0;\n        int hp = 1;\n        int vp = 1;\n        long cost = 0;\n\n        // Use a greedy approach to minimize the cost\n        while (h < hCuts.length && v < vCuts.length) {\n            if (vCuts[v] < hCuts[h]) {\n                cost += (long) hCuts[h] * vp;\n                hp++;\n                h++;\n            } else {\n                cost += (long) vCuts[v] * hp;\n                vp++;\n                v++;\n            }\n        }\n\n        // Add the remaining horizontal cuts\n        while (h < hCuts.length) {\n            cost += (long) hCuts[h] * vp;\n            hp++;\n            h++;\n        }\n\n        // Add the remaining vertical cuts\n        while (v < vCuts.length) {\n            cost += (long) vCuts[v] * hp;\n            v++;\n            vp++;\n        }\n\n        return cost;\n    }\n}\n",
    "submit_ts": "1720925802",
    "subm_id": "1320266662"
}