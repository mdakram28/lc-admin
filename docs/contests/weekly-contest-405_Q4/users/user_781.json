{
    "username": "9560kiran",
    "submission": "class Node {\npublic:\n    Node* list[26];\n    vector<pair<int, int>> end;\n    bool check(char ch) { return list[ch-'a']!=NULL;}\n    void put(char ch,Node* node) { list[ch-'a']=node;}\n    Node* get(char ch) { return list[ch-'a'];}\n};\n\nclass Trie {\npublic:\n    Node* root;\n\n    Trie() {\n        root = new Node();\n    }\n\n    void insert(string word, int idx, int cost) {\n        Node* node = root;\n        for (char c : word) {\n            if (!node->check(c)) node->put(c,new Node());\n            node = node->get(c);\n        }\n        node->end.push_back({idx, cost});\n    }\n};\n\nclass Solution {\npublic:\n    int  minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int n = target.size();\n        Trie trie;\n        for (int i = 0; i < words.size(); ++i) {\n            trie.insert(words[i], i, costs[i]);\n        }\n        vector<int> dp(n + 1, INT_MAX);\n        dp[0] = 0;\n\n        \n\n        for (int i = 0; i < n; ++i) {\n            if (dp[i] != INT_MAX) {\n                \n\n            Node* node = trie.root;\n                \n            for (int j = i; j < n; ++j) {\n                if (!node->check(target[j])) break;\n                \n                node = node->get(target[j]);\n                for (auto& p : node->end) {\n                    int word_len = words[p.first].size();\n                    if (i + word_len <= n) dp[i + word_len] = min(dp[i + word_len], dp[i] + p.second);\n                }\n            }\n          }\n        }\n\n        return dp[n] == INT_MAX? -1 : dp[n];\n    }\n};",
    "submit_ts": "1720323170",
    "subm_id": "1312369049"
}