{
    "username": "_otto",
    "submission": "class zkw:\n    def __init__(self, n):\n        self.n = n\n        self.tree = [0] * (n << 1)\n\n    def build(self, arr):\n        for i in range(self.n):\n            self.tree[i + self.n] = arr[i]\n        for i in range(self.n - 1, 0, -1):\n            self.tree[i] = self.tree[i << 1] + self.tree[i << 1 | 1]\n\n    def update(self, idx, val):\n        idx += self.n\n        self.tree[idx] = val\n        while idx > 1:\n            self.tree[idx >> 1] = self.tree[idx] + self.tree[idx ^ 1]\n            idx >>= 1\n\n    def query(self, l, r):\n        l += self.n\n        r += self.n + 1\n        ans = 0\n        while l < r:\n            if l & 1:\n                ans += self.tree[l]\n                l += 1\n            if r & 1:\n                r -= 1\n                ans += self.tree[r]\n            l >>= 1\n            r >>= 1\n        return ans\n\nclass Solution:\n    def countOfPeaks(self, nums: List[int], queries: List[List[int]]) -> List[int]:\n        n = len(nums)\n        ans = []\n        seg = zkw(n + 1)\n        for i in range(1, n - 1):\n            if nums[i] > nums[i - 1] and nums[i] > nums[i + 1]:\n                seg.update(i, 1)\n        \n        for q, l, r in queries:\n            #print(seg.tree)\n            if q == 1:\n                if r - l < 2: \n                    ans.append(0)\n                    continue\n                ans.append(seg.query(l + 1, r - 1))\n            else:\n                nums[l] = r\n                for i in range(max(1, l - 1), min(n - 2, l + 1) + 1):\n                    if nums[i] > nums[i - 1] and nums[i] > nums[i + 1]:\n                        \n                        seg.update(i, 1)\n                        #print(i, seg.query(1,1))\n                    else:\n                        seg.update(i, 0)\n        return ans\n        ",
    "submit_ts": 1718506705.0
}