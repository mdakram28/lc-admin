{
    "username": "santanusingha241418",
    "submission": "import java.util.*;\n\nclass Solution {\n    class TrieNode {\n        Map<Character, TrieNode> children = new HashMap<>();\n        int cost = Integer.MAX_VALUE;\n    }\n\n    public int minimumCost(String target, String[] words, int[] costs) {\n        TrieNode root = new TrieNode();\n\n        // Build the Trie\n        for (int i = 0; i < words.length; i++) {\n            TrieNode node = root;\n            for (char c : words[i].toCharArray()) {\n                node.children.putIfAbsent(c, new TrieNode());\n                node = node.children.get(c);\n            }\n            node.cost = Math.min(node.cost, costs[i]);\n        }\n\n        int n = target.length();\n        int[] dp = new int[n + 1];\n        Arrays.fill(dp, Integer.MAX_VALUE);\n        dp[0] = 0;\n\n        // Dynamic Programming to find the minimum cost\n        for (int i = 0; i < n; i++) {\n            if (dp[i] == Integer.MAX_VALUE) continue;\n            TrieNode node = root;\n            for (int j = i; j < n; j++) {\n                char c = target.charAt(j);\n                if (!node.children.containsKey(c)) break;\n                node = node.children.get(c);\n                if (node.cost != Integer.MAX_VALUE) {\n                    dp[j + 1] = Math.min(dp[j + 1], dp[i] + node.cost);\n                }\n            }\n        }\n\n        return dp[n] == Integer.MAX_VALUE ? -1 : dp[n];\n    }\n}\n",
    "submit_ts": "1720320499",
    "subm_id": "1312296016"
}