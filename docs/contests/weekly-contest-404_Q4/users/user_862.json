{
    "username": "xyz_xyz_xyz_xyz",
    "submission": "const int N = 2e5 + 10, M = N * 2, INF = 0x3f3f3f3f;\nclass Solution {\npublic:\n    int n;\n    \n    int h[N], e[M], w[M], ne[M], idx;\n    int d1[N], d2[N], p1[N], up[N];\n    bool is_leaf[N]; \n    int res = 1;\n    \nint dfs_d(int u, int father)\n{\n    d1[u] = d2[u] = -INF;\n    for (int i = h[u]; i != -1; i = ne[i])\n    {\n        int j = e[i];\n        if (j == father) continue;\n        int d = dfs_d(j, u) + w[i];\n        if (d >= d1[u])\n        {\n            d2[u] = d1[u], d1[u] = d;\n            p1[u] = j;\n        }\n        else if (d > d2[u]) d2[u] = d;\n    }\n\n    if (d1[u] == -INF)\n    {\n        // cout << u << \" \" << d1[u] << endl;\n        d1[u] = d2[u] = 0;\n        is_leaf[u] = true;\n    }\n\n    return d1[u];\n}\n\nvoid dfs_u(int u, int father)\n{\n    for (int i = h[u]; i != -1; i = ne[i])\n    {\n        int j = e[i];\n        if (j == father) continue;\n\n        if (p1[u] == j) up[j] = max(up[u], d2[u]) + w[i];\n        else up[j] = max(up[u], d1[u]) + w[i];\n\n        dfs_u(j, u);\n    }\n}\n    void add(int a, int b, int c)\n    {\n        e[idx] = b, w[idx] = c, ne[idx] = h[a], h[a] = idx ++ ;\n    }\n    \n    pair<int,int> check(){\n     dfs_d(0, -1);\n    dfs_u(0, -1);       \n        int node1 = 0, res = d1[0];\n        // cout << \"node: \" << 0 << \" \" << d1[0] << endl;\n    for (int i = 1; i <= n; i ++ ){\n        if (is_leaf[i]) {\n            // cout << \"node: \" << i << \" \" << up[i] << \" \" << d1[i] << endl;\n            if(up[i]<res)res = min(res, up[i]), node1 = i;\n        }\n        else{\n            // cout << \"node: \" << i << \" \" << d1[i] << \" \" << up[i] << endl;\n            if(max(d1[i], up[i])<res) res = min(res, max(d1[i], up[i])), node1 = i;     \n        }   \n    }\n        return {res, node1};\n    }\n    \n    int diameter(int node, int parent){\n        int tmax = 0, tmax2 = 0;\n        for(int i = h[node];i!=-1;i=ne[i]){\n            if(e[i]==parent)continue;\n            int tres = diameter(e[i], node);\n            if(tres>tmax)tmax2 = tmax, tmax = tres;\n            else if(tres>tmax2)tmax2 = tres;\n        }\n        res = max(res, tmax+tmax2+1);\n        return tmax + 1;\n    }\n    \n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n        if(edges1.size()==0 && edges2.size()==0)return 1;\n        if(edges1.size()==0){\n            vector<vector<int>> t = edges2;\n            edges2 = edges1;\n            edges1 = t;\n        }\n        n = edges1.size();\n        memset(h,-1,sizeof h);\n        for(auto edge: edges1){\n            add(edge[0], edge[1],1);\n            add(edge[1],edge[0],1);\n        }\n        auto [res1,node1] = check();\n        // cout << node1 << \" \" << res1 << endl;\n        // cout << res1 << endl;\n        // cout << n << endl;\n        n = edges2.size();\n        idx = 0;\n        memset(h,-1,sizeof h);\n        memset(p1,0,sizeof p1);\n        memset(up,0,sizeof up);\n        memset(d1,0,sizeof d1);\n        memset(d2,0,sizeof d2);\n        memset(is_leaf,0,sizeof is_leaf);\n        for(auto edge: edges2){\n            add(edge[0], edge[1],1);\n            add(edge[1],edge[0],1);\n        }  \n        auto [res2,node2] = check();\n        // cout << node2  << \" \" << res2 << endl;\n        n = edges1.size() + edges2.size();\n        idx = 0;\n        memset(h,-1,sizeof h);\n        memset(p1,0,sizeof p1);\n        memset(up,0,sizeof up);\n        memset(d1,0,sizeof d1);\n        memset(d2,0,sizeof d2);\n        memset(is_leaf,0,sizeof is_leaf);\n        for(auto edge: edges1){\n            add(edge[0], edge[1],1);\n            add(edge[1],edge[0],1);\n        }        \n        for(auto edge: edges2){\n            add(edge[0]+edges1.size()+1, edge[1]+edges1.size()+1,1);\n            add(edge[1]+edges1.size()+1,edge[0]+edges1.size()+1,1);\n        } \n        add(node1, node2+edges1.size()+1,1);\n        add(node2+edges1.size()+1,node1,1);\n        diameter(check().second, -1);\n        // if(edges1.size()==0 || edges2.size()==0)return res1+ res2;\n        return res - 1;\n    }\n};",
    "submit_ts": "1719719261",
    "subm_id": "1304437639"
}