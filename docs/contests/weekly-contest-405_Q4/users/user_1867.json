{
    "username": "UtsavPansuriya777",
    "submission": "class Solution {\npublic:\n    struct Node {\n    \n    Node* links[26];\n    vector<pair<int,int>> cost;\n    \n    bool flag = false;\n\n    \n    bool containsKey(char ch) {\n        return links[ch - 'a'] != NULL;\n    }\n\n    \n    void put(char ch, Node* node) {\n        links[ch - 'a'] = node;\n    }\n\n    \n    Node* get(char ch) {\n        return links[ch - 'a'];\n    }\n\n    \n    void setEnd() {\n        flag = true;\n    }\n\n    \n    bool isEnd() {\n        return flag;\n    }\n};\n\n// Trie class\nclass Trie {\n   \n\npublic:\n\n Node* root;\n    \n    Trie() {\n        root = new Node();\n    }\n\n    void insert(string word,int ind,int cost) {\n        Node* node = root;\n        for (int i = 0; i < word.length(); i++) {\n            if (!node->containsKey(word[i])) {\n               \n                node->put(word[i], new Node());\n            }\n            node = node->get(word[i]);\n        }\n       node->cost.push_back({ind,cost});\n        node->setEnd();\n    }\n    bool search(string word) {\n        Node* node = root;\n        for (int i = 0; i < word.length(); i++) {\n            if (!node->containsKey(word[i])) {\n               \n                return false;\n            }\n            node = node->get(word[i]);\n        }\n        return node->isEnd();\n    }\n\n   \n    bool startsWith(string prefix) {\n        Node* node = root;\n        for (int i = 0; i < prefix.length(); i++) {\n            if (!node->containsKey(prefix[i])) {\n                \n                return false;\n            }\n            node = node->get(prefix[i]);\n        }\n        return true;\n    }\n};\n\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int n =target.size();\n\n        Trie trie;\n\n        for(int i=0;i<words.size();i++){\n            trie.insert(words[i],i,costs[i]);\n        }\n\n\n        vector<int>up(n+1,1e9);\n\n        up[0]=0;\n\n        for(int i=0;i<n;i++){\n            Node* temp =trie.root;\n\n            for(int j =i;j<n;j++){\n                if(temp->containsKey(target[j])){\n                    temp=temp->get(target[j]);\n                    for(auto it: temp->cost){\n                        int x = words[it.first].size();\n                        if(i+x <=n){\n                            up[i+x]=min(up[i+x],up[i] +it.second);\n                        }\n                    }\n                }\n                else{break;}\n            }\n        }\n         if(up[n]==1e9) return -1 ;\n          return up[n];\n    }\n\n   \n    \n};\n",
    "submit_ts": "1720324499",
    "subm_id": "1312401007"
}