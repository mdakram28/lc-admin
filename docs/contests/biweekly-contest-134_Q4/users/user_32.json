{
    "username": "user2937Vz",
    "submission": "class sparsetable:\n\n    def __init__(self , function , bound):\n        self.b = None\n        self.block = None\n        self.n = None\n        self.size = None\n        self.bound = bound\n        self.function = function\n\n    def construct(self , a):\n\n        self.n = len(a)\n        for i in range(30):\n            if(self.n < (1 << i)):\n                self.size = i\n                break\n\n        self.b = [[self.bound for i in range(self.size)] for j in range(self.n)]\n        self.block = [-1 for i in range(self.n + 1)]\n\n        for i in range(self.n):\n            self.b[i][0] = a[i]\n        \n        for j in range(1 , self.size):\n            for i in range(self.n - (1 << (j - 1))):\n                self.b[i][j] = self.function(self.b[i][j - 1] , self.b[i + (1 << (j - 1))][j - 1])\n        \n        for i in range(1 , self.n + 1):\n            for j in range(self.size - 1 , -1 , -1):\n                if(i >= (1 << j)):\n                    self.block[i] = j\n                    break\n\n    def query(self , l , r):\n\n        #handle cases if required\n        dist = r - l + 1\n\n        ans = self.function(self.b[l][self.block[dist]] , self.b[r - (1 << self.block[dist]) + 1][self.block[dist]])\n        return ans\n        \n    \n    def log_query(self , l , r):\n\n        #handle cases if required\n        dist = r - l + 1\n\n        ans = self.bound\n        for i in range(self.size - 1 , -1 , -1):\n            if(dist >> i & 1):\n                ans = self.function(ans , self.b[l][i])\n                l += (1 << i)\n\n        return ans\n\ndef AND(a , b):\n    return (a & b)\n\nclass Solution:\n    def countSubarrays(self, a: List[int], k: int) -> int:\n        \n        n = len(a)\n        ans = 0\n        \n        sp = sparsetable(AND , (1 << 31) - 1)\n        sp.construct(a)\n        \n        for i in range(n):\n            \n            right = -1\n            l , h = i , n - 1\n            while(l <= h):\n                mid = (l + h) // 2\n                if(sp.query(i , mid) < k):\n                    h = mid - 1\n                else:\n                    right = mid\n                    l = mid + 1\n            \n            left = n\n            l , h = i , n - 1\n            while(l <= h):\n                mid = (l + h) // 2\n                if(sp.query(i , mid) <= k):\n                    left = mid\n                    h = mid - 1\n                else:\n                    l = mid + 1\n            \n            \n            if(right != -1):\n                if(sp.query(i , right) == k):\n                    ans += max(0 , right - left + 1)\n        \n        \n        return ans\n        \n        \n        \n        ",
    "submit_ts": "1720277705",
    "subm_id": "1311676188"
}