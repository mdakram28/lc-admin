{
    "username": "sohamdascs",
    "submission": "class Solution {\npublic:\n    long long minimumCost(int m, int n, vector<int>& horizontalCut, vector<int>& verticalCut) {\n        sort(horizontalCut.rbegin(), horizontalCut.rend());\nsort(verticalCut.rbegin(), verticalCut.rend());\n\nlong long totalExpense = 0;\nint horizontalSegments = 1, verticalSegments = 1;\nint horizontalIndex = 0, verticalIndex = 0;\n\n// Process the cuts\nwhile (horizontalIndex < horizontalCut.size() && verticalIndex < verticalCut.size()) {\n    if (horizontalCut[horizontalIndex] >= verticalCut[verticalIndex]) {\n        totalExpense += (long long)horizontalCut[horizontalIndex] * verticalSegments;\n        horizontalSegments++;\n        horizontalIndex++;\n    } else {\n        totalExpense += (long long)verticalCut[verticalIndex] * horizontalSegments;\n        verticalSegments++;\n        verticalIndex++;\n    }\n}\n\n// If there are remaining horizontal cuts\nwhile (horizontalIndex < horizontalCut.size()) {\n    totalExpense += (long long)horizontalCut[horizontalIndex] * verticalSegments;\n    horizontalSegments++;\n    horizontalIndex++;\n}\n\n// If there are remaining vertical cuts\nwhile (verticalIndex < verticalCut.size()) {\n    totalExpense += (long long)verticalCut[verticalIndex] * horizontalSegments;\n    verticalSegments++;\n    verticalIndex++;\n}\n\nreturn totalExpense;\n    }\n};",
    "submit_ts": "1720926624",
    "subm_id": "1320291652"
}