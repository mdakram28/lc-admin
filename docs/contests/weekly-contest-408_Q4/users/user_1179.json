{
    "username": "jonters",
    "submission": "class Solution:\n    \n    def touching(self, p1, p2):\n        x1, y1, r1 = p1\n        x2, y2, r2 = p2\n        # print((x1-x2)**2 , (y1-y2)**2, r1, r2)\n        if (x1-x2)**2 + (y1-y2)**2 <= (r1+r2)**2: return True\n        return False\n    \n    E = [False for _ in range(4)]\n    NODES = None\n    VIS = None\n    x, y = 0, 0\n    \n    def dfs(self, node):\n        self.VIS[node] = True\n        r = self.NODES[node][2]\n        # print(self.NODES[node][0]+r, self.x)\n        if self.NODES[node][0]+r >= self.x:\n            self.E[3] = True\n        if self.NODES[node][0]-r <= 0:\n            self.E[1] = True\n        if self.NODES[node][1]+r >= self.y:\n            self.E[2] = True\n        if self.NODES[node][1]-r <= 0:\n            self.E[0] = True\n            \n        # print(self.E)\n        \n        for i in range(len(self.NODES)):\n            if self.touching(self.NODES[node], self.NODES[i]) and not self.VIS[i]:\n                self.dfs(i)\n        \n    def canReachCorner(self, X: int, Y: int, circles: List[List[int]]) -> bool:\n        self.NODES = circles\n        self.VIS = [False for _ in range(len(circles))]\n        self.x, self.y = X, Y\n        \n        for i in range(len(circles)):\n            self.E = [False for _ in range(4)]\n            if not self.VIS[i]:\n                self.dfs(i)\n            \n                # print(self.E)\n                # print(self.touching(circles[4], circles[5]))\n\n                if (self.E[0] and self.E[1]) or (self.E[2] and self.E[3]):\n                    return False\n                if (self.E[0] and self.E[2]) or (self.E[1] and self.E[3]):\n                    return False\n            \n        return True",
    "submit_ts": "1722136887",
    "subm_id": "1335747903"
}