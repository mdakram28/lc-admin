{
    "username": "priyanschoudhary100",
    "submission": "class Solution {\npublic:\n    int minimumDiameterAfterMerge(vector<vector<int>>& e1, vector<vector<int>>& e2) {\n         int n1 = e1.size() + 1;\n        int n2 = e2.size() + 1;\n        \n        vector<vector<int>> adj1(n1);\n        vector<vector<int>> adj2(n2);\n        \n        for (const auto& e : e1) {\n            adj1[e[0]].push_back(e[1]);\n            adj1[e[1]].push_back(e[0]);\n        }\n        for (const auto& e : e2) {\n            adj2[e[0]].push_back(e[1]);\n            adj2[e[1]].push_back(e[0]);\n        }\n\n        auto calcDia = [](const vector<vector<int>>& adj, int start, int& farNode) {\n            int sz = adj.size();\n            vector<int> dist(sz, -1);\n            function<void(int, int)> dfs = [&](int node, int d) {\n                dist[node] = d;\n                if (d > dist[farNode]) {\n                    farNode = node;\n                }\n                for (int neighbor : adj[node]) {\n                    if (dist[neighbor] == -1) {\n                        dfs(neighbor, d + 1);\n                    }\n                }\n            };\n            farNode = start;\n            dfs(start, 0);\n            return dist[farNode];\n        };\n\n        int fn1 = 0;\n        calcDia(adj1, 0, fn1);\n        int d1 = calcDia(adj1, fn1, fn1);\n\n        int fn2 = 0;\n        calcDia(adj2, 0, fn2);\n        int d2 = calcDia(adj2, fn2, fn2);\n        \n        int md = max(d1, d2);\n        int hd1 = (d1 + 1) / 2;\n        int hd2 = (d2 + 1) / 2;\n        md = max(md, hd1 + hd2 + 1);\n        \n        return md;\n    }\n};",
    "submit_ts": 1719716963.0
}