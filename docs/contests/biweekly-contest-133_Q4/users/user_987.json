{
    "username": "guptaparas061",
    "submission": "class Solution {\n    private static int mx = 400;\n    private static int mod = 1_000_000_007;\n    public int numberOfPermutations(int n, int[][] req) {\n        int d; long res = 0;\n        Map<Integer, Integer> m = new HashMap<>();\n        for (int[] i : req) {\n            m.put(i[0] + 1, i[1]);\n        }\n        long[][] cnt = new long[n + 1][mx + 1];\n        cnt[0][0] = 1;\n        for (int i = 1; i <= n; i++) {\n            for (int j = 0; j <= mx; j++) {\n                for (int k = 0; k < i; k++) {\n                    d = j - k;\n                    if (d >= 0) {\n                        cnt[i][j] = (cnt[i - 1][d] + cnt[i][j]) % mod;\n                    }\n                }\n            }\n            if (m.containsKey(i)) {\n                int t = m.get(i);\n                for (int j = 0; j <= mx; j++) {\n                    if (t != j) {\n                        cnt[i][j] = 0;\n                    }\n                }\n            }\n        }\n        for (long i : cnt[n]) {\n            res = (i + res) % mod;\n        }\n        return (int) res;\n    }\n}",
    "submit_ts": 1719071744.0
}