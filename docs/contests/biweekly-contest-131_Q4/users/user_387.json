{
    "username": "panekk",
    "submission": "class Solution {\npublic:\n    vector<bool> getResults(vector<vector<int>>& queries) {\n        vector<bool> result;\n        set<pair<int, int>> init{};\n        init.insert({0, INT_MAX});\n        ranges.try_emplace(INT_MAX, init);\n        obstacles.insert(0);\n\n        for (const auto &q : queries) {\n            int type = q[0];\n            if (type == 1) {\n                obs(q[1]);\n            } else {\n                result.push_back(possible(q[1], q[2]));\n            }\n        }\n\n        return result;\n    }\n\nprivate:\n    map<int, set<pair<int, int>>> ranges;\n    set<int> obstacles;\n    void obs(int pos) {\n        auto it = obstacles.upper_bound(pos);\n        if (it == obstacles.end()) {\n            auto last = *(prev(ranges.end()))->second.begin();\n            ranges.erase(prev(ranges.end()));\n            // cout << \"inserting \" << pos - last.first << endl;\n            ranges[pos - last.first].insert({last.first, pos});\n            ranges[INT_MAX].insert({pos, INT_MAX});\n        } else {\n            int end = *it;\n            int start = *prev(it);\n            int size = end - start;\n            ranges[size].erase({start, end});\n            if (ranges[size].empty()) {\n                ranges.erase(size);\n            }\n            // cout << \"inserting \" << pos - start << endl;\n            ranges[pos - start].insert( {start, pos});\n            // cout << \"inserting \" << end - pos << endl;\n            ranges[end - pos].insert({pos, end});\n        }\n        obstacles.insert(pos);\n    }\n\n    bool possible(int x, int sz) {\n        \n        for (auto it = ranges.lower_bound(sz); it != ranges.end(); it++) {\n            // cout << \"size \" << it->first << endl;\n            for (auto it2 = it->second.begin(); it2 != it->second.end() && it2->first < x; it2++) {\n                if (it2->first + sz <= x) {\n                    return true;\n                }\n            }\n        }\n\n        return false;\n\n        // int prev = 0;\n        // for (int o : obstacles) {\n        //     if (o > x) {\n        //         break;\n        //     }\n        //     if (o - prev >= sz) {\n        //         return true;\n        //     }\n        //     prev = o;\n        // }\n        // return x - prev >= sz;\n    }\n};",
    "submit_ts": "1716651988",
    "subm_id": "1267653329"
}