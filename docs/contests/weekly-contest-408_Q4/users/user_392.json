{
    "username": "singh_3662",
    "submission": "class Solution {\n    public int bfs(List<List<Integer>> graph, int start, int target1, int target2, int nodes) {\n        Queue<Integer> q = new LinkedList<>();\n        boolean[] visited = new boolean[nodes + 4];\n        q.offer(start);\n        visited[start] = true;\n\n        while (!q.isEmpty()) {\n            int u = q.poll();\n            for (int v : graph.get(u)) {\n                if (!visited[v]) {\n                    q.offer(v);\n                    visited[v] = true;\n                }\n            }\n        }\n        return visited[target1] || visited[target2] ? 1 : 0;\n    }\n\n    public boolean canReachCorner(int X, int Y, int[][] circles2) {\n        int numCircles = circles2.length;\n        List<int[]> circles = new ArrayList<>(numCircles);\n        List<List<Integer>> graph = new ArrayList<>(numCircles + 4);\n\n        for (int i = 0; i < numCircles + 4; ++i) {\n            graph.add(new ArrayList<>());\n        }\n\n        for (int i = 0; i < numCircles; ++i) {\n            circles.add(new int[]{circles2[i][0], circles2[i][1], circles2[i][2]});\n        }\n\n        for (int i = 0; i < numCircles; ++i) {\n            int xi = circles.get(i)[0];\n            int yi = circles.get(i)[1];\n            int ri = circles.get(i)[2];\n\n            if (xi <= ri) {\n                graph.get(numCircles).add(i);\n                graph.get(i).add(numCircles);\n            }\n            if (X - xi <= ri) {\n                graph.get(numCircles + 2).add(i);\n                graph.get(i).add(numCircles + 2);\n            }\n            if (yi <= ri) {\n                graph.get(numCircles + 1).add(i);\n                graph.get(i).add(numCircles + 1);\n            }\n            if (Y - yi <= ri) {\n                graph.get(numCircles + 3).add(i);\n                graph.get(i).add(numCircles + 3);\n            }\n\n            for (int j = i + 1; j < numCircles; ++j) {\n                int xj = circles.get(j)[0];\n                int yj = circles.get(j)[1];\n                int rj = circles.get(j)[2];\n\n                double distance = Math.sqrt(Math.pow(xi - xj, 2) + Math.pow(yi - yj, 2));\n                int radiusSum = ri + rj;\n\n                if (radiusSum >= distance) {\n                    graph.get(i).add(j);\n                    graph.get(j).add(i);\n                }\n            }\n        }\n        int res = 0;\n        res = Math.max(res, bfs(graph, numCircles, numCircles + 1, numCircles + 2, numCircles + 4));\n        res = Math.max(res, bfs(graph, numCircles + 3, numCircles + 2, numCircles + 1, numCircles + 4));\n        return res == 0;\n    }\n}\n",
    "submit_ts": "1722137561",
    "subm_id": "1335767342"
}