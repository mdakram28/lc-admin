{
    "username": "tiger212",
    "submission": "class Solution {\npublic:\n    vector<vector<int>> cnts;\n    int calc(int l, int r) {\n        unsigned base = 1;\n        int ans = 0;\n        for (int i = 0; i < 31; ++i) {\n            if ((cnts[r][i] - cnts[l][i]) == (r - l))\n                ans += base;\n            base <<= 1;\n        }\n        return ans;\n    }\n    long long countSubarrays(vector<int>& nums, int k) {\n        using ll = long long;\n        ll n = nums.size(), ans = 0;\n        vector<int> cnt(32, 0);\n        cnts.reserve(n + 1);\n        cnts.push_back(cnt);\n        for (int i = 0; i < n; ++i) {\n            int bit = 0;\n            while (nums[i] > 0) {\n                cnt[bit++] += nums[i] & 1;\n                nums[i] >>= 1;\n            }\n            cnts.emplace_back(cnt);\n        }\n        for (int left = 0; left < n; ++left) {\n            int l = left + 1, r = n + 1, lb, rb;\n            // find left bound\n            while (r > l) {\n                int m = (r + l) >> 1;\n                int anded = calc(left, m);\n                if (anded < k)\n                    r = m;\n                else if (anded > k)\n                    l = m + 1;\n                else\n                    r = m;\n            }\n            lb = l;\n            // find right bound\n            l = left + 1; r = n + 1;\n            while (r > l) {\n                int m = (r + l) >> 1;\n                int anded = calc(left, m);\n                if (anded < k)\n                    r = m;\n                else if (anded > k)\n                    l = m + 1;\n                else\n                    l = m + 1;\n            }\n            rb = l-1;\n            rb -= lb;\n            ans += rb + 1;\n        }\n        return ans;\n    }\n};",
    "submit_ts": "1720279145",
    "subm_id": "544566166"
}