{
    "username": "Voilet",
    "submission": "import java.util.ArrayList;\nimport java.util.List;\n\nclass Solution {\n    public List<Integer> countOfPeaks(int[] nums, int[][] queries) {\n        SegmentTree st = new SegmentTree();\n        int n = nums.length;\n        boolean[] is = new boolean[n];\n        for (int i = 1; i < n - 1; i++) {\n            if (nums[i] > Math.max(nums[i - 1], nums[i + 1])) {\n                st.update(i, i, 1);\n                is[i] = true;\n            }\n        }\n        List<Integer> list = new ArrayList<>();\n        for (int[] q : queries) {\n            if (q[0] == 1) {\n                list.add((int) st.query(q[1] + 1, q[2] - 1));\n            } else {\n                int i = q[1], x = q[2];\n                nums[i] = x;\n                if (is[i]) {\n                    if (nums[i] <= Math.max(nums[i - 1], nums[i + 1])) {\n                        is[i] = false;\n                        st.update(i, i, -1);\n                    }\n                } else {\n                    if ((i > 0 && i < n - 1) && nums[i] > Math.max(nums[i - 1], nums[i + 1])) {\n                        is[i] = true;\n                        st.update(i, i, 1);\n                    }\n                }\n                if (i - 1 > 0) {\n                    if (is[i - 1] && nums[i - 1] <= Math.max(nums[i - 2], nums[i])) {\n                        is[i - 1] = false;\n                        st.update(i - 1, i - 1, -1);\n                    } else if (!is[i - 1] && nums[i - 1] > Math.max(nums[i - 2], nums[i])) {\n                        is[i - 1] = true;\n                        st.update(i - 1, i - 1, 1);\n                    }\n                }\n                if (i + 1 < n - 1) {\n                    if (is[i + 1] && nums[i + 1] <= Math.max(nums[i], nums[i + 2])) {\n                        is[i + 1] = false;\n                        st.update(i + 1, i + 1, -1);\n                    } else if (!is[i + 1] && nums[i + 1] > Math.max(nums[i], nums[i + 2])) {\n                        is[i + 1] = true;\n                        st.update(i + 1, i + 1, 1);\n                    }\n                }\n            }\n        }\n        return list;\n    }\n}\n\nclass SegmentTree {\n    static class Node {\n        Node left, right;\n        long val, add;\n    }\n\n    Node root;\n    int N = (int) 1e9;\n\n    public SegmentTree() {\n        root = new Node();\n    }\n\n    public void update(int left, int right, long val) {\n        update(root, 0, N, left, right, val);\n    }\n\n    private void update(Node node, int start, int end, int left, int right, long val) {\n        if (left <= start && right >= end) {\n            node.val += (end - start + 1) * val;\n            node.add = val;\n            return;\n        }\n        int mid = start + (end - start) / 2;\n        pushDown(node, mid - start + 1, end - mid);\n        if (left <= mid) update(node.left, start, mid, left, right, val);\n        if (right > mid) update(node.right, mid + 1, end, left, right, val);\n        pushUp(node);\n    }\n\n    public long query(int left, int right) {\n        if (left > right) {\n            return 0;\n        }\n        return query(root, 0, N, left, right);\n    }\n\n    private long query(Node node, int start, int end, int left, int right) {\n        if (left <= start && right >= end) {\n            return node.val;\n        }\n        int mid = start + (end - start) / 2;\n        pushDown(node, mid - start + 1, end - mid);\n        long res = 0;\n        if (left <= mid) res += query(node.left, start, mid, left, right);\n        if (right > mid) res += query(node.right, mid + 1, end, left, right);\n        return res;\n    }\n\n    private void pushUp(Node node) {\n        node.val = node.left.val + node.right.val;\n    }\n\n\n    private void pushDown(Node node, int leftNum, int rightNum) {\n        if (node.left == null) node.left = new Node();\n        if (node.right == null) node.right = new Node();\n        if (node.add == 0) return;\n        node.left.val += node.add * leftNum;\n        node.right.val += node.add * rightNum;\n        node.left.add += node.add;\n        node.right.add += node.add;\n        node.add = 0;\n    }\n}",
    "submit_ts": 1718507522.0
}