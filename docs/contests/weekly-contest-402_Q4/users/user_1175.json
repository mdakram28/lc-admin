{
    "username": "abhinavprkash",
    "submission": "class SegmentTree\n{\npublic:\n  SegmentTree(const vector<int> &data, function<int(int, int)> func, int default_val)\n      : _data(data), _func(func), _default(default_val)\n  {\n    _size = data.size();\n    _tree.resize(2 * _size, _default);\n    build();\n  }\n\n  void update(int pos, int value)\n  {\n    pos += _size;\n    _tree[pos] = value;\n    while (pos > 1)\n    {\n      pos /= 2;\n      _tree[pos] = _func(_tree[2 * pos], _tree[2 * pos + 1]);\n    }\n  }\n\n  int query(int left, int right)\n  {\n    left += _size;\n    right += _size;\n    int res = _default;\n    while (left < right)\n    {\n      if (left % 2 == 1)\n      {\n        res = _func(res, _tree[left]);\n        left++;\n      }\n      if (right % 2 == 1)\n      {\n        right--;\n        res = _func(res, _tree[right]);\n      }\n      left /= 2;\n      right /= 2;\n    }\n    return res;\n  }\n\nprivate:\n  vector<int> _data;\n  vector<int> _tree;\n  function<int(int, int)> _func;\n  int _default;\n  int _size;\n\n  void build()\n  {\n    for (int i = 0; i < _size; ++i)\n    {\n      _tree[_size + i] = _data[i];\n    }\n    for (int i = _size - 1; i > 0; --i)\n    {\n      _tree[i] = _func(_tree[2 * i], _tree[2 * i + 1]);\n    }\n  }\n};\n\nclass Solution\n{\npublic:\n  bool is_peak(const vector<int>& nums, int i) {\n    return 0 < i && i < nums.size() - 1 && nums[i - 1] < nums[i] && nums[i] > nums[i + 1];\n}\n\nvector<int> initial_peaks(const vector<int>& nums) {\n    vector<int> peaks(nums.size(), 0);\n    for (int i = 0; i < nums.size(); ++i) {\n        peaks[i] = is_peak(nums, i) ? 1 : 0;\n    }\n    return peaks;\n}\n\nvoid handle_update(vector<int>& nums, SegmentTree& seg_tree, int index, int val) {\n    nums[index] = val;\n    for (int idx : {index - 1, index, index + 1}) {\n        if (0 < idx && idx < nums.size() - 1) {\n            seg_tree.update(idx, is_peak(nums, idx) ? 1 : 0);\n        }\n    }\n}\n\nint handle_query(SegmentTree& seg_tree, int li, int ri) {\n    return seg_tree.query(li + 1, ri);\n}\n\nvector<int> countOfPeaks(vector<int>& nums, vector<vector<int>>& queries) {\n    vector<int> peak_counts = initial_peaks(nums);\n    SegmentTree seg_tree(peak_counts, [](int x, int y) { return x + y; }, 0);\n\n    vector<int> results;\n\n    for (const auto& query : queries) {\n        if (query[0] == 2) {\n            handle_update(nums, seg_tree, query[1], query[2]);\n        } else if (query[0] == 1) {\n            results.push_back(handle_query(seg_tree, query[1], query[2]));\n        }\n    }\n\n    return results;\n}\n};",
    "submit_ts": 1718509111.0
}