{
    "username": "dekatuna",
    "submission": "class Solution {\n\npublic:\n    int bfs(vector<vector<int>> &graph, int start, int target1, int target2, int nodes) {\n    vector<int> vis(nodes + 4, 0);\n    queue<int> q;\n    q.push(start);\n    vis[start] = 1;\n    \n    while (!q.empty()) {\n        int i = q.front();\n        q.pop();\n        for (int j : graph[i]) {\n            if (!vis[j]) {\n                q.push(j);\n                vis[j] = 1;\n            }\n        }\n    }\n    return vis[target1] || vis[target2];\n}\n    \n    bool canReachCorner(int X, int Y, vector<vector<int>>& circles2) {\n        vector<pair<pair<int, int>, int>> circles(circles2.size());\n        vector<vector<int>> g(circles2.size() + 4);\n        int num = circles2.size();\n        \n        for (int i = 0; i < num; i++) {\n            circles[i].first.first=circles2[i][0];\n            circles[i].first.second=circles2[i][1];\n            circles[i].second=circles2[i][2];\n        }\n        for (int i = 0; i < num; i++) {\n            if (circles[i].first.first <= circles[i].second) {\n                g[num].push_back(i);\n                g[i].push_back(num);\n            }\n            if (X - circles[i].first.first <= circles[i].second) {\n                g[num + 2].push_back(i);\n                g[i].push_back(num + 2);\n            }\n            if (circles[i].first.second <= circles[i].second) {\n                g[num + 1].push_back(i);\n                g[i].push_back(num + 1);\n            }\n            if (Y - circles[i].first.second <= circles[i].second) {\n                g[num + 3].push_back(i);\n                g[i].push_back(num + 3);\n            }\n            for (int j = i + 1; j < num; j++) {\n                double dis = sqrt(pow(circles[i].first.first - circles[j].first.first, 2) +\n                                       pow(circles[i].first.second - circles[j].first.second, 2));\n                int radius = circles[i].second + circles[j].second;\n                if (radius >= dis) {\n                    g[i].push_back(j);\n                    g[j].push_back(i);\n                }\n            }\n        }\n        \n        int blocked = 0;\n        blocked = max(blocked, bfs(g, num, num + 1, num + 2, num + 4));\n        blocked = max(blocked, bfs(g, num + 3, num + 2, num + 1, num + 4));\n        if (blocked) return false;\n        return true;\n       \n    }\n};",
    "submit_ts": "1722137355",
    "subm_id": "1335761387"
}