{
    "username": "Namakian",
    "submission": "class Solution {\npublic:\n    \n    typedef long long LL;\n    \n    static const int N = 5*1e4 + 10;\n    int M = 1e9+7;\n    \n    struct node {\n      LL LR, Lr,lR,lr;\n      node(LL LR, LL Lr, LL lR, LL lr) : LR(LR), Lr(Lr), lR(lR),  lr(lr) {}\n    node () {}\n    };\n\n    node seg[4 * N];\n\n    node merge(const node &n1, const node &n2) {\n      node p;\n      p.LR = max({n1.LR + n2.lR, n1.Lr + n2.LR, n1.Lr + n2.lR});\n      p.lR = max({n1.lR + n2.lR, n1.lr + n2.LR, n1.lr + n2.lR});\n      p.Lr = max({n1.LR + n2.lr, n1.Lr + n2.Lr, n1.Lr + n2.lr});\n      p.lr = max({n1.lR + n2.lr, n1.lr + n2.Lr, n1.lr + n2.Lr, 0LL});\n      return p;\n    }\n    \n    void build(int ind, int L, int R,const vector<int>& arr) {\n      if (L == R) {\n        seg[ind] = node(arr[L], 0,0,0);\n        return;\n      }\n\n      int mid = (L + R) / 2;\n      build(2 * ind, L, mid, arr);\n      build(2 * ind + 1, mid + 1, R, arr);\n      seg[ind] = merge(seg[2 * ind], seg[2 * ind + 1]);\n    }\n\n    void update(int ind, int L, int R, int k, int val) {\n      if (L == R) {\n        seg[ind] = node(val, 0,0,0) ;\n        return;\n      }\n\n      int mid = (L + R) / 2;\n      if (k <= mid) {\n        update(2 * ind, L, mid, k, val);\n      } else {\n        update(2 * ind + 1, mid + 1, R, k, val);\n      }\n      seg[ind] = merge(seg[2 * ind], seg[2 * ind + 1]);\n      return;\n    }\n    \n    \n    LL get_max() {\n        return max({seg[1].LR, seg[1].Lr, seg[1].lR, seg[1].lr, 0LL});\n    }\n\n    \n    int maximumSumSubsequence(vector<int>& nums, vector<vector<int>>& queries) {\n        int n = nums.size();\n        build(1, 0, n-1, nums);\n        \n        LL ans = 0;\n        \n        for(auto& q : queries) {\n            update(1,0,n-1,q[0], q[1]);\n            ans = (ans +  get_max())%M;\n        }\n        \n        return ans;\n        \n    }\n};",
    "submit_ts": 1716694519.0
}