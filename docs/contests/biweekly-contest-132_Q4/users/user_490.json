{
    "username": "sachinsharma42",
    "submission": "from collections import defaultdict\n\nclass Solution:\n    def maximumLength(self, nums: List[int], maxTransitions: int) -> int:\n        n = len(nums)\n        dp = [[1] * (maxTransitions + 1) for _ in range(n)]\n        longest_sequence_length = 1\n        max_transition_lengths = [-1] * (maxTransitions + 1)\n        num_occurrences_per_transition = [defaultdict(int) for _ in range(maxTransitions + 1)]\n        \n        for i in range(n):\n            for j in range(maxTransitions + 1):\n                for transition_count in range(j):\n                    dp[i][j] = max(dp[i][j], 1 + max_transition_lengths[transition_count])\n                \n                if nums[i] in num_occurrences_per_transition[j]:\n                    dp[i][j] = max(dp[i][j], 1 + num_occurrences_per_transition[j][nums[i]])\n                \n                longest_sequence_length = max(longest_sequence_length, dp[i][j])\n                \n            for j in range(maxTransitions + 1):\n                max_transition_lengths[j] = max(max_transition_lengths[j], dp[i][j])\n                num_occurrences_per_transition[j][nums[i]] = max(num_occurrences_per_transition[j][nums[i]], dp[i][j])\n                \n        return longest_sequence_length\n",
    "submit_ts": 1717862097.0
}