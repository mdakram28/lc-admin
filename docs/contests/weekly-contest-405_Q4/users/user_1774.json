{
    "username": "A_S_",
    "submission": "struct TrieNode {\n    unordered_map<char, TrieNode*> children;\n    vector<int> wordIndices;\n};\n\nclass Trie {\npublic:\n    Trie() {\n        root = new TrieNode();\n    }\n\n    void insert(const string& word, int index) {\n        TrieNode* node = root;\n        for (char c : word) {\n            if (!node->children.count(c)) {\n                node->children[c] = new TrieNode();\n            }\n            node = node->children[c];\n        }\n        node->wordIndices.push_back(index);\n    }\n\n    TrieNode* getRoot() {\n        return root;\n    }\n\nprivate:\n    TrieNode* root;\n};\n\nclass Solution {\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int targetLen = target.size();\n        vector<int> dp(targetLen + 1, INT_MAX);\n        dp[0] = 0;\n\n        Trie trie;\n        for (int i = 0; i < words.size(); ++i) {\n            trie.insert(words[i], i);\n        }\n\n        for (int i = 0; i < targetLen; ++i) {\n            if (dp[i] == INT_MAX) continue;\n\n            TrieNode* node = trie.getRoot();\n            for (int j = i; j < targetLen; ++j) {\n                if (!node->children.count(target[j])) break;\n                node = node->children[target[j]];\n                for (int index : node->wordIndices) {\n                    int wordLen = words[index].size();\n                    if (j + 1 - i == wordLen) {\n                        dp[j + 1] = min(dp[j + 1], dp[i] + costs[index]);\n                    }\n                }\n            }\n        }\n\n        return dp[targetLen] == INT_MAX ? -1 : dp[targetLen];\n    }\n};",
    "submit_ts": "1720322946",
    "subm_id": "1312363353"
}