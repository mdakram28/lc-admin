{
    "username": "PeacefulGuy",
    "submission": "import java.util.Arrays;\nimport java.util.Collections;\n\nclass Solution {\n    public long minimumCost(int m, int n, int[] horizontalCut, int[] verticalCut) {\n        // Convert int[] to Integer[] for sorting in descending order\n        Integer[] hCuts = Arrays.stream(horizontalCut).boxed().toArray(Integer[]::new);\n        Integer[] vCuts = Arrays.stream(verticalCut).boxed().toArray(Integer[]::new);\n\n        // Sort the cuts in descending order\n        Arrays.sort(hCuts, Collections.reverseOrder());\n        Arrays.sort(vCuts, Collections.reverseOrder());\n\n        long totalCost = 0;\n        int hSegments = 1, vSegments = 1;\n        int hIndex = 0, vIndex = 0;\n\n        // Process the cuts\n        while (hIndex < hCuts.length && vIndex < vCuts.length) {\n            if (hCuts[hIndex] >= vCuts[vIndex]) {\n                totalCost += (long) hCuts[hIndex] * vSegments;\n                hSegments++;\n                hIndex++;\n            } else {\n                totalCost += (long) vCuts[vIndex] * hSegments;\n                vSegments++;\n                vIndex++;\n            }\n        }\n\n        // If there are remaining horizontal cuts\n        while (hIndex < hCuts.length) {\n            totalCost += (long) hCuts[hIndex] * vSegments;\n            hSegments++;\n            hIndex++;\n        }\n\n        // If there are remaining vertical cuts\n        while (vIndex < vCuts.length) {\n            totalCost += (long) vCuts[vIndex] * hSegments;\n            vSegments++;\n            vIndex++;\n        }\n\n        return totalCost;\n    }\n}\n",
    "submit_ts": "1720926805",
    "subm_id": "1320296841"
}