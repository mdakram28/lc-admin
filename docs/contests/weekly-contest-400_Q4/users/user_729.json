{
    "username": "pranil27",
    "submission": "const int INF=INT_MAX;\nclass SegmentTree {\npublic:\n    vector<int> seg;\n    int n;\n\n    // Constructor\n    SegmentTree(vector<int>& arr)\n    {\n        n = arr.size();\n        seg.resize(4 * n);\n        build(arr, 0, 0, n - 1);\n    }\n\n    // Function to build the Segment Tree\n    void build(vector<int>& arr, int node, int start,\n               int end)\n    {\n        if (start == end) {\n            seg[node] = arr[start];\n        }\n        else {\n            int mid = (start + end) / 2;\n            build(arr, 2 * node + 1, start, mid);\n            build(arr, 2 * node + 2, mid + 1, end);\n\n            // bitwise AND of the children nodes\n            seg[node]\n                = seg[2 * node + 1] & seg[2 * node + 2];\n        }\n    }\n\n    int query(int l, int r,int node, int start, int end )\n    {\n        if (r < start || end < l) {\n            return INF;\n        }\n        if (l <= start && end <= r) {\n            return seg[node];\n        }\n        int mid = (start + end) / 2;\n        int p1 = query(l,r,2 * node + 1, start, mid);\n        int p2 = query(l,r,2 * node + 2, mid + 1, end);\n\n        return p1 & p2;\n    }\n};\n\n\n\nclass Solution {\npublic:\n    int minimumDifference(vector<int>& nums, int k) {\n        int n = nums.size();\n    SegmentTree st(nums);\n    int ans = INF;\n    for (int i = 0; i < n; i++) {\n        int low = i - 1, high = n - 1, mid;\n        while (high > low + 1) {\n            mid = (low + high) / 2;\n            if (st.query(i, mid,0,0,n-1) >= k)\n                low = mid;\n            else\n                high = mid;\n        }\n        if (low != i - 1)\n            ans = min(ans, abs(st.query(i, low,0,0,n-1) - k));\n        ans = min(ans, abs(k - st.query(i, high,0,0,n-1)));\n    }\n    return ans;\n    }\n};",
    "submit_ts": 1717299763.0
}