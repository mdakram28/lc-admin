{
    "username": "Brian Ahaneku",
    "submission": "class Solution:\n    def maximumValueSum(self, board: List[List[int]]) -> int:\n        print(board)\n        dp = {}\n        m, n = len(board), len(board[0])\n        ret = -float('inf')\n        best = []\n        for r in range(m):\n            best.append([])\n            a = r\n            b = 0\n            d = None\n            e = None\n            f, g = None, None\n            y, z = None, None\n            for c in range(1, n):\n                if board[r][c] > board[a][b]:\n                    y, z = f, g\n                    f, g = d, e\n                    d, e = a, b\n                    a, b = r, c\n                elif d is None or board[r][c] > board[d][e]:\n                    y, z = f, g\n                    f, g = d, e\n                    d, e = r, c\n                elif f is None or board[r][c] > board[f][g]:\n                    y, z = f, g\n                    f, g = r, c\n                elif y is None or board[r][c] > board[y][z]:\n                    y, z = r, c\n            arr = [(a, b), (d, e), (f, g), (y, z)]\n            for h, j in arr:\n                if h is not None:\n                    best[-1].append((h, j, board[h][j]))\n        for r in range(m):\n            for c in range(n):\n                items = []\n                for i in range(m):\n                    if i != r:\n                        items.extend(best[i])\n                #print(r, c)\n                items.sort(key = lambda x: x[-1])\n                #print(items)\n                j = len(items) - 1\n                i = j - 1\n                while j >= 0:\n                    row, col, val = items[j]\n                    if row == r or col == c:\n                        j -= 1\n                    else:\n                        i = j - 1\n                        while i >= 0:\n                            row2, col2, val2 = items[i]\n                            if row2 == row or row2 == r or col2 == col or col2 == c:\n                                i -= 1\n                            else:\n                                ret = max(ret, board[r][c] + val + val2)\n                                break\n                        j -= 1\n        return ret",
    "submit_ts": "1723908895",
    "subm_id": "1359171491"
}