{
    "username": "whattttttttt",
    "submission": "class Solution {\nprivate:\n      int dfs(int u , int pu , int &maxi , vector<vector<int>> &g){\n            int h1 = 0 , h2 = 0;\n            for(int v : g[u]){\n                  if(v != pu){\n                        int h = dfs(v , u , maxi , g);\n                        if(h >= h1) h2 = h1 , h1 = h;\n                        else if(h >= h2) h2 = h;\n                  }\n            }\n            maxi = max(maxi , h1 + h2);\n            return 1 + max(h1 , h2);\n      }\n      int D(vector<vector<int>> &edges){\n            int n = edges.size() + 1;\n            vector<vector<int>> g(n + 5);\n            for(vector<int> &e : edges) g[e[0]].push_back(e[1]) , g[e[1]].push_back(e[0]);\n            int maxi = 0;\n            dfs(0 , -1 , maxi , g);\n            return maxi;\n      }\npublic:\n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2){\n        int d1 = D(edges1) , d2 = D(edges2);\n        return max({d1 , d2 , (1+d1)/2 + 1 + (1+d2)/2});\n    }\n};",
    "submit_ts": "1719716766",
    "subm_id": "1304373489"
}