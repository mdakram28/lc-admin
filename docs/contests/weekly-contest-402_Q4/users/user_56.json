{
    "username": "vassu118",
    "submission": "\n#define _l 2 * i + 1\n#define _r 2 * i + 2\n\ntemplate <typename T>\nclass Seg{\n    public:\n    int n;\n    T init;\n    vector<T> seg;\n    Seg(int _n, T _init) {\n        init = _init;\n        n = _n;\n        seg = vector<T> (4 * n, init);\n    }\n\n    T get(T a, T b) {\n        return a + b;\n    }\n\n    void build(vector<T> &a, int l, int r, int i = 0) {\n        if(l == r) {\n            seg[i] = a[l];\n            return;\n        }\n        int mid = (l + r) / 2;\n        build(a, l, mid, _l);\n        build(a, mid + 1, r, _r);\n        seg[i] = get(seg[_l], seg[_r]);\n    }\n    void build(vector<T> &a){\n        int sz = a.size();\n        build(a, 0, sz - 1, 0);\n    }\n\n    void update(int l, int r, int idx, T val, int i = 0) {\n        if(l == r) {\n            seg[i] = val;\n            return;\n        }\n        int mid = (l + r) / 2;\n        if(idx <= mid) update(l, mid, idx, val, _l);\n        else update(mid + 1, r, idx, val, _r);\n        seg[i] = get(seg[_l], seg[_r]);\n    }\n    void update(int idx, T val) {\n        update(0, n - 1, idx, val, 0);\n    }\n\n    T query(int l, int r, int ql, int qr, int i = 0) {\n        if(l > r || l > qr || r < ql) return init;\n        if(l >= ql && r <= qr) return seg[i];\n        int mid = (l + r) / 2;\n        return get(query(l, mid, ql, qr, _l), query(mid + 1, r, ql, qr, _r));\n    }\n\n    T query(int ql, int qr) {\n        return query(0, n - 1, ql, qr, 0);\n    }\n};\n\n\n\nclass Solution {\npublic:\n    vector<int> countOfPeaks(vector<int>& nums, vector<vector<int>>& queries) {\n        int n = nums.size();\n        Seg<int> seg(n, 0);\n        for(int i=1;i<n-1;i++) {\n            if(nums[i] > nums[i - 1] && nums[i] > nums[i + 1]) seg.update(i, 1);\n        }\n        vector<int> ans;\n        for(auto it : queries) {\n            if(it[0] == 1) {\n                int l = it[1], r = it[2];\n                ans.push_back(seg.query(l + 1, r - 1));\n            }\n            else {\n                int idx = it[1], val = it[2];\n                nums[idx] = val;\n                if(idx > 0 && idx < n - 1 && nums[idx] > nums[idx - 1] && nums[idx] > nums[idx + 1]) seg.update(idx, 1);\n                else seg.update(idx, 0);\n                idx += 1;\n                if(idx > 0 && idx < n - 1 && nums[idx] > nums[idx - 1] && nums[idx] > nums[idx + 1]) seg.update(idx, 1);\n                else seg.update(idx, 0);\n                idx -= 2;\n                if(idx > 0 && idx < n - 1 && nums[idx] > nums[idx - 1] && nums[idx] > nums[idx + 1]) seg.update(idx, 1);\n                else seg.update(idx, 0);\n            }\n        }\n        return ans;\n    }\n};",
    "submit_ts": 1718506061.0
}