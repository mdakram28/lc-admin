{
    "username": "hero777",
    "submission": "#include <ext/pb_ds/assoc_container.hpp> // Common file  \n#include <ext/pb_ds/tree_policy.hpp>  \n#include <functional> // for less  \n#include <iostream>  \nusing namespace __gnu_pbds;  \nusing namespace std;  \n\ntypedef tree<int, null_type, less<int>, rb_tree_tag,  \n            tree_order_statistics_node_update>  \n    ordered_set; \n\nclass Solution {\npublic:\n    void _peak_update(vector<int> &nums, ordered_set &peaks, int index){\n        //cout << index << '\\n';\n        if(index < 1 || index >= nums.size() - 1)\n            return;\n        if(nums[index] > nums[index-1] && nums[index] > nums[index+1]){\n                //cout << index << \"p\\n\";\n                peaks.insert(index);\n        }\n            else{\n                if(peaks.find(index) != peaks.end()){\n                    //cout << index <<\"r\\n\";\n                    peaks.erase(index);\n                    //cout << peaks.size() << \"s\\n\";\n                }\n            }\n        return;\n    }\n    void peak_update(vector<int> &nums, ordered_set &peaks, int index, int value){\n        if(nums[index] == value)\n            return;\n        nums[index] = value;\n        _peak_update(nums, peaks, index);\n        _peak_update(nums, peaks, index-1);\n        _peak_update(nums, peaks, index+1);\n    }\n    int count_update(ordered_set &peaks, int left, int right){\n        //cout << peaks.size() << \"cu\\n\";\n        if(right-left <= 1)\n            return 0;\n        //cout << peaks.order_of_key(right) << ' ' << peaks.order_of_key(left) << '\\n';\n        return peaks.order_of_key(right) - peaks.order_of_key(left+1);\n    }\n    vector<int> countOfPeaks(vector<int>& nums, vector<vector<int>>& queries) {\n        ordered_set peaks;\n        for(int i = 1; i < nums.size()-1; i++){\n            if((nums[i] > nums[i-1]) && (nums[i] > nums[i+1]))\n                peaks.insert(i);\n        }\n        vector<int> ans;\n        for(vector<int> q: queries){\n            if(q[0] == 2){\n                peak_update(nums, peaks, q[1], q[2]);\n            }\n            else{\n                ans.push_back(count_update(peaks, q[1], q[2]));\n            }\n        }\n        return ans;\n    }\n};",
    "submit_ts": 1718508152.0
}