{
    "username": "aditya1117",
    "submission": "class Solution {\n    public int maximumLength(int[] ar, int k) {\n        int n = ar.length;\n        int[][] dp = new int[n][k + 1];\n        for (int i = 0; i < n; i++) Arrays.fill(dp[i], 1);\n        int sol = 1;\n        int[] arr = new int[k + 1];\n        Arrays.fill(arr, -1);\n        List<Map<Integer, Integer>> li = new ArrayList<>();\n        for (int i = 0; i <= k; i++) {\n            li.add(new HashMap<>());\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j <= k; j++) {\n                for (int l = 0; l < j; l++) dp[i][j] = Math.max(dp[i][j], 1 + arr[l]);\n                if (li.get(j).containsKey(ar[i])) dp[i][j] = Math.max(dp[i][j], 1 + li.get(j).get(ar[i]));\n                sol = Math.max(sol, dp[i][j]);\n            }\n            for (int j = 0; j <= k; j++) {\n                arr[j] = Math.max(arr[j], dp[i][j]);\n                li.get(j).put(ar[i], Math.max(li.get(j).getOrDefault(ar[i], 0), dp[i][j]));\n            }\n        }\n        return sol;\n    }\n}",
    "submit_ts": 1717861622.0
}