{
    "username": "vermachakshu",
    "submission": "typedef long long ll;\n#define all(v) v.begin(),v.end()\nstruct Node {\n    ll val; // store more info if required\n    Node() { // Identity Element\n        val = (1LL << 32) - 1;\n    }\n    Node(ll v) {\n        val = v;\n    }\n    void merge(Node &l, Node &r) {\n        val = l.val & r.val;\n    }\n};\n\nstruct SparseTable {\n    vector<vector<Node>> table;\n    vector<ll> logValues;\n    int n;\n    int maxLog;\n    vector<ll> a;\n    void init(int n1, vector<ll> &arr) {\n        n = n1;\n        a = arr;\n        table.resize(n);\n        logValues.resize(n + 1);\n        maxLog = log2(n);\n        logValues[1] = 0;\n        for (int i = 2; i <= n; i++) {\n            logValues[i] = logValues[i / 2] + 1;\n        }\n        for (int i = 0; i < n; i++) {\n            table[i].resize(maxLog + 1);\n            fill(all(table[i]), Node());\n        }\n        build();\n    }\n    void build() {\n        for (int i = 0; i < n; i++) {\n            table[i][0] = Node(a[i]);\n        }\n        for (int i = 1; i <= maxLog; i++) {\n            for (int j = 0; (j + (1 << i)) <= n; j++) {\n                table[j][i].merge(table[j][i - 1], table[j + (1 << (i - 1))][i - 1]);\n            }\n        }\n    }\n\n    Node query(int left, int right) {\n        int j = logValues[right - left + 1];\n        Node ans = Node();\n        ans.merge(table[left][j], table[right - (1 << j) + 1][j]);\n        return ans;\n    }\n};\n\n\nclass Solution {\n    ll ans = INT_MAX;\npublic:\n    \n    int minimumDifference(vector<int>& nums, int k) {\n        int n = nums.size();\n        SparseTable st;\n        vector<ll> a(n);\n        for(int i=0; i<n; i++)  a[i] = nums[i];\n        st.init(n, a);\n        \n        vector<int> pos[31];\n        \n        for(int i=n-1; i>=0; i--){\n            for(int j=0; j<31; j++){\n                if((a[i]&(1LL<<j)) == 0){\n                    pos[j].push_back(i);\n                }\n            }\n        }\n        \n        for(int i=0; i<n; i++){\n            vector<int> x;\n            vector<int> unset;\n            for(int j=0; j<31; j++){\n                if((a[i]&(1LL<<j))){\n                    unset.push_back(j);\n                }\n            }\n            for(int bit:unset){\n                if(!pos[bit].empty()){\n                    x.push_back(pos[bit].back());\n                }\n            }\n            sort(all(x));\n            ll curr = st.query(i, i).val;\n            ans = min(ans, abs(curr - k));\n            for(int p:x){\n                curr = st.query(i, p).val;\n                ans = min(ans, abs(curr - k));\n            }\n            for(int j=0; j<31; j++){\n                if(!pos[j].empty() && pos[j].back() == i)  pos[j].pop_back();\n            }\n        }\n        \n        return ans;\n    }\n};",
    "submit_ts": "1717298997",
    "subm_id": "1274798403"
}