{
    "username": "amanankit06",
    "submission": "class Solution\n{\n\npublic:\n    int bfs(vector<vector<int>> &g, int st, int t1, int t2, int nodes)\n    {\n        queue<int> q;\n        vector<int> vs(nodes + 4, 0);\n        q.push(st);\n        vs[st] = 1;\n\n        while (!q.empty())\n        {\n            int u = q.front();\n            q.pop();\n            for (int v : g[u])\n            {\n                if (!vs[v])\n                {\n                    q.push(v);\n                    vs[v] = 1;\n                }\n            }\n        }\n        return vs[t1] || vs[t2];\n    }\n\n    bool canReachCorner(int X, int Y, vector<vector<int>> &c2)\n    {\n        vector<pair<pair<int, int>, int>> c1(c2.size());\n        vector<vector<int>> g(c2.size() + 4);\n        int n_cir = c2.size();\n\n        for (int i = 0; i < n_cir; ++i)\n        {\n            c1[i].first.first = c2[i][0];\n            c1[i].first.second = c2[i][1];\n            c1[i].second = c2[i][2];\n        }\n\n        for (int i = 0; i < n_cir; ++i)\n        {\n\n            if (c1[i].first.first <= c1[i].second)\n            {\n                g[n_cir].push_back(i);\n                g[i].push_back(n_cir);\n            }\n            if (X - c1[i].first.first <= c1[i].second)\n            {\n                g[n_cir + 2].push_back(i);\n                g[i].push_back(n_cir + 2);\n            }\n            if (c1[i].first.second <= c1[i].second)\n            {\n                g[n_cir + 1].push_back(i);\n                g[i].push_back(n_cir + 1);\n            }\n            if (Y - c1[i].first.second <= c1[i].second)\n            {\n                g[n_cir + 3].push_back(i);\n                g[i].push_back(n_cir + 3);\n            }\n            for (int j = i + 1; j < n_cir; ++j)\n            {\n                double dis = sqrt(pow(c1[i].first.first - c1[j].first.first, 2) +\n                                       pow(c1[i].first.second - c1[j].first.second, 2));\n                int rad_sum = c1[i].second + c1[j].second;\n                if (rad_sum >= dis)\n                {\n                    g[i].push_back(j);\n                    g[j].push_back(i);\n                }\n            }\n        }\n\n        int is_blck = 0;\n        is_blck = max(is_blck, bfs(g, n_cir, n_cir + 1, n_cir + 2, n_cir + 4));     \n        is_blck = max(is_blck, bfs(g, n_cir + 3, n_cir + 2, n_cir + 1, n_cir + 4)); \n        if (is_blck)\n        {\n            return false;\n        }\n        return true;\n    }\n};",
    "submit_ts": "1722137347",
    "subm_id": "1335761151"
}