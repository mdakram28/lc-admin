{
    "username": "yarragudi_bhavya",
    "submission": "class Solution {\npublic:\n    long long minimumCost(int m, int n, vector<int>& horizontalCut, vector<int>& verticalCut) {\n        priority_queue<int> hCuts(horizontalCut.begin(), horizontalCut.end());\n        priority_queue<int> vCuts(verticalCut.begin(), verticalCut.end());\n\n        int hPieces = 1; // number of horizontal pieces\n        int vPieces = 1; // number of vertical pieces\n        long long totalCost = 0; // Change to long long to prevent overflow\n\n        // Process cuts\n        while (!hCuts.empty() && !vCuts.empty()) {\n            if (hCuts.top() >= vCuts.top()) {\n                totalCost += static_cast<long long>(hCuts.top()) * vPieces;\n                hCuts.pop();\n                hPieces++;\n            } else {\n                totalCost += static_cast<long long>(vCuts.top()) * hPieces;\n                vCuts.pop();\n                vPieces++;\n            }\n        }\n\n        // Process any remaining cuts\n        while (!hCuts.empty()) {\n            totalCost += static_cast<long long>(hCuts.top()) * vPieces;\n            hCuts.pop();\n            hPieces++;\n        }\n        while (!vCuts.empty()) {\n            totalCost += static_cast<long long>(vCuts.top()) * hPieces;\n            vCuts.pop();\n            vPieces++;\n        }\n\n        return totalCost;\n    }\n};",
    "submit_ts": "1720925491",
    "subm_id": "1320256479"
}