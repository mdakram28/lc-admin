{
    "username": "samkhur006",
    "submission": "class Solution {\npublic:\n    void make_g(vector<vector<int>>& graph, vector<vector<int>>& edges)\n    {\n        for(auto& e:edges)\n        {\n            graph[e[0]].push_back(e[1]);\n            graph[e[1]].push_back(e[0]);\n        }\n    }\n    int get_furthest_node(vector<vector<int>>& graph)\n    {\n        queue<int> q;\n        q.push(0);\n        vector<int> visited(graph.size(),0);\n        visited[0]=1;\n        int last = 0;\n        while(q.size()>0)\n        {\n            int p = q.front();\n            q.pop();\n            last = p;\n            for(auto& nei:graph[p])\n                if(visited[nei]==0)\n                {\n                    visited[nei]=1;\n                    q.push(nei);\n                }\n        }\n        return last;\n    }\n    int get_distance(vector<vector<int>>& graph, int i)\n    {\n        queue<int> q;\n        q.push(i);\n        vector<int> visited(graph.size(),0);\n        visited[i]=1;\n        int cur=-1;\n        while(q.size()>0)\n        {\n            cur++;\n            \n            int s=q.size();\n            while(s>0)\n            {\n                s--;\n                int p = q.front();\n                q.pop();\n                \n                for(auto& nei:graph[p])\n                    if(visited[nei]==0)\n                    {\n                        visited[nei]=1;\n                        q.push(nei);\n                    }\n                \n            }\n        }\n        return cur;\n    }\n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n        int m = edges1.size()+1, n = edges2.size() + 1;\n        vector<vector<int>> graph1(m), graph2(n);\n        make_g(graph1, edges1);\n        make_g(graph2, edges2);\n        int a=get_furthest_node(graph1);\n        int d1 = get_distance(graph1, a);\n        int dd1=d1;\n        \n        int b=get_furthest_node(graph2);\n        \n        int d2 = get_distance(graph2, b);\n        int dd2 = d2;\n        \n        d1 = (d1+1)/2;\n        d2=(d2+1)/2;\n        return max({d1+d2+1, dd1,dd2});\n    }\n};",
    "submit_ts": "1719716807",
    "subm_id": "1304374571"
}