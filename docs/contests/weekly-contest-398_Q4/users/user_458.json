{
    "username": "Homie_Lander7",
    "submission": "class Solution\n{\npublic:\n    int waysToReachStair(int K)\n    {\n        // obs: cant jump more than 30 times\n        // cant perform down operation more than 31 times\n        // dp[i][j][2]=number of ways to reach stair K with i jumps and j down operations and 1 if last op was down else 0\n        // j<=i+1\n        auto get = [&](int i) -> int\n        {\n            return (1 << i);\n        };\n        vector<vector<vector<int>>> dp(31, vector<vector<int>>(32, vector<int>(2, -1)));\n        function<int(int, int, int)> solve = [&](int i, int j, int last) -> int\n        {\n            if (i > 30 || j > 31)\n                return 0;\n            if (j > i + 1)\n                return 0;\n            int &ans = dp[i][j][last];\n            if (ans != -1)\n                return ans;\n            ans = 0;\n            int we_at = get(i) - j;\n            if (we_at < 0)\n                return ans;\n            if (we_at == K)\n            {\n                ans = 1;\n            }\n            if (last == 0)\n            {\n                if (we_at > 0)\n                {\n                    ans += solve(i, j + 1, 1);\n                }\n                ans += solve(i + 1, j, 0);\n            }\n            else\n            {\n                ans += solve(i + 1, j, 0);\n            }\n            return ans;\n        };\n        return solve(0, 0, 0);\n    }\n};",
    "submit_ts": "1716088896",
    "subm_id": "1261827150"
}