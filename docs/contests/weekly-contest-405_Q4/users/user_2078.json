{
    "username": "Stark-123",
    "submission": "struct TrieNode {\n    unordered_map<char, TrieNode*> children;\n    vector<int> indexes; // Store the indexes of words that end at this node\n};\n\nclass Solution {\npublic:\n    TrieNode* root;\n\n    Solution() { root = new TrieNode(); }\n\n    // Insert word into the Trie with its index\n    void insert(const string& word, int index) {\n        TrieNode* node = root;\n        for (char c : word) {\n            if (!node->children.count(c)) {\n                node->children[c] = new TrieNode();\n            }\n            node = node->children[c];\n        }\n        node->indexes.push_back(index);\n    }\n\nint minimumCost(string target, vector<string>& words, vector<int>& costs) {\n    int n = target.length();\n    vector<int> dp(n + 1, INT_MAX);\n    dp[0] = 0; // Base case: the cost to form an empty string is 0\n\n    Solution trie;\n    for (int i = 0; i < words.size(); ++i) {\n        trie.insert(words[i], i);\n    }\n\n    for (int i = 0; i < n; ++i) {\n        if (dp[i] == INT_MAX)\n            continue; // Skip if this position is unreachable\n\n        TrieNode* node = trie.root;\n        for (int j = i; j < n; ++j) {\n            if (!node->children.count(target[j]))\n                break;\n            node = node->children[target[j]];\n            for (int index : node->indexes) {\n                int word_len = words[index].length();\n                if (j + 1 >= i + word_len) {\n                    dp[j + 1] = min(dp[j + 1], dp[i] + costs[index]);\n                }\n            }\n        }\n    }\n\n    return dp[n] == INT_MAX ? -1 : dp[n];\n}\n}\n;",
    "submit_ts": "1720321942",
    "subm_id": "1312336424"
}