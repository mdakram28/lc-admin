{
    "username": "neilchetty",
    "submission": "class Solution {\n    Integer[][] dp;\n    public int minFlips(int[][] grid) {\n        int m = grid.length, n = grid[0].length;\n        int count = 0, ones = 0, zero = 0;\n        List<int[]> list = new ArrayList<>();\n        for(int i = 0; i < (m+1)/2; i++) {\n            for(int j = 0; j < (n+1)/2; j++) {\n                int z = (grid[i][j] == 0 ? 1 : 0), o = (grid[i][j] == 1 ? 1 : 0), actual = 1;\n                if(m-1-i != i) {\n                    z += (grid[m-1-i][j] == 0 ? 1 : 0);\n                    o += (grid[m-1-i][j] == 1 ? 1 : 0);\n                    actual++;\n                }\n                if(n-1-j != j) {\n                    z += (grid[i][n-1-j] == 0 ? 1 : 0);\n                    o += (grid[i][n-1-j] == 1 ? 1 : 0);\n                    actual++;\n                }\n                if(m-1-i != i && n-1-j != j) {\n                    z += (grid[m-1-i][n-1-j] == 0 ? 1 : 0);\n                    o += (grid[m-1-i][n-1-j] == 1 ? 1 : 0);\n                    actual++;\n                }\n                list.add(new int[] {z, o, actual});\n            }\n        }\n        this.dp = new Integer[list.size() + 1][4];\n        // for(int[] ok : list) System.out.println(Arrays.toString(ok));\n        return helper(0, list, 0);\n    }\n    \n    private int helper(int index, List<int[]> list, int mod) {\n        if(index == list.size()) return mod == 0 ? 0 : (int)(1e9);\n        int ans = (int)(1e9);\n        if(this.dp[index][mod] != null) return this.dp[index][mod];\n        int[] cur = list.get(index);\n        ans = Math.min(ans, Math.min(Math.abs(cur[2]-cur[1]) + helper(index+1, list, (mod+cur[2])%4), Math.abs(cur[2]-cur[0]) + helper(index+1, list, mod)));\n        return this.dp[index][mod] = ans;\n    }\n}",
    "submit_ts": "1722698872",
    "subm_id": "1343194481"
}