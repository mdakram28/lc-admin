{
    "username": "SouvikG2003",
    "submission": "/*class Solution {\npublic:\n    int minimumDifference(std::vector<int>& nums, int k) {\n        std::vector<int> CNTZERO(32, 0);\n        std::function<void(int)> SUBTRACTION = [&](int CNTT) {\n            for (int i = 0; i < 32; ++i) {    if (((CNTT >> i) & 1) == 0)     CNTZERO[i] -= 1;}\n        };\n        std::function<void(int)> ADDITION = [&](int CNTT) {\n            for (int i = 0; i < 32; ++i) {\n                if (((CNTT >> i) & 1) == 0) {\n                    CNTZERO[i] += 1;\n                }\n            }\n        };\n        std::function<int()> EVALUATION = [&]() {\n            int ANSSSS = 0;\n            for (int i = 0; i < 32; ++i) {    if (CNTZERO[i] == 0)     ANSSSS ^= (1 << i);}\n            return ANSSSS;\n        };\n        int i = 0, n = nums.size(), CNT_RES = std::numeric_limits<int>::max();\n        for (int POINTER = 0; POINTER < n; ++POINTER) {\n            ADDITION(nums[POINTER]);\n            int CNTT = EVALUATION();\n            CNT_RES = std::min(CNT_RES, std::abs(CNTT - k));\n            while (i < POINTER && CNTT < k) {\n                SUBTRACTION(nums[i]);\n                ++i;\n                CNTT = EVALUATION();\n                CNT_RES = std::min(CNT_RES, std::abs(CNTT - k));\n            }\n        }\n        return CNT_RES;\n    }\n};*/\nclass Solution {\npublic:\n    int minimumDifference(std::vector<int>& nums, int k) {\n        std::vector<int> CNTZERO(32, 0);\n        std::function<void(int)> ADDITION = [&](int CNTT) {\n            for (int i = 0; i < 32; ++i) {    if (((CNTT >> i) & 1) == 0)    CNTZERO[i] += 1; }\n        };\n        std::function<void(int)> SUBTRACTION = [&](int CNTT) {\n            for (int i = 0; i < 32; ++i) {    if (((CNTT >> i) & 1) == 0)     CNTZERO[i] -= 1;}\n        };\n        \n        std::function<int()> EVALUATION = [&]() {\n            int ANSSSS = 0;\n            for (int i = 0; i < 32; ++i) {    if (CNTZERO[i] == 0)     ANSSSS ^= (1 << i);} return ANSSSS;\n        };\n        int i = 0, n = nums.size(), CNT_RES = std::numeric_limits<int>::max();\n        for (int POINTER = 0; POINTER < n; ++POINTER) {\n            ADDITION(nums[POINTER]);\n            int CNTT = EVALUATION();\n            CNT_RES = std::min(CNT_RES, std::abs(CNTT - k));\n            while (i < POINTER && CNTT < k) {    SUBTRACTION(nums[i]); ++i; CNTT = EVALUATION(); CNT_RES = std::min(CNT_RES, std::abs(CNTT - k));}\n        }\n        return CNT_RES;\n    }\n};\n\n\n",
    "submit_ts": 1717300222.0
}