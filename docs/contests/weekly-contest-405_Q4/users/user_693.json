{
    "username": "Gourav_1_2_3_",
    "submission": "class Solution {\n    \n    class TrieNode {\n    public:\n        bool isEnd;\n        int cost;\n        TrieNode* children[26];\n\n        TrieNode() {\n            isEnd = false;\n            cost = INT_MAX;\n            for (int i = 0; i < 26; ++i) {\n                children[i] = nullptr;\n            }\n        }\n    };\n\npublic:\n    TrieNode* root;\n\n    Solution() {\n        root = new TrieNode();\n    }\n\n    void insert(string& word, int cost) {\n        TrieNode* node = root;\n        for (char c : word) {\n            if (node->children[c - 'a'] == nullptr) {\n                node->children[c - 'a'] = new TrieNode();\n            }\n            node = node->children[c - 'a'];\n        }\n        node->isEnd = true;\n        node->cost = min(node->cost, cost); \n    }\n\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        for (int i = 0; i < words.size(); ++i) {\n            insert(words[i], costs[i]);\n        }\n        \n        int n = target.size();\n        vector<int> dp(n + 1, INT_MAX);\n        dp[0] = 0; \n\n        for (int i = 0; i < n; ++i) {\n            if (dp[i] == INT_MAX) continue; \n            TrieNode* node = root;\n            for (int j = i; j < n; ++j) {\n                if (node->children[target[j] - 'a'] == nullptr) break;\n                node = node->children[target[j] - 'a'];\n                if (node->isEnd) {\n                    dp[j + 1] = min(dp[j + 1], dp[i] + node->cost);\n                }\n            }\n        }\n\n        return dp[n] == INT_MAX ? -1 : dp[n];\n    }\n};",
    "submit_ts": "1720321789",
    "subm_id": "1312332343"
}