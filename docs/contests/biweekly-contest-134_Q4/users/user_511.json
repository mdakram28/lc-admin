{
    "username": "akshath07",
    "submission": "#include <vector>\n#include <iostream>\n\n#define ll long long\n\nclass Solution {\nprivate:\n    class segtree {\n    private:\n        std::vector<ll> seg;\n        ll def = ~0; // All bits set (for AND operation)\n        void operation(ll ind) { seg[ind] = (seg[2 * ind + 1] & seg[2 * ind + 2]); }\n        ll queryoperation(ll left, ll right) { return (left & right); }\n    public:\n        segtree(int n) { seg.resize(4 * n); } // 4*n should be sufficient\n        void build(ll ind, ll low, ll high, std::vector<ll>& v) {\n            if (low == high) { seg[ind] = v[low]; return; }\n            ll mid = (low + high) / 2;\n            build(2 * ind + 1, low, mid, v);\n            build(2 * ind + 2, mid + 1, high, v);\n            operation(ind);\n        }\n        ll query(ll ind, ll low, ll high, ll l, ll r) {\n            if (high < l || low > r) { return def; }\n            if (low >= l && high <= r) { return seg[ind]; }\n            ll mid = (low + high) / 2;\n            ll left = query(2 * ind + 1, low, mid, l, r);\n            ll right = query(2 * ind + 2, mid + 1, high, l, r);\n            return queryoperation(left, right);\n        }\n        void update(ll ind, ll low, ll high, ll i, ll val) {\n            if (low == high) { seg[ind] = val; return; }\n            if (low > i || high < i) { return; }\n            ll mid = (low + high) / 2;\n            if (i <= mid) { update(2 * ind + 1, low, mid, i, val); }\n            else { update(2 * ind + 2, mid + 1, high, i, val); }\n            operation(ind);\n        }\n    };\npublic:\n    long long countSubarrays(std::vector<int>& nums, int k) {\n        std::vector<ll> v(nums.begin(), nums.end());\n        ll n = nums.size();\n        segtree s(n);\n        s.build(0, 0, n - 1, v);\n        ll ans = 0;\n        for (ll i = 0; i < n; i++) {\n            if (k > v[i] || k < s.query(0, 0, n - 1, i, n - 1)) { continue; }\n            ll left = i, right = n - 1;\n            ll lm, rm;\n            while (left <= right) {\n                ll mid = (left + right) / 2;\n                ll x = s.query(0, 0, n - 1, i, mid);\n                if (x >= k) {\n                    left = mid + 1;\n                } else {\n                    right = mid - 1;\n                }\n            }\n            rm = right;\n            left = i, right = n - 1;\n            while (left <= right) {\n                ll mid = (left + right) / 2;\n                ll x = s.query(0, 0, n - 1, i, mid);\n                if (x > k) {\n                    left = mid + 1;\n                } else {\n                    right = mid - 1;\n                }\n            }\n            lm = left;\n            ans += (rm - lm + 1);\n        }\n        return ans;\n    }\n};\n",
    "submit_ts": "1720279294",
    "subm_id": "1311745454"
}