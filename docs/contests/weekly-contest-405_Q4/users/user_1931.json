{
    "username": "iitp_rakesh",
    "submission": "class Solution {\npublic:\n    struct custom {\n        unordered_map<char, custom*> child;\n        vector<pair<int, int>> end;\n    };\n\n    class Solve {\n    public:\n        custom* root;\n        Solve() { root = new custom(); }\n\n        void add(string& s, int i, int c) {\n            custom* node = root;\n            for (auto c : s) {\n                if (node->child.find(c)==node->child.end())\n                    node->child[c] = new custom();\n                node = node->child[c];\n            }\n            node->end.push_back({i, c});\n        }\n    };\n\n    int minimumCost(string t, vector<string>& W, vector<int>& C) {\n        int n = t.size();\n        vector<long long> ans(n + 1, LLONG_MAX);\n        ans[0] = 0;\n\n        Solve trie;\n        int m = W.size();\n        for (int i = 0; i < m; ++i) {\n            trie.add(W[i], i, C[i]);\n        }\n\n        for (int start = 0; start < n; ++start) {\n            if (ans[start] != LLONG_MAX) {\n                custom* node = trie.root;\n                for (int end = start; end < n; ++end) {\n                    if (node->child.find(t[end]) == node->child.end())\n                        break;\n                    node = node->child[t[end]];\n                    for (auto p : node->end) {\n                        int a = p.first;\n                        int c = p.second;\n                        int l = W[a].size();\n                        if (start + l <= n) {\n                            ans[start + l] = min(ans[start + l], ans[start] + c);\n                        }\n                    }\n                }\n            }\n        }\n        return ans[n] == LLONG_MAX ? -1 : ans[n];\n    }\n};",
    "submit_ts": "1720323371",
    "subm_id": "1312373898"
}