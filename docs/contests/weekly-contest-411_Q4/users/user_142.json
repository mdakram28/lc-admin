{
    "username": "Linyuan Gong",
    "submission": "class Solution:\n    def countKConstraintSubstrings(self, s: str, k: int, queries: List[List[int]]) -> List[int]:\n        n = len(s)\n        p0 = [-1 for _ in range(k + 1)]\n        p1 = [-1 for _ in range(k + 1)]\n        g = []\n        for i in range(n):\n            if s[i] == '0':\n                p0.append(i)\n            elif s[i] == '1':\n                p1.append(i)\n            g.append(min(p0[-k-1], p1[-k-1]) + 1)\n        lb = {}\n        for i in range(n):\n            if g[i] not in lb:\n                lb[g[i]] = i\n        last = None\n        for x in reversed(range(g[-1] + 1)):\n            if x not in lb:\n                lb[x] = last\n            else:\n                last = lb[x]\n        s = [g[0]]\n        for i in range(1, n):\n            s.append(s[-1] + g[i])\n        # print(g, lb)\n        # for l, r in queries:\n        #     tmp = 0\n        #     for i in range(l, r + 1):\n        #         tmp += i - max(g[i], l) + 1\n        #     print(tmp)\n        ans = []\n        for l, r in queries:\n            m = r - l + 1\n            t = min(lb.get(l, r + 1), r + 1) - 1\n            if t == -1:\n                diff = s[r]\n            else:\n                diff = s[r] - s[t]\n            diff -= (r - t) * l\n            ans.append(m * (m + 1) // 2 - diff)\n        return ans",
    "submit_ts": "1723951159",
    "subm_id": "1359764696"
}