{
    "username": "sam_990",
    "submission": "\nclass SparseTable {\n    public:\n    int** table;\n    int LOGN;\n    int size;\n\n    int func(int a, int b) {\n        return (a & b);\n    }\n\n    SparseTable(int a[], int n) {\n        size = n;\n        LOGN = 31 - __builtin_clz(n);\n        table = new int* [LOGN + 1];\n\n        table[0] = new int[n];\n        for (int j = 0; j < n; j++) {\n            table[0][j] = a[j];\n        }\n\n        for (int i = 1; i <= LOGN; i++) {\n            int p = (1 << i);\n            table[i] = new int[n - p + 1];\n            for (int j = 0; j < n - p + 1; j++) {\n                table[i][j] = func(table[i - 1][j], table[i - 1][j + (p >> 1)]);\n            }\n        }\n    }\n\n    SparseTable(vector<int> a) {\n        int n = a.size();\n        size = n;\n        LOGN = 31 - __builtin_clz(n);\n        table = new int* [LOGN + 1];\n\n        table[0] = new int[n];\n        for (int j = 0; j < n; j++) {\n            table[0][j] = a[j];\n        }\n\n        for (int i = 1; i <= LOGN; i++) {\n            int p = (1 << i);\n            table[i] = new int[n - p + 1];\n            for (int j = 0; j < n - p + 1; j++) {\n                table[i][j] = func(table[i - 1][j], table[i - 1][j + (p >> 1)]);\n            }\n        }\n    }\n\n    ~SparseTable() {\n        for (int i = 0; i <= LOGN; i++) {\n            delete[] table[i];\n        }\n        delete[] table;\n    }\n\n    int query(int l, int r) {\n        int k = 31 - __builtin_clz(r - l + 1);\n        return func(table[k][l], table[k][r - (1 << k) + 1]);\n\n    }\n\n    void display() {\n        for (int i = 0; i <= LOGN; i++) {\n            cout << '{';\n            for (int j = 0; j < size - (1 << i) + 1; j++) {\n                cout << table[i][j] << \",}\"[j == size - (1 << i)];\n            }\n            cout << '\\n';\n        }\n    }\n\n};\n\nclass Solution {\npublic:\n    long long countSubarrays(vector<int>& nums, int k) {\n        long long ans = 0;\n        int n = nums.size();\n        SparseTable st(nums);\n        \n        for (int i = 0; i < n; i++) {\n            if ((nums[i] & k) < k) continue;\n            int in1 = -1, in2 = -1;\n            int l = i - 1, r = n, mid;\n            \n            while (r - l > 1) {\n                mid = (l + r) / 2;\n                int res = st.query(i, mid);\n                \n                if (res >= k) l = mid;\n                else r = mid;\n            }\n            \n            in1 = l;\n            \n            l = i - 1;\n            r = n;\n            \n            while (r - l > 1) {\n                mid = (l + r) / 2;\n                int res = st.query(i, mid);\n                \n                if (res > k) l = mid;\n                else r = mid;\n            }\n            in2 = l;\n            \n            ans += in1 - in2;\n        }\n        \n        return ans;\n    }\n};",
    "submit_ts": "1720277870",
    "subm_id": "1311683863"
}