{
    "username": "Pras28",
    "submission": "from collections import defaultdict\n\nclass Solution:\n    def minimumDiameterAfterMerge(self, edges1: List[List[int]], edges2: List[List[int]]) -> int:\n        def build_graph(edges):\n            graph = defaultdict(list)\n            for u, v in edges:\n                graph[u].append(v)\n                graph[v].append(u)\n            return graph\n\n        def find_tree_info(edges):\n            graph = build_graph(edges)\n            \n            def dfs(node, parent):\n                height, diameter = 0, 0\n                max_height1, max_height2 = 0, 0\n                for child in graph[node]:\n                    if child != parent:\n                        child_height, child_diameter = dfs(child, node)\n                        diameter = max(diameter, child_diameter)\n                        if child_height + 1 > max_height1:\n                            max_height2 = max_height1\n                            max_height1 = child_height + 1\n                        elif child_height + 1 > max_height2:\n                            max_height2 = child_height + 1\n                \n                diameter = max(diameter, max_height1 + max_height2)\n                return max_height1, diameter\n\n            _, diameter = dfs(0, -1)\n            return diameter, min(len(graph) - 1, (diameter + 1) // 2)\n\n        diameter1, height1 = find_tree_info(edges1)\n        diameter2, height2 = find_tree_info(edges2)\n\n        return max(diameter1, diameter2, height1 + height2 + 1)",
    "submit_ts": 1719715830.0
}