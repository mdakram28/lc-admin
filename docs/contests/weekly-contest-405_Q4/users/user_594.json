{
    "username": "sqz0914",
    "submission": "class Solution {\n    private int[] memo;\n    public int minimumCost(String target, String[] words, int[] costs) {\n        Map<String, Integer> map = new HashMap<>();\n        for(int i = 0; i < words.length; i++) {\n            String word = words[i];\n            int cost = costs[i];\n            if(!map.containsKey(word)) {\n                map.put(word, cost);\n            }\n            else {\n                map.put(word, Math.min(cost, map.get(word)));\n            }\n        }\n        \n        int N = target.length();\n        this.memo = new int[N];\n        Arrays.fill(memo, Integer.MAX_VALUE / 2);\n        TrieNode root = new TrieNode();\n        \n        for(String word : map.keySet()) {\n            TrieNode node = root;\n            for(char c : word.toCharArray()) {\n                if(!node.children.containsKey(c)) {\n                    node.children.put(c, new TrieNode());\n                }\n                node = node.children.get(c);\n            }\n            node.cost = map.get(word);\n        }\n        \n        int res = dfs(target, 0, root);\n        \n        return res == Integer.MAX_VALUE / 2 ? -1 : res;\n    }\n    \n    private int dfs(String target, int index, TrieNode root) {\n        if(index >= target.length()) {\n            return 0;\n        }\n        \n        if(memo[index] != Integer.MAX_VALUE / 2) {\n            return memo[index];\n        }\n        \n        int cost = Integer.MAX_VALUE / 2;\n        TrieNode node = root;\n        for(int i = index; i < target.length(); i++) {\n            char c = target.charAt(i);\n            if(node.children.containsKey(c)) {\n                node = node.children.get(c);\n                if(node.cost > 0) {\n                    cost = Math.min(cost, node.cost + dfs(target, i + 1, root));\n                }\n            }\n            else {\n                break;\n            }\n        }\n        \n        memo[index] = cost;\n        return cost;\n    }\n}\n\nclass TrieNode {\n    Map<Character, TrieNode> children;\n    int cost;\n    \n    public TrieNode() {\n        this.children = new HashMap<>();\n        this.cost = 0;\n    }\n}",
    "submit_ts": "1720322519",
    "subm_id": "1312352097"
}