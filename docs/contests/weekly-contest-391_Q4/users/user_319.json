{
    "username": "0x3f66616e",
    "submission": "impl Solution {\n    pub fn minimum_distance(ps: Vec<Vec<i32>>) -> i32 {\n        let n = ps.len();\n        let mut indices: Vec<_> = (0..n).collect();\n        let mut max = vec![i32::MIN; n];\n        \n        indices.sort_unstable_by_key(|&i| ps[i][0] + ps[i][1]);\n        let dist = |l: usize, r: usize| {\n            ps[indices[r]][0] + ps[indices[r]][1] - ps[indices[l]][0] - ps[indices[l]][1]\n        };\n        for (i, &idx) in indices.iter().enumerate() {\n            if i == 0 {\n                max[idx] = max[idx].max(dist(1, n - 1));\n            } else if i == n - 1 {\n                max[idx] = max[idx].max(dist(0, n - 2));\n            } else {\n                max[idx] = max[idx].max(dist(0, n - 1));\n            }\n        }\n        \n        indices.sort_unstable_by_key(|&i| ps[i][0] - ps[i][1]);\n        let dist = |l: usize, r: usize| {\n            ps[indices[r]][0] - ps[indices[r]][1] - (ps[indices[l]][0] - ps[indices[l]][1])\n        };\n        for (i, &idx) in indices.iter().enumerate() {\n            if i == 0 {\n                max[idx] = max[idx].max(dist(1, n - 1));\n            } else if i == n - 1 {\n                max[idx] = max[idx].max(dist(0, n - 2));\n            } else {\n                max[idx] = max[idx].max(dist(0, n - 1));\n            }\n        }\n        \n        indices.sort_unstable_by_key(|&i| -ps[i][0] + ps[i][1]);\n        let dist = |l: usize, r: usize| {\n            -ps[indices[r]][0] + ps[indices[r]][1] - (-ps[indices[l]][0] + ps[indices[l]][1])\n        };\n        for (i, &idx) in indices.iter().enumerate() {\n            if i == 0 {\n                max[idx] = max[idx].max(dist(1, n - 1));\n            } else if i == n - 1 {\n                max[idx] = max[idx].max(dist(0, n - 2));\n            } else {\n                max[idx] = max[idx].max(dist(0, n - 1));\n            }\n        }\n        \n        indices.sort_unstable_by_key(|&i| -ps[i][0] - ps[i][1]);\n        let dist = |l: usize, r: usize| {\n            -ps[indices[r]][0] - ps[indices[r]][1] - (-ps[indices[l]][0] - ps[indices[l]][1])\n        };\n        for (i, &idx) in indices.iter().enumerate() {\n            if i == 0 {\n                max[idx] = max[idx].max(dist(1, n - 1));\n            } else if i == n - 1 {\n                max[idx] = max[idx].max(dist(0, n - 2));\n            } else {\n                max[idx] = max[idx].max(dist(0, n - 1));\n            }\n        }\n        \n        *max.iter().min().unwrap()\n    }\n}"
}