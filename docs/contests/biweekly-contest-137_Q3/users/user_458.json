{
    "username": "Chance",
    "submission": "class Solution {\npublic:\n  long long maximumValueSum(vector<vector<int>>& board) {\n    int m = board.size();\n    int n = board[0].size();\n\n    // for first place, pick two to try\n    auto comp = [&board](const pair<int, int> &p1, const pair<int, int> &p2) {\n      return board[p1.first][p1.second] > board[p2.first][p2.second];\n    };\n    priority_queue<pair<int, int>, vector<pair<int, int>>, decltype(comp)> pq(comp);\n\n    // keep three elements\n    for (int r = 0; r < m; ++r) {\n      for (int c = 0; c < n; ++c) {\n        pq.push({r, c});\n        if (pq.size() > 4)\n          pq.pop();\n      }\n    }\n\n    // try to place the first pq.top();\n    long max_point = LONG_MIN;\n    while (!pq.empty()) {\n      auto [r1, c1] = pq.top();\n      pq.pop();\n      long point1 = board[r1][c1];\n\n      // find the possible second places\n      auto comp2 = [&board](const pair<int, int> &p1, const pair<int, int> &p2) {\n        return board[p1.first][p1.second] > board[p2.first][p2.second];\n      };\n      priority_queue<pair<int, int>, vector<pair<int, int>>, decltype(comp2)> pq2(comp2);\n      for (int r = 0; r < m; ++r) {\n        if (r == r1)\n          continue;\n        for (int c = 0; c < n; ++c) {\n          if (c == c1)\n            continue;\n          pq2.push({r, c});\n          if (pq2.size() > 3)\n            pq2.pop();\n        }\n      }\n\n      while (!pq2.empty()) {\n        auto [r2, c2] = pq2.top();\n        pq2.pop();\n        long point2 = board[r2][c2];\n\n        // find the possible third places\n        long sub_max = INT_MIN;\n        int r3, c3;\n        for (int r = 0; r < m; ++r) {\n          if (r == r1 || r == r2)\n            continue;\n          for (int c = 0; c < n; ++c) {\n            if (c == c1 || c == c2)\n              continue;\n            if (board[r][c] > sub_max) {\n              r3 = r;\n              c3 = c;\n              sub_max = board[r][c];\n            }\n          }\n        }\n\n        //printf(\"[%d,%d]=%d [%d,%d]=%d [%d,%d]=%d sum=%d\\n\", \n        //  r1, c1, point1, r2, c2, point2, r3, c3, sub_max, point1 + point2 + sub_max);\n        max_point = max(max_point, (long)point1 + point2 + sub_max);\n      }\n    }\n\n    return max_point;\n  }\n};",
    "submit_ts": "1723909931",
    "subm_id": "1359211039"
}