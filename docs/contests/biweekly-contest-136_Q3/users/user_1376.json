{
    "username": "conan45",
    "submission": "class Solution {\npublic:\n    int minFlips(vector<vector<int>>& grid) {\n        int n = grid.size(), m = grid[0].size();\n        int sol = 0, mt1 = 0, mt0 = 0, unmt = 0;\n\n        if (n % 2 == 1 && m % 2 == 1) {\n            for (int i = 0; i < n / 2; i++) {\n                if (grid[i][m / 2] == grid[n - 1 - i][m / 2]) {\n                    if (grid[i][m / 2] == 1) mt1++;\n                    else mt0++;\n                } else unmt++;\n            }\n            for (int j = 0; j < m / 2; j++) {\n                if (grid[n / 2][j] == grid[n / 2][m - 1 - j]) {\n                    if (grid[n / 2][j] == 1) mt1++;\n                    else mt0++;\n                } else unmt++;\n            }\n            sol+=unmt;\n            if (grid[n / 2][m / 2] == 1) sol++;\n            if (unmt == 0 && mt1 % 2 == 1) sol += 2;\n            \n            int sol2 = 0;\n            for (int i = 0; i < n; i++) {\n                for (int j = 0; j < m; j++) {\n                    if (i == n / 2 || j == m / 2) continue;\n                    int val = grid[i][j] + grid[n - 1 - i][m - 1 - j] + grid[n - 1 - i][j] + grid[i][m - 1 - j];\n                    sol2 += min(val, 4 - val);\n                }\n            }\n            return sol + (sol2 / 4);\n        }\n\n        if (n % 2 == 1) {\n            sol = 0, mt1 = 0, mt0 = 0, unmt = 0;\n            for (int j = 0; j < m / 2; j++) {\n                if (grid[n / 2][j] == grid[n / 2][m - 1 - j]) {\n                    if (grid[n / 2][j] == 1) mt1++;\n                    else mt0++;\n                } else unmt++;\n            }\n            sol+=unmt;\n            if (unmt == 0 && mt1 % 2 == 1) sol += 2;\n            \n            int sol2 = 0;\n            for (int i = 0; i < n; i++) {\n                for (int j = 0; j < m; j++) {\n                    if (i == n / 2) continue;\n                    int val = grid[i][j] + grid[n - 1 - i][m - 1 - j] + grid[n - 1 - i][j] + grid[i][m - 1 - j];\n                    sol2 += min(val, 4 - val);\n                }\n            }\n            return sol + (sol2 / 4);\n        }\n\n        if (m % 2 == 1) {\n            sol = 0, mt1 = 0, mt0 = 0, unmt = 0;\n            for (int i = 0; i < n / 2; i++) {\n                if (grid[i][m / 2] == grid[n - 1 - i][m / 2]) {\n                    if (grid[i][m / 2] == 1) mt1++;\n                    else mt0++;\n                } else unmt++;\n            }\n            if (unmt == 0 && mt1 % 2 == 1) sol += 2;\n            sol+=unmt;\n            \n            int sol2 = 0;\n            for (int i = 0; i < n; i++) {\n                for (int j = 0; j < m; j++) {\n                    if (j == m / 2) continue;\n                    int val = grid[i][j] + grid[n - 1 - i][m - 1 - j] + grid[n - 1 - i][j] + grid[i][m - 1 - j];\n                    sol2 += min(val, 4 - val);\n                }\n            }\n            return sol + (sol2 / 4);\n        }\n\n        int sol2 = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                int val = grid[i][j] + grid[n - 1 - i][m - 1 - j] + grid[n - 1 - i][j] + grid[i][m - 1 - j];\n                sol2 += min(val, 4 - val);\n            }\n        }\n        return sol2 / 4;\n    }\n};\n",
    "submit_ts": "1722698640",
    "subm_id": "1343187146"
}