{
    "username": "kaiwensun",
    "submission": "class Solution:\n    def countOfPeaks(self, nums: List[int], queries: List[List[int]]) -> List[int]:\n        n = len(nums)\n        seg_tree = [0] * (n * 2)\n        def update_peak(i, delta):\n            i += n\n            while i:\n                seg_tree[i] += delta\n                i //= 2\n        def count_peak(l, r):\n            l += n\n            r += n\n            res = 0\n            while l < r:\n                if l % 2:\n                    res += seg_tree[l]\n                    l += 1\n                if r % 2:\n                    r -= 1\n                    res += seg_tree[r]\n                l //= 2\n                r //= 2\n            return res\n        def is_peak(i):\n            return 0 < i < n - 1 and nums[i - 1] < nums[i] > nums[i + 1]\n        for i in range(n):\n            if is_peak(i):\n                update_peak(i, 1)\n        res = []\n        for op, a, b in queries:\n            if op == 1:\n                res.append(count_peak(a + 1, b))\n            else:\n                old_is_peaks = [is_peak(i) for i in range(a - 1, a + 2)]\n                nums[a] = b\n                new_is_peaks = [is_peak(i) for i in range(a - 1, a + 2)]\n                for j in range(3):\n                    if old_is_peaks[j] and not new_is_peaks[j]:\n                        update_peak(a + j - 1, -1)\n                    elif not old_is_peaks[j] and new_is_peaks[j]:\n                        update_peak(a + j - 1, 1)\n        return res\n            ",
    "submit_ts": "1718508500",
    "subm_id": "539787686"
}