{
    "username": "deepbansal",
    "submission": "#include <vector>\n#include <string>\n#include <climits>\n#include <unordered_map>\nusing namespace std;\n\nclass node {\npublic:\n    vector<node*> alp;\n    bool isTerm;\n    int cost;\n    node() {\n        isTerm = false;\n        alp.assign(26, NULL);\n        cost = INT_MAX;\n    }\n};\n\nclass trie {\npublic:\n    node* root;\n    trie() {\n        root = new node();\n    }\n    void insert(string& word, int c) {\n        node* temp = root;\n        for (int i = 0; i < word.length(); i++) {\n            char ch = word[i];\n            if (temp->alp[ch - 'a'] == NULL) {\n                temp->alp[ch - 'a'] = new node();\n            }\n            temp = temp->alp[ch - 'a'];\n        }\n        temp->isTerm = true;\n        temp->cost = min(temp->cost, c);\n    }\n\n    int search(string& target, int start, vector<int>& dp) {\n        if (start == target.size()) return 0;\n        if (dp[start] != -1) return dp[start];\n\n        node* temp = root;\n        int ans = INT_MAX;\n        for (int i = start; i < target.size(); i++) {\n            if (temp->alp[target[i] - 'a'] == NULL) break;\n            temp = temp->alp[target[i] - 'a'];\n            if (temp->isTerm) {\n                int rem = search(target, i + 1, dp);\n                if (rem != INT_MAX) {\n                    rem = temp->cost + rem;\n                    ans = min(ans, rem);\n                }\n            }\n        }\n\n        dp[start] = ans;\n        return ans;\n    }\n};\n\nclass Solution {\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        trie t;\n        for (int i = 0; i < words.size(); i++) {\n            t.insert(words[i], costs[i]);\n        }\n        vector<int> dp(target.size(), -1);\n        int ans = t.search(target, 0, dp);\n        return (ans == INT_MAX) ? -1 : ans;\n    }\n};\n",
    "submit_ts": "1720323484",
    "subm_id": "1312376692"
}