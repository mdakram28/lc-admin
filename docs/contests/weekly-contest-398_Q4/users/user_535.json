{
    "username": "LGM70",
    "submission": "import java.util.*;\n\nclass Solution {\n    public int waysToReachStair(int k) {\n        if (k == 0) {\n            return 2;\n        }\n        if (k == 1) {\n            return 4;\n        }\n//        if (k == 2) {\n//            return 2;\n//        }\n        int tmp = k;\n        boolean isPowerOfTwo = true;\n        int jumps = 0;\n        while (tmp > 1) {\n            jumps++;\n            if (tmp % 2 == 1) {\n                isPowerOfTwo = false;\n            }\n            tmp /= 2;\n        }\n        if (!isPowerOfTwo) {\n            jumps++;\n        }\n        int ans = 0;\n        double combinations = 1.;\n        int downs = (1 << jumps) - k;\n        if (downs <= jumps + 1) {\n            for (int i = 0; i < downs; i++) {\n                combinations *= jumps + 1 - i;\n                combinations /= downs - i;\n            }\n            ans += (int) Math.round(combinations);\n            combinations = 1.;\n            jumps++;\n            downs = (1 << jumps) - k;\n            if (downs <= jumps + 1) {\n                for (int i = 0; i < downs; i++) {\n                    combinations *= jumps + 1 - i;\n                    combinations /= downs - i;\n                }\n                ans += (int) Math.round(combinations);\n            }\n        }\n        return ans;\n    }\n}",
    "submit_ts": 1716088862.0
}