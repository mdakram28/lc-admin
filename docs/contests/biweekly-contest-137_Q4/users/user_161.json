{
    "username": "ybbb",
    "submission": "class Solution:\n    def maximumValueSum(self, board: List[List[int]]) -> int:\n        new = []\n        myrow = {i:[] for i in range(len(board[0]))}\n        for col in board:\n            t = [None] * len(col)\n            for i in range(len(col)):\n                t[i] = (col[i], i)\n            t.sort(reverse=True)\n\n            new.append(t[:3])\n            for j in range(3):\n                rowid = t[j][1]\n                if len(myrow[rowid]) < 3:\n                    heappush(myrow[rowid], (t[j][0], len(new)-1))\n                elif myrow[rowid][0][0] < t[j][0]:\n                    heappop(myrow[rowid])\n                    heappush(myrow[rowid], (t[j][0], len(new)-1))\n        max20 = []\n        for r, v in myrow.items():\n            for value, c in v:\n                max20.append((value, r, c))\n        max20.sort(reverse=True)\n        ans = board[0][0] + board[1][1] + board[2][2]\n        for i1 in range(len(board)-2):\n            for j1 in range(3):\n                # first is new[i1][j1]\n                r1 = new[i1][j1][1]\n                for i2 in range(i1 + 1, len(board)-1):\n                    for j2 in range(3):\n                        r2 = new[i2][j2][1]\n                        if r2 == r1:\n                            continue\n                        for v, r3, c3 in max20:\n                            if (r3 - r2) * (r3 - r1) != 0 and (c3 - i1) * (c3-i2) != 0:\n                                ans = max(ans, v + new[i1][j1][0] + new[i2][j2][0])\n                                break\n        return ans\n\"\"\"\n[-95,-46,67,-39]\n[6,-25,37,46]\n[-60,1,87,-25] 87 + 46 - 17\n[-17,-83,8,16]\n\"\"\"\n        \n",
    "submit_ts": "1723908505",
    "subm_id": "1359155478"
}