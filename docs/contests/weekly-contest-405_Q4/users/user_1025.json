{
    "username": "simhadrivenkatvivek",
    "submission": "class TrieNode:\n    def __init__(self):\n        self.children = {}\n        self.cost = float('inf')\nclass Trie:\n    def __init__(self):\n        self.root = TrieNode()\n\n    def insert(self, word, cost):\n        node = self.root\n        for char in word:\n            if char not in node.children:\n                node.children[char] = TrieNode()\n            node = node.children[char]\n        node.cost = min(node.cost, cost)\n\n    def search(self, target, start):\n        node = self.root\n        n = len(target)\n        for i in range(start, n):\n            if target[i] not in node.children:\n                break\n            node = node.children[target[i]]\n            yield (i + 1, node.cost)    \nclass Solution:\n    def minimumCost(self, target: str, words: List[str], costs: List[int]) -> int:\n        trie = Trie()\n        ln = len(target)\n        dp = [float('inf')]*(ln + 2)\n        dp[0] = 0  \n        for i in range(len(words)):\n            trie.insert(words[i], costs[i])\n        for i in range(ln):\n            if dp[i] != float('inf'):\n                for lst, cst in trie.search(target, i):\n                    dp[lst] = min(dp[i] + cst, dp[lst])\n        return dp[ln] if dp[ln] != float('inf') else -1\n            ",
    "submit_ts": "1720323073",
    "subm_id": "1312366661"
}