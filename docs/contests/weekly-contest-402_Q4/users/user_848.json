{
    "username": "baibhavkr143",
    "submission": "class FenwickTree {\npublic:\n    FenwickTree(int n) : bit(n + 1, 0) {}\n    \n    void update(int index, int delta) {\n        for (; index < bit.size(); index += index & -index) {\n            bit[index] += delta;\n        }\n    }\n    \n    int query(int index) const {\n        int sum = 0;\n        for (; index > 0; index -= index & -index) {\n            sum += bit[index];\n        }\n        return sum;\n    }\n    \n    int rangeQuery(int left, int right) const {\n        return query(right) - query(left - 1);\n    }\n\nprivate:\n    vector<int> bit;\n};\n\nclass Solution {\n public:   \nbool isPeak(const vector<int>& arr, int i) {\n    if (i <= 0 || i >= arr.size() - 1) {\n        return false;\n    }\n    return arr[i] > arr[i - 1] && arr[i] > arr[i + 1];\n}\n\nvector<int> countOfPeaks(vector<int>& nums, const vector<vector<int>>& queries) {\n    int n = nums.size();\n\n    // Initialize the Fenwick Tree for peak counts\n    FenwickTree fenwick(n);\n\n    // Initialize the peak status array\n    vector<bool> isPeakArr(n, false);\n    for (int i = 1; i < n - 1; ++i) {\n        if (isPeak(nums, i)) {\n            isPeakArr[i] = true;\n            fenwick.update(i + 1, 1); // Use 1-based indexing for Fenwick Tree\n        }\n    }\n\n    // Result array for storing answers to type 1 queries\n    vector<int> result;\n\n    // Process each query\n    for (const auto& query : queries) {\n        if (query[0] == 1) {\n            // Count peaks in the subarray nums[li..ri]\n            int li = query[1], ri = query[2];\n            if (li == ri || li == ri - 1) {\n                result.push_back(0);\n                continue;\n            }\n            int count = fenwick.rangeQuery(li + 2, ri); // Use 1-based indexing and exclude boundaries\n            result.push_back(count);\n        } else if (query[0] == 2) {\n            // Update nums[indexi] to vali\n            int indexi = query[1], vali = query[2];\n            nums[indexi] = vali;\n            // Update peak status for indexi, indexi-1, and indexi+1\n            for (int i : {indexi - 1, indexi, indexi + 1}) {\n                if (i >= 1 && i < n - 1) {\n                    bool wasPeak = isPeakArr[i];\n                    bool nowPeak = isPeak(nums, i);\n                    if (wasPeak != nowPeak) {\n                        isPeakArr[i] = nowPeak;\n                        fenwick.update(i + 1, nowPeak ? 1 : -1);\n                    }\n                }\n            }\n        }\n    }\n\n    return result;\n}\n\n\n\n};",
    "submit_ts": 1718507716.0
}