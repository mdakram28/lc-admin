{
    "username": "LarryNY",
    "submission": "class Solution:\n    def timeTaken(self, edges: List[List[int]]) -> List[int]:\n        N = len(edges) + 1\n        adj_list = collections.defaultdict(list)\n        \n        for u, v in edges:\n            adj_list[u].append(v)\n            adj_list[v].append(u)\n            \n        ans = [None] * N\n\n        children = collections.defaultdict(lambda: collections.Counter())\n        def go(node, parent):\n            m = 0\n            for v in adj_list[node]:\n                if v != parent:\n                    children[node][v] = go(v, node) + 2 - (v % 2)\n                    m = max(m, children[node][v])\n            return m\n        \n        go(0, -1)\n        \n        def go2(node, parent, farthest):\n            m = 0\n            #print(node, parent, farthest)\n            \n            values = sorted(children[node].items(), key=lambda x: (-x[1], x[0]))[:2]\n            for v in adj_list[node]:\n                if v != parent:\n                    far = 0\n                    if len(values) > 0:\n                        if values[0][0] != v:\n                            far = values[0][1]\n                        if len(values) > 1 and values[0][0] == v:\n                            far = values[1][1]\n\n                    go2(v, node, max(far, farthest) + (2 - node % 2))\n                    \n            ans[node] = farthest\n            if len(values) > 0:\n                ans[node] = max(ans[node], values[0][1])\n            #print(node, parent, farthest, values, ans[node])\n             \n        go2(0, -1, 0)\n        #print(\"-\")\n        return ans",
    "submit_ts": "1722699087",
    "subm_id": "1343201073"
}