{
    "username": "IZa7CMN6fi",
    "submission": "class Solution {\n\n    class Node {\n        int l, r;\n        int max;\n        Node ln, rn;\n        public Node(int _l, int _r) {\n            l = _l;\n            r = _r;\n            max = -1;\n            if(l != r) {\n                int mid = (l + r) >> 1;\n                ln = new Node(l, mid);\n                rn = new Node(mid + 1, r);\n            }\n        }\n\n        public void update(int index, int len) {\n            if(l != r) {\n                int mid = (l + r) >> 1;\n                if(index <= mid) {\n                    ln.update(index, len);\n                } else {\n                    rn.update(index, len);\n                }\n                max = Math.max(ln.max, rn.max);\n            } else {\n                max = len;\n            }\n        }\n\n        public boolean check(int ll, int rr, int len) {\n            if(max < len) {\n                return false;\n            }\n            if(l == ll && r == rr) {\n                return max >= len;\n            }\n            int mid = (l + r) >> 1;\n            if(rr <= mid) return ln.check(ll, rr, len);\n            else if(ll > mid) return rn.check(ll, rr, len);\n            else {\n                return ln.check(ll, mid, len) | rn.check(mid + 1, rr, len);\n            }\n        }\n    }\n\n    public List<Boolean> getResults(int[][] queries) {\n       Node root = new Node(0, 50000);\n       TreeSet<Integer> in = new TreeSet<>();\n       List<Boolean> res = new ArrayList<>();\n       for(int i = 0; i < queries.length; ++i) {\n           int x = queries[i][1];\n           if(queries[i][0] == 1) {\n               Integer low = in.lower(x);\n               if(low == null) low = 0;\n               root.update(low, x - low);\n               Integer up = in.higher(x);\n               if(up != null) {\n                   root.update(x, up - x);\n               }\n               in.add(x);\n           } else {\n               int len = queries[i][2];\n               Integer low = in.lower(x);\n               if(low == null) res.add(len <= x);\n               else if(len > x) res.add(false);\n               else {\n                   res.add(x - low >= len || root.check(0, low - 1, len));\n               }\n           }\n       }\n       return res;\n    }\n}",
    "submit_ts": "1716652756",
    "subm_id": "534780170"
}