{
    "username": "SR3mix",
    "submission": "typedef long long ll;\nlong long arith_seq_sum(long long first, long long last, long long diff) {\n    long long endSum = first + last;\n    long long nums = ((last - first)/diff) + 1;\n\n    if (endSum%2 == 0) {return (endSum/2) * nums;}\n    else {return (nums/2) * endSum;}\n}\n\nclass Solution {\npublic:\n    vector<long long> countKConstraintSubstrings(string s, int k, vector<vector<int>>& queries) {\n        int n = s.size();\n        vector<vector<int>>idxs(2);\n        vector<int>nxtop(n,n-1);\n        for (int i = 0; i < s.size(); i++) idxs[s[i] - '0'].push_back(i);\n        vector<array<int, 2>>stack;\n        for (int i = 0; i < n; i++) {\n            int x = s[i] - '0';\n            while (stack.size() && stack.back()[0] != x) {\n                nxtop[stack.back()[1]] = i;\n                stack.pop_back();\n            }\n            stack.push_back({x,i});\n        }\n        vector<int>rs(n,n-1);\n        for (int i = 0; i < n; i++) {\n            int g0 = n-1, g1 = n-1;\n            if (s[i] == '1') {\n                int idx1 = lower_bound(idxs[1].begin(), idxs[1].end(), i) - idxs[1].begin();\n                if (idx1 + k < idxs[1].size()) g1 = idxs[1][idx1 + k] - 1;\n                int idx0 = lower_bound(idxs[0].begin(), idxs[0].end(), nxtop[i]) - idxs[0].begin();\n                if (idx0 + k < idxs[0].size()) g0 = idxs[0][idx0 + k] - 1;\n            }\n            else {\n                int idx1 = lower_bound(idxs[1].begin(), idxs[1].end(), nxtop[i]) - idxs[1].begin();\n                if (idx1 + k < idxs[1].size()) g1 = idxs[1][idx1 + k] - 1;\n                int idx0 = lower_bound(idxs[0].begin(), idxs[0].end(), i) - idxs[0].begin();\n                if (idx0 + k < idxs[0].size()) g0 = idxs[0][idx0 + k] - 1;\n            }\n            rs[i] = max(g0,g1);\n        }\n        vector<ll>ps = {rs[0]}; for (int i = 1; i < n; i++) ps.push_back(ps.back() + (ll)rs[i]);\n        //for (auto i : rs) {cout << i << \",\";} cout << endl;\n        vector<ll>ans;\n        for (auto &q : queries) {\n            int l = q[0], r = q[1];\n            int idx = upper_bound(rs.begin(), rs.end(), r) - rs.begin();\n            //cout << \"og: \" << idx << endl;\n            idx = max(idx,l);\n            int en = idx-1;\n            //cout << \"en: \" << en << endl;\n            en = min(en, r);\n            ll pure = 0;\n            if (en >= l) {pure = ps[en]; if (l) pure -= ps[l-1];}\n            ll remcnt = r - en;\n            ll rem = remcnt * r;\n            ll get = pure + rem;\n            //cout << pure << \",\" << rem << \",\" << arith_seq_sum(l,r,1) << endl;\n            ll res = get - arith_seq_sum(l,r,1) + (r - l + 1);\n            ans.push_back(res);\n        }\n        return ans;\n    }\n};",
    "submit_ts": "1723951698",
    "subm_id": "1359777949"
}