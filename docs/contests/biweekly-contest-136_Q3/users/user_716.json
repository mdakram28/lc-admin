{
    "username": "michaelzhan1",
    "submission": "class Solution:\n    def minFlips(self, grid: List[List[int]]) -> int:\n        n = len(grid)\n        m = len(grid[0])\n        \n        # move in from the 4 corners, then check centers\n        # must be either all 1 or all 0\n        \n        one_count = 0\n        for i in range(n):\n            for j in range(m):\n                if grid[i][j] == 1:\n                    one_count += 1\n        \n        res = 0\n        for i in range(n // 2):\n            for j in range(m // 2):\n                top_left = grid[i][j]\n                top_right = grid[i][m - j - 1]\n                bot_left = grid[n - i - 1][j]\n                bot_right = grid[n - i - 1][m - j - 1]\n                res += min(top_left + top_right + bot_left + bot_right, 4 - (top_left + top_right + bot_left + bot_right))\n                one_count -= top_left + top_right + bot_left + bot_right\n        \n        \n        # one_count is now only on the centers\n        \n        # check centers\n        center_count = 0\n        if n % 2 == 1: # odd # rows\n            i = n // 2\n            for j in range(m // 2):\n                if grid[i][j] != grid[i][m - j - 1]:\n                    center_count += 1\n        \n        if m % 2 == 1:\n            j = m // 2\n            for i in range(n // 2):\n                if grid[i][j] != grid[n - i - 1][j]:\n                    center_count += 1\n        \n        \n        \n        if n % 2 == 1 and m % 2 == 1:\n            if grid[n // 2][m // 2] == 1:\n                res += 1\n                one_count -= 1\n        if center_count == 0:\n            res += one_count % 4\n        return res + center_count",
    "submit_ts": "1722697346",
    "subm_id": "1343143248"
}