{
    "username": "XENOX_GRIX",
    "submission": "class Solution {\npublic:\n    vector<int> parent, rank, left, top, right, bottom; \n    int touches(int i, int j, vector<vector<int>>& v){\n        long long  x1 = v[i][0], y1 = v[i][1], r1 = v[i][2]; \n        long long  x2 = v[j][0], y2 = v[j][1], r2 = v[j][2];\n        double d = sqrt((x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2));\n\n        if (d <= r1 - r2 || d <= r2 - r1 || d <= r1 + r2 ) {\n            return 1;\n        }\n        return 0;\n    }\n    int find(int x) {  \n        if (parent[x] != x) {  \n            parent[x] = find(parent[x]);  \n        } \n  \n        return parent[x]; \n    } \n    void Union(int x, int y, vector<vector<int>>& circles) {  \n        int x1 = find(x);\n        int y1 = find(y);\n   \n        if (x1 == y1){\n            return;\n        }\n        if (rank[x1] < rank[y1]) { \n            left[y1] = min(left[y1], left[x1]); \n            right[y1] = max(right[y1], right[x1]); \n            top[y1] = max(top[y1], top[x1]); \n            bottom[y1] = min(bottom[y1], bottom[x1]); \n            parent[x1] = y1; \n        } \n        else if (rank[x1] > rank[y1]) { \n            swap(x1,y1); \n            left[y1] = min(left[y1], left[x1]); \n            right[y1] = max(right[y1], right[x1]); \n            top[y1] = max(top[y1], top[x1]); \n            bottom[y1] = min(bottom[y1], bottom[x1]); \n            parent[x1] = y1; \n        } \n        else {\n            left[y1] = min(left[y1], left[x1]); \n            right[y1] = max(right[y1], right[x1]); \n            top[y1] = max(top[y1], top[x1]); \n            bottom[y1] = min(bottom[y1], bottom[x1]); \n            parent[x1] = y1; \n            rank[y1] = rank[y1] + 1; \n        }\n    } \n    bool canReachCorner(int X, int Y, vector<vector<int>>& circles) {\n        int n = circles.size(); \n        parent = vector<int>(n, 0); \n        rank = vector<int>(n, 0);\n        left = vector<int>(n, 0);\n        top = vector<int>(n, 0);  \n        right = vector<int>(n, 0);  \n        bottom = vector<int>(n, 0);\n        for(int i = 0; i<n; i++){\n            parent[i] = i; \n            left[i] = circles[i][0]-circles[i][2]; \n            bottom[i] = circles[i][1]-circles[i][2]; \n            right[i] = circles[i][0]+circles[i][2]; \n            top[i] = circles[i][1]+circles[i][2]; \n        }\n        for(int i = 0; i<n; i++){\n            for(int j = i+1; j<n; j++){\n                if(touches(i, j, circles)){\n                    Union(i, j, circles); \n                }\n            }\n        }\n        vector<int> vis(n,0); \n        for(int i = 0; i<n; i++){\n            int par = find(i); \n            if(vis[par]==1) continue; \n            vis[par]++;\n            // cout<<par<<\": \"<<left[par]<<\" \"<<right[par]<<\" \"<<top[par]<<\" \"<<bottom[par]<<endl;\n            if((left[par]<=0 && right[par]>=X) || (top[par]>=Y && bottom[par]<=0) || (top[par]>=Y && right[par]>=X) || (left[par]<=0 && bottom[par]<=0)) return 0; \n        }\n        return 1;\n    }\n};",
    "submit_ts": "1722137562",
    "subm_id": "1335767364"
}