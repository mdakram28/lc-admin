{
    "username": "Fasdr",
    "submission": "class Solution {\n    public List<Integer> countOfPeaks(int[] nums, int[][] queries) {\n        List<Integer> res = new ArrayList<>();\n        int n = nums.length;\n        SegmentTree st = new SegmentTree(n);\n        for (int i = 1; i < n - 1; i++)\n            if (nums[i - 1] < nums[i] && nums[i] > nums[i + 1])\n                st.update(1, i);\n        for (int[] query : queries) {\n            if (query[0] == 1) {\n                int l = query[1] + 1, r = query[2] - 1;\n                if (r < l)\n                    res.add(0);\n                else\n                    res.add(st.rangeSum(l, r));\n            } else {\n                int v = query[2], pos = query[1];\n                nums[pos] = v;\n                for (int i = Math.max(1, pos - 1); i < Math.min(n - 1, pos + 2); i++) {\n                    if (nums[i - 1] < nums[i] && nums[i] > nums[i + 1])\n                        st.update(1, i);\n                    else\n                        st.update(0, i);\n                }\n            }\n        }\n        \n        return res;\n    }\n}\n\nclass SegmentTree {\n    private int size;\n    private int[] val;\n    \n    public SegmentTree(int n) {\n        size = n;\n        val = new int[4 * n];\n    }\n    \n    // [lq, rq] sum including\n    public int rangeSum(int lq, int rq) {\n        return helpRS(1, 0, size - 1, lq, rq);\n    }\n    \n    private int helpRS(int p, int lt, int rt, int lq, int rq) {\n        if (lq <= lt && rt <= rq)\n            return val[p];\n        if (rt < lq || rq < lt)\n            return 0;\n        int piv = lt + (rt - lt) / 2;\n        return helpRS(2 * p, lt, piv, lq, rq) + helpRS(2 * p + 1, piv + 1, rt, lq, rq);\n    }\n    \n    public void update(int v, int pos) {\n        helpUpd(v, pos, 1, 0, size - 1);\n    }\n    \n    private int helpUpd(int v, int pos, int p, int lt, int rt) {\n        if (pos < lt || rt < pos)\n            return val[p];\n        if (pos == lt && lt == rt)\n            return val[p] = v;\n        int piv = lt + (rt - lt) / 2;\n        return val[p] = helpUpd(v, pos, 2 * p, lt, piv) + helpUpd(v, pos, 2 * p + 1, piv + 1, rt);\n    }\n}",
    "submit_ts": 1718507251.0
}