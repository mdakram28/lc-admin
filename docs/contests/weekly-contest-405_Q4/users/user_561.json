{
    "username": "MofanLi",
    "submission": "class Solution:\n    def minimumCost(self, target: str, words: List[str], costs: List[int]) -> int:\n        dp = defaultdict(lambda: inf, {0: 0})\n        \n        def possible(word, idx):\n            if idx + len(word) > len(target):\n                return False\n            for c in word:\n                if c != target[idx]:\n                    return False\n                idx += 1\n            return True\n        root = Trie()\n        for word, cost in zip(words, costs):\n            cur = root\n            for c in word:\n                idx = ord(c) - 97\n                if cur.children[idx] == None:\n                    cur.children[idx] = Trie()\n                cur = cur.children[idx]\n            cur.cost = min(cur.cost, cost)\n            \n        for i in range(len(target)):\n            if i not in dp:\n                continue\n            cur_cost = dp.pop(i)\n            cur = root\n            c_idx = i\n            while c_idx < len(target) and cur != None:\n                c = target[c_idx]\n                c_idx += 1\n                cur = cur.children[ord(c) - 97]\n                if cur and cur.cost != inf:\n                    dp[c_idx] = min(dp[c_idx], cur_cost + cur.cost)\n            \n        result = dp[len(target)]\n        return -1 if result == inf else result\n    \nclass Trie:\n    def __init__(self, cost=inf):\n        self.cost = inf\n        self.children = [None] * 26\n    \n    ",
    "submit_ts": "1720322695",
    "subm_id": "1312356700"
}