{
    "username": "20240620.monishasaha222003",
    "submission": "class Solution {\n    Map<Integer, int[][]> dp = new HashMap<>();\n    public int waysToReachStair(int k) {\n        return help(k, 1, 0, true);\n    }\n    private int help(int k, int i, int jump, boolean can) {\n        if (i > k + 5)\n            return 0;\n\n        if (jump > 31)\n            return 0;\n\n        if (dp.containsKey(i) && dp.get(i)[jump][can ? 1 : 0] != -1)\n            return dp.get(i)[jump][can ? 1 : 0];\n\n        int ans = (i == k) ? 1 : 0;\n        if (can)\n            ans += help(k, i - 1, jump, false);\n        if (i + (1 << jump) <= k + 1)\n            ans += help(k, i + (1 << jump), jump + 1, true);\n\n        if (!dp.containsKey(i)) {\n            int[][] temp = new int[32][2];\n            for (int m = 0; m < 32; m++) {\n                for (int n = 0; n < 2; n++) {\n                    temp[m][n] = -1;\n                }\n            }\n            dp.put(i, temp);\n        }\n\n        dp.get(i)[jump][can ? 1 : 0] = ans;\n        return ans;\n    }\n}",
    "submit_ts": "1716089451",
    "subm_id": "1261842565"
}