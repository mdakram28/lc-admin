{
    "username": "harsh99999",
    "submission": "class Solution {\npublic:\n    int minimumDistance(vector<vector<int>>& points) {\n        int n=points.size();\n        \n        set<int> sumPoints;\n        set<int> diffPoints;\n        \n        unordered_map<int,int> sumP,diffP;\n        \n        for(int i=0;i<n;i++){\n            int x=points[i][0];\n            int y=points[i][1];\n            \n            sumP[x+y]++;\n            diffP[x-y]++;\n            sumPoints.insert(x+y);\n            diffPoints.insert(x-y);\n        }\n        \n        int minDis=INT_MAX;\n        \n        for(int i=0;i<n;i++){\n            \n            int x=points[i][0];\n            int y=points[i][1];\n            \n            int sum=x+y,diff=x-y;\n            \n            if(sumP[sum]==1)\n            sumPoints.erase(sum);\n            if(diffP[diff]==1)\n            diffPoints.erase(diff);\n            \n            int curMaxDis=0;\n            \n            if(sumPoints.size())curMaxDis=max( *sumPoints.rbegin()- *sumPoints.begin() , *diffPoints.rbegin()- *diffPoints.begin());\n            \n            // cout<<curMaxDis<<endl;\n            \n            minDis=min(minDis,curMaxDis);\n            \n            if(sumP[sum]==1)\n            sumPoints.insert(sum);\n            if(diffP[diff]==1)\n            diffPoints.insert(diff);\n        }\n        \n        return minDis;\n    }\n};\n\n\n/*\n\n// 1,1 -9,2 3,3\n\n\n\n*/\n\n"
}