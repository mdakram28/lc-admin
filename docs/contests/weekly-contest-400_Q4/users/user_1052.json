{
    "username": "AkashManna2003",
    "submission": "class Solution {\n    class SegmentTree {\n    int[] tree;\n    int n;\n    public SegmentTree(int[] arr)\n    {\n        n = arr.length;\n        tree = new int[4 * n];\n        build(arr, 0, 0, n - 1);\n    }\n    public void build(int[] arr, int node, int start, int end)\n    {\n        if (start == end) {\n            tree[node] = arr[start];\n        }\n        else {\n            int mid = (start + end) / 2;\n            build(arr, 2 * node + 1, start, mid);\n            build(arr, 2 * node + 2, mid + 1, end);\n            tree[node] = tree[2 * node + 1] & tree[2 * node + 2];\n        }\n    }\n    public int query(int l, int r)\n    {\n        return query(0, 0, n - 1, l, r);\n    }\n    public int query(int node, int start, int end, int l, int r)\n    {\n        if (r < start || end < l) {\n            return Integer.MAX_VALUE; \n        }\n        if (l <= start && end <= r) {\n            return tree[node]; \n        }\n        int mid = (start + end) / 2;\n        int p1 = query(2 * node + 1, start, mid, l, r);\n        int p2 = query(2 * node + 2, mid + 1, end, l, r);\n        return p1 & p2; \n    }\n}\n    public int minimumDifference(int[] nums, int k) {\n        int sz = nums.length;\n        SegmentTree st = new SegmentTree(nums);\n        int ans = Integer.MAX_VALUE;\n        for(int i = 0;i<sz;i++)\n        {\n            int l = i, r = sz-1, mid;\n            while(l+1<r)\n            {\n                mid = (l+r)/2;\n                if(st.query(i,mid) >= k)\n                    l = mid;\n                else\n                    r = mid;\n                \n            }\n            if(l != i-1)\n                ans = Math.min(ans,Math.min(Math.abs(st.query(i,l)-k),Math.abs(k-st.query(i,r))));\n        }\n        return ans;\n    }\n}",
    "submit_ts": 1717300088.0
}