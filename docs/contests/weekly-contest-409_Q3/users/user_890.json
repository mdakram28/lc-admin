{
    "username": "sao-rui",
    "submission": "template<class Info, class Tag>\nstruct LazySegmentTree {\n    int n;\n    std::vector<Info> info;\n    std::vector<Tag> tag;\n\n    LazySegmentTree() : n(0) {}\n\n    LazySegmentTree(int n_, Info v_ = Info()) {\n        init(n_, v_);\n    }\n\n    template<class T>\n    LazySegmentTree(std::vector<T> init_) {\n        init(init_);\n    }\n\n    void init(int n_, Info v_ = Info()) {\n        init(std::vector(n_, v_));\n    }\n\n    template<class T>\n    void init(std::vector<T> init_) {\n        n = init_.size() - 1;\n        info.assign(4 << std::__lg(n), Info());\n        tag.assign(4 << std::__lg(n), Tag());\n        std::function<void(int, int, int)> build = [&](int p, int l, int r) {\n            if (r == l) {\n                info[p] = init_[l];\n                return;\n            }\n            int m = (l + r) / 2;\n            build(2 * p, l, m);\n            build(2 * p + 1, m + 1, r);\n            pull(p);\n        };\n        build(1, 1, n);\n    }\n\n    void pull(int p) {\n        info[p] = info[2 * p] + info[2 * p + 1];\n    }\n\n    void apply(int p, const Tag &v, int l = 0, int r = 0) {\n        info[p].apply(v, r - l + 1);\n        tag[p].apply(v);\n    }\n\n    void push(int p, int l = 0, int r = 0) {\n        int m = (l + r) >> 1;\n        apply(2 * p, tag[p], l, m);\n        apply(2 * p + 1, tag[p], m + 1, r);\n        tag[p] = Tag();\n    }\n\n    void modify(int p, int l, int r, int x, const Info &v) {\n        if (l == r) {\n            info[p] = v;\n            return;\n        }\n        int m = (l + r) / 2;\n        push(p, l, r);\n        if (x <= m) {\n            modify(2 * p, l, m, x, v);\n        } else {\n            modify(2 * p + 1, m + 1, r, x, v);\n        }\n        pull(p);\n    }\n\n    void modify(int p, const Info &v) {\n        modify(1, 1, n, p, v);\n    }\n\n    Info rangeQuery(int p, int l, int r, int x, int y) {\n        if (l > y || r < x) {\n            return Info();\n        }\n        if (l >= x && r <= y) {\n            return info[p];\n        }\n        int m = (l + r) / 2;\n        push(p, l, r);\n        return rangeQuery(2 * p, l, m, x, y) + rangeQuery(2 * p + 1, m + 1, r, x, y);\n    }\n\n    Info rangeQuery(int l, int r) {\n        return rangeQuery(1, 1, n, l, r);\n    }\n\n    void rangeApply(int p, int l, int r, int x, int y, const Tag &v) {\n        if (l > y || r < x) {\n            return;\n        }\n        if (l >= x && r <= y) {\n            apply(p, v, l, r);\n            return;\n        }\n        int m = (l + r) / 2;\n        push(p, l, r);\n        rangeApply(2 * p, l, m, x, y, v);\n        rangeApply(2 * p + 1, m + 1, r, x, y, v);\n        pull(p);\n    }\n\n    void rangeApply(int l, int r, const Tag &v) {\n        return rangeApply(1, 1, n, l, r, v);\n    }\n};\n\nint mod;\n\nstruct Tag {\n    int tag = -1;\n\n    Tag(int tag_ = -1) : tag(tag_) {};\n\n    void apply(Tag t) {\n        if (t.tag == 0) {\n            tag = 0;\n        }\n    }\n};\n\nstruct Info {\n    int sum = 0;\n\n    Info(int sum_ = 0) : sum(sum_) {}\n\n    void apply(Tag t, int len) {\n        if (t.tag == 0) {\n            sum = 0;\n        }\n    }\n};\n\nInfo operator+(Info a, Info b) {\n    return {a.sum + b.sum};\n}\n\nclass Solution {\npublic:\n    vector<int> shortestDistanceAfterQueries(int n, vector<vector<int>> &queries) {\n        int m = queries.size();\n        std::vector<int> ans(m);\n        LazySegmentTree<Info, Tag> seg(n+1,1);\n        int i = 0;\n        for (auto &q: queries) {\n            q[0]++, q[1]++;\n            seg.rangeApply(q[0] + 1, q[1]-1, 0);\n            ans[i++] = seg.rangeQuery(1, n).sum-1;\n        }\n        return ans;\n    }\n};",
    "submit_ts": "1722742251",
    "subm_id": "552343431"
}