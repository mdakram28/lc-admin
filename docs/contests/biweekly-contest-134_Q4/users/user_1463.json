{
    "username": "its_Lokesh",
    "submission": "class Solution {\npublic:\n    vector<int> segmentTree;\n\n    void build(vector<int>& arr, int start, int end, int index) {\n        if (start == end) {\n            segmentTree[index] = arr[start];\n            return;\n        }\n        int mid = (start + end) / 2;\n        int left = 2 * index;\n        int right = 2 * index + 1;\n        build(arr, start, mid, left);\n        build(arr, mid + 1, end, right);\n        segmentTree[index] = segmentTree[left] & segmentTree[right];\n    }\n\n    void update(vector<int>& arr, int start, int end, int index, int pos, int value) {\n        if (start == end) {\n            arr[pos] = value;\n            segmentTree[index] = arr[pos];\n            return;\n        }\n        int mid = (start + end) / 2;\n        if (pos <= mid) {\n            update(arr, start, mid, 2 * index, pos, value);\n        } else {\n            update(arr, mid + 1, end, 2 * index + 1, pos, value);\n        }\n        segmentTree[index] = segmentTree[2 * index] & segmentTree[2 * index + 1];\n    }\n\n    int query(int start, int end, int index, int l, int r) {\n        if (l <= start && end <= r) {\n            return segmentTree[index];\n        }\n        if (l > end || r < start) {\n            return INT_MAX;  \n        }\n        int mid = (start + end) / 2;\n        int leftValue = query(start, mid, 2 * index, l, r);\n        int rightValue = query(mid + 1, end, 2 * index + 1, l, r);\n        return leftValue & rightValue;\n    }\n\n    long long countSubarrays(vector<int>& nums, int k) {\n        int n = nums.size();\n        if (n == 0) return 0;\n\n        segmentTree.resize(4 * n, INT_MAX);  \n        build(nums, 0, n - 1, 1);\n\n        long long count = 0;\n        unordered_map<long long, long long> prev_calc;\n\n        for (int i = 0; i < n; ++i) {\n            unordered_map<long long, long long> curr_calc;\n\n            if (nums[i] == k) {\n                ++count;\n            }\n            curr_calc[nums[i]] = 1;\n\n            for (auto& [value, frequency] : prev_calc) {\n                long long newAndResult = value & nums[i];\n                if (newAndResult == k) {\n                    count += frequency;\n                }\n                curr_calc[newAndResult] += frequency;\n            }\n\n            prev_calc = curr_calc;\n        }\n\n        return count;\n    }\n};\n",
    "submit_ts": "1720280670",
    "subm_id": "1311797906"
}