{
    "username": "g129512",
    "submission": "from typing import List\n\nclass UnionFind:\n    def __init__(self,n):\n        self.fa=[i for i in range(n)]\n        self.sz=[1]*n\n\n    def find(self,x):\n        fa=self.fa\n        if fa[x] == x: return x\n        fa[x] = self.find(fa[x])\n        return fa[x]\n\n    def union(self, x, y):\n        rx,ry=self.find(x),self.find(y)\n        if rx==ry:return\n        self.sz[rx] += self.sz[ry]\n        self.fa[ry] = rx\nclass Solution:\n    def canReachCorner(self, X: int, Y: int, ar: List[List[int]]) -> bool:\n        n=len(ar)\n        uf=UnionFind(n+2)\n\n        def dis2(x1,y1,x2,y2):\n            return (x1-x2)**2 + (y2-y1)**2\n\n        for i in range(n):\n            x,y,r=ar[i]\n            if x+r>=X or y-r<=0:\n                uf.union(i,n)\n            # if x+r>X and (dis2(x,y,X,0)>=r*r or dis2(x,y,X,Y)>=r*r):\n            #     uf.union(i,n)\n            # if y-r<0 and (dis2(x,y,X,0)>=r*r or dis2(x,y,0,0)>=r*r):\n            #     uf.union(i,n)\n\n            if y+r>=Y or x-r<=0:\n                uf.union(i,n+1)\n            # if y+r>Y and (dis2(x,y,X,Y)>=r*r or dis2(x,y,0,Y)>=r*r):\n            #     uf.union(i,n+1)\n            # if x-r<0 and (dis2(x,y,0,0)>=r*r or dis2(x,y,0,Y)>=r*r):\n            #     uf.union(i,n+1)\n\n            for j in range(i+1,n):\n                x1,y1,r1=ar[j]\n                if (x1-x)**2 + (y-y1)**2 <= (r1+r)**2:\n                    uf.union(i,j)\n        return uf.find(n)!=uf.find(n+1)\n            ",
    "submit_ts": "1722139064",
    "subm_id": "1335806859"
}