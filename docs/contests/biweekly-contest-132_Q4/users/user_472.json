{
    "username": "Anoop6598Rai",
    "submission": "class Solution {\npublic:\n    int maximumLength(vector<int>& numericalSequence, int maximumNumberOfChangesAllowed) {\n        int totalNumberOfElements = numericalSequence.size();\n        vector<vector<int>> dynamicProgrammingArray(totalNumberOfElements, vector<int>(maximumNumberOfChangesAllowed + 1, 1));\n        int maxLengthOfGoodSubsequence = 1;\n        vector<int> maximumLengthWithKChanges(maximumNumberOfChangesAllowed + 1, -1);\n        vector<map<int, int>> maximumLengthMapWithKChanges(maximumNumberOfChangesAllowed + 1);\n\n        for (int currentIndex = 0; currentIndex < totalNumberOfElements; ++currentIndex) {\n            for (int numberOfChangesAllowed = 0; numberOfChangesAllowed <= maximumNumberOfChangesAllowed; ++numberOfChangesAllowed) {\n                for (int previousNumberOfChanges = 0; previousNumberOfChanges < numberOfChangesAllowed; ++previousNumberOfChanges) {\n                    dynamicProgrammingArray[currentIndex][numberOfChangesAllowed] = max(dynamicProgrammingArray[currentIndex][numberOfChangesAllowed], 1 + maximumLengthWithKChanges[previousNumberOfChanges]);\n                }\n                if (maximumLengthMapWithKChanges[numberOfChangesAllowed].find(numericalSequence[currentIndex])!= maximumLengthMapWithKChanges[numberOfChangesAllowed].end()) {\n                    dynamicProgrammingArray[currentIndex][numberOfChangesAllowed] = max(dynamicProgrammingArray[currentIndex][numberOfChangesAllowed], 1 + maximumLengthMapWithKChanges[numberOfChangesAllowed][numericalSequence[currentIndex]]);\n                }\n                maxLengthOfGoodSubsequence = max(maxLengthOfGoodSubsequence, dynamicProgrammingArray[currentIndex][numberOfChangesAllowed]);\n            }\n            for (int numberOfChangesAllowed = 0; numberOfChangesAllowed <= maximumNumberOfChangesAllowed; ++numberOfChangesAllowed) {\n                maximumLengthWithKChanges[numberOfChangesAllowed] = max(maximumLengthWithKChanges[numberOfChangesAllowed], dynamicProgrammingArray[currentIndex][numberOfChangesAllowed]);\n                maximumLengthMapWithKChanges[numberOfChangesAllowed][numericalSequence[currentIndex]] = max(maximumLengthMapWithKChanges[numberOfChangesAllowed][numericalSequence[currentIndex]], dynamicProgrammingArray[currentIndex][numberOfChangesAllowed]);\n            }\n        }\n        return maxLengthOfGoodSubsequence;\n    }\n};",
    "submit_ts": 1717862346.0
}