{
    "username": "DestyFog",
    "submission": "class Solution {\n    public int minimumCost(String target, String[] words, int[] costs) {\n//         Map<String, Integer> wordMap = new HashMap<>();\n//         for (int i = 0; i < words.length; i++) {\n            \n//             wordMap.put(words[i], Math.min(costs[i], wordMap.getOrDefault(words[i], Integer.MAX_VALUE)));\n//         }\n        \n        TrieNode root = new TrieNode(' ');\n        for (int i = 0; i < words.length; i++) {\n            addWord(root, words[i], costs[i]);\n        }\n        \n        int[] memo = new int[target.length()];\n        return helper(0, memo, target, root);\n    }\n    \n    int helper(int index, int[] memo, String target, TrieNode root) {\n        if (index == target.length()) {\n            return 0;\n        }\n        \n        if (memo[index] != 0) {\n            return memo[index];\n        }\n        \n        int cost = Integer.MAX_VALUE;\n        TrieNode node = root;\n        for (int i = index; i < target.length(); i++) {\n            if (node.children[target.charAt(i) - 'a'] == null) {\n                break;\n            }\n            node = node.children[target.charAt(i) - 'a'];\n            if (node.isWord) {\n                int val = helper(i + 1, memo, target, root);\n                if (val != -1) {\n                    cost = Math.min(cost, node.cost + val);\n                }\n            } \n            \n            \n            // if (wordMap.containsKey(key)) {\n            //     int val = helper(i + 1, memo, target, wordMap);\n            //     if (val != -1) {\n            //         cost = Math.min(cost, wordMap.get(key) + val);\n            //     }\n            // }\n        }\n        \n        if (cost == Integer.MAX_VALUE) {\n            cost = -1;\n        }\n        \n        memo[index] = cost;\n        return cost;\n    }\n    \n    class TrieNode{\n        char c;\n\t\tTrieNode[] children;\n\t\tboolean isWord;\n\t\tint cost;\n\t\tTrieNode(char c) {\n\t\t\tthis.children = new TrieNode[26];\n\t\t\tthis.c = c;\n\t\t\tthis.isWord = false;\n\t\t\tthis.cost = 0;\n\t\t}\n    }\n    \n    public void addWord(TrieNode root, String word, int cost) {\n\t\tTrieNode cur = root;\n\t\tfor (int i = 0; i < word.length(); i++) {\n\t\t\tint idx = word.charAt(i) - 'a';\n\t\t\tif (cur.children[idx] == null) {\n\t\t\t\tcur.children[idx] = new TrieNode(word.charAt(i));\n\t\t\t\t\n\t\t\t}\n\t\t\tcur = cur.children[idx];\n\t\t\t\n\t\t}\n\t\tcur.isWord = true;\n        if (cur.cost != 0) {\n            cur.cost = Math.min(cur.cost, cost);\n        } else {\n            cur.cost = cost;\n        }\n\t}\n}",
    "submit_ts": "1720322336",
    "subm_id": "1312347150"
}