{
    "username": "VILLANOVA_ECON",
    "submission": "class Solution:\n    def minFlips(self, grid: List[List[int]]) -> int:\n        N = len(grid)\n        M = len(grid[0])\n        # if M == 1:\n        #     grid = list([list(row) for row in zip(*grid)])\n        #     N,M = len(grid),len(grid[0])\n        #print(grid)\n        #print(list(zip(*grid)))\n        def compute(row):\n            ans = 0\n            l = 0\n            r = len(row)-1\n            while l < r:\n                if row[l] != row[r]:\n                    ans += 1\n                l += 1\n                r -= 1\n            return ans \n        \n        \n        \n        \n        #print(N,M)\n        ans = 0\n        if N%2 == 1 and M%2 == 1:\n            if grid[N//2][M//2] == 1:\n                ans += 1\n                grid[N//2][M//2] = 0\n            \n        def compute_neighbors(i,j):            \n            a,b = N-i-1,M-j-1\n            return [[a,j],[a,b],[i,b]]\n        \n        \n        \n        for i in range(N//2):\n            \n            for j in range(M//2):\n                curr = grid[i][j]\n                temp_ans = curr\n                for a,b in compute_neighbors(i,j):\n                    temp_ans += grid[a][b]\n                ans += min(temp_ans,4-temp_ans)\n        if N%2 == 0 and M%2 == 0:\n            return ans\n\n        total_ones = 0\n        if N%2 == 1:\n            required_mods_row = compute(grid[N//2])\n            total_ones += sum(grid[N//2])\n        else:\n            required_mods_row = 0\n        if M%2 == 1:\n            mat1 = list(zip(*grid))\n            required_mods_col = compute(mat1[M//2])\n            for i in range(N):\n                total_ones += grid[i][M//2]\n        else:\n            required_mods_col = 0\n\n\n        total_mods = required_mods_row + required_mods_col\n        #print('ans',ans,'total_ones',total_ones,'total_mods',total_mods)\n        if total_mods >= total_ones%4 or (4-(total_ones%4)) <= total_mods:\n            return ans + total_mods\n        else:\n            return ans + total_mods + min(total_ones%4-total_mods,4-(total_ones%4+total_mods))\n\n        \n        ",
    "submit_ts": "1722698332",
    "subm_id": "1343177242"
}