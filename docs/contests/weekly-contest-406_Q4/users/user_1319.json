{
    "username": "HariniVelraj",
    "submission": "class Solution:\n    def minimumCost(self, m: int, n: int, horizontalCut: list[int], verticalCut: list[int]) -> int:\n        # Sort both cuts in descending order\n        horizontalCut.sort(reverse=True)\n        verticalCut.sort(reverse=True)\n        \n        # Initialize counters for the number of pieces\n        horizontal_pieces = 1\n        vertical_pieces = 1\n        total_cost = 0\n\n        # Use two pointers to process the cuts\n        h = 0\n        v = 0\n\n        # Process the cuts until we have used all of them\n        while h < len(horizontalCut) and v < len(verticalCut):\n            if horizontalCut[h] > verticalCut[v]:\n                total_cost += horizontalCut[h] * vertical_pieces\n                horizontal_pieces += 1\n                h += 1\n            else:\n                total_cost += verticalCut[v] * horizontal_pieces\n                vertical_pieces += 1\n                v += 1\n\n        # Add remaining horizontal cuts if any\n        while h < len(horizontalCut):\n            total_cost += horizontalCut[h] * vertical_pieces\n            h += 1\n\n        # Add remaining vertical cuts if any\n        while v < len(verticalCut):\n            total_cost += verticalCut[v] * horizontal_pieces\n            v += 1\n\n        return total_cost\n\n# Example usage\nsolution = Solution()\nprint(solution.minimumCost(3, 2, [1, 3], [5]))  # Output: 13\nprint(solution.minimumCost(2, 2, [7], [4]))  # Output: 15\n",
    "submit_ts": "1720925285",
    "subm_id": "1320249474"
}