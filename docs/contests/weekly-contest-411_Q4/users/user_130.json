{
    "username": "Tao Zhou",
    "submission": "class SegTree:\n    def __init__(self, arr):\n        m = len(arr)\n        n = 1\n        while n <m:\n            n =n<<1\n        self.n = n\n        self.tree = [0] *(2*n)\n        for i in range(m):\n            self.tree[n+i] = arr[i]\n        for i in range(n-1,0,-1):\n            self.tree[i] = self.tree[2*i] + self.tree[2*i+1]\n\n    def sum(self,a,b):\n        a += self.n\n        b += self.n\n        s =0 \n        while a<=b:\n            #print(a,b)\n            if a %2 ==1:\n                s+= self.tree[a]\n                a+=1\n            if b%2 ==0:\n                s += self.tree[b]\n                b -=1\n            a =a //2\n            b = b //2\n            #print(a,b,s)\n        return s\n    \n    def add(self,k, x):\n        k += self.n\n        self.tree[k] +=x\n        k = k//2\n        while k >=1:\n            self.tree[k] = self.tree[2*k] + self.tree[2*k+1]\n            k= k//2\n\n\nclass Solution:\n    def countKConstraintSubstrings(self, s: str, k: int, queries: List[List[int]]) -> List[int]:\n        n = len(s)\n        sg1= SegTree([0]*n)\n        sg2= SegTree([0]*n)\n        m = len(queries)\n        ret = [-1]*m\n        dic2 = defaultdict(list)\n        for i,(a,b) in enumerate(queries):\n            dic2[b].append((i,a))\n        \n        dic = defaultdict(int)\n        l = 0 \n        for i,a in enumerate(s):\n            dic[a] +=1\n            while dic[\"0\"] > k and dic[\"1\"]>k:\n                sg1.add(l,i-1)\n                sg2.add(l,1)\n                dic[s[l]] -=1\n                l +=1\n            for (idx,f) in dic2[i]:\n                acc = (i-f+1)*(i-f+2)//2\n                #print(acc,idx,f,i,sg2.query(f,i),sg1.query(f,i))\n                acc -= sg2.sum(f,i) * i - sg1.sum(f,i)\n                ret[idx] = acc\n        return ret",
    "submit_ts": "1723952329",
    "subm_id": "556410951"
}