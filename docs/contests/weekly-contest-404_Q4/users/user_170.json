{
    "username": "zephyrr",
    "submission": "class Solution:\n    def minimumDiameterAfterMerge(self, edges1: List[List[int]], edges2: List[List[int]]) -> int:\n        g1 = defaultdict(list)\n        g2 = defaultdict(list)\n        for a,b in edges1:\n            g1[a].append(b)\n            g1[b].append(a)\n        for a,b in edges2:\n            g2[a].append(b)\n            g2[b].append(a)\n        \n        def finddia(g):\n            res = 0\n\n            def dfs(node,par):\n                nonlocal res\n                tmp = 0\n                arr = []\n                for nxt in g[node]:\n                    if nxt != par:\n                        arr.append(dfs(nxt,node))\n                if len(arr) == 0:\n                    res = max(res,1)\n                    return 1\n                if len(arr) == 1:\n                    res = max(res, 1 + arr[0])\n                    return 1+arr[0]\n                arr.sort()\n                res = max(res, 1 + arr[-1]+arr[-2])\n                return 1 + arr[-1]\n            \n            dfs(0,0)\n            return res\n        d1 = finddia(g1)\n        d2 = finddia(g2)\n        #print(d1,d2)\n        d1,d2 = min(d1,d2), max(d1,d2)\n        res = max(d2-1, d1//2+d2//2+1) \n\n        return res",
    "submit_ts": 1719717295.0
}