{
    "username": "thedark_JS",
    "submission": "class Solution {\npublic:\n    \n    long long dp[305][405], pres[305];\n    long long mod = 1e9 + 7;\n    int minn_inv = 404;\n    \n    long long findNumberOfArraysWithInversion(int n, int k){\n        if(n <= 0 || k < 0) return 0;\n          // cout<<\"okay \"<<n<<\"  \"<<k<<\".  \"<<dp[n][k]<<endl;\n\n        // if(pres[n] != -1 && pres[n] != k){\n        //     dp[n][k] = 0;\n        //     return 0;\n        // }\n        if(dp[n][k] != -1) return dp[n][k];\n        \n        \n        \n        long long ans = 0;\n        \n        for(int i = k ; i >= 0 ; i--){\n            if(i <= n - 1){\n                ans += findNumberOfArraysWithInversion(n - 1, k - i);\n                // if(n == 2 && k == 2){\n                //     cout<<\"mosstt \"<<i<<\"  \"<<ans<<endl;\n                // }\n                ans %= mod;\n            }\n        }\n        dp[n][k] = ans;\n        //  cout<<\"okay \"<<n<<\"  \"<<k<<endl;\n        // cout<<\"okay ans is \"<<ans<<endl;\n        return ans;\n        \n    }\n    \n    \n    int numberOfPermutations(int n, vector<vector<int>>& requirements) {\n        memset(dp, -1, sizeof(dp));\n        memset(pres, -1, sizeof(pres));\n        \n        int k = 0;\n        minn_inv = 303;\n        for(int i = 0 ; i < requirements.size() ; i++){\n            pres[requirements[i][0] + 1] = requirements[i][1];\n            if(requirements[i][1] > 0){\n                minn_inv = min(minn_inv, requirements[i][0] + 1);\n            }\n            if(requirements[i][0]  == n - 1){\n                k = requirements[i][1]; \n            }\n        }\n        \n        // for(int i = 0 ; i <= k ; i++){\n        //     dp[0][i] = 0;\n        // }\n        for(int i = 1 ; i <= minn_inv - 1 ; i++){\n            dp[i][0] = 1;\n        }\n        \n        for(int i = minn_inv ; i <= n ; i++){\n            dp[i][0] = 0;\n        }\n        \n        for(int i = 1 ; i <= n ; i++){\n            if(pres[i] == -1) continue;\n            for(int j = 0 ; j <= k ; j++){\n                if(j != pres[i]) dp[i][j] = 0;\n            }\n        }\n        \n        int ans = findNumberOfArraysWithInversion(n, k);\n        \n        /*\n        cout<<\"alright print\"<<endl;\n        \n        for(int i = 1 ; i <= 3 ; i++){\n            for(int j = 0 ; j <= 2 ; j++){\n                cout<<dp[i][j]<<'  ';\n            }\n            cout<<endl;\n        }\n        */\n        return ans;\n        \n    }\n};",
    "submit_ts": 1719071838.0
}