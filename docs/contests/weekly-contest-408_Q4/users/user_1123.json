{
    "username": "rs_ranaprabal",
    "submission": "class Solution\n{\npublic:\n    bool BFS(int src, int desti, vector<vector<int>> &adj)\n    {\n        int n = adj.size();\n        queue<int> q;\n        int visited[n];\n        memset(visited, 0, sizeof(visited));\n        visited[src] = 1;\n        q.push(src);\n        while (q.size())\n        {\n            int node = q.front();\n            q.pop();\n            for (int i = 0; i < n; i++)\n            {\n                if (adj[node][i])\n                {\n                    if (visited[i] == 0)\n                    {\n                        visited[i] = 1;\n                        q.push(i);\n                    }\n                }\n            }\n        }\n        return visited[desti];\n    }\n\n    bool canReachCorner(int x, int y, vector<vector<int>> &circles)\n    {\n        int n = circles.size();\n        vector<vector<int>> adj(n + 4, vector<int>(n + 4, 0));\n        for (int i = 0; i < n; i++)\n        {\n            if (circles[i][1] + circles[i][2] >= y)\n            {\n                adj[i][n] = 1;\n                adj[n][i] = 1;\n            }\n            if (circles[i][1] - circles[i][2] <= 0)\n            {\n                adj[i][n + 2] = 1;\n                adj[n + 2][i] = 1;\n            }\n            if (circles[i][0] + circles[i][2] >= x)\n            {\n                adj[i][n + 3] = 1;\n                adj[n + 3][i] = 1;\n            }\n            if (circles[i][0] - circles[i][2] <= 0)\n            {\n                adj[i][n + 1] = 1;\n                adj[n + 1][i] = 1;\n            }\n            for (int j = i + 1; j < n; j++)\n            {\n                if (sqrt(pow(circles[i][0] - circles[j][0], 2) + pow(circles[i][1] - circles[j][1], 2)) <= circles[i][2] + circles[j][2])\n                {\n                    adj[i][j] = 1;\n                    adj[j][i] = 1;\n                }\n            }\n        }\n        bool ans = false;\n        // n-top,n+1-left,n+2-bottom,n+3-right\n        ans = ans || BFS(n, n + 3, adj);\n        ans = ans || BFS(n, n + 2, adj);\n        ans = ans || BFS(n + 3, n + 1, adj);\n        ans = ans || BFS(n+2,n+1,adj);\n\n        if (ans) return 0;\n        else return 1;\n    }\n};",
    "submit_ts": "1722138685",
    "subm_id": "1335797059"
}