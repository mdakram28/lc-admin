{
    "username": "XKTZ",
    "submission": "typedef long long ll;\n\nconstexpr ll MAXN = 5e4 + 5;\nconstexpr ll BASE = 31;\nconstexpr ll MOD = 1e9 + 7;\n\nll N, M, B;\nbool initp = false;\nll ps[MAXN];\n\nll hsh[MAXN];\n\nvoid gen(string &s) {\n    if (!initp) {\n        initp = 1;\n        ps[0] = 1;\n        for (ll i = 1; i < MAXN; i ++) {\n            ps[i] = ps[i-1] * BASE % MOD;\n        }\n    }\n    for (ll i = 0; i < N; i ++) {\n        hsh[i + 1] = (s[i] - 'a' + 1 + hsh[i] * BASE) % MOD;\n    }\n}\n\nll query(ll l, ll r) {\n    return (hsh[r] - hsh[l - 1] * ps[r - l + 1] % MOD + MOD) % MOD;\n}\n\n\nll cstword[MAXN];\nll hshword[MAXN];\nll lenword[MAXN];\n\nll hshof(string &s) {\n    ll hsh = 0;\n    for (auto &c: s) {\n        ((hsh *= BASE) += (c - 'a' + 1)) %= MOD;\n    }\n    return hsh;\n}\n\nunordered_map<ll, ll> mncost;\nvector<ll> geqB;\n\nll dp[MAXN];\n\nclass Solution {\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        mncost.clear();\n        geqB.clear();\n        N = target.size();\n        M = words.size();\n        B = max(5ll, ll(sqrt(N) + 2));\n        for (ll i = 0; i < M; i ++) {\n            lenword[i] = words[i].size();\n            hshword[i] = hshof(words[i]);\n            cstword[i] = costs[i];\n            if (mncost.count(hshword[i])) {\n                mncost[hshword[i]] = min(mncost[hshword[i]], cstword[i]);\n            } else {\n                mncost[hshword[i]] = cstword[i];\n            }\n            if (lenword[i] > B) {\n                geqB.push_back(i);\n            }\n        }\n        gen(target);\n        fill(dp, dp + N + 1, 0x3f3f3f3f3f3f3f3fll);\n        dp[0] = 0;\n        for (ll i = 0; i < N; i ++) {\n            for (ll j = 1; j <= B && i + j <= N; j ++) {\n                ll H = query(i + 1, i + j);\n                if (mncost.count(H)) {\n                    dp[i + j] = min(dp[i + j], dp[i] + mncost[H]);\n                    // cout << i << ' ' << j << ' ' << mncost[H] << '\\n';\n                }\n            }\n            for (auto idx: geqB) {\n                ll L = lenword[idx];\n                ll C = cstword[idx];\n                ll H = hshword[idx];\n                if (i + L <= N && query(i + 1, i + L) == H) {\n                    dp[i + L] = min(dp[i + L], dp[i] + C);\n                    // cout << i << ' ' << L << ' ' << C << '\\n';\n                }\n            }\n        }\n        if (dp[N] == 0x3f3f3f3f3f3f3f3f) {\n            return -1;\n        } else {\n            return dp[N];\n        }\n    }\n};",
    "submit_ts": "1720321274",
    "subm_id": "1312318374"
}