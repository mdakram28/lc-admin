{
    "username": "hoanh",
    "submission": "typedef long long ll;\n\n#define INIT int lid=id*2, rid=id*2+1, mid=l+(r-l)/2;\n\nclass SegTree {\nprivate:\n  int n;\n  int tree[262144];\n  vector<int> a;\n\n  void init(int id, int l, int r) {\n    if (l == r) {\n      tree[id] = l;\n      return;\n    }\n    \n    INIT;\n    init(lid, l, mid);\n    init(rid, mid+1, r);\n    \n    if (a[tree[lid]] <= a[tree[rid]]) tree[id] = tree[lid];\n    else tree[id] = tree[rid];\n  }\n\n  int indexWithMinValue(int id, int l, int r, int x, int y) {\n    if (y < l || x > r) return -1;\n    if (x <= l && r <= y) return tree[id];\n    \n    INIT;\n    int u = indexWithMinValue(lid, l, mid, x, y);\n    int v = indexWithMinValue(rid, mid+1, r, x, y);\n    assert(u != -1 || v != -1);\n    \n    if (u == -1) return v;\n    if (v == -1) return u;\n    if (a[u] <= a[v]) return u;\n    else return v;\n  }\n\npublic:\n  SegTree() {}\n  \n  SegTree(const vector<int>& a_) {\n    a = a_;\n    n = a.size();\n    \n    memset(tree, 0, sizeof(tree));\n    init(1, 0, n-1);\n  }\n\n  int IndexWithMinValue(int l, int r) {\n    return indexWithMinValue(1, 0, n-1, l, r);\n  }\n};\n\nclass Solution {\npublic:\n  vector<int> a;\n  SegTree tree;\n   \n  int sign(int x) {\n    if (x == 0) return 0;\n    else if (x > 0) return 1;\n    else return -1;\n  }\n  \n  ll solve(int l, int r, int ground) {\n    // cout << \"solve \" << l << \" \" << r << \" \" << ground << endl;\n    ll res = 0;\n    \n    int i = tree.IndexWithMinValue(l, r);\n    // cout << \"i= \" << i << endl;\n    res += a[i] - ground;\n    \n    if (l <= i-1) res += solve(l, i-1, a[i]);\n    if (i+1 <= r) res += solve(i+1, r, a[i]);\n    return res;\n  }\n  \n  ll minimumOperations(vector<int>& nums, vector<int>& target) {\n    a = nums;\n    \n    int n = a.size();\n    for (int i = 0; i < n; ++i) a[i] = target[i] - a[i];\n    \n    vector<pair<int,int>> ranges;\n    for (int l = 0; l < n; ++l) {\n      int r = l;\n      while (r + 1 < n && sign(a[r + 1]) == sign(a[r])) ++r;\n      // cout << l << \" \" << r << endl;\n      ranges.push_back({ l, r });\n      l = r;\n    }\n    \n    for (int i = 0; i < n; ++i) a[i] = abs(a[i]);\n    // for (int x : a) cout << x << \" \"; cout << endl;\n    \n    tree = SegTree(a);\n    \n    ll res = 0;\n    for (auto& [l, r] : ranges) {\n      res += solve(l, r, 0);\n    }\n    return res;\n  }\n};",
    "submit_ts": "1721532650",
    "subm_id": "1327990847"
}