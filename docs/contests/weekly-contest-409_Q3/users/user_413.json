{
    "username": "Blitxen",
    "submission": "from sortedcontainers import SortedList\n\nclass Solution:\n    def shortestDistanceAfterQueries(self, n: int, queries: List[List[int]]) -> List[int]:\n        ans = []\n        \n        _sum = n - 1\n        \n        bridges = SortedList([(i, i + 1) for i in range(n - 1)])\n        \n        # print(\"NEW\")\n        for u, v in queries:\n            right = bridges.bisect_left((u, v))\n            \n            # print(right)\n            \n            if (\n                (right < len(bridges) and bridges[right][0] <= u and v <= bridges[right][1]) or\n                (right > 0 and bridges[right - 1][0] <= u and v <= bridges[right - 1][1])\n            ):\n                ans.append(n - 1 - _sum + len(bridges))\n                continue\n            \n            left = right - 1\n            \n            to_remove = []\n            while left >= 0 and bridges[left][0] >= u:\n                to_remove.append(bridges[left])\n                left -= 1\n                \n            while right < len(bridges) and bridges[right][1] <= v:\n                to_remove.append(bridges[right])\n                right += 1\n                \n            for x, y in to_remove:\n                _sum -= y - x\n                bridges.remove((x, y))\n                \n            _sum += v - u\n            bridges.add((u, v))\n            \n            ans.append(n - 1 - _sum + len(bridges))\n        \n        return ans",
    "submit_ts": "1722741374",
    "subm_id": "1343743411"
}