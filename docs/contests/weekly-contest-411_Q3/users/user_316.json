{
    "username": "Eugene Chereshnev",
    "submission": "class Solution:\n    def largestPalindrome(self, n: int, k: int) -> str:\n        if n <= 6:\n            for i in range(10 ** n - 1, 10 ** (n - 1) - 1, -1):\n                if i % k == 0 and str(i) == str(i)[::-1]: return str(i)\n        if k == 1 or k == 3 or k == 9:\n            return '9' * n\n        if k == 5:\n            return '5' + '9' * (n - 2) + '5'\n        if k == 2:\n            return '8' + '9' * (n - 2) + '8'\n        if k == 6:\n            n4 = (n - 4) // 2\n            if n % 2 == 0: return '8' + '9' * n4 + '77' + '9' * n4 + '8'\n            n2 = n // 2 - 1\n            return '8' + '9' * n2 + '8' + '9' * n2 +  '8'\n        if k == 4 or k == 8:\n            prefix = ''\n            for i in range(999, 99, -1):\n                if i % 10 != 0 and i % k == 0:\n                    prefix = max(prefix, str(i)[::-1])\n            return prefix + '9' * (n - 6) + prefix[::-1]\n        assert k == 7\n        def get_mod7(digits):\n            res = 0\n            cur = 1\n            for i in range(n - 1, -1, -1):\n                res = (res + digits[i] * cur) % 7\n                cur = (cur * 10) % 7\n            return res\n                \n        digits = [9] * n\n        mid = 9\n        while get_mod7(digits) != 0:\n            mid -= 1\n            digits[(n - 1) // 2] = mid\n            digits[n // 2] = mid\n        return ''.join(map(str, digits))",
    "submit_ts": "1723951447",
    "subm_id": "1359771753"
}