{
    "username": "dheerajkumar20012004",
    "submission": "class Solution {\n    public static long maxSum;\n\n    public long maximumValueSum(int[][] board) {\n        maxSum = Long.MIN_VALUE;\n        int m = board.length;\n        int n = board[0].length;\n        boolean[] rowUsed = new boolean[m];\n        boolean[] colUsed = new boolean[n];\n        int[] colIndices = new int[n];\n        for (int i = 0; i < n; i++) {\n            colIndices[i] = i;\n        }\n        Integer[] rowIndices = new Integer[m];\n        for (int i = 0; i < m; i++) {\n            rowIndices[i] = i;\n        }\n        Arrays.sort(rowIndices, (a, b) -> Integer.compare(maxInRow(board[b]), maxInRow(board[a])));\n\n        backtrack(board, rowUsed, colUsed, colIndices, rowIndices, 0, 0, 0);\n        return maxSum;\n    }\n\n    private static int maxInRow(int[] row) {\n        int max = Integer.MIN_VALUE;\n        for (int value : row) {\n            max = Math.max(max, value);\n        }\n        return max;\n    }\n\n    private static void backtrack(int[][] board, boolean[] rowUsed, boolean[] colUsed, int[] colIndices,\n            Integer[] rowIndices, int rookCount, long currentSum, int startRow) {\n        if (rookCount == 3) {\n            maxSum = Math.max(maxSum, currentSum);\n            return;\n        }\n        int remaining = 3 - rookCount;\n        if (startRow + remaining > board.length) {\n            return;\n        }\n\n        long maxPossibleSum = currentSum;\n        for (int i = 0; i < remaining; i++) {\n            if (startRow + i < board.length) {\n                maxPossibleSum += maxInRow(board[rowIndices[startRow + i]]);\n            }\n        }\n        if (maxPossibleSum <= maxSum) {\n            return;\n        }\n        for (int i = startRow; i < board.length; i++) {\n            int row = rowIndices[i];\n            for (int j = 0; j < colIndices.length; j++) {\n                int col = colIndices[j];\n                if (!rowUsed[row] && !colUsed[col]) {\n                    // Place the rook\n                    rowUsed[row] = true;\n                    colUsed[col] = true;\n                    backtrack(board, rowUsed, colUsed, colIndices, rowIndices, rookCount + 1,\n                            currentSum + board[row][col], i + 1);\n                    // Backtrack\n                    rowUsed[row] = false;\n                    colUsed[col] = false;\n                }\n            }\n        }\n    }\n}",
    "submit_ts": "1723908421",
    "subm_id": "1359151898"
}