{
    "username": "user0410Iv",
    "submission": "class Solution {\npublic:\n    long long minimumCost(int m, int n, vector<int>& horizontalCut,\n                          vector<int>& verticalCut) {\n        sort(horizontalCut.begin(), horizontalCut.end());\n        sort(verticalCut.begin(), verticalCut.end());\n        long long numVert = 1, numHor = 1;\n\n        long long cost = 0;\n        const long long reqSquares = (long long) m * n;\n\n        auto cutVert = [&numVert, &numHor, &verticalCut, &cost]() {\n            numVert += 1;\n            cost += numHor * verticalCut.back();\n            verticalCut.erase(prev(verticalCut.end()));\n            // cout << \"vertical \" << cost << endl;\n        };\n\n        auto cutHor = [&numVert, &numHor, &horizontalCut, &cost]() {\n            numHor += 1;\n            cost += numVert * horizontalCut.back();\n            horizontalCut.erase(prev(horizontalCut.end()));\n            // cout << \"horizontal \" << cost << endl;\n        };\n\n        while (numVert * numHor < reqSquares) {\n            if (horizontalCut.empty())\n                cutVert();\n            else if (verticalCut.empty())\n                cutHor();\n            else if (verticalCut.back() >= horizontalCut.back())\n                cutVert();\n            else\n                cutHor();\n        }\n\n        return cost;\n    }\n};",
    "submit_ts": "1720925875",
    "subm_id": "1320269027"
}