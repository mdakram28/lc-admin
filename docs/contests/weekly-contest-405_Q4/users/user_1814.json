{
    "username": "unknown-",
    "submission": "use std::collections::HashMap;\n\n\nimpl Solution {\n    pub fn minimum_cost(target: String, words: Vec<String>, costs: Vec<i32>) -> i32 {\n        let mut root = Trie::new();\n        for (word, cost) in words.into_iter().zip(costs) {\n            let mut node = &mut root;\n            for ch in word.chars().rev() {\n                node = node.children.entry(ch).or_insert(Trie::new());\n            }\n            node.cost = node.cost.min(cost);\n        }\n\n        let mut dp = vec![i32::MAX; target.len() + 1];\n        dp[0] = 0;\n        let target = target.chars().collect::<Vec<_>>();\n        for i in 1..=target.len() {\n            let mut node = &root;\n            for j in (0..i).rev() {\n                if let Some(next_node) = node.children.get(&target[j]) {\n                    node = next_node;\n                    dp[i] = dp[i].min(dp[j].saturating_add(node.cost));\n                } else {\n                    break;\n                }\n            }\n        }\n\n        if dp[target.len()] == i32::MAX {\n            -1\n        } else {\n            dp[target.len()]\n        }\n    }\n}\n\nstruct Trie {\n    cost: i32,\n    children: HashMap<char, Trie>,\n}\n\nimpl Trie {\n    fn new() -> Self {\n        Self {\n            cost: i32::MAX,\n            children: HashMap::new(),\n        }\n    }\n}",
    "submit_ts": "1720324594",
    "subm_id": "1312403370"
}