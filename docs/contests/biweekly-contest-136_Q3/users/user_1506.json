{
    "username": "singh_aditya_074",
    "submission": "class Solution {\npublic:\n    int minFlips(vector<vector<int>>& matrix) {\n        int rows = matrix.size();\n        int cols = matrix[0].size();\n        int flipsRequired = 0;\n\n        if (rows % 2 == 1 && cols % 2 == 1) {\n            if (matrix[rows / 2][cols / 2] == 1) {\n                flipsRequired += 1;\n            }\n        }\n\n        vector<int> count(3, 0);\n        if (rows % 2 == 1) {\n            int midCol = cols / 2;\n            for (int j = 0; j < midCol; ++j) {\n                int pairSum = matrix[rows / 2][j] + matrix[rows / 2][cols - j - 1];\n                count[pairSum]++;\n            }\n        }\n\n        if (cols % 2 == 1) {\n            int midRow = rows / 2;\n            for (int i = 0; i < midRow; ++i) {\n                int pairSum = matrix[i][cols / 2] + matrix[rows - i - 1][cols / 2];\n                count[pairSum]++;\n            }\n        }\n\n        if (count[2] % 2 == 1) {\n            if (count[1] > 0) {\n                flipsRequired += count[1];\n            } else {\n                flipsRequired += 2;\n            }\n        } else {\n            flipsRequired += count[1];\n        }\n\n        for (int i = 0; i < rows / 2; ++i) {\n            for (int j = 0; j < cols / 2; ++j) {\n                int topLeft = matrix[i][j];\n                int bottomLeft = matrix[rows - i - 1][j];\n                int topRight = matrix[i][cols - j - 1];\n                int bottomRight = matrix[rows - i - 1][cols - j - 1];\n\n                int totalSum = topLeft + bottomLeft + topRight + bottomRight;\n                if (totalSum != 0 && totalSum != 4) {\n                    flipsRequired += min(totalSum, 4 - totalSum);\n                }\n            }\n        }\n\n        return flipsRequired;\n    }\n};\n",
    "submit_ts": "1722699680",
    "subm_id": "1343219069"
}