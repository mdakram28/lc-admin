{
    "username": "manasagarwal12921",
    "submission": "class Solution {\npublic:\nclass SegmentTree {\npublic:\n    vector<int> tree;\n    int n;\n\n    // Constructor\n    SegmentTree(vector<int>& arr)\n    {\n        n = arr.size();\n        tree.resize(4 * n);\n        build(arr, 0, 0, n - 1);\n    }\n\n    // Function to build the Segment Tree\n    void build(vector<int>& arr, int node, int start,\n               int end)\n    {\n        if (start == end) {\n            tree[node] = arr[start];\n        }\n        else {\n            int mid = (start + end) / 2;\n            build(arr, 2 * node + 1, start, mid);\n            build(arr, 2 * node + 2, mid + 1, end);\n\n            // bitwise AND of the children nodes\n            tree[node]\n                = tree[2 * node + 1] & tree[2 * node + 2];\n        }\n    }\n\n    // Overloading query function to be used recursively\n    \n    // query function to get bitwise AND of the range\n    int query(int node, int start, int end, int l, int r)\n    {\n        if (r < start || end < l) {\n            return (1<<30)-1;\n        }\n        if (l <= start && end <= r) {\n            return tree[node];\n        }\n        int mid = (start + end) / 2;\n        int p1 = query(2 * node + 1, start, mid, l, r);\n        int p2 = query(2 * node + 2, mid + 1, end, l, r);\n\n        // bitwise AND operation result\n        return p1 & p2;\n    }\n};\n    int minimumDifference(vector<int>& nums, int k) {\n        int n=nums.size();\n        SegmentTree tr(nums);\n        int ans=1e9+1;\n        \n        for(int i=0;i<n;i++){\n           // cout<<tr.query(0,0,n-1,i,i)<<endl;;\n            int u=n-1;\n            int l=i;\n            while(l<=u){\n                int mid=(l+u)/2;\n                int c=tr.query(0,0,n-1,i,mid);\n               // cout<<c<<\" \"<<mid<<\" \"<<i<<endl;\n                if(c<=k){\n                    ans=min(k-c,ans);\n                    u=mid-1;\n                }\n                else{\n                    ans=min(c-k,ans);\n                    l=mid+1;\n                }\n            }\n        }\n        return ans;\n        \n    }\n};",
    "submit_ts": 1717300544.0
}