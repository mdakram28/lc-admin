{
    "username": "mfk443838746",
    "submission": "class SegmentTree {\nprivate:\n    vector<int> tree;\n    vector<int> nums;\n    int n;\n\n    void build(int node, int start, int end) {\n        if (start == end) {\n            tree[node] = isPeak(start) ? 1 : 0;\n        } else {\n            int mid = (start + end) / 2;\n            build(2 * node, start, mid);\n            build(2 * node + 1, mid + 1, end);\n            tree[node] = tree[2 * node] + tree[2 * node + 1];\n        }\n    }\n\n    void updateNode(int node, int start, int end, int idx) {\n        if (start == end) {\n            tree[node] = isPeak(start) ? 1 : 0;\n        } else {\n            int mid = (start + end) / 2;\n            if (start <= idx && idx <= mid) {\n                updateNode(2 * node, start, mid, idx);\n            } else {\n                updateNode(2 * node + 1, mid + 1, end, idx);\n            }\n            tree[node] = tree[2 * node] + tree[2 * node + 1];\n        }\n    }\n\n    int queryRange(int node, int start, int end, int L, int R) {\n        if (R < start || end < L) {\n            return 0;\n        }\n        if (L <= start && end <= R) {\n            return tree[node];\n        }\n        int mid = (start + end) / 2;\n        int leftQuery = queryRange(2 * node, start, mid, L, R);\n        int rightQuery = queryRange(2 * node + 1, mid + 1, end, L, R);\n        return leftQuery + rightQuery;\n    }\n\n    bool isPeak(int i) {\n        if (i <= 0 || i >= n - 1) return false;\n        return nums[i] > nums[i - 1] && nums[i] > nums[i + 1];\n    }\n\npublic:\n    SegmentTree(vector<int>& nums) : nums(nums), n(nums.size()) {\n        tree.resize(4 * n);\n        build(1, 0, n - 1);\n    }\n\n    void update(int idx, int val) {\n        nums[idx] = val;\n        updateNode(1, 0, n - 1, idx);\n        if (idx > 0) updateNode(1, 0, n - 1, idx - 1);\n        if (idx < n - 1) updateNode(1, 0, n - 1, idx + 1);\n    }\n\n    int query(int L, int R) {\n        return queryRange(1, 0, n - 1, L + 1, R - 1); // \u4e0d\u8003\u8651\u5b50\u6570\u7ec4\u7684\u7b2c\u4e00\u4e2a\u548c\u6700\u540e\u4e00\u4e2a\u5143\u7d20\n    }\n};\n\nclass Solution {\npublic:\n    vector<int> countOfPeaks(vector<int>& nums, vector<vector<int>>& queries) {\n        SegmentTree segTree(nums);\n        vector<int> res;\n\n        for (const auto& query : queries) {\n            if (query[0] == 1) {\n                int l = query[1];\n                int r = query[2];\n                res.push_back(segTree.query(l, r));\n            } else if (query[0] == 2) {\n                int index = query[1];\n                int value = query[2];\n                segTree.update(index, value);\n            }\n        }\n\n        return res;\n    }\n};",
    "submit_ts": 1718507937.0
}