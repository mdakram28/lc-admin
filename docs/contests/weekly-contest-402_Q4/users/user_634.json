{
    "username": "shootingstar33",
    "submission": "int tree[400005];\nint arr[100005];\n\nvoid build(int idx, int l, int r){\n    if(l == r){\n        tree[idx] = arr[l];\n        return;\n    }\n\n    int mid = (l + r) / 2;\n    build(2*idx, l, mid);\n    build(2*idx+1, mid+1, r);\n    tree[idx] = tree[2*idx] + tree[2*idx+1];\n}\n\nvoid update(int idx, int l, int r, int pos, int val){\n    if(l > pos || r < pos) return;\n    if(l == r){\n        tree[idx] = val;\n        return;\n    }\n\n    int mid = (l + r) / 2;\n    update(2*idx, l, mid, pos, val);\n    update(2*idx+1, mid+1, r, pos, val);\n    tree[idx] = tree[2*idx] + tree[2*idx+1];\n}\n\nint query(int idx, int l, int r, int lq, int rq){\n    if(l > rq || r < lq) return 0;\n    if(l >= lq && r <= rq) return tree[idx];\n\n    int mid = (l + r) / 2;\n    return (query(2*idx, l, mid, lq, rq) + query(2*idx+1, mid+1, r, lq, rq));\n}\n\nclass Solution {\npublic:\n    vector<int> countOfPeaks(vector<int>& nums, vector<vector<int>>& queries) {\n        int n = nums.size();\n        \n        for(int i=1; i<n-1; i++){\n            arr[i] = (nums[i] > nums[i-1] && nums[i] > nums[i+1]);\n        }\n        arr[n-1] = 0;\n        arr[0] = 0;\n        \n        vector<int> res;\n        build(1, 0, n-1);\n        \n        for(auto &q : queries){\n            if(q[0] == 2){\n                nums[q[1]] = q[2];\n                int i = q[1];\n                if(i > 0 && i < n-1){\n                    arr[i] = (nums[i] > nums[i-1] && nums[i] > nums[i+1]);\n                    update(1, 0, n-1, i, arr[i]);\n                }\n                if(i-2 >= 0 && i < n){\n                    arr[i-1] = (nums[i-1] > nums[i-2] && nums[i-1] > nums[i]);\n                    update(1, 0, n-1, i-1, arr[i-1]);\n                }\n                if(i < n-2 && i >= 0){\n                    arr[i+1] = (nums[i+1] > nums[i] && nums[i+1] > nums[i+2]);\n                    update(1, 0, n-1, i+1, arr[i+1]);\n                }      \n            }\n            else{\n                int l = q[1] + 1;\n                int r = q[2] - 1;\n                \n                if(l > r){\n                    res.push_back(0);\n                    continue;\n                }\n                \n                int ans = query(1, 0, n-1, l, r);\n                res.push_back(ans);\n            }\n        }\n        \n        // for(int i=0; i<n; i++){\n        //     cout << arr[i] << ' ';\n        // }\n        // cout << '\\n';\n        // for(int i=0; i<4*n; i++){\n        //     cout << i << ' ' << tree[i] << '\\n';\n        // }\n        // cout << '\\n';\n        \n        return res;\n    }\n};",
    "submit_ts": "1718507780",
    "subm_id": "1289662247"
}