{
    "username": "yi-zhi-bao-zi-h",
    "submission": "class SparseTable:\n    def __init__(self, nums: List[int], func: Callable):\n        self.func = func\n        self.st = [nums]\n        i, n = 1, len(nums)\n        while i << 1 <= n:\n            pre = self.st[-1]\n            self.st.append([func(pre[j], pre[j + i]) for j in range(n - (i << 1) + 1)])\n            i <<= 1\n\n    def query(self, begin: int, end: int):\n        lg = (end - begin + 1).bit_length() - 1\n        return self.func(self.st[lg][begin], self.st[lg][end - (1 << lg) + 1])\n\nclass Solution:\n    def countSubarrays(self, nums: List[int], k: int) -> int:\n        st = SparseTable(nums, and_)\n        n = len(nums)\n        ans = 0\n        for i in range(n):\n            left, right = i, n - 1\n            while left <= right:\n                mid = (left + right) // 2\n                if st.query(i, mid) <= k:\n                    right = mid - 1\n                else:\n                    left = mid + 1\n            l = left\n            left, right = i, n - 1\n            while left <= right:\n                mid = (left + right) // 2\n                if st.query(i, mid) <= k - 1:\n                    right = mid - 1\n                else:\n                    left = mid + 1\n            r = right\n            ans += r - l + 1\n        return ans",
    "submit_ts": "1720277171",
    "subm_id": "544554945"
}