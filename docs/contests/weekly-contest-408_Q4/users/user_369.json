{
    "username": "MiniDanny",
    "submission": "class Solution {\npublic:\n    vector<int> mapping;\n    int find(int val)\n    {\n        if(mapping[val] == val)\n        {\n            return val;\n        }\n\n        return mapping[val] = find(mapping[val]);\n    }\n\n    void Union(int x, int y)\n    {\n        x = find(x);\n        y = find(y);\n\n        if(x != y)\n        {\n            mapping[max(x, y)] = min(x, y);\n        }\n    }\n    \n    bool canReachCorner(int X, int Y, vector<vector<int>>& circles) {\n        int n = circles.size();\n\n        for(int i = 0; i < n; i++)\n        {\n            mapping.push_back(i);\n        }\n\n        for(int i = 0; i < n; i++)\n        {\n            for(int j = i+1; j < n; j++)\n            {\n                long long x1 = circles[i][0], y1 = circles[i][1], r1 = circles[i][2];\n                long long x2 = circles[j][0], y2 = circles[j][1], r2 = circles[j][2];\n                long long d = (x1-x2)*(x1-x2) + (y1-y2)*(y1-y2);\n                long long r = r1+r2;\n                if(r*r >= d) Union(i, j);\n            }\n        }\n\n        \n        vector<int> state(n, 0);\n        for(int i = 0; i < n; i++)\n        {\n            int idx = find(i);\n            int x = circles[i][0], y = circles[i][1], r = circles[i][2];\n            if(y+r >= Y) state[idx] |= 1;\n            if(x+r >= X) state[idx] |= 2;\n            if(y-r <= 0) state[idx] |= 4;\n            if(x-r <= 0) state[idx] |= 8;\n            if((state[idx]&3) == 3) return false;\n            if((state[idx]&5) == 5) return false;\n            if((state[idx]&10) == 10) return false;\n            if((state[idx]&12) == 12) return false;\n        }\n        return true;\n    }\n};",
    "submit_ts": "1722137196",
    "subm_id": "1335756892"
}