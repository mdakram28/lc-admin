{
    "username": "Now_say_my_name",
    "submission": "#include <vector>\n#include <string>\n#include <unordered_map>\n#include <climits>\nusing namespace std;\n\nclass TrieNode {\npublic:\n    unordered_map<char, TrieNode*> children;\n    int cost;\n    \n    TrieNode() : cost(INT_MAX) {}\n};\n\nclass Trie {\npublic:\n    TrieNode* root;\n    \n    Trie() {\n        root = new TrieNode();\n    }\n    \n    void insert(const string& word, int cost) {\n        TrieNode* node = root;\n        for (char c : word) {\n            if (!node->children.count(c)) {\n                node->children[c] = new TrieNode();\n            }\n            node = node->children[c];\n        }\n        node->cost = min(node->cost, cost);\n    }\n};\n\nclass Solution {\npublic:\n    int minimumCost(string tar, vector<string>& grid, vector<int>& costs) {\n        Trie trie;\n        int n = grid.size();\n        for (int i = 0; i < n; ++i) {\n            trie.insert(grid[i], costs[i]);\n        }\n        \n        int m = tar.size();\n        vector<int> dp(m + 1, INT_MAX);\n        dp[0] = 0;\n        \n        for (int i = 0; i < m; ++i) {\n            if (dp[i] == INT_MAX) continue;\n            \n            TrieNode* node = trie.root;\n            for (int j = i; j < m; ++j) {\n                if (!node->children.count(tar[j])) break;\n                node = node->children[tar[j]];\n                if (node->cost != INT_MAX) {\n                    dp[j + 1] = min(dp[j + 1], dp[i] + node->cost);\n                }\n            }\n        }\n        \n        return dp[m] == INT_MAX ? -1 : dp[m];\n    }\n};\n",
    "submit_ts": "1720322434",
    "subm_id": "1312349813"
}