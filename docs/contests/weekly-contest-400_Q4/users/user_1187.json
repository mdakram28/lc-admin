{
    "username": "jfkjfk",
    "submission": "#include<bits/stdc++.h>\n\nusing namespace std;\n\n#define fastio()        ios_base::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL)\n#define MOD             1000000007\n#define MOD1            998244353\n#define INF             1e18\n#define endl            \"\\n\"\n#define pb              push_back\n#define mp              make_pair\n#define gcd(a, b)       __gcd(a,b)\n#define ff              first\n#define ss              second\n#define PI              3.141592653589793238462\n#define set_bits(x)     __builtin_popcountll(x)\n#define all(x)          (x).begin(), (x).end()\n#define fo(i,n)         for(long long i = 0; i < n; i++)\n#define foa(i,k,n)      for(long long i = k; i < n; i++)\n#define fob(i,k,n)      for(long long i = k; i >= n; i--)\n#define all(x)          (x).begin(), (x).end()\n#define rall(x)         (x).rbegin(), (x).rend()\n#define sortuniq(v)     {sort(v.begin(), v.end()); v.erase(unique(v.begin(), v.end()), v.end());}\n#define uniq(v)         {v.erase(unique(v.begin(), v.end()), v.end());}\n\ntypedef long long ll;\ntypedef long double lld;\n\n/*---------------------------------------------------------------------------------------------------------------------------*/\nll power(ll a, ll n){\n    ll res = 1;\n    while(n){\n        if(n & 1){\n            res = (res * a) % MOD;\n        }\n        a = (a * a) % MOD;\n        n >>= 1;\n    }\n    return res;\n}\n/*---------------------------------------------------------------------------------------------------------------------------*/\n\n// void solve(ll tc){\n// }\n\n// int main(){\n//     fastio();\n\n//     ll t=1;\n//     cin >> t;\n\n//     for(ll i=1; i<=t; i++){\n//         // cout << \"Case #\" << i << \": \";\n//         solve(i);\n//     }\n\n//     return 0;\n// }\n\nclass Solution {\npublic:\n\n    ll power(ll a, ll n){\n        ll res = 1;\n        while(n){\n            if(n & 1){\n                res = (res * a) % MOD;\n            }\n            a = (a * a) % MOD;\n            n >>= 1;\n        }\n        return res;\n    }\n\n    bool isPalindrome(string s){\n        int n = s.size();\n        for(int i=0; i<n/2; i++){\n            if(s[i] != s[n-i-1]){\n                return false;\n            }\n        }\n        return true;\n    }\n    \n    class SegTree{\n        public:\n        \n        vector<int> arr;\n        int n;\n        \n        SegTree(vector<int> &nums){\n            n = nums.size();\n            arr.resize(4*n);\n            buildTree(nums, 0, 0, n-1);\n        }\n        \n        void buildTree(vector<int> &nums, int idx, int lo, int hi){\n            if(lo==hi){\n                arr[idx] = nums[lo];\n                return;\n            }\n            int mid = (lo + hi)/2;\n            buildTree(nums, 2*idx + 1, lo, mid);\n            buildTree(nums, 2*idx + 2, mid+1, hi);\n            arr[idx] = arr[2*idx + 1] & arr[2*idx + 2];\n        }\n        \n        int query(int idx, int lo, int hi, int si, int ei){\n            if(ei < lo || hi < si){\n                return INT32_MAX;\n            }\n            if(si <= lo){\n                if(hi <= ei){\n                    return arr[idx];\n                }\n            }\n            int mid = (lo + hi)/2;\n            int query1 = query(2*idx+1, lo, mid, si, ei);\n            int query2 = query(2*idx+2, mid+1, hi, si, ei);\n            return query1 & query2;\n        }\n        \n        int queryRange(int lo, int hi){\n            return query(0,0,n-1,lo,hi);\n        }\n    };\n    \n    int getAns(vector<int> &nums, int k){\n        int n = nums.size();\n        SegTree stree(nums);\n        int ans = 1e9;\n        int i=0;\n        while(i < n){\n            int left = i-1;\n            int right = n-1, mid;\n            while(right - left > 1){\n                mid = (left + right)/2;\n                if(stree.queryRange(i,mid) < k){\n                    right = mid;\n                }else{\n                    left = mid;\n                }\n            }\n            if(left != i-1){\n                ans = min(ans, abs(stree.queryRange(i,left) - k));\n            }\n            ans = min(ans, abs(k - stree.queryRange(i,right)));\n            i++;\n        }\n        return ans;\n    }\n    \n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n    \n    int minimumDifference(vector<int> &nums, int k) {\n        int ans = getAns(nums, k);\n        return ans;\n    }\n};",
    "submit_ts": 1717300253.0
}