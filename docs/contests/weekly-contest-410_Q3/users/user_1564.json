{
    "username": "Arjun_Lal",
    "submission": "class Solution:\n    def countOfPairs(self, nums: List[int]) -> int:\n        MOD = 10 ** 9 + 7\n        '''\n        arr1 is increasing\n        arr2 is decreasing\n        \n        pairwise at index i they must sum to nums[i]\n        \n        if len(nums) == 1\n        \n        then arr[1] 0 can range from 0 to nums[0] --> nums[0] is the answer\n        \n        if len(nums) == 2: A, B\n        \n        let's say we fix arr1[0] to be x, then arr2[0] = A - x\n        let's say that arr1[1] = m and arr2[1] = B - m\n        \n        m >= x and B - m <= A - x --> m - x >= B - A and m - x >= 0\n        \n        so m >= x + max(0, B - A)\n        \n        so m can range from x + max(0, B - A) to B\n        \n        A, B, C\n        \n        x, m: (x + max(0, B - A) to B), n: m + max(0, C - B), C), ...\n        A - x, B - m, C - n, ...\n        \n        n >= m\n        C - n <= B - m --> n - m >= C - B --> n >= m + max(0, C - B)\n        \n        \n        '''\n        N = len(nums)\n        cache = dict()\n        \n        def dp(idx, arr1_element):\n            if idx == N - 1:\n                return 1\n            if (idx, arr1_element) in cache:\n                return cache[(idx, arr1_element)]\n            res = 0\n            for next_element in range(arr1_element + max(0, nums[idx + 1] - nums[idx]), nums[idx + 1] + 1):\n                res += dp(idx + 1, next_element)\n                res %= MOD\n            cache[(idx, arr1_element)] = res\n            return res\n        \n        res = 0\n        for e in range(0, nums[0] + 1):\n            res += dp(0, e)\n            res %= MOD\n        \n        return res\n            \n        \n        ",
    "submit_ts": "1723346247",
    "subm_id": "1351573403"
}