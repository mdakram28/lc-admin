{
    "username": "Wei Liu",
    "submission": "class Solution {\n \n   \n    private void build(int[][] board) {\n        int n = board.length , m = board[0].length;\n        for (int i = 0;i < n;i ++) {\n            for (int j = 0;j < m;j ++) {\n                long maxVal = board[i][j];\n                for (int k = j;k < m;k ++) {\n                    maxVal = Math.max(maxVal , board[i][k]);\n                    rowRangeMax[i][j][k] = maxVal;\n                }\n            }\n        }\n    }\n\n    private long getResult(int row , int j , int k , int m) {\n        long result = Long.MIN_VALUE;\n        if (j > 0) {\n            result = Math.max(result , rowRangeMax[row][0][j - 1]);\n        }\n        if (j + 1 < k) {\n            result = Math.max(result , rowRangeMax[row][j + 1][k - 1]);\n        }\n        if (k + 1 < m) {\n            result = Math.max(result , rowRangeMax[row][k + 1][m - 1]);\n        }\n        return result;\n    }\n\n    private static long[][][] rowRangeMax = new long[102][102][102];\n    private static long[][][] dp = new long[102][102][102];\n\n    public long maximumValueSum(int[][] board) {\n        build(board);\n        int n = board.length , m = board[0].length;\n        for (int i = 0;i < n;i ++) {\n            for (int j = 0;j <= m;j ++) {\n                for (int k = 0;k <= m;k ++) {\n                    dp[i][j][k] = Long.MIN_VALUE;\n                }\n            }\n        }\n        long ans = Long.MIN_VALUE;\n        for (int i = 0;i < n;i ++) {\n            if (i > 0) {\n                // update final answer\n                for (int j = 0;j < m;j ++) {\n                    for (int k = j + 1;k < m;k ++) {\n                        if (dp[i - 1][j][k] != Long.MIN_VALUE) {\n                            long result = getResult(i , j , k , m) + dp[i - 1][j][k];\n                            ans = Math.max(ans , result);\n                        }\n                    }\n                }\n            }\n            // use current\n            for (int j = 0;j < m;j ++) {\n                dp[i][j][m] = dp[i][m][j] = board[i][j];\n            }\n            // skip all\n            dp[i][m][m] = 0;\n            if (i > 0) {\n                // check previous\n                for (int j = 0;j <= m;j ++) {\n                    for (int k = 0;k <= m;k ++) {\n                        if (dp[i - 1][j][k] != Long.MIN_VALUE && dp[i - 1][j][k] > dp[i][j][k]) {\n                            dp[i][j][k] = dp[i - 1][j][k];\n                        }\n                    }\n                }\n                // use first\n                for (int k = 0;k < m;k ++) {\n                    if (dp[i - 1][m][k] != Long.MIN_VALUE) {\n                        for (int j = 0;j < m;j ++) {\n                            if (j != k) {\n                                long result = dp[i - 1][m][k] + board[i][j];\n                                dp[i][j][k] = Math.max(dp[i][j][k] , result);\n                            }\n                        }\n                    }\n                }\n                // use second\n                for (int j = 0;j < m;j ++) {\n                    if (dp[i - 1][j][m] != Long.MIN_VALUE) {\n                        for (int k = 0;k < m;k ++) {\n                            if (k != j) {\n                                long result = dp[i - 1][j][m] + board[i][k];\n                                dp[i][j][k] = Math.max(dp[i][j][k] , result);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        return ans;\n    }\n\n\n}",
    "submit_ts": "1723907519",
    "subm_id": "1359111521"
}