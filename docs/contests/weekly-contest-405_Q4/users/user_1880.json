{
    "username": "leetcodeyu1990",
    "submission": "class Solution:\n    from typing import List\n\nclass TrieNode:\n    def __init__(self):\n        self.children = {}\n        self.cost = float('inf')\n        self.end = False\n\nclass Trie:\n    def __init__(self):\n        self.root = TrieNode()\n\n    def insert(self, word, cost):\n        node = self.root\n        for char in word:\n            if char not in node.children:\n                node.children[char] = TrieNode()\n            node = node.children[char]\n        node.end = True\n        node.cost = min(node.cost, cost)\n\nclass Solution:\n    def minimumCost(self, target: str, words: List[str], costs: List[int]) -> int:\n        n = len(target)\n        trie = Trie()\n        \n        # Insert words with their costs into the trie\n        for word, cost in zip(words, costs):\n            trie.insert(word, cost)\n        \n        # Initialize dp array\n        dp = [float('inf')] * (n + 1)\n        dp[0] = 0\n        \n        # Update dp array using the trie\n        for i in range(n):\n            if dp[i] == float('inf'):\n                continue\n            node = trie.root\n            for j in range(i, n):\n                if target[j] not in node.children:\n                    break\n                node = node.children[target[j]]\n                if node.end:\n                    dp[j + 1] = min(dp[j + 1], dp[i] + node.cost)\n        \n        return dp[n] if dp[n] != float('inf') else -1\n    # def minimumCost(self, target: str, words: List[str], costs: List[int]) -> int:\n#         n = len(target)\n#         maps = {}\n#         for i, w in enumerate(words):\n#             if w not in maps:\n#                 maps[w] = i\n#             else: \n#                 if costs[i] < costs[maps[w]]:\n#                     maps[w] = i\n#         dp = [float('inf') for i in range(n + 1)]\n#         dp[0] = 0\n#         for i in range(1, n + 1):\n#             for j in range(i):\n#                 if target[j: i] in maps and dp[j] != float('inf'):\n#                     index = maps[target[j: i]]\n#                     dp[i] = min(dp[i], dp[j] + costs[index])\n        \n#         if dp[n] == float('inf'):\n#             return -1 \n#         return dp[n]\n            ",
    "submit_ts": "1720323952",
    "subm_id": "1312388028"
}