{
    "username": "U_U",
    "submission": "class BinaryIndexTree {\npublic:\n    BinaryIndexTree(vector<int>& vals) {                \n        cap = vals.size();\n        data.assign(cap + 1, 0);\n        for (int i = 0; i < vals.size(); ++i)        \n        {            \n            Update(i, vals[i]);\n        }\n    }\n    \n     \n    int GetSumRange(int lo, int hi) {   \n        if (lo > hi) return 0;\n        int ret = GetSum(hi);        \n        if (lo - 1 >= 0) ret -= GetSum(lo - 1);\n        return ret;\n    }\n    \n    void Update(int i, int val)\n    {\n        ++i;        \n        while (i <= cap)\n        {\n            data[i] += val;\n            i += (i & -i);\n        }\n    }\n    \n    int GetSum(int i)\n    {\n        ++i;\n        \n        int sum = 0;\n        while (i > 0)\n        {            \n            sum += data[i];\n            i -= (i & -i);\n        }\n        \n        return sum;\n    }\n    \n    int cap;\n    vector<int> data;    \n};\n\nclass Solution {\npublic:\n    int n;\n    vector<int> res;\n    vector<int> countOfPeaks(vector<int>& nums, vector<vector<int>>& queries) {\n        n = nums.size();\n        vector<int> peaks;        \n        peaks.push_back(0);\n        for (int i = 1; i < n - 1; ++i)\n        {\n            if (nums[i] > nums[i - 1] && nums[i] > nums[i + 1])\n            {\n                peaks.push_back(1);\n            }\n            else peaks.push_back(0);\n        }\n        peaks.push_back(0);        \n        \n        BinaryIndexTree bit(peaks);\n       // cout << bit.GetSumRange( 0, 4) << endl;\n        for (auto& q : queries)\n        {\n            if (q[0] == 1)\n            {\n                res.push_back( bit.GetSumRange( q[1] + 1, q[2] - 1) );\n            }\n            else\n            {                \n                int i = q[1];\n                int newVal = 0;\n                nums[i] = q[2];\n                if (i >= 1 && i < n - 1)\n                {\n                    if (nums[i] > nums[i - 1] && nums[i] > nums[i + 1])\n                    {\n                        newVal = 1;\n                    }                    \n                }                \n                int delta = newVal - peaks[i];\n             //   cout << delta << endl;\n                bit.Update(i, delta);\n                peaks[i] = newVal;     \n                \n                i = q[1] - 1;\n                if (i >= 0)\n                {\n                    newVal = 0;\n                    if (i >= 1 && i < n - 1)\n                    {\n                        if (nums[i] > nums[i - 1] && nums[i] > nums[i + 1])\n                        {\n                            newVal = 1;\n                        }                    \n                    }                \n                    int delta = newVal - peaks[i];\n                    bit.Update(i, delta);\n                    peaks[i] = newVal;     \n                }\n                \n                i = q[1] + 1;\n                if (i < n)\n                {\n                    newVal = 0;\n                    if (i >= 1 && i < n - 1)\n                    {\n                        if (nums[i] > nums[i - 1] && nums[i] > nums[i + 1])\n                        {\n                            newVal = 1;\n                        }                    \n                    }                \n                    int delta = newVal - peaks[i];\n                    bit.Update(i, delta);\n                    peaks[i] = newVal;     \n                }                                                                           \n            }\n        }\n        \n        return res;\n    }\n};",
    "submit_ts": 1718508011.0
}