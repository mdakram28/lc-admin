{
    "username": "Mozhi_Shen",
    "submission": "class UnionFind:\n    def __init__(self, n):\n        self.parent = list(range(n))\n        self.rank = [1] * n\n\n    def find(self, x):\n        if self.parent[x] != x:\n            self.parent[x] = self.find(self.parent[x])  # Path compression\n        return self.parent[x]\n\n    def union(self, x, y):\n        rootX = self.find(x)\n        rootY = self.find(y)\n\n        if rootX != rootY:\n            if self.rank[rootX] > self.rank[rootY]:\n                self.parent[rootY] = rootX\n            elif self.rank[rootX] < self.rank[rootY]:\n                self.parent[rootX] = rootY\n            else:\n                self.parent[rootY] = rootX\n                self.rank[rootX] += 1\n\n    def groups(self):\n        group_map = {}\n        for i in range(len(self.parent)):\n            root = self.find(i)\n            if root not in group_map:\n                group_map[root] = []\n            group_map[root].append(i)\n        return list(group_map.values())\n\nclass Solution:\n    def canReachCorner(self, X: int, Y: int, circles: List[List[int]]) -> bool:\n        uf = UnionFind(len(circles))\n        def dist(a,b):\n            return ((a[0] - b[0]) ** 2 + (a[1] - b[1]) ** 2) ** 0.5\n        def connected(a,b):\n            d = dist(a[0:2],b[0:2])\n            # print(a,b,d,a[2] + b[2] - 0.000001)\n            return True if d <= a[2] + b[2] + 0.000001 else False\n        for idx, x in enumerate(circles):\n            for idy in range(idx, len(circles)):\n                y = circles[idy]\n                # print(idx, idy)\n                # if (idx == 0):\n                #     print(idy, connected(x,y))\n                if connected(x,y):\n                    # print(\"connected\",idx, idy)\n                    uf.union(idx, idy)\n        groups = uf.groups()\n        # print(groups)\n        for group in groups:\n            b_x,b_y = False, False\n            b_x_2,b_y_2 = False, False\n            for i in group:\n                x,y,r = circles[i]\n                if r >= x:\n                    b_x = True\n                if r >= y:\n                    b_y = True\n                if x+r >= X:\n                    b_x_2 = True\n                if  y+r >= Y:\n                    b_y_2 = True\n            if b_x == True and b_y == True:\n                return False \n            if b_x_2 == True and b_y_2 == True:\n                return False\n            if b_x == True and b_x_2 == True:\n                return False\n            if b_y == True and b_y_2 == True:\n                return False\n        return True",
    "submit_ts": "1722138601",
    "subm_id": "1335794950"
}