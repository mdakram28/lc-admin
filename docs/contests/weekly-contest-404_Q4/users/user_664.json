{
    "username": "goyal_tushar",
    "submission": "class Solution {\npublic:\n\n    pair<int,int> farthest_node(vector<vector<int>>&g, int start){\n        \n        vector<int>visited(g.size()+2);\n        queue<pair<int,int>>qp;\n\n        qp.push({start, 0});\n        visited[start] = 1;\n\n        int max_dist = 0;\n        int max_dis_node = start;\n\n        while(!qp.empty()){\n            \n            pair<int,int> curr = qp.front();\n            int nod = curr.first;\n            int dis = curr.second;\n            qp.pop();\n\n            if(dis > max_dist){\n                max_dist = dis;\n                max_dis_node = nod;\n            }\n\n            for(auto i: g[nod]){\n                if(visited[i] == 1)continue;\n                visited[i] = 1;\n                qp.push({i, dis+1});\n            }\n        }\n\n        return {max_dis_node, max_dist};\n    }\n\n    int diameter(vector<vector<int>>&g){\n        pair<int,int> node = farthest_node(g, 0);\n\n        return farthest_node(g, node.first).second;\n    }\n\n    int fun(vector<vector<int>>& edges){\n        int n = edges.size() + 1;\n\n        vector<vector<int>>g(n+1);\n\n        for(auto i: edges){\n            g[i[0]].push_back(i[1]);\n            g[i[1]].push_back(i[0]);\n        }\n\n        return diameter(g);\n    }\n\n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n        int dia1 = fun(edges1);\n        int dia2 = fun(edges2);\n        int comb_dia = (dia1 + 1)/2 + (dia2 + 1)/2 + 1;\n        return max(dia1, max(dia2, comb_dia));\n    }\n};",
    "submit_ts": "1719718880",
    "subm_id": "1304428370"
}