{
    "username": "mohdquamartyagi",
    "submission": "\nclass TrieNode {\npublic:\n    vector<TrieNode*> children;\n    int cost;\n    bool isEndOfWord;\n\n    TrieNode() : children(26, nullptr), cost(INT_MAX), isEndOfWord(false) {}\n};\n\nclass Trie {\npublic:\n    TrieNode* root;\n\n    Trie() {\n        root = new TrieNode();\n    }\n\n    void insert(const string& word, int cost) {\n        TrieNode* node = root;\n        for (char c : word) {\n            if (!node->children[c - 'a']) {\n                node->children[c - 'a'] = new TrieNode();\n            }\n            node = node->children[c - 'a'];\n        }\n        node->cost = min(cost, node->cost);\n        node->isEndOfWord = true;\n    }\n\n    TrieNode* getRoot() {\n        return root;\n    }\n};\n\nclass Solution {\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        Trie trie;\n        int len = target.size();\n        vector<int> minCost(len + 1, INT_MAX);\n\n        int i = 0;\n        while (i < words.size()) {\n            trie.insert(words[i], costs[i]);\n            ++i;\n        }\n\n        minCost[0] = 0;\n\n        int j = 0;\n        while (j < len) {\n            if (minCost[j] == INT_MAX) {\n                ++j;\n                continue;\n            }\n\n            TrieNode* node = trie.getRoot();\n            int k = j;\n            while (k < len) {\n                char c = target[k];\n                if (!node->children[c - 'a']) break;\n                node = node->children[c - 'a'];\n                if (node->isEndOfWord) {\n                    minCost[k + 1] = min(minCost[k + 1], minCost[j] + node->cost);\n                }\n                ++k;\n            }\n            ++j;\n        }\n\n        return minCost[len] == INT_MAX ? -1 : minCost[len];\n    }\n};\n\n\n",
    "submit_ts": "1720322238",
    "subm_id": "1312344467"
}