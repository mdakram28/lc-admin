{
    "username": "cm_fast",
    "submission": "bool isPeak(int i, int n, vector<int> &nums)\n{\n    if (i <= 0 || i >= n - 1)\n        return false;\n    return nums[i] > nums[i - 1] && nums[i] > nums[i + 1];\n}\nvoid build(int idx, int low, int high, vector<int> &arr, vector<int> &seg)\n{\n    // (0,0,n-1);\n    int n = arr.size();\n    if (low == high)\n    {\n        seg[idx] = isPeak(low, n, arr);\n        return;\n    }\n    int mid = (high + low) / 2;\n    build(2 * idx + 1, low, mid, arr, seg);\n    build(2 * idx + 2, mid + 1, high, arr, seg);\n    seg[idx] = (seg[2 * idx + 1] + seg[2 * idx + 2]);\n}\nint queryRange(int idx, int low, int high, int l, int r, vector<int> &arr, vector<int> &seg)\n{\n    // (0,0,n-1,l,r);\n    if (l > r)\n    {\n        return 0;\n    }\n    if (l <= low and high <= r)\n    {\n        return seg[idx];\n    }\n    if (r < low or high < l)\n    {\n        return 0;\n    }\n    int mid = (high + low) / 2;\n    int left = queryRange(2 * idx + 1, low, mid, l, r, arr, seg);\n    int right = queryRange(2 * idx + 2, mid + 1, high, l, r, arr, seg);\n    return left + right;\n}\nvoid point_update(int idx, int low, int high, int node, int val, vector<int> &arr, vector<int> &seg)\n{\n    // (0,0,n-1,node,val);\n    int n = arr.size();\n    if (low == high)\n    {\n        seg[idx] -= (int)(isPeak(node, n, arr));\n        arr[node] = val;\n        seg[idx] = (int)(isPeak(node, n, arr));\n        return;\n    }\n    else\n    {\n        int mid = low + (high - low) / 2;\n        if (node <= mid && node >= low)\n        {\n            point_update(2 * idx + 1, low, mid, node, val, arr, seg);\n        }\n        else\n        {\n            point_update(2 * idx + 2, mid + 1, high, node, val, arr, seg);\n        }\n        seg[idx] = (seg[2 * idx + 1] + seg[2 * idx + 2]);\n    }\n}\nclass Solution\n{\npublic:\n    vector<int> countOfPeaks(vector<int> &nums, vector<vector<int>> &queries)\n    {\n        vector<int> answer;\n        int n = nums.size();\n        vector<int> seg(4 * n + 10, 0);\n        build(0, 0, n - 1, nums, seg);\n        for (const auto &query : queries)\n        {\n            if (query[0] == 1)\n            {\n                int li = query[1];\n                int ri = query[2];\n                int val = queryRange(0, 0, n - 1, li + 1, ri - 1, nums, seg);\n                answer.push_back(val);\n            }\n            else if (query[0] == 2)\n            {\n                int index = query[1];\n                int val = query[2];\n                point_update(0, 0, n - 1, index, val, nums, seg);\n                if(index-1>=0)\n                {\n                     point_update(0, 0, n - 1, index-1, nums[index-1], nums, seg);\n                }\n                 if(index+1<n)\n                {\n                     point_update(0, 0, n - 1, index+1, nums[index+1], nums, seg);\n                }\n            }\n        }\n\n        return answer;\n    }\n};\n",
    "submit_ts": "1718508322",
    "subm_id": "1289678002"
}