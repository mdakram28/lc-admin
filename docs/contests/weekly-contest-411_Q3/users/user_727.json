{
    "username": "Unknown_user",
    "submission": "class Solution {\npublic:\n    \nchar table[100001][7];\nchar nonZeroTable[100001][7];\nint nextMod[100001][7];\nint nonZeroNextMod[100001][7];\n    \n\n    string largestPalindrome(int n, int k) {\n        if (k == 1 || k == 3 || k == 9) {\n            return string(n, '9');\n        }\n        \n        if (k == 2) {\n            if (n == 1) {\n                return \"8\";\n            }\n            string output(n, '9');\n            output[0] = '8';\n            output[n - 1] = '8';\n            return output;\n        }\n        \n        if (k == 5) {\n            if (n == 1) {\n                return \"5\";\n            }\n            string output(n, '9');\n            output[0] = '5';\n            output[n - 1] = '5';\n            return output;\n        }\n        \n        if (k == 4) {\n            if (n <= 3) {\n                return string(n, '8');\n            }\n            string output(n, '9');\n            output[0] = '8';\n            output[n - 1] = '8';\n            output[1] = '8';\n            output[n - 2] = '8';\n            return output;\n        }\n        \n        if (k == 8) {\n            if (n <= 5) {\n                return string(n, '8');\n            }\n            string output(n, '9');\n            output[0] = '8';\n            output[n - 1] = '8';\n            output[1] = '8';\n            output[n - 2] = '8';\n            output[2] = '8';\n            output[n - 3] = '8';\n            return output;\n        }\n        \n        if (k == 6) {\n            if (n == 1) {\n                return \"6\";\n            }\n            if (n == 2) {\n                return \"66\";\n            }\n            if (n == 3) {\n                return \"888\";\n            }\n            string output(n, '9');\n            output[0] = '8';\n            output[n - 1] = '8';\n            if (n % 2 == 1) {\n                output[n / 2] = '8';\n            } else {\n                output[n / 2] = '7';\n                output[(n / 2) - 1] = '7';\n            }\n            return output;\n        }\n        \n        if (k == 7) {\n            if (n == 1) {\n                return \"7\";\n            }\n            fill(&table[0][0], &table[0][0] + sizeof(table), 0);\n            fill(&nonZeroTable[0][0], &nonZeroTable[0][0] + sizeof(nonZeroTable), 0);\n\n            for (int i = 1; i < 10; ++i) {\n                table[1][i % 7] = '0' + i;\n                if (i != 0) {\n                    nonZeroTable[1][i % 7] = '0' + i;\n                }\n            }\n\n            int modBase = 10 % 7;\n            for (int i = 0; i <= 100000 - 2; ++i) {\n                for (int j = 0; j < 7; ++j) {\n                    if ((i == 0 && j != 0) || (i > 0 && table[i][j] == 0)) {\n                        continue;\n                    }\n                    for (int digit = 9; digit >= 0; --digit) {\n                        int newMod = (modBase * digit + digit + j * 10) % 7;\n                        if (table[i + 2][newMod] == 0 || table[i + 2][newMod] < '0' + digit) {\n                            table[i + 2][newMod] = '0' + digit;\n                            nextMod[i + 2][newMod] = j;\n                        }\n                        if (digit == 0) continue;\n                        if (nonZeroTable[i + 2][newMod] == 0 || nonZeroTable[i + 2][newMod] < '0' + digit) {\n                            nonZeroTable[i + 2][newMod] = '0' + digit;\n                            nonZeroNextMod[i + 2][newMod] = j;\n                        }\n                    }\n                }\n                modBase = (modBase * 10) % 7;\n            }\n            \n            int length = n;\n            string frontPart(1, nonZeroTable[length][0]);\n            string backPart(1, nonZeroTable[length][0]);\n            int mod = nonZeroNextMod[length][0];\n            length -= 2;\n            while (length) {\n                frontPart += table[length][mod];\n                if (length > 1) backPart += table[length][mod];\n                else break;\n                mod = nextMod[length][mod];\n                length -= 2;\n            }\n            reverse(backPart.begin(), backPart.end());\n            string result = frontPart + backPart;\n            return result;\n        }\n        \n        return \"\";\n    }\n};\n",
    "submit_ts": "1723952439",
    "subm_id": "1359796314"
}