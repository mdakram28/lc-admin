{
    "username": "SpeedyRogue54",
    "submission": "from math import sqrt\nfrom typing import List\n\nclass UnionFind:\n    def __init__(self, size):\n        self.parent = list(range(size))\n        self.rank = [1] * size\n        self.touches_left = [False] * size\n        self.touches_right = [False] * size\n        self.touches_top = [False] * size\n        self.touches_bottom = [False] * size\n    \n    def find(self, p):\n        if self.parent[p] != p:\n            self.parent[p] = self.find(self.parent[p])\n        return self.parent[p]\n    \n    def merge(self, rootP, rootQ):\n        self.touches_left[rootP] |= self.touches_left[rootQ]\n        self.touches_right[rootP] |= self.touches_right[rootQ]\n        self.touches_top[rootP] |= self.touches_top[rootQ]\n        self.touches_bottom[rootP] |= self.touches_bottom[rootQ]\n\n        self.touches_left[rootQ] = self.touches_left[rootP]\n        self.touches_right[rootQ] = self.touches_right[rootP]\n        self.touches_top[rootQ] = self.touches_top[rootP]\n        self.touches_bottom[rootQ] = self.touches_bottom[rootP]\n\n    def union(self, p, q):\n        rootP = self.find(p)\n        rootQ = self.find(q)\n        if rootP != rootQ:\n            if self.rank[rootP] > self.rank[rootQ]:\n                self.parent[rootQ] = rootP\n                self.merge(rootP, rootQ)\n            elif self.rank[rootP] < self.rank[rootQ]:\n                self.parent[rootP] = rootQ\n                self.merge(rootQ, rootP)\n            else:\n                self.parent[rootQ] = rootP\n                self.rank[rootP] += 1\n                self.merge(rootP, rootQ)\n\nclass Solution:\n    def canReachCorner(self, X: int, Y: int, circles: List[List[int]]) -> bool:\n        n = len(circles)\n        uf = UnionFind(n)\n        \n        for i in range(n):\n            xi, yi, ri = circles[i]\n            uf.touches_left[i] = xi - ri <= 0\n            uf.touches_right[i] = xi + ri >= X\n            uf.touches_bottom[i] = yi - ri <= 0\n            uf.touches_top[i] = yi + ri >= Y\n        \n        for i in range(n):\n            for j in range(i + 1, n):\n                xj, yj, rj = circles[j]\n                if sqrt((xj - circles[i][0]) ** 2 + (yj - circles[i][1]) ** 2) <= rj + circles[i][2]:\n                    uf.union(i, j)\n        \n        for i in range(n):\n            root_i = uf.find(i)\n            if (uf.touches_left[root_i] and uf.touches_right[root_i]) or (uf.touches_top[root_i] and uf.touches_bottom[root_i]) or (uf.touches_top[root_i] and uf.touches_right[root_i]) or (uf.touches_left[root_i] and uf.touches_bottom[root_i]):\n                return False\n\n        return True\n",
    "submit_ts": "1722139048",
    "subm_id": "1335806424"
}