{
    "username": "CtrlC_CtrlV",
    "submission": "class Solution {\npublic:\n    \n     \nvoid buildTree(int ind, int sl, int sr, vector<int> &nums, vector<int> &seg){\n\tif(sl == sr){\n\t\tseg[ind] = nums[sl];\n\t\treturn;\n\t}\n\t\n\tint mid = (sl + sr) / 2;\n\tbuildTree(2*ind + 1, sl, mid, nums, seg);\n\tbuildTree(2*ind + 2, mid+1, sr, nums, seg);\n\tseg[ind] = seg[2*ind + 1] + seg[2*ind + 2];\n}\n \nvoid updateTree(int ind, int sl, int sr, int index, int val, vector<int> &seg) {\n\tif(sl == sr){\n\t\tseg[ind] = val;\n\t\treturn;\n\t}\n\t\t\n\tint mid = (sl + sr) / 2;\n\tif(index <= mid)\n\t\tupdateTree(2*ind + 1, sl, mid, index, val, seg);\n\telse\n\t\tupdateTree(2*ind + 2, mid+1, sr, index, val, seg);\n\t\n\tseg[ind] = seg[2*ind + 1] + seg[2*ind + 2];\n\t\t\n}\n \nint rangeQuesry(int ind, int sl, int sr, int left, int right, vector<int> &seg) {\n\tif(left > sr || right < sl)\n\t\treturn 0;\n\t\t\n\tif(left <= sl && right >= sr)\n\t\treturn seg[ind];\n\t\t\n\tlong long mid = (sl + sr) / 2;\n\tlong long leftAns = rangeQuesry(2*ind + 1, sl, mid, left, right, seg);\n\tlong long righAns = rangeQuesry(2*ind + 2, mid+1, sr, left, right, seg);\n\treturn leftAns  + righAns;\n}\n\n    \n    vector<int> countOfPeaks(vector<int>& nums, vector<vector<int>>& queries) {\n        int n = nums.size();\n        vector<int> peaks(n, 0);\n        int cnt = 0;\n        for(int i=1; i<n-1; i++) {\n            if(nums[i-1] < nums[i] && nums[i] > nums[i+1]){\n                peaks[i] = 1;\n            }\n        }\n        vector<int> seg(4*n);\n        buildTree(0, 0, n-1, peaks, seg);\n        vector<int> ans;\n        for(auto it : queries) {\n            int query = it[0];\n            if(query == 1) {\n                int left = it[1];\n                int right = it[2];\n                if(left == right || (right - left) <= 1) {\n                    ans.push_back(0);\n                    continue;\n                }\n                left++;\n                right--;\n                int res = rangeQuesry(0, 0, n-1, left, right, seg);\n                ans.push_back(res);\n            }\n            else{\n                int index = it[1];\n                int val = it[2];\n                nums[index] = val;\n                if(index > 0 && index < n-1) {\n                    if(nums[index-1] < nums[index] && nums[index] > nums[index+1])\n                        updateTree(0, 0, n-1, index, 1, seg);\n                    else\n                        updateTree(0, 0, n-1, index, 0, seg);\n                }\n                if(index > 1) {\n                    if(nums[index-2] < nums[index-1] && nums[index-1] > nums[index])\n                        updateTree(0, 0, n-1, index-1, 1, seg);\n                    else\n                        updateTree(0, 0, n-1, index-1, 0, seg);\n                }\n                if(index < n-2) {\n                    if(nums[index] < nums[index+1] && nums[index+1] > nums[index+2])\n                        updateTree(0, 0, n-1, index+1, 1, seg);\n                    else\n                        updateTree(0, 0, n-1, index+1, 0, seg);\n                }\n            }\n        }\n        return ans;\n    }\n};",
    "submit_ts": 1718508295.0
}