{
    "username": "user1084vL",
    "submission": "class Solution(object):\n    def getFlips(self, grid, vals, topleft, topright, botleft, botright, tested):\n        #print(topleft,topright,botleft,botright)\n        ctup = (tuple(topleft),tuple(topright),tuple(botleft),tuple(botright))\n        if ctup in tested: return\n        #print(\"New\")\n        tested.add(ctup)\n        if topleft[0]>botleft[0] or topleft[1]>topright[1]: return\n        #print(\"Valid\")\n        if topleft==topright==botleft==botright:\n            if grid[topleft[0]][topleft[1]]==1: vals['flips']+=1\n        elif topleft==topright:\n            if grid[topleft[0]][topleft[1]]==0 and grid[botleft[0]][botleft[1]]==0: vals['doub0']+=1\n            if grid[topleft[0]][topleft[1]]==1 and grid[botleft[0]][botleft[1]]==1: vals['doub1']+=1\n            if grid[topleft[0]][topleft[1]]==0 and grid[botleft[0]][botleft[1]]==1: vals['sing1sing0']+=1\n            if grid[topleft[0]][topleft[1]]==1 and grid[botleft[0]][botleft[1]]==0: vals['sing1sing0']+=1\n            self.getFlips(grid,vals,[topleft[0]+1,topleft[1]],[topright[0]+1,topright[1]],[botleft[0]-1,botleft[1]],[botright[0]-1,botright[1]],tested)\n        elif topleft==botleft:\n            if grid[topleft[0]][topleft[1]]==0 and grid[topright[0]][topright[1]]==0: vals['doub0']+=1\n            if grid[topleft[0]][topleft[1]]==1 and grid[topright[0]][topright[1]]==1: vals['doub1']+=1\n            if grid[topleft[0]][topleft[1]]==0 and grid[topright[0]][topright[1]]==1: vals['sing1sing0']+=1\n            if grid[topleft[0]][topleft[1]]==1 and grid[topright[0]][topright[1]]==0: vals['sing1sing0']+=1\n            self.getFlips(grid,vals,[topleft[0],topleft[1]+1],[topright[0],topright[1]-1],[botleft[0],botleft[1]+1],[botright[0],botright[1]-1],tested)\n        else:\n            zcount = 0\n            for c in (topleft,topright,botleft,botright):\n                if grid[c[0]][c[1]]==0: zcount+=1\n            if zcount<=2: vals['flips']+=zcount\n            else: vals['flips']+=4-zcount\n            self.getFlips(grid,vals,[topleft[0]+1,topleft[1]],[topright[0]+1,topright[1]],[botleft[0]-1,botleft[1]],[botright[0]-1,botright[1]],tested)\n            self.getFlips(grid,vals,[topleft[0],topleft[1]+1],[topright[0],topright[1]-1],[botleft[0],botleft[1]+1],[botright[0],botright[1]-1],tested)\n            self.getFlips(grid,vals,[topleft[0]+1,topleft[1]+1],[topright[0]+1,topright[1]-1],[botleft[0]-1,botleft[1]+1],[botright[0]-1,botright[1]-1],tested)\n    def minFlips(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        m = len(grid)\n        n = len(grid[0])\n        print(m,n)\n        vals = {'doub1':0,'doub0':0,'sing1sing0':0,'flips':0}\n        tested = set()\n        self.getFlips(grid,vals,[0,0],[0,n-1],[m-1,0],[m-1,n-1],tested)\n        #print(vals)\n        ones = vals['doub1']*2\n        vals['flips']+=vals['sing1sing0']\n        if ones%4==2:\n            if vals['sing1sing0']==0: vals['flips']+=2\n        return vals['flips']\n",
    "submit_ts": "1722698458",
    "subm_id": "1343181209"
}