{
    "username": "rajanand18",
    "submission": "class Solution {\npublic:\n    \n    pair<int, int> findIndicesWithMaxManhattanDistance(const vector<vector<int>>& A) {\n    int minsum, maxsum, mindiff, maxdiff;\n    int i1, i2, i3, i4;\n        i1=i2=i3=i4=0;\n    minsum = maxsum = A[0][0] + A[0][1];\n    mindiff = maxdiff = A[0][0] - A[0][1];\n\n    for (int i = 1; i < A.size(); i++) {\n        int sum = A[i][0] + A[i][1];\n        int diff = A[i][0] - A[i][1];\n\n        if (sum < minsum) {\n            minsum = sum;\n            i1 = i;\n        } else if (sum > maxsum) {\n            maxsum = sum;\n            i2 = i;\n        }\n\n        if (diff < mindiff) {\n            mindiff = diff;\n            i3=i;\n        } else if (diff > maxdiff) {\n            maxdiff = diff;\n            i4=i;\n        }\n    }\n\n    int max_manhattan_distance = max(maxsum - minsum, maxdiff - mindiff);\n    if (max_manhattan_distance == maxsum - minsum) {\n        return make_pair(i1, i2);\n    } else if(max_manhattan_distance==maxdiff - mindiff) {\n        return make_pair(i3, i4);\n    }\n    return make_pair(-1,-1);\n}\n    \n    \n    pair<int, int> findIndicesWithMaxManhattanDistance2(const vector<vector<int>>& A,int ind) {\n    int minsum, maxsum, mindiff, maxdiff;\n    int i1, i2, i3, i4;\n        \n        int st=0;\n        // cout<<ind<<\"hello\"<<endl;\n        if(ind==0){\n            minsum = maxsum = A[1][0] + A[1][1];\n    mindiff = maxdiff = A[1][0] - A[1][1];\n            st=1;\n        }\n        else{\n            minsum = maxsum = A[0][0] + A[0][1];\n    mindiff = maxdiff = A[0][0] - A[0][1];\n        }\n        i1=i2=i3=i4=st;\n    \n\n    for (int i = st+1; i < A.size(); i++) {\n        if(i==ind){\n            continue;\n        }\n        int sum = A[i][0] + A[i][1];\n        int diff = A[i][0] - A[i][1];\n\n        if (sum < minsum) {\n            minsum = sum;\n            i1 = i;\n        } else if (sum > maxsum) {\n            maxsum = sum;\n            i2 = i;\n        }\n\n        if (diff < mindiff) {\n            mindiff = diff;\n            i3=i;\n        } else if (diff > maxdiff) {\n            maxdiff = diff;\n            i4=i;\n        }\n    }\n\n    int max_manhattan_distance = max(maxsum - minsum, maxdiff - mindiff);\n    if (max_manhattan_distance == maxsum - minsum) {\n        return make_pair(i1, i2);\n    } else if(max_manhattan_distance==maxdiff - mindiff) {\n        return make_pair(i3, i4);\n    }\n    return make_pair(-1,-1);\n}\n    \n    \n    \n    int minimumDistance(vector<vector<int>>& A) {\n        pair<int,int> p=findIndicesWithMaxManhattanDistance(A);\n        // cout<<p.first<<' '<<p.second<<endl;\n        \n        int max1=abs(A[p.first][0]-A[p.second][0])+abs(A[p.first][1]-A[p.second][1]);\n        \n        pair<int,int> p2=findIndicesWithMaxManhattanDistance2(A,p.first);\n        // cout<<p2.first<<' '<<p2.second<<endl;\n        \n        int max2=abs(A[p2.first][0]-A[p2.second][0])+abs(A[p2.first][1]-A[p2.second][1]);\n        \n        pair<int,int> p3=findIndicesWithMaxManhattanDistance2(A,p.second);\n        // cout<<p3.first<<' '<<p3.second<<endl;\n        \n        int max3=abs(A[p3.first][0]-A[p3.second][0])+abs(A[p3.first][1]-A[p3.second][1]);\n        \n        return min(max1,min(max3,max2));\n    }\n};"
}