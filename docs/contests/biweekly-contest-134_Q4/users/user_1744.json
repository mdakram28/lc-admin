{
    "username": "assifff",
    "submission": "class Solution {\npublic:\n    long long countSubarrays(vector<int>& nums, int k) {\n         int n = nums.size();\n        long long l = 0;  // Use long long to prevent overflow\n        unordered_map<long long, long long> b;  // Change the value type to long long\n        \n        for (int i = 0; i < n; ++i) {\n            unordered_map<long long , long long> tb;  // Change the value type to long long\n            if (nums[i] == k) {\n                ++l;\n            }\n            tb[nums[i]] = 1;\n            \n            for (const auto& [c, g] : b) {\n                int ch = c & nums[i];\n                if (ch == k) {\n                    l += g;\n                }\n                if (tb.find(ch) != tb.end()) {\n                    tb[ch] += g;\n                } else {\n                    tb[ch] = g;\n                }\n            }\n            \n            b = tb;\n        }\n        \n        return l;\n    }\n};",
    "submit_ts": "1720278851",
    "subm_id": "1311726981"
}