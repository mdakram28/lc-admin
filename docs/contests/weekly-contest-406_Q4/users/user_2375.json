{
    "username": "ARC-01",
    "submission": "class Solution:\n    def minimumCost(self, m: int, n: int, horizontalCut: List[int], verticalCut: List[int]) -> int:\n        h_count, v_count = 0, 0 # number of h and c cuts performed, also used as indecies h and v\n        horizontalCut.sort(reverse=True)\n        verticalCut.sort(reverse=True)\n        ans = 0\n        # same as merging in merge sort\n        while h_count < len(horizontalCut) and v_count < len(verticalCut):\n            # biggest values first\n            if horizontalCut[h_count] < verticalCut[v_count]: # make a vertical cut\n                ans += (h_count+1)*verticalCut[v_count]\n                v_count += 1\n            elif horizontalCut[h_count] > verticalCut[v_count]: # make a horizontal cut\n                ans += (v_count+1)*horizontalCut[h_count]\n                h_count += 1\n            else:\n                # calculate both options and look 2 steps ahead\n                temp1 = (h_count+1)*verticalCut[v_count] + (v_count+2)*horizontalCut[h_count] # v then h\n                temp2 = (v_count+1)*horizontalCut[h_count] + (h_count+2)*verticalCut[v_count] # h then v\n                if temp1 < temp2: # choose 1\n                    ans += temp1\n                else:\n                    ans += temp2\n                h_count += 1\n                v_count += 1\n        if h_count == len(horizontalCut): # cut vertical for all remains\n            while v_count < len(verticalCut):\n                ans += (h_count+1)*verticalCut[v_count]\n                v_count += 1    \n        else:\n            while h_count < len(horizontalCut):\n                ans += (v_count+1)*horizontalCut[h_count]\n                h_count += 1\n        return ans",
    "submit_ts": "1720926781",
    "subm_id": "1320296204"
}