{
    "username": "pephdod",
    "submission": "class Solution {\npublic:\n    struct TrieNode {\n        vector<TrieNode*> children;\n        vector<int> wordCosts;\n        \n        TrieNode() : children(26, nullptr) {}\n    };\n\n    class Trie {\n    public:\n        TrieNode* root;\n        \n        Trie() { root = new TrieNode(); }\n\n        void insert(const string& word, int cost) {\n            TrieNode* node = root;\n            for (char c : word) {\n                int index = c - 'a';\n                if (!node->children[index])\n                    node->children[index] = new TrieNode();\n                node = node->children[index];\n            }\n            node->wordCosts.push_back(cost);\n        }\n    };\n\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int n = target.size();\n        vector<int> dp(n + 1, INT_MAX);\n        dp[0] = 0;\n\n        Trie trie;\n        for (int i = 0; i < words.size(); ++i) {\n            trie.insert(words[i], costs[i]);\n        }\n\n        for (int i = 0; i < n; ++i) {\n            if (dp[i] == INT_MAX) continue;\n\n            TrieNode* node = trie.root;\n            for (int j = i; j < n; ++j) {\n                int index = target[j] - 'a';\n                if (!node->children[index]) break;\n                node = node->children[index];\n                for (int cost : node->wordCosts) {\n                    dp[j + 1] = min(dp[j + 1], dp[i] + cost);\n                }\n            }\n        }\n\n        return dp[n] == INT_MAX ? -1 : dp[n];\n    }\n};",
    "submit_ts": "1720321761",
    "subm_id": "1312331592"
}