{
    "username": "Bharat_133",
    "submission": "class Solution {\npublic:\n    const int MOD = 1000000005+2;\nconst int limit = 400;\n    \n    void loop(int n,vector<vector<long>> &dp, unordered_map<int, int> &inversionRequirements)\n    {\n        for (int len = 1; len <= n; ++len) {\n            for (int inv = 0; inv <= limit; ++inv) {\n                for (int pos = 0; pos < len; ++pos) {\n                    int prevInv = inv - pos;\n                    if (prevInv >= 0) {\n                        dp[len][inv] = (dp[len][inv] + dp[len - 1][prevInv]) % MOD;\n                    }\n                }\n            }\n            int flag=1;\n            \n\n            if (inversionRequirements.find(len) != inversionRequirements.end() && flag) {\n                int requiredInv = inversionRequirements[len];\n                for (int inv = 0; inv <= limit; ++inv) {\n                    if (inv != requiredInv) {\n                        dp[len][inv] = 0;\n                    }\n                }\n            }\n        }\n    }\n    \n    int numberOfPermutations(int n, vector<vector<int>>& requirements) {\n            unordered_map<int, int> inversionRequirements;\n        for (const auto& req : requirements) {\n            inversionRequirements[req[0] + 1] = req[1];\n        }\n\n        vector<vector<long>> dp(n + 1, vector<long>(limit + 1, 0));\n        dp[0][0] = 1;\n\n        loop(n,dp,inversionRequirements);\n\n        long result = 0;\n        for (long count : dp[n]) {\n            result = (result + count) % MOD;\n        }\n\n        return static_cast<int>(result);\n  \n    }\n};",
    "submit_ts": 1719071672.0
}