{
    "username": "john801205",
    "submission": "struct TrieNode {\n    int idx;\n    TrieNode* children[26];\n\n    TrieNode(int idx)\n    {\n        this->idx = idx;\n        for (int i = 0; i < 26; i++)\n            children[i] = nullptr;\n    }\n\n    ~TrieNode()\n    {\n        for (int i = 0; i < 26; i++)\n            if (children[i] != nullptr)\n                delete children[i];\n    }\n};\n\nclass Solution {\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        TrieNode root(-1);\n\n        // build trie\n        for (int i = 0; i < words.size(); i++)\n        {\n            TrieNode* cur = &root;\n            \n            for (const auto& ch: words[i])\n            {\n                if (cur->children[ch-'a'] == nullptr)\n                    cur->children[ch-'a'] = new TrieNode(-1);\n\n                cur = cur->children[ch-'a'];\n            }\n\n            if (cur->idx == -1 || costs[cur->idx] > costs[i])\n                cur->idx = i;\n        }\n\n        vector<int> dp(target.length()+1, INT_MAX);\n        priority_queue<pair<int, int>> pq; // -cost, idx\n        pq.push({0, 0});\n        dp[0] = 0;\n\n        while (!pq.empty())\n        {\n            int cost = -pq.top().first;\n            int idx = pq.top().second;\n            pq.pop();\n\n            if (idx == target.length())\n                return cost;\n\n            TrieNode* cur = &root;\n            for (int i = idx; i < target.length(); i++)\n            {\n                if (cur->children[target[i]-'a'] == nullptr)\n                    break;\n\n                cur = cur->children[target[i]-'a'];\n                if (cur->idx == -1)\n                    continue;\n\n                if (cost + costs[cur->idx] < dp[i+1])\n                {\n                    dp[i+1] = cost + costs[cur->idx];\n                    pq.push({-dp[i+1], i+1});\n                }\n            }\n        }\n\n        return -1;\n    }\n};",
    "submit_ts": "1720321649",
    "subm_id": "1312328585"
}