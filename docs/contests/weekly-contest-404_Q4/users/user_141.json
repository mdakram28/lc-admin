{
    "username": "_otto",
    "submission": "class Solution:\n    def minimumDiameterAfterMerge(self, edges1: List[List[int]], edges2: List[List[int]]) -> int:\n        \n        def minh(edges):\n            g = defaultdict(list)\n            ind = defaultdict(int)\n            vs = set()\n            for u, v in edges:\n                vs.add(u)\n                vs.add(v)\n                g[u].append(v)\n                g[v].append(u)\n                ind[u] += 1\n                ind[v] += 1\n            q = deque([x for x in vs if ind[x] == 1])\n            ans = set(vs)\n            hei = 0\n            while len(ans) > 2:\n                for _ in range(len(q)):\n                    u = q.popleft()\n                    ans.remove(u)\n                    for v in g[u]:\n                        ind[v] -= 1\n                        if ind[v] == 1:\n                            q.append(v)\n                hei += 1\n            return list(ans), hei\n        \n        Aidx, Ah = minh(edges1)\n        Bidx, Bh = minh(edges2)\n        \n        h1 = (Ah + 1)  if len(Aidx) == 2 else Ah\n        h2 = (Bh + 1) if len(Bidx) == 2 else Bh\n        dia1 = Ah * 2 + 1 if len(Aidx) == 2 else Ah * 2\n        dia2 = Bh * 2 + 1 if len(Bidx) == 2 else Bh * 2\n        \n        #print(h1, h2, dia1, dia2)\n        return max(h1 + h2 + 1, dia1, dia2)\n        ",
    "submit_ts": "1719717446",
    "subm_id": "1304391755"
}