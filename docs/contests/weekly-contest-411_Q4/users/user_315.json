{
    "username": "Shubham Anand",
    "submission": "class Solution {\npublic:\n    vector<long long> countKConstraintSubstrings(string s, int k, vector<vector<int>>& q) {\n       // calculate the indices for each index such that #0 > k and & #1 > k\n       int n = s.size();\n       vector<int> ind(n, n);\n       int head = -1, tail = 0, cnt0 = 0, cnt1 = 0;\n       while(tail < n) {\n        while(head + 1 < n && (cnt0 <= k || cnt1 <= k)) {\n            head++;\n            cnt0 += (s[head] == '0');\n            cnt1 += (s[head] == '1');\n        }\n        if(cnt0 > k && cnt1 > k) ind[tail] = head;\n        cnt0 -= (s[tail] == '0');\n        cnt1 -= (s[tail] == '1');\n        tail++;  \n       }\n       vector<long long> pre(n + 1, 0);\n       for(int i = 0; i < n; i++) {\n        pre[i+1] = pre[i] + ind[i];\n       }\n       int qlen = q.size();\n       vector<long long> ans(qlen, 0);\n       for(int i = 0; i < qlen; i++) {    \n        int l = q[i][0], r = q[i][1];\n        int z = upper_bound(ind.begin(), ind.end(), r) - ind.begin();\n        if(z != 0) z--;\n        if(ind[z] <= r && z >= l) {\n            int len = z - l + 1;\n            ans[i] = 1LL*len*(r + 1) - (pre[z+1] - pre[l]);\n        }\n        ans[i] = 1LL*(r - l + 1)*(r-l+2)/2 - ans[i];\n\n       }\n       for(auto y: ind) cout << y << \" \";\n       return ans;\n    }\n};",
    "submit_ts": "1723953035",
    "subm_id": "1359810680"
}