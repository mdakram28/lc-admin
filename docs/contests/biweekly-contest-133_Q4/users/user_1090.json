{
    "username": "kg_codex",
    "submission": "class Solution {\nprivate:\n     int MOD = 1e9+7;\n     int MAX_INVERSIONS = 400;\n\npublic:\n    int numberOfPermutations(int n, vector<vector<int>>& requirements) {\n        unordered_map<int, int> reqMap;\n        for (auto& req : requirements) {\n            reqMap[req[0] + 1] = req[1];\n        }\n\n        vector<vector<long long>> permCounts = initializePermutationCounts(n);\n\n        computePermutationCounts(n, permCounts, reqMap);\n\n        long long result = calculateFinalResult(n, permCounts);\n\n        return (int) (result % MOD);\n    }\n\nprivate:\n    vector<vector<long long>> initializePermutationCounts(int n) {\n        vector<vector<long long>> dp(n + 1, vector<long long>(MAX_INVERSIONS + 1, 0));\n        dp[0][0] = 1;\n        return dp;\n    }\n\n    void computePermutationCounts(int n, vector<vector<long long>>& dp, unordered_map<int, int>& reqMap) {\n        for (int length = 1; length <= n; ++length) {\n            for (int inv = 0; inv <= MAX_INVERSIONS; ++inv) {\n                for (int newPos = 0; newPos < length; ++newPos) {\n                    int prevInv = inv - newPos;\n                    if (prevInv > -1) {\n                        dp[length][inv] = (dp[length][inv] + dp[length - 1][prevInv]) % MOD;\n                    }\n                }\n            }\n\n            if (reqMap.count(length) != 0) {\n                for (int inv = 0; inv <= MAX_INVERSIONS; ++inv) {\n                    (inv !=  reqMap[length]) ? dp[length][inv] = 0: dp[length][inv] =dp[length][inv]; \n                }\n            }\n        }\n    }\n\n    long long calculateFinalResult(int n, vector<vector<long long>>& dp) {\n        long long result = 0;\n        for (long long count : dp[n]) {\n            result = (result + count) % MOD;\n        }\n        return result;\n    }\n};",
    "submit_ts": 1719071082.0
}