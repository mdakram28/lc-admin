{
    "username": "LittleXi",
    "submission": "#include <vector>\n#include <set>\n#include <map>\n#include <algorithm>\n\nusing namespace std;\n\nclass Solution {\npublic:\n    vector<int> numberOfAlternatingGroups(vector<int>& a, vector<vector<int>>& queries) {\n        int n = a.size();\n        set<pair<int, int>> sl;\n        map<int, int> cnt;\n        int i = 0;\n        \n        while (i < n) {\n            int v0 = a[i];\n            int i0 = i;\n            while (i < n && (a[i] ^ a[i0]) == ((i - i0) & 1)) {\n                i++;\n            }\n            cnt[i - i0]++;\n            sl.insert({i0, i - 1});\n        }\n\n        vector<int> ans;\n        \n        for (auto& q : queries) {\n            if (q[0] == 1) {\n                int res = 0;\n                int d = q[1];\n                if (a[0] == a[n - 1]) {\n                    for (auto& k_v : cnt) {\n                        int k = k_v.first;\n                        int v = k_v.second;\n                        if (k >= d) {\n                            res += (k - d + 1) * v;\n                        }\n                    }\n                } else {\n                    if (sl.size() == 1) {\n                        res = n;\n                    } else {\n                        for (auto& k_v : cnt) {\n                            int k = k_v.first;\n                            int v = k_v.second;\n                            if (k >= d) {\n                                res += (k - d + 1) * v;\n                            }\n                        }\n                        auto l0_r0 = *sl.begin();\n                        auto l1_r1 = *sl.rbegin();\n                        int k = l0_r0.second - l0_r0.first + 1;\n                        if (k >= d) {\n                            res -= k - d + 1;\n                        }\n                        k = l1_r1.second - l1_r1.first + 1;\n                        if (k >= d) {\n                            res -= k - d + 1;\n                        }\n                        k = (l0_r0.second - l0_r0.first + 1) + (l1_r1.second - l1_r1.first + 1);\n                        if (k >= d) {\n                            res += k - d + 1;\n                        }\n                    }\n                }\n                ans.push_back(res);\n            } else {\n                int idx = q[1];\n                int c = q[2];\n                if (a[idx] == c) {\n                    continue;\n                }\n                \n                a[idx] = c;\n                auto it = sl.lower_bound({idx, INT_MAX});\n                it--;\n                auto [x, y] = *it;\n                sl.erase(it);\n                cnt[y - x + 1]--;\n                set<pair<int, int>> s;\n                if (x <= idx - 1) {\n                    s.insert({x, idx - 1});\n                }\n                s.insert({idx, idx});\n                if (idx + 1 <= y) {\n                    s.insert({idx + 1, y});\n                }\n                vector<pair<int, int>> sv(s.begin(), s.end());\n                x = sv[0].first;\n                y = sv[0].second;\n                if (x != 0 && a[x] != a[x - 1]) {\n                    auto l_r = *prev(sl.lower_bound({x, 0}));\n                    sv[0] = {l_r.first, y};\n                    sl.erase(l_r);\n                    cnt[l_r.second - l_r.first + 1]--;\n                }\n                x = sv.back().first;\n                y = sv.back().second;\n                if (y != n - 1 && a[y] != a[y + 1]) {\n                    auto l_r = *sl.upper_bound({y, INT_MAX});\n                    sv.back() = {x, l_r.second};\n                    sl.erase(l_r);\n                    cnt[l_r.second - l_r.first + 1]--;\n                }\n                for (auto& v : sv) {\n                    sl.insert(v);\n                    cnt[v.second - v.first + 1]++;\n                }\n            }\n        }\n        return ans;\n    }\n};\n",
    "submit_ts": "1722743189",
    "subm_id": "552349335"
}