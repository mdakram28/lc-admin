{
    "username": "vroseville",
    "submission": "class Solution {\n    public int[] shortestDistanceAfterQueries(int n, int[][] queries) {\n        LL ll = new LL();\n        ll.init(n);\n        int q = queries.length;\n        int[] res = new int[q];\n        for(int i = 0; i < q; i++) {\n            int[] que = queries[i];\n            int start = que[0];\n            int end = que[1];\n            ll.delete(start, end);\n            res[i] = ll.getSize();\n        }\n        return res;\n    }\n    \n    class Node {\n        int val;\n        Node next;\n        \n        public Node(int val) {\n            this.val = val;\n        }\n    }\n    \n    class LL {\n        Node head;\n        Map<Integer, Node> map;\n        public LL() {\n            head = new Node(0);\n            map = new HashMap<>();\n        }\n        \n        public void init(int n) {\n            Node cur = head;\n            for (int i = 0; i < n; i++) {\n                cur.next = new Node(i);\n                map.put(i, cur.next);\n                cur = cur.next;\n            }\n        }\n        \n        public void delete(int start, int end) {\n            if(map.containsKey(start) && map.containsKey(end)) {\n                Node startNode = map.get(start);\n                Node endNode = map.get(end);\n                Node cur = startNode.next;\n                while (cur.val != endNode.val) {\n                    map.remove(cur.val);\n                    cur = cur.next;\n                }\n                startNode.next = endNode;\n            }\n        }\n\n        public int getSize() {\n            return map.size() - 1;\n        }\n    }\n}",
    "submit_ts": "1722743698",
    "subm_id": "1343797655"
}