{
    "username": "NOne",
    "submission": "func countKConstraintSubstrings(s string, k int, queries [][]int) []int64 {\n\tn := len(s)\n\tqq := make([][]int, len(queries))\n\tfor i := range qq {\n\t\tqq[i] = []int{queries[i][0], queries[i][1], i}\n\t}\n\tsort.Slice(qq, func(i, j int) bool {\n\t\treturn qq[i][1] < qq[j][1]\n\t})\n\tleftEdge := getLeftEdge(s, k)\n\t//fmt.Println(leftEdge)\n\tthis := &solve{\n\t\tcntTree: newSegmentTree(0, n-1, 0),\n\t\tsumTree: newSegmentTree(0, n-1, 0),\n\t}\n\ti := 0\n\tsum := 0\n\tans := make([]int64, len(queries))\n\tfor _, qi := range qq {\n\t\tl, r, j := qi[0], qi[1], qi[2]\n\t\tfor ; i <= r; i++ {\n\t\t\tthis.update(leftEdge[i])\n\t\t\tsum += leftEdge[i]\n\t\t}\n\t\txs := (l+r)*(r-l+1)/2 + (l-1)*l\n\t\t//fmt.Println(\"sum, xs: \", sum, xs)\n\t\t// \u6bcf\u4e2a\u5143\u7d20\u8ddfl\u53d6\u8f83\u5927\u503c\n\t\tys := sum - this.querySum(0, l)\n\t\t//fmt.Println(this.querySum(0, l), this.queryCnt(0, l))\n\t\tys += this.queryCnt(0, l) * l\n\t\t//fmt.Println(\"ys: \", ys)\n\t\tans[j] = int64(xs - ys + r + 1)\n\t}\n\treturn ans\n}\n\ntype solve struct {\n\tcntTree *segTree\n\tsumTree *segTree\n}\n\nfunc (this *solve) querySum(l, r int) int {\n\treturn this.sumTree.query(l, r)\n}\n\nfunc (this *solve) queryCnt(l, r int) int {\n\treturn this.cntTree.query(l, r)\n}\n\nfunc (this *solve) update(val int) {\n\tthis.cntTree.update(val, 1)\n\tthis.sumTree.update(val, val)\n}\n\nfunc getLeftEdge(s string, k int) []int {\n\tn := len(s)\n\tdp := make([]int, n)\n\tl := 0\n\tz, o := 0, 0\n\tfor r := range s {\n\t\tif s[r] == '0' {\n\t\t\tz++\n\t\t} else {\n\t\t\to++\n\t\t}\n\t\tfor ; l <= r && z > k && o > k; l++ {\n\t\t\tif s[l] == '0' {\n\t\t\t\tz--\n\t\t\t} else {\n\t\t\t\to--\n\t\t\t}\n\t\t}\n\t\tdp[r] = l\n\t}\n\treturn dp\n}\n\nfunc init() {\n\tdebug.SetGCPercent(-1)\n}\n\ntype segTree struct {\n\tleft, right    int\n\tval            int\n\tlChild, rChild *segTree\n}\n\nvar defaultSegValue int\n\nfunc (this *segTree) merge(a, b int) int {\n\treturn a + b\n}\n\n// \u66f4\u65b0\u53f6\u5b50\u8282\u70b9\u7684\u503c\nfunc (this *segTree) set(val int) {\n\tthis.val = this.merge(this.val, val)\n}\n\nfunc (this *segTree) maintain() {\n\tif this.lChild == nil {\n\t\tthis.val = this.rChild.val\n\t\treturn\n\t}\n\tif this.rChild == nil {\n\t\tthis.val = this.lChild.val\n\t\treturn\n\t}\n\tthis.val = this.merge(this.lChild.val, this.rChild.val)\n}\n\nfunc newSegmentTree(l, r int, defaultVal int) *segTree {\n\tdefaultSegValue = defaultVal\n\treturn &segTree{left: l, right: r, val: defaultSegValue}\n}\n\nfunc newSegmentTreeNode(l, r int) *segTree {\n\treturn &segTree{left: l, right: r, val: defaultSegValue}\n}\n\nfunc (this *segTree) update(pos int, val int) {\n\tif this.left == this.right {\n\t\tthis.set(val)\n\t\treturn\n\t}\n\tmid := (this.left + this.right) / 2\n\tif pos <= mid {\n\t\tif this.lChild == nil {\n\t\t\tthis.lChild = newSegmentTreeNode(this.left, mid)\n\t\t}\n\t\tthis.lChild.update(pos, val)\n\t} else {\n\t\tif this.rChild == nil {\n\t\t\tthis.rChild = newSegmentTreeNode(mid+1, this.right)\n\t\t}\n\t\tthis.rChild.update(pos, val)\n\t}\n\tthis.maintain()\n}\n\n// \u6ce8\u610f\u81ea\u884c\u5904\u7406l>r\u7684\u60c5\u51b5\uff0c\u5426\u5219query\u51fd\u6570\u4f1a\u8fd4\u56de\u9519\u8bef\u7684\u503c\nfunc (this *segTree) query(l, r int) int {\n\tif this == nil {\n\t\treturn defaultSegValue\n\t}\n\tif l <= this.left && r >= this.right {\n\t\treturn this.val\n\t}\n\tmid := (this.left + this.right) / 2\n\tif l > mid {\n\t\treturn this.rChild.query(l, r)\n\t}\n\tif r <= mid {\n\t\treturn this.lChild.query(l, r)\n\t}\n\treturn this.merge(this.lChild.query(l, r), this.rChild.query(l, r))\n}",
    "submit_ts": "1723951751",
    "subm_id": "556407439"
}