{
    "username": "Last_Of_UsOO",
    "submission": "\n#include <bits/stdc++.h>\nusing namespace std;\n\nvoid __print(int x) { cerr << x; }\nvoid __print(long x) { cerr << x; }\nvoid __print(long long x) { cerr << x; }\nvoid __print(unsigned x) { cerr << x; }\nvoid __print(unsigned long x) { cerr << x; }\nvoid __print(unsigned long long x) { cerr << x; }\nvoid __print(float x) { cerr << x; }\nvoid __print(double x) { cerr << x; }\nvoid __print(long double x) { cerr << x; }\nvoid __print(char x) { cerr << '\\'' << x << '\\''; }\nvoid __print(const char *x) { cerr << '\\\"' << x << '\\\"'; }\nvoid __print(const string &x) { cerr << '\\\"' << x << '\\\"'; }\nvoid __print(bool x) { cerr << (x ? \"true\" : \"false\"); }\n\ntemplate <typename T, typename V>\nvoid __print(const pair<T, V> &x)\n{\n    cerr << '{';\n    __print(x.first);\n    cerr << ',';\n    __print(x.second);\n    cerr << '}';\n}\ntemplate <typename T>\nvoid __print(const T &x)\n{\n    int f = 0;\n    cerr << '{';\n    for (auto &i : x)\n        cerr << (f++ ? \",\" : \"\"), __print(i);\n    cerr << \"}\";\n}\nvoid _print() { cerr << \"]\\n\"; }\ntemplate <typename T, typename... V>\nvoid _print(T t, V... v)\n{\n    __print(t);\n    if (sizeof...(v))\n        cerr << \", \";\n    _print(v...);\n}\n#ifndef ONLINE_JUDGE\n#define debug(x...)               \\\n    cerr << \"[\" << #x << \"] = [\"; \\\n    _print(x)\n#else\n#define debug(x...)\n#endif\n\nstatic auto fastio = []()\n{\n    ios_base::sync_with_stdio(false);\n    cin.tie(nullptr);\n    cout.tie(nullptr);\n};\n\nint mod = INT_MAX;\nclass GetTrie\n{\npublic:\n    unordered_map<char, GetTrie *> hashNode;\n    int GetCost;\n    GetTrie() : GetCost(mod) {}\n};\n\nclass Trie\n{\npublic:\n    GetTrie *root;\n\n    Trie()\n    {\n        root = new GetTrie();\n    }\n\n    void insert(const string &word, int GetCost)\n    {\n        GetTrie *node = root;\n        for (auto &child : word)\n        {\n            if (!node->hashNode.count(child))\n            {\n                node->hashNode[child] = new GetTrie();\n            }\n            node = node->hashNode[child];\n        }\n        node->GetCost = min(node->GetCost, GetCost);\n    }\n};\n\nclass Solution\n{\npublic:\n    int findingminimumCost(string target, vector<string> &words, vector<int> &costs)\n    {\n        int n = target.size();\n        Trie trie;\n        for (int i = 0; i < words.size(); ++i)\n            trie.insert(words[i], costs[i]);\n\n        vector<int> DpTrie(n + 1, mod);\n        DpTrie[0] = 0;\n        for (int i = 0; i < n; ++i)\n        {\n            if (DpTrie[i] == mod)\n                continue;\n            GetTrie *node = trie.root;\n            for (int j = i; j < n; ++j)\n            {\n                if (!node->hashNode.count(target[j]))\n                    break;\n                node = node->hashNode[target[j]];\n                if (node->GetCost != mod)\n                    DpTrie[j + 1] = min(DpTrie[j + 1], DpTrie[i] + node->GetCost);\n            }\n        }\n        if (DpTrie[n] == mod)\n            return -1;\n        return DpTrie[n];\n    }\n    int minimumCost(string target, vector<string> &words, vector<int> &costs)\n    {\n        fastio();\n        int ans = findingminimumCost(target, words, costs);\n        return ans;\n    }\n};",
    "submit_ts": "1720323493",
    "subm_id": "1312376937"
}