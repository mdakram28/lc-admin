{
    "username": "rajdeep_maji",
    "submission": "class Solution {\npublic:\n     long long sumDigitDifferences(vector<int>& nums) {\n        int n = nums.size();\n        vector<vector<int>> v(10);\n        for(auto x: nums){\n            string s = to_string(x);\n            int m = s.size();\n            for(int i = 0; i<m; i++){\n                v[i].push_back(s[i]-'0');\n            }\n        }\n        for(int i = 0; i<10; i++){\n            sort(v[i].begin(),v[i].end());\n        }\n        long long ans = 0;\n        for(int i = 0; i<10; i++){\n            vector<int> cr(12,0);\n            for(auto x: v[i]){\n                cr[x]++;\n            }\n            long long cnt = 0;\n            for(auto x: cr){\n                ans += 1LL*cnt*x;\n                cnt += x;\n            }\n        }\n        return ans;\n    }\n    map<int,vector<vector<int>>> dp;\n    int rec(int level, int jump, int reach, int take){\n        int cur = level-5;\n        if(cur>reach) return 0;\n        if(jump>31) return 0;\n        if(dp.count(level) && dp[level][jump][take]!=-1) return dp[level][jump][take];\n        dp[level].resize(32,vector<int> (2,-1));\n        int ans = 0;\n        if(level==reach) ans++;\n        if(take){\n            ans += rec(level-1,jump,reach,0);\n        }\n        if((level+(1LL<<jump))-1<=reach){\n            int nw = level+(1LL<<jump);\n            ans += rec(nw,jump+1,reach,1);\n        }\n        return dp[level][jump][take]=ans;\n    }\n    \n    int waysToReachStair(int k) {\n        int ans = rec(1,0,k,1);\n        return ans;\n    }\n};",
    "submit_ts": 1716090166.0
}