{
    "username": "XCX0OjLCi5",
    "submission": "class FenwickTree:\n    def __init__(self, size):\n        self.size = size\n        self.tree = [0] * (size + 1)\n    \n    def update(self, index, delta):\n        while index <= self.size:\n            self.tree[index] += delta\n            index += index & -index\n    \n    def query(self, index):\n        ss = 0\n        while index > 0:\n            ss += self.tree[index]\n            index -= index & -index\n        return ss\n    \n    def range_query(self, left, right):\n        return self.query(right) - self.query(left - 1)\n    \nclass Solution:\n    def countOfPeaks(self, nums: List[int], queries: List[List[int]]) -> List[int]:\n        n = len(nums)\n        FT = FenwickTree(n)\n        \n        peak_list = [0] * n\n        for i in range(1, n - 1):\n            if nums[i] > nums[i - 1] and nums[i] > nums[i + 1]:\n                peak_list[i] = 1\n                FT.update(i + 1, 1)\n        \n        res = []\n        for op, l, r in queries:\n            if op == 1:\n                if l == r or l + 1 == r:\n                    res.append(0)\n                else:\n                    res.append(FT.range_query(l + 2, r))\n            else:\n                nums[l] = r\n                for i in range(max(1, l - 1), min(n - 1, l + 2)):\n                    if i == 0 or i == n - 1:\n                        continue\n                    np = 1 if nums[i] > nums[i - 1] and nums[i] > nums[i + 1] else 0\n                    if peak_list[i] != np:\n                        FT.update(i + 1, np - peak_list[i])\n                        peak_list[i] = np\n        return res\n                    \n                \n        \n        \n            \n        \n        ",
    "submit_ts": "1718507502",
    "subm_id": "1289653588"
}