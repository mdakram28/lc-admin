{
    "username": "bhlluk",
    "submission": "class Solution:\n    def shift_right(self, x, digit_count):\n        for i in range(31):\n            if x & (2**i):\n                digit_count[i] += 1\n    \n    def shift_left(self, x, digit_count):\n        for i in range(31):\n            if x & (2**i):\n                digit_count[i] -= 1\n                \n    def evaluate_AND(self, digit_count, numcount):\n        ret = 0\n        for i in range(31):\n            if digit_count[i] == numcount:\n                ret += (2**i)\n        return ret\n    \n    def minimumDifference(self, nums: List[int], k: int) -> int:\n        best = math.inf\n        val = 0\n        digit_count = [0] * 31\n        \n        left = 0\n        right = -1\n        while left < len(nums):\n            if (val < k and left < right) or (right == (len(nums)-1)):\n                self.shift_left(nums[left], digit_count)\n                left += 1\n            else:\n                right += 1\n                self.shift_right(nums[right], digit_count)\n                \n            # evaluate new\n            val = self.evaluate_AND(digit_count, right-left+1)\n            best = min(best, abs(val-k))\n            if best == 0:\n                return 0\n        return best\n            \n            \n            \n        ",
    "submit_ts": 1717299714.0
}