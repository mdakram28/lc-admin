{
    "username": "LeetcodeSkuy",
    "submission": "class Solution {\npublic:\n    long long minimumCost(int m, int n, vector<int>& horizontalCut, vector<int>& verticalCut) {\n        int horizontal = 1;\n        int vertical = 1;\n        priority_queue<pair<int, int>> heap;\n        for(int h : horizontalCut){\n            heap.push({h, 0});\n        }\n        for(int v : verticalCut){\n            heap.push({v, 1});\n        }\n\n        long long cost = 0;\n        while(!heap.empty()){\n            pair<int, int> top = heap.top();\n            heap.pop();\n            if(top.second == 1){\n                cost += top.first * horizontal;\n                vertical++;\n            } else{\n                cost += top.first * vertical;\n                horizontal++;\n            }\n        }\n\n        return cost;\n    }\n};",
    "submit_ts": "1720926628",
    "subm_id": "1320291748"
}