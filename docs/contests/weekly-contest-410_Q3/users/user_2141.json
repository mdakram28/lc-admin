{
    "username": "goswamibpl",
    "submission": "class Solution {\n    public int countOfPairs(int[] nums) {\n        int n = nums.length;\n        int MOD = 1_000_000_007;\n\n        int max = 0;\n        for(int i=0; i<nums.length; i++) {\n            max = Math.max(max, nums[i]);\n        }\n\n        // dp[i][v1][v2] => number of ways to form monotonic pairs up to index i\n        int[][][] dp = new int[n][][];\n\n        for (int i = 0; i < n; i++) {\n            dp[i] = new int[nums[i] + 1][];\n            for (int j = 0; j <= nums[i]; j++) {\n                dp[i][j] = new int[nums[i] - j + 1];\n            }\n        }\n\n        // Initialize dp for the first element\n        for (int v1 = 0; v1 <= nums[0]; v1++) {\n            int v2 = nums[0] - v1;\n            dp[0][v1][v2] = 1;\n        }\n\n        // Fill the dp array\n        for (int i = 1; i < n; i++) {\n            for (int v1 = 0; v1 <= nums[i]; v1++) {\n                int v2 = nums[i] - v1;\n                for (int prevV1 = 0; prevV1 <= v1; prevV1++) {\n                    if (v2 <= nums[i - 1] - prevV1) {\n                        dp[i][v1][v2] = (dp[i][v1][v2] + dp[i - 1][prevV1][nums[i - 1] - prevV1]) % MOD;\n                    }\n                }\n            }\n        }\n\n        // Sum up all possible values for the last element\n        int result = 0;\n        for (int v1 = 0; v1 <= nums[n - 1]; v1++) {\n            int v2 = nums[n - 1] - v1;\n            result = (result + dp[n - 1][v1][v2]) % MOD;\n        }\n\n        return result;\n    }\n\n}\n",
    "submit_ts": "1723347000",
    "subm_id": "1351589756"
}