{
    "username": "404_not_found__",
    "submission": "int seg[400010];\n\nvoid build(int node, int st, int end, vector<int> &a)\n{\n    if (st == end)\n    {\n        seg[node] = (st > 0 && st < a.size() - 1 && a[st] > a[st - 1] && a[st] > a[st + 1]) ? 1 : 0;\n       \n        return;\n    }\n    int mid = st + (end - st) / 2;\n    build(2 * node + 1, st, mid, a);\n    build(2 * node + 2, mid + 1, end, a);\n\n    seg[node] = seg[2 * node + 1] + seg[2 * node + 2];\n}\nint query(int node, int st, int end, int l, int r)\n{\n    if (l <= st && r >= end)\n    {\n        return seg[node];\n    }\n    if (r < st || l > end)\n    {\n        return 0;\n    }\n    int mid = st + (end - st) / 2;\n    int ans1 = query(2 * node + 1, st, mid, l, r);\n    int ans2 = query(2 * node + 2, mid + 1, end, l, r);\n    return ans1 + ans2;\n}\n\nvoid update(int node, int low, int high, int ind, int val,vector<int> & a)\n{\n    if (low == high)\n    {\n        int st=low;\n        a[st]=val;\n        seg[node] = (st > 0 && st < a.size() - 1 && a[st] > a[st - 1] && a[st] > a[st + 1]) ? 1 : 0;\n        \n        return;\n        \n    }\n    int mid = low + (high - low) / 2;\n    if (ind <= mid)\n    {\n        update(2 * node + 1, low, mid, ind, val,a);\n    }\n    else\n    {\n        update(2 * node + 2, mid + 1, high, ind, val,a);\n    }\n\n    seg[node] = seg[2 * node + 1] + seg[2 * node + 2];\n}\n\nclass Solution {\npublic:\n    vector<int> countOfPeaks(vector<int>& nums, vector<vector<int>>& queries) {\n        int n=nums.size();\n        build(0,0,n-1,nums);\n        vector<int> ans;\n        for(auto &a:queries){\n            if(a[0]==1){\n               \n                int l=a[1];\n                int r=a[2];\n                l++;\n                r--;\n                 if(l>r){\n                    ans.push_back(0);\n                    continue;\n                 }\n                \n                int actans =query(0,0,n-1,l,r);\n                ans.push_back(actans);\n            \n                \n            }\n            else{\n       \n                update(0,0,n-1,a[1],a[2],nums);\n                if(a[1]>0)\n                    update(0,0,n-1,a[1]-1,nums[a[1]-1],nums);\n                if(a[1]< nums.size()-1)\n                    update(0,0,n-1,a[1]+1,nums[a[1]+1],nums);\n                \n            }\n        }\n       \n        return ans;\n        \n    }\n};",
    "submit_ts": 1718509036.0
}