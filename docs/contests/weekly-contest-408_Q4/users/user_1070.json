{
    "username": "kwrefs",
    "submission": "class Solution:\n    def canReachCorner(self, X: int, Y: int, circles: List[List[int]]) -> bool:\n        # \u68c0\u67e5\u8d77\u70b9\u548c\u7ec8\u70b9\u662f\u5426\u5728\u5706\u5185\n        def is_inside_circle(x, y, circle):\n            return (x - circle[0])**2 + (y - circle[1])**2 <= circle[2]**2\n        \n        # \u68c0\u67e5\u8d77\u70b9\u548c\u7ec8\u70b9\n        if any(is_inside_circle(0, 0, c) or is_inside_circle(X, Y, c) for c in circles):\n            return False\n        \n        parent = {}\n        def find(i):\n            if parent.get(i, i) != i:\n                parent[i] = find(parent[i])\n            return parent.get(i, i)\n\n        def union(i, j):\n            parent[find(i)] = find(j)\n\n        # \u68c0\u67e5\u6240\u6709\u5706\u5bf9\n        for i in range(len(circles)):\n            for j in range(i + 1, len(circles)):\n                d = math.sqrt((circles[i][0] - circles[j][0])**2 + (circles[i][1] - circles[j][1])**2)\n                r1, r2 = circles[i][2], circles[j][2]\n                # \u5982\u679c\u4e24\u4e2a\u5706\u76f8\u4ea4\u6216\u76f8\u5207\uff0c\u5219\u4e0d\u5b58\u5728\u5b89\u5168\u533a\u57df\n                if d <= r1 + r2:\n                    union(i, j)\n        \n        m = defaultdict(list)\n        for i in range(len(circles)):\n            m[find(i)].append(i)\n\n        for k in m:\n            f1, f2 = False, False\n            f3, f4 = False, False\n            for i in m[k]:\n                cx, cy, r = circles[i]\n                f1 |= (cx <= r)\n                f2 |= (cy <= r)\n                f3 |= ((X - cx) <= r)\n                f4 |= ((Y - cy) <= r)\n            if f1 and f3: return False\n            if f1 and f2: return False\n            if f3 and f4: return False\n            if f2 and f4: return False\n\n        return True\n        \n\n        ",
    "submit_ts": "1722139072",
    "subm_id": "1335807064"
}