{
    "username": "Manan04",
    "submission": "class RangeQuery:\n    def __init__(self, data, func=min):\n        self.func = func\n        self._data = _data = [list(data)]\n        i, n = 1, len(_data[0])\n        while 2 * i <= n:\n            prev = _data[-1]\n            _data.append([func(prev[j], prev[j + i]) for j in range(n - 2 * i + 1)])\n            i <<= 1\n\n    def query(self, start, stop):\n        \"\"\"func of data[start, stop)\"\"\"\n        depth = (stop - start).bit_length() - 1\n        return self.func(self._data[depth][start], self._data[depth][stop - (1 << depth)])\n\n    def __getitem__(self, idx):\n        return self._data[0][idx]\nclass Solution:\n    def minimumDifference(self, a: List[int], k: int) -> int:\n        s = RangeQuery(a, lambda x, y: x & y)\n        ans = 10 ** 18\n        n = len(a)\n        for i in range(n):\n            L = i\n            U = n - 1\n            take = i\n            # first find just largest\n            while L <= U:\n                m = (L + U) >> 1\n                qu = s.query(i, m + 1)\n                if(qu >= k):\n                    take = m\n                    L = m + 1\n                else:\n                    U = m - 1\n            ans = min(ans, abs(k - s.query(i, take + 1)))\n            # now find just smalles\n            L = i\n            U = n - 1\n            take = n - 1\n            while L <= U:\n                m = (L + U) >> 1\n                qu = s.query(i, m + 1)\n                if(qu <= k):\n                    take = m\n                    U = m - 1\n                else:\n                    L = m + 1\n            ans = min(ans, abs(k - s.query(i, take + 1)))\n        return ans",
    "submit_ts": "1717297216",
    "subm_id": "1274734889"
}