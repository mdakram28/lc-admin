{
    "username": "meng-hsuan",
    "submission": "class Solution:\n    def minimumSum(self, grid: List[List[int]]) -> int:\n        gnr = len(grid)\n        gnc = len(grid[0])\n        \n        def bisect(grid_: List[List[int]]) -> List[int]:\n            nr = len(grid_)\n            nc = len(grid_[0])\n            by_row = [[] for _ in range(nr)]\n            by_col = [[] for _ in range(nc)]\n            for i in range(nr):\n                for j in range(nc):\n                    if grid_[i][j]:\n                        by_row[i].append(j)\n                        by_col[j].append(i)\n            \n            # The Cut is horizontal:\n            ## Top areas:\n            t = []\n            rl = ru = None\n            cl = cu = None\n            for i in range(nr - 1):\n                if len(by_row[i]):\n                    if rl == None:\n                        rl = i\n                    ru = i\n\n                    if cl == None:\n                        cl = by_row[i][0]\n                        cu = by_row[i][-1]\n                    else:\n                        cl = min(cl, by_row[i][0])\n                        cu = max(cu, by_row[i][-1])\n\n                t.append(1 if rl == None else (ru - rl + 1) * (cu - cl + 1))\n            #print(\"t =\", t)\n\n            ## Bottom areas:\n            b = []\n            rl = ru = None\n            cl = cu = None\n            for i in range(nr - 1, 0, -1):\n                if len(by_row[i]):\n                    if ru == None:\n                        ru = i\n                    rl = i\n\n                    if cl == None:\n                        cl = by_row[i][0]\n                        cu = by_row[i][-1]\n                    else:\n                        cl = min(cl, by_row[i][0])\n                        cu = max(cu, by_row[i][-1])\n\n                b.append(1 if rl == None else (ru - rl + 1) * (cu - cl + 1))\n            b.reverse()\n            #print(\"b =\", b)\n\n            # The cut is vertical:\n            ## Left areas:\n            l = []\n            rl = ru = None\n            cl = cu = None\n            for i in range(nc - 1):\n                if len(by_col[i]):\n                    if cl == None:\n                        cl = i\n                    cu = i\n\n                    if rl == None:\n                        rl = by_col[i][0]\n                        ru = by_col[i][-1]\n                    else:\n                        rl = min(rl, by_col[i][0])\n                        ru = max(ru, by_col[i][-1])\n\n                l.append(1 if rl == None else (ru - rl + 1) * (cu - cl + 1))\n            #print(\"l =\", l)\n\n            ## Right areas:\n            r = []\n            rl = ru = None\n            cl = cu = None\n            for i in range(nc - 1, 0, -1):\n                if len(by_col[i]):\n                    if cu == None:\n                        cu = i\n                    cl = i\n\n                    if rl == None:\n                        rl = by_col[i][0]\n                        ru = by_col[i][-1]\n                    else:\n                        rl = min(rl, by_col[i][0])\n                        ru = max(ru, by_col[i][-1])\n\n                r.append(1 if rl == None else (ru - rl + 1) * (cu - cl + 1))\n            r.reverse()\n            #print(\"r =\", r)\n            \n            return [t, b, l, r]\n        \n        def optimal(bisect_ret: List[List[int]]) -> int:\n            tmp1 = bisect_ret[0] + bisect_ret[2]\n            tmp2 = bisect_ret[1] + bisect_ret[3]\n            ntmp = len(tmp1)\n            \n            if not ntmp:\n                return 1\n            return min(tmp1[i] + tmp2[i] for i in range(ntmp))\n        \n        best = 10 ** 7\n        overall = bisect(grid)\n        for i in range(1, gnr):\n            best = min(best, overall[0][i - 1] + optimal(bisect(grid[i:])))\n            best = min(best, overall[1][i - 1] + optimal(bisect(grid[:i])))\n        for i in range(1, gnc):\n            best = min(best, overall[2][i - 1] + optimal(bisect([grid[j][i:] for j in range(gnr)])))\n            best = min(best, overall[3][i - 1] + optimal(bisect([grid[j][:i] for j in range(gnr)])))\n        \n        return best\n    ",
    "submit_ts": 1719114267.0
}