{
    "username": "DRedDevil04",
    "submission": "struct Node {\n    Node * links[26];\n    bool flag=false;\n    int cost=INT_MAX;\n    bool containsKey(char ch){\n        return (links[ch-'a']!=NULL);\n    }\n    void put(char c, Node *n){\n        links[c-'a']=n;\n    }\n    Node* get(char ch){\n        return links[ch-'a'];\n    }\n};\n\n\nclass Trie {\n\npublic:\n    Node* root;\n    /** Initialize your data structure here. */\n    Trie() {\n        root=new Node();\n    }\n\n    /** Inserts a word into the trie. */\n    void insert(string word,int cst) {\n        Node* node=root;\n        for(int i=0;i<word.length();i++){\n            \n            if(!(node->containsKey(word[i]))){\n                node->put(word[i],new Node());\n            }\n            node = node->get(word[i]);\n        }\n        node->flag=true;\n        node->cost=min(cst,node->cost);\n    }\n\n    /** Returns if the word is in the trie. */\n    int search(string word) {\n        Node * node=root;\n        for(int i=0;i<word.length();i++){\n            if(!(node->containsKey(word[i]))){\n                return false;\n            }\n            node = node->get(word[i]);\n        }\n        return node->cost;\n    }\n\n    /** Returns if there is any word in the trie that starts with the given prefix. */\n    bool startsWith(string prefix) {\n        Node * node=root;\n        for(int i=0;i<prefix.length();i++){\n            if(!(node->containsKey(prefix[i]))){\n                return false;\n            }\n            node = node->get(prefix[i]);\n        }\n        return true;\n    }\n};\n\n\n\n\nclass Solution {\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int n=target.size();\n        Trie* ob=new Trie();\n        vector<int> dp(target.size()+2,INT_MAX);\n        for(int i=0;i<costs.size();i++){\n            ob->insert(words[i],costs[i]);\n        }\n        dp[0] = 0; \n        \n         for (int j = 0; j < n; ++j) {\n            if (dp[j] == INT_MAX) continue;  \n\n            Node* node = ob->root;\n\n            for (int k = j; k < n; ++k) {\n                if(!(node->containsKey(target[k]))) break;\n                node = node->links[target[k]-'a'];\n                if (node->cost != INT_MAX) {\n                    dp[k + 1] = min(dp[k + 1], dp[j] + (node->cost));\n                    // cout<<dp[k+1]<<\" \"<<k<<endl;\n                }\n            }\n        }\n   \n        // cout<<endl;\n        return dp[n] == INT_MAX ? -1 : dp[n];\n\n        \n    }\n};\n\n\n\n// class TrieNode {\n// public:\n//     unordered_map<char, TrieNode*> children;\n//     int cost;\n\n//     TrieNode() : cost(INT_MAX) {}\n// };\n\n// class Trie {\n// public:\n//     TrieNode* root;\n\n//     Trie() {\n//         root = new TrieNode();\n//     }\n\n//     void insert(const string& word, int cost) {\n//         TrieNode* node = root;\n//         for (char c : word) {\n//             if (!node->children.count(c)) {\n//                 node->children[c] = new TrieNode();\n//             }\n//             node = node->children[c];\n//         }\n//         node->cost = min(node->cost, cost);  // Store the minimum cost at the end node\n//     }\n// };\n\n// class Solution {\n// public:\n//     int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n//         int n = target.size();\n    \n//         Trie trie;\n//         for (size_t i = 0; i < words.size(); ++i) {\n//             trie.insert(words[i], costs[i]);\n//         }\n\n//         vector<int> dp(n + 1, INT_MAX);\n//         dp[0] = 0;  \n\n\n//         for (int j = 0; j < n; ++j) {\n//             if (dp[j] == INT_MAX) continue;  \n\n//             TrieNode* node = trie.root;\n\n//             for (int k = j; k < n; ++k) {\n//                 if (!node->children.count(target[k])) break;\n//                 node = node->children[target[k]];\n//                 if (node->cost != INT_MAX) {\n//                     dp[k + 1] = min(dp[k + 1], dp[j] + node->cost);\n//                 }\n//             }\n//         }\n\n//         return dp[n] == INT_MAX ? -1 : dp[n];\n//     }\n// };",
    "submit_ts": "1720323818",
    "subm_id": "1312384781"
}