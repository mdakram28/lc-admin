{
    "username": "tmimotw",
    "submission": "class Solution {\npublic List<Integer> countOfPeaks(int[] nums, int[][] queries) {\n    var peakArr = new int[nums.length];\n    for (int i = 1; i < peakArr.length - 1; i++) {\n      if (nums[i] > nums[i - 1] && nums[i] > nums[i + 1])\n        peakArr[i] = 1;\n    }\n    var segmentTree = new SegmentTreeCountOfPeaks(peakArr);\n    var resultList = new ArrayList<Integer>();\n    for (var query : queries) {\n      if (query[0] == 1) {\n        resultList.add(segmentTree.sumRange(query[1] + 1, query[2] - 1));\n      } else {\n        nums[query[1]] = query[2];\n        updatePos(query[1], nums, segmentTree);\n        updatePos(query[1] - 1, nums, segmentTree);\n        updatePos(query[1] + 1, nums, segmentTree);\n      }\n    }\n    return resultList;\n  }\n\n  private void updatePos(int i, int[] nums, SegmentTreeCountOfPeaks segmentTree) {\n    if (i <= 0 || i >= nums.length - 1)\n      return;\n    if (nums[i] > nums[i - 1] && nums[i] > nums[i + 1]) {\n      segmentTree.update(i, 1);\n    } else {\n      segmentTree.update(i, 0);\n    }\n  }\n\n  class SegmentTreeCountOfPeaks {\n\n    private int[] t;\n\n    private int n;\n\n    public SegmentTreeCountOfPeaks(int[] nums) {\n      n = nums.length;\n      t = new int[4 * n + 1];\n      build(nums, 1, 0, nums.length - 1);\n    }\n\n    private void build(int[] nums, int v, int tl, int tr) {\n      if (tl == tr) {\n        t[v] = nums[tl];\n      } else {\n        var tm = (tl + tr) / 2;\n        build(nums, 2 * v, tl, tm);\n        build(nums, 2 * v + 1, tm + 1, tr);\n        t[v] = t[2 * v] + t[2 * v + 1];\n      }\n    }\n\n    public void update(int index, int val) {\n      update(1, 0, n - 1, index, val);\n    }\n\n    private void update(int v, int tl, int tr, int pos, int val) {\n      if (tl == tr) {\n        t[v] = val;\n      } else {\n        var tm = (tl + tr) / 2;\n        if (pos <= tm)\n          update(2 * v, tl, tm, pos, val);\n        else\n          update(2 * v + 1, tm + 1, tr, pos, val);\n        t[v] = t[2 * v] + t[2 * v + 1];\n      }\n    }\n\n    public int sumRange(int left, int right) {\n      return sum(1, 0, n - 1, left, right);\n    }\n\n    private int sum(int v, int tl, int tr, int l, int r) {\n      if (l > r)\n        return 0;\n      if (l == tl && r == tr)\n        return t[v];\n      var tm = (tl + tr) / 2;\n      return sum(v * 2, tl, tm, l, Math.min(r, tm)) + sum(v * 2 + 1, tm + 1, tr, Math.max(l, tm + 1), r);\n    }\n  }\n}",
    "submit_ts": 1718508227.0
}