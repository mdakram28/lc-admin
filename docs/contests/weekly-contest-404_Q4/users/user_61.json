{
    "username": "Maruzensky",
    "submission": "class Solution:\n    def minimumDiameterAfterMerge(self, edges1: List[List[int]], edges2: List[List[int]]) -> int:\n        n1 = len(edges1) + 1\n        n2 = len(edges2) + 1\n        \n        ed1 = [[] for _ in range(n1)]\n        ed2 = [[] for _ in range(n2)]\n        \n        for u, v in edges1:\n            ed1[u].append(v)\n            ed1[v].append(u)\n        for u, v in edges2:\n            ed2[u].append(v)\n            ed2[v].append(u)\n        \n        def diameter(edge_dict):\n            k = len(edge_dict)\n            seen = [len(e) for e in edge_dict]\n            \n            node = [u for u in range(k) if len(edge_dict[u]) == 1]\n            remain = k\n            \n            answer = 0\n            while k > 2:\n                answer += 2\n                next_ = []\n                k -= len(node)\n                \n                for u in node:\n                    seen[u] -= 1\n                    for v in edge_dict[u]:\n                        if seen[v] > 0:\n                            seen[v] -= 1\n                        if seen[v] == 1:\n                            next_.append(v)\n                            \n                node = next_\n                            \n            return answer + k - 1\n        \n        d1, d2 = diameter(ed1), diameter(ed2)\n        return max([d1, d2, 1 + (d1 + 1) // 2 + (d2 + 1) // 2])\n                            ",
    "submit_ts": "1719716013",
    "subm_id": "1304352612"
}