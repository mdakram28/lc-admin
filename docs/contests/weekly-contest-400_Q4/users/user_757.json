{
    "username": "evanhe1",
    "submission": "class Solution {\npublic:\n    vector<vector<int>> bits;\n    vector<int> nums;\n    int minimumDifference(vector<int>& nums, int k) {\n        this->nums = nums;\n        bits = vector<vector<int>>(nums.size()+1, vector<int>(32));\n        int sol = INT_MAX;\n        for (int i = 0; i < nums.size(); i++) {\n            bits[i+1] = bits[i];\n            for (int s = 0; s < 32; s++) {\n                if ((nums[i] & (1 << s)) != 0) {\n                    bits[i+1][s]++;\n                }\n            }\n            int l = 0, r = i+1;\n            while (l < r) {\n                int m = l + (r-l)/2;\n                if (subarrayAnd(m, i+1) >= k) {\n                    r = m;\n                } else {\n                    l = m+1;\n                }\n            }\n            sol = min(sol, abs(subarrayAnd(l, i+1) - k));\n            if (l-1 >= 0) {\n                sol = min(sol, abs(subarrayAnd(l-1, i+1) - k));\n            }\n        }\n        // for (auto p : bits) {\n        //     for (auto q : p) {\n        //         cout << q << \" \";\n        //     }\n        //     cout << endl;\n        // } \n        return sol;\n    }\n\n    int subarrayAnd(int p, int q) {\n        int sol = 0;\n        for (int i = 0; i < 32; i++) {\n            if (bits[q][i] - bits[p][i] >= q-p) {\n                sol += (1 << i);\n            }\n        }\n        // cout << p << \" \" << q << \" \" << sol << endl;\n        return sol;\n    }\n};",
    "submit_ts": 1717299859.0
}