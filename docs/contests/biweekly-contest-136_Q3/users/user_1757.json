{
    "username": "Raksha_nehra",
    "submission": "class Solution {\npublic:\n    int minFlips(vector<vector<int>>& grid) {\n      int m = grid.size();\n        int cols = grid[0].size();\n        int flips = 0;\n\n        // Handle the center cell for matrices with odd rows and columns\n        if (m % 2 == 1 && cols % 2 == 1) {\n            if (grid[m / 2][cols / 2] == 1) {\n                flips = 1; // Flip the center cell to zero\n            }\n        }\n\n        vector<int> a(3, 0);\n\n        \n        if (cols % 2 == 1) {\n            int top = 0, bottom = m - 1;\n            while (top < bottom) {\n                int currentSum = grid[top][cols / 2] + grid[bottom][cols / 2];\n                a[currentSum] += 1;\n                top++;\n                bottom--;\n            }\n        }\n         if (m % 2 == 1) {\n            int left = 0, right = cols - 1;\n            while (left < right) {\n                int currentSum = grid[m / 2][left] + grid[m / 2][right];\n                a[currentSum] += 1;\n                left++;\n                right--;\n            }\n        }\n\n        if (a[2] % 2 == 1) {\n            if (a[1] > 0) {\n                flips += a[1];\n            } else {\n                flips += 2;\n            }\n        } else {\n            flips += a[1];\n        }\n\n        for (int i = 0; i < m / 2; ++i) {\n            for (int j = 0; j < cols / 2; ++j) {\n                int topL = grid[i][j];\n                int bottomR = grid[m - 1 - i][cols - 1 - j];\n                int bottomL = grid[m - 1 - i][j];\n                int topR = grid[i][cols - 1 - j];\n\n                int sum = topL + bottomL + topR + bottomR;\n\n                if (sum != 0 && sum != 4) {\n                    flips += min(sum, 4 - sum);\n                }\n            }\n        }\n\n        return flips;\n            \n    }\n};",
    "submit_ts": "1722699919",
    "subm_id": "1343226247"
}