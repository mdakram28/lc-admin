{
    "username": "thorfinn_",
    "submission": "#define ll long long\nclass Solution {\npublic:\n    static ll bitAnd(ll a, ll b) {return a & b;}\n    template<typename T>\n    struct SparseTable{\n        ll n;\n        vector<vector<T>> table;\n        function<T(const T&, const T&)> merge;\n        SparseTable(vector<T> a, const function<T(const T&, const T&)> &_merge){\n            ll n = a.size();\n            merge = _merge;\n            int max_size = 31 - __builtin_clz(n);\n            table.assign(max_size + 1, vector<T>(n, (T)0));\n            for(int i = 0; i < n; ++i) table[0][i] = a[i];\n            for(int i = 1; i <= max_size; ++i) \n                for(int j = 0; j <= n - (1 << i); ++j) \n                    table[i][j] = merge(table[i - 1][j],table[i - 1][j + (1 << (i - 1))]);\n        }\n\n        T query(ll l, ll r) {\n            int dist = 31 - __builtin_clz(r - l + 1);\n            return merge(table[dist][l], table[dist][r - (1 << dist) + 1]);\n        }\n    };\n    long long countSubarrays(vector<int>& nums, int k) {\n        vector<ll> v;\n        for(auto p : nums) v.push_back(p);\n        ll n = nums.size();\n        SparseTable<ll> st(v, bitAnd);\n        ll ans = 0;\n        for(ll i = 0;i<n;i++){\n            ll l = i, h = n - 1;\n            ll mi = n + 1 , mx = -1;\n            while(l <= h){\n                ll m = (l + h) / 2;\n                ll start = i , last = m;\n                ll val = st.query(start, last);\n                if(val < k){\n                    h = m - 1;\n                }\n                else{\n                    if(val == k){\n                        mi = min(mi, m);\n                        h = m - 1;\n                    }\n                    else{\n                        l = m + 1;\n                    }\n                }\n            }\n            l = i, h = n - 1;\n            while(l <= h){\n                ll m = (l + h) / 2;\n                ll start = i , last = m;\n                ll val = st.query(start, last);\n                if(val < k){\n                    h = m - 1;\n                }\n                else{\n                    if(val == k){\n                        mx = max(mx, m);\n                        l = m + 1;\n                    }\n                    else{\n                        l = m + 1;\n                    }\n                }\n            }\n            if(mx != -1){\n                ll diff = mx - mi + 1;\n                // cout << mi << \" \" << mx << \" \" << diff << endl;\n                ans += diff;\n            }\n        }\n        // cout << \"---\\n\";\n        return ans;\n    }\n};",
    "submit_ts": "1720277461",
    "subm_id": "1311664772"
}