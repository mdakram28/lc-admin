{
    "username": "goats_9",
    "submission": "class Solution {\npublic:\n\n    class HashedString {\n    private:\n\t    // change M and B if you want\n    \tconst long long M = 1e9 + 9;\n\t    const long long B = 9973;\n\n    \t// pow[i] contains B^i % M\n\t    vector<long long> pow;\n\n    \t// p_hash[i] is the hash of the first i characters of the given string\n\t    vector<long long> p_hash;\n\n    public:\n\t    HashedString(const string &s) : p_hash(s.size() + 1) {\n            pow = {1};\n\t\t    while (pow.size() <= s.size()) { pow.push_back((pow.back() * B) % M); }\n\n\t\t    p_hash[0] = 0;\n\t\t    for (int i = 0; i < s.size(); i++) {\n\t\t\t    p_hash[i + 1] = ((p_hash[i] * B) % M + s[i]) % M;\n\t\t    }\n\t    }\n\n\t    long long get_hash(int start, int end) {\n\t\t    long long raw_val =\n\t\t    (p_hash[end + 1] - (p_hash[start] * pow[end - start + 1]));\n\t\t    return (raw_val % M + M) % M;\n\t    }\n    };\n\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        HashedString ht(target);\n        map<array<long long, 2>, int> hw;\n        int n = target.size(), m = words.size();\n        for (int i = 0; i < m; i++) {\n            auto word = words[i];\n            auto hsh = HashedString(word);\n            long long sz = word.size();\n            auto rh = hsh.get_hash(0, sz - 1);\n            if (hw.count({rh, sz})) hw[{rh, sz}] = min(hw[{rh, sz}], costs[i]);\n            else hw[{rh, sz}] = costs[i];\n        }\n        vector<int> dp(n + 1, 1e9);\n        dp[0] = 0;\n        for (int i = 1; i <= n; i++) {\n            for (auto [v, c] : hw) {\n                auto [h, sz] = v;\n                if (sz > i) continue;\n                if (ht.get_hash(i - sz, i - 1) == h) dp[i] = min(dp[i - sz] + c, dp[i]);\n            }\n        }\n        return dp.back() == 1e9 ? -1 : dp.back();\n    }\n};",
    "submit_ts": "1720323064",
    "subm_id": "1312366394"
}