{
    "username": "rando_rando",
    "submission": "class Solution:\n    def minimumDistance(self, points: List[List[int]]) -> int:\n        \n        def calcMax(skip):\n            sums = []\n            diffs = []\n            for i, point in enumerate(points):\n                if i == skip:\n                    continue\n                sums.append(point[0] + point[1])\n                diffs.append((point[0] - point[1]))\n            return  max(sums), min(sums), max(diffs), min(diffs)\n        \n        mxSum, mnSum, mxDif, mnDif = calcMax(-1)\n        \n        def pointsWithSum(targetSum):\n            ans = []\n            for i, point in enumerate(points):\n                if point[0] + point[1] == targetSum:\n                    ans.append(i)\n            return ans\n        \n        def pointsWithDif(targetDif):\n            ans = []\n            for i, point in enumerate(points):\n                if point[0] - point[1] == targetDif:\n                    ans.append(i)\n            return ans\n        \n        def findPointsWithExtremeDif(indexes):\n            diffs = []\n            for index in indexes:\n                diffs.append((points[index][0] - points[index][1], index))\n            diffs.sort()\n            return [diffs[0], diffs[-1]]\n        \n        \n        def findPointsWithExtremeSum(indexes):\n            sums = []\n            for index in indexes:\n                sums.append((points[index][0] + points[index][1], index))\n            sums.sort()\n            return [sums[0], sums[-1]]\n        \n        c = findPointsWithExtremeDif(pointsWithSum(mxSum)) + findPointsWithExtremeDif(pointsWithSum(mnSum))\n        c += findPointsWithExtremeSum(pointsWithDif(mxDif)) + findPointsWithExtremeDif(pointsWithDif(mnDif))\n        res = []\n        for _, cpoint_idx in c:\n            mxSum, mnSum, mxDif, mnDif = calcMax(cpoint_idx)\n            res.append(max(mxSum -mnSum, mxDif - mnDif))\n        return min(res)\n        \n        "
}