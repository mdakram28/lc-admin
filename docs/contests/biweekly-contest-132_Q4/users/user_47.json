{
    "username": "menborong",
    "submission": "using LL = long long;\n\nusing namespace std;\nusing vInt = vector<int>;\nusing vLL = vector<LL>;\nusing pLL = pair<LL, LL>;\nusing vPLL = vector<pLL>;\nusing pii = pair<int, int>;\nusing vPii = vector<pii>;\nusing matInt = vector<vInt>;\nusing matLL = vector<vLL>;\nusing vBool = vector<bool>;\nusing matBool = vector<vBool>;\nusing vStr = vector<string>;\n\n#define all(x) (x).begin(), (x).end()\n#define cyes cout << \"Yes\" << '\\n'\n#define cno cout << \"No\" << '\\n'\n#define for0(i, n) for(int (i)=0; (i)<(n); (i)++)\n#define for1(i, n) for(int (i)=1; (i)<=(n); (i)++) \n#define newInt(n) int n; cin >> n\n#define newLL(n) LL n; cin >> n\n#define newVInt(A, f, t) vInt A(t); for(int i=f; i<t; i++) cin >> A[i]\n#define newVLL(A, f, t) vLL A(t); for(int i=f; i<t; i++) cin >> A[i]\n#define endl '\\n'\n\nstruct RMQSeg{\n    int N;\n    vInt seg;\n    RMQSeg(int N): N(N){\n        int siz = 1;\n        while(siz < 2*N) siz <<= 1;\n        seg = vInt(siz+1, -1000000000);\n    }\n    int merge(int a, int b){\n        // can be changed\n        return max(a, b);\n    }\n    void init(int idx, int s, int e, vInt& A){\n        if(s == e){\n            seg[idx] = A[s];\n            return;\n        }\n        int m = (s+e)/2;\n        init(idx<<1, s, m, A);\n        init(idx<<1|1, m+1, e, A);\n        seg[idx] = merge(seg[idx<<1], seg[idx<<1|1]);\n    }\n    void update(int tar, int v, int idx, int s, int e){\n        if(tar > e || tar < s) return;\n        if(s == e){\n            seg[idx] = max(seg[idx], v);\n            return;\n        }\n        int m = (s+e)/2;\n        update(tar, v, idx<<1, s, m);\n        update(tar, v, idx<<1|1, m+1, e);\n        seg[idx] = merge(seg[idx<<1], seg[idx<<1|1]);\n    }\n    int query(int l, int r, int idx, int s, int e){\n        if(r < s || e < l) return -1000000000; // can be changed\n        if(l <= s && e <= r) return seg[idx];\n        int m = (s+e)/2;\n        return merge(query(l, r, idx<<1, s, m), query(l, r, idx<<1|1, m+1, e));\n    }\n};\n\nclass Solution {\npublic:\n    int maximumLength(vector<int>& nums, int k) {\n        int N = nums.size();\n        vInt A(N+1);\n        for(int i=1; i<=N; i++){\n            A[i] = nums[i-1];\n        }\n\n        vInt X;\n        for(int i=1; i<=N; i++){\n            X.push_back(A[i]);\n        }\n        sort(all(X));\n        X.erase(unique(all(X)), X.end());\n\n        for(int i=1; i<=N; i++){\n            A[i] = lower_bound(all(X), A[i]) - X.begin() + 1;\n        }\n\n        vector<RMQSeg> segs(k+1, RMQSeg(N));\n\n        for(int i=1; i<=N; i++){\n            int tar = A[i];\n            for(int p=0; p<=k; p++){\n                int mv = 0;\n                if(p){\n                    mv = max(mv, segs[p-1].query(1, tar-1, 1, 1, N));\n                    mv = max(mv, segs[p-1].query(tar+1, N, 1, 1, N));\n\n                } \n                mv = max(mv, segs[p].query(tar, tar, 1, 1, N));\n                segs[p].update(tar, mv+1, 1, 1, N);    \n            }\n        }\n        \n        int ans = 0;\n        for(int i=0; i<=k; i++){\n            ans = max(ans, segs[i].query(1, N, 1, 1, N));\n        }\n        return ans;\n    }\n};",
    "submit_ts": "1717859472",
    "subm_id": "1281723736"
}