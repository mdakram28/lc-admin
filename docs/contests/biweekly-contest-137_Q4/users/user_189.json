{
    "username": "wswartworth",
    "submission": "from itertools import product\n\nclass Solution:\n\n    def findMax(self, board, rowOut=[], colOut=[]):\n\n        m, n = len(board), len(board[0])\n\n        maxVal = -float('inf')\n        maxLoc = None\n        for r in range(m):\n            if r in rowOut:\n                continue\n            for c in range(n):\n                if c in colOut:\n                    continue\n                if board[r][c] > maxVal:\n                    maxVal = board[r][c]\n                    maxLoc = (r,c)\n\n        return maxLoc, maxVal\n    \n    def maximumValueSum(self, board: List[List[int]]) -> int:\n        m, n = len(board), len(board[0])\n\n        #try using maxLoc\n        maxLoc, maxVal = self.findMax(board)\n        maxLoc2, maxVal2 = self.findMax(board, rowOut = [maxLoc[0]], colOut = [maxLoc[1]])\n        maxLoc3, maxVal3 = self.findMax(board, rowOut = [maxLoc[0],maxLoc2[0]], colOut=[maxLoc[1],maxLoc2[1]])\n        bestUsingMax1 = maxVal + maxVal2 + maxVal3\n\n        maxRowMax = max([board[maxLoc2[0]][c] for c in range(n) if c != maxLoc[1] and c !=maxLoc2[1] ])\n        maxColMax = max([board[r][maxLoc2[1]] for r in range(m) if r != maxLoc[0] and r !=maxLoc2[0] ])\n        bestUsingMax2 = maxVal + maxRowMax + maxColMax\n\n        bestUsingMax = max(bestUsingMax1, bestUsingMax2)\n\n        #print(f'maxRowMax:{maxRowMax}')\n        #print(f'maxColMax:{maxColMax}')\n\n        #try using pairs from row and col of maxLoc\n        allPoints = [(r,c) for (r,c) in product(range(m), range(n)) \n            if r != maxLoc[0] and c != maxLoc[1]]\n        \n        allPoints.sort(key=lambda x:board[x[0]][x[1]], reverse=True)\n        bestScore = -float('inf')\n        for r in range(m):\n            if r == maxLoc[0]:\n                continue\n            for c in range(n):\n                if c == maxLoc[1]:\n                    continue\n                #find maximum value in allPoints with coords neither r or c\n                for x,y in allPoints:\n                    if x == r or y == c:\n                        continue\n                    score = board[maxLoc[0]][c] + board[r][maxLoc[1]] + board[x][y]\n                    bestScore = max(score, bestScore)\n                    break\n        \n        print(bestUsingMax)\n\n        return max(bestUsingMax, bestScore)",
    "submit_ts": "1723909147",
    "subm_id": "1359181390"
}