{
    "username": "sameer9167g",
    "submission": "class Solution {\npublic:\n    long long minimumCost(int m, int n, vector<int>& horizontalCut, vector<int>& verticalCut) {\n        priority_queue<pair<int, string>> pq;\n        for (int i = 0; i < horizontalCut.size(); i++) {\n            pq.push({horizontalCut[i], \"Horizontal\"});\n        }\n        \n        for (int j = 0; j < verticalCut.size(); j++) {\n            pq.push({verticalCut[j], \"Vertical\"});\n        }\n        \n        long long horizontalPieces = 1;\n        long long verticalPieces = 1;\n        long long totalCost = 0;\n        \n        while (!pq.empty()) {\n            int cost = pq.top().first;\n            string type = pq.top().second;\n            pq.pop();\n            \n            if (type == \"Horizontal\") {\n                totalCost += (cost * verticalPieces);\n                horizontalPieces++;\n            } else {\n                totalCost += (cost * horizontalPieces);\n                verticalPieces++;\n            }\n        }\n        \n        return totalCost;\n    }\n};",
    "submit_ts": "1720925340",
    "subm_id": "1320251369"
}