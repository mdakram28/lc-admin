{
    "username": "Ostosis",
    "submission": "class Solution {\n    // nums.length == n, n even\n    // 0 <= nums[i] <= k <= 10^5\n\n    // operation -> replace element of nums with [0, k]\n    // nums must fulfill condition that abs(diff(nums[i] - nums[n - i - 1])) = X for all elements\n    // even, so elements dont map to themselves\n\n    // range of diff 0 - k, k - k, diff = [0, k]\n    // when k = 6, el, el = 3, target = 4, it can't be done, since |[0, 6] - 3| < 4, must change two values\n    // els = 4,4, |[0-6] - 4| = [0, 4], els = 6,6, |[0-6] - 6| = [0,6]\n    \n    // XXXXXXXXX Worst case, all diffs different, return n / 2 - 1\n\n    // best case, all diffs same, return 0\n\n\n    public int minChanges(int[] nums, int k) {\n        int n = nums.length;\n        HashMap<Integer, Integer> diffCounts = new HashMap<>();\n        int[] singleChangeCutoffValues = new int[k + 2];\n\n        for (int i = 0; i < n / 2; i++) {\n            int left = nums[i];\n            int right = nums[n - 1 - i];\n            int diff = Math.abs(left - right);\n            diffCounts.compute(diff, (k1, k2) -> k2 == null ? 1 : k2 + 1);\n            \n            int leftMax = Math.max(left, k - left);\n            int rightMax = Math.max(right, k - right);\n            int singleChangeCutoff = Math.max(leftMax, rightMax);\n            singleChangeCutoffValues[singleChangeCutoff + 1]++;\n        }\n        \n        int cutoffTotal = 0;\n        \n        for (int i = 0; i < singleChangeCutoffValues.length; i++) {\n             int cutoffCount = singleChangeCutoffValues[i];\n             cutoffTotal += cutoffCount;\n             singleChangeCutoffValues[i] = cutoffTotal;\n        }\n        \n        int minChanges = Integer.MAX_VALUE;\n\n        for (Map.Entry<Integer, Integer> entry : diffCounts.entrySet()) {\n            int diff = entry.getKey();\n            int count = entry.getValue();\n            int cutoffCount = singleChangeCutoffValues[diff];\n            \n            int cost = cutoffCount + (n / 2 - count);\n            minChanges = Math.min(minChanges, cost);\n        }\n\n        return minChanges;\n    }\n}",
    "submit_ts": "1721488156",
    "subm_id": "1327413358"
}