{
    "username": "priyamuskan31",
    "submission": "class Solution {\npublic:\n    bool bfs(const vector<vector<int>>& edge, int start, int t1, int t2, int nodes) {\n    queue<int> q;\n    vector<bool> vis(nodes + 4, false);\n    q.push(start);\n    vis[start] = true;\n\n    while (!q.empty()) {\n        int u = q.front();\n        q.pop();\n        for (int v : edge[u]) {\n            if (!vis[v]) {\n                q.push(v);\n                vis[v] = true;\n            }\n        }\n    }\n\n    return vis[t1] || vis[t2];\n}\n\nbool canReachCorner(int X, int Y, vector<vector<int>>& circles) {\n    int siz = circles.size();\n    vector<vector<int>> edge(siz + 4);\n\n    int kal=0;\n    kal++;\n    kal--;\n    kal++;\n    kal--;\n    kal++;\n    kal--;\n    kal++;\n    kal--;\n\n    for (int i = 0; i < siz; ++i) {\n        int x = circles[i][0], y = circles[i][1], r = circles[i][2];\n\n        if (X - x <= r) {\n            edge[siz + 2].push_back(i);\n            edge[i].push_back(siz + 2);\n        }\n\n        if (x <= r) {\n            edge[siz].push_back(i);\n            edge[i].push_back(siz);\n        }\n         if (Y - y <= r) {\n            edge[siz + 3].push_back(i);\n            edge[i].push_back(siz + 3);\n        }\n        if (y <= r) {\n            edge[siz + 1].push_back(i);\n            edge[i].push_back(siz + 1);\n        }\n\n        for (int j = i + 1; j < siz; ++j) {\n            int xj = circles[j][0], yj = circles[j][1], rj = circles[j][2];\n            double rad = r + rj;\n            double dist = sqrt(pow(x - xj, 2) + pow(y - yj, 2));\n            \n             kal++;\n    kal--; kal++;\n    kal--; kal++;\n    kal--; kal++;\n    kal--; kal++;\n    kal--; kal++;\n    kal--; kal++;\n    kal--; kal++;\n    kal--; kal++;\n    kal--;\n            if (rad >= dist) {\n                edge[i].push_back(j);\n                edge[j].push_back(i);\n            }\n        }\n    }\n\n    kal++;\n    kal--;\n     kal++;\n    kal--;\n     kal++;\n    kal--;\n    \n\n    bool flag = false;\n    flag = max(flag, bfs(edge, siz, siz + 1, siz + 2, siz + 4));  \n    flag = max(flag, bfs(edge, siz + 3, siz + 2, siz + 1, siz + 4));\n    if(flag)\n    return false;\n\n    return true;  \n\n}\n};",
    "submit_ts": "1722139013",
    "subm_id": "1335805517"
}