{
    "username": "HFDnpkp1cs",
    "submission": "using ll = long long;\n\nconst ll MX = 1e18;\n\nclass Trie {\npublic:\n    vector<Trie*> children;\n    ll cost = MX;\n    Trie() {\n        children = vector<Trie*>(26, nullptr);\n    }\n\n    void add(string_view s, ll c) {\n        ll n = s.size();\n        auto t = this;\n        for(ll i = 0; i < n; i++) {\n            if(t->children[s[i] - 'a'] == nullptr)\n                t->children[s[i] - 'a'] = new Trie();\n            t = t->children[s[i] - 'a'];\n        }\n        t->cost = min(c, t->cost);\n    }\n};\n\n\nclass Solution {\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int n = words.size();\n        Trie* root = new Trie();\n\n        auto* t = root;\n        for(int i = 0; i < n; i++) {\n            t->add(words[i], costs[i]);\n        }\n\n        int m = target.size();\n        vector<ll> dp(m, -2);\n        helper(target, 0, t, root, dp);\n        if(dp[0] == MX)\n            return -1;\n        return dp[0];\n    }\n\n    ll helper(string_view target, int idx, Trie* t, Trie* root, vector<ll>& dp) {\n        int m = target.size();\n        if(idx >= m) {\n            return 0;\n        }\n        if(dp[idx] >= 0) {\n            return dp[idx];\n        }\n        ll ret = MX;\n        for(int i = idx; i < m; i++) {\n            if(t->children[target[i] - 'a'] == nullptr)\n                break;\n            t = t->children[target[i] - 'a'];\n            if(t->cost != MX) {\n                ret = min(ret, t->cost + helper(target, i + 1, root, root, dp));\n            }\n        }\n        dp[idx] = ret;\n        return ret;\n    }\n};",
    "submit_ts": "1720321751",
    "subm_id": "1312331325"
}