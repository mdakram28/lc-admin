{
    "username": "coding_cpp",
    "submission": "class Solution {\nprivate:\n    static const int MOD = 1'000'000'007;\n    static const int MAX_INV = 400;\n\npublic:\n    int numberOfPermutations(int n, vector<vector<int>>& requirements) {\n        unordered_map<int, int> endIdxInvCnt;\n        for (auto& req : requirements) {\n            endIdxInvCnt[req[0] + 1] = req[1]; \n        }\n\n        vector<vector<long long>> dp(n + 1, vector<long long>(MAX_INV + 1, 0));\n        dp[0][0] = 1;\n\n        int len = 1;\n        while (len <= n) {\n            int currInv = 0;\n            while (currInv <= MAX_INV) {\n                int newPos = 0;\n                while (newPos < len) {\n                    int prevInv = currInv - newPos;\n                    if (prevInv >= 0) {\n                        dp[len][currInv] = (dp[len][currInv] + dp[len - 1][prevInv]) % MOD;\n                    }\n                    ++newPos;\n                }\n                ++currInv;\n            }\n\n            if (endIdxInvCnt.count(len) > 0) {\n                int reqInv = endIdxInvCnt[len];\n                int currInv = 0;\n                while (currInv <= MAX_INV) {\n                    if (currInv != reqInv) {\n                        dp[len][currInv] = 0;\n                    }\n                    ++currInv;\n                }\n            }\n\n            ++len;\n        }\n\n        long long res = 0;\n        int currInv = 0;\n        while (currInv <= MAX_INV) {\n            res = (res + dp[n][currInv]) % MOD;\n            ++currInv;\n        }\n\n        return static_cast<int>(res);\n    }\n};    ",
    "submit_ts": 1719070610.0
}