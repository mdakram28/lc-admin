{
    "username": "soumyadiptocodes",
    "submission": "class Solution {\npublic:\n    void dfs(vector<vector<int>> &graph, int curr, int par, vector<int> &dis, int d)\n    {\n        dis[curr]=d;\n        for(auto it: graph[curr])\n        {\n            if(it!=par)\n            {\n                dfs(graph, it, curr, dis, d+1);\n            }\n        }\n        return;\n    }\n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n        int n=edges1.size()+1;\n        int m=edges2.size()+1;\n\n        vector<vector<int>> graph1(n);\n        vector<vector<int>> graph2(m);\n\n        for(auto it: edges1)\n        {\n            int u=it[0];\n            int v=it[1];\n            graph1[u].push_back(v);\n            graph1[v].push_back(u);\n        }\n        for(auto it: edges2)\n        {\n            int u=it[0];\n            int v=it[1];\n            graph2[u].push_back(v);\n            graph2[v].push_back(u);\n        }\n        int ans=0;\n        int prev1, prev2;\n        vector<int> dis1(n,0);\n        vector<int> dis2(n,0);\n\n        vector<int> dis3(n,0); \n        dfs(graph1, 0, -1, dis1, 0);\n        int idx=max_element(dis1.begin(), dis1.end())-dis1.begin();\n        dfs(graph1, idx, -1, dis1, 0);\n        idx=max_element(dis1.begin(), dis1.end())-dis1.begin();\n        dfs(graph1, idx, -1, dis2, 0);\n\n        for(int i=0;i<n;i++)\n        {\n            dis3[i]=max(dis1[i], dis2[i]);\n        }\n        ans=*max_element(dis3.begin(), dis3.end());\n        prev1=min_element(dis3.begin(), dis3.end())-dis3.begin();\n\n        dis1.assign(m,0);\n        dis2.assign(m,0);\n\n        vector<int> dis4(m,0); \n        dfs(graph2, 0, -1, dis1, 0);\n        idx=max_element(dis1.begin(), dis1.end())-dis1.begin();\n        dfs(graph2, idx, -1, dis1, 0);\n        idx=max_element(dis1.begin(), dis1.end())-dis1.begin();\n        dfs(graph2, idx, -1, dis2, 0);\n\n        for(int i=0;i<m;i++)\n        {\n            dis4[i]=max(dis1[i], dis2[i]);\n        }\n        ans=max(ans, *max_element(dis4.begin(), dis4.end()));\n        prev2=min_element(dis4.begin(), dis4.end())-dis4.begin();\n\n        ans=max(ans, dis3[prev1]+dis4[prev2]+1);\n        return ans;\n    }\n};",
    "submit_ts": "1719719014",
    "subm_id": "1304431628"
}