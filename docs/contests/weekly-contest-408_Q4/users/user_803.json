{
    "username": "anshmaurya03",
    "submission": "#define ll long long\nclass Solution {\n    ll circle(ll x1, ll y1, ll x2, ll y2, ll r1, ll r2) {\n        double d = sqrt((ll)(x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2));\n\n        if (d <= r1 - r2)\n            return true;\n        else if (d <= r2 - r1)\n            return true;\n        else if (d < r1 + r2)\n            return true;\n        else if (d == r1 + r2)\n            return true;\n        return false;\n    }\n\npublic:\n    bool canReachCorner(int X, int Y, vector<vector<int>>& circles) {\n        ll n = circles.size();\n        int vis[n];\n             memset(vis,0,sizeof(vis));\n        function<bool(int)> dfs1 = [&](int idx) {\n            vis[idx] = 1;\n            if (circles[idx][1] - circles[idx][2] <= 0 ||\n                circles[idx][0] + circles[idx][2] >= X)\n                return true;\n            bool res = 0;\n            for (int i = 0; i < n; i++) {\n                if (!vis[i] &&\n                    circle(circles[idx][0], circles[idx][1], circles[i][0],\n                           circles[i][1], circles[idx][2], circles[i][2])) {\n                    res |= dfs1(i);\n                }\n            }\n            if (res)\n                return true;\n            return false;\n        };\n        function<bool(int)> dfs2 = [&](int idx) {\n            vis[idx] = 1;\n            if (circles[idx][1] - circles[idx][2] <= 0 ||\n                circles[idx][0] + circles[idx][2] >= X)\n                return true;\n            bool res = 0;\n            for (int i = 0; i < n; i++) {\n                if (!vis[i] &&\n                    circle(circles[idx][0], circles[idx][1], circles[i][0],\n                           circles[i][1], circles[idx][2], circles[i][2])) {\n                    res |= dfs2(i);\n                }\n            }\n            if (res)\n                return true;\n            return false;\n        };\n        bool res = 0;\n        for (int i = 0; i < n; i++) {\n            if (!vis[i] && circles[i][0] - circles[i][2] <= 0) {\n                res |= dfs1(i);\n            }\n        }\n        if (res)\n            return false;\n        memset(vis,0,sizeof(vis));\n        for (int i = 0; i < n; i++) {\n            if (!vis[i] && circles[i][1] +circles[i][2]>=Y) {\n                res |= dfs2(i);\n            }\n        }\n        if (res)\n            return false;\n        return true;\n    }\n};",
    "submit_ts": "1722138381",
    "subm_id": "1335789321"
}