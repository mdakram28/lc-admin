{
    "username": "iivankon",
    "submission": "class Solution:\n    def waysToReachStair(self, k: int) -> int:\n        reachable = defaultdict(int)\n        \n        def reach(i, jump, last_down):\n            if i > 100:\n                return\n            reachable[i] += 1\n            if i > 0 and not last_down:\n                reach(i - 1, jump, True)\n            reach(i + 2 ** jump, jump + 1, False)\n        \n        reach(1, 0, False)\n        \n        if k <= 100:\n            return reachable[k]\n        \n        closest_pow = int(math.ceil(math.log2(k)))\n        if k < 2 ** closest_pow - closest_pow - 1:\n            return 0\n        \n        choose = 2 ** closest_pow - k\n        return self.ways_to_place_back(closest_pow + choose - 2 ** closest_pow + k, 2 ** closest_pow - k)\n    \n    def ways_to_place_back(self, jumps, backs):\n        total = 0\n        \n        @cache\n        def calc(jumps, backs, last_down):\n            nonlocal total\n            if jumps == backs == 0:\n                return 1\n            if last_down and jumps == 0:\n                return 0\n            if last_down:\n                return calc(jumps - 1, backs, False)\n            res = 0\n            if jumps > 0:\n                res += calc(jumps - 1, backs, False)\n            if backs > 0:\n                res += calc(jumps, backs - 1, True)\n            return res\n        return calc(jumps, backs, False)",
    "submit_ts": 1716090188.0
}