{
    "username": "vectorkuoz",
    "submission": "class DSU {\npublic:\n    DSU (int size) : size(size), rank(std::vector<int>(size, 0)), root(std::vector<int>(size)) {\n        for (int i = 0; i < size; ++i) {\n            root[i] = i;\n        }\n    }\n\n    int getRoot(int x) {\n        return x == root[x] ? x : root[x] = getRoot(root[x]);\n    }\n\n    void join(int x, int y) {\n        if ((x = getRoot(x)) == (y = getRoot(y))) {\n            return;\n        }\n\n        // make sure rank[x] >= rank[y] \n        if (rank[x] < rank[y]) {\n            std::swap(x, y);\n        }\n\n        root[y] = x;\n        if (rank[x] == rank[y]) {\n            ++rank[x];\n        }\n    }\n\nprivate:\n    int size;\n    std::vector<int> rank, root;\n};\n\nclass Solution {\npublic:\n    bool canReachCorner(int X, int Y, vector<vector<int>>& circles) {\n        int n = circles.size();\n        DSU dsu(n);\n\n        for (int i = 0; i < n; ++i) {\n            for (int j = i + 1; j < n; ++j) {\n                long long dx = abs(circles[i][0] - circles[j][0]);\n                long long dy = abs(circles[i][1] - circles[j][1]);\n                long long dist = circles[i][2] + circles[j][2];\n\n                if (dx * dx + dy * dy <= dist * dist) {\n                    dsu.join(i, j);                    \n                }\n            }\n        }\n\n        unordered_map<int, vector<int>> groups;\n        for (int i = 0; i < n; ++i) {\n            groups[dsu.getRoot(i)].push_back(i);\n        }\n\n        for (auto [g, cirs] : groups) {\n            vector<bool> overlapped(4, false);\n            for (int c : cirs) {\n                check(X, Y, circles[c], overlapped);\n            }\n\n            if ((overlapped[0] && overlapped[1]) ||\n                (overlapped[0] && overlapped[3]) ||\n                (overlapped[1] && overlapped[2]) ||\n                (overlapped[2] && overlapped[3])) {\n                    return false;\n            }\n        }\n\n        return true;\n\n    }\n\nprivate:\n    void check (int X, int Y, vector<int> &circle, vector<bool> &overlapped) {\n        long long x = circle[0], y = circle[1], r = circle[2];\n\n        if (abs(y - Y) <= r) {\n            if (x < 0) {\n                overlapped[0] = squreDist(0, Y, x, y) <= r * r;\n            } else if (X < x) {\n                overlapped[0] = squreDist(X, Y, x, y) <= r * r;\n            } else {\n                overlapped[0] = true;\n            }\n        }\n\n        if (abs(y - 0) <= r) {\n            if (x < 0) {\n                overlapped[1] = squreDist(0, 0, x, y) <= r * r;\n            } else if (X < x) {\n                overlapped[1] = squreDist(X, 0, x, y) <= r * r;\n            } else {\n                overlapped[1] = true;\n            }\n        }\n\n        if (abs(x - 0) <= r) {\n            if (y < 0) {\n                overlapped[2] = squreDist(0, 0, x, y) <= r * r;\n            } else if (Y < y) {\n                overlapped[2] = squreDist(0, Y, x, y) <= r * r;\n            } else {\n                overlapped[2] = true;\n            }\n        }\n\n        if (abs(x - X) <= r) {\n            if (y < 0) {\n                overlapped[3] = squreDist(X, 0, x, y) <= r * r;\n            } else if (Y < y) {\n                overlapped[3] = squreDist(X, Y, x, y) <= r * r;\n            } else {\n                overlapped[3] = true;\n            }\n        }\n    }\n\n    long long squreDist(long long x1, long long y1, long long x2, long long y2) {\n        return abs(x1 - x2) + abs(y1 - y2);\n    }\n};",
    "submit_ts": "1722139144",
    "subm_id": "1335809052"
}