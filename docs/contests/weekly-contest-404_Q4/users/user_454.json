{
    "username": "vedanttaak",
    "submission": "from typing import List\n\nclass Solution:\n    def findDepth(self, node, graph, vis, maxDia) -> int:\n        vis[node] = True\n        res = temp = 0\n\n        for n in graph[node]:\n            if not vis[n]:\n                depth = self.findDepth(n, graph, vis, maxDia)\n                if depth > res:\n                    temp = res\n                    res = depth\n                elif depth > temp:\n                    temp = depth\n\n        maxDia[0] = max(maxDia[0], res + temp)\n        return res + 1\n\n    def treeDiameter(self, edges, nodes) -> int:\n        graph = [[] for i in range(nodes)]\n        \n        for i in edges:\n            graph[i[0]].append(i[1])\n            graph[i[1]].append(i[0])\n\n        vis = [False] * nodes\n        maxDia = [0] \n        self.findDepth(0, graph, vis, maxDia)\n        return maxDia[0]\n\n    def minimumDiameterAfterMerge(self, edges1: List[List[int]], edges2: List[List[int]]) -> int:\n        num1 = self.treeDiameter(edges1, len(edges1) + 1)\n        num2 = self.treeDiameter(edges2, len(edges2) + 1)\n\n        res = max(num1, num2)\n        temp = (num1 + 1) // 2 + (num2 + 1) // 2 + 1\n\n        return max(res, temp)\n",
    "submit_ts": 1719718085.0
}