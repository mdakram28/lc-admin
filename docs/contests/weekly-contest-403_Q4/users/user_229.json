{
    "username": "leat14536",
    "submission": "class Solution:\n    def minimumSum(self, grid: List[List[int]]) -> int:\n        m, n = len(grid), len(grid[0])\n        row = [[inf, -1] for _ in range(m)]\n        col = [[inf, -1] for _ in range(n)]\n        for i, arr in enumerate(grid):\n            for j, x in enumerate(arr):\n                if x == 1:\n                    row[i][0] = min(row[i][0], j)\n                    row[i][1] = max(row[i][1], j)\n                    col[j][0] = min(col[j][0], i)\n                    col[j][1] = max(col[j][1], i)\n        ans = inf\n\n\n        minl = inf\n        maxr = 0\n        s = 0\n        line = 0\n        for i, (l, r) in enumerate(row):\n            minl = min(l, minl)\n            maxr = max(r, maxr)\n            if minl != inf:\n                line += 1\n                s = (maxr - minl + 1) * line\n                ans = min(ans, self.comp2(grid[i + 1:]) + s)\n\n        minl = inf\n        maxr = 0\n        s = 0\n        line = 0\n        for i, (l, r) in enumerate(reversed(row)):\n            minl = min(l, minl)\n            maxr = max(r, maxr)\n            if minl != inf:\n                line += 1\n                s = (maxr - minl + 1) * line\n                ans = min(ans, self.comp2(grid[:-i - 1]) + s)\n\n\n\n        mint = inf\n        maxb = 0\n        s = 0\n        line = 0\n        for i, (t, b) in enumerate(col):\n            mint = min(t, mint)\n            maxb = max(b, maxb)\n            if mint != inf:\n                line += 1\n                s = (maxb - mint + 1) * line\n                ans = min(ans, self.comp2([arr[i+1:] for arr in grid]) + s)\n\n        # 1-4\n        mint = inf\n        maxb = 0\n        s = 0\n        line = 0\n        for i, (t, b) in enumerate(reversed(col)):\n            mint = min(t, mint)\n            maxb = max(b, maxb)\n            if mint != inf:\n                line += 1\n                s = (maxb - mint + 1) * line\n                ans = min(ans, self.comp2([arr[:-i-1] for arr in grid]) + s)\n                # print(i, ans)\n        return ans\n\n\n    def comp2 (self, grid):\n        if not grid: return inf\n        m, n = len(grid), len(grid[0])\n        row = [[inf, -1] for _ in range(m)]\n        col = [[inf, -1] for _ in range(n)]\n        for i, arr in enumerate(grid):\n            for j, x in enumerate(arr):\n                if x == 1:\n                    row[i][0] = min(row[i][0], j)\n                    row[i][1] = max(row[i][1], j)\n                    col[j][0] = min(col[j][0], i)\n                    col[j][1] = max(col[j][1], i)\n\n        minl = inf\n        maxr = 0\n        s = 0\n        line = 0\n        ans = inf\n        for i, (l, r) in enumerate(row):\n            minl = min(l, minl)\n            maxr = max(r, maxr)\n            if minl != inf:\n                line += 1\n                s = (maxr - minl + 1) * line\n                ans = min(ans, self.minimumArea(grid[i + 1:]) + s)\n\n\n        mint = inf\n        maxb = 0\n        s = 0\n        line = 0\n        for i, (t, b) in enumerate(col):\n            mint = min(t, mint)\n            maxb = max(b, maxb)\n            if mint != inf:\n                line += 1\n                s = (maxb - mint + 1) * line\n                ans = min(ans, self.minimumArea([arr[i+1:] for arr in grid]) + s)\n\n        return ans\n\n    def minimumArea(self, grid: List[List[int]]) -> int:\n        if not grid or not grid[0]: return inf\n        m, n = len(grid), len(grid[0])\n        l = n\n        t = m\n        r = 0\n        b = 0\n\n        for i, arr in enumerate(grid):\n            for j, x in enumerate(arr):\n                if x == 1:\n                    t = min(i, t)\n                    b = max(i, b)\n                    l = min(l, j)\n                    r = max(r, j)\n        if l == n:\n            return inf\n        return (r - l + 1) * (b - t + 1)\n\n",
    "submit_ts": 1719113137.0
}