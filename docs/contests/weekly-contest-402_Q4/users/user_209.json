{
    "username": "Sai-17",
    "submission": "class Solution {\npublic:\n    struct segtree\n{\n    int sz;\n    vector<int> vals;\n    inline int single(int v)\n    {\n        return v; \n    }\n    inline int combine(auto a, auto b)\n    {\n        return a + b; \n    }\n    int NEUTRAL_ELEMENT = 0;\n    void init(int n)\n    {\n        sz = n;\n        vals.assign(4 * n, NEUTRAL_ELEMENT);\n    }\n    void build(vector<int> &a, int x, int lx, int rx)\n    {\n        if (rx - lx == 1)\n        {\n            vals[x] = single(a[lx]);\n            return;\n        }\n        int m = (lx + rx) / 2;\n        build(a, 2 * x + 1, lx, m);\n        build(a, 2 * x + 2, m, rx);\n        vals[x] = combine(vals[2 * x + 1], vals[2 * x + 2]);\n    }\n    void build(vector<int> &a)\n    {\n        build(a, 0, 0, sz);\n    }\n    void set(int idx, int val, int x, int lx, int rx)\n    {\n        if (rx - lx == 1)\n        {\n            vals[x] = single(val);\n            return;\n        }\n        int m = (lx + rx) / 2;\n        if (m > idx)\n        {\n            set(idx, val, 2 * x + 1, lx, m);\n        }\n        else\n        {\n            set(idx, val, 2 * x + 2, m, rx);\n        }\n        vals[x] = combine(vals[2 * x + 1], vals[2 * x + 2]);\n    }\n    void set(int idx, int val)\n    {\n        set(idx, val, 0, 0, sz);\n    }\n    int query(int l, int r, int x, int lx, int rx)\n    {\n        if (lx >= r || l >= rx) return NEUTRAL_ELEMENT;\n        if (lx >= l && rx <= r) return vals[x];\n        int m = (lx + rx) / 2;\n        return combine(query(l, r, 2 * x + 1, lx, m), query(l, r, 2 * x + 2, m, rx));\n    }\n    int query(int l, int r)\n    {\n        return query(l, r, 0, 0, sz);\n    }\n};\n    vector<int> countOfPeaks(vector<int>& nums, vector<vector<int>>& queries) {\n        int n = nums.size(); \n        vector<int> a(n); \n        for(int i = 1; i < n - 1; ++i)\n            a[i] = int(nums[i] > nums[i - 1] && nums[i] > nums[i + 1]);  \n        segtree st; \n        st.init(n);\n        st.build(a); \n        vector<int> ans; \n        for(auto query: queries)\n        {\n            if(query[0] == 1)\n            {\n                int l = query[1]; \n                int r = query[2]; \n                if(r - l <= 1) \n                    ans.push_back(0); \n                else \n                    ans.push_back(st.query(l + 1, r)); \n            }\n            else\n            {\n                int i = query[1], val = query[2]; \n                nums[i] = val; \n                if(i >= 2)\n                {\n                    if(nums[i - 1] > nums[i] && nums[i - 1] > nums[i - 2]) \n                        st.set(i - 1, 1);\n                    else \n                        st.set(i - 1, 0); \n                }\n                if(i != 0 && i != n - 1)\n                {\n                    if(nums[i] > nums[i - 1] && nums[i] > nums[i + 1])\n                        st.set(i,1);\n                    else\n                        st.set(i,0); \n                }\n                if(i <= n - 3)\n                {\n                    if(nums[i + 1] > nums[i + 2] && nums[i + 1] > nums[i])\n                        st.set(i + 1, 1); \n                    else \n                        st.set(i + 1, 0); \n                }\n            }\n        }\n        return ans; \n    }\n};",
    "submit_ts": 1718507096.0
}