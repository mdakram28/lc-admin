{
    "username": "Mr_Shyyyy_07",
    "submission": "class Solution {\n\n        \n  static const int MAX_I = 400;\n\n                          \n//                 if (pr >= 0) {\n//                         d[l][c] = (d[l][c] + d[l - 1][pr]) % M\n//                     }   \n          static const int M = 1000000007;\n                  \n                  \n  void fillKrdeBc(List<List<int>> d, int n, Map<int, int> e) {\n    d[0][0] = 1;\n\n    for (int l = 1; l <= n; ++l) {\n                              \n//                 if (pr >= 0) {\n//                         d[l][c] = (d[l][c] + d[l - 1][pr]) % M\n//                     }   \n                  \n                  \n      for (int c = 0; c <= MAX_I; ++c) {\n                                \n//                 if (pr >= 0) {\n//                         d[l][c] = (d[l][c] + d[l - 1][pr]) % M\n//                     }   \n                  \n                  \n        for (int p = 0; p < l; ++p) {\n                                  \n//                 if (pr >= 0) {\n//                         d[l][c] = (d[l][c] + d[l - 1][pr]) % M\n//                     }   \n                  \n                  \n          int pr = c - p;\n                                  \n//                 if (pr >= 0) {\n//                         d[l][c] = (d[l][c] + d[l - 1][pr]) % M\n//                     }   \n                  \n                  \n          if (pr >= 0) {\n                  \n                  \n                  \n//                 if (pr >= 0) {\n//                         d[l][c] = (d[l][c] + d[l - 1][pr]) % M\n//                     }   \n                  \n                  \n                  \n                  \n            d[l][c] = (d[l][c] + d[l - 1][pr]) % M;\n          }\n        }\n      }\n\n      if (e.containsKey(l)) {\n        int r = e[l]!;\n                // static const int MAX_I = 400;\n              // COUTmmm/\n        for (int c = 0; c <= MAX_I; ++c) {\n          if (c != r) {\n              \n                  \n                  \n                    // static const int MAX_I = 400;\n                  \n                  \n                  \n            d[l][c] = 0;\n          }\n        }\n      }\n    }\n  }\n\n  int gOPrahlad(List<List<int>> d, int n) {\n    int r = 0;\n            // static const int M = 1000000007;\n    for (int c = 0; c <= MAX_I; ++c) {\n      r = (r + d[n][c]) % M;\n    }\n    return r;\n  }\n\n  int numberOfPermutations(int n, List<List<int>> r) {\n    var e = <int, int>{};\n    for (var q in r) {\n      e[q[0] + 1] = q[1];\n    }\n\n    var d = List.generate(n + 1, (index) => List.filled(MAX_I + 1, 0));\n\n    fillKrdeBc(d, n, e);\n\n    return gOPrahlad(d, n);\n  }\n}\n",
    "submit_ts": 1719071506.0
}