{
    "username": "dd_001__",
    "submission": "class Solution {\npublic:\n    int f(vector<vector<int>> points, int idx)\n    {\n        points.erase(points.begin() + idx);\n        \n        int minSum = points[0][0] + points[0][1];\n        int maxSum = minSum;\n        int minDiff = points[0][0] - points[0][1];\n        int maxDiff = minDiff;\n        \n        int ans = 0;\n        \n        for(int i = 1; i < points.size(); i++)\n        {   \n            int localSum = points[i][0] + points[i][1];\n            int localDiff = points[i][0] - points[i][1];\n            \n            if(localSum > maxSum)\n                maxSum = localSum;\n            \n            if(localSum < minSum)\n                minSum = localSum;\n            \n            if(localDiff > maxDiff)\n                maxDiff = localDiff;\n            \n            if(localDiff < minDiff)\n                minDiff = localDiff;\n            \n            ans = max(maxSum - minSum, maxDiff - minDiff);\n        }\n        \n        return ans;\n    }\n    \n    int minimumDistance(vector<vector<int>>& points) \n    {\n        vector<pair<int, int>> sumV, diffV;\n        int n = points.size();\n        \n        int ans = INT_MAX;\n        \n        for(int i = 0; i < points.size(); i++)\n        {\n            sumV.push_back({points[i][0] + points[i][1], i});\n            diffV.push_back({points[i][0] - points[i][1], i});\n        }\n        \n        sort(sumV.begin(), sumV.end());\n        sort(diffV.begin(), diffV.end());\n        \n        if((sumV[n - 1].first - sumV[0].first) == (diffV[n - 1].first - diffV[0].first))\n        {\n            set<int> s;\n            s.insert(sumV[n - 1].second);\n            s.insert(sumV[0].second);\n            s.insert(diffV[n - 1].second);\n            s.insert(diffV[0].second);\n            \n            if(s.size() == 4)\n                return (sumV[n - 1].first - sumV[0].first);\n            \n            ans = min(ans, f(points, sumV[n - 1].second)); //n - 1 removal\n            ans = min(ans, f(points, sumV[0].second)); //n - 1 removal\n            ans = min(ans, f(points, diffV[n - 1].second)); //0 removal\n            ans = min(ans, f(points, diffV[n - 1].second)); //n - 1 removal\n            \n            return ans;\n        }\n        \n        if((sumV[n - 1].first - sumV[0].first) > (diffV[n - 1].first - diffV[0].first))\n        {\n            \n            ans = min(ans, f(points, sumV[n - 1].second)); //n - 1 removal\n            ans = min(ans, f(points, sumV[0].second)); //n - 1 removal\n            \n            return ans;\n        }\n        \n        ans = min(ans, f(points, diffV[n - 1].second)); //n - 1 removal\n        ans = min(ans, f(points, diffV[0].second)); //0 removal\n\n        return ans;\n    }\n};"
}