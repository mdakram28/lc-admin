{
    "username": "triggered18101",
    "submission": "class Solution:\n    def countOfPeaks(self, nums: List[int], queries: List[List[int]]) -> List[int]:\n        n = len(nums)\n        \n        def is_peak(i):\n            return 0 < i < n - 1 and nums[i] > nums[i - 1] and nums[i] > nums[i + 1]\n\n        # Segment Tree Class\n        class SegmentTree:\n            def __init__(self, size):\n                self.n = size\n                self.tree = [0] * (4 * size)\n                self.build(0, 0, self.n - 1)\n\n            def build(self, node, start, end):\n                if start == end:\n                    self.tree[node] = 1 if is_peak(start) else 0\n                else:\n                    mid = (start + end) // 2\n                    left_child = 2 * node + 1\n                    right_child = 2 * node + 2\n                    self.build(left_child, start, mid)\n                    self.build(right_child, mid + 1, end)\n                    self.tree[node] = self.tree[left_child] + self.tree[right_child]\n\n            def update(self, index, value, node, start, end):\n                if start == end:\n                    self.tree[node] = 1 if is_peak(start) else 0\n                else:\n                    mid = (start + end) // 2\n                    left_child = 2 * node + 1\n                    right_child = 2 * node + 2\n                    if start <= index <= mid:\n                        self.update(index, value, left_child, start, mid)\n                    else:\n                        self.update(index, value, right_child, mid + 1, end)\n                    self.tree[node] = self.tree[left_child] + self.tree[right_child]\n\n            def query(self, L, R, node, start, end):\n                if R < start or L > end:\n                    return 0\n                if L <= start and end <= R:\n                    return self.tree[node]\n                mid = (start + end) // 2\n                left_child = 2 * node + 1\n                right_child = 2 * node + 2\n                left_sum = self.query(L, R, left_child, start, mid)\n                right_sum = self.query(L, R, right_child, mid + 1, end)\n                return left_sum + right_sum\n        \n        # Initialize the segment tree\n        segment_tree = SegmentTree(n)\n        \n        results = []\n        \n        for query in queries:\n            if query[0] == 1:\n                # Query to count peaks in range [li, ri]\n                li, ri = query[1], query[2]\n                count_peaks = segment_tree.query(li + 1, ri - 1, 0, 0, n - 1)\n                results.append(count_peaks)\n            elif query[0] == 2:\n                # Update nums[indexi] to vali\n                indexi, vali = query[1], query[2]\n                nums[indexi] = vali\n                # Update the segment tree for affected indices\n                for i in range(max(1, indexi - 1), min(n - 1, indexi + 2)):\n                    segment_tree.update(i, nums[i], 0, 0, n - 1)\n        \n        return results\n",
    "submit_ts": 1718505882.0
}