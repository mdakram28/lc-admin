{
    "username": "louisfghbvc",
    "submission": "class Solution {\npublic:\n    long long minimumCost(int m, int n, vector<int>& horizontalCut, vector<int>& verticalCut) {\n        // goal: find out the minimum cost to make to 1x1\n        \n        // idea:\n        // m=3,n=2, Hcut=[1,3], Vcut=[5]\n        // ans = 1x5 + 2x1 + 2x3 = 13\n        \n        // each time we can choose horizontalCut or verticalCut\n        // h = 1, v = 1\n        // horizontalCut -> v++;\n        // verticalCut -> h++;\n        \n        // x | x  \n        // x | x \n        // x | x \n        \n        // m=3,n=2, Hcut=[5,5], Vcut=[5,3]\n        //    1x5\n        //   /   \\\n        // 2x3 or 1x1\n        // 2x3 + 2x2\n        \n        // consider the same value -> no matter what we choose is all the same\n        // Hcut=[5,5,5], Vcut=[5,5]\n        // greedy choose the largest values\n        //   1x5 \n        // 1x5  2x5 => 3 + 4\n        // 1 + 2 + 2 + 2\n        // 1 + 1 + 1 + 4 + 4 = 11\n        // 1 + 2(R) + 2(L) + 3(R) + 3(L) = 11 \n        \n        long l = 1, r = 1;\n        long ans = 0;\n        priority_queue<int> left(horizontalCut.begin(), horizontalCut.end()), right(verticalCut.begin(), verticalCut.end());\n        while (left.size() && right.size()) {\n            if (left.top() > right.top()) {\n                ans += r * left.top(); left.pop();\n                l++;\n            }   \n            else {\n                ans += l * right.top(); right.pop();\n                r++;\n            }\n        }\n        \n        while (left.size()) {\n            ans += r * left.top(); left.pop();\n        }\n        while (right.size()) {\n            ans += l * right.top(); right.pop();\n        }\n        \n        return ans;\n    }\n};",
    "submit_ts": "1720925785",
    "subm_id": "1320266099"
}