{
    "username": "d11235813",
    "submission": "class Solution {\npublic:\n    long long minimumOperations(vector<int>& nums, vector<int>& target) {\n        //you're going to have groups that are over and groups that are under\n        ////doing individually is suboptimal\n        //the group that has most count\n\n        // -1 -1 1 1 -2 -2 1 1 -1 -1\n        //6\n\n        //in a connected group with same sign, it's the highest magnitude number\n        //if something is sandwiched, making something bette on the sides makes it worse in the middle, so you might as well split\n\n        //1 1 1 2\n\n        //1 -2 2\n\n        /// 1 2 3 2 1\n        // takes 3\n\n        // 1 2 3 2 1 3\n        // 0 1 2 1 0 2\n        // do separate 4\n        // do together 4\n        //can't just take max of joined component\n\n        // 1 2 3 2 1 2\n        // 0 1 2 1 0 1\n        // another 3\n        // subtract out the common, might have to recuse on each of those gropus\n        // subtract out common, add whatever's left\n\n        // 1 2 3 1 1 2\n        // 0 1 2 0 0 1 \n    \n\n        // 3 4 5 2 2 1 2\n        // 2 3 4 1 1 0 1\n        // 1 2 3 0 0 0 1\n        // another 4\n\n\n        //3 4 5 2 3 1 2\n        //2 3 4 1 2 0 1\n        //1 2 3 0 1 0 1\n        // 3 + 1 + 1 = 5 total 7\n\n\n        // keep track of max and min, if it drops below min add, if it drops above max add diff\n        //new min resets bounds\n\n\n        vector<int> sub(nums.size());\n        for(int i = 0; i < nums.size(); i++){\n            sub[i] = target[i] - nums[i];\n        }\n\n        long long ans = 0;\n        int last_ind = 0;\n        auto sign = [](int a){return a >= 0;};\n        for(int i = 0; i < nums.size(); i++){\n            if(sign(sub[i]) != sign(sub[last_ind])){\n                ans += helper(sub, last_ind, i-1);\n                last_ind = i;\n            }\n        }\n        ans += helper(sub, last_ind, nums.size() -1);\n        return ans;\n    }\n\n    long long helper(auto& arr, int start, int end){\n        // std::cout << \"helper \" << start << \" \" << end << std::endl;\n        long long count = 0;\n        for(int i = start; i <= end; i++){\n            if(i == start){\n                count += std::abs(arr[start]);\n                continue;\n            }\n            if(std::abs(arr[i]) > std::abs(arr[i-1])){\n                count += std::abs(arr[i] - arr[i-1]);\n            }\n        }\n        return count;\n    }\n};",
    "submit_ts": "1721532312",
    "subm_id": "1327982862"
}