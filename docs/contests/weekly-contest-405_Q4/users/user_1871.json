{
    "username": "vidy7014",
    "submission": "#include <iostream>\n#include <vector>\n#include <unordered_map>\n#include <climits>\nusing namespace std;\n\nclass TrieData {\npublic:\n    struct Node {\n        vector<pair<int, int>> endP;\n        unordered_map<char, Node*> child;\n    };\n\n    TrieData() { root = new Node(); }\n    \n    Node* getRoot() {\n        return root;\n    }\n    \n    void insertWord(string& word, int position, int cost) {\n        Node* node = root;\n        for (char c : word) {\n            if (!node->child.count(c))\n                node->child[c] = new Node();\n            node = node->child[c];\n        }\n        node->endP.push_back({position, cost});\n    }\n    \n    bool searchWord(string& word) {\n        Node* node = root;\n        for (char c : word) {\n            if (!node->child.count(c))\n                return false;\n            node = node->child[c];\n        }\n        // Check if the endP vector is not empty for the last character\n        return !node->endP.empty();\n    }\n\nprivate:\n    Node* root;\n};\n\nclass Solution {\nprivate:\n    int targetLength;\n    vector<int> minCost;\n\npublic:\n    bool wordExistsInTrie(string word, TrieData& trie) {\n        return trie.searchWord(word);\n    }\n    \n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int n = target.size();\n        minCost = vector<int>(n + 1, INT_MAX);\n        minCost[0] = 0;\n\n        TrieData trie;\n        for (int i = 0; i < words.size(); ++i) {\n            trie.insertWord(words[i], i, costs[i]);\n        }\n\n        for (int i = 0; i < n; ++i) {\n            if (minCost[i] == INT_MAX)\n                continue;\n\n            TrieData::Node* node = trie.getRoot();\n            int j = i;\n            while (j < n && node->child.count(target[j])) {\n                node = node->child[target[j]];\n                for (auto& pair : node->endP) {\n                    int wordIndex = pair.first;\n                    int wordCost = pair.second;\n                    int wordLength = words[wordIndex].size();\n                    if (i + wordLength <= n) {\n                        minCost[i + wordLength] = min(minCost[i + wordLength], minCost[i] + wordCost);\n                    }\n                }\n                ++j;\n            }\n        }\n\n        return minCost[n] == INT_MAX ? -1 : minCost[n];\n    }\n\n    \n};\n",
    "submit_ts": "1720323630",
    "subm_id": "1312380217"
}