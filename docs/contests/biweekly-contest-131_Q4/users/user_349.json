{
    "username": "none-31",
    "submission": "func getResults(queries [][]int) []bool {\n\tmm := []int{0}\n\tfor _, q := range queries {\n\t\tif q[0] == 1 {\n\t\t\tmm = append(mm, q[1])\n\t\t}\n\t}\n\t_, m2i := discretize(mm)\n\t//fmt.Println(unique, m2i)\n\trbt := redblacktree.NewWithIntComparator()\n\trbt.Put(0, nil)\n\tsgt := &segTree{0, len(mm) - 1, 0, nil, nil}\n\tsgt.insertSingle(0, 0)\n\tvar ans []bool\n\tfor _, q := range queries {\n\t\tif q[0] == 1 {\n\t\t\ti := m2i[q[1]]\n\t\t\tgreater, ok := rbt.Ceiling(q[1])\n\t\t\t//fmt.Println(q, rbt)\n\t\t\titer := rbt.IteratorAt(greater)\n\t\t\tvar right, left int\n\t\t\tif ok {\n\t\t\t\tright = iter.Key().(int)\n\t\t\t\titer.Prev()\n\t\t\t\tleft = iter.Key().(int)\n\t\t\t} else {\n\t\t\t\tleft = rbt.Right().Key.(int)\n\t\t\t}\n\t\t\t//fmt.Println(\"l,r: \", left, right, ok)\n\t\t\t//iter.Prev()\n\t\t\t//left := iter.Key().(int)\n\t\t\tif !ok {\n\t\t\t\tsgt.insertSingle(i, q[1]-left)\n\t\t\t\trbt.Put(q[1], nil)\n\t\t\t} else {\n\t\t\t\tsgt.insertSingle(i, q[1]-left)\n\t\t\t\tsgt.insertSingle(m2i[right], right-q[1])\n\t\t\t\trbt.Put(q[1], nil)\n\t\t\t}\n\t\t\tcontinue\n\t\t}\n\t\tlc, _ := rbt.Floor(q[1])\n\t\t//fmt.Println(q, rbt, greater, ok)\n\t\titer := rbt.IteratorAt(lc)\n\t\tleft := iter.Key().(int)\n\n\t\t//p := sort.Search(len(unique), func(x int) bool {\n\t\t//\treturn unique[x] > q[1]\n\t\t//}) - 1\n\t\t//fmt.Println(rbt, p, unique)\n\t\tif q[1]-left >= q[2] {\n\t\t\tans = append(ans, true)\n\t\t\tcontinue\n\t\t}\n\t\tres := sgt.query(0, m2i[left])\n\t\tans = append(ans, res >= q[2])\n\t}\n\treturn ans\n}\n\n// \u79bb\u6563\u5316\nfunc discretize(arr []int) ([]int, map[int]int) {\n\tunique := slices.Clone(arr)\n\tslices.Sort(unique)\n\tunique = slices.Compact(unique)\n\tval2Idx := make(map[int]int, len(unique))\n\tfor i := range unique {\n\t\tval2Idx[unique[i]] = i\n\t}\n\treturn unique, val2Idx\n}\n\ntype segTree struct {\n\tleft, right, value int\n\tlChild, rChild     *segTree\n}\n\nfunc (this *segTree) insertSingle(pos, val int) {\n\tif this.left == this.right {\n\t\tthis.value = val\n\t\treturn\n\t}\n\tmid := (this.left + this.right) / 2\n\tif pos <= mid {\n\t\tif this.lChild == nil {\n\t\t\tthis.lChild = &segTree{this.left, mid, 0, nil, nil}\n\t\t}\n\t\tthis.lChild.insertSingle(pos, val)\n\t} else {\n\t\tif this.rChild == nil {\n\t\t\tthis.rChild = &segTree{mid + 1, this.right, 0, nil, nil}\n\t\t}\n\t\tthis.rChild.insertSingle(pos, val)\n\t}\n\tthis.value = 0\n\tif this.lChild != nil {\n\t\tthis.value = max(this.value, this.lChild.value)\n\t}\n\tif this.rChild != nil {\n\t\tthis.value = max(this.value, this.rChild.value)\n\t}\n}\nfunc (this *segTree) query(l, r int) int {\n\tif l <= this.left && r >= this.right {\n\t\treturn this.value\n\t}\n\tmid := (this.left + this.right) / 2\n\tans := 0\n\tif l <= mid {\n\t\tif this.lChild != nil {\n\t\t\tans = max(ans, this.lChild.query(l, r))\n\t\t}\n\t}\n\tif r > mid {\n\t\tif this.rChild != nil {\n\t\t\tans = max(ans, this.rChild.query(l, r))\n\t\t}\n\t}\n\treturn ans\n}",
    "submit_ts": 1716652001.0
}