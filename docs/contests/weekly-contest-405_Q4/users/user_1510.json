{
    "username": "stilleholz",
    "submission": "class Trie:\n    def __init__(self):\n        self.trie = {}\n\n    def insert(self, word):\n        node = self.trie\n        for ch in word:\n            if ch not in node:\n                node[ch] = {}\n            node = node[ch]\n        node[\"#\"] = word\n            \n    def startsWith(self, prefix):\n        node = self.trie\n        wordCand = set()\n        for ch in prefix:\n            if ch not in node:\n                return wordCand\n            node = node[ch]\n            if \"#\" in node:\n                wordCand.add(node[\"#\"])\n        return wordCand\n        \nclass Solution:\n    def minimumCost(self, target: str, words: List[str], costs: List[int]) -> int:\n        \n        n = len(target)\n        hashmap = defaultdict(list)\n        for w, c in zip(words, costs):\n            hashmap[w].append(c)\n        hashmap2 = {}\n        for w in hashmap:\n            hashmap2[w] = min(hashmap[w])\n        \n        thisTrie = Trie()\n        for w in hashmap2:\n            thisTrie.insert(w)\n        \n        dp = [float(\"inf\")] * (n+1)\n        dp[0] = 0\n        for idx in range(n + 1):\n            prefix = target[n-idx:]\n            wordCand = thisTrie.startsWith(prefix)\n            for w in wordCand:\n                dp[idx] = min(dp[idx], hashmap2[w] + dp[idx - len(w)])\n        \n        return dp[n] if dp[n] != float(\"inf\") else -1\n    \n        \"\"\"\n        @cache\n        def dfs(idx):\n            if not idx:\n                return 0\n            \n            curCost = float(\"inf\")\n            prefix = target[n-idx:]\n            wordCand = thisTrie.startsWith(prefix)\n            for w in wordCand:\n                curCost = min(curCost, hashmap2[w] + dfs(idx - len(w)))\n            return curCost\n        \n        res = dfs(n)\n        return res if res != float(\"inf\") else -1\n        \"\"\"\n\n                    ",
    "submit_ts": "1720323484",
    "subm_id": "1312376714"
}