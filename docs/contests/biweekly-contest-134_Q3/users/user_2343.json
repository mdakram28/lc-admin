{
    "username": "ce21btech11002",
    "submission": "// class Solution {\n// public:\n//     int numberOfAlternatingGroups(vector<int>& colors, int k) {\n\n//         int n=colors.size();\n//         if(n==3){\n//             int cnt=0;\n//             if((colors[0]!=colors[1] && colors[1]!=colors[2]) || (colors[0]!=colors[1] && colors[0]!=colors[2]) || (colors[2]!=colors[1] && colors[1]!=colors[2])){\n//                 cnt++;\n//             }\n//             return cnt;\n//         }\n\n//         colors.push_back(colors[0]);\n//         colors.push_back(colors[1]);\n//         n=n+2;\n\n//         int i=0;\n//         int j=0;\n//         int cnt=0;\n\n//         for(auto i:colors){\n//             cout<<i<<\" \";\n//         }\n//         cout<<n<<\" \";\n//         while(i<n && j<n){\n//             i=j;\n//             while(j<n && j-i+1<k){\n//                 // cout<<j<<\" \";\n//                 if(j<n-1 && colors[j]!=colors[j+1]){\n//                     j++;\n//                 }\n//                 else{\n//                     j++;\n//                     i=j;\n\n//                     // break;\n//                 }\n//             }\n//             while(i<n-1 && j<n-1 ){\n//                 if(colors[i+1]!=colors[i] && colors[j]!=colors[j+1]){\n//                 // cnt++;\n//                 cnt++;\n\n//                 i++;\n\n//                 j++;\n//                 }\n//                 else{\n//                     cnt++;\n//                     i++;\n//                     j++;\n//                     break;\n//                 }\n//             }\n\n//         }\n\n//         return cnt;\n//     }\n// };\n\n\n// class Solution {\n// public:\n//     int numberOfAlternatingGroups(vector<int>& colors, int k) {\n//         int n = colors.size();\n//         if (n < k) return 0;\n\n//         if(n==3){\n//             int cnt=0;\n//             if((colors[0]!=colors[1] && colors[1]!=colors[2]) || (colors[0]!=colors[1] && colors[0]!=colors[2]) || (colors[2]!=colors[1] && colors[1]!=colors[2])){\n//                 cnt++;\n//             }\n//             return cnt;\n//         }\n\n//         for (int i = 0; i < k - 1; ++i) {\n//             colors.push_back(colors[i]);\n//         }\n\n//         n = colors.size();\n//         int cnt = 0;\n\n//         for (int i = 0; i <= n - k; ++i) {\n//             bool isAlternating = true;\n//             for (int j = i; j < i + k - 1; ++j) {\n//                 if (colors[j] == colors[j + 1]) {\n//                     isAlternating = false;\n//                     break;\n//                 }\n//             }\n//             if (isAlternating) {\n//                 cnt++;\n//             }\n//         }\n\n//         return cnt;\n//     }\n// };\nclass Solution {\npublic:\n    int numberOfAlternatingGroups(vector<int>& colors, int k) {\n        int n = colors.size();\n        if(n==3){\n            int cnt=0;\n            if((colors[0]!=colors[1] && colors[1]!=colors[2]) || (colors[0]!=colors[1] && colors[0]!=colors[2]) || (colors[2]!=colors[1] && colors[1]!=colors[2])){\n                cnt++;\n            }\n            return cnt;\n        }\n        if (n < k) return 0; // If the number of elements is less than k, return 0\n\n        // Append the first k-1 elements to the end to handle the circular nature\n        for (int i = 0; i < k - 1; ++i) {\n            colors.push_back(colors[i]);\n        }\n\n        n = colors.size();\n        int cnt = 0;\n        int window_alternating = 1;\n\n        // Initialize the first window\n        for (int i = 1; i < k; ++i) {\n            if (colors[i] != colors[i - 1]) {\n                window_alternating++;\n            }\n        }\n\n        // Check if the first window is alternating\n        if (window_alternating == k) {\n            cnt++;\n        }\n\n        // Slide the window\n        for (int i = k; i < n; ++i) {\n            // Remove the influence of the element that is sliding out of the window\n            if (colors[i - k + 1] != colors[i - k]) {\n                window_alternating--;\n            }\n\n            // Add the influence of the new element entering the window\n            if (colors[i] != colors[i - 1]) {\n                window_alternating++;\n            }\n\n            // Check if the current window is alternating\n            if (window_alternating == k) {\n                cnt++;\n            }\n        }\n\n        return cnt;\n    }\n};\n",
    "submit_ts": "1720279761",
    "subm_id": "1311764038"
}