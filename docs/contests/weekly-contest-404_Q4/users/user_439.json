{
    "username": "ShenTM",
    "submission": "class Solution:\n    def minimumDiameterAfterMerge(self, edges1: List[List[int]], edges2: List[List[int]]) -> int:\n        \n        def depth_diameter(p, root, graph):\n            depth = 0\n            dia = 0\n            depth_c_max = None\n            for child in graph[root]:\n                if child == p:\n                    continue\n                depth_c, dia_c = depth_diameter(root, child, graph)\n                depth = max(depth, depth_c + 1)\n                dia = max(dia, dia_c, depth_c + 1)\n                if depth_c_max == None:\n                    depth_c_max = depth_c\n                else:\n                    dia = max(depth_c_max + depth_c + 2, dia)\n                    depth_c_max = max(depth_c_max, depth_c)\n            return depth, dia\n            \n        \n        def depth_and_diameter(edges):\n            graph = defaultdict(list)\n            count = Counter()\n            for s, e in edges:\n                graph[s].append(e)\n                graph[e].append(s)\n                count[s] += 1\n                count[e] += 1\n            waitlist = []\n            for k, v in count.items():\n                if v == 1:\n                    waitlist.append(k)\n            next_waitlist = []\n\n            last_visit = 0\n            while waitlist:\n                # print(\"levels\", waitlist)\n                for n in waitlist:\n                    last_visit = n\n                    for nei in graph[n]:\n                        count[nei] -= 1\n                        if count[nei] == 1:\n                            next_waitlist.append(nei)\n                if not next_waitlist:\n                    break\n                waitlist = next_waitlist\n                next_waitlist = []\n            # print(\"last v\", last_visit)\n            return depth_diameter(-1, last_visit, graph) \n        \n        \n        d1, dia1 = depth_and_diameter(edges1)\n        \n        d2, dia2 = depth_and_diameter(edges2)\n        # print(d1, d2, dia1, dia2)\n        return max(d1 + d2 + 1, dia1, dia2)\n        \n        \n        \n        \n        \n        ",
    "submit_ts": "1719718344",
    "subm_id": "1304414868"
}