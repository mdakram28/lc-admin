{
    "username": "arujbansal",
    "submission": "class Solution {\npublic:\n    int computeAnd(vector<vector<int>> &bit_count, int l, int r) {\n        int res = 0;\n\n        for (int bit = 0; bit < 32; bit++) {\n            if (bit_count[r][bit] - bit_count[l - 1][bit] == r - l + 1)\n                res |= (1 << bit);\n        }\n\n        return res;\n    }\n\n    int minimumDifference(vector<int>& nums, int k) {\n        int n = (int) nums.size();\n\n        vector bit_count(n + 1, vector<int>(32, 0));\n\n        for (int i = 0; i < n; i++) {\n            for (int bit = 0; bit < 32; bit++) {\n                int ex_bit = (nums[i] >> bit) & 1;\n                bit_count[i + 1][bit] = bit_count[i][bit] + ex_bit;\n            }\n        }\n\n        int best = 1000000000;\n        \n        for (int ptr = 0, i = 0; i < n; i++) {\n            while (ptr < i && computeAnd(bit_count, ptr + 1, i + 1) < k)\n                ptr++;\n \n            if (computeAnd(bit_count, ptr + 1, i + 1) >= k) {\n                best = min(best, computeAnd(bit_count, ptr + 1, i + 1) - k);\n            }\n        }\n\n        for (int ptr = 0, i = 0; i < n; i++) {\n            while (ptr < i && computeAnd(bit_count, ptr + 2, i + 1) < k)\n                ptr++;\n \n            if (computeAnd(bit_count, ptr + 1, i + 1) <= k) {\n                best = min(best, k - computeAnd(bit_count, ptr + 1, i + 1));\n                // cout << ptr << \" \" << i << \" \" << best << \"\\n\";\n            }\n        }\n\n        return best;\n    }\n};",
    "submit_ts": "1717298489",
    "subm_id": "1274780841"
}