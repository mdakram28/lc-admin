{
    "username": "yogita_saini1111",
    "submission": "class Solution {\n    public long minimumCost(int m, int n, int[] h, int[] v) {\n        PriorityQueue<Integer> pq1 = new PriorityQueue<>(Collections.reverseOrder());\n        PriorityQueue<Integer> pq2 = new PriorityQueue<>(Collections.reverseOrder());\n        \n        for (int it : h) {\n            pq1.add(it);\n        }\n        \n        for (int it : v) {\n            pq2.add(it);\n        }\n        \n        int temp1 = 1, temp2 = 1;\n        long ans = 0;\n\n        while (!pq1.isEmpty() || !pq2.isEmpty()) {\n            if (pq2.isEmpty() || (!pq1.isEmpty() && pq1.peek() >= pq2.peek())) {\n                ans += (long) pq1.poll() * temp2;\n                temp1++;\n            } else {\n                ans += (long) pq2.poll() * temp1;\n                temp2++;\n            }\n        }\n\n        return ans;\n    }\n}",
    "submit_ts": "1720925056",
    "subm_id": "1320241156"
}