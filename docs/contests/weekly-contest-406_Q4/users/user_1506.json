{
    "username": "0xayushM",
    "submission": "class Solution {\npublic:\n    struct Cut {\n        int cost;\n        bool isHorizontal;\n        Cut(int c, bool h) : cost(c), isHorizontal(h) {}\n        bool operator<(const Cut& other) const {\n            return cost < other.cost; // we want a max-heap, so we reverse the\n                                      // comparison\n        }\n    };\n    long long minimumCost(int m, int n, vector<int>& horizontalCut,\n                          vector<int>& verticalCut) {\n        priority_queue<Cut> cuts;\n\n        // Add all horizontal cuts to the heap\n        for (int cost : horizontalCut) {\n            cuts.push(Cut(cost, true));\n        }\n\n        // Add all vertical cuts to the heap\n        for (int cost : verticalCut) {\n            cuts.push(Cut(cost, false));\n        }\n\n        long long totalCost = 0;\n        long long horizontalPieces = 1, verticalPieces = 1;\n\n        // Process the cuts in the order of their cost, starting from the most\n        // expensive\n        while (!cuts.empty()) {\n            Cut cut = cuts.top();\n            cuts.pop();\n\n            if (cut.isHorizontal) {\n                totalCost += cut.cost * verticalPieces;\n                horizontalPieces++;\n            } else {\n                totalCost += cut.cost * horizontalPieces;\n                verticalPieces++;\n            }\n        }\n\n        return totalCost;\n    }\n};",
    "submit_ts": "1720925399",
    "subm_id": "1320253451"
}