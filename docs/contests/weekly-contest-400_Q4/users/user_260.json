{
    "username": "JasonL14",
    "submission": "class Solution:\n    def minimumDifference(self, nums: List[int], k: int) -> int:\n        #notice that the AND operation is strictly non-increasing\n\n        #can use sliding window??\n\n        #problem: what happens when we shift the left side of the window towards the right? how do\n        #we know which bits to reset?\n\n        #solution: count how many times each bit has been 0 in the current subarray\n        numZeroBits = collections.defaultdict(int)\n\n        def addNumZeroBits(num):\n            i = 0\n            while num:\n                numZeroBits[i] += num & 1\n\n                i += 1\n                num >>= 1\n\n        def subNumZeroBits(num):\n            i = 0\n            while num:\n                numZeroBits[i] -= num & 1\n                \n                i += 1\n                num >>= 1\n\n        def calculateCurrentNumber(windowLength):\n            curNum = 0\n            for i in range(32, -1, -1):\n                curNum <<= 1\n                if numZeroBits[i] == windowLength:\n                    curNum += 1\n\n            return curNum\n\n        res = float('inf')\n        leftIndex = 0 #the next element to remove from the leftside\n\n        for rightIndex in range(len(nums)):\n            addNumZeroBits(nums[rightIndex])\n\n            #remove from the left side, until our current num is greater than k\n            while calculateCurrentNumber(rightIndex-leftIndex+1) <= k and leftIndex < rightIndex:\n                res = min(res, abs(k - calculateCurrentNumber(rightIndex-leftIndex+1)))\n                subNumZeroBits(nums[leftIndex])\n                leftIndex += 1\n            \n            res = min(res, abs(k - calculateCurrentNumber(rightIndex-leftIndex+1)))\n\n        return res",
    "submit_ts": "1717298049",
    "subm_id": "1274765508"
}