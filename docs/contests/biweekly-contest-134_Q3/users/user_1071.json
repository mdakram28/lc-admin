{
    "username": "nu-li-xue-xi-de-xiao-g",
    "submission": "# -*- coding: utf-8 -*-\nfrom typing import List, Tuple, Optional\nfrom collections import deque, Counter\nfrom queue import PriorityQueue\nimport math\nfrom functools import lru_cache\nfrom sortedcontainers import SortedDict, SortedSet\nimport random\nimport copy\nimport sys\nsys.setrecursionlimit(9999999)\n\nMOD = 10**9 + 7\n\n\n\n\n\n\nclass Solution:\n    def numberOfAlternatingGroups(self, colors: List[int], k: int) -> int:\n        n = len(colors)\n        colors = colors + colors\n\n        one = [0] * (2*n+5)\n        zero = [0] * (2*n+5)\n\n        for i in range(2*n-1, -1, -1):\n            if colors[i] == 1:\n                one[i] = 1\n            else:\n                zero[i] = 1\n\n            one[i] += one[i+2]\n            zero[i] += zero[i+2]\n\n\n        def get_j(ii):\n            jj = ii+k\n            if jj%2 != ii%2:\n                jj += 1\n            return jj\n\n        ans = 0\n        for i in range(n):\n\n            t = (k//2) + (k&1)\n            if colors[i] == 1:\n                j = i+k\n                if j%2 != i%2:\n                    j += 1\n\n                if one[i] - one[j] != t:\n                    continue\n\n                j = i + k\n                if j % 2 != (i+1) % 2:\n                    j += 1\n\n                if zero[i+1] - zero[j] != k-t:\n                    continue\n\n            else:\n                j = i + k\n                if j % 2 != i % 2:\n                    j += 1\n                if zero[i] - zero[j] != t:\n                    continue\n\n                j = i + k\n                if j % 2 != (i+1) % 2:\n                    j += 1\n                if one[i+1] - one[j] != k-t:\n                    continue\n\n            ans += 1\n            # print(f\"i = {i}\")\n\n        return ans\n",
    "submit_ts": "1720280029",
    "subm_id": "544570245"
}