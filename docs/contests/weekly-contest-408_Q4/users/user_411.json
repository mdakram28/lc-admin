{
    "username": "KunjanGondalia",
    "submission": "class Solution {\n    public boolean canReachCorner(int X, int Y, int[][] circles) {\n        int n = circles.length;\n        int nx = X*(-1);\n        int ny = Y*(-1);\n        int[] parent = new int[n];\n        int[][] check = new int[n][4];\n        int[][] check2 = new int[n][4];\n        boolean possible = true;\n        for(int i=0;i<n;i++){\n            parent[i] = i;\n            int x1 = circles[i][0];\n            int y1 = circles[i][1];\n            int r1 = circles[i][2];\n            if(checkCollision(1,0,0,x1,y1,r1)){\n                check[i][0]++;\n            }\n            if(checkCollision(0,1,ny,x1,y1,r1)){\n                check[i][1]++;\n            }\n            if(checkCollision(1,0,nx,x1,y1,r1)){\n                check[i][2]++;\n            }\n            if(checkCollision(0,1,0,x1,y1,r1)){\n                check[i][3]++;\n            }\n        }\n        for(int i=0;i<n;i++){\n            int p1 = getParent(i,parent);\n            int x1 = circles[i][0];\n            int y1 = circles[i][1];\n            int r1 = circles[i][2];\n            for(int j=i+1;j<n;j++){\n                int x2 = circles[j][0];\n                int y2 = circles[j][1];\n                int r2 = circles[j][2];\n                if(circleCollision(x1,y1,x2,y2,r1,r2)){\n                    int p2 = getParent(j,parent);\n                    parent[p2] = p1;\n                }\n            }\n        }\n        for(int i=0;i<n;i++){\n            getParent(i,parent);\n        }\n        for(int i=0;i<n;i++){\n            int p = getParent(i,parent);\n            int cur[] = new int[4];\n            for(int j=0;j<n;j++){\n                if(getParent(j,parent)==p){\n                    cur[0] += check[j][0];\n                    cur[1] += check[j][1];\n                    cur[2] += check[j][2];\n                    cur[3] += check[j][3];\n                }\n            }\n            if(cur[0]>0 && cur[2]>0){\n                possible = false;\n            }\n            if(cur[1]>0 && cur[3]>0){\n                possible = false;\n            }\n            if(cur[0]>0 && cur[3]>0){\n                possible = false;\n            }\n            if(cur[1]>0 && cur[2]>0){\n                possible = false;\n            }\n        }\n        return possible;\n    }\n    \n    public boolean checkCollision(int a, int b, int c, \n                               int x, int y, int radius)\n    {\n        double dist = (Math.abs(a * x + b * y + c)) / \n                        Math.sqrt(a * a + b * b);\n     \n        if (radius == dist)\n            return true;\n        else if (radius > dist)\n            return true;\n        else\n            return false;\n    }\n    \n    public boolean circleCollision(int x1, int y1, int x2, int y2,\n                       int r1, int r2)\n    {\n        double d = Math.sqrt((x1 - x2) * (x1 - x2)\n                             + (y1 - y2) * (y1 - y2));\n\n        if (d <= r1 - r2) {\n            return true;\n        }\n        else if (d <= r2 - r1) {\n            return true;\n        }\n        else if (d < r1 + r2) {\n            return true;\n        }\n        else if (d == r1 + r2) {\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n    public int getParent(int p, int[] parent){\n        if(parent[p]==p) return p;\n        return parent[p] = getParent(parent[p],parent);\n    }\n}",
    "submit_ts": "1722137659",
    "subm_id": "1335770100"
}