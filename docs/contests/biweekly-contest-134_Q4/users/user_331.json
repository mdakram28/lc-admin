{
    "username": "Saket_ahlawat",
    "submission": "import math\nfrom typing import List\n\nclass SparseTable:\n    def __init__(self, array: List[int]):\n        self.n = len(array)\n        self.maxLog = int(math.log2(self.n)) + 1\n        self.table = [[0] * self.maxLog for _ in range(self.n)]\n        self.build(array)\n    \n    def combine(self, a: int, b: int) -> int:\n        return a & b\n    \n    def build(self, array: List[int]):\n        for i in range(self.n):\n            self.table[i][0] = array[i]\n        j = 1\n        while (1 << j) <= self.n:\n            i = 0\n            while (i + (1 << j) - 1) < self.n:\n                self.table[i][j] = self.combine(self.table[i][j - 1], self.table[i + (1 << (j - 1))][j - 1])\n                i += 1\n            j += 1\n    \n    def query(self, left: int, right: int) -> int:\n        log = int(math.log2(right - left + 1))\n        return self.combine(self.table[left][log], self.table[right - (1 << log) + 1][log])\n\nclass Solution:\n    def countSubarrays(self, nums: List[int], target: int) -> int:\n        st = SparseTable(nums)\n        total_subarrays = 0\n        n = len(nums)\n        \n        for start in range(n):\n            left, right = start, n - 1\n            min_index, max_index = -1, -1\n            \n            # Binary search for the minimum valid index\n            while left <= right:\n                mid = (left + right) // 2\n                if st.query(start, mid) > target:\n                    left = mid + 1\n                else:\n                    min_index = mid\n                    right = mid - 1\n            \n            if min_index == -1 or st.query(start, min_index) != target:\n                continue\n            \n            # Binary search for the maximum valid index\n            left, right = start, n - 1\n            while left <= right:\n                mid = (left + right) // 2\n                if st.query(start, mid) >= target:\n                    left = mid + 1\n                    max_index = mid\n                else:\n                    right = mid - 1\n            \n            total_subarrays += (max_index - min_index + 1)\n        \n        return total_subarrays\n",
    "submit_ts": "1720278306",
    "subm_id": "1311703405"
}