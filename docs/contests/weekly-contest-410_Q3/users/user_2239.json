{
    "username": "albertoalvarez",
    "submission": "class Solution {\n\n    int MOD = (int)1e9 + 7;\n    int[][][] dp;\n\n    public int countOfPairs(int[] nums) {\n\n        int n = nums.length;\n\n        dp = new int[n][51][51];\n        for(int i = 0; i < n; i++)\n            for(int j = 0; j <= 50; j++)\n                for(int k = 0; k <= 50; k++)\n                    dp[i][j][k] = -1;\n        \n        return countBallsNextToPeanits(0, 0, nums[0], nums);\n    }\n\n    public int countBallsNextToPeanits(int index, int prevInc, int prevDec, int[] nums) {\n\n        if(index == nums.length)\n            return 1;\n        \n        if(dp[index][prevInc][prevDec] != -1)\n            return dp[index][prevInc][prevDec];\n        \n        int res = 0;\n\n        //System.out.printf(\"%d %d %d%n\", index, prevInc, prevDec);\n\n        for(int value = prevInc; value <= nums[index]; value++) {\n\n            // choose value for next in the increasing sequence\n            // (nums[index] - value) for the decreasing sequence\n\n            int inc = value, dec = nums[index] - value;\n\n            if(inc >= prevInc && dec <= prevDec)\n                res = (res + countBallsNextToPeanits(index + 1, inc, dec, nums)) % MOD;\n            \n        }\n\n\n\n        return dp[index][prevInc][prevDec] = res;\n\n    }\n\n}",
    "submit_ts": "1723346502",
    "subm_id": "1351578990"
}