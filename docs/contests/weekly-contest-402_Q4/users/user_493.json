{
    "username": "theStark",
    "submission": "class Solution {\npublic:\n    vector<int> countOfPeaks(vector<int>& nums, vector<vector<int>>& queries) {\n        int n = nums.size();\n        vector<int> answer;\n        auto isPeak = [&](int i) -> bool {\n            if (i <= 0 || i >= n - 1) return false;\n            return nums[i] > nums[i - 1] && nums[i] > nums[i + 1];\n        };\n        vector<int> segTree(4 * n, 0);\n        function<void(int, int, int)> build = [&](int node, int start, int end) {\n            if (start == end) {\n                segTree[node] = isPeak(start) ? 1 : 0;\n            } else {\n                int mid = (start + end) / 2;\n                build(2 * node + 1, start, mid);\n                build(2 * node + 2, mid + 1, end);\n                segTree[node] = segTree[2 * node + 1] + segTree[2 * node + 2];\n            }\n        };\n        function<void(int, int, int, int)> update = [&](int node, int start, int end, int idx) {\n            if (start == end) {\n                segTree[node] = isPeak(idx) ? 1 : 0;\n            } else {\n                int mid = (start + end) / 2;\n                if (start <= idx && idx <= mid) {\n                    update(2 * node + 1, start, mid, idx);\n                } else {\n                    update(2 * node + 2, mid + 1, end, idx);\n                }\n                segTree[node] = segTree[2 * node + 1] + segTree[2 * node + 2];\n            }\n        };\n        function<int(int, int, int, int, int)> query = [&](int node, int start, int end, int l, int r) -> int {\n            if (r < start || end < l) {\n                return 0;\n            }\n            if (l <= start && end <= r) {\n                return segTree[node];\n            }\n            int mid = (start + end) / 2;\n            int left = query(2 * node + 1, start, mid, l, r);\n            int right = query(2 * node + 2, mid + 1, end, l, r);\n            return left + right;\n        };\n        build(0, 0, n - 1);\n\n        for (const auto& q : queries) {\n            if (q[0] == 1) {\n                int li = q[1], ri = q[2];\n                if (li == ri) {\n                    answer.push_back(0);\n                } else {\n                    int peaksCount = query(0, 0, n - 1, li, ri);\n                    if (isPeak(ri)) --peaksCount;\n                    if (isPeak(li)) --peaksCount;\n                    answer.push_back(peaksCount);\n                }\n            } else if (q[0] == 2) {\n                int indexi = q[1], vali = q[2];\n                nums[indexi] = vali;\n                if (indexi > 0) update(0, 0, n - 1, indexi - 1);\n                update(0, 0, n - 1, indexi);\n                if (indexi < n - 1) update(0, 0, n - 1, indexi + 1);\n            }\n        }\n\n        return answer;\n    }\n};\n",
    "submit_ts": 1718507963.0
}