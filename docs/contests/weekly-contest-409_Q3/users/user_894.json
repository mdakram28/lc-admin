{
    "username": "Lyney",
    "submission": "class SegmentTree {\npublic:\n    SegmentTree(const vector<int>& arr) {\n        n = arr.size();\n        tree.resize(4 * n);\n        lazy.resize(4 * n, 0);\n        build(arr, 0, 0, n - 1);\n    }\n\n    void updateRange(int l, int r) {\n        updateRange(0, 0, n - 1, l, r);\n    }\n\n    int getSum() {\n        return query(0, 0, n - 1, 0, n - 1);\n    }\n\nprivate:\n    vector<int> tree, lazy;\n    int n;\n\n    void build(const vector<int>& arr, int node, int start, int end) {\n        if (start == end) {\n            tree[node] = arr[start];\n        } else {\n            int mid = (start + end) / 2;\n            build(arr, 2 * node + 1, start, mid);\n            build(arr, 2 * node + 2, mid + 1, end);\n            tree[node] = tree[2 * node + 1] + tree[2 * node + 2];\n        }\n    }\n\n    void updateRange(int node, int start, int end, int l, int r) {\n        if (lazy[node] != 0) {\n            tree[node] = 0;\n            if (start != end) {\n                lazy[2 * node + 1] = 1;\n                lazy[2 * node + 2] = 1;\n            }\n            lazy[node] = 0;\n        }\n\n        if (r < start || end < l) {\n            return;\n        }\n\n        if (l <= start && end <= r) {\n            tree[node] = 0;\n            if (start != end) {\n                lazy[2 * node + 1] = 1;\n                lazy[2 * node + 2] = 1;\n            }\n            return;\n        }\n\n        int mid = (start + end) / 2;\n        updateRange(2 * node + 1, start, mid, l, r);\n        updateRange(2 * node + 2, mid + 1, end, l, r);\n        tree[node] = tree[2 * node + 1] + tree[2 * node + 2];\n    }\n\n    int query(int node, int start, int end, int l, int r) {\n        if (lazy[node] != 0) {\n            tree[node] = 0;\n            if (start != end) {\n                lazy[2 * node + 1] = 1;\n                lazy[2 * node + 2] = 1;\n            }\n            lazy[node] = 0;\n        }\n\n        if (r < start || end < l) {\n            return 0;\n        }\n\n        if (l <= start && end <= r) {\n            return tree[node];\n        }\n\n        int mid = (start + end) / 2;\n        int leftSum = query(2 * node + 1, start, mid, l, r);\n        int rightSum = query(2 * node + 2, mid + 1, end, l, r);\n        return leftSum + rightSum;\n    }\n};\nclass Solution {\npublic:\n    vector<int> shortestDistanceAfterQueries(int n, vector<vector<int>>& queries) {\n        vector<int>v(n-1,1);\n        SegmentTree segTree(v);\n        vector<int>res;\n        for(auto & querry:queries){\n            segTree.updateRange(querry[0]+1,querry[1]-1);\n            res.push_back(segTree.getSum());\n        }\n        return res;\n    }\n};",
    "submit_ts": "1722743173",
    "subm_id": "1343786048"
}