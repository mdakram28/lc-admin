{
    "username": "czjnbb",
    "submission": "class Solution:\n    def minimumDifference(self, nums: List[int], k: int) -> int:\n        \n        leng = len(nums)\n        \n        d = defaultdict(int)\n        res = 10**10\n        l = 0\n        \n        for r,n in enumerate(nums):\n            \n            cur = 0\n            res = min(res, abs(n - k))\n            \n            for i in range(31):\n                if n & (1 << i):\n                    d[i] += 1\n                    \n                if d[i] == r - l + 1:\n                    cur += 1 << i\n                    \n            res = min(res, abs(cur - k))\n            \n            while cur < k and l < r:\n                cur = 0\n                ln = nums[l]\n                l += 1\n                for i in range(31):\n                    if ln & (1 << i):\n                        d[i] -= 1\n                    \n                    if d[i] == r - l + 1:\n                        cur += 1 << i\n                        \n                res = min(res, abs(cur - k))\n            res = min(res, abs(cur - k))\n            \n                        \n        return res\n            \n            \n            \n            \n            \n        ",
    "submit_ts": 1717297161.0
}