{
    "username": "vikas_01",
    "submission": "struct segmentTree{\n\n\tint n;\n\tvector<int>segment;\n\tvector<int>a;\n\tsegmentTree(vector<int>&_a):a(_a){\n\t\tn = a.size();\n\t\tsegment.resize(4 * n , (1<<30)-1);\n\t\tcreateASegmentTree(0 , n-1 , 1);\n\t}\n\n\tint getGcd(int p , int q){\n\t\t\n        return p&q;\n\t}\n\n\tvoid createASegmentTree(int l , int r , int curr ){\n\t\tif(l == r){\n\t\t\tsegment[curr] = a[l];\n\t\t\treturn ;\n\t\t}\n\t\tint m = (l + r)/2;\n\t\tcreateASegmentTree( l , m , 2 * curr);\n\t\tcreateASegmentTree(m+1, r , 2 * curr + 1);\n\t\tsegment[curr] = (segment[2 * curr] & segment[2*curr + 1]);\n\t\n\t}\n\n\tint getRange(int r1 , int r2){\n\t\treturn getRangeSegment(0 , n-1 , 1 , r1 , r2);\n\t}\n\n\tint getRangeSegment(int l , int r , int curr , int r1 , int r2){\n\t\tif(r2<l || r < r1){\n\t\t\treturn a[r1];\n\t\t}\n\t\tif(r1<=l && r <= r2){\n\t\t\treturn segment[curr];\n\t\t}\n\n\t\tint m = (l + r)/2;\n\t\treturn getGcd(\n\t\t\tgetRangeSegment(l , m , 2 * curr , r1 , r2) , \n\t\t\tgetRangeSegment(m+1 , r , 2 * curr + 1 , r1 , r2)\n\t\t);\n\t}\n\n\n\n};\nclass Solution {\npublic:\n    int minimumDifference(vector<int>& nums, int k) {\n        segmentTree s = segmentTree(nums);\n        \n        int min_ans = INT_MAX;\n        int n = nums.size();\n        for(int l = 0;l<n;l++){\n            \n            int start = l;\n            int end = n-1;\n            \n            int ans = INT_MAX;\n            \n            int valueToSearch = k;\n            \n            \n            while(start <= end){\n                \n                int mid = (start+end)/2;\n                \n                // cout<<start<<\" \"<<end<<\" \"<<mid<<\"\\n\";\n                \n                int ansTillMid = s.getRange(l , mid);\n                \n                // cout<<ansTillMid<<\" \\n\";\n                if(ansTillMid < valueToSearch){\n                    end = mid-1;\n                }\n                else{\n                    start = mid+1;\n                }\n                \n            }\n            \n            int ans1 = s.getRange(l , start);\n            int ans2 = -1;\n            // cout<<\"an1 \"<<ans1<<\" \"<<start<<\"\\n\";\n            \n            if(start>l){\n                ans2 = s.getRange(l , start-1);\n                \n            }\n            if(min_ans > abs(k-ans1)){\n                min_ans = abs(k-ans1);\n            }\n            \n            if(ans2 != -1 && min_ans > abs(k-ans2)){\n                min_ans = abs(k-ans2);\n            }    \n        }\n        return min_ans;\n        \n        \n    }\n};",
    "submit_ts": "1717300590",
    "subm_id": "1274848839"
}