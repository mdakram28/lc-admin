{
    "username": "ABDSYM",
    "submission": "class Solution {\n    long max = Long.MIN_VALUE;\n    public long maximumValueSum(int[][] board) {\n        //boolean [] rows = new boolean[board.length];\n        boolean [] cols = new boolean[board[0].length];\n        boolean [][] maxes = new boolean [board.length][board[0].length];\n        \n        for(int i = 0; i < board.length; i++){\n            int max1 = 0, max2 = 1, max3 = 2;\n            for(int j = 0; j < board[i].length; j++){\n                if(board[i][j] > board[i][max1]\n                && j != max2 && j != max3){\n                    max1 = j;\n                }\n            }\n             for(int j = 0; j < board[i].length; j++){\n                if(board[i][j] > board[i][max2]\n                && j != max1 && j != max3){\n                    max2 = j;\n                }\n            }\n            for(int j = 0; j < board[i].length; j++){\n                if(board[i][j] > board[i][max3]\n                && j != max2 && j != max1){\n                    max3 = j;\n                }\n            } \n            maxes[i][max1] = true;\n            maxes[i][max2] = true;\n            maxes[i][max3] = true;\n        }\n\n        backtrack(board, maxes, cols, 0, 0, 0);\n        return max;\n    }\n    void backtrack(int [][] board, boolean [][] maxes ,boolean [] cols,\n        int i, int count, long res){\n        if(count == 3){\n            max = Math.max(max, res);\n            return;\n        } \n        if(i == board.length) return;\n        \n        for(int j = 0; j < board[i].length; j++){\n            if(cols[j]) continue;\n            if(!maxes[i][j]) continue;\n            //rows[i] = true;\n            cols[j] = true;\n            backtrack(board, maxes, cols, i+1, count+1, res + board[i][j]);\n            //rows[i] = false;\n            cols[j] = false;\n        }\n        backtrack(board, maxes, cols, i+1, count, res);\n\n    }\n}",
    "submit_ts": "1723909063",
    "subm_id": "1359178133"
}