{
    "username": "laughing-paredpy",
    "submission": "class Solution {\n    int[] lazy;\n    public int[] shortestDistanceAfterQueries(int n, int[][] queries) {\n        int ql = queries.length;\n        int[] tree = new int[n << 2];\n        lazy = new int[n << 2];\n        int[] res = new int[ql];\n        int idx = 0;\n        for (int[] q : queries) {\n            update(tree, 0, 0, n - 1, q[0] + 1, q[1] - 1);\n            res[idx++] = n - 1 - tree[0];\n        }\n        return res;\n    }\n    public void updown(int cur, int[] memo) {\n        if (lazy[cur] != 0) {\n            memo[cur * 2 + 1] = lazy[cur] - lazy[cur] / 2;\n            memo[cur * 2 + 2] = lazy[cur] / 2;\n            lazy[cur * 2 + 1] = lazy[cur] - lazy[cur] / 2;\n            lazy[cur * 2 + 2] = lazy[cur] / 2;\n            lazy[cur] = 0;\n        }\n    }\n    public void update(int[] memo, int cur, int s, int e, int l, int r) {\n        if (s >= l && e <= r) {\n            memo[cur] = e - s + 1;\n            lazy[cur] = e - s + 1;\n            return;\n        }\n        updown(cur, memo);\n        int mid = (s + e) >> 1;\n        if (mid >= l) {\n            update(memo, cur * 2 + 1, s, mid, l, r);\n        }\n        if (mid < r) {\n            update(memo, cur * 2 + 2, mid + 1, e, l, r);\n        }\n        memo[cur] = memo[cur * 2 + 1] + memo[cur * 2 + 2];\n    }\n    // public void update(int[] memo, int cur, int s, int e, int l, int r) {\n    //     if (s == e) {\n    //         memo[cur] = 1;\n    //         return;\n    //     }\n    //     int mid = (s + e) >> 1;\n    //     if (mid >= l) {\n    //         update(memo, cur * 2 + 1, s, mid, l, r);\n    //     }\n    //     if (mid < r) {\n    //         update(memo, cur * 2 + 2, mid + 1, e, l, r);\n    //     }\n    //     memo[cur] = memo[cur * 2 + 1] + memo[cur * 2 + 2];\n    // }\n}",
    "submit_ts": "1722742623",
    "subm_id": "552345827"
}