{
    "username": "Jack_knight",
    "submission": "class Solution {\n\n    pair<int, int> bfs(int start, const vector<vector<int>>& adj) {\n        int n = adj.size();\n        vector<int> dist(n, -1);\n        queue<int> q;\n        q.push(start);\n        dist[start] = 0;\n        int farthestNode = start;\n        int maxDist = 0;\n\n        while (!q.empty()) {\n            int node = q.front();\n            q.pop();\n\n            for (int neighbor : adj[node]) {\n                if (dist[neighbor] == -1) {\n                    dist[neighbor] = dist[node] + 1;\n                    q.push(neighbor);\n                    if (dist[neighbor] > maxDist) {\n                        maxDist = dist[neighbor];\n                        farthestNode = neighbor;\n                    }\n                }\n            }\n        }\n        return {farthestNode, maxDist};\n    }\n\n\n    int treeDiameter(const vector<vector<int>>& adj) {\n        auto [farthestNode, _] = bfs(0, adj);\n        auto [otherFarthestNode, diameter] = bfs(farthestNode, adj);\n        return diameter;\n    }\npublic:\n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n        int n = edges1.size()+1 , m = edges2.size()+1;\n        vector<vector<int>> adj1(n);\n        vector<vector<int>> adj2(m);\n\n        // Build the adjacency list for the first tree\n        for (const auto& edge : edges1) {\n            adj1[edge[0]].push_back(edge[1]);\n            adj1[edge[1]].push_back(edge[0]);\n        }\n\n        // Build the adjacency list for the second tree\n        for (const auto& edge : edges2) {\n            adj2[edge[0]].push_back(edge[1]);\n            adj2[edge[1]].push_back(edge[0]);\n        }\n\n        // Calculate the diameter of both trees\n        int diameter1 = treeDiameter(adj1);\n        int diameter2 = treeDiameter(adj2);\n\n        // Calculate the minimum possible diameter after connecting the trees\n        // The new diameter is the maximum of the two diameters plus 1 (the edge connecting the two trees)\n        int minDiameter = max({diameter1, diameter2, (diameter1 + 1) / 2 + (diameter2 + 1) / 2 + 1});\n\n        return minDiameter;\n    \n    }\n};",
    "submit_ts": "1719718244",
    "subm_id": "1304412349"
}