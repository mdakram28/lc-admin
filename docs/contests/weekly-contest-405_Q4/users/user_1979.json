{
    "username": "009_Ajeet",
    "submission": "class Solution {\npublic:\n    struct Trie {\n        Trie *links[26];\n        int cost = INT_MAX;\n        bool doesContain(char c) {\n            return links[c - 'a'] != nullptr;\n        }\n    };\n    \n    Trie* root;\n    \n    void insert(string s, int cost) {\n        Trie* node = root;\n        for (char c : s) {\n            if (!node->doesContain(c)) {\n                node->links[c - 'a'] = new Trie();\n            }\n            node = node->links[c - 'a'];\n        }\n        node->cost = min(node->cost, cost); \n    }\n    \n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        root = new Trie();\n        int n = target.length();\n        \n        for (int i = 0; i < words.size(); i++) {\n            insert(words[i], costs[i]);\n        }\n        \n        vector<int> dp(n + 1, INT_MAX);\n        dp[0] = 0; \n        \n        queue<int> q;\n        q.push(0);\n        \n        while (!q.empty()) {\n            int index = q.front();\n            q.pop();\n            \n            Trie* node = root;\n            for (int i = index; i < n; i++) {\n                if (!node->doesContain(target[i])) break;\n                node = node->links[target[i] - 'a'];\n                if (node->cost != INT_MAX) {\n                    if (dp[i + 1] > dp[index] + node->cost) {\n                        dp[i + 1] = dp[index] + node->cost;\n                        q.push(i + 1);\n                    }\n                }\n            }\n        }\n        \n        return dp[n] == INT_MAX ? -1 : dp[n];\n    }\n};",
    "submit_ts": "1720324761",
    "subm_id": "1312407538"
}