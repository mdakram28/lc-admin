{
    "username": "ConnectedPuddle",
    "submission": "public class Solution {\n    public int MinimumCost(string target, string[] words, int[] costs) {\n        Node root = new();\n        for (int i = 0; i < words.Length; i++)\n        {\n            root.Insert(words[i], costs[i]);\n        }\n        int n = target.Length;\n        int[] minCosts = new int[n+1];\n        minCosts[0] = 0;\n        for (int i = 1; i <= n; i++)\n        {\n            minCosts[i] = -1;\n        }\n        for (int i = 0; i < n; i++)\n        {\n            if (minCosts[i] == -1)\n            {\n                continue;\n            }\n            TraverseFrom(i);\n        }\n        // for (int i = 0; i <= n; i++)\n        // {\n        //     Console.WriteLine(minCosts[i]);\n        // }\n        return minCosts[n];\n        \n        void TraverseFrom(int startIndex)\n        {\n            Node node = root;\n            for (int i = startIndex; i < n; i++)\n            {\n                bool found = node.Nodes.TryGetValue(target[i], out Node next);\n                if (!found)\n                {\n                    break;\n                }\n                node = next;\n                if (node.Present)\n                {\n                    if (minCosts[i+1] == -1)\n                    {\n                        minCosts[i+1] = minCosts[startIndex] + node.Cost;\n                    }\n                    else\n                    {\n                        minCosts[i+1] = Math.Min(minCosts[i+1], minCosts[startIndex] + node.Cost);\n                    }\n                }\n            }\n        }\n    }\n    \n    public class Node\n    {\n        public bool Present;\n        public int Cost = 100_000;\n        public Dictionary<char, Node> Nodes = new();\n        \n        public void Insert(string word, int cost)\n        {\n            Node node = this;\n            foreach(char c in word)\n            {\n                bool found = node.Nodes.TryGetValue(c, out Node next);\n                if (!found)\n                {\n                    next = new();\n                    node.Nodes[c] = next;\n                }\n                node = next;\n            }\n            node.Present = true;\n            node.Cost = Math.Min(node.Cost, cost);\n        }\n    }\n}",
    "submit_ts": "1720322078",
    "subm_id": "1312340111"
}