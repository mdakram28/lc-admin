{
    "username": "Nelson84",
    "submission": "class Solution {\npublic:\n    int minFlips(vector<vector<int>>& grid) {\n        int m = grid.size();\n        int n = grid[0].size();\n        int need = 0;\n        for(int r=0; r<m/2; r++){\n            for(int c=0; c<n/2; c++){\n                int one = grid[r][c] + grid[m-1-r][c] + grid[r][n-1-c] + grid[m-1-r][n-1-c];\n                need += 4-max(one,4-one);\n            }\n        }\n        if(m%2==1 && n%2==1){\n            int c_x = m/2;\n            int c_y = n/2;\n            if(grid[c_x][c_y]==1) need++;\n        }\n        int one_cnt = 0;\n        int diff_pair = 0;\n        if(m%2==1){\n            int r = m/2;\n            int left = 0;\n            int right = n-1;\n            while(left<right){\n                if(grid[r][left]!=grid[r][right]){\n                    diff_pair++;\n                }\n                else if(grid[r][left]==1) one_cnt = (one_cnt+2)%4;\n                left++;\n                right--;\n            }\n        }\n        if(n%2==1){\n            int c = n/2;\n            int top = 0;\n            int bottom = m-1;\n            while(top<bottom){\n                if(grid[top][c]!=grid[bottom][c]) diff_pair++;\n                else if(grid[top][c]==1) one_cnt = (one_cnt+2)%4;\n                top++;\n                bottom--;\n            }\n        }\n        if(one_cnt==2 && diff_pair==0) need+=2;\n        return need+diff_pair;\n    }\n};",
    "submit_ts": "1722699689",
    "subm_id": "1343219329"
}