{
    "username": "Ninja1369",
    "submission": "class Solution {\n    static Map<Integer,Integer>map;\n    Long dp[][];\n    public long solve(int n,int inv){\n        if(inv<0) return 0l;\n        if(n==0) {\n            if(inv!=0) return 0l;\n            return 1l;\n        }\n        if(map.containsKey(n-1)){\n            if(map.get(n-1)!=inv) return 0l;\n        }\n        if(dp[n][inv]!=null) return dp[n][inv];\n        long total=0;\n        int mod=1000000007;\n        for(int i=1;i<=n;i++){\n            total+=solve(n-1,inv-(n-i));\n            total%=mod;\n        }\n        return dp[n][inv]=total;\n    }\n    public int numberOfPermutations(int n, int[][] requirements) {\n        \n        Arrays.sort(requirements,(a,b)->a[0]-b[0]);\n        int max=0;\n        for(int i=0;i<requirements.length;i++){\n            if(requirements[i][1]<max) return 0;\n            max=Math.max(max,requirements[i][1]);\n        }\n        map=new HashMap<>();\n        for(int a[]:requirements){\n            map.put(a[0],a[1]);\n        }\n        dp=new Long[301][401];\n        long total=solve(n,map.get(n-1));\n        return (int)total;\n        \n        \n    }\n}",
    "submit_ts": 1719068288.0
}