{
    "username": "hughstudy-n",
    "submission": "class Solution {\n    class SegmentWithMap {\n        HashMap<Integer, Integer> map;\n        List<Integer> distinctList;\n        int[] tree;\n        int n;\n\n        public SegmentWithMap(int[][] queries) {\n            sortBlock(queries);\n            if (distinctList != null && distinctList.size() > 0) {\n                n = distinctList.size();\n                tree = new int[n * 2];\n                buildTree();\n            }\n        }\n\n        private void sortBlock(int[][] queries) {\n            List<Integer> list = new ArrayList<>();\n            for (int[] q : queries) {\n                if (q[0] == 1) {\n                    list.add(q[1]);\n                }\n            }\n            Collections.sort(list);\n            distinctList = list;\n            map = new HashMap<>();\n            for (int i = 0; i < list.size(); ++i) {\n                map.put(list.get(i), i);\n            }\n        }\n\n        private void buildTree() {\n            for (int i = n, j = 0;  i < 2 * n; i++,  j++)\n                tree[i] = 0;\n            for (int i = n - 1; i > 0; --i)\n                tree[i] = Math.max(tree[i * 2], tree[i * 2 + 1]);\n        }\n\n        public void update(int pos, int val) {\n            pos = getOffset(pos) + n;\n            tree[pos] = val;\n            while (pos > 0) {\n                int left = pos;\n                int right = pos;\n                if (pos % 2 == 0) {\n                    right = pos + 1;\n                } else {\n                    left = pos - 1;\n                }\n                tree[pos / 2] = Math.max(tree[left], tree[right]);\n                pos /= 2;\n            }\n        }\n\n        public int maxRange(int r) {\n            int l = n;\n            r = getOffset(r) + n;\n            int sum = 0;\n            while (l <= r) {\n                if ((l % 2) == 1) {\n                    sum = Math.max(sum, tree[l]);\n                    l++;\n                }\n                if ((r % 2) == 0) {\n                    sum = Math.max(sum, tree[r]);\n                    r--;\n                }\n                l /= 2;\n                r /= 2;\n            }\n            return sum;\n        }\n\n        public int getOffset(int num) {\n            return map.get(num);\n        }\n    }\n\n    public List<Boolean> getResults(int[][] queries) {\n        SegmentWithMap data = new SegmentWithMap(queries);\n        TreeSet<Integer> blockPosSet = new TreeSet<>();\n\n        List<Boolean> res = new ArrayList<>();\n        for (int[] q : queries) {\n            if (q[0] == 1) {\n                int pos = q[1];\n                blockPosSet.add(pos);\n                Integer lower = blockPosSet.lower(pos);\n                if (lower != null) {\n                    data.update(pos, pos - lower);\n                } else {\n                    data.update(pos, pos);\n                }\n                Integer higher = blockPosSet.higher(pos);\n                if (higher != null) {\n                    data.update(higher, higher - pos);\n                }\n            } else {\n                Integer floor = blockPosSet.floor(q[1]);\n                if (floor == null) {\n                    res.add(q[1] >= q[2]);\n                } else if (q[1] - floor >= q[2]) {\n                    res.add(true);\n                } else if (data.maxRange(floor) >= q[2]) {\n                    res.add(true);\n                } else {\n                    res.add(false);\n                }\n            }\n        }\n        return res;\n    }\n}",
    "submit_ts": 1716649414.0
}