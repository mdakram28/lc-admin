{
    "username": "wweijia",
    "submission": "class SegmentTree:\n    def __init__(self, l, r):\n        self.l = l\n        self.r = r\n\n        self.peaks = None\n\n        self.left = None\n        self.right = None\n\n    @staticmethod\n    def build(nums, l, r):\n        node = SegmentTree(l, r)\n        if l < r:\n            m = (l + r) // 2\n            node.left = SegmentTree.build(nums, l, m)\n            node.right = SegmentTree.build(nums, m + 1, r)\n            node.peaks = node.left.peaks + node.right.peaks\n        else:\n            if l > 0 and l < len(nums) - 1 and nums[l - 1] < nums[l] and nums[l + 1] < nums[l]:\n                node.peaks = 1\n            else:\n                node.peaks = 0\n        return node\n\n    def update(self, nums, i):\n        if self.l == self.r == i:\n            if i > 0 and i < len(nums) - 1 and nums[i - 1] < nums[i] and nums[i + 1] < nums[i]:\n                self.peaks = 1\n            else:\n                self.peaks = 0\n        else:\n            m = (self.l + self.r) // 2\n            if i > m:\n                self.right.update(nums, i)\n            else:\n                self.left.update(nums, i)\n            self.peaks = self.left.peaks + self.right.peaks\n\n    def rangeQuery(self, l, r):\n        if l > r:\n            return 0\n        if self.l == l and self.r == r:\n            return self.peaks\n        m = (self.l + self.r) // 2\n        if l > m:\n            return self.right.rangeQuery(l, r)\n        if r <= m:\n            return self.left.rangeQuery(l, r)\n        return self.left.rangeQuery(l, m) + self.right.rangeQuery(m + 1, r)\n\nclass Solution:\n    def countOfPeaks(self, nums: List[int], queries: List[List[int]]) -> List[int]:\n        n = len(nums)\n        root = SegmentTree.build(nums, 0, n - 1)\n\n        ans = []\n        for q in queries:\n            if q[0] == 1:\n                ans.append(root.rangeQuery(q[1]+1, q[2]-1))\n            else:\n                nums[q[1]] = q[2]\n                root.update(nums, q[1])\n                if q[1] > 0:\n                    root.update(nums, q[1] - 1)\n                if q[1] < n - 1:\n                    root.update(nums, q[1] + 1)\n\n        return ans",
    "submit_ts": "1718507401",
    "subm_id": "1289650415"
}