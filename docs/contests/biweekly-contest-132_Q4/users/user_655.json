{
    "username": "ljs7619480",
    "submission": "class Solution {\npublic:\n    int maximumLength(vector<int>& nums, int k) {\n        // cout << endl;\n        int const n = nums.size();\n        unordered_map<int, int> freq;\n        vector<int> dp(n+1);\n        for(int i=1; i<=n; i++){\n            dp[i] = max(dp[i-1], ++freq[nums[i-1]]);\n        }\n        // cout << \"0: \"; for(int x: dp){ cout << x << \" \"; } cout << endl;\n        \n        for(int i=1; i<=k; i++){ // max_len with n jogs\n            unordered_map<int, int> maxi_endswith; // end_with j\n            vector<int> prev(dp);\n            for(int j=1; j<=n; j++){\n                int num = nums[j-1];\n                int skip_this = dp[j-1];\n                int take_this = max(maxi_endswith[num], prev[j-1]) + 1;\n                // cout << num << \" \" << skip_this << \" \" << take_this << endl;\n                dp[j] = max(skip_this, take_this);\n                maxi_endswith[num] = take_this;\n            }\n            // cout << i << \": \"; for(int x: dp){ cout << x << \" \"; } cout << endl;\n        }\n\n        return dp.back();\n    }\n};",
    "submit_ts": "1717862363",
    "subm_id": "1281821066"
}