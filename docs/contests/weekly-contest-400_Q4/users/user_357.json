{
    "username": "Ayanerru",
    "submission": "class Solution {\npublic:\n    class SegtreeMin {\n    public:\n        SegtreeMin(vector<int> arr) {\n            int n = arr.size();\n            size = 1;\n            while(size < n)\n                size *= 2;\n            // agg = vector<int>(size*2, INT_MAX);\n            agg = vector<int>(size*2, (1<<30)-1);\n            build(arr, 0, 0, size);\n        }\n        void build(vector<int>& arr, int nd_id, int lb, int rb) {\n            if (rb - lb == 1) { // top-down assignment\n                if (lb < (int)(arr.size())) {\n                    agg[nd_id] = arr[lb];\n                }\n                return;\n            }\n            int mid = lb + (rb-lb) / 2;\n            build(arr, nd_id*2+1, lb, mid);\n            build(arr, nd_id*2+2, mid, rb);\n            agg[nd_id] = agg[nd_id*2+1] & agg[nd_id*2+2];\n        }\n\n            // notice: range [lb, rb)\n        void update(int i, int val, int nd_id, int lb, int rb) {\n            if (rb-lb == 1) {\n                agg[nd_id] = val;\n                return;\n            }\n            int mid = lb + (rb-lb) / 2;\n            if (i < mid) {\n                update(i, val, nd_id*2+1, lb, mid);\n            } else {\n                update(i, val, nd_id*2+2, mid, rb);\n            }\n            agg[nd_id] = agg[nd_id*2+1] & agg[nd_id*2+2];\n        }\n        void update(int i, int val) {\n            update(i, val, 0, 0, size);\n        }\n        int get_min(int l, int r, int nd_id, int lb, int rb) {\n            if (lb >= r || l >= rb) // total outer\n                return INT_MAX;\n            if (lb >= l && rb <= r) // total inner\n                return agg[nd_id];\n            int mid = lb + (rb-lb) / 2;\n            int agg_l = get_min(l, r, nd_id*2+1, lb, mid);\n            int agg_r = get_min(l, r, nd_id*2+2, mid, rb);\n            return (agg_l & agg_r);\n        }\n        int get_min(int l, int r) {\n            return get_min(l, r, 0, 0, size);\n        }\n    private:\n        int size;\n        vector<int> agg;\n    };\n\n    int minimumDifference(vector<int>& nums, int k) {\n        int n = nums.size();\n        SegtreeMin* st = new SegtreeMin(nums);\n        int ans = (1<<30)-1;\n        for(int i = 0; i < n; i++) {\n            if (nums[i] <= k) {\n                // cout << \"sub me directly\" << endl;\n                ans = min(ans, abs(k - nums[i]));\n                continue;\n            }\n            \n            int lo = i+1, hi = n;\n            while(lo < hi) {\n                int mid = lo + (hi - lo) / 2;\n                auto res = st->get_min(i, mid);\n                if (res > k) {\n                    lo = mid + 1;\n                } else {\n                    hi = mid;\n                }                \n            }\n            auto res = st->get_min(i, lo);\n            // cout << \"idx = \" << i << \", tar =\" << lo << \", near num:\" << res << endl;\n            ans = min(ans, abs(res - k));\n            if (lo - 1 >= i+1) {\n                auto res = st->get_min(i, lo-1);\n                ans = min(ans, abs(res - k));\n            }\n        }\n        return ans;\n    }\n};",
    "submit_ts": 1717298762.0
}