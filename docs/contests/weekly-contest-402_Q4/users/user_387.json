{
    "username": "nemaleswang",
    "submission": "class Solution {\npublic:\n    #define MAXN 100010\n    #define inf 0x3f3f3f3f\n    typedef long long ll;\n\n    struct node{\n        ll l,r;//\u533a\u95f4[l,r]\n        ll add;//\u533a\u95f4\u7684\u5ef6\u65f6\u6807\u8bb0\n        ll sum;//\u533a\u95f4\u548c\n        ll mx; //\u533a\u95f4\u6700\u5927\u503c\n        ll mn; //\u533a\u95f4\u6700\u5c0f\u503c\n    }tree[MAXN<<2];//\u4e00\u5b9a\u8981\u5f00\u52304\u500d\u591a\u7684\u7a7a\u95f4\n\n    void pushup(ll index){\n        tree[index].sum = tree[index<<1].sum+tree[index<<1|1].sum;\n        //tree[index].mx = max(tree[index<<1].mx,tree[index<<1|1].mx);\n        //tree[index].mn = min(tree[index<<1].mn,tree[index<<1|1].mn);\n    }\n    void pushdown(ll index){\n        //\u8bf4\u660e\u8be5\u533a\u95f4\u4e4b\u524d\u66f4\u65b0\u8fc7\n        //\u8981\u60f3\u66f4\u65b0\u8be5\u533a\u95f4\u4e0b\u9762\u7684\u5b50\u533a\u95f4\uff0c\u5c31\u8981\u628a\u4e0a\u6b21\u66f4\u65b0\u8be5\u533a\u95f4\u7684\u503c\u5411\u4e0b\u66f4\u65b0\n        if(tree[index].add > 0){\n            //\u66ff\u6362\u539f\u6765\u7684\u503c\n            \n            tree[index<<1].sum = (tree[index<<1].r-tree[index<<1].l+1)*tree[index].add;\n            tree[index<<1|1].sum = (tree[index<<1|1].r-tree[index<<1|1].l+1)*tree[index].add;\n            /*\n            tree[index<<1].mx = tree[index].add;\n            tree[index<<1|1].mx = tree[index].add;\n            tree[index<<1].mn = tree[index].add;\n            tree[index<<1|1].mn = tree[index].add;\n            */\n            tree[index<<1].add = tree[index].add;\n            tree[index<<1|1].add = tree[index].add;\n            tree[index].add = 0;\n            //\u5728\u539f\u6765\u7684\u503c\u7684\u57fa\u7840\u4e0a\u52a0\u4e0aval\n            /*\n            tree[index<<1].sum += (tree[index<<1].r-tree[index<<1].l+1)*tree[index].add;\n            tree[index<<1|1].sum +=(tree[index<<1|1].r-tree[index<<1|1].l+1)*tree[index].add;\n            tree[index<<1].mx += tree[index].add;\n            tree[index<<1|1].mx += tree[index].add;\n            tree[index<<1].mn += tree[index].add;\n            tree[index<<1|1].mn += tree[index].add;\n            tree[index<<1].add += tree[index].add;\n            tree[index<<1|1].add += tree[index].add;\n            tree[index].add = 0;\n            */\n        }\n    }\n    void build(ll l,ll r,ll index){\n        tree[index].l = l;\n        tree[index].r = r;\n        tree[index].add = 0;//\u521a\u5f00\u59cb\u4e00\u5b9a\u8981\u6e050\n        if(l == r){\n            tree[index].sum = 0;\n            //tree[index].mn = tree[index].mx = tree[index].sum;\n            return ;\n        }\n        ll mid = (l+r)>>1;\n        build(l,mid,index<<1);\n        build(mid+1,r,index<<1|1);\n        pushup(index);\n    }\n    void updata(ll l,ll r,ll index,ll val){\n        if(l <= tree[index].l && r >= tree[index].r){\n            /*\n            \u628a\u539f\u6765\u7684\u503c\u66ff\u6362\u6210val,\u56e0\u4e3a\u8be5\u533a\u95f4\u6709tree[index].r-tree[index].l+1\n            \u4e2a\u6570\uff0c\u6240\u4ee5\u533a\u95f4\u548c \u4ee5\u53ca \u6700\u503c\u4e3a\uff1a\n            */\n            tree[index].sum = (tree[index].r-tree[index].l+1)*val;\n            //tree[index].mn = val;\n            //tree[index].mx = val;\n            tree[index].add = val;//\u5ef6\u65f6\u6807\u8bb0\n            /*\n            \u5728\u539f\u6765\u7684\u503c\u7684\u57fa\u7840\u4e0a\u52a0\u4e0aval,\u56e0\u4e3a\u8be5\u533a\u95f4\u6709tree[index].r-tree[index].l+1\n            \u4e2a\u6570\uff0c\u6240\u4ee5\u533a\u95f4\u548c \u4ee5\u53ca \u6700\u503c\u4e3a\uff1a\n            */\n            /*\n            tree[index].sum += (tree[index].r-tree[index].l+1)*val;\n            tree[index].mn += val;\n            tree[index].mx += val;\n            tree[index].add += val;//\u5ef6\u65f6\u6807\u8bb0\n            */\n            return ;\n        }\n        pushdown(index);\n        ll mid = (tree[index].l+tree[index].r)>>1;\n        if(l <= mid){\n            updata(l,r,index<<1,val);\n        }\n        if(r > mid){\n            updata(l,r,index<<1|1,val);\n        }\n        pushup(index);\n    }\n    ll query(ll l,ll r,ll index){\n        if(l <= tree[index].l && r >= tree[index].r){\n            return tree[index].sum;\n            //return tree[index].mx;\n            //return tree[index].mn;\n        }\n        pushdown(index);\n        ll mid = (tree[index].l+tree[index].r)>>1;\n        ll ans = 0;\n        ll Max = 0;\n        ll Min = inf;\n        if(l <= mid){\n            ans += query(l,r,index<<1);\n            //Max = max(query(l,r,index<<1),Max);\n            //Min = min(query(l,r,index<<1),Min);\n        }\n        if(r > mid){\n            ans += query(l,r,index<<1|1);\n            //Max = max(query(l,r,index<<1|1),Max);\n            //Min = min(query(l,r,index<<1|1),Min);\n        }\n        return ans;\n        //return Max;\n        //return Min;\n    }\n\n\n\n    vector<int> countOfPeaks(vector<int>& a, vector<vector<int>>& q) {\n        int n = a.size();\n        build(0,n,1);\n        updata(0,0,1,0);\n        updata(n-1,n-1,1,0);\n        for(int i = 1;i < n-1;i++){\n            if(a[i] > a[i-1] && a[i] > a[i+1]){\n                updata(i,i,1,1);\n            }else{\n                updata(i,i,1,0);\n            }\n        }\n        vector<int>ans;\n        for(auto x:q){\n            if(x[0] == 1){\n                ans.push_back(query(x[1]+1,x[2]-1,1));\n            }else{\n                int u = x[1],v = x[2];\n                a[u] = v;\n                if(u > 1){\n                    if(a[u-1] > a[u-2] && a[u-1] > a[u]) updata(u-1,u-1,1,1);\n                    else updata(u-1,u-1,1,0);\n                }\n                if(u < n-2){\n                    if(a[u+1] > a[u+2] && a[u+1] > a[u]) updata(u+1,u+1,1,1);\n                    else updata(u+1,u+1,1,0);\n                }\n                if(u != 0 && u != n-1){\n                     if(a[u] > a[u+1] && a[u] > a[u-1]) updata(u,u,1,1);\n                    else updata(u,u,1,0);\n                }\n            }\n        }\n        return ans;\n    }\n};",
    "submit_ts": 1718506597.0
}