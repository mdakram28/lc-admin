{
    "username": "Jsrv_Jsrk7",
    "submission": "#include <vector>\n#include <algorithm>\n\nclass Solution {\npublic:\n    long long minimumCost(int m, int n, std::vector<int>& horizontalCut, std::vector<int>& verticalCut) {\n        // Sort the cuts in descending order\n        std::sort(horizontalCut.begin(), horizontalCut.end(), std::greater<int>());\n        std::sort(verticalCut.begin(), verticalCut.end(), std::greater<int>());\n        \n        // Initialize indices for both cut arrays\n        int hIndex = 0, vIndex = 0;\n        \n        // Initialize counters for horizontal and vertical pieces\n        int hCount = 1, vCount = 1;\n        \n        // Initialize total cost\n        long long totalCost = 0;\n        \n        // Iterate until we have processed all cuts in both arrays\n        while (hIndex < horizontalCut.size() && vIndex < verticalCut.size()) {\n            if (horizontalCut[hIndex] >= verticalCut[vIndex]) {\n                totalCost += static_cast<long long>(horizontalCut[hIndex]) * vCount;\n                ++hCount;\n                ++hIndex;\n            } else {\n                totalCost += static_cast<long long>(verticalCut[vIndex]) * hCount;\n                ++vCount;\n                ++vIndex;\n            }\n        }\n        \n        // Process any remaining horizontal cuts\n        while (hIndex < horizontalCut.size()) {\n            totalCost += static_cast<long long>(horizontalCut[hIndex]) * vCount;\n            ++hCount;\n            ++hIndex;\n        }\n        \n        // Process any remaining vertical cuts\n        while (vIndex < verticalCut.size()) {\n            totalCost += static_cast<long long>(verticalCut[vIndex]) * hCount;\n            ++vCount;\n            ++vIndex;\n        }\n        \n        return totalCost;\n    }\n};\n",
    "submit_ts": "1720924583",
    "subm_id": "1320222503"
}