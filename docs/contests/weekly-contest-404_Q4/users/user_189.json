{
    "username": "littlemxrush",
    "submission": "class Solution:\n    def minimumDiameterAfterMerge(self, edg1: List[List[int]], edg2: List[List[int]]) -> int:\n        n, m = len(edg1)+1, len(edg2)+1\n        adj1 = [[] for _ in range(n)]\n        adj2 = [[] for _ in range(m)]\n        adj = [[] for _ in range(n+m)]\n        for u, v in edg1:\n            adj1[u].append(v)\n            adj1[v].append(u)\n            adj[u].append(v)\n            adj[v].append(u)\n        for u, v in edg2:\n            adj2[u].append(v)\n            adj2[v].append(u)\n            adj[u+n].append(v+n)\n            adj[v+n].append(u+n)\n        def find_dia(adj):\n            mxd = s = -1\n            print(\"do dfs1\")\n            def dfs1(u, fa, d):\n                nonlocal mxd, s\n                if d > mxd:\n                    mxd = d\n                    s = u\n                for v in adj[u]:\n                    if v != fa:\n                        dfs1(v, u, d+1)\n            dfs1(0, 0, 0)\n            mxd = t = -1\n            print(\"do dfs2\")\n            def dfs2(u, fa, d):\n                nonlocal mxd, t\n                if d > mxd:\n                    mxd = d\n                    t = u\n                for v in adj[u]:\n                    if v != fa:\n                        dfs2(v, u, d+1)\n            dfs2(s, s, 0)\n            path = [s]\n            Path = []\n            print(\"do dfs3\")\n            def dfs3(u, fa):\n                if u == t:\n                    nonlocal Path\n                    Path = copy.deepcopy(path)\n                    # print('!', Path)\n                    return\n                for v in adj[u]:\n                    if v != fa:\n                        path.append(v)\n                        dfs3(v, u)\n                        path.pop()\n            dfs3(s, s)\n            print(s, t)\n            # print('?', Path)\n            return Path\n        \n        path1 = find_dia(adj1)\n        path2 = find_dia(adj2)\n        node1 = [path1[len(path1)//2]]\n        node2 = [path2[len(path2)//2]]\n        try:\n            node1.append(path1[len(path1)//2+1])\n        except:\n            pass\n        try:\n            node2.append(path2[len(path2)//2+1])\n        except:\n            pass\n        \n        print(\"test connection\")\n        ans = inf\n        for u in node1:\n            for v in node2:\n                adj[u].append(v+n)\n                adj[v+n].append(u)\n                path = find_dia(adj)\n                ans = min(len(path), ans)\n                adj[u].pop()\n                adj[v+n].pop()\n        return ans-1",
    "submit_ts": "1719718058",
    "subm_id": "1304407704"
}