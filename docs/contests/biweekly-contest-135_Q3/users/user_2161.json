{
    "username": "Saketh1274",
    "submission": "from typing import List\nimport bisect\nfrom collections import defaultdict\n\nclass Solution:\n    def binary_search(self, values: List[int], target: int) -> int:\n        start = 0\n        end = len(values)\n        while start < end:\n            middle = start + (end - start) // 2\n            if values[middle] < target:\n                start = middle + 1\n            else:\n                end = middle\n        return start\n\n    def minChanges(self, array: List[int], k: int) -> int:\n        groupings = defaultdict(list)\n        candidates = []\n\n        length = len(array)\n        for i in range(length // 2):\n            first = array[i]\n            second = array[length - i - 1]\n            difference = abs(first - second)\n            max_value = max(max(first, second), max(k - first, k - second))\n\n            groupings[difference].append(max_value)\n            candidates.append(max_value)\n\n        candidates.sort()\n        min_changes_needed = length\n\n        for difference, max_list in groupings.items():\n            index = self.binary_search(candidates, difference)\n            total_operations = index * 2 + (length // 2 - index)\n\n            for max_val in max_list:\n                if max_val < difference:\n                    total_operations -= 2\n                else:\n                    total_operations -= 1\n\n            min_changes_needed = min(min_changes_needed, total_operations)\n\n        return min_changes_needed",
    "submit_ts": "1721489881",
    "subm_id": "1327466562"
}