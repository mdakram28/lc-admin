{
    "username": "abb10000y",
    "submission": "class Solution {\npublic:\n    vector<int> D1, D2, P1; // max, second max, pointer to max\n    void dfs1(int node, int p, vector<vector<int>> &edges) {\n        //cout << node << \", \" << p << \"\\n\";\n        for (int next : edges[node]) {\n            if (next == p) { continue; }\n            dfs1(next, node, edges);\n            D2[node] = max(D2[node], D1[next] + 1 + ((next & 1) == 0));\n            if (D2[node] > D1[node]) {\n                P1[node] = next;\n                swap(D1[node], D2[node]);\n            }\n        }\n    }\n    void dfs2(int node, int p, vector<vector<int>> &edges, vector<int> &ans) {\n        if (p != -1) {\n            int pDist = D1[p];\n            if (P1[p] == node) { pDist = D2[p]; }\n            pDist++;\n            if ((p & 1) == 0) { pDist++; }\n            D2[node] = max(D2[node], pDist);\n            if (D2[node] > D1[node]) {\n                P1[node] = p;\n                swap(D1[node], D2[node]);\n            }\n        }\n        ans[node] = D1[node];\n        for (int next : edges[node]) {\n            if (next == p) { continue; }\n            dfs2(next, node, edges, ans);\n        }\n    }\n    vector<int> timeTaken(vector<vector<int>>& e) {\n        int n = e.size() + 1;\n        vector<vector<int>> edges(n, vector<int>());\n        for (auto v : e) {\n            edges[v[0]].push_back(v[1]);\n            edges[v[1]].push_back(v[0]);\n        }\n        D1.assign(n, 0);\n        D2.assign(n, 0);\n        P1.assign(n, 0);\n        //cout << \"c0\\n\";\n        dfs1(0, -1, edges);\n        //cout << \"c1\\n\";\n        vector<int> ans(n, 0);\n        dfs2(0, -1, edges, ans);\n        return ans;\n    }\n};\n",
    "submit_ts": "1722699739",
    "subm_id": "1343220833"
}