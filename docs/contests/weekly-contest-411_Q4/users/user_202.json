{
    "username": "JeremyZhang96",
    "submission": "class Solution:\n    def countKConstraintSubstrings(self, s: str, k: int, queries: List[List[int]]) -> List[int]:\n        # \u53cc\u6307\u9488\n        n = len(s)\n        right = [0] * n  # right[i]: \u4f7f\u5f97s[i:j]\u6ee1\u8db3k\u7ea6\u675f\u7684\u6700\u5927\u7684j\n        cnt0 = 0  # \u5b50\u5b57\u7b26\u4e32\u4e2d0\u7684\u6570\u91cf\n        j = 0\n        for i in range(n):\n            if i > 0:\n                cnt0 -= 1 if s[i - 1] == '0' else 0\n            # \u627e\u5230\u6700\u5927\u7684j\uff0c\u4f7f\u5f97s[i:j]\u6ee1\u8db3k\u7ea6\u675f\n            while j < n:\n                # \u5c1d\u8bd5\u7ed9j\u52a01\n                temp = cnt0 + (1 if s[j] == '0' else 0)\n                if not (temp <= k or j + 1 - i - temp <= k):\n                    break\n                cnt0 = temp\n                j += 1\n            right[i] = j\n        \n        pre = list(accumulate(right, initial=0))  # right\u7684\u524d\u7f00\u548c\n        ans = []\n        for l, r in queries:\n            # sum(min(right[i], r + 1) - i for i in range(l, r + 1))\n            idx = bisect_left(right, r + 1, lo=l, hi=r)  # right[i] >= r + 1\u7684\u4e34\u754c\u70b9\n            ans.append(pre[idx] - pre[l] + (r + 1) * (r + 1 - idx) - (l + r) * (r - l + 1) // 2)\n        return ans",
    "submit_ts": "1723951012",
    "subm_id": "556402688"
}