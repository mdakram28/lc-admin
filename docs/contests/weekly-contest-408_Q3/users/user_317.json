{
    "username": "sho1004",
    "submission": "#ifdef _SM_LOCAL\n#include \"debug.hpp\" // IWYU pragma: keep\n#else\n#include <bits/stdc++.h>\n#define Debug(...)\n#endif\nusing namespace std;\n// using LL = __int128;\nusing ll = long long;\n\n\n#include <cassert>\n#include <vector>\n\n\n#include <cassert>\n#include <numeric>\n#include <type_traits>\n\nnamespace atcoder {\n\nnamespace internal {\n\n#ifndef _MSC_VER\ntemplate <class T>\nusing is_signed_int128 =\n    typename std::conditional<std::is_same<T, __int128_t>::value ||\n                                  std::is_same<T, __int128>::value,\n                              std::true_type,\n                              std::false_type>::type;\n\ntemplate <class T>\nusing is_unsigned_int128 =\n    typename std::conditional<std::is_same<T, __uint128_t>::value ||\n                                  std::is_same<T, unsigned __int128>::value,\n                              std::true_type,\n                              std::false_type>::type;\n\ntemplate <class T>\nusing make_unsigned_int128 =\n    typename std::conditional<std::is_same<T, __int128_t>::value,\n                              __uint128_t,\n                              unsigned __int128>;\n\ntemplate <class T>\nusing is_integral = typename std::conditional<std::is_integral<T>::value ||\n                                                  is_signed_int128<T>::value ||\n                                                  is_unsigned_int128<T>::value,\n                                              std::true_type,\n                                              std::false_type>::type;\n\ntemplate <class T>\nusing is_signed_int = typename std::conditional<(is_integral<T>::value &&\n                                                 std::is_signed<T>::value) ||\n                                                    is_signed_int128<T>::value,\n                                                std::true_type,\n                                                std::false_type>::type;\n\ntemplate <class T>\nusing is_unsigned_int =\n    typename std::conditional<(is_integral<T>::value &&\n                               std::is_unsigned<T>::value) ||\n                                  is_unsigned_int128<T>::value,\n                              std::true_type,\n                              std::false_type>::type;\n\ntemplate <class T>\nusing to_unsigned = typename std::conditional<\n    is_signed_int128<T>::value,\n    make_unsigned_int128<T>,\n    typename std::conditional<std::is_signed<T>::value,\n                              std::make_unsigned<T>,\n                              std::common_type<T>>::type>::type;\n\n#else\n\ntemplate <class T> using is_integral = typename std::is_integral<T>;\n\ntemplate <class T>\nusing is_signed_int =\n    typename std::conditional<is_integral<T>::value && std::is_signed<T>::value,\n                              std::true_type,\n                              std::false_type>::type;\n\ntemplate <class T>\nusing is_unsigned_int =\n    typename std::conditional<is_integral<T>::value &&\n                                  std::is_unsigned<T>::value,\n                              std::true_type,\n                              std::false_type>::type;\n\ntemplate <class T>\nusing to_unsigned = typename std::conditional<is_signed_int<T>::value,\n                                              std::make_unsigned<T>,\n                                              std::common_type<T>>::type;\n\n#endif\n\ntemplate <class T>\nusing is_signed_int_t = std::enable_if_t<is_signed_int<T>::value>;\n\ntemplate <class T>\nusing is_unsigned_int_t = std::enable_if_t<is_unsigned_int<T>::value>;\n\ntemplate <class T> using to_unsigned_t = typename to_unsigned<T>::type;\n\n}  // namespace internal\n\n}  // namespace atcoder\n\n\nnamespace atcoder {\n\ntemplate <class T> struct fenwick_tree {\n    using U = internal::to_unsigned_t<T>;\n\n  public:\n    fenwick_tree() : _n(0) {}\n    explicit fenwick_tree(int n) : _n(n), data(n) {}\n\n    void add(int p, T x) {\n        assert(0 <= p && p < _n);\n        p++;\n        while (p <= _n) {\n            data[p - 1] += U(x);\n            p += p & -p;\n        }\n    }\n\n    T sum(int l, int r) {\n        assert(0 <= l && l <= r && r <= _n);\n        return sum(r) - sum(l);\n    }\n\n  private:\n    int _n;\n    std::vector<U> data;\n\n    U sum(int r) {\n        U s = 0;\n        while (r > 0) {\n            s += data[r - 1];\n            r -= r & -r;\n        }\n        return s;\n    }\n};\n\n}  // namespace atcoder\n\nusing fenwick = atcoder::fenwick_tree<int>;\n\nclass Solution {\npublic:\n    int numberOfSubstrings(string s) {\n        int n = (int) s.size();\n        int rt = sqrt(n);\n        const int R = (rt + 10) * 2;\n        vector<int> S(n + 1), T(n + 1);\n        for (int i = 0; i < n; i++) {\n            S[i + 1] = S[i] + (s[i] == '1' ? 1 : 0);\n            T[i + 1] = T[i] + (s[i] == '0' ? 1 : 0);\n        }\n        int ans = 0;\n        vector<vector<pair<int,int>>> mp(n + 1);\n        for (int i = 0; i <= n; i++) {\n            int Sr = S[i];\n            int Tr = T[i];\n            for (int j = Tr; j >= 0; j--) {\n                int d = Tr - j;\n                d *= d;\n                if (d > Sr) break;\n                auto it = lower_bound(mp[j].begin(), mp[j].end(), make_pair(Sr - d + 1, 0));\n                if (it != mp[j].begin()) {\n                    it--;\n                    ans += it->second;\n                }\n            }\n            if (mp[T[i]].empty()) {\n                mp[T[i]].emplace_back(S[i], 1);\n            } else if (mp[T[i]].back().first < S[i]) {\n                int sum = mp[T[i]].back().second;\n                mp[T[i]].emplace_back(S[i], sum + 1);\n            } else {\n                mp[T[i]].back().second += 1;\n            }\n        }\n        return ans;\n    }\n};",
    "submit_ts": "1722138959",
    "subm_id": "1335804138"
}