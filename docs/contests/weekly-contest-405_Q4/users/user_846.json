{
    "username": "bo9xZ9iDUj",
    "submission": "struct TrieNode {\n    unordered_map<char, TrieNode*> children;\n    int minCost;\n\n    TrieNode() : minCost(INT_MAX) {}\n};\n\nclass Trie {\npublic:\n    TrieNode* root;\n\n    Trie() {\n        root = new TrieNode();\n    }\n\n    void insert(const string& word, int cost) {\n        TrieNode* node = root;\n        for (char c : word) {\n            if (!node->children.count(c)) {\n                node->children[c] = new TrieNode();\n            }\n            node = node->children[c];\n        }\n        node->minCost = min(node->minCost, cost);\n    }\n};\n\nclass Solution {\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        Trie trie;\n        int n = target.length();\n\n        // Insert all words and their costs into the trie\n        for (int i = 0; i < words.size(); ++i) {\n            trie.insert(words[i], costs[i]);\n        }\n\n        // DP array to store the minimum cost to form the substring target[0:j]\n        vector<int> dp(n + 1, INT_MAX);\n        dp[0] = 0; // No cost to form an empty string\n\n        // Process each position in the target string\n        for (int j = 0; j < n; ++j) {\n            if (dp[j] == INT_MAX) continue; // Skip if this position is not reachable\n\n            TrieNode* node = trie.root;\n            for (int k = j; k < n; ++k) {\n                if (!node->children.count(target[k])) break;\n                node = node->children[target[k]];\n                if (node->minCost != INT_MAX) {\n                    dp[k + 1] = min(dp[k + 1], dp[j] + node->minCost);\n                }\n            }\n        }\n\n        return dp[n] == INT_MAX ? -1 : dp[n];\n    }\n};",
    "submit_ts": "1720322979",
    "subm_id": "1312364208"
}