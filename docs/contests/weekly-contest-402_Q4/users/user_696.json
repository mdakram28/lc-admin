{
    "username": "lastprism",
    "submission": "namespace ll_ns\n{\n    using L = long long;\n    using std::vector;\n\n    L lowbit(L x){\n        return x & (-x);\n    }\n\n    class binary_index_tree{\n    private:\n        vector<L> tree;\n\n    public:\n        binary_index_tree(int n);\n        binary_index_tree(const vector<int> &v);\n        void add(int index, int val);\n        L get_before(int inedx);\n        L get_between(int begin, int end);\n    };\n    binary_index_tree::binary_index_tree(int n){\n        tree.clear();\n        tree.resize(n);\n    }\n\n    binary_index_tree::binary_index_tree(const vector<int> &v) : binary_index_tree(v.size()){\n        for(int i = 0; i < v.size(); i ++){\n            add(i+1, v[i]);\n        }\n\n    }\n\n    void binary_index_tree::add(int index, int val){\n        int n = tree.size();\n        while(index <= n){\n            tree[index-1] += val;\n            index += lowbit(index);\n        }\n    }\n\n    L binary_index_tree::get_before(int index){\n        int ans{};\n        while(index){\n            ans += tree[index-1];\n            index -= lowbit(index);\n        }\n        return ans;\n    }\n\n    L binary_index_tree::get_between(int begin, int end){\n        return get_before(end) - get_before(begin-1);\n    }\n};\n\nusing namespace std;\nusing namespace ll_ns;\n\nclass Solution {\npublic:\n    vector<int> countOfPeaks(vector<int>& v, vector<vector<int>>& q) {\n        int sum{};\n        int n = v.size(), m = q.size();\n        binary_index_tree bit(n+1);\n        vector<int> ans;\n        vector<int> vis(n + 1, 0);\n        for(int i = 1; i < n-1; i ++){\n            if(v[i] > v[i-1] && v[i] > v[i+1]){\n                bit.add(i+1, 1);\n                vis[i+1] = 1;\n            }\n        }\n        \n        auto check = [&](int idx){\n            if(idx == 0 || idx == n-1) return false;\n            return v[idx] > v[idx-1] && v[idx] > v[idx+1];\n        };\n        \n        for(int i = 0; i < m; i ++){\n            if(q[i][0] == 1){\n                int l = q[i][1] + 1;\n                int r=  q[i][2] + 1;\n                \n                \n                int t = bit.get_between(q[i][1]+1, q[i][2]+1);\n                \n                if(vis[l]) t--;\n                if(l!=r && vis[r]) t--;\n                \n                ans.push_back(max(t, 0));\n                \n            \n            }else{\n                int idx = q[i][1];\n                int val = q[i][2];\n                v[idx] = val;\n                \n                if(vis[idx+1] && !check(idx)){\n                    bit.add(idx+1, -1);\n                    vis[idx+1] = 0;\n                    // cout << \"#\" << endl;\n                }\n                if(!vis[idx+1] && check(idx)){\n                    bit.add(idx+1, 1);\n                    vis[idx+1] = 1;\n                    // cout << \"##\" << endl;\n                }\n                \n                if(idx - 1 >= 0){\n                    \n                    if(vis[idx - 1+1] && !check(idx - 1)){\n                        bit.add(idx - 1+1, -1);\n                        vis[idx - 1+1] = 0;\n                        // cout << \"###\" << endl;\n                    }\n                    if(!vis[idx - 1+1] && check(idx - 1)){\n                        bit.add(idx - 1+1, 1);\n                        vis[idx - 1+1] = 1;\n                        // cout << \"####\" << endl;\n                    }\n                }\n                \n                \n                if(idx + 1 < n){\n                    if(vis[idx + 1+1] && !check(idx + 1)){\n                        bit.add(idx + 1+1, -1);\n                        vis[idx + 1+1] = 0;\n                        // cout << \"#####\" << endl;\n                    }\n                    if(!vis[idx + 1+1] && check(idx + 1)){\n                        bit.add(idx + 1+1, 1);\n                        vis[idx + 1+1] = 1;\n                        // cout << \"######\" << endl;\n                    }\n                }\n            }\n        }\n        return ans;\n        \n    }\n};",
    "submit_ts": 1718507966.0
}