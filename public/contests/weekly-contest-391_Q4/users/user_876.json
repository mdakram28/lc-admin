{
    "username": "khoaisohd",
    "submission": "class Solution {\n    /**\n        1D -> sort\n        2D\n        Calculate Manhattan max dis\n            Sort by x?\n            \n        given distance d\n        [3 10] [..]\n        \n        [[3,10],[5,15],[10,2],[4,4]]\n        [3,10] [4,4] [5,15] [10,2]\n        \n        move between 2 points\n            dx change by delta 1\n            \n        max (|x1 - x2| + |y1 - y2|)\n            = x1 - x2 + y1 - y2 = (x1 + y1) - (x2 + y2)\n            = x2 - x1 + y1 - y2 = (y1 - x1) - (y2 - x2)\n                                = (x1 - y1) - (x2 - y2)\n                                =\n                                \n            max (sums diff) (diffs diff)\n        \n        1D: sort, x1 x5\n            x1 x2 x3 x4 x5\n        \n        sudo\n            sort by sum candiate is min or max\n            sort by diff candiate is min or max\n            \n            [3,10] [10 2]\n            x2 - x1 + y1 - y2\n            = y1 - x1 - (y2 -x2)\n            \n    **/\n    public int minimumDistance(int[][] points) {\n        int n = points.length;\n        \n        int minSumId = 0;\n        int maxSumId = 0;\n        int minDiffId = 0;\n        int maxDiffId = 0;\n        \n        for (int i = 1; i < n; i++) {\n            int sum = points[i][0] + points[i][1];\n            \n            if (points[minSumId][0] + points[minSumId][1] > sum) {\n                minSumId = i;\n            }\n            \n            if (points[maxSumId][0] + points[maxSumId][1] < sum) {\n                maxSumId = i;\n            }\n            \n            int diff = points[i][0] - points[i][1];\n            if (points[minDiffId][0] - points[minDiffId][1] > diff) {\n                minDiffId = i;\n            }\n            \n            if (points[maxDiffId][0] - points[maxDiffId][1] < diff) {\n                maxDiffId = i;\n            }\n        }\n        \n        return Math.min(\n            Math.min(minimumDistance(points, minSumId), minimumDistance(points, maxSumId)),\n            Math.min(minimumDistance(points, minDiffId), minimumDistance(points, maxDiffId)));\n    }\n    \n    public int minimumDistance(int[][] points, int skip) {\n        int n = points.length;\n        int minSum = Integer.MAX_VALUE;\n        int maxSum = Integer.MIN_VALUE;\n        int minDiff = Integer.MAX_VALUE;\n        int maxDiff = Integer.MIN_VALUE;\n        \n        for (int i = 0; i < n; i++) {\n            if (i == skip) continue;\n            int sum = points[i][0] + points[i][1];\n            minSum = Math.min(minSum, sum);\n            maxSum = Math.max(maxSum, sum);\n            \n            int diff = points[i][0] - points[i][1];\n            minDiff = Math.min(minDiff, diff);\n            maxDiff = Math.max(maxDiff, diff);\n        }\n        \n        \n        return Math.max(maxSum - minSum, maxDiff - minDiff);\n    }\n}"
}