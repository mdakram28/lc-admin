{
    "username": "zhiylu528",
    "submission": "class Solution {\npublic:\n    int minChanges(vector<int>& nums, int k) {\n        int len = nums.size();\n        unordered_map<int, int> m;\n        unordered_map<int, vector<int>> ms;\n        vector<int> spaces;\n        vector<int> v;\n        for (int i = 0; i < len / 2; i++) {\n            int temp = abs(nums[i] - nums[len - 1 - i]);\n            m[temp]++;\n            int t1 = k - min(nums[i], nums[len - 1 - i]);\n            int t2 = max(nums[i], nums[len - 1 - i]);\n            ms[temp].push_back(max(t1, t2));\n            spaces.push_back(max(t1, t2));\n            v.push_back(temp);\n        }\n\n        for (pair<const int, vector<int>>& p : ms) {\n            sort(p.second.begin(), p.second.end());\n        }\n\n        sort(spaces.begin(), spaces.end());\n\n        int res = INT_MAX;\n        for (pair<const int, int>& p : m) {\n            auto idx = lower_bound(spaces.begin(), spaces.end(), p.first);\n            int i = idx - spaces.begin();\n            // cout << i << \"\\n\";\n            int curr = 2 * i + (spaces.size() - i);\n            // cout << curr << \"\\n\";\n            idx = lower_bound(ms[p.first].begin(), ms[p.first].end(), p.first);\n            i = idx - ms[p.first].begin();\n            // cout << i << \"\\n\";\n            curr -= (2 * i + (ms[p.first].size() - i));\n            // cout << curr << \"\\n\";\n            res = min(res, curr);\n        }\n\n        return res;\n\n        \n    }\n};",
    "submit_ts": "1721488069",
    "subm_id": "1327410537"
}