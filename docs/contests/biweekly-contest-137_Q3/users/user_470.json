{
    "username": "jugnu gupta",
    "submission": "class Solution {\npublic:\n    long long dp[101][102][102];\n    long long helper(int row, int prev2, int prev1, vector<vector<pair<long long,int>>> &grid){\n        if(row>=grid.size()) return -1e18;\n        if(dp[row][prev2+1][prev1+1]!=-1) return dp[row][prev2+1][prev1+1];\n        \n        long long ans = helper(row+1, prev2, prev1, grid);\n        \n        for(int col=0; col<3; col++){\n            if(grid[row][col].second!=prev2 && grid[row][col].second!=prev1){\n                if(prev1!=-1 && prev2!=-1)  \n                    ans=max(ans,  grid[row][col].first);\n                else ans = max(ans, grid[row][col].first + helper(row+1, prev1, grid[row][col].second, grid));\n            }\n        }\n        \n        return dp[row][prev2+1][prev1+1]=ans;\n    }\n    long long maximumValueSum(vector<vector<int>>& board) {\n        int n=board.size();\n        int m=board[0].size();\n        vector<vector<pair<long long,int>>> grid(n, vector<pair<long long,int>> (m));\n        for(int i=0; i<n; i++){\n            for(int j=0; j<m; j++){\n                grid[i][j]=make_pair(board[i][j], j);\n            }\n        }\n        \n        for(int i=0; i<n;i++){\n            sort(grid[i].rbegin(), grid[i].rend());\n        }\n        \n        memset(dp, -1, sizeof(dp));\n        return helper(0, -1, -1, grid);\n    }\n};",
    "submit_ts": "1723907874",
    "subm_id": "1359128217"
}