{
    "username": "karnwalaks",
    "submission": "class Solution {\npublic:\n    struct TrieNode {\n        unordered_map<char, TrieNode*> children;\n        vector<pair<int, int>> wordEnds;\n    };\n\n    class Trie {\n    public:\n        TrieNode* root;\n        Trie() { root = new TrieNode(); }\n\n        void insert(string& word, int index, int cost) {\n            TrieNode* currentNode = root;\n            for (char ch : word) {\n                if (!currentNode->children.count(ch))\n                    currentNode->children[ch] = new TrieNode();\n                currentNode = currentNode->children[ch];\n            }\n            currentNode->wordEnds.push_back({index, cost});\n        }\n    };\n\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int targetLength = target.size();\n        vector<int> dp(targetLength + 1, INT_MAX);\n        dp[0] = 0;\n\n        Trie trie;\n        for (int i = 0; i < words.size(); ++i) {\n            trie.insert(words[i], i, costs[i]);\n        }\n\n        for (int i = 0; i < targetLength; ++i) {\n            if (dp[i] == INT_MAX) continue;\n\n            TrieNode* currentNode = trie.root;\n            for (int j = i; j < targetLength; ++j) {\n                if (!currentNode->children.count(target[j])) break;\n                currentNode = currentNode->children[target[j]];\n                for (auto& pair : currentNode->wordEnds) {\n                    int wordIndex = pair.first;\n                    int wordCost = pair.second;\n                    int wordLength = words[wordIndex].size();\n                    if (i + wordLength <= targetLength) {\n                        dp[i + wordLength] = min(dp[i + wordLength], dp[i] + wordCost);\n                    }\n                }\n            }\n        }\n\n        return dp[targetLength] == INT_MAX ? -1 : dp[targetLength];\n    }\n};\n",
    "submit_ts": "1720321611",
    "subm_id": "1312327500"
}