{
    "username": "iamch15542",
    "submission": "class SegTree {\npublic:\n    vector<int> seg;\n\n    SegTree(int n) {\n        seg = vector<int>(4 * n);\n    }\n    void print() {\n        for (int i = 0; i < seg.size(); i++) {\n            cout << seg[i] << ' ';\n        }\n        cout << '\\n';\n    }\n\n    void build(vector<int>& nums, int l, int r, int pos) {\n        if (l == r) {\n            seg[pos] = nums[l];\n            return;\n        }\n\n        int mid = (l + r) / 2;\n        build(nums, l, mid, pos * 2);\n        build(nums, mid + 1, r, pos * 2 + 1);\n        seg[pos] = seg[pos * 2] & seg[pos * 2 + 1];\n    }\n\n    int query(int l, int r, int L, int R, int pos) {\n        if (r < L || R < l) {\n            return INT_MAX;\n        }\n        if (l == L && R == r) {\n            return seg[pos];\n        }\n        int mid = L + (R - L) / 2;\n        int left = query(l, min(r, mid), L, mid, 2 * pos);\n        int right = query(max(mid + 1, l), r, mid + 1, R, 2 * pos + 1);\n\n        return left & right;\n    }\n};\n\n\nclass Solution {\npublic:\n    int minimumDifference(vector<int>& nums, int k) {\n        int n = nums.size();\n        SegTree Tree(n);\n        Tree.build(nums, 0, n - 1, 1);\n        int res = INT_MAX;\n        for (int i = 0; i < n; i++) {\n            int l = i - 1, r = n - 1;\n            while (l + 1 < r) {\n                int mid = l + (r - l) / 2;\n                if (Tree.query(i, mid, 0, n - 1, 1) >= k) {\n                    l = mid;\n                } else {\n                    r = mid;\n                }\n            }\n            if (l != i - 1) {\n                res = min(res, abs(Tree.query(i, l, 0, n - 1, 1) - k));\n            }\n            res = min(res, abs(Tree.query(i, r, 0, n - 1, 1) - k));\n        }\n        return res;\n    }\n};\n\n/*\n[1,2,4,5]\n3\n[1,2,1,2]\n2\n[1]\n10\n[7,8]\n7\n\n\n1\n0\n9\n0\n*/",
    "submit_ts": 1717299955.0
}