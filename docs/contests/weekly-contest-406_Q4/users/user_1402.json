{
    "username": "Divyanshnext",
    "submission": "class Solution {\n    public long minimumCost(int m, int n, int[] horizontalCut, int[] verticalCut) {\n            PriorityQueue<Integer> hCuts = new PriorityQueue<>(Collections.reverseOrder());\n        Arrays.sort(horizontalCut);\n        Arrays.sort(verticalCut);\n        \n        int i = horizontalCut.length - 1; // Index for horizontal cuts\n        int j = verticalCut.length - 1; // Index for vertical cuts\n        \n        long totalCost = 0;\n        int hPieces = 1; // Initially we have 1 vertical piece\n        int vPieces = 1; // Initially we have 1 horizontal piece\n\n        // Process cuts until we have considered all cuts\n        while (i >= 0 || j >= 0) {\n            if (i >= 0 && (j < 0 || horizontalCut[i] >= verticalCut[j])) {\n                // Perform horizontal cut\n                totalCost += horizontalCut[i--] * vPieces;\n                hPieces++;\n            } else {\n                // Perform vertical cut\n                totalCost += verticalCut[j--] * hPieces;\n                vPieces++;\n            }\n        }\n\n        return totalCost;\n    }\n}",
    "submit_ts": "1720926232",
    "subm_id": "1320279933"
}