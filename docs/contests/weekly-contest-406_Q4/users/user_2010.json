{
    "username": "KaiNguyenVN",
    "submission": "class Solution {\npublic:\n    long long minimumCost(int m, int n, std::vector<int>& horizontalCut, std::vector<int>& verticalCut) {\n        \n        vector<pair<int, char>> cuts;\n        for (int cost : horizontalCut) {\n            cuts.emplace_back(cost, 'h');\n        }\n        for (int cost : verticalCut) {\n            cuts.emplace_back(cost, 'v');\n        }\n\n        sort(cuts.begin(), cuts.end());\n        reverse(cuts.begin(), cuts.end());\n        int horizontal_pieces = 1;\n        int vertical_pieces = 1;\n\n        long long total_cost = 0;\n\n        for (auto& cut : cuts) {\n            int cost = cut.first;\n            char direction = cut.second;\n            if (direction == 'h') {\n                total_cost += 1LL * cost * 1LL * vertical_pieces;\n                horizontal_pieces += 1;\n            } else {\n                total_cost += 1LL * cost * 1LL * horizontal_pieces;\n                vertical_pieces += 1;\n            }\n        }\n\n        return total_cost;\n    }\n};",
    "submit_ts": "1720926581",
    "subm_id": "1320290396"
}