{
    "username": "Cookie_byte",
    "submission": "#include <vector>\n#include <algorithm>\n#include <functional>\n\nclass Solution {\npublic:\n   \n    int findFarthestNode(const std::vector<std::vector<int>>& graph, int start, int& farthest) {\n        int numNodes = graph.size();\n        std::vector<int> distances(numNodes, -1);\n        std::function<void(int, int)> dfsVisit = [&](int node, int distance) {\n            distances[node] = distance;\n            if (distance > distances[farthest]) {\n                farthest = node;\n            }\n            for (int neighbor : graph[node]) {\n                if (distances[neighbor] == -1) {\n                    dfsVisit(neighbor, distance + 1);\n                }\n            }\n        };\n        farthest = start;\n        dfsVisit(start, 0);\n        return distances[farthest];\n    }\n\n    int minimumDiameterAfterMerge(std::vector<std::vector<int>>& edges1, std::vector<std::vector<int>>& edges2) {\n        int n = edges1.size() + 1;\n        int m = edges2.size() + 1;\n        \n        std::vector<std::vector<int>> graph1(n);\n        std::vector<std::vector<int>> graph2(m);\n         // Build adjacency list for the second graph\n        for (const auto& edge : edges2) {\n            graph2[edge[0]].push_back(edge[1]);\n            graph2[edge[1]].push_back(edge[0]);\n        }\n        // Build adjacency list for the first graph\n        for (const auto& edge : edges1) {\n            graph1[edge[0]].push_back(edge[1]);\n            graph1[edge[1]].push_back(edge[0]);\n        }\n        \n       \n\n        // Find diameters of both graphs\n        int farthest1 = 0;\n        findFarthestNode(graph1, 0, farthest1);\n        int diameter1 = findFarthestNode(graph1, farthest1, farthest1);\n\n        int farthest2 = 0;\n        findFarthestNode(graph2, 0, farthest2);\n        int diameter2 = findFarthestNode(graph2, farthest2, farthest2);\n        \n        // Calculate minimum diameter after merging the two graphs\n        int minD = std::max(diameter1, diameter2);\n        int half1 = (diameter1 + 1) >>1;\n        int half2 = (diameter2 + 1) >>1;\n        minD = std::max(minD, half1 + half2 + 1);\n        \n        return minD;\n    }\n};\n",
    "submit_ts": "1719717271",
    "subm_id": "1304387114"
}