{
    "username": "alexlin87",
    "submission": "import java.util.*;\n\nclass Solution {\n    public List<Integer> countOfPeaks(int[] a, int[][] queries) {\n        List<Integer> ans = new ArrayList<>();\n        int n = a.length;\n        FenwickTree fenwickTree = new FenwickTree(n + 5);\n        for(int i = 1; i < n - 1; i++) {\n            if(a[i] > a[i - 1] && a[i] > a[i + 1]) {\n                fenwickTree.adjust(i + 1, 1);\n            }\n        }\n        for(int[] q : queries) {\n            if(q[0] == 1) {\n                int l = q[1] + 1, r = q[2] + 1;\n                ans.add(fenwickTree.rangeSumQuery(l + 1, r - 1));\n            }\n            else {\n                int i = q[1], v = q[2];\n                int diff = i > 0 && i < n - 1 && a[i] > a[i - 1] && a[i] > a[i + 1] ? -1 : 0;\n                diff += i > 0 && i < n - 1 && v > a[i - 1] && v > a[i + 1] ? 1 : 0;\n                fenwickTree.adjust(i + 1, diff);\n                if(i - 1 > 0) {\n                    diff = a[i - 1] > a[i - 2] && a[i - 1] > a[i] ? -1 : 0;\n                    diff += a[i - 1] > a[i - 2] && a[i - 1] > v ? 1 : 0;\n                    fenwickTree.adjust(i, diff);\n                }\n                if(i <= n - 3) {\n                    diff = a[i + 1] > a[i] && a[i + 1] > a[i + 2] ? -1 : 0;\n                    diff += a[i + 1] > v && a[i + 1] > a[i + 2] ? 1 : 0;\n                    fenwickTree.adjust(i + 2, diff);\n                }\n                a[i] = v;\n            }\n        }\n        return ans;\n    }\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        int[] a = new int[]{3,1,4,2,5};\n        int[][] q = new int[][]{{2,3,4},{1,0,4}};\n        solution.countOfPeaks(a,q);\n    }\n}\nclass FenwickTree {\n    private int[] ft;\n\n    /*\n        n is the largest integer value among all the input integers\n     */\n    public FenwickTree(int n) {\n        ft = new int[n];\n    }\n\n    /*\n        query the sum in range [l, r]\n     */\n    public int rangeSumQuery(int l, int r) {\n        if(l > r) return 0;\n        return rangeSumQuery(r) - (l == 1 ? 0 : rangeSumQuery(l - 1));\n    }\n\n    /*\n        query the sum in range[1, r]\n     */\n    private int rangeSumQuery(int r) {\n        int sum = 0;\n        for(; r > 0; r -= leastSignificantOne(r)) {\n            sum += ft[r];\n        }\n        return sum;\n    }\n\n    /*\n        adjust the value of index k by diff\n     */\n    public void adjust(int k, int diff) {\n        for(; k < ft.length; k += leastSignificantOne(k)) {\n            ft[k] += diff;\n        }\n    }\n\n    private int leastSignificantOne(int i) {\n        return i & (-i);\n    }\n}",
    "submit_ts": 1718507415.0
}