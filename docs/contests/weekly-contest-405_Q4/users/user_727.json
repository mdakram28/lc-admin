{
    "username": "Ashrith16",
    "submission": "struct Node {\n    Node* links[26];\n    vector<pair<int, int>> wordEndings; \n    bool flag = false;\n\n    bool containsKey(char ch) {\n        return (links[ch - 'a'] != nullptr);\n    }\n\n    void put(char ch, Node* node) {\n        links[ch - 'a'] = node;\n    }\n\n    Node* get(char ch) {\n        return links[ch - 'a'];\n    }\n\n    void setEnd() {\n        flag = true;\n    }\n\n    bool isEnd() {\n        return flag;\n    }\n};\n\nclass Trie {\nprivate:\n    Node* root;\n\npublic:\n    Trie() {\n        root = new Node();\n    }\n\n    void insertWord(const string& word, int index, int cost) {\n        Node* node = root;\n        for (char ch : word) {\n            if (!node->containsKey(ch)) {\n                node->put(ch, new Node());\n            }\n            node = node->get(ch);\n        }\n        node->wordEndings.push_back({index, cost});\n        node->setEnd();\n    }\n\n    Node* getRoot() {\n        return root;\n    }\n};\n\nclass Solution {\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int targetLen = target.size();\n        vector<int> dp(targetLen + 1, INT_MAX); \n        dp[0] = 0; \n\n        Trie trie;\n        for (int i = 0; i < words.size(); ++i) {\n            trie.insertWord(words[i], i, costs[i]);\n        }\n\n        for (int i = 0; i < targetLen; ++i) {\n            if (dp[i] == INT_MAX) {\n                continue;\n            }\n\n            Node* currentNode = trie.getRoot();\n            for (int j = i; j < targetLen; ++j) {\n                if (!currentNode->containsKey(target[j])) {\n                    break; \n                }\n                currentNode = currentNode->get(target[j]);\n                for (const auto& p : currentNode->wordEndings) {\n                    int wordLength = words[p.first].size();\n                    if (i + wordLength <= targetLen) {\n                        dp[i + wordLength] = min(dp[i + wordLength], dp[i] + p.second);\n                    }\n                }\n            }\n        }\n\n        return dp[targetLen] == INT_MAX ? -1 : dp[targetLen];\n    }\n};\n",
    "submit_ts": "1720322762",
    "subm_id": "1312358470"
}