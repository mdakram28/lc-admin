{
    "username": "lokeshrajput5473",
    "submission": "class Solution {\npublic:\n    // long nCr(int n, int r)\n    // {\n    //     if(r>n) return 0;\n    //     return fact(n) / (fact(r) * fact(n - r));\n    // }\n\n    // // Returns factorial of n\n    // long fact(int n)\n    // {\n    //     if(n==0)\n    //     return 1;\n    //     long long res = 1;\n    //     for (int i = 2; i <= n; i++)\n    //         res = res * i;\n    //     return res;\n    // }\n    int dp[33][33][2];\n    int rec(int incr, int red, int n, int r, int turn) {\n        // cout << n << \" \" << r << endl;\n        if(incr == n && red == r) {\n            return 1;\n        }\n        if(incr > n) return 0;\n        if(red > r) return 0;\n        if(dp[incr][red][turn]!=-1) return dp[incr][red][turn];\n\n        int ans = 0;\n        if(turn == 1) ans += rec(incr, red+1, n, r, 0);\n        ans += rec(incr+1, red, n, r, 1);\n\n        return dp[incr][red][turn] = ans;\n    }\n\n    int solve(int k) {\n        int value = k-1;\n        int n = log2(value) + 1;\n        // cout << (1<<(n+1)) << endl;\n        // cout << n << endl;\n        int diff = (1<<n) - k;\n        // cout << diff << endl;\n        // cout << n << endl;\n        memset(dp, -1, sizeof(dp));\n        // if(diff > n) return 0;\n        return rec(0, 0, n, diff, 1);\n    }\n\n    int waysToReachStair(int k) {\n\n        if(k>=10) {\n            return solve(k);\n        }\n\n        queue<vector<long long>>q;\n\n        // position, lastTurn, jumps\n        q.push({1, 1, 0});\n        int ans = 0;\n\n        while(q.size()) {\n            vector<long long> top = q.front();\n            q.pop();\n            if(top[0] == k) ans++;\n            if(top[0] > (k+1)) continue;\n\n            q.push({top[0] + (1ll<<top[2]), 1, top[2]+1});\n            if(top[1] == 1) q.push({top[0]-1,0,top[2]});\n        }\n        return ans;\n    }\n};",
    "submit_ts": "1716089905",
    "subm_id": "1261854279"
}