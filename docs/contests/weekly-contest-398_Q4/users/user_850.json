{
    "username": "dhruv23899",
    "submission": "class Solution {\npublic:\n    int k;\n    map<vector<int>, int>m;\n    long long dfs(long long index, int last_jump_down, int jump){\n        if(jump>=32||index>k+1)\n            return 0;\n        \n        vector<int>v;\n        v.push_back(index); v.push_back(last_jump_down); v.push_back(jump);\n        if(m.find(v)!=m.end())\n            return m[v];\n        \n        long long ans=0;\n        if(index==k){\n            ans++;\n        }\n        \n        if(last_jump_down==0&&index!=0){\n            ans+=dfs(index-1, 1, jump);\n        }\n        ans+=dfs(index+pow(2, jump), 0, jump+1);\n        \n        m[v]=ans;\n        return ans;\n    }\n    int waysToReachStair(int k1) {\n        k=k1;\n        m.clear();\n        if(k==0){\n            return 2;\n        }\n        else if(k==1)\n            return 4;\n        return dfs(1, 0, 0);\n    }\n};",
    "submit_ts": "1716089122",
    "subm_id": "1261833667"
}