{
    "username": "tea9296",
    "submission": "# class UnionFind:\n#     def __init__(self, n):\n#         self.parent = list(range(n))\n        \n#         for i in range(n-1):\n#             self.parent[i] = i+1\n\n#     def find(self, x):\n#         if self.parent[x] != x:\n#             self.parent[x] = self.find(self.parent[x])\n#         return self.parent[x]\n\n#     def union(self, x, y):\n#         # root_x = self.find(x)\n#         # root_y = self.find(y)\n#         # if root_x != root_y:\n#         #     if root_x < root_y:\n#         #         self.parent[root_x] = root_y\n#         #     elif root_x > root_y:\n#         #         self.parent[root_y] = root_x\n#         #     else:\n#         #         rm = min(root_y,root_x)\n#         #         rx = max(root_y,root_x)\n#         #         self.parent[rm] = rx\n#         #         #self.rank[root_x] += 1\n\n#         if self.parent[x] < y:\n#             self.parent[x] = y\n\nfrom sortedcontainers import SortedList\nclass Solution:\n    def shortestDistanceAfterQueries(self, n: int, queries: List[List[int]]) -> List[int]:\n        uf = SortedList([k for k in range(n)])\n        ans = []\n        minus = 0\n        for u, v in queries:\n            \n            \n            unit = 0\n            idx_l = uf.bisect_left(u)\n            idx_r = uf.bisect_left(v)\n            if idx_r - idx_l -1 > 0:\n                minus += idx_r - idx_l -1 \n            discard_v = []\n            for j in range(idx_l+1, idx_r):\n                discard_v.append(uf[j])\n\n            for v in discard_v:\n                uf.discard(v)\n\n            ans.append(n-1-minus)\n        return ans\n\n\n",
    "submit_ts": "1722742986",
    "subm_id": "1343781694"
}