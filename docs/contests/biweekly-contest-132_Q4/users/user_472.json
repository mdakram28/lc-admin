{
    "username": "20A31A05G8",
    "submission": "class Solution {\n    fun maximumLength(nums: IntArray, k: Int): Int {\n        val nSize = nums.size\n        val memo = Array(nSize) { IntArray(k + 1) { 1 } }\n        var maxLength = 1\n        val lists = IntArray(k + 1) { -1 }\n        val mps = Array(k + 1) { mutableMapOf<Int, Int>() }\n            //println(maxLength)\n\n        for (i in nums.indices) {\n            for (j in 0..k) {\n                for (l in 0 until j) {\n                    memo[i][j] = maxOf(memo[i][j], 1 + lists[l])\n                }\n                if (mps[j].containsKey(nums[i])) {\n                    memo[i][j] = maxOf(memo[i][j], 1 + mps[j][nums[i]]!!)\n                }\n                maxLength = maxOf(maxLength, memo[i][j])\n                            //println(maxLength)\n\n            }\n            //println(maxLength)\n            for (j in 0..k) {\n                lists[j] = maxOf(lists[j], memo[i][j])\n                mps[j][nums[i]] = maxOf(mps[j].getOrDefault(nums[i], 0), memo[i][j])\n            }\n        }\n        return maxLength\n    }\n}\n",
    "submit_ts": 1717862030.0
}