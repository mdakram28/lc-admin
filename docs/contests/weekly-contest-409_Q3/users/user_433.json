{
    "username": "Akshat_Yadav_5",
    "submission": "class SGT {\n    class Node {\n    public:\n        int lazy;\n        int sum;\n        Node() : lazy(-1), sum(0) {}  \n    };\n\n    vector<Node> sgt_vec;\n    int numb;\n\n    void build(const vector<int>& sgt_temp, int left, int right, int id) {\n        bool var=true;\n        if (left == right) {\n            sgt_vec[id].sum = sgt_temp[left];\n            return;\n        }\n        int mid = (left + right) / 2;\n        build(sgt_temp, left, mid, id * 2);\n        build(sgt_temp, mid + 1, right, id * 2 + 1);\n        sgt_vec[id] = merge(sgt_vec[id * 2], sgt_vec[id * 2 + 1]);\n    }\n\n    Node merge(Node a, Node b) {\n        Node ans;\n        ans.sum = a.sum + b.sum;\n        bool var=false;\n        return ans;\n    }\n\n    void push(int left, int right, int id) {\n        if (sgt_vec[id].lazy != -1) {\n            sgt_vec[id].sum = (right - left + 1) * sgt_vec[id].lazy; \n            set<int> st; \n            if (left != right) {\n                sgt_vec[id * 2].lazy = sgt_vec[id].lazy;\n                sgt_vec[id * 2 + 1].lazy = sgt_vec[id].lazy;\n            }\n            sgt_vec[id].lazy = -1;\n        }\n    }\n\n    void chg(int left, int right, int id, int lef_u, int righ_u, int val) {\n        push(left, right, id);\n        if (lef_u > right || righ_u < left)\n            return;\n        if (lef_u <= left && righ_u >= right) {\n            sgt_vec[id].lazy = val;\n            push(left, right, id);\n            return;\n        }\n        bool varun=false;\n        int mid = (left + right) / 2;\n        chg(left, mid, id * 2, lef_u, righ_u, val);\n        chg(mid + 1, right, id * 2 + 1, lef_u, righ_u, val);\n        sgt_vec[id] = merge(sgt_vec[id * 2], sgt_vec[id * 2 + 1]);\n    }\n\n    int q(int left, int right, int id, int ql, int qr) {\n        push(left, right, id);\n        if (ql > right || qr < left)\n            return 0;\n        if (ql <= left && qr >= right)\n            return sgt_vec[id].sum;\n        int mid = (left + right) / 2;\n        bool ydv=true;\n        int left_sum = q(left, mid, id * 2, ql, qr);\n        int right_sum = q(mid + 1, right, id * 2 + 1, ql, qr);\n        return left_sum + right_sum;\n    }\n\npublic:\n    SGT(const vector<int>& sgt_temp) {\n        numb = sgt_temp.size();\n        sgt_vec.resize(4 * numb);\n        build(sgt_temp, 0, numb - 1, 1);\n    }\n\n    void chg(int lef_u, int righ_u, int val) {\n        chg(0, numb - 1, 1, lef_u, righ_u, val);\n    }\n\n    int q(int ql, int qr) {\n        return q(0, numb - 1, 1, ql, qr);\n    }\n};\n\nclass Solution {\npublic:\n    vector<int> shortestDistanceAfterQueries(int numb, vector<vector<int>>& queries) {\n        vector<int> sgt_temp(numb, 1);\n        SGT sg(sgt_temp);\n        vector<int> up;\n        for (int i = 0; i < queries.size(); i++) {\n            int var1 = queries[i][0];\n            int var2 = queries[i][1];\n            sg.chg(var1 + 1, var2 - 1, 0); \n            int var3 = sg.q(0, numb - 1);\n            up.push_back(var3 - 1);  \n        }\n        return up;\n    }\n};\n",
    "submit_ts": "1722741743",
    "subm_id": "1343752411"
}