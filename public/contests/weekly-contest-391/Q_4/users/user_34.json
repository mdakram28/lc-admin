{
    "username": "asrivastava05",
    "submission": "class Solution {\npublic:\n    int brute(vector<vector<int>> &p, int skip){\n        int n = p.size();\n        vector<int> sum;\n        vector<int> sub;\n        for(int i = 0; i < n;i++){\n            if(i == skip) continue;\n            sum.push_back(p[i][0] + p[i][1]);\n            sub.push_back(p[i][0] - p[i][1]);\n        }\n        sort(sum.begin(), sum.end());\n        sort(sub.begin(), sub.end());\n        return max(sum.back() - sum.front(), sub.back() - sub.front());\n    }\n    int minimumDistance(vector<vector<int>>& p) {\n        // can remove 1 such that minimize the maximum\n        int n = p.size();\n        vector<pair<int, int>> sum;\n        vector<pair<int, int>> sub;\n        for(int i = 0; i < n;i++){\n            sum.push_back({p[i][0] + p[i][1], i});\n            sub.push_back({p[i][0] - p[i][1], i});\n        }\n        sort(sum.begin(), sum.end());\n        sort(sub.begin(), sub.end());\n        int ans = 1e9;\n        ans = min(ans, brute(p, sum.front().second));\n        ans = min(ans, brute(p, sum.back().second));\n        ans = min(ans, brute(p, sub.front().second));\n        ans = min(ans, brute(p, sub.back().second));\n        return ans;\n        \n    }\n};"
}