{
    "username": "Yyyyyfei",
    "submission": "class Solution:\n    def minChanges(self, nums: List[int], k: int) -> int:\n        n = len(nums)\n        possible_X = {}\n        count_diff_larger_than_X = [0] * (k+1)\n        min_changes = 1e6\n\n        for i in range(n // 2):\n            left, right = nums[i], nums[n - i - 1]\n\n            gap = abs(left - right)\n\n            possible_X[gap] = possible_X.get(gap, 0) + 1\n\n            max_one_replacement = max(k-min(left,right), max(left, right)-0)\n\n            if max_one_replacement + 1 <= k:\n                count_diff_larger_than_X[max_one_replacement + 1] += 1\n\n        for j in range(1, k + 1):\n            count_diff_larger_than_X[j] += count_diff_larger_than_X[j - 1]\n\n        for x in possible_X:\n            needed = (n //2 - possible_X[x]) + count_diff_larger_than_X[x]\n            \n            if needed < min_changes:\n                min_changes = needed\n\n        if min_changes == 1e6:\n            return n // 2\n        else:\n            return min_changes\n            ",
    "submit_ts": "1721490134",
    "subm_id": "1327474017"
}