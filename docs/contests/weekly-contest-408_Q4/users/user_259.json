{
    "username": "Abhiiscoding",
    "submission": "class Solution {\npublic:\n     bool bfs(const vector<vector<int>>& graph, int start, int target1, int target2, int totalNodes) {\n        queue<int> q;\n        vector<int> visited(totalNodes, 0);\n        q.push(start);\n        visited[start] = 1;\n\n        while (!q.empty()) {\n            int node = q.front();\n            q.pop();\n\n            for (int neighbor : graph[node]) {\n                if (!visited[neighbor]) {\n                    visited[neighbor] = 1;\n                    q.push(neighbor);\n                    if (neighbor == target1 || neighbor == target2) {\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;\n    }\n\n    bool canReachCorner(int X, int Y, vector<vector<int>>& circles) {\n        int numCircles = circles.size();\n        vector<vector<int>> graph(numCircles + 4); \n        for (int i = 0; i < numCircles; ++i) {\n            int cx = circles[i][0], cy = circles[i][1], r = circles[i][2];\n\n            if (cx <= r) {\n                graph[numCircles].push_back(i);    \n                graph[i].push_back(numCircles);\n            }\n            if (X - cx <= r) {\n                graph[numCircles + 2].push_back(i); \n                graph[i].push_back(numCircles + 2);\n            }\n            if (cy <= r) {\n                graph[numCircles + 1].push_back(i); \n                graph[i].push_back(numCircles + 1);\n            }\n            if (Y - cy <= r) {\n                graph[numCircles + 3].push_back(i); \n                graph[i].push_back(numCircles + 3);\n            }\n\n            \n            for (int j = i + 1; j < numCircles; ++j) {\n                int cx2 = circles[j][0], cy2 = circles[j][1], r2 = circles[j][2];\n                double distance = sqrt(pow(cx - cx2, 2) + pow(cy - cy2, 2));\n                if (distance <= r + r2) {\n                    graph[i].push_back(j);\n                    graph[j].push_back(i);\n                }\n            }\n        }\n\n        bool bottomLeftToRight = bfs(graph, numCircles, numCircles + 1, numCircles + 2, numCircles + 4);\n        bool topRightToLeft = bfs(graph, numCircles + 3, numCircles + 2, numCircles + 1, numCircles + 4);\n\n        return !(bottomLeftToRight || topRightToLeft);\n    \n    }\n};",
    "submit_ts": "1722136923",
    "subm_id": "1335748939"
}