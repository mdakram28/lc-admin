{
    "username": "Ayushman-kar",
    "submission": "struct TrieNode {\n    TrieNode* children[26];\n    bool isEnd;\n    int minCost;\n    \n    TrieNode() {\n        for (int i = 0; i < 26; ++i) {\n            children[i] = nullptr;\n        }\n        isEnd = false;\n        minCost = INT_MAX;\n    }\n};\nclass Trie {\npublic:\n    TrieNode* root;\n    \n    Trie() {\n        root = new TrieNode();\n    }\n    \n    // Insert word into the Trie with a given cost\n    void insert(string& word, int cost) {\n        TrieNode* node = root;\n        for (char c : word) {\n            if (!node->children[c - 'a']) {\n                node->children[c - 'a'] = new TrieNode();\n            }\n            node = node->children[c - 'a'];\n        }\n        node->isEnd = true;\n        node->minCost = min(node->minCost, cost);\n    }\n    \n    // Search for word in the Trie, return minimum cost or INT_MAX if not found\n    int search(string& word) {\n        TrieNode* node = root;\n        for (char c : word) {\n            if (!node->children[c - 'a']) {\n                return INT_MAX;\n            }\n            node = node->children[c - 'a'];\n        }\n        return node->minCost;\n    }\n};\n\nclass Solution {\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int n = target.size();\n        \n        // Build Trie from words with their respective costs\n        Trie trie;\n        for (int i = 0; i < words.size(); ++i) {\n            trie.insert(words[i], costs[i]);\n        }\n        \n        // Initialize dp array\n        vector<int> dp(n + 1, INT_MAX);\n        dp[0] = 0; // cost to form an empty string is 0\n        \n        // Process each position in target\n        for (int i = 0; i < n; ++i) {\n            if (dp[i] == INT_MAX) continue; // skip if dp[i] is still infinity\n            \n            TrieNode* node = trie.root;\n            for (int j = i; j < n; ++j) {\n                if (!node->children[target[j] - 'a']) break;\n                node = node->children[target[j] - 'a'];\n                if (node->isEnd) {\n                    dp[j + 1] = min(dp[j + 1], dp[i] + node->minCost);\n                }\n            }\n        }\n        \n        return dp[n] == INT_MAX ? -1 : dp[n];\n\n    }\n};",
    "submit_ts": "1720324551",
    "subm_id": "1312402294"
}