{
    "username": "SharadAwasthi369",
    "submission": "class Solution {\npublic:\n    vector<int> countOfPeaks(vector<int>& nums, vector<vector<int>>& queries) {\n        int n = nums.size();\n        vector<int> peaks(n, 0);\n\n        auto isPeak = [&](int i) {\n            if (i <= 0 || i >= n-1) return false;\n            return nums[i] > nums[i-1] && nums[i] > nums[i+1];\n        };\n\n        for (int i = 1; i < n-1; ++i) {\n            peaks[i] = isPeak(i);\n        }\n\n        vector<int> segTree(4 * n, 0);\n\n        auto build = [&](auto& self, int node, int start, int end) -> void {\n            if (start == end) {\n                segTree[node] = peaks[start];\n            } else {\n                int mid = (start + end) / 2;\n                self(self, 2 * node, start, mid);\n                self(self, 2 * node + 1, mid + 1, end);\n                segTree[node] = segTree[2 * node] + segTree[2 * node + 1];\n            }\n        };\n\n        auto update = [&](auto& self, int node, int start, int end, int idx, int val) -> void {\n            if (start == end) {\n                segTree[node] = val;\n            } else {\n                int mid = (start + end) / 2;\n                if (idx <= mid) {\n                    self(self, 2 * node, start, mid, idx, val);\n                } else {\n                    self(self, 2 * node + 1, mid + 1, end, idx, val);\n                }\n                segTree[node] = segTree[2 * node] + segTree[2 * node + 1];\n            }\n        };\n\n        auto query = [&](auto& self, int node, int start, int end, int l, int r) -> int {\n            if (r < start || end < l) {\n                return 0;\n            }\n            if (l <= start && end <= r) {\n                return segTree[node];\n            }\n            int mid = (start + end) / 2;\n            int left = self(self, 2 * node, start, mid, l, r);\n            int right = self(self, 2 * node + 1, mid + 1, end, l, r);\n            return left + right;\n        };\n\n        build(build, 1, 0, n-1);\n\n        vector<int> result;\n\n        for (auto& q : queries) {\n            if (q[0] == 1) {\n                int l = q[1];\n                int r = q[2];\n                result.push_back(query(query, 1, 0, n-1, l+1, r-1));\n            } else if (q[0] == 2) {\n                int index = q[1];\n                int val = q[2];\n                nums[index] = val;\n                for (int i = index - 1; i <= index + 1; ++i) {\n                    if (i > 0 && i < n-1) {\n                        peaks[i] = isPeak(i);\n                        update(update, 1, 0, n-1, i, peaks[i]);\n                    }\n                }\n            }\n        }\n\n        return result;\n    }\n};\n",
    "submit_ts": "1718507349",
    "subm_id": "1289648803"
}