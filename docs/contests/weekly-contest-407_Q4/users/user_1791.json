{
    "username": "Coder_10017",
    "submission": "class SegmentTree {\n    vector<int> tree;\n    vector<int> difs;\n    int n;\n\n    void build(){\n        for(int i=n-1; i>0; i--){\n            tree[i] = tree[i<<1];\n            if(difs[tree[i]] > difs[tree[i<<1|1]])\n            tree[i] = tree[i<<1|1];\n        }\n        cout<<\"tree = \"<<endl;\n        for(int i: tree) cout<<i<<\" \";\n        cout<<endl;\n    }\n\n    public:\n    SegmentTree(){}\n    SegmentTree(vector<int>& nums) {\n        n = nums.size();\n        tree = vector<int>(2*n);\n        difs = vector<int>(n);\n        for(int i=0; i<n; i++){\n            tree[n+i] = i;\n            difs[i] = abs(nums[i]);\n        }\n\n        build();\n    }\n    \n    int findMin(int left, int right) {\n        // cout<<\"at query \"<<left<<\" \"<<right<<endl;\n        int ans = tree[left+n];\n        right++;\n        for(left+=n, right+=n; left<right; left>>=1, right>>=1){\n            if(left&1) {\n                if(difs[ans] > difs[tree[left]]) ans = tree[left];\n                left++;\n            }\n            if(right&1) {\n                right--;\n                if(difs[ans] > difs[tree[right]]) ans = tree[right];\n            }\n        }\n        // cout<<\"ans = \"<<ans<<endl;\n        return ans;\n    }\n};\n\nclass Solution {\npublic:\n\n    long long ans;\n    vector<int> difs;\n    SegmentTree tree;\n\n    void util(int left, int right, int curops){\n        \n        //if(left==right) {ans += abs(difs[left]); return; }\n\n        if(left>right) return;\n\n        // cout<<\"at left = \"<<left<<\" right = \"<<right<<endl;\n\n        int minn = tree.findMin(left, right);\n\n        int extra = abs(difs[minn]) - curops;\n        ans += extra;\n        util(left, minn-1, curops+extra);\n        util(minn+1, right, curops+extra);\n\n    }\n\n    long long minimumOperations(vector<int>& nums, vector<int>& target) {\n        \n        this->ans = 0;\n\n        int n = nums.size();\n        for(int i=0; i<n; i++)\n        difs.push_back(nums[i]-target[i]);\n\n        SegmentTree tree(difs);\n        this->tree = tree;\n\n        int sign = 0;\n\n        int left = 0;\n        for(int i=0; i<n; i++){\n            if(difs[i]==0) continue;\n            if(sign==0) sign = (difs[i]>0) ? 1 : -1;\n            else if(sign==1){\n                if(difs[i]>0) continue;\n                else {\n                    util(left, i-1, 0);\n                    sign = -1;\n                    left = i;\n                }\n            }\n            else{\n                if(difs[i]<0) continue;\n                else{\n                    util(left, i-1, 0);\n                    sign = 1;\n                    left = i;\n                }\n            }\n        }\n\n        if(left<n) util(left, n-1, 0);\n\n        return ans;\n    }\n};\n\n",
    "submit_ts": "1721533319",
    "subm_id": "1328006314"
}