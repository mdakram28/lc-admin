{
    "username": "tmoux",
    "submission": "class Solution {\npublic:\n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n        auto findDiam = [&](vector<vector<int>> edges) {\n            int N = edges.size() + 1;\n            vector<vector<int>> adj(N);\n            for (auto v: edges) {\n                int a = v[0], b = v[1];\n                adj[a].push_back(b);\n                adj[b].push_back(a);\n            }\n            vector<int> dist(N, 999999);\n            queue<int> q;\n            q.push(0);\n            dist[0] = 0;\n            while (!q.empty()) {\n                int i = q.front(); q.pop();\n                for (int j: adj[i]) {\n                    if (dist[j] > dist[i] + 1) {\n                        dist[j] = dist[i] + 1;\n                        q.push(j);\n                    }\n                }\n            }\n            pair<int, int> mx = {-1, -1};\n            for (int i = 0; i < N; i++) {\n                mx = max(mx, {dist[i], i});\n            }\n            for (int i = 0; i < N; i++) dist[i] = 999999;\n            q.push(mx.second);\n            dist[mx.second] = 0;\n            while (!q.empty()) {\n                int i = q.front(); q.pop();\n                for (int j: adj[i]) {\n                    if (dist[j] > dist[i] + 1) {\n                        dist[j] = dist[i] + 1;\n                        q.push(j);\n                    }\n                }\n            }\n            // cout << \"found init \" << mx.second << endl;\n            int diam = 0;\n            for (int i = 0; i < N; i++) {\n                diam = max(diam, dist[i]);\n            }\n            return diam;\n        };\n        \n        int d1 = findDiam(edges1);\n        int d2 = findDiam(edges2);\n        \n        int ans = max(d1, d2);\n        ans = max(ans, (d1 + 1) / 2 + (d2 + 1) / 2 + 1);\n        return ans;\n    }\n};",
    "submit_ts": "1719716379",
    "subm_id": "1304362836"
}