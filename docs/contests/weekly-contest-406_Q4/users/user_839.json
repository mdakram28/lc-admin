{
    "username": "prashantyadavdec",
    "submission": "class Solution {\npublic:\n    long long minimumCost(int m, int n, vector<int>& horizontalCut, vector<int>& verticalCut) {\n        std::sort(horizontalCut.begin(), horizontalCut.end(), std::greater<int>());\n        std::sort(verticalCut.begin(), verticalCut.end(), std::greater<int>());\n\n        int hIndex = 0, vIndex = 0;\n        int horizontalPieces = 1, verticalPieces = 1;\n        long long totalCost = 0;\n\n        // While there are cuts to be made\n        while (hIndex < horizontalCut.size() && vIndex < verticalCut.size()) {\n            if (horizontalCut[hIndex] >= verticalCut[vIndex]) {\n                totalCost += (long long)horizontalCut[hIndex] * verticalPieces;\n                horizontalPieces++;\n                hIndex++;\n            } else {\n                totalCost += (long long)verticalCut[vIndex] * horizontalPieces;\n                verticalPieces++;\n                vIndex++;\n            }\n        }\n\n        // Add the remaining horizontal cuts\n        while (hIndex < horizontalCut.size()) {\n            totalCost += (long long)horizontalCut[hIndex] * verticalPieces;\n            horizontalPieces++;\n            hIndex++;\n        }\n\n        // Add the remaining vertical cuts\n        while (vIndex < verticalCut.size()) {\n            totalCost += (long long)verticalCut[vIndex] * horizontalPieces;\n            verticalPieces++;\n            vIndex++;\n        }\n\n        return totalCost;\n    }\n};",
    "submit_ts": "1720925351",
    "subm_id": "1320251773"
}