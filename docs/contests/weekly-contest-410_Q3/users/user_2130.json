{
    "username": "sgn00",
    "submission": "class Solution {\npublic:\n    int countOfPairs(vector<int>& nums) {\n        const int MOD = 1e9 + 7;\n        int n = nums.size();\n        \n        // dp[current][j][k]: number of ways for current index `i` with arr1[i] = j and arr2[i] = k\n        vector<vector<int>> dp(51, vector<int>(51, 0));\n        vector<vector<int>> prev(51, vector<int>(51, 0));\n        \n        // Base case: initialize for the first element\n        for (int j = 0; j <= nums[0]; ++j) {\n            int k = nums[0] - j;\n            dp[j][k] = 1;\n        }\n        \n        for (int i = 1; i < n; ++i) {\n            // Swap dp and prev to reuse memory\n            swap(dp, prev);\n            // Reset current dp array\n            for (int j = 0; j <= 50; ++j) {\n                fill(dp[j].begin(), dp[j].end(), 0);\n            }\n\n            // Cumulative sum for prev[j_prev][k_prev]\n            vector<vector<int>> cum_sum(51, vector<int>(51, 0));\n            for (int j_prev = 0; j_prev <= 50; ++j_prev) {\n                for (int k_prev = 50; k_prev >= 0; --k_prev) {\n                    cum_sum[j_prev][k_prev] = prev[j_prev][k_prev];\n                    if (k_prev < 50) {\n                        cum_sum[j_prev][k_prev] = (cum_sum[j_prev][k_prev] + cum_sum[j_prev][k_prev + 1]) % MOD;\n                    }\n                }\n            }\n\n            // Fill dp for current i\n            for (int j = 0; j <= nums[i]; ++j) {\n                int k = nums[i] - j;\n                for (int j_prev = 0; j_prev <= j; ++j_prev) {\n                    dp[j][k] = (dp[j][k] + cum_sum[j_prev][k]) % MOD;\n                }\n            }\n        }\n\n        // Sum up all valid results for the last index\n        int total = 0;\n        for (int j = 0; j <= 50; ++j) {\n            for (int k = 0; k <= 50; ++k) {\n                total = (total + dp[j][k]) % MOD;\n            }\n        }\n\n        return total;\n    }\n};\n",
    "submit_ts": "1723346683",
    "subm_id": "1351582949"
}