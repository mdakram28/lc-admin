{
    "username": "huangshan01",
    "submission": "class Solution:\n    def numberOfAlternatingGroups(self, colors: List[int], k: int) -> int:        \n        def fun(s, p):\n            # padding -1 kmp\n            np = len(p)\n            lps = [0] * (np + 1) # additional -1 padding in front\n            lps[0] = -1 # mark termination and back to naive\n            i = 1\n            pf_len = 0\n            while i < np:\n                if p[i] == p[pf_len]:\n                    i += 1\n                    pf_len += 1\n                    lps[i] = pf_len\n                else:\n                    if pf_len:\n                        pf_len = lps[pf_len]\n                    else:\n                        i += 1\n                        lps[i] = pf_len\n            # print(lps)\n\n            ns = len(s)\n            ans = js = jp = 0\n            while js < ns:\n                if s[js] == p[jp]:\n                    js += 1\n                    jp += 1\n                    if jp == np:\n                        ans += 1\n                        jp = lps[jp] # pad -1 makes indexing simple\n                else:\n                    jp = lps[jp]\n                    if jp < 0: # note lps[0] must = -1, to differ from lps[1] = 0\n                        js += 1\n                        jp += 1\n                        \n            return ans\n        \n        m = len(colors)\n        app = []\n        for i in range(k - 1):\n            app.append(colors[(m + i) % m])\n        \n        colors += app\n        # n = len(colors)\n        \n        \n        p0 = [0] * k\n        for i in range(0, k, 2):\n            p0[i] = 1\n        p1 = [0] * k\n        for i in range(1, k, 2):\n            p1[i] = 1\n            \n        # print(colors, p0, p1)\n        \n        return fun(colors, p0) + fun(colors, p1)",
    "submit_ts": "1720277634",
    "subm_id": "1311672846"
}