{
    "username": "fsj-o",
    "submission": "template<class T> std::ostream& operator<<(std::ostream& os, const std::vector<T>& a) { for (const T& x : a) os << x << ' '; return os; }\n\nclass Solution {\npublic:\n    vector<int> timeTaken(vector<vector<int>>& edges) {\n        int n = edges.size()+1;\n        std::vector<std::vector<int>> G(n);\n        for (auto& e : edges) {\n            int v = e[0], u = e[1];\n            G[v].push_back(u);\n            G[u].push_back(v);\n        }\n        std::vector<int> dp(n);\n        auto dfs = [&] (auto self, int v, int p) -> void {\n            for (int u : G[v]) {\n                if (u == p) continue;;\n                self(self, u, v);\n                dp[v] = std::max(dp[v], dp[u]+(u%2 == 0 ? 2 : 1));\n            }\n        }; dfs(dfs, 0, -1);\n        // std::cout << \"dp = \" << dp << '\\n';\n        std::vector<int> dp2(n);\n        auto reroot = [&] (auto self, int v, int p, int pVal) -> void {\n            std::multiset<int> st;\n            for (int u : G[v]) {\n                if (u == p) continue;\n                int uVal = dp[u]+(u%2 == 0 ? 2 : 1);\n                st.insert(uVal);\n            }\n            dp2[v] = std::max(dp[v], pVal);\n            for (int u : G[v]) {\n                if (u == p) continue;\n                int uVal = dp[u]+(u%2 == 0 ? 2 : 1);\n                st.extract(uVal);\n                self(self, u, v, std::max(pVal, (st.empty() ? 0 : *st.rbegin()))+(v%2 == 0 ? 2 : 1));\n                st.insert(uVal);\n            }\n        }; reroot(reroot, 0, -1, 0);\n        return dp2;\n    }\n};",
    "submit_ts": "1722697541",
    "subm_id": "552266600"
}