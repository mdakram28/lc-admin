{
    "username": "God_USOPPP",
    "submission": "\n\nclass Solution {\npublic:\n    long long minimumCost(int m, int n, vector<int>& horizontalCut, vector<int>& verticalCut) {\n        sort(horizontalCut.begin(), horizontalCut.end(), greater<int>());\n        sort(verticalCut.begin(), verticalCut.end(), greater<int>());\n        \n        int hIdx = 0, vIdx = 0;\n        int hPieces = 1, vPieces = 1;\n        long long totalCost = 0;\n        \n        while (hIdx < horizontalCut.size() && vIdx < verticalCut.size()) {\n            if (horizontalCut[hIdx] >= verticalCut[vIdx]) {\n                totalCost += static_cast<long long>(horizontalCut[hIdx]) * vPieces;\n                hPieces++;\n                hIdx++;\n            } else {\n                totalCost += static_cast<long long>(verticalCut[vIdx]) * hPieces;\n                vPieces++;\n                vIdx++;\n            }\n        }\n        \n        while (hIdx < horizontalCut.size()) {\n            totalCost += static_cast<long long>(horizontalCut[hIdx]) * vPieces;\n            hPieces++;\n            hIdx++;\n        }\n        \n        while (vIdx < verticalCut.size()) {\n            totalCost += static_cast<long long>(verticalCut[vIdx]) * hPieces;\n            vPieces++;\n            vIdx++;\n        }\n        \n        return totalCost;\n    }\n};\n",
    "submit_ts": "1720925882",
    "subm_id": "1320269271"
}