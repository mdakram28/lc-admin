{
    "username": "Yang Xiao",
    "submission": "const int N = 100007;\n\nint dp[N][10];\nint from[N][10];\nint rem[N];\n\nclass Solution {\npublic:\n    string largestPalindrome(int n, int k) {\n        rem[0] = 1 % k;\n        for (int i = 1; i < n; ++i) {\n            rem[i] = rem[i - 1] * 10 % k;\n        }\n        int half = (n + 1) / 2;\n        for (int i = 0; i <= half; ++i) {\n            for (int j = 0; j < k; ++j) {\n                dp[i][j] = -1;\n            }\n        }\n        dp[half][0] = 0;\n        for (int i = half - 1; i >= 0; --i) {\n            for (int j = 0; j < k; ++j) {\n                if (dp[i + 1][j] < 0) continue;\n                for (int next = 9; next >= 0; --next) {\n                    int nextSum = (j + next * rem[i]) % k;\n                    if (n - 1 - i != i) {\n                        nextSum = (nextSum + next * rem[n - 1 - i]) % k;\n                    }\n                    if (next > dp[i][nextSum]) {\n                        dp[i][nextSum] = next;\n                        from[i][nextSum] = j;\n                    }\n                }\n            }\n        }\n        \n        assert(dp[0][0] > 0);\n        string res(n, '9');\n        \n        int cur = 0;\n        for (int i = 0; i < half; ++i) {\n            res[i] = res[n - 1 - i] = dp[i][cur] + '0';\n            cur = from[i][cur];\n        }\n        return res;;\n    }\n};",
    "submit_ts": "1723951109",
    "subm_id": "1359763469"
}