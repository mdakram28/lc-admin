{
    "username": "user8770ne",
    "submission": "typedef long long ll;\nclass Solution {\npublic:\n    typedef long long ll;\n    ll vmax(ll a, ll b)\n    {\n        if (a > b)\n            return a;\n        else\n            return b;\n    }\n    ll oneSolve(vector<vector<int>>& board, int r1, int c1, int r2, int c2)\n    {\n        int rows = board.size();\n        int cols = board[0].size();\n        ll maxi = -3*1e9-1;\n        for (int r = 0; r < rows; r++)\n        {\n            if (r != r1 && r != r2)\n            {\n                for (int c = 0; c < cols; c++)\n                {\n                    if (c != c1 && c != c2)\n                    {\n                        maxi = vmax(maxi, board[r][c]);\n                    }\n                }\n            }\n        }\n        return maxi;\n    }\n\n    \n    ll twoSolve(vector<vector<int>>& board, int exrow, int excol)\n    {\n        int rows = board.size();\n        int cols = board[0].size();\n        priority_queue<pair<ll, pair<int, int> > > pq;\n        for (int r = 0; r < rows; r++)\n        {\n            if (r != exrow)\n            {\n                for (int c = 0; c < cols; c++)\n                {\n                    if (c != excol)\n                    {\n                        ll val = -1 * board[r][c];\n                        pq.push({val, {r,c}});\n                        if (pq.size() > 3)\n                        {\n                            pq.pop();\n                        }\n                    }\n                }\n            }\n        }\n        ll ans = -3*1e9-1;\n        while (pq.size() > 0)\n        {\n            auto tmp = pq.top();\n            pq.pop();\n            ans = vmax(ans, -1*tmp.first + oneSolve(board, exrow, excol, tmp.second.first, tmp.second.second));\n        }\n        return ans;        \n    }\n\n    \n\n    long long maximumValueSum(vector<vector<int>>& board) {\n        int rows = board.size();\n        int cols = board[0].size();\n        priority_queue<pair<ll, pair<int,int> > > pq;\n        for (int r = 0; r < rows; r++)\n        {\n            for (int c = 0; c < cols; c++)\n            {\n                ll val = -1 * board[r][c];\n                pq.push({val, {r,c}});\n                if (pq.size() > 8)\n                {\n                    pq.pop();\n                }\n            }\n        }\n        ll ans = -3*1e9-1;\n        while (pq.size() > 0)\n        {\n            auto tmp = pq.top();\n            pq.pop();\n            ans = vmax(ans, -1*tmp.first + twoSolve(board, tmp.second.first, tmp.second.second));\n        }\n        return ans;\n    }\n};",
    "submit_ts": "1723908625",
    "subm_id": "1359160422"
}