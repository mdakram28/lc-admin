{
    "username": "gaoyf1235",
    "submission": "namespace atcoder{\ntemplate <typename T, T (*operation)(T, T), T (*default_val)(),\n          typename F, T (*mapping)(F, T), \n          F (*composition)(F, F), F (*identity_val)()>\nclass lazy_segtree {\nprivate:\n    int _n, size, log;\n    std::vector<T> d;\n    std::vector<F> lz;\n    int ceil_pow2(int n) {\n        int x = 0;\n        while ((1U << x) < (unsigned int)(n)) x++;\n        return x;\n    }\n    void update(int k) { d[k] = operation(d[2 * k], d[2 * k + 1]); }\n    void all_apply(int k, F f) {\n        d[k] = mapping(f, d[k]);\n        if (k < size) lz[k] = composition(f, lz[k]);\n    }\n    void push(int k) {\n        all_apply(2 * k, lz[k]);\n        all_apply(2 * k + 1, lz[k]);\n        lz[k] = identity_val();\n    }\npublic:\n    lazy_segtree(int n) : lazy_segtree(std::vector<T>(n, default_val())) {}\n    lazy_segtree(const std::vector<T>& v) : _n(int(v.size())) {\n        log = ceil_pow2(_n);\n        size = 1 << log;\n        d = std::vector<T>(2 * size, default_val());\n        lz = std::vector<F>(size, identity_val());\n        for (int i = 0; i < _n; i++) d[size + i] = v[i];\n        for (int i = size - 1; i >= 1; i--) {\n            update(i);\n        }\n    }\n\n    void set(int p, T x) {\n        assert(0 <= p && p < _n);\n        p += size;\n        for (int i = log; i >= 1; i--) push(p >> i);\n        d[p] = x;\n        for (int i = 1; i <= log; i++) update(p >> i);\n    }\n\n    T get(int p) {\n        assert(0 <= p && p < _n);\n        p += size;\n        for (int i = log; i >= 1; i--) push(p >> i);\n        return d[p];\n    }\n\n    T prod(int l, int r) {\n        assert(0 <= l && l <= r && r <= _n);\n        if (l == r) return default_val();\n\n        l += size;\n        r += size;\n\n        for (int i = log; i >= 1; i--) {\n            if (((l >> i) << i) != l) push(l >> i);\n            if (((r >> i) << i) != r) push(r >> i);\n        }\n\n        T sml = default_val(), smr = default_val();\n        while (l < r) {\n            if (l & 1) sml = operation(sml, d[l++]);\n            if (r & 1) smr = operation(d[--r], smr);\n            l >>= 1;\n            r >>= 1;\n        }\n\n        return operation(sml, smr);\n    }\n\n    T all_prod() { return d[1]; }\n\n    void apply(int p, F f) {\n        assert(0 <= p && p < _n);\n        p += size;\n        for (int i = log; i >= 1; i--) push(p >> i);\n        d[p] = mapping(f, d[p]);\n        for (int i = 1; i <= log; i++) update(p >> i);\n    }\n    void apply(int l, int r, F f) {\n        assert(0 <= l && l <= r && r <= _n);\n        if (l == r) return;\n\n        l += size;\n        r += size;\n\n        for (int i = log; i >= 1; i--) {\n            if (((l >> i) << i) != l) push(l >> i);\n            if (((r >> i) << i) != r) push((r - 1) >> i);\n        }\n\n        {\n            int l2 = l, r2 = r;\n            while (l < r) {\n                if (l & 1) all_apply(l++, f);\n                if (r & 1) all_apply(--r, f);\n                l >>= 1;\n                r >>= 1;\n            }\n            l = l2;\n            r = r2;\n        }\n\n        for (int i = 1; i <= log; i++) {\n            if (((l >> i) << i) != l) update(l >> i);\n            if (((r >> i) << i) != r) update((r - 1) >> i);\n        }\n    }\n\n    template <bool (*g)(T)> int max_right(int l) {\n        return max_right(l, [](T x) { return g(x); });\n    }\n    template <class G> int max_right(int l, G g) {\n        assert(0 <= l && l <= _n);\n        assert(g(default_val()));\n        if (l == _n) return _n;\n        l += size;\n        for (int i = log; i >= 1; i--) push(l >> i);\n        T sm = default_val();\n        do {\n            while (l % 2 == 0) l >>= 1;\n            if (!g(operation(sm, d[l]))) {\n                while (l < size) {\n                    push(l);\n                    l = (2 * l);\n                    if (g(operation(sm, d[l]))) {\n                        sm = operation(sm, d[l]);\n                        l++;\n                    }\n                }\n                return l - size;\n            }\n            sm = operation(sm, d[l]);\n            l++;\n        } while ((l & -l) != l);\n        return _n;\n    }\n\n    template <bool (*g)(T)> int min_left(int r) {\n        return min_left(r, [](T x) { return g(x); });\n    }\n    template <class G> int min_left(int r, G g) {\n        assert(0 <= r && r <= _n);\n        assert(g(default_val()));\n        if (r == 0) return 0;\n        r += size;\n        for (int i = log; i >= 1; i--) push((r - 1) >> i);\n        T sm = default_val();\n        do {\n            r--;\n            while (r > 1 && (r % 2)) r >>= 1;\n            if (!g(operation(d[r], sm))) {\n                while (r < size) {\n                    push(r);\n                    r = (2 * r + 1);\n                    if (g(operation(d[r], sm))) {\n                        sm = operation(d[r], sm);\n                        r--;\n                    }\n                }\n                return r + 1 - size;\n            }\n            sm = operation(d[r], sm);\n        } while ((r & -r) != r);\n        return 0;\n    }\n};\n}  // namespace atcoder\n\nclass Solution {\n    using pii = pair<int, int>;\n    static pii default_val() {return {0,0}; }\n    static pii merge_func(pii l, pii r) {\n        return {l.first + r.first, l.second + r.second};\n    }\n\n    static bool identity_val() {return false; }\n    static pii transform_func( bool t, pii x) { \n        if(t) return {0, x.second};\n        else return x;\n    }\n    static bool composition(bool curr, bool prev) { \n        return curr || prev; \n    }\npublic:\n    vector<int> shortestDistanceAfterQueries(int n, vector<vector<int>>& queries) {\n        vector<pii> data(n);\n        for(int i = 0; i < n; i++){\n            data[i] = {1, 1};\n        }\n        atcoder::lazy_segtree<pii, merge_func, default_val, bool, transform_func, composition, identity_val> tree(data);    \n        vector<int> res;\n        for(auto& q : queries){\n            auto u = q[0];\n            auto v = q[1];\n            if(u > v) swap(u, v);\n            if(v - u > 1){\n                tree.apply(u + 1, v, true);\n            }\n            auto [cnt, sz] = tree.prod(0, n);\n            res.push_back(cnt - 1);\n        }\n        return res;\n        \n    }\n};",
    "submit_ts": "1722740967",
    "subm_id": "1343733277"
}