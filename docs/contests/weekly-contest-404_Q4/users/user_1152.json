{
    "username": "shuklaradhana37",
    "submission": "class Solution {\n   \npublic:\n     int treeDiameter(const vector<vector<int>>& edges, int n) {\n        vector<vector<int>> adj(n);\n        for (const auto& edge : edges) {\n            adj[edge[0]].push_back(edge[1]);\n            adj[edge[1]].push_back(edge[0]);\n        }\n\n        auto bfs = [&](int start) {\n            vector<int> dist(n, -1);\n            queue<int> q;\n            q.push(start);\n            dist[start] = 0;\n            int farthestNode = start;\n\n            while (!q.empty()) {\n                int node = q.front();\n                q.pop();\n                for (int neighbor : adj[node]) {\n                    if (dist[neighbor] == -1) {\n                        dist[neighbor] = dist[node] + 1;\n                        q.push(neighbor);\n                        if (dist[neighbor] > dist[farthestNode]) {\n                            farthestNode = neighbor;\n                        }\n                    }\n                }\n            }\n            return make_pair(farthestNode, dist[farthestNode]);\n        };\n\n        auto p1 = bfs(0);\n        auto p2 = bfs(p1.first);\n\n        return p2.second;\n    }\n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n                  int n = edges1.size() + 1;\n        int m = edges2.size() + 1;\n        \n        int d1 = treeDiameter(edges1, n);\n        int d2 = treeDiameter(edges2, m);\n\n       \n        return max({d1, d2, (d1 + 1) / 2 + (d2 + 1) / 2 + 1});\n\n    }\n};",
    "submit_ts": "1719715245",
    "subm_id": "1304331803"
}