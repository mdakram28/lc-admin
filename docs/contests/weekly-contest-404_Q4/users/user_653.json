{
    "username": "elizabethwei",
    "submission": "class Solution:\n    def minimumDiameterAfterMerge(self, edges1: List[List[int]], edges2: List[List[int]]) -> int:\n        n = len(edges1) + 1\n        m = len(edges2) + 1\n        adj1 = [[] for _ in range(n)]\n        deg1 = [0 for _ in range(n)]\n        adj2 = [[] for _ in range(m)]\n        deg2 = [0 for _ in range(m)]\n        for a,b in edges1:\n            adj1[a].append(b)\n            adj1[b].append(a)\n            deg1[a] += 1\n            deg1[b] += 1\n        for a,b in edges2:\n            adj2[a].append(b)\n            adj2[b].append(a)\n            deg2[a] += 1\n            deg2[b] += 1\n            \n        def trim(adj, deg):\n            n = len(adj)\n            if n <= 1:\n                return (0, 1)\n            if n == 2:\n                return (1, 0)\n            q = deque([])\n            vis = [False for _ in range(n)]\n            ans = 0\n            for i in range(n):\n                if deg[i] == 1:\n                    q.append(i)\n                    vis[i] = True\n            sz = len(q)\n            while q:\n                sz = len(q)\n                for _ in range(sz):\n                    v = q.popleft()\n                    for u in adj[v]:\n                        deg[u] -= 1\n                        if deg[u] == 1 and not vis[u]:\n                            vis[u] = True\n                            q.append(u)\n                ans += 1\n            evenness = (0 if sz == 2 else 1)\n            return (ans-evenness, evenness)\n        res1, p1 = trim(adj1, deg1)\n        single1 = res1 * 2 - 1 if p1 == 0 else res1 * 2\n        res2, p2 = trim(adj2, deg2)\n        single2 = res2 * 2 - 1 if p2 == 0 else res2 * 2\n        return max(res1 + res2 + 1, single1, single2)\n                \n                    \n                    \n                    \n                    \n                    \n                    ",
    "submit_ts": 1719717386.0
}