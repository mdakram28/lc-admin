{
    "username": "woaixuexi",
    "submission": "class Solution {\npublic:\n    long long two_sum(vector<vector<int> >& board, int nr, int nc)\n    {\n        int M = -1e9 - 1, r = -1, c = -1;\n        for(int i = 0; i < board.size(); i++)\n            for(int j = 0; j < board[0].size(); j++)\n            {\n                if(i == nr || j == nc)\n                    continue;\n                if(board[i][j] > M)\n                {\n                    M = board[i][j];\n                    r = i;\n                    c = j;\n                }\n            }\n\n        long long t1 = M, m = -1e9 - 1;\n        for(int i = 0; i < board.size(); i++)\n            for(int j = 0; j < board[0].size(); j++)\n            {\n                if(i == nr || j == nc || i == r || j == c)\n                    continue;\n                m = max(m, (long long)board[i][j]);\n            }\n        t1 += m;\n\n        long long t2 = 0, rm = -1e9 - 1, cm = -1e9 - 1;\n        for(int i = 0; i < board.size(); i++)\n        {\n            if(i == r || i == nr)\n                continue;\n            rm = max(rm, (long long)board[i][c]);\n        }\n        for(int j = 0; j < board[0].size(); j++)\n        {\n            if(j == c || j == nc)\n                continue;\n            cm = max(cm, (long long)board[r][j]);\n        }\n        t2 = rm + cm;\n\n        return max(t1, t2);\n    }\n\n    long long maximumValueSum(vector<vector<int>>& board) {\n        int m = board.size(), n = board[0].size();\n        \n        int M = -1e9 - 1, r = -1, c = -1;\n        for(int i = 0; i < m; i++)\n            for(int j = 0; j < n; j++)\n            {\n                if(board[i][j] > M)\n                {\n                    M = board[i][j];\n                    r = i;\n                    c = j;\n                }\n            }\n        long long t1 = M + two_sum(board, r, c);\n\n        int mm = -1e9 - 1, rr = -1, cc = -1;\n        for(int i = 0; i < m; i++)\n            if(i != r && board[i][c] > mm)\n            {\n                mm = board[i][c];\n                rr = i;\n                cc = c;\n            }\n        for(int j = 0; j < n; j++)\n            if(j != c && board[r][j] > mm)\n            {\n                mm = board[r][j];\n                rr = r;\n                cc = j;\n            }\n        long long t2 = mm + two_sum(board, rr, cc);\n        \n        long long t3 = 0;\n        if(rr == r)\n        {\n            long long m1 = -1e9 - 1, rrr = -1, ccc = -1;\n            for(int j = 0; j < n; j++)\n                if(j != c && j != cc && board[r][j] > m1)\n                {\n                    m1 = board[r][j];\n                    rrr = r;\n                    ccc = j;\n                }\n            t3 = m1 + two_sum(board, rrr, ccc);\n        }\n        else\n        {\n            long long m1 = -1e9 - 1, rrr = -1, ccc = -1;\n            for(int i = 0; i < m; i++)\n                if(i != r && i != rr && board[i][c] > m1)\n                {\n                    m1 = board[i][c];\n                    rrr = i;\n                    ccc = c;\n                }\n            t3 = m1 + two_sum(board, rrr, ccc);\n        }\n\n        // cout << t1 << \" \" << t2 << \" \" << t3 << endl;\n        return max(max(t1, t2), t3);\n    }\n};",
    "submit_ts": "1723909543",
    "subm_id": "556336783"
}