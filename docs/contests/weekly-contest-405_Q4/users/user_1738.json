{
    "username": "kiof",
    "submission": "# class Solution:\n#     def minimumCost(self, target: str, words: List[str], costs: List[int]) -> int:\n#         costs = {word: cost for word, cost in zip(words, costs)}\n#         cache = {\"\": 0}\n#         for i in range(len(target) - 1, -1, -1):\n#             substring = target[i:]\n#             score = float(\"inf\")\n#             for word in words:\n#                 if substring.startswith(word):\n#                     remainder = substring[len(word) :]\n#                     print(substring, remainder)\n#                     if remainder in cache:\n#                         score = min(costs[word] + cache[remainder], score)\n#             cache[substring] = score\n#         print(cache)\n#         if cache[target] == float(\"inf\"):\n#             return -1\n#         else:\n#             return cache[target]\n\n#     def build_trie(self, words, costs):\n#         trie = Trie()\n#         for word, cost in zip(words, costs):\n#             trie.insert(word, cost)\n#         return trie\n\nclass Solution:\n    def minimumCost(self, target: str, words: List[str], costs: List[int]) -> int:\n        trie = Trie()\n        word_cost_map = {}\n        for word, cost in zip(words, costs):\n            trie.insert(word)\n            word_cost_map[word] = min(cost, word_cost_map.get(word, cost))\n        \n        cache = {len(target): 0}\n        \n        for i in range(len(target) - 1, -1, -1):\n            substring = target[i:]\n            min_cost = float(\"inf\")\n            \n            for prefix in trie.search_prefixes(substring):\n                remainder_index = i + len(prefix)\n                min_cost = min(min_cost, word_cost_map[prefix] + cache.get(remainder_index, float(\"inf\")))\n            \n            cache[i] = min_cost\n        \n        return cache[0] if cache[0] != float(\"inf\") else -1\n\n\nclass TrieNode:\n    def __init__(self):\n        self.children = {}\n        self.is_end_of_word = False\n\nclass Trie:\n    def __init__(self):\n        self.root = TrieNode()\n    \n    def insert(self, word):\n        current_node = self.root\n        for char in word:\n            current_node = current_node.children.setdefault(char, TrieNode())\n        current_node.is_end_of_word = True\n        current_node.word = word\n\n    def search_prefixes(self, substring):\n        current_node = self.root\n        prefixes = []\n        for i, char in enumerate(substring):\n            if char in current_node.children:\n                current_node = current_node.children[char]\n                if current_node.is_end_of_word:\n                    prefixes.append(current_node.word)\n            else:\n                break\n        return prefixes",
    "submit_ts": "1720324630",
    "subm_id": "1312404192"
}