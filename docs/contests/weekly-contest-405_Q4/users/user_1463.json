{
    "username": "Priyanshu-PM",
    "submission": "struct Node\n{\n    Node* links[26] = {NULL};\n    vector<pair<int, int>> wor;\n    bool flag = false;\n\n    bool containsKey(char ch)\n    {\n        return (links[ch - 'a'] != NULL);\n    }\n\n    Node* get(char ch)\n    {\n        return (links[ch - 'a']);\n    }\n\n    void put(char ch, Node* node)\n    {\n        links[ch - 'a'] = node;\n    }\n\n    void setEnd()\n    {\n        flag = true;\n    }\n\n    bool isEnd()\n    {\n        return flag;\n    }\n};\n\nclass Trie {\nprivate:\npublic:\n    Node* root;\n    Trie()\n    {\n        root = new Node();\n    }\n\n    //  T.C = O(N) - length of word\n    void insert(string &word, int cost, int ind)\n    {\n        Node* node = root;\n        for(int i = 0; i < word.size(); i++)\n        {\n            if(!node->containsKey(word[i]))\n            {\n                node->put(word[i], new Node());\n            }\n            node = node->get(word[i]);\n        }\n        node->wor.push_back({ind, cost});\n        node->setEnd();\n    }\n\n    bool search(string word)\n    {\n        Node* node = root;\n        for(int i = 0; i < word.size(); i++)\n        {\n            if(!node->containsKey(word[i]))\n                return false;\n            \n            node = node->get(word[i]);\n        }\n        return node->isEnd();\n    }\n\n    bool startsWith(string prefix)\n    {\n        Node* node = root;\n        for(int i = 0; i < prefix.size(); i++)\n        {\n            if(!node->containsKey(prefix[i]))\n                return false;\n\n            node = node->get(prefix[i]);\n        }\n        return true;\n    }\n};\n\nclass Solution {\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        \n        int n = target.size();\n        \n        vector<int> dp(n+1, INT_MAX);\n        dp[0] = 0;\n        \n        Trie *t = new Trie();\n        for(int i = 0; i < words.size(); i++) {\n            t->insert(words[i], costs[i], i);\n        }\n        \n        for(int i = 0; i < n; i++)\n        {\n            if(dp[i] == INT_MAX)    continue;\n            \n            Node* node = t->root;\n            for(int j = i; j < n; j++)\n            {\n                if(!node->containsKey(target[j]))   break;\n                else {\n                    \n                    node = node->get(target[j]);\n                    for(auto [ind, cost] : node->wor) {\n                        \n                        int len = words[ind].size();\n                        if(i + len <= n) {\n                            dp[i + len] = min(dp[i + len], dp[i] + cost);\n                        }\n                    }\n                }\n                \n            }\n        }\n        \n        if(dp[n] == INT_MAX)    return -1;\n        return dp[n];\n    }\n};",
    "submit_ts": "1720323965",
    "subm_id": "1312388368"
}