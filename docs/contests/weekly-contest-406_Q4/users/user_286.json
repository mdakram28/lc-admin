{
    "username": "Shashank_008",
    "submission": "class Solution {\n    public  long solve(int m, int n, int[] horizontalCut, int[] verticalCut) {\n        // Sort the horizontal and vertical cut costs in descending order\n        Arrays.sort(horizontalCut);\n        Arrays.sort(verticalCut);\n        reverseArray(horizontalCut);\n        reverseArray(verticalCut);\n\n        int hIndex = 0, vIndex = 0;\n        int horizontalPieces = 1, verticalPieces = 1;\n        long totalCost = 0;\n\n        // Process until all cuts are done\n        while (hIndex < m - 1 && vIndex < n - 1) {\n            if (horizontalCut[hIndex] >= verticalCut[vIndex]) {\n                // Perform horizontal cut\n                totalCost += (long) horizontalCut[hIndex] * verticalPieces;\n                horizontalPieces++;\n                hIndex++;\n            } else {\n                // Perform vertical cut\n                totalCost += (long) verticalCut[vIndex] * horizontalPieces;\n                verticalPieces++;\n                vIndex++;\n            }\n        }\n\n        // If there are remaining horizontal cuts\n        while (hIndex < m - 1) {\n            totalCost += (long) horizontalCut[hIndex] * verticalPieces;\n            hIndex++;\n        }\n\n        // If there are remaining vertical cuts\n        while (vIndex < n - 1) {\n            totalCost += (long) verticalCut[vIndex] * horizontalPieces;\n            vIndex++;\n        }\n\n        return totalCost;\n    }\n\n    private  void reverseArray(int[] array) {\n        for (int i = 0; i < array.length / 2; i++) {\n            int temp = array[i];\n            array[i] = array[array.length - i - 1];\n            array[array.length - i - 1] = temp;\n        }\n    }\n    public long minimumCost(int m, int n, int[] a, int[] b) {\n        return solve(m,n,a,b);\n    }\n}",
    "submit_ts": "1720925372",
    "subm_id": "1320252459"
}