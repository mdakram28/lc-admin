{
    "username": "Fangchen971101",
    "submission": "class Solution {\npublic:\nclass SegmentTree {\npublic:\n    SegmentTree(int n) {\n        size = n;\n        tree.resize(4 * n, 0);\n    }\n\n    void build(const vector<bool>& arr, int start, int end, int node) {\n        if (start == end) {\n            tree[node] = arr[start];\n        } else {\n            int mid = (start + end) / 2;\n            build(arr, start, mid, 2 * node + 1);\n            build(arr, mid + 1, end, 2 * node + 2);\n            tree[node] = tree[2 * node + 1] + tree[2 * node + 2];\n        }\n    }\n\n    void update(int idx, bool val, int start, int end, int node) {\n        if (start == end) {\n            tree[node] = val;\n        } else {\n            int mid = (start + end) / 2;\n            if (start <= idx && idx <= mid) {\n                update(idx, val, start, mid, 2 * node + 1);\n            } else {\n                update(idx, val, mid + 1, end, 2 * node + 2);\n            }\n            tree[node] = tree[2 * node + 1] + tree[2 * node + 2];\n        }\n    }\n\n    int query(int l, int r, int start, int end, int node) {\n        if (r < start || end < l) {\n            return 0;\n        }\n        if (l <= start && end <= r) {\n            return tree[node];\n        }\n        int mid = (start + end) / 2;\n        int left_sum = query(l, r, start, mid, 2 * node + 1);\n        int right_sum = query(l, r, mid + 1, end, 2 * node + 2);\n        return left_sum + right_sum;\n    }\n\nprivate:\n    vector<int> tree;\n    int size;\n};\n\n    bool is_peak(const vector<int>& nums, int i) {\n        return nums[i] > nums[i - 1] && nums[i] > nums[i + 1];\n    }\n\n    vector<int> countOfPeaks(vector<int>& nums, vector<vector<int>>& queries) {\n        int n = nums.size();\n        vector<bool> is_peaks(n, false);\n\n        // Initialize peak information\n        for (int i = 1; i < n - 1; ++i) {\n            is_peaks[i] = is_peak(nums, i);\n        }\n\n        // Initialize segment tree\n        SegmentTree seg_tree(n);\n        seg_tree.build(is_peaks, 0, n - 1, 0);\n\n        vector<int> result;\n\n        for (const auto& query : queries) {\n            if (query[0] == 1) {\n                int li = query[1], ri = query[2];\n                int count = seg_tree.query(li + 1, ri - 1, 0, n - 1, 0);\n                result.push_back(count);\n            } else if (query[0] == 2) {\n                int indexi = query[1], vali = query[2];\n                nums[indexi] = vali;\n                for (int i = max(1, indexi - 1); i <= min(n - 2, indexi + 1); ++i) {\n                    seg_tree.update(i, is_peak(nums, i), 0, n - 1, 0);\n                }\n            }\n        }\n\n        return result;\n    }\n};",
    "submit_ts": 1718509723.0
}