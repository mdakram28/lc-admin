{
    "username": "singh_deopa",
    "submission": "struct Node {\n    int cost;\n    vector<Node*> childs;\n\n    Node() {\n        cost = -1;\n        childs = vector<Node*>(26);\n    }\n};\n\nstruct Trie {\n    Node* root;\n\n    Trie() {\n        root = new Node();\n    }\n\n    void add(string& s, int& c) {\n        auto cur = root;\n\n        for (char& ch: s) {\n            int i = (int) ch - 'a';\n\n            if (!cur->childs[i]) {\n                cur->childs[i] = new Node();\n            }\n\n            cur = cur->childs[i];\n        }\n\n        if (cur->cost == -1) {\n            cur->cost = c;\n        }\n        else {\n            cur->cost = min(cur->cost, c);\n        }\n    }\n};\n\nclass Solution {\n    int dfs(vector<int>& dp, string& s, int& n, Trie* trie, int pos) {\n        if (pos == n) {\n            return 0;\n        }\n\n        int& cur = dp[pos];\n\n        if (cur != -2) {\n            return cur;\n        }\n\n        cur = -1;\n\n        auto node = trie->root;\n\n        for (int i = pos; i < n; i++) {\n            int ch = (int) s[i] - 'a';\n\n            if (!node->childs[ch]) {\n                break;\n            }\n\n            node = node->childs[ch];\n\n            if (node->cost != -1) {\n                int ret = dfs(dp, s, n, trie, i + 1);\n\n                if (ret != -1 && (cur == -1 || cur > node->cost + ret)) {\n                    cur = ret + node->cost;\n                }\n            }\n        }\n\n        return cur;\n    }\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        Trie* trie = new Trie();\n        int n = (int) target.size();\n        int m = (int) words.size();\n\n        for (int i = 0; i < m; i++) {\n            trie->add(words[i], costs[i]);\n        }\n\n        vector<int> dp(n, -2);\n\n        return dfs(dp, target, n, trie, 0);\n    }\n};",
    "submit_ts": "1720321014",
    "subm_id": "1312311102"
}