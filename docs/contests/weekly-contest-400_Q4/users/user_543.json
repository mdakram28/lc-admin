{
    "username": "games_of_code",
    "submission": "\nclass St {\npublic:\n    vector<int> t;\n    int n;\n    \n    St(vector<int>& a)\n    {\n        n = a.size();\n        t.resize(4 * n);\n        setup(a, 0, 0, n - 1);\n    }\n    \n    void setup(vector<int>& a, int node, int srt,int end)\n    {\n        if (srt == end) t[node] = a[srt];\n        else {\n            int mid = (srt + end) / 2;\n            setup(a, 2 * node + 1, srt, mid);\n            setup(a, 2 * node + 2, mid + 1, end);\n            t[node]= t[2 * node + 2] & t[2 * node + 1];\n        }\n    }\n\n    int query(int left, int right)\n    {\n        return querypro(0, 0, n - 1, left, right);\n    }\n\n    int querypro(int node, int srt, int end, int left, int right)\n    {\n        if (right < srt || end < left) return INT_MAX;\n        if (left <= srt && end <= right) {\n            return t[node];\n        }\n        int m = (srt + end) / 2;\n        int p = querypro(2 * node + 1, srt, m, left, right);\n        int q = querypro(2 * node + 2, m + 1, end, left,right);\n        int pq=p&q;\n        return pq;\n    }\n};\n\nclass Solution {\npublic:\n    \n    int minimumDifference(vector<int>& nums, int k) {\n        St tree(nums);\n        int ans = INT_MAX;\n        int n = nums.size();\n        for (int i = 0; i < n; i++) {\n            int left = i - 1, right = n - 1, mid;\n            while (right - left > 1) {\n                mid = (left + right) / 2;\n                if (tree.query(i, mid) >= k) left = mid;\n                else right = mid;\n            }\n            if (left != i - 1) ans = min(ans, abs(tree.query(i, left) - k));\n            ans = min(ans, abs(tree.query(i, right) - k));\n        }\n        return ans;\n    }\n};",
    "submit_ts": 1717299399.0
}