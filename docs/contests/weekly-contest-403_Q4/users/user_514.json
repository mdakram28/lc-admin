{
    "username": "JavOliva",
    "submission": "class Solution {\npublic:\n    int minimumSum(vector<vector<int>>& grid) {\n        int n = grid.size();\n        int m = grid[0].size();\n        int total = 0;\n        for (int i = 0; i < n; i ++){\n            for (int j = 0; j < m; j ++){\n                if (grid[i][j] == 1)\n                    total ++;\n            }\n        }\n        \n        vector<vector<int> > dp1col(m, vector<int>(m)), dp1row(n, vector<int>(n));\n        for (int i = 0; i < m; i ++){\n            for (int j = i; j < m; j ++){\n                \n                int minx = m + 1, maxx = -1, miny = n + 1, maxy = -1;\n                \n                for (int x = i; x <= j; x ++){\n                    for (int y = 0; y < n; y ++){\n                        if (grid[y][x] == 1){\n                            minx = min(minx, x);\n                            maxx = max(maxx, x);\n                            miny = min(miny, y);\n                            maxy = max(maxy, y);\n                        }\n                    }\n                }\n                if (minx != m + 1)\n                    dp1col[i][j] = (maxx - minx + 1) * (maxy - miny + 1);\n            }\n        }\n        \n        for (int i = 0; i < n; i ++){\n            for (int j = i; j < n; j ++){\n                int minx = m + 1, maxx = -1, miny = n + 1, maxy = -1;\n                \n                for (int x = 0; x < m; x ++){\n                    for (int y = i; y <= j; y ++){\n                        if (grid[y][x] == 1){\n                            minx = min(minx, x);\n                            maxx = max(maxx, x);\n                            miny = min(miny, y);\n                            maxy = max(maxy, y);\n                        }\n                    }\n                }\n                if (minx != m + 1)\n                    dp1row[i][j] = (maxx - minx + 1) * (maxy - miny + 1);\n            }\n        }\n\n        \n        int ans = 30 * 30;\n        for (int i = 0; i < m; i ++){\n            for (int j = i + 1; j + 1 < m; j ++){\n                ans = min(ans, dp1col[0][i] + dp1col[i + 1][j] + dp1col[j + 1][m - 1]);\n            }\n        }\n        \n        for (int i = 0; i < n; i ++){\n            for (int j = i + 1; j + 1 < n; j ++){\n                ans = min(ans, dp1row[0][i] + dp1row[i + 1][j] + dp1row[j + 1][n - 1]);\n            }\n        }\n        \n        for (int i = 0; i + 1 < n; i ++){\n            for (int j = 0; j + 1 < m; j ++){\n                // cortar 1-j, j + 1-m\n                \n                int min1x = n + 1, max1x = -1, min1y = m + 1, max1y = -1;\n                int min2x = n + 1, max2x = -1, min2y = m + 1, max2y = -1;\n                int min3x = n + 1, max3x = -1, min3y = m + 1, max3y = -1;\n                int min4x = n + 1, max4x = -1, min4y = m + 1, max4y = -1;\n                \n                for (int x = i + 1; x < n; x ++){\n                    for (int y = 0; y <= j; y ++){\n                        if (grid[x][y] == 1){\n                            min1x = min(min1x, x);\n                            max1x = max(max1x, x);\n                            min1y = min(min1y, y);\n                            max1y = max(max1y, y);\n                        }\n                    }\n                }\n                \n                \n                for (int x = 0; x <= i; x ++){\n                    for (int y = 0; y <= j; y ++){\n                        if (grid[x][y] == 1){\n                            min2x = min(min2x, x);\n                            max2x = max(max2x, x);\n                            min2y = min(min2y, y);\n                            max2y = max(max2y, y);\n                        }\n                    }\n                }\n                \n                \n                for (int x = i + 1; x < n; x ++){\n                    for (int y = j + 1; y < m; y ++){\n                        if (grid[x][y] == 1){\n                            min3x = min(min3x, x);\n                            max3x = max(max3x, x);\n                            min3y = min(min3y, y);\n                            max3y = max(max3y, y);\n                        }\n                    }\n                }\n                \n                for (int x = 0; x <= i; x ++){\n                    for (int y = j + 1; y < m; y ++){\n                        if (grid[x][y] == 1){\n                            min4x = min(min4x, x);\n                            max4x = max(max4x, x);\n                            min4y = min(min4y, y);\n                            max4y = max(max4y, y);\n                        }\n                    }\n                }\n                \n                int area1 = (max1x == -1 ? 0 : (max1x - min1x + 1) * (max1y - min1y + 1));\n                int area2 = (max2x == -1 ? 0 : (max2x - min2x + 1) * (max2y - min2y + 1));\n                int area3 = (max3x == -1 ? 0 : (max3x - min3x + 1) * (max3y - min3y + 1));\n                int area4 = (max4x == -1 ? 0 : (max4x - min4x + 1) * (max4y - min4y + 1));\n                \n                ans = min(ans, area1 + area2 + dp1col[j + 1][m - 1]);\n                ans = min(ans, area2 + area4 + dp1row[i + 1][n - 1]);\n                ans = min(ans, area4 + area3 + dp1col[0][j]);\n                ans = min(ans, area3 + area1 + dp1row[0][i]);\n            }\n        }\n        return ans;\n    }\n};",
    "submit_ts": 1719114807.0
}