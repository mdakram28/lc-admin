{
    "username": "Jia-Rui",
    "submission": "#define ll long long\n#define vt vector\nclass DSU{\npublic:\n    vt<ll> p;\n    vt<ll> sz;\n    DSU(int N){\n        p.resize(N);\n        sz.resize(N);\n        for(int i = 0; i<N; ++i){p[i] = i;sz[i] = 1;}\n    }\n    int find(int x){\n        if(p[x]==x){return x;}\n        return p[x] = find(p[x]);\n    }\n    void Umerge(int x, int y){\n        int px = find(x);\n        int py = find(y);\n        if(px==py){return;}\n        if (sz[px] < sz[py])swap(px, py);\n        p[py] = px;\n        sz[px]+=sz[py];\n    }\n    void merge(int x, int y){\n        int px = find(x);\n        int py = find(y);\n        p[py] = px;\n        sz[px]+=sz[py];\n    }\n};\n\n\nclass Solution {\npublic:\n    double distance_sq(double x1, double y1, double x2, double y2){\n        return (x1-x2)*(x1-x2)+(y1-y2)*(y1-y2);\n    }\n    bool canReachCorner(int X, int Y, vector<vector<int>>& circles) {\n        int n = circles.size();\n        DSU dsu(n);\n        for(int i = 0; i<n; ++i){\n            for(int j = i+1; j<n; ++j){\n                double x1 = circles[i][0], y1 = circles[i][1], r1 = circles[i][2];\n                double x2 = circles[j][0], y2 = circles[j][1], r2 = circles[j][2];\n                if(distance_sq(x1, y1, x2, y2)<=(r1+r2)*(r1+r2)){\n                    dsu.Umerge(i, j);\n                }\n            }\n        }\n        bool lb, tb, tr, lr;\n        \n        lb = tb = tr = lr = false;\n        //check lb\n        for(int i = 0; i<n; ++i){\n            bool l, b, t;\n            l = b = t = false;\n            for(int j = 0; j<n; ++j){\n                if(dsu.find(j)!=i){continue;}\n                if(circles[j][0]-circles[j][2]<=0){\n                    l = true;\n                }\n                if(circles[j][1]-circles[j][2]<=0){\n                    b = true;\n                }\n            }\n            if(l&&b){\n                lb = true;\n            }\n        }\n        //check tb\n        for(int i = 0; i<n; ++i){\n            bool l, b, t;\n            l = b = t = false;\n            for(int j = 0; j<n; ++j){\n                if(dsu.find(j)!=i){continue;}\n                if(circles[j][1]+circles[j][2]>=Y){\n                    t = true;\n                }\n                if(circles[j][1]-circles[j][2]<=0){\n                    b = true;\n                }\n            }\n            if(t&&b){\n                tb = true;\n            }\n        }\n        //check tr\n        for(int i = 0; i<n; ++i){\n            bool l, b, t, r;\n            l = b = t = r = false;\n            for(int j = 0; j<n; ++j){\n                if(dsu.find(j)!=i){continue;}\n                if(circles[j][0]+circles[j][2]>=X){\n                    r = true;\n                }\n                if(circles[j][1]+circles[j][2]>=Y){\n                    t = true;\n                }\n            }\n            if(r&&t){\n                tr = true;\n            }\n        }\n        //check lr\n        for(int i = 0; i<n; ++i){\n            bool l, b, t, r;\n            l = b = t = r = false;\n            for(int j = 0; j<n; ++j){\n                if(dsu.find(j)!=i){continue;}\n                if(circles[j][0]+circles[j][2]>=X){\n                    r = true;\n                }\n                if(circles[j][0]-circles[j][2]<=0){\n                    l = true;\n                }\n            }\n            if(r&&l){\n                lr = true;\n            }\n        }\n        if(lb||tb||tr||lr){return false;}\n        return true;\n    }\n};",
    "submit_ts": "1722137235",
    "subm_id": "1335758006"
}