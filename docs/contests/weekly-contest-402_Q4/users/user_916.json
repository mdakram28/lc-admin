{
    "username": "seedjyh",
    "submission": "\nclass BitTree {\n    int n;\n    vector<int> sums; // \u6811\u4ece[0]\u5f00\u59cb\npublic:\n    // n \u8981\u6bd4\u6700\u5927\u7684\u53ef\u80fdadd\u7684\u6570\u59271\n    explicit BitTree(int n): n(n), sums(n) {}\n    // add \u4f4d\u7f6e x \u7684\u6570\u503c\u589e\u52a0 y\n    // 0 <= x < n\n    void add(int x, int y) {\n        for (++x; x <= n; x += x & -x) {\n            sums[x - 1] += y;\n        }\n    }\n    // sum \u7edf\u8ba1\u4f4d\u7f6e 0 \u5230 \u4f4d\u7f6e x \u7684\u603b\u548c\n    // 0 <= x < n\n    int sum(int x) {\n        int ans = 0;\n        for (++x; x; x -= x & -x) {\n            ans += sums[x - 1];\n        }\n        return ans;\n    }\n};\n\nclass Solution {\npublic:\n    vector<int> countOfPeaks(vector<int>& nums, vector<vector<int>>& queries) {\n        int n = nums.size();\n        BitTree bt(n);\n        vector<bool> flag(n);\n        auto isPeak = [&](int a, int b, int c) -> bool {\n            return nums[b] > nums[a] && nums[b] > nums[c];\n        };\n        for (int i = 1; i < n - 1; i++) {\n            if (isPeak(i - 1, i, i + 1)) {\n                flag[i] = true;\n                bt.add(i, 1);\n            }\n        }\n\n        auto update = [&](int l, int m, int r) -> void {\n            if (l < 0) return;\n            if (r >= n) return;\n            bool newFlag = isPeak(l, m, r);\n            if (!flag[m] && newFlag) {\n                bt.add(m, 1);\n            } else if (flag[m] && !newFlag) {\n                bt.add(m, -1);\n            }\n            flag[m] = newFlag;\n        };\n        vector<int> ans;\n        for (auto &q : queries) {\n            if (q[0] == 1) {\n                int l = q[1] + 1;\n                int r = q[2] - 1;\n                if (l > r) {\n                    ans.push_back(0);\n                } else if (l == 0) {\n//                    cout << \"here: \" << r << \" \" << bt.sum(r) << endl;\n                    ans.push_back(bt.sum(r));\n                } else {\n                    ans.push_back(bt.sum(r) - bt.sum(l - 1));\n                }\n            } else {\n                int index = q[1];\n                int value = q[2];\n                nums[index] = value;\n                update(index - 2, index - 1, index);\n                update(index - 1, index    , index + 1);\n                update(index    , index + 1, index + 2);\n            }\n//            for (auto x : flag) {\n//                cout << x << \" \";\n//            }\n//            cout <<endl;\n        }\n        return ans;\n    }\n};\n",
    "submit_ts": 1718508184.0
}