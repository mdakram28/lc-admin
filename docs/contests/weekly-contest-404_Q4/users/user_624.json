{
    "username": "neon772",
    "submission": "#include <vector>\n#include <queue>\n#include <algorithm>\n#include <utility>\n\nusing namespace std;\n\nclass Solution {\npublic:\n    int minimumDiameterAfterMerge(vector<vector<int>>& tree1, vector<vector<int>>& tree2) {\n        auto graph1 = buildAdjList(tree1, tree1.size() + 1);\n        auto graph2 = buildAdjList(tree2, tree2.size() + 1);\n        auto [dia1, ht1] = getDiameterAndHeight(graph1);\n        auto [dia2, ht2] = getDiameterAndHeight(graph2);\n        int combinedDia = max({dia1, dia2, ht1 + ht2 + 1});\n        // cout<<\n        return combinedDia;\n    }\n\nprivate:\n    vector<vector<int>> buildAdjList(const vector<vector<int>>& edges, int n) {\n        vector<vector<int>> adjList(n);\n        for (const auto& edge : edges) {\n            adjList[edge[0]].emplace_back(edge[1]);\n            adjList[edge[1]].emplace_back(edge[0]);\n        }\n        return adjList;\n    }\n\n    pair<int, int> performBFS(const vector<vector<int>>& adjList, int start) {\n        int n = adjList.size();\n        vector<int> distances(n, -1);\n        queue<int> q;\n        q.push(start);\n        distances[start] = 0;\n\n        int farthestNode = start;\n        int maxDist = 0;\n\n        while (!q.empty()) {\n            int currentNode = q.front();\n            q.pop();\n\n            for (int neighbor : adjList[currentNode]) {\n                if (distances[neighbor] == -1) {\n                    distances[neighbor] = distances[currentNode] + 1;\n                    q.push(neighbor);\n\n                    if (distances[neighbor] > maxDist) {\n                        maxDist = distances[neighbor];\n                        farthestNode = neighbor;\n                    }\n                }\n            }\n        }\n\n        return {farthestNode, maxDist};\n    }\n\n    pair<int, int> getDiameterAndHeight(const vector<vector<int>>& adjList) {\n        auto [farthest1, _] = performBFS(adjList, 0);\n        auto [farthest2, diameter] = performBFS(adjList, farthest1);\n        int height = (diameter + 1) / 2;\n        return {diameter, height};\n    }\n};\n",
    "submit_ts": 1719719947.0
}