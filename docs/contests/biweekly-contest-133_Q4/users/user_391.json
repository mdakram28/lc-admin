{
    "username": "anshukawlecha",
    "submission": "import java.util.*;\n\nclass Solution {\n    private static final int MOD_VAL = 1_000_000_007;\n    private static final int MAX_INV = 400;\n\n    public int numberOfPermutations(int total, int[][] conditions) {\n        Map<Integer, Integer> conditionMap = new HashMap<>();\n        for (int[] condition : conditions) {\n            conditionMap.put(condition[0] + 1, condition[1]);\n        }\n\n        long[][] dp = new long[total + 1][MAX_INV + 1];\n        dp[0][0] = 1;\n\n        for (int len=1; len<=total; len++) {\n            for (int inv = 0; inv <= MAX_INV; inv++) {\n                for (int pos = 0; pos < len; pos++) {\n                    int previousInv = inv - pos;\n                    if (previousInv >= 0) {\n                        dp[len][inv] = (dp[len][inv] + dp[len - 1][previousInv]) % MOD_VAL;\n                    }\n                }\n            }\n            if (conditionMap.containsKey(len)) {\n                int requiredInv = conditionMap.get(len);\n                for (int inv=0; inv<=MAX_INV; inv++) {\n                    if (inv != requiredInv) {\n                        dp[len][inv] = 0;\n                    }\n                }\n            }\n        }\n\n        long totalPermutations = 0;\n        for (long count : dp[total]) {\n            totalPermutations = (totalPermutations + count) % MOD_VAL;\n        }\n        return (int) totalPermutations;\n    }\n}\n",
    "submit_ts": "1719070106",
    "subm_id": "1296814672"
}