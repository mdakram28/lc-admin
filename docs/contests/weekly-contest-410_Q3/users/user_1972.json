{
    "username": "Manoj18M",
    "submission": "class Solution {\n    private static final int MOD = 1000000007;\n    private int[][][] dp;\n    private void init(int n) {\n        dp = new int[n][51][51];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < 51; j++) {\n                Arrays.fill(dp[i][j], -1);\n            }\n        }\n    }\n    private int findPairs(int[] nums, int idx, int prev1, int prev2) {\n        if (idx >= nums.length) {\n            return 1;\n        }\n\n        if (dp[idx][prev1][prev2] != -1) {\n            return dp[idx][prev1][prev2];\n        }\n\n        int ans = 0;\n        for (int i = 0; i <= nums[idx]; i++) {\n            int arr1_val = i;\n            int arr2_val = nums[idx] - i;\n            if (arr1_val >= prev1 && arr2_val <= prev2) {\n                ans = (ans + findPairs(nums, idx + 1, arr1_val, arr2_val)) % MOD;\n            }\n        }\n\n        dp[idx][prev1][prev2] = ans;\n        return ans;\n    }\n\n    public int countOfPairs(int[] nums) {\n        int n = nums.length;\n        init(n);\n        return findPairs(nums, 0, 0, 50);\n    }\n}\n",
    "submit_ts": "1723346799",
    "subm_id": "1351585419"
}