{
    "username": "pragg",
    "submission": "class Solution {\n    public long maximumValueSum(int[][] board) {\n        int m = board.length;\n        int n = board[0].length;\n        \n        // store three largest for every row\n        List<int[]>[] rowMax = new ArrayList[m];\n        for (int i = 0; i < m; i++) {\n            rowMax[i] = new ArrayList<>();\n            PriorityQueue<int[]> pq = new PriorityQueue<>((a, b) -> Integer.compare(a[0], b[0]));\n            for (int j = 0; j < n; j++) {\n                pq.offer(new int[]{board[i][j], j});\n                if (pq.size() > 3) {\n                    pq.poll();\n                }\n            }\n            rowMax[i].addAll(pq);\n        }\n        \n        long maxSum = Long.MIN_VALUE;\n        for (int r1 = 0; r1 < m; r1++) {\n            for (int r2 = r1 + 1; r2 < m; r2++) {\n                for (int r3 = r2 + 1; r3 < m; r3++) {\n                    for (int[] val1 : rowMax[r1]) {\n                        for (int[] val2 : rowMax[r2]) {\n                            for (int[] val3 : rowMax[r3]) {\n                                if (val1[1] == val2[1] || val1[1] == val3[1] || val2[1] == val3[1]){\n                                    continue;\n                                }\n                                long sum = (long)val1[0] + val2[0] + val3[0];\n                                maxSum = Math.max(maxSum, sum);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        return maxSum;\n        \n    }\n}",
    "submit_ts": "1723909572",
    "subm_id": "1359197610"
}