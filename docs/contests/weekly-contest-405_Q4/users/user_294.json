{
    "username": "mastoori1234",
    "submission": "typedef long long int ll;\n\nconst ll INF = 1e15;\n\nstruct Node {\n    ll val;\n    \n    unordered_map<char,Node*> mp;\n    \n    Node() : val(INF) {}\n};\n\nNode* root;\n\nvoid insert( Node* nodeptr, ll pos, string & s, ll & cost) {\n        \n    if(pos==s.length()) {\n        ll & val = nodeptr->val;\n        val = min( val, cost);\n        return;\n    }\n    \n    unordered_map<char,Node*> & mp = nodeptr->mp;\n    \n    if(mp.find(s[pos])==mp.end()) {\n        mp[s[pos]] = new Node();\n    }\n    \n    insert( mp[s[pos]], pos+1, s, cost);\n}\n\nvoid match( Node* nodeptr, ll pos, string & s, ll & tot, vector<ll> & res) {\n    \n    unordered_map<char,Node*> & mp = nodeptr->mp;\n    \n    if(mp.find(s[pos])==mp.end()) {\n        return;\n    }\n    \n    nodeptr = mp[s[pos]];\n    ll & cost = nodeptr->val;\n    \n    if(cost!=INF) {\n        res[pos] = min( res[pos], cost+tot);\n    }\n    \n    match( nodeptr, pos+1, s, tot, res);\n}\n\n\nclass Solution {\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        \n        ll n = target.length();\n        ll m = words.size();\n        \n        vector<ll> res( n, INF);\n        \n        root = new Node();\n        \n        for( ll i=0; i<m; i++) {\n            ll val = costs[i];\n            insert( root, 0, words[i], val);\n        }\n        \n        for( ll i=0; i<n; i++) {\n            ll tot = 0;\n            if(i==0) {\n                match( root, i, target, tot, res);\n            } else if(res[i-1]!=INF){\n                tot = res[i-1];\n                match( root, i, target, tot, res);\n            }\n        }\n        \n        return (res[n-1]==INF)?(-1):res[n-1];\n    }\n};",
    "submit_ts": "1720321490",
    "subm_id": "1312324257"
}