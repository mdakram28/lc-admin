{
    "username": "Kalki4568",
    "submission": "class Solution:\n    def __init__(self):\n        # I am initializing a dictionary for memoization, converted this to cricket scenario\n        self.dp = {}\n\n    def solve(self, dsy, kohli, sachin, dsystair):\n        if kohli > dsy + 5:\n            return 0\n        if sachin > 31:\n            return 0\n        if kohli in self.dp and self.dp[kohli][sachin][dsystair] != -1:\n            return self.dp[kohli][sachin][dsystair]\n\n        # Hre I am initializing the answer variable \n        ans = int(kohli == dsy)\n        # Now I  am checking if dsystair is True\n        if dsystair:\n            #Now I  am recursively calling solve with modified parameters\n            ans += self.solve(dsy, kohli - 1, sachin, 0)\n        # her i am checking if it's possible to take the next step\n        if kohli + (1 << sachin) <= dsy + 1:\n            # Now again i am recursively calling solve with modified parameters\n            ans += self.solve(dsy, kohli + (1 << sachin), sachin + 1, 1)\n\n        # Nopw i would be  initializing dp if it doesn't exist\n        if kohli not in self.dp:\n            self.dp[kohli] = [[-1] * 2 for _ in range(32)]\n        # Now I am  storing the calculated answer in dp\n        self.dp[kohli][sachin][dsystair] = ans\n        return ans\n\n    def waysToReachStair(self, dsy):\n        # At last  calling the solve method with initial parameters\n        return self.solve(dsy, 1, 0, 1)\n",
    "submit_ts": "1716090374",
    "subm_id": "1261865767"
}