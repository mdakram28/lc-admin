{
    "username": "NayeemShaik29",
    "submission": "import java.util.Arrays;\n\nclass Solution {\n    private static final int MOD = 1000000007;\n\n    public int numberOfPermutations(int n, int[][] requirements) {\n        // Finding max inversion count\n        int maxInversions = 0;\n        for (int[] req : requirements) {\n            maxInversions = Math.max(maxInversions, req[1]);\n        }\n        \n        // Sorting requirements based on end index\n        Arrays.sort(requirements, (a, b) -> Integer.compare(a[0], b[0]));\n        \n        // DP array\n        int[][][] dp = new int[n + 1][maxInversions + 1][requirements.length + 1];\n        dp[0][0][0] = 1;\n        \n        // DP process\n        for (int i = 1; i <= n; i++) {\n            for (int j = 0; j <= maxInversions; j++) {\n                for (int k = 0; k <= requirements.length; k++) {\n                    if (dp[i - 1][j][k] == 0) continue;\n                    \n                    for (int num = 0; num < i; num++) {\n                        int inv = j + num;\n                        if (inv > maxInversions) break;\n                        \n                        int newK = k;\n                        if (newK < requirements.length && requirements[newK][0] == i - 1) {\n                            if (inv == requirements[newK][1]) {\n                                newK++;\n                            } else {\n                                continue;\n                            }\n                        }\n                        \n                        dp[i][inv][newK] = (dp[i][inv][newK] + dp[i - 1][j][k]) % MOD;\n                    }\n                }\n            }\n        }\n        \n        // Collecting result\n        int result = 0;\n        for (int j = 0; j <= maxInversions; j++) {\n            result = (result + dp[n][j][requirements.length]) % MOD;\n        }\n        \n        return result;\n    }\n}\n",
    "submit_ts": "1719069158",
    "subm_id": "1296788294"
}