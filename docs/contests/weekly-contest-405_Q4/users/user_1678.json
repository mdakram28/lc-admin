{
    "username": "guptaparas061",
    "submission": "class Solution { \npublic: \n    struct TreeNode { \n        vector<pair<int, int>> vp;\n        unordered_map<char, TreeNode*> ump; \n    }; \n    class Tree { \n    public: \n        TreeNode* root; \n        Tree() { root = new TreeNode(); } \n        void insert(string& word, int index, int cost) { \n            TreeNode* node = root; \n            for (char c : word) { \n                if (!node -> ump.count(c)) \n                    node -> ump[c] = new TreeNode(); \n                node = node -> ump[c]; \n            } \n            node -> vp.push_back({index, cost}); \n        } \n    }; \n    int minimumCost(string target, vector<string>& words, vector<int>& costs) { \n        int n = target.size(), idx, cost, l;\n        vector<int> dp(n + 1, INT_MAX); \n        dp[0] = 0; \n        Tree tree; \n        for (int i = 0; i < words.size(); i++) { \n            tree.insert(words[i], i, costs[i]); \n        } \n        for (int i = 0; i < n; i++) { \n            if (dp[i] == INT_MAX) continue; \n            TreeNode* node = tree.root; \n            for (int j = i; j < n; j++) { \n                if (!node -> ump.count(target[j])) break; \n                node = node -> ump[target[j]]; \n                for (auto& p : node -> vp) { \n                    idx = p.first; \n                    cost = p.second; \n                    l = words[idx].size(); \n                    if (n >= i + l) { \n                        dp[i + l] = min(dp[i + l], dp[i] + cost); \n                    } \n                } \n            } \n        }\n        return dp[n] == INT_MAX ? -1 : dp[n]; \n    } \n};",
    "submit_ts": "1720324776",
    "subm_id": "1312407981"
}