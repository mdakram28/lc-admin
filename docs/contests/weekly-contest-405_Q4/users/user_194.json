{
    "username": "abhishekvaish",
    "submission": "from functools import cache\nclass Node:\n    def __init__(self, char,cost=0):\n        self.char = char\n        self.cost = cost \n        self.children = [None]*26\n        \n\nclass Solution:\n    def minimumCost(self, target: str, words: List[str], costs: List[int]) -> int:\n        root = Node('')\n        \n        for idx,word in enumerate(words):\n            node = root\n            for c in word:\n                i = ord(c)-ord('a')\n                if node.children[i] is None:\n                    node.children[i] = Node(c)\n                node = node.children[i]\n            if node.cost == 0:\n                node.cost = costs[idx]\n            else:\n                node.cost = min(node.cost , costs[idx])\n        \n        @cache\n        def DP(i):\n            if i == n:\n                return 0 \n            \n            node = root \n            mn = float('inf')\n            for j in range(i,n):\n                c = ord(target[j])-ord('a')\n                node = node.children[c]\n                if node is None:\n                    break\n                if node.cost != 0:\n                    mn = min(mn, node.cost + DP(j+1))\n            \n            return mn \n        \n            \n        n = len(target)\n        mn = DP(0)\n        if mn == float('inf'): return -1\n        return mn\n        \n        \n            \n                \n        ",
    "submit_ts": "1720321676",
    "subm_id": "1312329334"
}