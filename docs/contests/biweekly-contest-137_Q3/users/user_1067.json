{
    "username": "Khushi Kumari",
    "submission": "#include <vector>\n#include <algorithm>\n#include <climits>\nusing namespace std;\n\nclass Solution {\npublic:\n    long long maximumValueSum(vector<vector<int>>& board) {\n        int m = board.size();\nint n = board[0].size();\nlong long maxSum = LLONG_MIN;\n\n// Initialize data structures for storing the best values and columns\nvector<vector<long long>> bestValues(m, vector<long long>(3, LLONG_MIN));\nvector<vector<int>> bestColumns(m, vector<int>(3, -1));\n\n// Populate bestValues and bestColumns for each row\nfor (int i = 0; i < m; ++i) {\n    vector<pair<long long, int>> colValues;\n    \n    // Collect column values and their indices\n    for (int j = 0; j < n; ++j) {\n        colValues.emplace_back(board[i][j], j);\n    }\n    \n    // Sort column values in descending order\n    sort(colValues.rbegin(), colValues.rend()); \n\n    // Store the top 3 values and their corresponding columns\n    for (int k = 0; k < 3 && k < n; ++k) {\n        bestValues[i][k] = colValues[k].first;\n        bestColumns[i][k] = colValues[k].second;\n    }\n}\n\n// Function to check if columns are different\nauto areColumnsDifferent = [](int c1, int c2, int c3) {\n    return c1 != c2 && c1 != c3 && c2 != c3;\n};\n\n// Iterate through all combinations of 3 different rows\nfor (int r1 = 0; r1 < m; ++r1) {\n    for (int r2 = r1 + 1; r2 < m; ++r2) {\n        for (int r3 = r2 + 1; r3 < m; ++r3) {\n            // Try all combinations of top 3 values from each row\n            for (int i = 0; i < 3; ++i) {\n                for (int j = 0; j < 3; ++j) {\n                    if (bestColumns[r2][j] == bestColumns[r1][i]) continue;\n                    \n                    for (int k = 0; k < 3; ++k) {\n                        if (bestColumns[r3][k] == bestColumns[r1][i] || bestColumns[r3][k] == bestColumns[r2][j]) continue;\n\n                        // Compute the sum and update maxSum if needed\n                        long long currentSum = bestValues[r1][i] + bestValues[r2][j] + bestValues[r3][k];\n                        maxSum = max(maxSum, currentSum);\n                    }\n                }\n            }\n        }\n    }\n}\n\nreturn maxSum;\n    }\n};\n",
    "submit_ts": "1723909990",
    "subm_id": "1359213190"
}