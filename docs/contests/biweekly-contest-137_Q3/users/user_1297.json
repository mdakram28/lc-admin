{
    "username": "abhi_i788",
    "submission": "class Solution {\npublic:\n    long long maximumValueSum(vector<vector<int>>& board) {\n        long long m = board.size();\n        long long n = board[0].size();\n        long long maxSum = LLONG_MIN;\n\n        vector<vector<pair<long long, long long>>> colHeaps(n);\n\n        for (long long j = 0; j < n; j++) {\n            priority_queue<pair<long long, long long>> pq;\n            for (long long i = 0; i < m; i++) {\n                pq.push({board[i][j], i});\n            }\n            while (!pq.empty() && colHeaps[j].size() < 3) {\n                colHeaps[j].push_back(pq.top());\n                pq.pop();\n            }\n        }\n\n        for (long long i = 0; i < n; i++) {\n            for (long long j = i + 1; j < n; j++) {\n                for (long long k = j + 1; k < n; k++) {\n                    long long currMax = LLONG_MIN;\n                    for (auto& a : colHeaps[i]) {\n                        for (auto& b : colHeaps[j]) {\n                            if (a.second == b.second) continue;\n                            for (auto& c : colHeaps[k]) {\n                                if (c.second == a.second || c.second == b.second) continue;\n                                long long sum = a.first + b.first + c.first;\n                                currMax = max(currMax, sum);\n                            }\n                        }\n                    }\n                    maxSum = max(maxSum, currMax);\n                }\n            }\n        }\n\n        return maxSum;\n    }\n};",
    "submit_ts": "1723909146",
    "subm_id": "1359181332"
}