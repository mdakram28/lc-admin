{
    "username": "varunreddyforever",
    "submission": "class FenwickTree:\n    def __init__(self, size):\n        self.size = size\n        self.tree = [0] * (size + 1)\n    \n    def update(self, index, delta):\n        while index <= self.size:\n            self.tree[index] += delta\n            index += index & -index\n    \n    def prefix_sum(self, index):\n        result = 0\n        while index > 0:\n            result += self.tree[index]\n            index -= index & -index\n        return result\n    \n    def range_sum(self, left, right):\n        return self.prefix_sum(right) - self.prefix_sum(left - 1)\n\n\nclass Solution:\n    def countOfPeaks(self, nums: List[int], queries: List[List[int]]) -> List[int]:\n        def update(ind):\n            val=ft.range_sum(ind,ind)\n            if nums[ind]>nums[ind-1] and nums[ind]>nums[ind+1]:\n                if val==0:\n                    ft.update(ind,1)\n            else:\n                if val==1:\n                    ft.update(ind,-1)\n            \n        n=len(nums)\n        ft = FenwickTree(n)\n        for i in range(1,n-1):\n            if nums[i]>nums[i-1] and nums[i]>nums[i+1]:\n                ft.update(i,1)\n            \n        ans=[]\n        for i in queries:\n            if i[0]==1:\n                if i[2]-i[1]<=1:\n                    ans.append(0)\n                else:\n                    ans.append(ft.range_sum(i[1]+1,i[2]-1))\n            else:\n                nums[i[1]]=i[2]\n                if i[1]>0 and i[1]<n-1:\n                    update(i[1])\n                if i[1]-1>0:\n                    update(i[1]-1)\n                if i[1]+1<n-1:\n                    update(i[1]+1)\n        return ans\n                \n            \n\n            ",
    "submit_ts": 1718506737.0
}