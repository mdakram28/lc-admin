{
    "username": "shaileshk11",
    "submission": "class Solution {\n    public int numberOfAlternatingGroups(int[] nums, int k) {\n        int ans = 0;\n        int left = 0;\n        int right = 1;\n\n        while (right < nums.length + k && left < nums.length) {\n            right = helper(nums, right, k);\n            ans += calculate(left, right, k);\n            left = right;\n            right = left + 1;\n        }\n\n        return ans;\n    }\n\n    private int helper(int[] nums, int right, int k) {\n        int temp = right % nums.length;\n        \n        while (nums[temp] != nums[(temp - 1 + nums.length) % nums.length] && (right < (nums.length + k - 1))) {\n            right++;\n            temp = right % nums.length;\n        }\n\n        return right;\n    }\n\n    private int calculate(int left, int right, int k) {\n        return Math.max(right-left-k+1, 0);\n    }\n}\n",
    "submit_ts": "1720281211",
    "subm_id": "1311817018"
}