{
    "username": "rajkaustuk",
    "submission": "class Solution {\npublic:\n    bool bfs(const vector<vector<int>>& graph, int start, int target1, int target2, int total_nodes) {\n        queue<int> q;\n        vector<int> visited(total_nodes + 4, 0);\n        q.push(start);\n        visited[start] = 1;\n        \n        while (!q.empty()) {\n            int current = q.front();\n            q.pop();\n            for (int neighbor : graph[current]) {\n                if (!visited[neighbor]) {\n                    q.push(neighbor);\n                    visited[neighbor] = 1;\n                }\n            }\n        }\n        return visited[target1] || visited[target2];\n    }\n\n    bool canReachCorner(int X, int Y, vector<vector<int>>& circleParams) {\n        int numCircles = circleParams.size();\n        vector<pair<pair<int, int>, int>> circles(numCircles);\n        vector<vector<int>> graph(numCircles + 4);\n        \n        for (int i = 0; i < numCircles; ++i) {\n            circles[i].first.first = circleParams[i][0];\n            circles[i].first.second = circleParams[i][1];\n            circles[i].second = circleParams[i][2];\n        }\n\n        for (int i = 0; i < numCircles; ++i) {\n            int x = circles[i].first.first;\n            int y = circles[i].first.second;\n            int radius = circles[i].second;\n            \n            if (x <= radius) {\n                graph[numCircles].push_back(i);\n                graph[i].push_back(numCircles);\n            }\n            if (X - x <= radius) {\n                graph[numCircles + 2].push_back(i);\n                graph[i].push_back(numCircles + 2);\n            }\n            if (y <= radius) {\n                graph[numCircles + 1].push_back(i);\n                graph[i].push_back(numCircles + 1);\n            }\n            if (Y - y <= radius) {\n                graph[numCircles + 3].push_back(i);\n                graph[i].push_back(numCircles + 3);\n            }\n            for (int j = i + 1; j < numCircles; ++j) {\n                int x2 = circles[j].first.first;\n                int y2 = circles[j].first.second;\n                int radius2 = circles[j].second;\n                double distance = sqrt(pow(x - x2, 2) + pow(y - y2, 2));\n                if (radius + radius2 >= distance) {\n                    graph[i].push_back(j);\n                    graph[j].push_back(i);\n                }\n            }\n        }\n\n        bool isBlocked = false;\n        isBlocked = max(isBlocked, bfs(graph, numCircles, numCircles + 1, numCircles + 2, numCircles + 4));\n        isBlocked = max(isBlocked, bfs(graph, numCircles + 3, numCircles + 2, numCircles + 1, numCircles + 4));\n\n        return !isBlocked;\n    }\n};\n",
    "submit_ts": "1722136837",
    "subm_id": "1335746405"
}