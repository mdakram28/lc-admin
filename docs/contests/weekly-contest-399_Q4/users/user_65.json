{
    "username": "KyouMoKawaii",
    "submission": "#include <bits/stdc++.h>\n\nusing namespace std;\n\n#pragma GCC diagnostic push\n#pragma GCC diagnostic ignored \"-Wpedantic\"\n\n#ifndef ATCODER_MODINT_HPP\n#define ATCODER_MODINT_HPP 1\n\n#include <cassert>\n#include <numeric>\n#include <type_traits>\n\n#ifdef _MSC_VER\n#include <intrin.h>\n#endif\n\n#ifndef ATCODER_INTERNAL_MATH_HPP\n#define ATCODER_INTERNAL_MATH_HPP 1\n\n#include <utility>\n\n#ifdef _MSC_VER\n#include <intrin.h>\n#endif\n\nnamespace atcoder {\n\nnamespace internal {\n\n// @param m `1 <= m`\n// @return x mod m\nconstexpr long long safe_mod(long long x, long long m) {\n  x %= m;\n  if (x < 0) x += m;\n  return x;\n}\n\n// Fast modular multiplication by barrett reduction\n// Reference: https://en.wikipedia.org/wiki/Barrett_reduction\n// NOTE: reconsider after Ice Lake\nstruct barrett {\n  unsigned int _m;\n  unsigned long long im;\n\n  // @param m `1 <= m < 2^31`\n  explicit barrett(unsigned int m) : _m(m), im((unsigned long long)(-1) / m + 1) {}\n\n  // @return m\n  unsigned int umod() const { return _m; }\n\n  // @param a `0 <= a < m`\n  // @param b `0 <= b < m`\n  // @return `a * b % m`\n  unsigned int mul(unsigned int a, unsigned int b) const {\n    // [1] m = 1\n    // a = b = im = 0, so okay\n\n    // [2] m >= 2\n    // im = ceil(2^64 / m)\n    // -> im * m = 2^64 + r (0 <= r < m)\n    // let z = a*b = c*m + d (0 <= c, d < m)\n    // a*b * im = (c*m + d) * im = c*(im*m) + d*im = c*2^64 + c*r + d*im\n    // c*r + d*im < m * m + m * im < m * m + 2^64 + m <= 2^64 + m * (m + 1) < 2^64 * 2\n    // ((ab * im) >> 64) == c or c + 1\n    unsigned long long z = a;\n    z *= b;\n#ifdef _MSC_VER\n    unsigned long long x;\n    _umul128(z, im, &x);\n#else\n    unsigned long long x =\n        (unsigned long long)(((unsigned __int128)(z)*im) >> 64);\n#endif\n    unsigned int v = (unsigned int)(z - x * _m);\n    if (_m <= v) v += _m;\n    return v;\n  }\n};\n\n// @param n `0 <= n`\n// @param m `1 <= m`\n// @return `(x ** n) % m`\nconstexpr long long pow_mod_constexpr(long long x, long long n, int m) {\n  if (m == 1) return 0;\n  unsigned int _m = (unsigned int)(m);\n  unsigned long long r = 1;\n  unsigned long long y = safe_mod(x, m);\n  while (n) {\n    if (n & 1) r = (r * y) % _m;\n    y = (y * y) % _m;\n    n >>= 1;\n  }\n  return r;\n}\n\n// Reference:\n// M. Forisek and J. Jancina,\n// Fast Primality Testing for Integers That Fit into a Machine Word\n// @param n `0 <= n`\nconstexpr bool is_prime_constexpr(int n) {\n  if (n <= 1) return false;\n  if (n == 2 || n == 7 || n == 61) return true;\n  if (n % 2 == 0) return false;\n  long long d = n - 1;\n  while (d % 2 == 0) d /= 2;\n  constexpr long long bases[3] = {2, 7, 61};\n  for (long long a : bases) {\n    long long t = d;\n    long long y = pow_mod_constexpr(a, t, n);\n    while (t != n - 1 && y != 1 && y != n - 1) {\n      y = y * y % n;\n      t <<= 1;\n    }\n    if (y != n - 1 && t % 2 == 0) {\n      return false;\n    }\n  }\n  return true;\n}\ntemplate <int n>\nconstexpr bool is_prime = is_prime_constexpr(n);\n\n// @param b `1 <= b`\n// @return pair(g, x) s.t. g = gcd(a, b), xa = g (mod b), 0 <= x < b/g\nconstexpr std::pair<long long, long long> inv_gcd(long long a, long long b) {\n  a = safe_mod(a, b);\n  if (a == 0) return {b, 0};\n\n  // Contracts:\n  // [1] s - m0 * a = 0 (mod b)\n  // [2] t - m1 * a = 0 (mod b)\n  // [3] s * |m1| + t * |m0| <= b\n  long long s = b, t = a;\n  long long m0 = 0, m1 = 1;\n\n  while (t) {\n    long long u = s / t;\n    s -= t * u;\n    m0 -= m1 * u;  // |m1 * u| <= |m1| * s <= b\n\n    // [3]:\n    // (s - t * u) * |m1| + t * |m0 - m1 * u|\n    // <= s * |m1| - t * u * |m1| + t * (|m0| + |m1| * u)\n    // = s * |m1| + t * |m0| <= b\n\n    auto tmp = s;\n    s = t;\n    t = tmp;\n    tmp = m0;\n    m0 = m1;\n    m1 = tmp;\n  }\n  // by [3]: |m0| <= b/g\n  // by g != b: |m0| < b/g\n  if (m0 < 0) m0 += b / s;\n  return {s, m0};\n}\n\n// Compile time primitive root\n// @param m must be prime\n// @return primitive root (and minimum in now)\nconstexpr int primitive_root_constexpr(int m) {\n  if (m == 2) return 1;\n  if (m == 167772161) return 3;\n  if (m == 469762049) return 3;\n  if (m == 754974721) return 11;\n  if (m == 998244353) return 3;\n  int divs[20] = {};\n  divs[0] = 2;\n  int cnt = 1;\n  int x = (m - 1) / 2;\n  while (x % 2 == 0) x /= 2;\n  for (int i = 3; (long long)(i)*i <= x; i += 2) {\n    if (x % i == 0) {\n      divs[cnt++] = i;\n      while (x % i == 0) {\n        x /= i;\n      }\n    }\n  }\n  if (x > 1) {\n    divs[cnt++] = x;\n  }\n  for (int g = 2;; g++) {\n    bool ok = true;\n    for (int i = 0; i < cnt; i++) {\n      if (pow_mod_constexpr(g, (m - 1) / divs[i], m) == 1) {\n        ok = false;\n        break;\n      }\n    }\n    if (ok) return g;\n  }\n}\ntemplate <int m>\nconstexpr int primitive_root = primitive_root_constexpr(m);\n\n// @param n `n < 2^32`\n// @param m `1 <= m < 2^32`\n// @return sum_{i=0}^{n-1} floor((ai + b) / m) (mod 2^64)\nunsigned long long floor_sum_unsigned(unsigned long long n,\n                                      unsigned long long m,\n                                      unsigned long long a,\n                                      unsigned long long b) {\n  unsigned long long ans = 0;\n  while (true) {\n    if (a >= m) {\n      ans += n * (n - 1) / 2 * (a / m);\n      a %= m;\n    }\n    if (b >= m) {\n      ans += n * (b / m);\n      b %= m;\n    }\n\n    unsigned long long y_max = a * n + b;\n    if (y_max < m) break;\n    // y_max < m * (n + 1)\n    // floor(y_max / m) <= n\n    n = (unsigned long long)(y_max / m);\n    b = (unsigned long long)(y_max % m);\n    std::swap(m, a);\n  }\n  return ans;\n}\n\n}  // namespace internal\n\n}  // namespace atcoder\n\n#endif  // ATCODER_INTERNAL_MATH_HPP\n\n#ifndef ATCODER_INTERNAL_TYPE_TRAITS_HPP\n#define ATCODER_INTERNAL_TYPE_TRAITS_HPP 1\n\n#include <cassert>\n#include <numeric>\n#include <type_traits>\n\nnamespace atcoder {\n\nnamespace internal {\n\n#ifndef _MSC_VER\ntemplate <class T>\nusing is_signed_int128 =\n    typename std::conditional<std::is_same<T, __int128_t>::value ||\n                                  std::is_same<T, __int128>::value,\n                              std::true_type,\n                              std::false_type>::type;\n\ntemplate <class T>\nusing is_unsigned_int128 =\n    typename std::conditional<std::is_same<T, __uint128_t>::value ||\n                                  std::is_same<T, unsigned __int128>::value,\n                              std::true_type,\n                              std::false_type>::type;\n\ntemplate <class T>\nusing make_unsigned_int128 =\n    typename std::conditional<std::is_same<T, __int128_t>::value,\n                              __uint128_t,\n                              unsigned __int128>;\n\ntemplate <class T>\nusing is_integral = typename std::conditional<std::is_integral<T>::value ||\n                                                  is_signed_int128<T>::value ||\n                                                  is_unsigned_int128<T>::value,\n                                              std::true_type,\n                                              std::false_type>::type;\n\ntemplate <class T>\nusing is_signed_int = typename std::conditional<(is_integral<T>::value &&\n                                                 std::is_signed<T>::value) ||\n                                                    is_signed_int128<T>::value,\n                                                std::true_type,\n                                                std::false_type>::type;\n\ntemplate <class T>\nusing is_unsigned_int =\n    typename std::conditional<(is_integral<T>::value &&\n                               std::is_unsigned<T>::value) ||\n                                  is_unsigned_int128<T>::value,\n                              std::true_type,\n                              std::false_type>::type;\n\ntemplate <class T>\nusing to_unsigned = typename std::conditional<\n    is_signed_int128<T>::value,\n    make_unsigned_int128<T>,\n    typename std::conditional<std::is_signed<T>::value,\n                              std::make_unsigned<T>,\n                              std::common_type<T>>::type>::type;\n\n#else\n\ntemplate <class T>\nusing is_integral = typename std::is_integral<T>;\n\ntemplate <class T>\nusing is_signed_int =\n    typename std::conditional<is_integral<T>::value && std::is_signed<T>::value,\n                              std::true_type,\n                              std::false_type>::type;\n\ntemplate <class T>\nusing is_unsigned_int =\n    typename std::conditional<is_integral<T>::value &&\n                                  std::is_unsigned<T>::value,\n                              std::true_type,\n                              std::false_type>::type;\n\ntemplate <class T>\nusing to_unsigned = typename std::conditional<is_signed_int<T>::value,\n                                              std::make_unsigned<T>,\n                                              std::common_type<T>>::type;\n\n#endif\n\ntemplate <class T>\nusing is_signed_int_t = std::enable_if_t<is_signed_int<T>::value>;\n\ntemplate <class T>\nusing is_unsigned_int_t = std::enable_if_t<is_unsigned_int<T>::value>;\n\ntemplate <class T>\nusing to_unsigned_t = typename to_unsigned<T>::type;\n\n}  // namespace internal\n\n}  // namespace atcoder\n\n#endif  // ATCODER_INTERNAL_TYPE_TRAITS_HPP\n\nnamespace atcoder {\n\nnamespace internal {\n\nstruct modint_base {};\nstruct static_modint_base : modint_base {};\n\ntemplate <class T>\nusing is_modint = std::is_base_of<modint_base, T>;\ntemplate <class T>\nusing is_modint_t = std::enable_if_t<is_modint<T>::value>;\n\n}  // namespace internal\n\ntemplate <int m, std::enable_if_t<(1 <= m)>* = nullptr>\nstruct static_modint : internal::static_modint_base {\n  using mint = static_modint;\n\n public:\n  static constexpr int mod() { return m; }\n  static mint raw(int v) {\n    mint x;\n    x._v = v;\n    return x;\n  }\n\n  static_modint() : _v(0) {}\n  template <class T, internal::is_signed_int_t<T>* = nullptr>\n  static_modint(T v) {\n    long long x = (long long)(v % (long long)(umod()));\n    if (x < 0) x += umod();\n    _v = (unsigned int)(x);\n  }\n  template <class T, internal::is_unsigned_int_t<T>* = nullptr>\n  static_modint(T v) {\n    _v = (unsigned int)(v % umod());\n  }\n\n  unsigned int val() const { return _v; }\n\n  mint& operator++() {\n    _v++;\n    if (_v == umod()) _v = 0;\n    return *this;\n  }\n  mint& operator--() {\n    if (_v == 0) _v = umod();\n    _v--;\n    return *this;\n  }\n  mint operator++(int) {\n    mint result = *this;\n    ++*this;\n    return result;\n  }\n  mint operator--(int) {\n    mint result = *this;\n    --*this;\n    return result;\n  }\n\n  mint& operator+=(const mint& rhs) {\n    _v += rhs._v;\n    if (_v >= umod()) _v -= umod();\n    return *this;\n  }\n  mint& operator-=(const mint& rhs) {\n    _v -= rhs._v;\n    if (_v >= umod()) _v += umod();\n    return *this;\n  }\n  mint& operator*=(const mint& rhs) {\n    unsigned long long z = _v;\n    z *= rhs._v;\n    _v = (unsigned int)(z % umod());\n    return *this;\n  }\n  mint& operator/=(const mint& rhs) { return *this = *this * rhs.inv(); }\n\n  mint operator+() const { return *this; }\n  mint operator-() const { return mint() - *this; }\n\n  mint pow(long long n) const {\n    assert(0 <= n);\n    mint x = *this, r = 1;\n    while (n) {\n      if (n & 1) r *= x;\n      x *= x;\n      n >>= 1;\n    }\n    return r;\n  }\n  mint inv() const {\n    if (prime) {\n      assert(_v);\n      return pow(umod() - 2);\n    } else {\n      auto eg = internal::inv_gcd(_v, m);\n      assert(eg.first == 1);\n      return eg.second;\n    }\n  }\n\n  friend mint operator+(const mint& lhs, const mint& rhs) {\n    return mint(lhs) += rhs;\n  }\n  friend mint operator-(const mint& lhs, const mint& rhs) {\n    return mint(lhs) -= rhs;\n  }\n  friend mint operator*(const mint& lhs, const mint& rhs) {\n    return mint(lhs) *= rhs;\n  }\n  friend mint operator/(const mint& lhs, const mint& rhs) {\n    return mint(lhs) /= rhs;\n  }\n  friend bool operator==(const mint& lhs, const mint& rhs) {\n    return lhs._v == rhs._v;\n  }\n  friend bool operator!=(const mint& lhs, const mint& rhs) {\n    return lhs._v != rhs._v;\n  }\n\n private:\n  unsigned int _v;\n  static constexpr unsigned int umod() { return m; }\n  static constexpr bool prime = internal::is_prime<m>;\n};\n\ntemplate <int id>\nstruct dynamic_modint : internal::modint_base {\n  using mint = dynamic_modint;\n\n public:\n  static int mod() { return (int)(bt.umod()); }\n  static void set_mod(int m) {\n    assert(1 <= m);\n    bt = internal::barrett(m);\n  }\n  static mint raw(int v) {\n    mint x;\n    x._v = v;\n    return x;\n  }\n\n  dynamic_modint() : _v(0) {}\n  template <class T, internal::is_signed_int_t<T>* = nullptr>\n  dynamic_modint(T v) {\n    long long x = (long long)(v % (long long)(mod()));\n    if (x < 0) x += mod();\n    _v = (unsigned int)(x);\n  }\n  template <class T, internal::is_unsigned_int_t<T>* = nullptr>\n  dynamic_modint(T v) {\n    _v = (unsigned int)(v % mod());\n  }\n\n  unsigned int val() const { return _v; }\n\n  mint& operator++() {\n    _v++;\n    if (_v == umod()) _v = 0;\n    return *this;\n  }\n  mint& operator--() {\n    if (_v == 0) _v = umod();\n    _v--;\n    return *this;\n  }\n  mint operator++(int) {\n    mint result = *this;\n    ++*this;\n    return result;\n  }\n  mint operator--(int) {\n    mint result = *this;\n    --*this;\n    return result;\n  }\n\n  mint& operator+=(const mint& rhs) {\n    _v += rhs._v;\n    if (_v >= umod()) _v -= umod();\n    return *this;\n  }\n  mint& operator-=(const mint& rhs) {\n    _v += mod() - rhs._v;\n    if (_v >= umod()) _v -= umod();\n    return *this;\n  }\n  mint& operator*=(const mint& rhs) {\n    _v = bt.mul(_v, rhs._v);\n    return *this;\n  }\n  mint& operator/=(const mint& rhs) { return *this = *this * rhs.inv(); }\n\n  mint operator+() const { return *this; }\n  mint operator-() const { return mint() - *this; }\n\n  mint pow(long long n) const {\n    assert(0 <= n);\n    mint x = *this, r = 1;\n    while (n) {\n      if (n & 1) r *= x;\n      x *= x;\n      n >>= 1;\n    }\n    return r;\n  }\n  mint inv() const {\n    auto eg = internal::inv_gcd(_v, mod());\n    assert(eg.first == 1);\n    return eg.second;\n  }\n\n  friend mint operator+(const mint& lhs, const mint& rhs) {\n    return mint(lhs) += rhs;\n  }\n  friend mint operator-(const mint& lhs, const mint& rhs) {\n    return mint(lhs) -= rhs;\n  }\n  friend mint operator*(const mint& lhs, const mint& rhs) {\n    return mint(lhs) *= rhs;\n  }\n  friend mint operator/(const mint& lhs, const mint& rhs) {\n    return mint(lhs) /= rhs;\n  }\n  friend bool operator==(const mint& lhs, const mint& rhs) {\n    return lhs._v == rhs._v;\n  }\n  friend bool operator!=(const mint& lhs, const mint& rhs) {\n    return lhs._v != rhs._v;\n  }\n\n private:\n  unsigned int _v;\n  static internal::barrett bt;\n  static unsigned int umod() { return bt.umod(); }\n};\ntemplate <int id>\ninternal::barrett dynamic_modint<id>::bt(998244353);\n\nusing modint998244353 = static_modint<998244353>;\nusing modint1000000007 = static_modint<1000000007>;\nusing modint = dynamic_modint<-1>;\n\nnamespace internal {\n\ntemplate <class T>\nusing is_static_modint = std::is_base_of<internal::static_modint_base, T>;\n\ntemplate <class T>\nusing is_static_modint_t = std::enable_if_t<is_static_modint<T>::value>;\n\ntemplate <class>\nstruct is_dynamic_modint : public std::false_type {};\ntemplate <int id>\nstruct is_dynamic_modint<dynamic_modint<id>> : public std::true_type {};\n\ntemplate <class T>\nusing is_dynamic_modint_t = std::enable_if_t<is_dynamic_modint<T>::value>;\n\n}  // namespace internal\n\n}  // namespace atcoder\n\n#endif  // ATCODER_MODINT_HPP\n\n#ifndef ATCODER_INTERNAL_BITOP_HPP\n#define ATCODER_INTERNAL_BITOP_HPP 1\n\n#ifdef _MSC_VER\n#include <intrin.h>\n#endif\n\nnamespace atcoder {\n\nnamespace internal {\n\n// @param n `0 <= n`\n// @return minimum non-negative `x` s.t. `n <= 2**x`\nint ceil_pow2(int n) {\n  int x = 0;\n  while ((1U << x) < (unsigned int)(n)) x++;\n  return x;\n}\n\n// @param n `1 <= n`\n// @return minimum non-negative `x` s.t. `(n & (1 << x)) != 0`\nconstexpr int bsf_constexpr(unsigned int n) {\n  int x = 0;\n  while (!(n & (1 << x))) x++;\n  return x;\n}\n\n// @param n `1 <= n`\n// @return minimum non-negative `x` s.t. `(n & (1 << x)) != 0`\nint bsf(unsigned int n) {\n#ifdef _MSC_VER\n  unsigned long index;\n  _BitScanForward(&index, n);\n  return index;\n#else\n  return __builtin_ctz(n);\n#endif\n}\n\n}  // namespace internal\n\n}  // namespace atcoder\n\n#endif  // ATCODER_INTERNAL_BITOP_HPP\n\n#ifndef ATCODER_SEGTREE_HPP\n#define ATCODER_SEGTREE_HPP 1\n\nnamespace atcoder {\n\ntemplate <class S, S (*op)(S, S), S (*e)()>\nstruct segtree {\n public:\n  segtree() : segtree(0) {}\n  explicit segtree(int n) : segtree(std::vector<S>(n, e())) {}\n  explicit segtree(const std::vector<S>& v) : _n(int(v.size())) {\n    log = internal::ceil_pow2(_n);\n    size = 1 << log;\n    d = std::vector<S>(2 * size, e());\n    for (int i = 0; i < _n; i++) d[size + i] = v[i];\n    for (int i = size - 1; i >= 1; i--) {\n      update(i);\n    }\n  }\n\n  void set(int p, S x) {\n    assert(0 <= p && p < _n);\n    p += size;\n    d[p] = x;\n    for (int i = 1; i <= log; i++) update(p >> i);\n  }\n\n  S get(int p) const {\n    assert(0 <= p && p < _n);\n    return d[p + size];\n  }\n\n  S prod(int l, int r) const {\n    assert(0 <= l && l <= r && r <= _n);\n    S sml = e(), smr = e();\n    l += size;\n    r += size;\n\n    while (l < r) {\n      if (l & 1) sml = op(sml, d[l++]);\n      if (r & 1) smr = op(d[--r], smr);\n      l >>= 1;\n      r >>= 1;\n    }\n    return op(sml, smr);\n  }\n\n  S all_prod() const { return d[1]; }\n\n  template <bool (*f)(S)>\n  int max_right(int l) const {\n    return max_right(l, [](S x) { return f(x); });\n  }\n  template <class F>\n  int max_right(int l, F f) const {\n    assert(0 <= l && l <= _n);\n    assert(f(e()));\n    if (l == _n) return _n;\n    l += size;\n    S sm = e();\n    do {\n      while (l % 2 == 0) l >>= 1;\n      if (!f(op(sm, d[l]))) {\n        while (l < size) {\n          l = (2 * l);\n          if (f(op(sm, d[l]))) {\n            sm = op(sm, d[l]);\n            l++;\n          }\n        }\n        return l - size;\n      }\n      sm = op(sm, d[l]);\n      l++;\n    } while ((l & -l) != l);\n    return _n;\n  }\n\n  template <bool (*f)(S)>\n  int min_left(int r) const {\n    return min_left(r, [](S x) { return f(x); });\n  }\n  template <class F>\n  int min_left(int r, F f) const {\n    assert(0 <= r && r <= _n);\n    assert(f(e()));\n    if (r == 0) return 0;\n    r += size;\n    S sm = e();\n    do {\n      r--;\n      while (r > 1 && (r % 2)) r >>= 1;\n      if (!f(op(d[r], sm))) {\n        while (r < size) {\n          r = (2 * r + 1);\n          if (f(op(d[r], sm))) {\n            sm = op(d[r], sm);\n            r--;\n          }\n        }\n        return r + 1 - size;\n      }\n      sm = op(d[r], sm);\n    } while ((r & -r) != r);\n    return 0;\n  }\n\n private:\n  int _n, size, log;\n  std::vector<S> d;\n\n  void update(int k) { d[k] = op(d[2 * k], d[2 * k + 1]); }\n};\n\n}  // namespace atcoder\n\n#endif  // ATCODER_SEGTREE_HPP\n\n  struct S {\n    int64_t best;\n    int64_t skipL;\n    int64_t skipR;      \n    int64_t skipBoth;\n  };\n\n  S op(S l, S r) {\n\n        int64_t skipL = max({0L, l.skipL + r.skipL, l.skipBoth + r.best});\n        int64_t skipR = max({0L, l.skipR + r.skipR, l.best + r.skipBoth});\n        int64_t skipBoth = max({0L, l.skipL + r.skipBoth, l.skipBoth + r.skipR});\n    return {\n        max({0L, l.best + r.skipL, l.skipR + r.best, skipL, skipR, skipBoth}),        \n        skipL,\n        skipR,\n        skipBoth\n    };\n  }\n  S e() {\n    return {0, 0, 0, 0};\n  }\n\n\n\nclass Solution {\npublic:\n    int maximumSumSubsequence(vector<int>& nums, vector<vector<int>>& queries) {\n        int N = nums.size();\n        atcoder::segtree<S, op, e> segTree(vector<S>(N, e()));\n        for (int i = 0; i < N; i++) {\n            segTree.set(i, {nums[i], 0, 0, 0});            \n        }\n        int64_t ans = 0;\n        int64_t MOD = 1e9 + 7;\n        for (auto &query : queries) {\n            int i = query[0];\n            int x= query[1];\n            nums[i] = x;\n            segTree.set(i, {max(0, nums[i]), 0, 0, 0});  \n            //std::cout << segTree.all_prod().best << std::endl;\n            ans += segTree.all_prod().best;\n            ans %= MOD;\n        }\n        return ans;\n\n    }\n};",
    "submit_ts": "1716693237",
    "subm_id": "1268079823"
}