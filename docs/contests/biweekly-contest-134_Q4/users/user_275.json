{
    "username": "Satyam_86770",
    "submission": "class Solution {\npublic:\n    vector<int> arr;\n vector<int> segTree;\nvoid build(int ind, int start, int end){\n    if(start == end) // leaf node\n    {\n        segTree[ind] = arr[start];\n        return;\n    }\n    int mid = (start + end) / 2;\n    build(2 * ind, start, mid);\n    build(2 * ind + 1, mid + 1, end);\n    segTree[ind] = (segTree[2 * ind] & segTree[2 * ind + 1]);\n}\n\nint query(int ind, int start, int end, int left, int right){\n    // completely overlapping\n    if(start >= left && end <= right){\n        return segTree[ind];\n    }\n    if(start > right || end < left){\n        return ((1<<30)-1);\n    }\n    int mid = (start + end) / 2;\n    int ansLeft = query(2 * ind, start, mid, left, right);\n    int ansRight = query(2 * ind + 1, mid + 1, end, left, right);\n    return (ansLeft & ansRight); \n}\n\n\n    long long countSubarrays(vector<int>& v, int k) \n    {\n        long long ans=0;\n        int n=v.size();\n        arr.resize(n);\n        segTree.resize((4*n)+1,0);\n        for(int i=0;i<n;i++)\n        {\n            arr[i]=v[i];\n        }\n        build(1,0,n-1);\n        for(int i=0;i<n;i++)\n        {\n             int leftIndex=n;\n             int rightIndex=i;\n             int l=i;\n             int r=n-1;\n             while(l<=r)\n             {\n                int mid=(l+r)/2;\n                if(query(1,0,n-1,i,mid)>=k)\n                {    \n                     rightIndex=max(rightIndex,mid);\n                     l=mid+1;\n                }\n                else{\n                    r=mid-1;\n                }\n             }\n             l=i;\n             r=n-1;\n             while(l<=r)\n             {\n                int mid=(l+r)/2;\n                if(query(1,0,n-1,i,mid)<=k)\n                {    \n                     leftIndex=min(leftIndex,mid);\n                     r=mid-1;\n                }\n                else{\n                    l=mid+1;\n                }\n             }\n           \n             int range=max(0,rightIndex-leftIndex+1);\n      //       cout<<i<<\" , \"<<leftIndex<<\" \"<<rightIndex<<\" -> \"<<range<<endl;\n             if(range==1)\n             {\n               if(v[i]==k ||  (leftIndex!=i))\n               {\n                 ans++;\n               }\n             }\n             else\n             ans+=range;\n        }\n        return ans;\n    }\n};\n\n// [1,9,9,7,4] k=1 output =4 exp = 6",
    "submit_ts": "1720278950",
    "subm_id": "1311731122"
}