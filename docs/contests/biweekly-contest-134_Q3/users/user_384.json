{
    "username": "khaledlabeb552",
    "submission": "class Solution {\n    \nstruct Node{\n    int left,right;\n    bool alter;\n    Node (int l=0,int r=0,bool a=false){\n        left = l;\n        right = r;\n        alter = a;\n    }\n    Node operator+(const Node & b){\n        Node res;\n        res.left =  left;\n        res.right = b.right;\n        res.alter = alter && b.alter && (right!=b.left);\n        return res;\n    }\n};\nstruct Segment{\n    int n;\n    vector<Node>tree;\n    vector<int>lazy;\n    Segment(int _n){\n        n = _n;\n        tree.resize(n*4);\n        lazy.resize(4*n);\n    }\n    void build(int node,int nl,int nr , string &s){\n        if(nl==nr){\n            tree[node]=Node(s[nl]-'0',s[nl]-'0',true);\n            return;\n        }\n        int mid = nl+(nr - nl)/2;\n        build(2*node+1,nl,mid , s);\n        build(2*node+2,mid+1,nr , s);\n        tree[node]=tree[2*node+1]+tree[2*node+2];\n    }\n    void prop(int node,int nl,int nr){\n        if(lazy[node]){\n            tree[node].left ^=1;\n            tree[node].right ^=1;\n            if(nl!=nr){\n                lazy[2*node+1]^=true;\n                lazy[2*node+2]^=true;\n            }\n            lazy[node]=false;\n        }\n    }\n    void update(int node,int nl,int nr,int l,int r){\n        prop(node,nl,nr);\n        if(nl>=l&&nr<=r){\n            tree[node].left ^=1;\n            tree[node].right ^=1;\n            if(nl!=nr){\n                lazy[2*node+1]^=true;\n                lazy[2*node+2]^=true;\n            }\n            return;\n        }\n        if(nr<l||nl>r)return;\n        int mid = nl+(nr-nl)/2;\n        update(2*node+1,nl,mid,l,r);\n        update(2*node+2,mid+1,nr,l,r);\n        tree[node]=tree[2*node+1]+tree[2*node+2];\n    }\n    Node query(int node,int nl,int nr,int l,int r){\n        prop(node,nl,nr);\n        if(nl>=l&&nr<=r){\n            return tree[node];\n        }\n        int mid = nl+(nr-nl)/2;\n        if(r<=mid)return query(2*node+1,nl,mid,l,r);\n        if(l>=mid+1)return query(2*node+2,mid+1,nr,l,r);\n        return query(2*node+1,nl,mid,l,r)+ query(2*node+2,mid+1,nr,l,r);\n    }\n};\npublic:\n    int numberOfAlternatingGroups(vector<int>& colors, int k) {\n        string s;\n        for(auto &val:colors){\n            s += (char)('0' + val);\n        }\n        s += s;\n        Segment seg(s.size());\n        int res = 0;\n        seg.build(0 , 0 , s.size() - 1 , s);\n        for(int i = 0 ;i<colors.size();i++){\n            if(seg.query(0 , 0 , s.size() - 1 , i , i + k - 1).alter){\n                res++;\n            }\n        }\n        return res;\n    }\n};",
    "submit_ts": "1720277526",
    "subm_id": "1311667812"
}