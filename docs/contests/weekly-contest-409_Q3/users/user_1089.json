{
    "username": "hi_its_yuvi",
    "submission": "class Solution {\npublic:\n    vector<int> shortestDistanceAfterQueries(int n, const vector<vector<int>>& queries) {\n        // Initialize distance vector where distance[i] represents the shortest path from city 0 to city i.\n        vector<int> distance(n, 0);\n        for (int i = 1; i < n; ++i) {\n            distance[i] = distance[i - 1] + 1;\n        }\n\n        // Set to keep track of valid city indices for shortest path calculation\n        set<int> validCities;\n        for (int i = 0; i < n; ++i) {\n            validCities.insert(i);\n        }\n\n        vector<int> result;\n        for (const auto& query : queries) {\n            int start = query[0];\n            int end = query[1];\n\n            // Find the valid cities in the range of the query\n            auto lowerBound = validCities.lower_bound(start + 1);\n            auto upperBound = validCities.lower_bound(end);\n\n            // Remove cities in the range from the set of valid cities\n            validCities.erase(lowerBound, upperBound);\n\n            // Calculate the length of the shortest path from city 0 to city n-1\n            // The size of the validCities set minus 1 gives the shortest path length\n            result.push_back(validCities.size() - 1);\n        }\n\n        return result;\n    }\n};",
    "submit_ts": "1722743695",
    "subm_id": "1343797594"
}