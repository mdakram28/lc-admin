{
    "username": "lonely_nights_with_bruce",
    "submission": "class Solution {\n\n    /**\n     * @param Integer[][] $grid\n     * @return Integer\n     */\n    function find_area(&$grid, $a, $b, $c, $d) {\n        $left = $c;\n        $right = $d;\n\n        while ($left <= $right) {\n            $left_cnt = 0;\n            $right_cnt = 0;\n\n            for ($i = $a; $i <= $b; $i++) {\n                $left_cnt += $grid[$i][$left];\n            }\n\n            for ($i = $a; $i <= $b; $i++) {\n                $right_cnt += $grid[$i][$right];\n            }\n\n            if ($left_cnt == 0) {\n                $left += 1;\n            }\n\n            if ($right_cnt == 0) {\n                $right -= 1;\n            }\n\n            if ($left_cnt && $right_cnt) {\n                break;\n            }\n        }\n\n        $top = $a;\n        $bottom = $b;\n\n        while ($top <= $bottom) {\n            $top_cnt = 0;\n            $bottom_cnt = 0;\n\n            for ($i = $left; $i <= $right; $i++) {\n                $top_cnt += $grid[$top][$i];\n            }\n\n            for ($i = $left; $i <= $right; $i++) {\n                $bottom_cnt += $grid[$bottom][$i];\n            }\n\n            if ($top_cnt == 0) {\n                $top += 1;\n            }\n\n            if ($bottom_cnt == 0) {\n                $bottom -= 1;\n            }\n\n            if ($top_cnt && $bottom_cnt) {\n                break;\n            }\n        }\n\n        return max(0, $right - $left + 1) * max(0, $bottom - $top + 1);\n    }\n\n    /**\n     * @param Integer[][] $grid\n     * @return Integer\n     */\n    function minimumSum($grid) {\n        $ans = PHP_INT_MAX;\n        $n = count($grid);\n        $m = count($grid[0]);\n\n        // Case 1\n        for ($i = 0; $i < $n - 2; $i++) {\n            for ($j = $i + 1; $j < $n - 1; $j++) {\n                $a = $this->find_area($grid, 0, $i, 0, $m - 1);\n                $b = $this->find_area($grid, $i + 1, $j, 0, $m - 1);\n                $c = $this->find_area($grid, $j + 1, $n - 1, 0, $m - 1);\n                $ans = min($ans, $a + $b + $c);\n            }\n        }\n\n        // Case 2\n        for ($i = 0; $i < $n - 1; $i++) {\n            for ($j = 0; $j < $m - 1; $j++) {\n                $a = $this->find_area($grid, 0, $i, 0, $m - 1);\n                $b = $this->find_area($grid, $i + 1, $n - 1, 0, $j);\n                $c = $this->find_area($grid, $i + 1, $n - 1, $j + 1, $m - 1);\n                $ans = min($ans, $a + $b + $c);\n            }\n        }\n\n        // Case 3\n        for ($i = 0; $i < $n - 1; $i++) {\n            for ($j = 0; $j < $m - 1; $j++) {\n                $a = $this->find_area($grid, 0, $i, 0, $j);\n                $b = $this->find_area($grid, 0, $i, $j + 1, $m - 1);\n                $c = $this->find_area($grid, $i + 1, $n - 1, 0, $m - 1);\n                $ans = min($ans, $a + $b + $c);\n            }\n        }\n\n        // Case 4\n        for ($i = 0; $i < $m - 2; $i++) {\n            for ($j = $i + 1; $j < $m - 1; $j++) {\n                $a = $this->find_area($grid, 0, $n - 1, 0, $i);\n                $b = $this->find_area($grid, 0, $n - 1, $i + 1, $j);\n                $c = $this->find_area($grid, 0, $n - 1, $j + 1, $m - 1);\n                $ans = min($ans, $a + $b + $c);\n            }\n        }\n\n        // Case 5\n        for ($i = 0; $i < $m - 1; $i++) {\n            for ($j = 0; $j < $n - 1; $j++) {\n                $a = $this->find_area($grid, 0, $n - 1, 0, $i);\n                $b = $this->find_area($grid, 0, $j, $i + 1, $m - 1);\n                $c = $this->find_area($grid, $j + 1, $n - 1, $i + 1, $m - 1);\n                $ans = min($ans, $a + $b + $c);\n            }\n        }\n\n        // Case 6\n        for ($i = 0; $i < $m - 1; $i++) {\n            for ($j = 0; $j < $n - 1; $j++) {\n                $a = $this->find_area($grid, 0, $j, 0, $i);\n                $b = $this->find_area($grid, $j + 1, $n - 1, 0, $i);\n                $c = $this->find_area($grid, 0, $n - 1, $i + 1, $m - 1);\n                $ans = min($ans, $a + $b + $c);\n            }\n        }\n\n        return $ans;\n    }\n}\n",
    "submit_ts": 1719114161.0
}