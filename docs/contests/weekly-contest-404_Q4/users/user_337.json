{
    "username": "sarthak_tirpude",
    "submission": "class Solution {\npublic:\n    int bfs(int i,vector<bool> &vis,vector<vector<int>> &graph){\n        vis[i]=true;\n        queue<pair<int,int>> q;\n        q.push({i,0});\n        int ans=0;\n        while(!q.empty()){\n            pair<int,int> u=q.front();\n            ans=u.first;\n            q.pop();\n            for(auto nei:graph[u.first]){\n                if(!vis[nei]){\n                    q.push({nei,u.second+1});\n                    vis[nei]=true;\n                }\n            }\n\n        }\n        return ans;\n    }\n    vector<int> dist(int i,vector<vector<int>> &graph){\n        int n=graph.size();\n        vector<int> dis(n+1,0);\n        vector<bool> vis(n+1,false);\n        vis[i]=true;\n        queue<int> q;\n        q.push(i);\n        while(!q.empty()){\n            int u=q.front();\n            q.pop();\n            for(auto nei:graph[u]){\n                if(!vis[nei]){\n                    vis[nei]=true;\n                    dis[nei]=dis[u]+1;\n                    q.push(nei);\n                }\n            }\n        }\n        return dis;\n    }\n \n    \n    int minimumDiameterAfterMerge(vector<vector<int>>& e1, vector<vector<int>>& e2) {\n        vector<vector<int>> tree1(e1.size()+1);\n        for(auto it:e1){\n            tree1[it[0]].push_back(it[1]);\n            tree1[it[1]].push_back(it[0]);\n            \n        }\n        vector<vector<int>> tree2(e2.size()+1);\n        for(auto it:e2){\n            tree2[it[0]].push_back(it[1]);\n            tree2[it[1]].push_back(it[0]);   \n        }\n        int n =e1.size()+1,m=e2.size()+1;\n        vector<bool> vis(n,false);\n        int v1 = bfs(0,vis,tree1);\n        vis.assign(n,false);\n        int v2 = bfs(v1,vis,tree1);\n        vector<int> d11 = dist(v1,tree1);\n        vector<int> d12 = dist(v2,tree1);\n        int ans = INT_MAX;\n        for(int i=0;i<e1.size()+1;++i){\n            ans = min(ans, max(d11[i],d12[i]));\n        }\n        //cout<<ans<<endl;\n        vis.assign(m,false);\n        int v12 = bfs(0,vis,tree2);\n        vis.assign(m,false);\n        int v22=bfs(v12,vis,tree2);\n        vector<int> d21 = dist(v12,tree2);\n        vector<int> d22 = dist(v22,tree2);\n        int res=INT_MAX;\n        for(int i=0;i<m;++i){\n            res = min(res, max(d21[i],d22[i]));\n        }\n        int tem = ans + res + 1;\n        tem = max(tem,d11[v2]);\n        tem = max(tem,d21[v22]);\n        return tem;\n    }\n};",
    "submit_ts": 1719717978.0
}