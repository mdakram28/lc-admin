{
    "username": "alex391a",
    "submission": "class BIT:\n    def __init__(self, n):\n        self.n = n\n        self.nums = [0] * (n + 1)\n        self.sums = [0] * (n + 1)\n\n    def update(self, ind, val):\n        ind += 1\n        diff = self.nums[ind] - val\n        self.nums[ind] = val\n        while (ind <= self.n):\n            self.sums[ind] -= diff\n            ind += (ind & -ind)\n        return True\n\n    def query(self, ind):\n        ind += 1\n        total = 0\n        while (ind > 0):\n            total += self.sums[ind]\n            ind -= (ind & -ind)\n        return total\n\n    def sum(self, l, r):\n        return self.query(r) - self.query(l-1)\n    def __getitem__(self, ind):\n        return self.nums[ind + 1]\nclass Solution:\n    def countOfPeaks(self, nums: List[int], queries: List[List[int]]) -> List[int]:\n        n = len(nums)\n        bit = BIT(n)\n        for i in range(1, n - 1):\n            if nums[i-1] < nums[i] and nums[i] > nums[i + 1]:\n                bit.update(i, 1)\n        res = []\n        for q, i, j in queries:\n            if q == 1:\n                res.append(bit.sum(i, j) - bit[i] - bit[j] + (bit[i] and i == j))\n            else:\n                # if nums[i-1] < nums[i] and nums[i] > nums[i + 1] and (nums[i-1] >= j or j <= nums[i + 1]):\n                #     bit.update(i, 0)\n                # if i > 0 and nums[i-2] < nums[i-1] and nums[i-1] > nums[i] and (j >= nums[i-1]):\n                #     bit.update(i-1, 0)\n                # if i < n - 1 and nums[i] < nums[i + 1] and nums[i + 1] > nums[i + 2] and (j >= nums[i + 1]):\n                #     bit.update(i+1, 0)\n                nums[i] = j\n                for k in range(max(1, i - 1), min(n - 1, i + 2)):\n                    if nums[k-1] < nums[k] and nums[k] > nums[k + 1]:\n                        bit.update(k, 1)\n                    else:\n                        bit.update(k, 0)\n        return res\n                \n        ",
    "submit_ts": 1718506598.0
}