{
    "username": "vijaykatari23",
    "submission": "#define ll long long\ntemplate<typename T>\nclass SegmentTree {\npublic:\n    SegmentTree(const std::vector<T>& data) {\n        n = data.size();\n        tree.resize(2 * n);\n        build(data);\n    }\n\n    // Update a single element at position pos with value\n    void update(int pos, T value) {\n        pos += n; // move to the leaf node\n        tree[pos] = value;\n        while (pos > 1) {\n            pos /= 2;\n            tree[pos] = tree[2 * pos] + tree[2 * pos + 1];\n        }\n    }\n\n    // Query the sum in range [left, right)\n    T query(int left, int right) {\n        left += n; // move to the leaf node\n        right += n;\n        T sum = 0;\n        while (left < right) {\n            if (left % 2 == 1) {\n                sum += tree[left];\n                left++;\n            }\n            if (right % 2 == 1) {\n                right--;\n                sum += tree[right];\n            }\n            left /= 2;\n            right /= 2;\n        }\n        return sum;\n    }\n\nprivate:\n    std::vector<T> tree;\n    int n;\n\n    // Build the tree\n    void build(const std::vector<T>& data) {\n        // Initialize leaves\n        for (int i = 0; i < n; ++i) {\n            tree[n + i] = data[i];\n        }\n        // Build the internal nodes\n        for (int i = n - 1; i > 0; --i) {\n            tree[i] = tree[2 * i] + tree[2 * i + 1];\n        }\n    }\n};\nclass Solution {\npublic:\n    vector<int> countOfPeaks(vector<int>& A, vector<vector<int>>& queries) {\n        int N = A.size();\n        auto isPeak = [&] (int i) -> bool {\n            if(i - 1 < 0 || i + 1 >= N) return false;\n            return A[i] > A[i - 1] && A[i] > A[i + 1];\n        };\n        vector<int> a(N, 0);\n        SegmentTree<int> tree(a);\n        int cnt = 0;\n        for(int i = 0; i < N; ++i) if(isPeak(i)) {\n            tree.update(i, 1);\n        }\n        // cout << \"tree = \";\n        // for(int i = 0; i < N; ++i) cout << tree.query(i, i) << ' ';\n        // cout << '\\n';\n        vector<int> ans;\n        for(auto q : queries) {\n            int t = q[0];\n            if(t == 1) {\n                if(q[1] + 1 <= q[2] - 1)\n                    ans.push_back(tree.query(q[1] + 1, q[2]));\n                else\n                    ans.push_back(0);\n            }else {\n                int i = q[1], x = q[2];\n                if(i - 1 >= 0 && isPeak(i - 1))\n                    tree.update(i - 1, 0);\n                if(isPeak(i))\n                    tree.update(i, 0);\n                if(i + 1 < N && isPeak(i + 1))\n                    tree.update(i + 1, 0);\n                A[i] = x;\n                if(i - 1 >= 0 && isPeak(i - 1))\n                    tree.update(i - 1, 1);\n                if(isPeak(i))\n                    tree.update(i, 1);\n                if(i + 1 < N && isPeak(i + 1))\n                    tree.update(i + 1, 1);\n            }\n            // cout << \"tree = \";\n            // for(int i = 0; i < N; ++i) cout << tree.query(i, i) << ' ';\n            // cout << '\\n';\n        }\n        return ans;\n    }\n};",
    "submit_ts": 1718507258.0
}