{
    "username": "neeravDev",
    "submission": "\nclass SegmentTree {\nprivate:\n    vector<int> tree;\n    int n;\n\n    void buildTree(const vector<int>& nums) {\n        n = nums.size();\n        tree.resize(2 * n);\n\n        // Initialize leaves in the segment tree\n        for (int i = 0; i < n; ++i) {\n            tree[n + i] = nums[i];\n        }\n\n        // Build the tree by calculating parents\n        for (int i = n - 1; i > 0; --i) {\n            tree[i] = tree[2 * i] + tree[2 * i + 1];\n        }\n    }\n\npublic:\n    SegmentTree(const vector<int>& nums) {\n        buildTree(nums);\n    }\n\n    void update(int index, int value) {\n        // Update the leaf node\n        index += n;\n        tree[index] = value;\n\n        // Update the segment tree by going up to the root\n        while (index > 1) {\n            index /= 2;\n            tree[index] = tree[2 * index] + tree[2 * index + 1];\n        }\n    }\n\n    int sumRange(int left, int right) {\n        // Query the sum in the range [left, right)\n        left += n;\n        right += n;\n        int sum = 0;\n\n        while (left < right) {\n            if (left % 2 == 1) {\n                sum += tree[left++];\n            }\n            if (right % 2 == 1) {\n                sum += tree[--right];\n            }\n            left /= 2;\n            right /= 2;\n        }\n\n        return sum;\n    }\n};\n\nunordered_map<int, int> mp;\nvector<int> v(500, 1);\nint n;\nint mod = 1000000007;\nvector<vector<int>> dp(301, vector<int>(401, -1));\n\nint helper(int index, int count)\n{\n    if(index == 0 && count == 0)\n    {\n        return 1;\n    }\n    if(count < 0)\n    {\n        return 0;\n    }\n    if(index == 0)\n    {\n        return 0;\n    }\n    if(mp.find(index) != mp.end())\n    {\n        int value = mp[index];\n        if(value != count)\n        {\n            return 0;\n        }\n    }\n    if(dp[index][count]!=-1)\n    {\n        return dp[index][count];\n    }\n    \n    int total = 0;\n    int ans = 0;\n    for(int i = n; i >= 1; --i)\n    {\n        if(v[i] == 1)\n        {\n            v[i] = 0;\n            ans= (ans + helper(index-1, count-total))%mod;\n            ans%=mod;\n            v[i] = 1;\n            total++;\n        }\n    }\n    return dp[index][count] = ans;\n}\n\nclass Solution {\npublic:\n    int numberOfPermutations(int n1, vector<vector<int>>& req) {\n      \n        mp.clear();\n        n = n1;\n        int m = req.size();\n        for(int i = 0; i < m; ++i)\n        {\n            int index = req[i][0];\n            int count = req[i][1];\n            mp[index+1] = count;\n        }\n          for(int i = 0; i <= n1; ++i)\n        {\n            for(int j = 0; j <= mp[n]; ++j)\n            {\n                dp[i][j] = -1;\n            }\n        }\n        int ans = helper(n, mp[n]);\n        return ans;\n    }\n};",
    "submit_ts": 1719068773.0
}