{
    "username": "GabrielXu",
    "submission": "#pragma GCC optimize(\"O3,unroll-loops\")\n#include <bits/stdc++.h>\n#pragma GCC target(\"avx2,bmi,bmi2,lzcnt,popcnt\")\nusing namespace std;\n#define forn(z) for(int i=0; i<z; i++)\n#define forn2(z) for(int j=0; j<z; j++)\n#define fastIO ios_base::sync_with_stdio(false);cin.tie(NULL)\ntypedef long long ll;\ntypedef vector<int> vi;\ntypedef pair<int,int> pii;\ntypedef vector<ll> vll;\ntypedef pair<ll,ll> pll;\n#define pb push_back\n#define all(x) x.begin(), x.end()\n#define fi first\n#define se second\n#define nl \"\\n\"\n#define dbg(z, n) forn(n)cerr<<z[i]<<\" \\n\"[i==n-1];\n#define dbg2(z, n, m) forn(n)forn2(m)cerr<<z[i][j]<<\" \\n\"[j==m-1];\n#define dbg3(z) auto itt=z.begin(); while(itt!=z.end()) {__print(*itt); cerr << \" \"; itt++;} cerr << \"\\n\";\nll int_sqrt(ll a) {long long x = sqrt(a) + 2; while(x * x > a) x--; return x;}\nll int_pow(ll a, ll b) {ll ans=1; while(b--)ans*=a; return ans;}\nvoid __print(int x) {cerr << x;}\nvoid __print(ll x) {cerr << x;}\nvoid __print(double x) {cerr << x;}\nvoid __print(char x) {cerr << '\\'' << x << '\\'';}\nvoid __print(const char *x) {cerr << '\\\"' << x << '\\\"';}\nvoid __print(const string &x) {cerr << '\\\"' << x << '\\\"';}\nvoid __print(bool x) {cerr << (x ? \"true\" : \"false\");}\ntemplate<typename T, typename V>\nvoid __print(const pair<T, V> &x) {cerr << '{'; __print(x.first); cerr << ','; __print(x.second); cerr << '}';}\ntemplate<typename T>\nvoid __print(const T &x) {int f = 0; cerr << '{'; for (auto &i: x) cerr << (f++ ? \",\" : \"\"), __print(i); cerr << \"}\";}\nvoid _print() {cerr << \"]\\n\";}\ntemplate <typename T, typename... V>\nvoid _print(T t, V... v) {__print(t); if (sizeof...(v)) cerr << \", \"; _print(v...);}\n#ifndef DONLINE_JUDGE\n#define debug(x...) cerr << \"[\" << #x << \"] = [\"; _print(x)\n#else\n#define debug(x...) 42\n#endif\nstruct custom_hash {\n    static uint64_t splitmix64(uint64_t x) {\n        // http://xorshift.di.unimi.it/splitmix64.c\n        x += 0x9e3779b97f4a7c15;\n        x = (x ^ (x >> 30)) * 0xbf58476d1ce4e5b9;\n        x = (x ^ (x >> 27)) * 0x94d049bb133111eb;\n        return x ^ (x >> 31);\n    }\n    size_t operator()(uint64_t x) const {\n        static const uint64_t FIXED_RANDOM = chrono::steady_clock::now().time_since_epoch().count();\n        return splitmix64(x + FIXED_RANDOM);\n    }\n};\n\nconst int mn=1e5;\n\nclass Solution {\npublic:\n    bool visited[mn];\n    vi adj[mn];\n    int n;\n    int cost[mn];\n    int ans[mn];\n\n    void dfs(int node) {\n        visited[node]=true;\n        int val=0;\n        for(int u:adj[node]) {\n            if(!visited[u]) {\n                dfs(u);\n                val=max(val, cost[u]+2-u%2);\n            }\n        }\n        cost[node]=val;\n    }\n\n    void dfs2(int node, int up) {\n        visited[node]=true;\n        ans[node]=max(cost[node], up);\n        set<pii> vals;\n        for(int u:adj[node]) {\n            if(!visited[u]) {\n                vals.insert({cost[u]+2-u%2,u});\n            }\n        }\n        for(int u:adj[node]) {\n            if(!visited[u]) {\n                vals.erase({cost[u]+2-u%2,u});\n                int maxv=up;\n                if(vals.size()>0) {\n                    auto it=vals.end();\n                    it--;\n                    maxv=max(maxv, (*it).fi);\n                }\n                dfs2(u, maxv+2-node%2);\n                vals.insert({cost[u]+2-u%2,u});\n            }\n        }\n    }\n\n    vector<int> timeTaken(vector<vector<int>>& edges) {\n        n=edges.size()+1;\n        for(auto& x:edges) {\n            adj[x[0]].pb(x[1]);\n            adj[x[1]].pb(x[0]);\n        }\n        forn(n) {\n            visited[i]=0;\n            cost[i]=0;\n        }\n        dfs(0);\n        forn(n) visited[i]=0;\n        dfs2(0, 0);\n        vi ret(n);\n        forn(n) ret[i]=ans[i];\n        return ret;\n    }\n};",
    "submit_ts": "1722698843",
    "subm_id": "1343193605"
}