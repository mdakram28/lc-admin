{
    "username": "Maruzensky",
    "submission": "class Solution:\n    def minimumCost(self, target: str, words: List[str], costs: List[int]) -> int:\n        char_dict = {chr(ord('a') + i): i for i in range(26)}\n        \n        target = [char_dict[c] for c in target]\n        words = [[char_dict[c] for c in word] for word in words]        \n        n = len(target)\n        \n        def power(p, x, e):\n            base = x\n            answer = 1\n            while e:\n                if e & 1:\n                    answer = (answer * base) % p\n\n                base = (base * base) % p\n                e >>= 1\n\n            return answer\n\n\n        def inv(p, x):\n            return power(p, x, p - 2)\n        \n        mod = 351966312154393\n        exp = 37\n        i_e = inv(mod, exp)\n        \n        class Trie:\n            def __init__(self):\n                self.children = [None] * 26\n                self.cost = 0\n                \n        long = 300\n        ll = []\n        \n        trie = Trie()\n        \n        for word, cost in zip(words, costs):\n            if len(word) > long:\n                h = 0\n                for c in word:\n                    h = (h * exp + c) % mod\n                    \n                ll.append((h, len(word), cost))\n                \n            else:\n                ptr = trie\n                for c in word:\n                    if ptr.children[c] is None:\n                        ptr.children[c] = Trie()\n                    ptr = ptr.children[c]\n                        \n                if ptr.cost == 0:\n                    ptr.cost = cost\n                else:\n                    ptr.cost = min(ptr.cost, cost)\n                \n        tt = [0]\n        h = 0\n        for t in target:\n            h = (h * exp + t) % mod\n            tt.append(h)\n            \n        def get_hash(start, end):\n            if end > n:\n                return -1\n            return (tt[end] - tt[start] * power(mod, exp, end - start)) % mod\n\n        dp = [0] + [10**10] * n\n        \n        for i in range(n):\n            if dp[i] >= 10**10:\n                continue\n                \n            for h, l, c in ll:\n                if i + l > n:\n                    continue\n                if h == get_hash(i, i + l):\n                    dp[i + l] = min(dp[i + l], dp[i] + c)\n                    \n            ptr = trie\n            for j in range(i, min(n, i + long + 1)):\n                d = target[j]\n                if ptr.children[d] is None:\n                    break\n                else:\n                    ptr = ptr.children[d]\n                    if ptr.cost > 0:\n                        dp[j + 1] = min(dp[j + 1], dp[i] + ptr.cost)\n                        \n        return -1 if dp[-1] >= 10**10 else dp[-1]\n        \n        ",
    "submit_ts": "1720323930",
    "subm_id": "1312387521"
}