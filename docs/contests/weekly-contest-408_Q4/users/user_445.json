{
    "username": "aasthaaaa7",
    "submission": "class DisjointSet{\npublic:\n    vector<int> parent, size;\n    DisjointSet(int n) {\n        size.resize(n, 1);\n        parent.resize(n);\n        for(int i = 0; i < n; i++) parent[i] = i;\n    }\n    int findUPar(int n) {\n        if(parent[n] == n) return n;\n        else return parent[n] = findUPar(parent[n]); \n    }\n    void UnionBySize(int u, int v) {\n        int ulu = findUPar(u);\n        int ulv = findUPar(v);\n        if(ulu == ulv) return;\n        if(size[ulu] > size[ulv]) {\n            parent[ulv] = ulu;\n            size[ulu] += size[ulv];\n        } else {\n            parent[ulu] = ulv;\n            size[ulv] += size[ulu];\n        }\n    }\n};\n\nclass Solution {\npublic:\n    bool canReachCorner(int X, int Y, vector<vector<int>>& circles) {\n        int n = circles.size();\n        DisjointSet ds(n + 4);\n        for(int i = 0; i < n; i++) {\n            int x1 = circles[i][0];\n            int y1 = circles[i][1];\n            int r1 = circles[i][2];\n            if(x1 - r1 <= 0) ds.UnionBySize(i, n); \n            if(x1 + r1 >= X) ds.UnionBySize(i, n + 1); \n            if(y1 - r1 <= 0) ds.UnionBySize(i, n + 2); \n            if(y1 + r1 >= Y) ds.UnionBySize(i, n + 3); \n            for(int j = i + 1; j < n; j++) {\n                int x2 = circles[j][0], y2 = circles[j][1], r2 = circles[j][2];\n                long long dist = (long long)(x1 - x2) * (x1 - x2) + (long long)(y1 - y2) * (y1 - y2);\n                if(dist <= (long long)(r1 + r2) * (r1 + r2)) {\n                    ds.UnionBySize(i, j);\n                }\n            }\n        }\n        return !(ds.findUPar(n) == ds.findUPar(n + 1) || ds.findUPar(n) == ds.findUPar(n + 2) || ds.findUPar(n + 3) == ds.findUPar(n + 1) || ds.findUPar(n + 3) == ds.findUPar(n + 2));\n    }\n};\n",
    "submit_ts": "1722137438",
    "subm_id": "1335763803"
}