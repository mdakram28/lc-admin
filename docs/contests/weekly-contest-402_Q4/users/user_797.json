{
    "username": "dovchindorj",
    "submission": "class Solution {\npublic:\n    int arr[100010];\n    int st[400100];\n    void build(int p, int l, int r) {\n        if (l == r) {\n            st[p] = arr[r];\n            return;\n        }\n        build(2 * p, l, (l + r) / 2);\n        build(2 * p + 1, (l + r) / 2 + 1, r);\n        st[p] = st[2 * p] + st[2 * p + 1];\n    }\n    int get(int p, int l, int r, int L, int R) {\n        if (l > r || l > R || r < L) return 0;\n        if (l >= L && r <= R) return st[p];\n        return get(2 * p, l, (l + r) / 2, L, R) + get(2 * p + 1, (l + r) / 2 + 1, r, L, R);\n    }\n    void update(int p, int l, int r, int pos, int val) {\n        if (l > r || l > pos || r < pos) return;\n        if (l == pos && r == pos) {\n            st[p] = val;\n            return;\n        }\n        update(2 * p, l, (l + r) / 2, pos, val);\n        update(2 * p + 1, (l + r) / 2 + 1, r, pos, val);\n        st[p] = st[2 * p] + st[2 * p + 1];\n    }\n    vector<int> countOfPeaks(vector<int>& nums, vector<vector<int>>& queries) {\n        vector<int> res;\n        int n = nums.size();\n        arr[0] = 0; arr[n - 1] = 0;\n        for (int i = 1; i < n - 1; i++) arr[i] = (nums[i] > nums[i - 1] && nums[i] > nums[i + 1]);\n        build(1, 0, n - 1);\n        for (int i = 0; i < queries.size(); i++) {\n            int t = queries[i][0];\n            if (t == 1) {\n                int L = queries[i][1] + 1;\n                int R = queries[i][2] - 1;\n                res.push_back(get(1, 0, n - 1, L, R));\n            } else {\n                int pos = queries[i][1];\n                int val = queries[i][2];\n                nums[pos] = val;\n                if (pos == 0) {\n                    if (nums[1] > nums[0] && nums[1] > nums[2]) update(1, 0, n - 1, 1, 1);\n                    else update(1, 0, n - 1, 1, 0);\n                } else if (pos == n - 1) {\n                    if (nums[n - 2] > nums[n - 1] && nums[n - 2] > nums[n - 3]) update(1, 0, n - 1, n - 2, 1);\n                    else update(1, 0, n - 1, n - 2, 0);\n                } else {\n                    if (nums[pos] > nums[pos - 1] && nums[pos] > nums[pos + 1]) update(1, 0, n - 1, pos, 1);\n                    else update(1, 0, n - 1, pos, 0);\n                    if (pos - 1 > 0) {\n                        if (nums[pos - 1] > nums[pos - 2] && nums[pos - 1] > nums[pos]) update(1, 0, n - 1, pos - 1, 1);\n                        else update(1, 0, n - 1, pos - 1, 0);\n                    }\n                    if (pos + 1 < n - 1) {\n                        if (nums[pos + 1] > nums[pos] && nums[pos + 1] > nums[pos + 2]) update(1, 0, n - 1, pos + 1, 1);\n                        else update(1, 0, n - 1, pos + 1, 0);\n                    }\n                }\n            }\n        }\n        return res;\n    }\n};",
    "submit_ts": "1718507358",
    "subm_id": "1289649060"
}