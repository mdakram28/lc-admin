{
    "username": "Nitish7890",
    "submission": "class Solution {\n\npublic:\n    int breadthFirstSearch(vector<vector<int>> &adjList, int start, int target1, int target2, int totalNodes) {\n        queue<int> q;\n        vector<int> visited(totalNodes + 4, 0);\n        q.push(start);\n        visited[start] = 1;\n        \n        while (!q.empty()) {\n            int current = q.front();\n            q.pop();\n            for (int neighbor : adjList[current]) {\n                if (!visited[neighbor]) {\n                    q.push(neighbor);\n                    visited[neighbor] = 1;\n                }\n            }\n        }\n        return visited[target1] || visited[target2];\n    }\n    \n    bool canReachCorner(int width, int height, vector<vector<int>>& circles) {\n        vector<pair<pair<int, int>, int>> circleDetails(circles.size());\n        vector<vector<int>> adjList(circles.size() + 4);\n        int circleCount = circles.size();\n        \n        for (int i = 0; i < circleCount; ++i) {\n            circleDetails[i].first.first = circles[i][0];\n            circleDetails[i].first.second = circles[i][1];\n            circleDetails[i].second = circles[i][2];\n        }\n        \n        auto calculateDistance = [](int x1, int y1, int x2, int y2) {\n            return sqrt(pow(x1 - x2, 2) + pow(y1 - y2, 2));\n        };\n        \n        for (int i = 0; i < circleCount; ++i) {\n            if (circleDetails[i].first.first <= circleDetails[i].second) {\n                adjList[circleCount].push_back(i);\n                adjList[i].push_back(circleCount);\n            }\n            if (width - circleDetails[i].first.first <= circleDetails[i].second) {\n                adjList[circleCount + 2].push_back(i);\n                adjList[i].push_back(circleCount + 2);\n            }\n            if (circleDetails[i].first.second <= circleDetails[i].second) {\n                adjList[circleCount + 1].push_back(i);\n                adjList[i].push_back(circleCount + 1);\n            }\n            if (height - circleDetails[i].first.second <= circleDetails[i].second) {\n                adjList[circleCount + 3].push_back(i);\n                adjList[i].push_back(circleCount + 3);\n            }\n            for (int j = i + 1; j < circleCount; ++j) {\n                double distance = calculateDistance(circleDetails[i].first.first, circleDetails[i].first.second, circleDetails[j].first.first, circleDetails[j].first.second);\n                int radiusSum = circleDetails[i].second + circleDetails[j].second;\n                if (radiusSum >= distance) {\n                    adjList[i].push_back(j);\n                    adjList[j].push_back(i);\n                }\n            }\n        }\n        \n        int isBlocked = 0;\n        isBlocked = max(isBlocked, breadthFirstSearch(adjList, circleCount, circleCount + 1, circleCount + 2, circleCount + 4)); // Check for bottom-left corner\n        isBlocked = max(isBlocked, breadthFirstSearch(adjList, circleCount + 3, circleCount + 2, circleCount + 1, circleCount + 4)); // Check for top-right corner\n        \n        return !isBlocked;\n    }\n};",
    "submit_ts": "1722137063",
    "subm_id": "1335753081"
}