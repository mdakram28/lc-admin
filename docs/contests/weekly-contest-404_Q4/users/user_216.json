{
    "username": "Ma_Lin",
    "submission": "class Solution {\npublic:\n    vector<int> g[2][100005];\n    int n[2], f[2][100005], up[2][100005], tot[2], fa[2][100005];\n    vector<int> xl[2];\n    \n    void calc_xl(int j){\n        int i;\n        queue<int> Q;\n        Q.push(0);\n        fa[j][0] = -1;\n        while (Q.size() > 0){\n            i = Q.front();\n            Q.pop();\n            xl[j].push_back(i);\n            for (auto w : g[j][i])\n                if (w != fa[j][i]){\n                    Q.push(w);\n                    fa[j][w] = i;\n                }\n        }\n    }\n    \n    void calc_f(int j){\n        int zd[2], w, p;\n        for (w = n[j] - 1; w >= 0; --w){\n            p = xl[j][w];\n            if (g[j][p].size() == 0 || (g[j][p].size() == 1 && g[j][p][0] == fa[j][p])){\n                f[j][p] = 0;\n                continue;\n            }\n\n            zd[0] = zd[1] = -1;\n            for (auto i : g[j][p]){\n                if (i == fa[j][p]) continue;\n                if (f[j][i] > zd[0]){\n                    zd[1] = zd[0];\n                    zd[0] = f[j][i];\n                }\n                else{\n                    if (f[j][i] > zd[1]) zd[1] = f[j][i];\n                }\n            }\n\n            f[j][p] = zd[0] + 1;\n            tot[j] = max(tot[j], f[j][p]);\n            if (zd[0] != -1 && zd[1] != -1) tot[j] = max(tot[j], zd[0] + 1 + zd[1] + 1);\n        }\n    }\n    \n    void calc_up(int j){\n        int zd[2], now, w, p;\n        for (w = 0; w < n[j]; ++w){\n            p = xl[j][w];\n            zd[0] = zd[1] = -1;\n            for (auto i : g[j][p]){\n                if (i == fa[j][p]) continue;\n                if (f[j][i] > zd[0]){\n                    zd[1] = zd[0];\n                    zd[0] = f[j][i];\n                }\n                else{\n                    if (f[j][i] > zd[1]) zd[1] = f[j][i];\n                }\n            }\n\n            for (auto i : g[j][p]){\n                if (i == fa[j][p]) continue;\n                now = up[j][p] + 1;\n                if (zd[0] == f[j][i]) now = max(now, zd[1] + 1 + 1);\n                else now = max(now, zd[0] + 1 + 1);\n                up[j][i] = now;\n                // calc_up(j, i, p);\n            }\n\n            tot[j] = max(tot[j], up[j][p] + f[j][p]);\n        }\n    }\n    \n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n        int i, j;\n        for (j = 0; j < 2; ++j){\n            if (j == 0) n[j] = edges1.size() + 1;\n            else n[j] = edges2.size() + 1;\n            for (i = 0; i < n[j]; ++i) g[j][i].clear();\n            if (j == 0){\n                for (auto e : edges1){\n                    g[j][e[0]].push_back(e[1]);\n                    g[j][e[1]].push_back(e[0]);\n                }\n            }\n            else{\n                for (auto e : edges2){\n                    g[j][e[0]].push_back(e[1]);\n                    g[j][e[1]].push_back(e[0]);\n                }\n            }\n        }\n        \n        for (j = 0; j < 2; ++j){\n            calc_xl(j);\n            tot[j] = 0;\n            calc_f(j);\n            up[j][0] = 0;\n            calc_up(j);\n        }\n        \n        int res = max(tot[0], tot[1]), q[2];\n        for (j = 0; j < 2; ++j){\n            q[j] = 1000000000;\n            for (i = 0; i < n[j]; ++i){\n                q[j] = min(q[j], max(up[j][i], f[j][i]));\n                // if (j == 1) cout<<i<<\" \"<<up[j][i]<<\" \"<<f[j][i]<<endl;\n            }\n        }\n        \n        // cout<<res<<endl;\n        res = max(res, q[0] + q[1] + 1);\n        // cout<<q[0]<<\" \"<<q[1]<<\" \"<<res<<endl;\n        return res;\n    }\n};",
    "submit_ts": 1719717255.0
}