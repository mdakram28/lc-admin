{
    "username": "SCP5514_Dragonslayer",
    "submission": "class Solution {\npublic:\n    int maximumLength(vector<int>& nums, int k) {\n        int n = nums.size();\n        vector<vector<int>>dp(n + 1, vector<int> (k + 1, 0));\n        map<int, vector<int>>m;\n        map<int,int>l;\n        for(int i = 0; i < n ; i++) {\n            dp[i + 1][0] = 1;\n            m[nums[i]].push_back(i);\n        }\n\n        for(int i = 0; i < n; i++) {\n            if(l[nums[i]]) {\n                int cur = l[nums[i]];\n                for(int j = 0; j <= k; j++) {                    \n                    int lst = m[nums[i]][cur - 1];\n                    dp[i + 1][j] = max(dp[i + 1][j], 1 + dp[lst + 1][j]);\n                }\n            }\n            l[nums[i]]++;\n            for(int j = i - 1; j >= i - 200 && j >= 0; j--) {\n                if(nums[i] == nums[j])\n                        continue;\n                for(int z = 0; z < k; z++) {                    \n                                         \n                     dp[i + 1][z  + 1] = max(dp[i + 1][z + 1], 1 + dp[j + 1][z]);\n                    \n                }\n            }\n        }\n        int ans = 0;\n        for(int i = 1; i <= n; i++) {\n            for(int j = 0; j <= k; j++) {\n                ans = max(ans, dp[i][j]);\n                // cout << dp[i][j] << \" \";\n            }\n            // cout << \"\\n\";\n        }\n        return ans;\n    }\n};",
    "submit_ts": "1717861203",
    "subm_id": "1281783175"
}