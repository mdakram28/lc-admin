{
    "username": "zwling",
    "submission": "template <class S, S (*op)(S, S), S (*e)()> struct segtree {\n  public:\n    segtree() : segtree(0) {}\n    explicit segtree(int n) : segtree(std::vector<S>(n, e())) {}\n    explicit segtree(const std::vector<S>& v) : _n(int(v.size())) {\n        log = 0;\n        while ((1 << log) < _n) ++log;\n        size = 1 << log;\n        d = std::vector<S>(2 * size, e());\n        for (int i = 0; i < _n; i++) d[size + i] = v[i];\n        for (int i = size - 1; i >= 1; i--) {\n            update(i);\n        }\n    }\n\n    void set(int p, S x) {\n        assert(0 <= p && p < _n);\n        p += size;\n        d[p] = x;\n        for (int i = 1; i <= log; i++) update(p >> i);\n    }\n\n    S get(int p) const {\n        assert(0 <= p && p < _n);\n        return d[p + size];\n    }\n\n    S prod(int l, int r) const {\n        assert(0 <= l && l <= r && r <= _n);\n        S sml = e(), smr = e();\n        l += size;\n        r += size;\n\n        while (l < r) {\n            if (l & 1) sml = op(sml, d[l++]);\n            if (r & 1) smr = op(d[--r], smr);\n            l >>= 1;\n            r >>= 1;\n        }\n        return op(sml, smr);\n    }\n\n    S all_prod() const { return d[1]; }\n\n    template <bool (*f)(S)> int max_right(int l) const {\n        return max_right(l, [](S x) { return f(x); });\n    }\n    template <class F> int max_right(int l, F f) const {\n        assert(0 <= l && l <= _n);\n        assert(f(e()));\n        if (l == _n) return _n;\n        l += size;\n        S sm = e();\n        do {\n            while (l % 2 == 0) l >>= 1;\n            if (!f(op(sm, d[l]))) {\n                while (l < size) {\n                    l = (2 * l);\n                    if (f(op(sm, d[l]))) {\n                        sm = op(sm, d[l]);\n                        l++;\n                    }\n                }\n                return l - size;\n            }\n            sm = op(sm, d[l]);\n            l++;\n        } while ((l & -l) != l);\n        return _n;\n    }\n\n    template <bool (*f)(S)> int min_left(int r) const {\n        return min_left(r, [](S x) { return f(x); });\n    }\n    template <class F> int min_left(int r, F f) const {\n        assert(0 <= r && r <= _n);\n        assert(f(e()));\n        if (r == 0) return 0;\n        r += size;\n        S sm = e();\n        do {\n            r--;\n            while (r > 1 && (r % 2)) r >>= 1;\n            if (!f(op(d[r], sm))) {\n                while (r < size) {\n                    r = (2 * r + 1);\n                    if (f(op(d[r], sm))) {\n                        sm = op(d[r], sm);\n                        r--;\n                    }\n                }\n                return r + 1 - size;\n            }\n            sm = op(d[r], sm);\n        } while ((r & -r) != r);\n        return 0;\n    }\n\n  private:\n    int _n, size, log;\n    std::vector<S> d;\n\n    void update(int k) { d[k] = op(d[2 * k], d[2 * k + 1]); }\n};\n/*\nclass S, S (*op)(S, S), S (*e)()\n*/\nvector<int> C;\n\nstruct S {\n    int l, r, ok;\n    void f() {\n        cout << l << \" \" << r << \" \" << ok << endl;\n    }\n};\nS op (S a, S b) {\n    S z;\n    if (a.l == -1) return b;\n    if (b.l == -1) return a;\n    if (a.ok && b.ok && C[a.r] != C[b.l]) z.ok = 1;\n    else z.ok = 0;\n    // a.f(), b.f();\n    z.l = a.l, z.r = b.r;\n    return z;\n}\n\nS e() {\n    return {-1, -1, -1};\n}\nclass Solution {\npublic:\n    int numberOfAlternatingGroups(vector<int>& c, int k) {\n        // C = c;\n        int n = c.size();\n        for (int i = 0; i < n; i++) {\n            c.push_back(c[i]);\n        }\n        C = c;\n        segtree<S, op, e> seg(2 * n);\n        for (int i = 0; i < 2 * n; i++) {\n            seg.set(i, {i, i, 1});\n        }\n        \n        // seg.prod(1, 2).f();\n        // cout << seg.prod(0, 2).ok << endl;\n        int ans = 0;\n        for (int i = 0; i < n; i++) {\n            if (seg.prod(i, i + k).ok == 1) ans++;\n        }\n        return ans;\n    }\n};",
    "submit_ts": "1720278318",
    "subm_id": "544561931"
}