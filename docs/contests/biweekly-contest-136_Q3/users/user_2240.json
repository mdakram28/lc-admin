{
    "username": "Geek_Guy_0808",
    "submission": "class Solution {\npublic:\n\nvoid updateIfCenter(vector<vector<int>>& gridd, int& uttar, int row, int col) {\n    if (row % 2 == 1 && col % 2 == 1) {\n        if (gridd[row / 2][col / 2] == 1) {\n            uttar += 1;\n        }\n    }\n}\n\nint minFlips(vector<vector<int>>& gridd) {\n    int temp = 3;\n    int row = gridd.size(), col = gridd[0].size();\n    int uttar = 0;     vector<int> arrayy(temp, 0);\n\n    updateIfCenter(gridd, uttar, row, col);\n\n    auto addShift = [&](int x, int y, bool isRow) {\n        int a = 0, b = (isRow ? col : row) - 1;\n        while (a < b) {\n            int sm = (isRow ? gridd[x][a] + gridd[x][b] : gridd[a][y] + gridd[b][y]);\n            arrayy[sm] += 1;\n            a += 1;\n            b -= 1;\n        }\n    };\n\n    if (row % 2 == 1) addShift(row / 2, col, true);\n    if (col % 2 == 1) addShift(row, col / 2, false);\n\n    uttar += (arrayy[2] % 2 == 1) ? (arrayy[1] > 0 ? arrayy[1] : 2) : arrayy[1];\n\nvector<pair<int, int>> directions = {{0, 0}, {0, 1}, {1, 0}, {1, 1}};\n\nfor (int i = 0; i < row / 2; ++i) {\n    for (int j = 0; j < col / 2; ++j) {\n        int oneCount = 0;\n        for (const auto& [dx, dy] : directions) {\n            int x = i + dx * (row - 2 * i - 1);\n            int y = j + dy * (col - 2 * j - 1);\n            oneCount += gridd[x][y];\n        }\n        if (oneCount != 0 && oneCount != 4) {\n            uttar += min(oneCount, 4 - oneCount);\n        }\n    }\n}\n\n    return uttar;\n}\n\n};",
    "submit_ts": "1722700350",
    "subm_id": "1343239183"
}