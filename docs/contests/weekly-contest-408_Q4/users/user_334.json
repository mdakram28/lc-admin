{
    "username": "jaqen_hghar70",
    "submission": "#include <iostream>\n#include <vector>\n#include <queue>\n#include <cmath>\n#include <algorithm>\n\nclass Solution {\npublic:\n    int performBFS(std::vector<std::vector<int>> &adjList, int start, int dest1, int dest2, int totalNodes) {\n        std::queue<int> q;\n        std::vector<int> visited(totalNodes + 4, 0);\n        q.push(start);\n        visited[start] = 1;\n        \n        while (!q.empty()) {\n            int node = q.front();\n            q.pop();\n            for (int neighbor : adjList[node]) {\n                if (!visited[neighbor]) {\n                    q.push(neighbor);\n                    visited[neighbor] = 1;\n                }\n            }\n        }\n        return visited[dest1] || visited[dest2];\n    }\n    \n    bool canReachCorner(int X, int Y, std::vector<std::vector<int>>& circlesData) {\n        std::vector<std::pair<std::pair<int, int>, int>> circles(circlesData.size());\n        std::vector<std::vector<int>> adjList(circlesData.size() + 4);\n        int totalCircles = circlesData.size();\n        \n        for (int i = 0; i < totalCircles; ++i) {\n            circles[i].first.first = circlesData[i][0];\n            circles[i].first.second = circlesData[i][1];\n            circles[i].second = circlesData[i][2];\n        }\n        \n        for (int i = 0; i < totalCircles; ++i) {\n            if (circles[i].first.first <= circles[i].second) {\n                adjList[totalCircles].push_back(i);\n                adjList[i].push_back(totalCircles);\n            }\n            if (X - circles[i].first.first <= circles[i].second) {\n                adjList[totalCircles + 2].push_back(i);\n                adjList[i].push_back(totalCircles + 2);\n            }\n            if (circles[i].first.second <= circles[i].second) {\n                adjList[totalCircles + 1].push_back(i);\n                adjList[i].push_back(totalCircles + 1);\n            }\n            if (Y - circles[i].first.second <= circles[i].second) {\n                adjList[totalCircles + 3].push_back(i);\n                adjList[i].push_back(totalCircles + 3);\n            }\n            for (int j = i + 1; j < totalCircles; ++j) {\n                double distance = std::sqrt(std::pow(circles[i].first.first - circles[j].first.first, 2) +\n                                            std::pow(circles[i].first.second - circles[j].first.second, 2));\n                int combinedRadius = circles[i].second + circles[j].second;\n                if (combinedRadius >= distance) {\n                    adjList[i].push_back(j);\n                    adjList[j].push_back(i);\n                }\n            }\n        }\n        \n        int blockage = 0;\n        blockage = std::max(blockage, performBFS(adjList, totalCircles, totalCircles + 1, totalCircles + 2, totalCircles + 4));\n        blockage = std::max(blockage, performBFS(adjList, totalCircles + 3, totalCircles + 2, totalCircles + 1, totalCircles + 4));\n        return blockage == 0;\n    }\n};\n",
    "submit_ts": "1722137346",
    "subm_id": "1335761141"
}