{
    "username": "huanli01008",
    "submission": "class Solution {\n    public int minimumDiameterAfterMerge(int[][] edges1, int[][] edges2) {\n        int n = edges1.length + 1, m = edges2.length + 1;\n        Map<Integer, List<Integer>> map1 = new HashMap<>();\n        int[] degree1 = new int[n];\n        Map<Integer, List<Integer>> map2 = new HashMap<>();\n        int[] degree2 = new int[m];\n        for(int[] i : edges1){\n            int a = i[0], b = i[1];\n            if(!map1.containsKey(a)) map1.put(a, new ArrayList<>());\n            if(!map1.containsKey(b)) map1.put(b, new ArrayList<>());\n            map1.get(a).add(b);\n            map1.get(b).add(a);\n            degree1[a]++;\n            degree1[b]++;\n        }\n        for(int[] i : edges2){\n            int a = i[0], b = i[1];\n            if(!map2.containsKey(a)) map2.put(a, new ArrayList<>());\n            if(!map2.containsKey(b)) map2.put(b, new ArrayList<>());\n            map2.get(a).add(b);\n            map2.get(b).add(a);\n            degree2[a]++;\n            degree2[b]++;\n        }\n        int res1 = helper(degree1, map1);\n        int res2 = helper(degree2, map2);\n        \n        return Math.max(Math.max(res1, res2), ((res1 + 1) / 2 + (res2 + 1) / 2) + 1);\n    }\n    public int helper(int[] degree, Map<Integer, List<Integer>> map){\n        int count = 0, n = degree.length;\n        if(n <= 2) return n - 1;\n        Queue<Integer> que = new LinkedList<>();\n        for(int i = 0; i < n; i++){\n            if(degree[i] == 1){                \n                que.add(i);\n            }\n        }\n        while(que.size() > 1){\n            int k = que.size();\n            while(k-- > 0){\n                int cur = que.poll();\n                for(int i : map.get(cur)){\n                    if(degree[i] == 1) continue;\n                    degree[i]--;\n                    if(degree[i] == 1){\n                        que.add(i);\n                    }\n                }\n            }\n            count++;\n        }\n        return que.isEmpty() ? count * 2 - 1 : count * 2;\n    }\n}",
    "submit_ts": 1719719517.0
}