{
    "username": "user3593Z",
    "submission": "class Solution {\n\n        int mod = (int) 1e9 + 7;\n\n        public int maximumSumSubsequence(int[] nums, int[][] queries) {\n\n            long result = 0;\n            SegmentTree segTree = new SegmentTree(nums);\n\n            for (int i = 0; i < queries.length; i++) {\n                segTree.update(queries[i][0], queries[i][1]);\n                result = (result + segTree.segmentTree[1].max) % mod;\n            }\n\n            return (int)result;\n\n        }\n\n        private static class SegmentTree {\n\n            Node[] segmentTree;\n            int base;\n\n            public SegmentTree(int[] nums) {\n                int base = 1;\n                while (base < nums.length)\n                    base <<= 1;\n                this.base = base;\n                segmentTree = new Node[base * 2];\n                for (int i = 0; i < base * 2; i++)\n                    segmentTree[i] = new Node(-(int) 1e6);\n\n                for (int i = 0; i < nums.length; i++) {\n                    update(i, nums[i]);\n                }\n            }\n\n            public void update(int position, int value) {\n                segmentTree[base + position] = new Node(value);\n                for (int i = (base + position) / 2; i > 0; i /= 2) {\n                    segmentTree[i].merge(segmentTree[i * 2], segmentTree[i * 2 + 1]);\n                }\n            }\n\n            private static class Node {\n                int leftEmpty;\n                int rightEmpty;\n                int bothEmpty;\n                int bothFilled;\n                int max;\n                boolean single;\n\n                public Node(int value) {\n                    this.single = true;\n                    this.leftEmpty = 0;\n                    this.rightEmpty = 0;\n                    this.bothEmpty = 0;\n                    this.bothFilled = value;\n                    this.max = Math.max(value, 0);\n                }\n\n                public void merge(Node left, Node right) {\n                    this.leftEmpty = Math.max(left.leftEmpty + right.leftEmpty, left.bothEmpty + right.bothFilled);\n                    this.rightEmpty = Math.max(right.rightEmpty + left.rightEmpty, right.bothEmpty + left.bothFilled);\n                    this.bothEmpty = Math.max(\n                            Math.max(left.leftEmpty + right.bothEmpty, right.rightEmpty + left.bothEmpty),\n                            left.bothEmpty + right.bothEmpty);\n                    this.bothFilled = Math.max(\n                            Math.max(left.rightEmpty + right.bothFilled, right.leftEmpty + left.bothFilled),\n                            left.rightEmpty + right.leftEmpty);\n                    this.single = false;\n                    this.max = Math.max(Math.max(this.leftEmpty, this.rightEmpty),\n                            Math.max(this.bothEmpty, this.bothFilled));\n                }\n            }\n\n        }\n    }",
    "submit_ts": 1716695979.0
}