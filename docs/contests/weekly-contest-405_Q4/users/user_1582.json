{
    "username": "zhuang1992",
    "submission": "class Solution {\npublic:\n    struct TrieNode {\n        TrieNode(char x): c(x) {\n            children.resize(26, nullptr);\n        }\n        char c;\n        vector<TrieNode*> children;\n        int cost = INT_MAX;\n        bool is_word = false;\n    };\n    TrieNode* root;\n    void insert_str(string& w, int cost) {\n        TrieNode* p = root;\n        for(auto& c: w) {\n            if (!p->children[c-'a']) {\n                p->children[c-'a'] = new TrieNode(c);\n            }\n            p = p->children[c-'a'];\n        }\n        p->cost = min(p->cost, cost);\n        p->is_word = true;\n    }\n\n\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        root = new TrieNode(' ');\n        for(int i = 0; i < words.size(); ++i) {\n            reverse(words[i].begin(), words[i].end());\n            insert_str(words[i], costs[i]);\n        }\n\n        int n = target.size();\n        vector<int> dp(n, INT_MAX);\n        for(int i = 0; i < n; ++i) {\n            TrieNode* p = root;\n            for(int j = i; j >= 0; --j) {\n                if (!p->children[target[j]-'a'])\n                    break;\n                p = p->children[target[j]-'a'];\n                if (p->is_word) {\n                    if (j > 0 && dp[j-1] == INT_MAX) continue;\n                    dp[i] = min(dp[i], (j == 0 ? 0 : dp[j-1]) + p->cost);\n                }\n                    \n            }\n        }\n        return dp[n-1] == INT_MAX ? -1 : dp[n-1];\n    }\n};",
    "submit_ts": "1720323913",
    "subm_id": "1312387093"
}