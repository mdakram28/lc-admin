{
    "username": "wonderfulmtf",
    "submission": "class Solution {\n    fun timeTaken(edges: Array<IntArray>): IntArray {\n        val n = edges.size + 1\n        val cache = Array(n) {\n            mutableListOf<IntArray>()\n        }\n        edges.forEach {\n            val x = it[0]\n            val y = it[1]\n            cache[x].add(intArrayOf(y, 0))\n            cache[y].add(intArrayOf(x, 0))\n        }\n        val ans = IntArray(n)\n\n        fun dfs(start: Int, from: Int): Int {\n            var cur = 0\n            cache[start].forEach {\n                val to = it[0]\n                if (to != from) {\n                    val tmp = if (to and 1 == 1) {\n                        dfs(to, start) + 1\n                    } else {\n                        dfs(to, start) + 2\n                    }\n                    it[1] = tmp\n                    cur = max(cur, tmp)\n                }\n            }\n            return cur\n        }\n        ans[0] = dfs(0, -1)\n        fun change(start: Int, from: Int, time: Int) {\n            cache[start].sortBy { -it[1] }\n            cache[start].forEachIndexed { index, ints ->\n                val to = ints[0]\n                if (to != from) {\n                    var tmp = time + if (start and 1 == 1) 1 else 2\n                    if (index == 0) {\n                        if (cache[start].size > 1) {\n                            tmp = max(tmp, cache[start][1][1] + if (start and 1 == 1) 1 else 2)\n                        } else {\n                            tmp = max(tmp, if (start and 1 == 1) 1 else 2)\n\n                        }\n                    } else {\n                        tmp = max(tmp, cache[start][0][1] + if (start and 1 == 1) 1 else 2)\n                    }\n                    ans[to] = max(ints[1] - if (to and 1 == 1) 1 else 2, tmp)\n                    change(to, start, tmp)\n                }\n            }\n        }\n        change(0, -1, 0)\n        return ans\n    }\n}",
    "submit_ts": "1722700604",
    "subm_id": "552280540"
}