{
    "username": "workingnaresh",
    "submission": "class Solution:\n    def canReachCorner(self, X: int, Y: int, circles: List[List[int]]) -> bool:\n        groups = []\n        \n        adj = defaultdict(list)\n        \n        def circle_touch_which_square_border(circle, square):\n            x, y, r = circle\n            x1, y1, x2, y2 = square\n            sides = set()\n\n            if y - r <= y1 and x1 <= x <= x2:\n                sides.add('D')\n            if y + r >= y2 and x1 <= x <= x2:\n                sides.add('U')\n            if x - r <= x1 and y1 <= y <= y2:\n                sides.add('L')\n            if x + r >= x2 and y1 <= y <= y2:\n                sides.add('R')\n\n            return sides\n        def is_overlap_or_touch(circle1, circle2):\n            x1, y1, r1 = circle1\n            x2, y2, r2 = circle2\n            distance = math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)\n            return distance <= (r1 + r2) and distance >= abs(r1 - r2)\n        \n        touch = []\n        square = (0,0,X,Y)\n        for circle in circles:\n            touch.append(circle_touch_which_square_border(circle, square))\n            \n        print(touch)\n        for i in range(len(circles) - 1):\n            for j in range(i+1, len(circles)):\n                if is_overlap_or_touch(circles[i], circles[j]):\n                    adj[i].append(j)\n                    adj[j].append(i)\n                    \n            \n                   \n        visited = set()\n        group = []\n        def dfs(circle):\n            nonlocal visited, adj,group\n            if circle in visited: return\n            \n            visited.add(circle)\n            for neighbour in adj[circle]:\n                if neighbour in visited: continue\n                group.append(neighbour)\n                dfs(neighbour)\n            \n                \n                \n                \n                \n        \n        for i in range(len(circles)):\n            if i not in visited:\n                group = [i]\n                dfs(i)\n                groups.append(group)\n        \n    \n        # print(groups)\n        for group in groups:\n            cur = set()\n            for i in group:\n                for j in touch[i]:\n                    cur.add(j)\n                \n            # print(cur)\n            if \"U\" in cur and (\"D\" in cur or \"R\" in cur):\n                return False\n            if \"D\" in cur and (\"U\" in cur or \"L\" in cur):\n                return False\n            if \"L\" in cur and (\"D\" in cur or \"R\" in cur):\n                return False\n            if \"R\" in cur and (\"U\" in cur or \"L\" in cur):\n                return False\n        return True\n\n\n                \n        ",
    "submit_ts": "1722136902",
    "subm_id": "1335748352"
}