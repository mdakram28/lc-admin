{
    "username": "gavnish_kumar",
    "submission": "class Solution {\nprivate:\n    static const int MOD =1e9+7;\n    static const int MI = 400;\n\npublic:\n    int numberOfPermutations(int n, vector<vector<int>>& arr) {\n        unordered_map<int, int> rMap;\n        for (const auto& it : arr) {\n            rMap[it[0] + 1] = it[1];\n        }\n\n        vector<vector<long long>> permCounts(n + 1, vector<long long>(MI + 1, 0));\n        permCounts[0][0] = 1;\n\n        for (int length = 1; length <= n; ++length) {\n            for (int inv = 0; inv <= MI; ++inv) {\n                for (int newPos = 0; newPos < length; ++newPos) {\n                    int prevInv = inv - newPos;\n                    if (prevInv >= 0) {\n                        permCounts[length][inv] = (permCounts[length][inv] + permCounts[length - 1][prevInv]) % MOD;\n                    }\n                }\n            }\n\n            if (rMap.find(length) != rMap.end()) {\n                int targetInv = rMap[length];\n                for (int inv = 0; inv <= MI; ++inv) {\n                    if (inv != targetInv) {\n                        permCounts[length][inv] = 0;\n                    }\n                }\n            }\n        }\n\n        long long result = 0;\n        for (long long count : permCounts[n]) {\n            result = (result + count) % MOD;\n        }\n        return static_cast<int>(result);\n    }\n};",
    "submit_ts": 1719070389.0
}