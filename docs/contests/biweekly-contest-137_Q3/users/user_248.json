{
    "username": "user9512b",
    "submission": "class Solution {\npublic:\n    typedef long long int lli;\n\n    struct CompareVectors {\n        bool operator()(const std::vector<lli>& a, const std::vector<lli>& b) const {\n            // Compare based on the first element of the vector\n            return a[0] > b[0];\n        }\n    };\n\n    long long maximumValueSum(vector<vector<int>>& board) {\n        int n = board.size();\n        int m = board[0].size();\n\n        vector<vector<lli>> nn;\n\n        priority_queue<vector<lli>, vector<vector<lli>>, CompareVectors> minHeap;\n        priority_queue<vector<lli>, vector<vector<lli>>, CompareVectors> minHeap2;\n\n        for (int i = 0; i < n; i++){\n            for (int j = 0; j < m; j++){\n                minHeap.push({board[i][j], i, j});\n                if (minHeap.size() > 3){\n                    minHeap.pop();\n                }\n                minHeap2.push({board[i][j], i, j});\n                if (minHeap2.size() > 12){\n                    minHeap2.pop();\n                }\n            }\n\n            while (!minHeap.empty()){                \n                nn.push_back(minHeap.top());\n                minHeap.pop();\n            }\n        }\n\n        vector<vector<lli>> best;\n        while(!minHeap2.empty()){\n            best.push_back(minHeap2.top());\n            minHeap2.pop();\n        }\n        reverse(best.begin(), best.end());\n\n        int s = best.size();\n        bool found = false;\n        lli ans = LLONG_MIN;\n        for (int i = 0; i < s; i++){\n            for (int j = i+1; j < s; j++){\n                for (int k = j +1; k < s; k++){\n                    int x1 = best[i][1];\n                    int y1 = best[i][2];\n                    int x2 = best[j][1];\n                    int y2 = best[j][2];\n                    int x3 = best[k][1];\n                    int y3 = best[k][2];\n                    if (x1 != x2 && x1 != x3 && x2 != x3 && y1 != y2 && y1 != y3 && y2 != y3){\n                        ans = max(ans, best[i][0] + best[j][0] + best[k][0]);\n                        found = true;\n                    }\n                }\n            }\n        }\n\n\n        if (found){\n            // cout << \"found\" << endl;\n            return ans;\n        }\n\n        for (int i = 0; i < 4; i++){\n            for (int j = 0; j < nn.size(); j++){\n                for (int k = 0; k < nn.size(); k++){\n                    int x1 = best[i][1];\n                    int y1 = best[i][2];\n                    int x2 = nn[j][1];\n                    int y2 = nn[j][2];\n                    int x3 = nn[k][1];\n                    int y3 = nn[k][2];\n                    if (x1 != x2 && x1 != x3 && x2 != x3 && y1 != y2 && y1 != y3 && y2 != y3){\n                        ans = max(ans, best[i][0] + nn[j][0] + nn[k][0]);\n                    }\n                }\n            }\n\n        }\n\n        return ans;\n    }\n};",
    "submit_ts": "1723909710",
    "subm_id": "1359202844"
}