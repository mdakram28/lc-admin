{
    "username": "Shuojiang",
    "submission": "class Solution {\nprivate:\n    vector<int> father;\n    vector<int> info;\n\n    int findFather(int x) {\n        if (x != father[x]) {\n            father[x] = findFather(father[x]);\n        }\n\n        return father[x];\n    }\n\n    void unionSets(int x, int y) {\n        int fx = findFather(x), fy = findFather(y);\n        if (fx != fy) {\n            father[fx] = fy;\n            info[fy] |= info[fx];\n        }\n    }\n\n    bool isSameSet(int x, int y) {\n        return findFather(x) == findFather(y);\n    }\n\n    double distanceNum(long long x1, long long y1, long long x2, long long y2) {\n        return sqrt((x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2));\n    }\n\npublic:\n    bool canReachCorner(int X, int Y, vector<vector<int>>& circles) {\n        int numCircles = circles.size();\n        \n        father.resize(numCircles);\n        info.resize(numCircles);\n        for (int i = 0; i < numCircles; i++) {\n            father[i] = i;\n        }\n\n        for (int i = 0; i < numCircles; i++) {\n            int x1 = circles[i][0], y1 = circles[i][1], r1 = circles[i][2];\n            if (y1 <= r1) {\n                info[i] |= (1 << 0);\n            }\n            if (x1 <= r1) {\n                info[i] |= (1 << 1);\n            }\n            if ((X - x1) <= r1) {\n                info[i] |= (1 << 2);\n            }\n            if ((Y - y1) <= r1) {\n                info[i] |= (1 << 3);\n            }\n\n            for (int j = i + 1; j < numCircles; j++) {\n                int x2 = circles[j][0], y2 = circles[j][1], r2 = circles[j][2];\n\n                if (y2 <= r2) {\n                    info[j] |= (1 << 0);\n                }\n                if (x2 <= r2) {\n                    info[j] |= (1 << 1);\n                }\n                if ((X - x2) <= r2) {\n                    info[j] |= (1 << 2);\n                }\n                if ((Y - y2) <= r2) {\n                    info[j] |= (1 << 3);\n                }\n\n                if (distanceNum(x1, y1, x2, y2) <= static_cast<double>(r1 + r2)) {\n                    unionSets(i, j);\n                }\n\n                if ((info[j] & 1) && ((info[j] >> 1) & 1)) {\n                    return false;\n                }\n                if (((info[j] >> 2) & 1) && ((info[j] >> 3) & 1)) {\n                    return false;\n                }\n                if (((info[j] >> 1) & 1) && ((info[j] >> 2) & 1)) {\n                    return false;\n                }\n                if ((info[j] & 1) && ((info[j] >> 3) & 1)) {\n                    return false;\n                }\n            }\n\n            if ((info[i] & 1) && ((info[i] >> 1) & 1)) {\n                return false;\n            }\n            if (((info[i] >> 2) & 1) && ((info[i] >> 3) & 1)) {\n                return false;\n            }\n            if (((info[i] >> 1) & 1) && ((info[i] >> 2) & 1)) {\n                return false;\n            }\n            if ((info[i] & 1) && ((info[i] >> 3) & 1)) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n};",
    "submit_ts": "1722138192",
    "subm_id": "1335784521"
}