{
    "username": "Synet",
    "submission": "type Point struct {\n    val int\n    row int\n    col int\n}\n\nfunc maximumValueSum(board [][]int) int64 {\n    helperBoard := [][]Point{}\n    for row := 0; row < len(board); row++ {\n        helperRow := []Point{}\n        for col := 0; col < len(board[row]); col++ {\n            helperRow = append(helperRow, Point{val: board[row][col], row: row, col: col})\n        }\n        sort.Slice(helperRow, func(i, j int) bool {\n            return helperRow[i].val > helperRow[j].val\n        })\n        helperBoard = append(helperBoard, helperRow[:3])\n    }\n\n    sort.Slice(helperBoard, func(i, j int) bool {\n        return helperBoard[i][0].val > helperBoard[j][0].val\n    })\n\n    res := int64(math.MinInt64)\n    usedCol := make(map[int]bool)\n    usedRow := make(map[int]bool)\n\n    var backtrack func(summ int64, counter int)\n    backtrack = func(summ int64, counter int) {\n\n        if counter == 3 {\n            res = max(res, summ)\n            return\n        }\n\n        for i := 0; i < len(helperBoard); i++ {\n            for j := 0; j < len(helperBoard[i]); j++ {\n                if !usedCol[helperBoard[i][j].col] && !usedRow[helperBoard[i][j].row] {\n                    usedRow[helperBoard[i][j].row] = true\n                    usedCol[helperBoard[i][j].col] = true\n\n                    backtrack(summ + int64(helperBoard[i][j].val), counter + 1)\n\n                    usedRow[helperBoard[i][j].row] = false\n                    usedCol[helperBoard[i][j].col] = false\n                }\n            }\n        }\n    }\n    for i := 0; i < 3; i++ {\n        for j := 0; j < len(helperBoard[i]); j++ {\n            usedCol[helperBoard[i][j].col] = true\n            usedRow[helperBoard[i][j].row] = true\n            backtrack(int64(helperBoard[i][j].val), 1)\n            usedCol[helperBoard[i][j].col] = false\n            usedRow[helperBoard[i][j].row] = false\n        }\n    }\n    return res\n}",
    "submit_ts": "1723909803",
    "subm_id": "1359206372"
}