{
    "username": "TaranTheMonk",
    "submission": "import heapq\n\nclass Solution:\n    def minimumDistance(self, points: List[List[int]]) -> int:\n        \"\"\"\n        1. mahatten-distance = |x_i - x_j| + |y_i - y_j|\n        2. |x_i - x_j| + |y_i - y_j| = max(\n            (x_i - x_j) + (y_i - y_j), => (x_i + y_i) - (x_j + y_j)\n            (x_i - x_j) + (y_j - y_i), => (x_i - y_i) - (x_j - y_j)\n            (x_j - x_i) + (y_i - y_j), => (x_j - y_j) - (x_i - y_i)\n            (x_j - x_i) + (y_j - y_i), => (x_j + y_j) - (x_i + y_i)\n        ).\n        3. |x_i - x_j| + |y_i - y_j| = max(\n            sum(i) - sum(j),\n            diff(i) - diff(j),\n            diff(j) - diff(i),\n            sum(j) - sum(i),\n        )\n        \"\"\"\n        max_s, min_s = list(), list()\n        max_d, min_d = list(), list()\n        for _, (x, y) in enumerate(points):\n            s = x + y\n            d = x - y\n            \n            heapq.heappush(max_s, -s)\n            heapq.heappush(min_s, s)\n            heapq.heappush(max_d, -d)\n            heapq.heappush(min_d, d)\n\n        ret = float(\"+inf\")\n        for _, (x, y) in enumerate(points):\n            s = x + y\n            d = x - y\n            \n            f1, f2, f3, f4 = False, False, False, False\n            if -s == max_s[0]:\n                heapq.heappop(max_s)\n                f1 = True\n            if s == min_s[0]:\n                heapq.heappop(min_s)\n                f2 = True\n            if -d == max_d[0]:\n                heapq.heappop(max_d)\n                f3 = True\n            if d == min_d[0]:\n                heapq.heappop(min_d)\n                f4 = True\n                \n            ret = min(\n                ret,\n                max(\n                    -max_s[0] - min_s[0],\n                    -max_d[0] - min_d[0]\n                )\n            )\n            \n            if f1:\n                heapq.heappush(max_s, -s)\n            if f2:\n                heapq.heappush(min_s, s)\n            if f3:\n                heapq.heappush(max_d, -d)\n            if f4:\n                heapq.heappush(min_d, d)\n            \n        return ret"
}