{
    "username": "pnarayan001",
    "submission": "class Solution {\npublic:\n    int minChanges(std::vector<int>& numbers, int k) {\n        int n = numbers.size();\n        std::unordered_map<int, std::vector<int>> differenceMap;\n        std::vector<int> values;\n\n        // Process pairs of numbers from the start and end\n        for (int i = 0; i < n / 2; ++i) {\n            int left = numbers[i];\n            int right = numbers[n - i - 1];\n            int difference = std::abs(left - right);\n            int maxValue = std::max({left, right, k - left, k - right});\n            \n            differenceMap[difference].push_back(maxValue);\n            values.push_back(maxValue);\n        }\n\n        int minimumChanges = n; // Start with the maximum possible changes\n        std::sort(values.begin(), values.end());\n\n        // Iterate over each unique difference\n        for (const auto& entry : differenceMap) {\n            int currentDiff = entry.first;\n            int index = std::lower_bound(values.begin(), values.end(), currentDiff) - values.begin();\n            int totalChanges = index * 2 + (n / 2 - index);\n\n            // Adjust total changes based on the values associated with the current difference\n            for (const auto& x : entry.second) {\n                if (x < currentDiff) {\n                    totalChanges -= 2; // Two changes needed if x is less than currentDiff\n                } else {\n                    totalChanges -= 1; // One change needed otherwise\n                }\n            }\n\n            // Update the minimum changes found\n            minimumChanges = std::min(minimumChanges, totalChanges);\n        }\n\n        return minimumChanges;\n    }\n};",
    "submit_ts": "1721489276",
    "subm_id": "1327448375"
}