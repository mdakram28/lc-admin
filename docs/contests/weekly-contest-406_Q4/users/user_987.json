{
    "username": "dj_khalid",
    "submission": "class Solution {\npublic:\n    long long minimumCost(int m, int n, vector<int>& horizontalCuts, vector<int>& verticalCuts) {\n        sort(horizontalCuts.rbegin(), horizontalCuts.rend());\n        sort(verticalCuts.rbegin(), verticalCuts.rend());\n        \n       long long int totalCost = 0;\n       long long int hPieces = 1; // Initial number of horizontal pieces\n       long long int vPieces = 1; // Initial number of vertical pieces\n        \n        // Use two pointers to traverse the cuts\n        int hIndex = 0;\n        int vIndex = 0;\n        \n        while (hIndex < horizontalCuts.size() && vIndex < verticalCuts.size()) {\n            if (horizontalCuts[hIndex] > verticalCuts[vIndex]) {\n                // Make a horizontal cut\n                totalCost += horizontalCuts[hIndex] *1LL* vPieces;\n                hPieces++;\n                hIndex++;\n            } else {\n                // Make a vertical cut\n                totalCost += verticalCuts[vIndex] *1LL* hPieces;\n                vPieces++;\n                vIndex++;\n            }\n        }\n        \n        // If there are remaining horizontal cuts\n        while (hIndex < horizontalCuts.size()) {\n            totalCost += horizontalCuts[hIndex] *1LL* vPieces;\n            hPieces++;\n            hIndex++;\n        }\n        \n        // If there are remaining vertical cuts\n        while (vIndex < verticalCuts.size()) {\n            totalCost += verticalCuts[vIndex] *1LL* hPieces;\n            vPieces++;\n            vIndex++;\n        }\n        \n        return totalCost;\n    }\n};",
    "submit_ts": "1720925978",
    "subm_id": "1320272166"
}