{
    "username": "Daniel_Wu",
    "submission": "class Solution:\n    def canReachCorner(self, X: int, Y: int, circles: List[List[int]]) -> bool:\n        for idx in range(len(circles)):\n            circles[idx] = tuple(circles[idx])\n\n        graph = defaultdict(list)\n\n        def touching(circle1, circle2): #x,y of both cicles\n            if sqrt((circle1[0] - circle2[0])**2 + (circle1[1] - circle2[1])**2) <= circle1[2] + circle2[2]:\n                return True\n\n        start = []\n\n        prev_circles = set()\n\n        for circle2 in circles:\n            for circle1 in prev_circles:\n                if touching(circle1, circle2):\n                    graph[circle1].append(circle2)\n                    graph[circle2].append(circle1)\n\n            prev_circles.add(circle2)\n            if circle2[0] - circle2[2] <= 0 or circle2[1] + circle2[2] >= Y:\n                start.append(circle2) #starting circle candidate\n \n        def finished(circle):\n            if circle[0] + circle[2] >= X or circle[1] - circle[2] <= 0:\n                return True\n            return False\n\n\n        seen = set()\n\n        while start:\n            cpy = []\n            for circle in start:\n                seen.add(circle)\n\n                if finished(circle):\n                    return False\n\n                for next_circle in graph[circle]:\n                    if next_circle not in seen:\n                        seen.add(next_circle)\n                        cpy.append(next_circle)\n            start = cpy\n\n        return True\n\n",
    "submit_ts": "1722138034",
    "subm_id": "1335780351"
}