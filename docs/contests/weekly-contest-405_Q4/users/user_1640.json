{
    "username": "sank555",
    "submission": "class TrieNode:\n    def __init__(self):\n        self.children = {}\n        self.cost = 0\n\nclass Trie:\n    def __init__(self):\n        self.root = TrieNode()\n\n    def insert(self, word, co):\n        curr = self.root\n        for c in word:\n            if c not in curr.children:\n                curr.children[c] = TrieNode()\n            curr = curr.children[c]\n        if curr.cost>0:\n            curr.cost = min(curr.cost , co)\n        else:\n            curr.cost = co\n\n    def search(self, word):\n        curr = self.root\n        for c in word:\n            if c not in curr.children:\n                return False\n            curr = curr.children[c]\n        return curr.cost\n\nclass Solution:\n    def minimumCost(self, s: str, words: List[str], costs: List[int]) -> int:\n        t = Trie()\n        for x, c in zip(words, costs):\n            t.insert(x, c)\n        \n        N = len(s)\n        \n        @cache\n        def helper(i):\n            if i == N:\n                return 0\n            curr = t.root\n            ans = float('inf')\n            for j in range(i, N):\n                if s[j] in curr.children:\n                    curr = curr.children[s[j]]\n                    if curr.cost > 0:\n                        ans = min(ans, curr.cost + helper(j + 1))\n                else:\n                    break\n            return ans\n        \n        result = helper(0)\n        return result if result != float('inf') else -1\n",
    "submit_ts": "1720323761",
    "subm_id": "1312383428"
}