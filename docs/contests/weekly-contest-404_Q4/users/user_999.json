{
    "username": "rahulsah001",
    "submission": "class Solution {\npublic:\n    int compute_diameter(int n, const vector<vector<int>>& edges) {\n    if (n == 0) return 0;\n\n    unordered_map<int, vector<int>> adj;\n    for (const auto& edge : edges) {\n        adj[edge[0]].push_back(edge[1]);\n        adj[edge[1]].push_back(edge[0]);\n    }\n\n    auto bfs = [&](int start) {\n        vector<int> distance(n, -1);\n        queue<int> q;\n        q.push(start);\n        distance[start] = 0;\n        int max_dist = 0;\n        int farthest_node = start;\n\n        while (!q.empty()) {\n            int node = q.front();\n            q.pop();\n            for (int neighbor : adj[node]) {\n                if (distance[neighbor] == -1) {\n                    distance[neighbor] = distance[node] + 1;\n                    q.push(neighbor);\n                    if (distance[neighbor] > max_dist) {\n                        max_dist = distance[neighbor];\n                        farthest_node = neighbor;\n                    }\n                }\n            }\n        }\n        return make_pair(farthest_node, max_dist);\n    };\n\n    int farthest_node = bfs(0).first;\n    int diameter = bfs(farthest_node).second;\n\n    return diameter;\n}\n\n// Optimized function to find the minimum possible diameter\n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n            int n = edges1.size() + 1;\n    int m = edges2.size() + 1;\n\n    int diameter1 = compute_diameter(n, edges1);\n    int diameter2 = compute_diameter(m, edges2);\n\n    return max((diameter1 + 1) / 2 + (diameter2 + 1) / 2 + 1, max(diameter1, diameter2));\n    }\n};",
    "submit_ts": "1719717941",
    "subm_id": "1304404682"
}