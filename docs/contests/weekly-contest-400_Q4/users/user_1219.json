{
    "username": "ankith_adudodla",
    "submission": "class SegmentTree {\n    \n    private:\n    vector<int> &arr;\n    vector<int> tree;\n\n    int queryUtil(int node, int nodeLeft, int nodeRight, int left, int right) {\n        if (left > right || nodeLeft > right || nodeRight < left)\n            return INT_MAX;\n\n        if (left <= nodeLeft && nodeRight <= right)\n            return tree[node];\n\n        int mid = (nodeLeft + nodeRight) / 2;\n\n        return (queryUtil(2 * node + 1, nodeLeft, mid, left, right) & queryUtil(2 * node + 2, mid + 1, nodeRight, left, right));\n    }\n\n\npublic:\n    SegmentTree(vector<int> &arr) : arr(arr) {\n        int n = arr.size();\n        int size = 1;\n        while (size < n) {\n            size *= 2;\n        }\n        // size is the next power of two.\n        tree.resize(2 * size, INT_MAX);\n        buildTree(0, 0, n - 1);\n    }\n\n    int buildTree(int root, int left, int right) {\n        if (left > right) {\n            return INT_MAX;\n        }\n        if (left == right) {\n            tree[root] = arr[left];\n            return tree[root];\n        }\n\n        int mid = (left + right) / 2;\n\n        tree[root] = (buildTree(2 * root + 1, left, mid) & buildTree(2 * root + 2, mid + 1, right));\n\n        return tree[root];\n    }\n\n    int query(int left, int right) {\n        return queryUtil(0, 0, arr.size() - 1, left, right);\n    }\n\n};\n\n\nclass Solution {\npublic:\n    int minimumDifference(vector<int>& nums, int k) {\n        \n        SegmentTree seg(nums);\n        \n        int ans = INT_MAX;\n        \n//         for(int i=0; i<nums.size(); i++) {\n//             int ans = nums[i];\n//             for(int j=i; j<nums.size(); j++) {\n//                 ans &= nums[j];\n                \n//                 if(ans != seg.query(i, j)) {\n//                     cout << \"NOT\" << endl;\n//                 }\n//             }\n//         }\n        \n        for(int i=0; i<nums.size();i++) {\n            int l = i;\n            int r = nums.size() - 1;\n            \n            while(r - l > 1) {\n                int mid = (l + r) / 2;\n                \n                if(seg.query(i, mid) >= k) {\n                    l = mid;\n                }\n                else {\n                    r = mid;\n                }\n            }\n            \n            // cout << i << ' ' << l << ' ' << r << endl;\n            \n            ans = min(ans, abs(k - seg.query(i, l)));\n            ans = min(ans, abs(k - seg.query(i, r)));\n        }\n        \n        return ans;\n        \n    }\n};",
    "submit_ts": 1717300132.0
}