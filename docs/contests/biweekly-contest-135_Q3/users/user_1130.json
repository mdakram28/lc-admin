{
    "username": "SHIVA--VADTYAVATH",
    "submission": "#include <vector>\n#include <map>\n#include <algorithm>\n#include <cmath>\n\nusing namespace std;\n\nclass Solution {\npublic:\n    int minChanges(vector<int>& nums, int k) {\n        map<int, vector<int>> m;\n        vector<int> v;\n\n        int n = nums.size();\n\n        // Populate the map and vector with differences and possible X values\n        for (int i = 0; i < n / 2; i++) {\n            int a = nums[i];\n            int b = nums[n - i - 1];\n            int diff = abs(a - b);\n            int X = max({a, b, k - a, k - b});\n\n            m[diff].push_back(X);\n            v.push_back(X);\n        }\n\n        // Sort the vector of X values and remove duplicates\n        sort(v.begin(), v.end());\n        v.erase(unique(v.begin(), v.end()), v.end());\n\n        int ans = n; // Start with the maximum possible changes\n\n        // Iterate over each difference\n        for (const auto& val : m) {\n            int diff = val.first;\n            int T = lower_bound(v.begin(), v.end(), diff) - v.begin();\n            T = T * 2 + (n / 2 - T);\n\n            // Calculate the minimum number of changes needed\n            for (const auto& X : val.second) {\n                if (X < diff) {\n                    T -= 2;\n                } else {\n                    T -= 1;\n                }\n            }\n\n            ans = min(ans, T);\n        }\n\n        return ans;\n    }\n};\n",
    "submit_ts": "1721488888",
    "subm_id": "1327436267"
}