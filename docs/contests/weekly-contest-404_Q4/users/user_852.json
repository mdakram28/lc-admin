{
    "username": "sprajjawalsingh",
    "submission": "class Solution {\npublic:\n    // Function to perform DFS and return the farthest node and its distance\n    pair<int, int> dfs(const vector<vector<int>>& graph, int node, int parent) {\n        int farthestNode = node;\n        int maxDistance = 0;\n        \n        for (int neighbor : graph[node]) {\n            if (neighbor != parent) {\n                pair<int, int> result = dfs(graph, neighbor, node);\n                int distance = result.second + 1;\n                if (distance > maxDistance) {\n                    maxDistance = distance;\n                    farthestNode = result.first;\n                }\n            }\n        }\n        \n        return {farthestNode, maxDistance};\n    }\n    \n    // Function to find the diameter of a tree using two DFS\n    int findDiameter(const vector<vector<int>>& graph) {\n        pair<int, int> firstDFS = dfs(graph, 0, -1);\n        pair<int, int> secondDFS = dfs(graph, firstDFS.first, -1);\n        return secondDFS.second;\n    }\n    \n    // Function to find the minimum possible diameter after merging two trees\n    int minimumDiameterAfterMerge(vector<vector<int>>& tree1Edges, vector<vector<int>>& tree2Edges) {\n        int tree1Size = tree1Edges.size();\n        int tree2Size = tree2Edges.size();\n        \n        vector<vector<int>> tree1AdjacencyList(1e5);\n        vector<vector<int>> tree2AdjacencyList(1e5);\n        \n        for (const auto& edge : tree1Edges) {\n            tree1AdjacencyList[edge[0]].push_back(edge[1]);\n            tree1AdjacencyList[edge[1]].push_back(edge[0]);\n        }\n        \n        for (const auto& edge : tree2Edges) {\n            tree2AdjacencyList[edge[0]].push_back(edge[1]);\n            tree2AdjacencyList[edge[1]].push_back(edge[0]);\n        }\n        \n        int tree1Diameter = findDiameter(tree1AdjacencyList);\n        int tree2Diameter = findDiameter(tree2AdjacencyList);\n        \n        int minPossibleDiameter = max({\n            tree1Diameter,\n            tree2Diameter,\n            (tree1Diameter + 1) / 2 + (tree2Diameter + 1) / 2 + 1\n        });\n        \n        return minPossibleDiameter;\n    }\n};\n",
    "submit_ts": "1719719522",
    "subm_id": "1304444000"
}