{
    "username": "boxlesscat",
    "submission": "using ll = long long;\n\nclass UnionFind {\n\npublic:\n    vector<int> id;\n    vector<int> sz;\n\n    UnionFind(const int N) : id(N + 1), sz(N + 1, 1) {\n        for (int i = 0; i < N; i++)\n            id[i] = i;\n    }\n\n    void join(const int p, const int q) {\n        const int i = find(p);\n        const int j = find(q);\n        if (i == j)\n            return;\n        if (sz[i] < sz[j]) {\n            id[i] = j;\n            sz[j] += sz[i];\n        } else {\n            id[j] = i;\n            sz[i] += sz[j];\n        }\n    }\n\n    bool connected(const int p, const int q) {\n        return find(p) == find(q);\n    }\n\n    int find(int i) {\n        while (i != id[i])\n            i = id[i] = id[id[i]];\n        return i;\n    }\n\n    int comp(const int i) {\n        return sz[find(i)];\n    }\n\n};\n\nbool meet(ll x1, ll y1, ll r1, ll x2, ll y2, ll r2) {\n    ll dx = x1 - x2;\n    ll dy = y1 - y2;\n    ll dr = r1 + r2;\n    ll dist = dx * dx + dy* dy;\n    return dist <= dr * dr;\n}\n\nbool meet(auto& v1, auto& v2) {\n    return meet(v1[0], v1[1], v1[2], v2[0], v2[1], v2[2]);\n}\n\nll X, Y;\n\nbool meet_t(ll x, ll y, ll r) {\n    return y - r <= Y and Y <= y + r;\n}\n\nbool meet_b(ll x, ll y, ll r) {\n    return y - r <= 0 and 0 <= y + r;\n}\n\nbool meet_l(ll x, ll y, ll r) {\n    return x - r <= 0 and 0 <= x + r;\n}\n\nbool meet_r(ll x, ll y, ll r) {\n    return x - r <= X and X <= x + r;\n}\n\nclass Solution {\npublic:\n    bool canReachCorner(int X, int Y, vector<vector<int>>& cls) {\n        ::X = X;\n        ::Y = Y;\n        const int size = cls.size();\n        UnionFind uf(size);\n        for (int i = 0; i < size; ++i)\n            for (int j = 0; j < i; ++j)\n                if (meet(cls[i], cls[j]))\n                    uf.join(i, j);\n        vector<vector<int>> adj(size, vector<int>());\n        for (int i = 0; i < size; ++i)\n            adj[uf.find(i)].push_back(i);\n        bool t, b, l, r;\n        ll x, y, _r;\n        for (int i = 0; i < size; ++i) {\n            t = b = l = r = false;\n            for (int v : adj[i]) {\n                x = cls[v][0];\n                y = cls[v][1];\n                _r = cls[v][2];\n                if (!t)\n                    t = meet_t(x, y, _r);\n                if (!b)\n                    b = meet_b(x, y, _r);\n                if (!r)\n                    r = meet_r(x, y, _r);\n                if (!l)\n                    l = meet_l(x, y, _r);\n            }\n            if (t and (r or b) or l and (r or b))\n                return false;\n        }\n        return true;\n    }\n};",
    "submit_ts": "1722137517",
    "subm_id": "1335766030"
}