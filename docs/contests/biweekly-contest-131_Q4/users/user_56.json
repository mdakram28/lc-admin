{
    "username": "regain0001",
    "submission": "class Solution {\n    #define ll long long\n#define _for(i,a,b) for(ll i=(a);i<=(b);++i)\n#define _for2(i,a,b) for(ll i=(a);i>=(b);--i)\n#define pb emplace_back\n#define fi first\n#define se second\n#define all(x) x.begin(),x.end()\n#define sz(x) (int)x.size()\n#define MAXN 100005\n#define cy std::cout<<\"Yes\\n\"\n#define cn std::cout<<\"No\\n\"\n#ifndef M_PI\n#define M_PI 3.14159265358979323846\n#endif // !M_PI\n#ifndef NOWMS\n#define NOWMS                                                   \\\n    std::chrono::duration_cast<std::chrono::milliseconds>(      \\\n        std::chrono::system_clock::now().time_since_epoch())\\\n        .count()\n#endif // !NOWMS\nusing pii = pair<int, int>;\nusing pll = pair<ll, ll>;\nusing plll = pair<pll, ll>;\nusing pllll = pair<pll, pll>;\nusing pl2 = pair<plll, plll>;\npublic:\n    class SegmentTree {\n        public:\n            void init(ll n) {\n                this->n = n;\n                a.assign(n + 1, 0);\n                f.assign(4 * n + 10, 0);\n                v.assign(4 * n + 10, 0);\n            }\n            void init(ll* b, ll n) {\n                this->n = n;\n                a.assign(n + 1, 0);\n                f.assign(4 * n + 10, 0);\n                v.assign(4 * n + 10, 0);\n                _for(i, 1, n) {\n                    a[i] = b[i];\n                }\n                BuildTree(1, 1, n);\n            }\n            void BuildTree(ll k, ll l, ll r) {\n                if (l == r) {\n                    f[k] = a[l];\n                    v[k] = 0;\n                    return;\n                }\n                ll m = (l + r) / 2;\n                BuildTree(k << 1, l, m);\n                BuildTree(k << 1 | 1, m + 1, r);\n                f[k] = f[k << 1] + f[k << 1 | 1];\n                v[k] = 0;\n            }\n            void pushdown(ll k, ll l, ll r) {\n                v[k << 1] += v[k];\n                v[k << 1 | 1] += v[k];\n                v[k] = 0;\n            }\n            void pushup(ll k, ll l, ll r) {\n                ll m = (l + r) / 2;\n                f[k] = f[k << 1] + v[k << 1] * (m - l + 1) + f[k << 1 | 1] + v[k << 1 | 1] * (r - m);\n            }\n            void add(ll k, ll l, ll r, ll x, ll y, ll z) {\n                if (l == x && r == y) {\n                    v[k] += z;\n                    return;\n                }\n                ll m = (l + r) / 2;\n                pushdown(k, l, r);\n                if (y <= m) {\n                    add(k << 1, l, m, x, y, z);\n                }\n                else {\n                    if (x > m) {\n                        add(k << 1 | 1, m + 1, r, x, y, z);\n                    }\n                    else {\n                        add(k << 1, l, m, x, m, z);\n                        add(k << 1 | 1, m + 1, r, m + 1, y, z);\n                    }\n                }\n                pushup(k, l, r);\n            }\n            void update(ll k,ll l,ll r,ll x,ll y){\n                //\u5355\u70b9\u4fee\u6539\n                if(l==r){\n                    f[k]=y;\n                    return;\n                }\n                ll m=(l+r)/2;\n                if(x<=m){\n                    update(k<<1,l,m,x,y);\n                }else{\n                    update(k<<1|1,m+1,r,x,y);\n                }\n                f[k]=max(f[k<<1],f[k<<1|1]);\n            }\n            ll query(ll k, ll l, ll r, ll x, ll y) {\n                if (l == x && r == y) {\n                    return f[k];\n                }\n                ll ans = 0;\n                ll m = (l + r) / 2;\n                //pushdown(k, l, r);\n                if (y <= m) {\n                    ans = query(k << 1, l, m, x, y);\n                }\n                else {\n                    if (x > m) {\n                        ans = query(k << 1 | 1, m + 1, r, x, y);\n                    }\n                    else {\n                        ans = max(query(k << 1, l, m, x, m) ,query(k << 1 | 1, m + 1, r, m + 1, y));\n                    }\n                }\n                //pushup(k, l, r);\n                return ans;\n            }\n        public:\n            vector<ll> a, f, v;\n            ll n;\n        };\n    vector<bool> getResults(vector<vector<int>>& q) {\n        vector<bool> ans;\n        ll n = sz(q);\n        ll maxx=0;\n         SegmentTree st;\n        ll m=0;\n        _for(i,0,n-1){\n            ll t=q[i][0];\n            ll x;\n            if(t==1){\n                x=q[i][1];\n                \n            }else{\n                x=q[i][1];\n                \n            }\n            m=max(m,x);\n        }\n        st.init(m);\n        set<ll>st2;\n        _for(i,0,n-1){\n            ll t=q[i][0];\n            if(t==1){\n                ll x=q[i][1];\n                \n                if(x>maxx){\n                    st.update(1,1,m,x,x-maxx);\n                }else{\n                    auto p2=st2.lower_bound(x);\n                    ll v2=*p2;\n                    ll v1=0;\n                    if(p2!=st2.begin()){\n                        p2=prev(p2);\n                        v1=*p2;\n                    }\n                    st.update(1,1,m,x,x-v1);\n                    st.update(1,1,m,v2,v2-x);\n                }\n                \n                st2.insert(x);\n                maxx=max(maxx,x);\n            }else{\n                ll x=q[i][1],tot=q[i][2];\n                ll res=st.query(1,1,m,1,x);\n                //cout<<\"res1:\"<<res<<endl;\n                auto p=st2.lower_bound(x);\n                if(p==st2.end()){\n                    res=max(res,x-maxx);\n                    \n                }else{\n                    if(p==st2.begin()){\n                        res=max(res,x);\n                    }else{\n                        p=prev(p);\n                        res=max(res,x-*p);\n                    }\n                    //auto v=*p;\n                   // res=max(res,v-x);\n                }\n                //cout<<\"res:\"<<res<<endl;\n                if(res>=tot)ans.pb(1);\n                else ans.pb(0);\n            }\n        }\n        \n        return ans;\n    }\n};",
    "submit_ts": 1716648922.0
}