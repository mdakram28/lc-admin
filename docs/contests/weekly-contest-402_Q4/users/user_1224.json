{
    "username": "py-6612605",
    "submission": "class Solution {\npublic:\n    vector<int> countOfPeaks(vector<int>& nums, vector<vector<int>>& queries) {\n      int n = nums.size();\n      vector<int> seg(n * 4, 0);\n      //long long ans = 0;\n      vector<int> result;\n      build(seg, nums, 1,0,n-1);\n      for (auto &s : queries)\n      {\n        if (s[0] == 1)\n        {\n            if (s[2] - s[1] >= 2)\n            {\n                result.push_back(query(seg, nums,1,0,n-1,s[1] + 1, s[2] - 1));\n            }\n            else\n            {\n                result.push_back(0);\n            }\n         //   result.push_back(seg[1]);\n        }\n        else\n        {\n            nums[s[1]] = s[2];\n            update(seg, nums,1,0,n-1,s[1], s[2]);\n            if (s[1] > 0)\n                update(seg,nums,1,0,n-1,s[1] - 1,s[2]);\n            if (s[1] < nums.size() - 1)\n                update(seg,nums,1,0,n-1,s[1] + 1,s[2]);\n        }\n      }\n      return result;\n\n    }\n    void build(vector<int> &seg,vector<int> &nums,int o, int l, int r)\n    {\n        if (l == r)\n        {\n            if (l == 0 || l >= nums.size() - 1)\n                seg[o] = 0;\n            else\n            {\n                seg[o] = (nums[l] > nums[l - 1] && nums[l] > nums[l + 1]) ? 1 : 0;\n            }\n            return ;\n        }\n        int m = (l + r) / 2;\n        build(seg, nums, o * 2, l, m);\n        build(seg, nums, o * 2 + 1, m + 1, r);\n        int v = seg[o * 2] + seg[o * 2 + 1];\n     //   v += (int)isV(nums, m);\n     //   v += (int)isV(nums, m + 1);\n        seg[o] = v;\n    }\n    bool isV(vector<int> &nums, int p)\n    {\n        if (p <= 0 || p >= nums.size())\n            return false;\n        return nums[p] > nums[p - 1] && nums[p] > nums[p + 1];\n    }\n    void update(vector<int> &seg, vector<int> &nums, int o, int l, int r, int p, int v)\n    {\n        if (l == r)\n        {\n           // nums[p] = v;\n            if (l == 0 || l >= nums.size() - 1)\n                seg[o] = 0;\n            else\n            {\n                seg[o] = (nums[l] > nums[l - 1] && nums[l] > nums[l + 1]) ? 1 : 0;\n            }\n\n   //         if (seg[o] == 1)\n      //      {\n     //           printf(\"update %d %d %d\\n\", l, r, seg[o]);\n    //        }\n            return ;\n        }\n        int m = (l + r) / 2;\n        if (p <= m)\n            update(seg, nums, o * 2, l, m, p, v);\n        else\n            update(seg, nums,o * 2 + 1,m + 1, r, p,v);\n        int tt = seg[o * 2] + seg[o * 2 + 1];\n        seg[o] = tt;\n    }\n\n    int query(vector<int> &seg, vector<int> &nums, int o, int l, int r, int L, int R)\n    {\n        if (L <= l && r <= R)\n        {\n       //     if (seg[o] == 1)\n         //   {\n         //       printf(\"%d %d %d\\n\", l, r, seg[o]);\n      //      }\n            return seg[o];\n        }\n        int m = (l + r) / 2;\n        int ans = 0;\n        if (m >= L)\n            ans += query(seg, nums, o * 2, l, m, L,R);\n        if (m + 1 <= R)\n            ans += query(seg, nums, o * 2 + 1, m + 1, r, L, R);\n        return ans;\n    }\n};",
    "submit_ts": "1718509840",
    "subm_id": "539794973"
}