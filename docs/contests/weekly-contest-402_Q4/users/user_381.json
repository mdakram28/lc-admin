{
    "username": "peterrockwave",
    "submission": "class Sumtree:\n    def __init__(self,length):\n        self.depth = int(math.ceil(math.log2(length)))+1\n        self.arrstart = (1<<(self.depth-1))-1\n        self.a = [0] * (1<<self.depth)\n    def parent(self, i):\n        return (i-1)//2\n    def children(self, i):\n        return (i*2 + 1, i*2 + 2)\n    def update(self, i, v):\n        tempi = self.arrstart + i\n        # print(tempi,i,v)\n        diff = v - self.a[tempi]\n        if diff == 0:\n            return\n        while tempi != -1:\n            self.a[tempi] += diff\n            tempi = self.parent(tempi)\n        # print(self.a)\n    def prefixsum(self, n):\n        ans = 0\n        currstart = 0\n        currdepth = 0\n        while n > 0:\n            if n == (1<<(self.depth - currdepth - 1)):\n                ans = self.a[currstart]\n                n = 0\n            elif n >= (1<<(self.depth - currdepth - 2)):\n                n -= (1<<(self.depth - currdepth - 2))\n                ans += self.a[self.children(currstart)[0]]\n                currstart = self.children(currstart)[1]\n                currdepth += 1\n            else:\n                currstart = self.children(currstart)[0]\n                currdepth += 1\n        return ans\n    def rangesum(self, start, end):\n        if end < start:\n            return 0\n        return self.prefixsum(end+1) - self.prefixsum(start)\n\nclass Solution:\n    def countOfPeaks(self, nums: List[int], queries: List[List[int]]) -> List[int]:\n        st = Sumtree(len(nums))\n        def update_peak(i):\n            if i <= 0 or i >= len(nums)-1:\n                st.update(i,0)\n            elif nums[i] > nums[i-1] and nums[i] > nums[i+1]:\n                st.update(i,1)\n            else:\n                st.update(i,0)\n        \n        for i in range(1,len(nums)-1):\n            update_peak(i)\n        \n        # print(st.a)\n        # for i in range(0,len(nums)+1):\n        #     print(i, st.prefixsum(i))\n        \n        ans = []\n        for q in queries:\n            # print(q)\n            if q[0] == 1:\n                l = q[1]\n                r = q[2]\n                ans.append(st.rangesum(l+1, r-1))\n            else:\n                i = q[1]\n                v = q[2]\n                nums[i] = v\n                update_peak(i)\n                update_peak(i-1)\n                update_peak(i+1)\n        \n        return ans\n                ",
    "submit_ts": "1718507069",
    "subm_id": "1289640140"
}