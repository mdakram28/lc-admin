{
    "username": "saisumaj",
    "submission": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <limits.h>\n\n// Define the trie node structure\ntypedef struct TrieNode {\n    struct TrieNode* children[26];\n    int* costs;\n    int numCosts;\n} TrieNode;\n\n// Create a new trie node\nTrieNode* createTrieNode() {\n    TrieNode* node = (TrieNode*)malloc(sizeof(TrieNode));\n    for (int i = 0; i < 26; i++) {\n        node->children[i] = NULL;\n    }\n    node->costs = NULL;\n    node->numCosts = 0;\n    return node;\n}\n\n// Insert a word and its cost into the trie\nvoid insertTrie(TrieNode* root, const char* word, int cost) {\n    TrieNode* node = root;\n    while (*word) {\n        int index = *word - 'a';\n        if (node->children[index] == NULL) {\n            node->children[index] = createTrieNode();\n        }\n        node = node->children[index];\n        word++;\n    }\n    node->costs = realloc(node->costs, (node->numCosts + 1) * sizeof(int));\n    node->costs[node->numCosts] = cost;\n    node->numCosts++;\n}\n\n// Find all costs for words in the trie that match the target starting from position i\nvoid findCosts(TrieNode* root, const char* target, int i, int targetLen, int* dp) {\n    TrieNode* node = root;\n    for (int j = i; j < targetLen; j++) {\n        int index = target[j] - 'a';\n        if (node->children[index] == NULL) {\n            break;\n        }\n        node = node->children[index];\n        for (int k = 0; k < node->numCosts; k++) {\n            dp[j + 1] = fmin(dp[j + 1], dp[i] + node->costs[k]);\n        }\n    }\n}\n\nint minimumCost(char* target, char** words, int wordsSize, int* costs, int costsSize) {\n    int targetLen = strlen(target);\n    int* dp = (int*)malloc((targetLen + 1) * sizeof(int));\n    \n    // Initialize dp array with a large value\n    for (int i = 0; i <= targetLen; i++) {\n        dp[i] = INT_MAX;\n    }\n    dp[0] = 0;  // No cost to form an empty string\n    \n    // Create a trie and insert all words with their costs\n    TrieNode* trie = createTrieNode();\n    for (int i = 0; i < wordsSize; i++) {\n        insertTrie(trie, words[i], costs[i]);\n    }\n    \n    // Iterate over each position in the target\n    for (int i = 0; i < targetLen; i++) {\n        if (dp[i] == INT_MAX) continue; // Skip unreachable states\n        \n        // Find all costs for words starting from position i\n        findCosts(trie, target, i, targetLen, dp);\n    }\n    \n    int result = dp[targetLen];\n    free(dp);\n    \n    // Free the trie\n    // (Omitted for brevity, ensure to free the allocated memory for the trie in a real implementation)\n    \n    return result == INT_MAX ? -1 : result;\n}\n\n// Helper function to create a dynamic array of strings\nchar** createWordsArray(char arr[][6], int size) {\n    char** words = (char**)malloc(size * sizeof(char*));\n    for (int i = 0; i < size; i++) {\n        words[i] = (char*)malloc((strlen(arr[i]) + 1) * sizeof(char));\n        strcpy(words[i], arr[i]);\n    }\n    return words;\n}\n",
    "submit_ts": "1720322926",
    "subm_id": "1312362819"
}