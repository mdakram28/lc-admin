{
    "username": "anasjawedofficial",
    "submission": "class SegmentTree {\n    vector<int> tree;\n    int n;\n    bool isPeak(const vector<int>& nums, int i) {\n        if (i <= 0 || i >= nums.size() - 1) return false;\n        return nums[i] > nums[i - 1] && nums[i] > nums[i + 1];\n    }\n    void build(const vector<int>& nums, int v, int tl, int tr) {\n        if (tl == tr) {\n            tree[v] = isPeak(nums, tl) ? 1 : 0;\n        } else {\n            int tm = (tl + tr) / 2;\n            build(nums, v * 2, tl, tm);\n            build(nums, v * 2 + 1, tm + 1, tr);\n            tree[v] = tree[v * 2] + tree[v * 2 + 1];\n        }\n    }\n    void update(const vector<int>& nums, int v, int tl, int tr, int pos) {\n        if (tl == tr) {\n            tree[v] = isPeak(nums, tl) ? 1 : 0;\n        } else {\n            int tm = (tl + tr) / 2;\n            if (pos <= tm)\n                update(nums, v * 2, tl, tm, pos);\n            else\n                update(nums, v * 2 + 1, tm + 1, tr, pos);\n            tree[v] = tree[v * 2] + tree[v * 2 + 1];\n        }\n    }\n    int query(int v, int tl, int tr, int l, int r) {\n        if (l > r) return 0;\n        if (l == tl && r == tr) return tree[v];\n        int tm = (tl + tr) / 2;\n        return query(v * 2, tl, tm, l, min(r, tm)) +\n               query(v * 2 + 1, tm + 1, tr, max(l, tm + 1), r);\n    }\npublic:\n    SegmentTree(const vector<int>& nums) {\n        n = nums.size();\n        tree.resize(n * 4);\n        build(nums, 1, 0, n - 1);\n    }\n\n    void update(const vector<int>& nums, int pos) {\n        update(nums, 1, 0, n - 1, pos);\n    }\n\n    int query(int l, int r) {\n        if (l + 1 > r - 1) return 0;\n        return query(1, 0, n - 1, l + 1, r - 1);\n    }\n};\n\nclass Solution {\npublic:\n    vector<int> countOfPeaks(vector<int>& nums, vector<vector<int>>& queries) {\n        SegmentTree segmentTree(nums);\n        vector<int> result;\n\n        for (const auto& query : queries) {\n            if (query[0] == 1) {\n                int li = query[1];\n                int ri = query[2];\n                result.push_back(segmentTree.query(li, ri));\n            } else if (query[0] == 2) {\n                int indexi = query[1];\n                int vali = query[2];\n                nums[indexi] = vali;\n                for (int i = indexi - 1; i <= indexi + 1; ++i) {\n                    if (i >= 0 && i < nums.size()) {\n                        segmentTree.update(nums, i);\n                    }\n                }\n            }\n        }\n\n        return result;\n    }\n};",
    "submit_ts": 1718507175.0
}