{
    "username": "ptato_god",
    "submission": "class Solution:\n    def canReachCorner(self, X: int, Y: int, circles: List[List[int]]) -> bool:\n        dd = defaultdict(set)\n        n = len(circles)\n        for i, (a, b, radius) in enumerate(circles):\n            if a - radius <= 0:\n                dd[i].add(-1)\n            if a + radius >= X:\n                dd[i].add(-2)\n            if b - radius <= 0:\n                dd[i].add(-3)\n            if b + radius >= Y:\n                dd[i].add(-4)\n            dd[i].add(i)\n            for j, (c,d,r) in enumerate(circles[:i]):\n                if j not in dd[i]:\n                    if sqrt(pow(c-a, 2) + pow(d-b, 2)) <= r + radius:\n                        if len(dd[i]) > len(dd[j]):\n                            dd[i].update(dd[j])\n                            for x in dd[j]:\n                                if x >= 0:\n                                    dd[x] = dd[i]\n                        else:\n                            dd[j].update(dd[i])\n                            for x in dd[i]:\n                                if x >= 0:\n                                    dd[x] = dd[j]\n            if (-1 in dd[i] and -2 in dd[i]) or (-1 in dd[i] and -3 in dd[i]) or (-2 in dd[i] and -4 in dd[i]) or (-3 in dd[i] and -4 in dd[i]):\n                return False\n        return True",
    "submit_ts": "1722137556",
    "subm_id": "1335767177"
}