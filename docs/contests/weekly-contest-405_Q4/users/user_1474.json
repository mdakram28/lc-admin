{
    "username": "mv0",
    "submission": "\nclass TrieNode {\npublic:\n    vector<TrieNode*> childrenNodes;\n    int minimumCostForThisNode;\n\n    TrieNode() {\n        childrenNodes = vector<TrieNode*>(26, nullptr);\n        minimumCostForThisNode = numeric_limits<int>::max();\n    }\n};\n\nclass Solution {\npublic:\n    const int ALPHABET_SIZE = 26;\n\n    void insertPhraseIntoTrie(TrieNode* rootTrieNode, const string& phraseWord, int associatedCostForPhrase) {\n        TrieNode* currentTrieNode = rootTrieNode;\n        for (char currentCharacter : phraseWord) {\n            int characterIndexInAlphabet = currentCharacter - 'a';\n            if (currentTrieNode->childrenNodes[characterIndexInAlphabet] == nullptr) {\n                currentTrieNode->childrenNodes[characterIndexInAlphabet] = new TrieNode();\n            }\n            currentTrieNode = currentTrieNode->childrenNodes[characterIndexInAlphabet];\n        }\n        currentTrieNode->minimumCostForThisNode = min(currentTrieNode->minimumCostForThisNode, associatedCostForPhrase);\n    }\n\n    int minimumCost(string target, vector<string>& phrasesList, vector<int>& associatedCosts) {\n        int lengthOfTargetString = target.size();\n        vector<int> minimumCostsToFormSubstrings(lengthOfTargetString + 1, numeric_limits<int>::max());\n        minimumCostsToFormSubstrings[0] = 0;\n\n        TrieNode* rootOfTrie = new TrieNode();\n\n        for (size_t indexOfPhrase = 0; indexOfPhrase < phrasesList.size(); ++indexOfPhrase) {\n            insertPhraseIntoTrie(rootOfTrie, phrasesList[indexOfPhrase], associatedCosts[indexOfPhrase]);\n        }\n\n        for (int startIndexInTargetString = 0; startIndexInTargetString < lengthOfTargetString; ++startIndexInTargetString) {\n            if (minimumCostsToFormSubstrings[startIndexInTargetString] == numeric_limits<int>::max()) {\n                continue;\n            }\n\n            TrieNode* currentTrieNode = rootOfTrie;\n            for (int endIndexInTargetString = startIndexInTargetString; endIndexInTargetString < lengthOfTargetString; ++endIndexInTargetString) {\n                int currentCharacterIndex = target[endIndexInTargetString] - 'a';\n                if (currentTrieNode->childrenNodes[currentCharacterIndex] == nullptr) {\n                    break;\n                }\n                currentTrieNode = currentTrieNode->childrenNodes[currentCharacterIndex];\n                if (currentTrieNode->minimumCostForThisNode != numeric_limits<int>::max()) {\n                    minimumCostsToFormSubstrings[endIndexInTargetString + 1] = min(\n                        minimumCostsToFormSubstrings[endIndexInTargetString + 1], \n                        minimumCostsToFormSubstrings[startIndexInTargetString] + currentTrieNode->minimumCostForThisNode\n                    );\n                }\n            }\n        }\n\n        return minimumCostsToFormSubstrings[lengthOfTargetString] == numeric_limits<int>::max() ? -1 : minimumCostsToFormSubstrings[lengthOfTargetString];\n    }\n};",
    "submit_ts": "1720324060",
    "subm_id": "1312390626"
}