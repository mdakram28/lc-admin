{
    "username": "Astitva1508",
    "submission": "class Solution {\n    vector<int>a;\n    vector<int>seg;\n    void build(int index, int low, int high)\n    {\n        if (low == high)\n        {\n            seg[index] = a[low];\n            return;\n        }\n        int mid = (low + high) / 2;\n        build(2 * index + 1, low, mid);\n        build(2 * index + 2, mid + 1, high);\n        seg[index] = seg[2 * index + 1] + seg[2 * index + 2];\n    }\n\n    int query(int index, int low, int high, int l, int r)\n    {\n        // Asked range ke andar hai current range\n        if (l <= low && r >= high)\n            return seg[index];\n        // Completely outside\n        if (r < low || l > high)\n            return 0;\n        int mid = (low + high) / 2;\n        int left = query(2 * index + 1, low, mid, l, r);\n        int right = query(2 * index + 2, mid + 1, high, l, r);\n        return left + right;\n    }\n\n    int update(int index, int low, int high, int pos, int value)\n    {\n        if (pos < low || pos > high)\n            return seg[index];\n        if (low == high)\n            return seg[index] = value;\n        int mid = (low + high) / 2;\n        update(2 * index + 1, low, mid, pos, value);\n        update(2 * index + 2, mid + 1, high, pos, value);\n        return seg[index] = seg[2 * index + 1] + seg[2 * index + 2];\n    }\npublic:\n    vector<int> countOfPeaks(vector<int>& nums, vector<vector<int>>& queries) {\n        int n = nums.size();\n        a.resize(n+3,0);\n        seg.resize((4*n)+10,0);\n        vector<int>ans;\n        for (int i = 0; i < n; i++)\n        a[i] = 0;\n        for (int i = 1; i < (n - 1); i++)\n        {\n            if (nums[i] > nums[i - 1] && nums[i] > nums[i + 1])\n                a[i] = 1;\n        }\n        build(0, 0, n - 1);\n        for (int i = 0; i < queries.size(); i++)\n        {\n            int type = queries[i][0];\n            if (type == 1)\n            {\n                int l = queries[i][1];\n                int r = queries[i][2];\n                ans.push_back(query(0, 0, n - 1, l+1, r-1));\n            }\n            else\n            {\n                int idx = queries[i][1];\n                int val = queries[i][2];\n                // idx affects the peak of idx-1 and idx+1\n                nums[idx] = val;\n                if (idx >= 2)\n                {\n                    if (nums[idx - 1] > nums[idx] && nums[idx - 1] > nums[idx - 2])\n                    {\n                        a[idx - 1] = 1;\n                        update(0,0,n-1,idx-1,1);\n                    }\n                    else\n                    {\n                        a[idx - 1] = 0;\n                        update(0, 0, n - 1, idx - 1, 0);\n                    }\n                }\n                if (idx >= 1 && idx <= (n - 2))\n                {\n                    if (nums[idx] > nums[idx - 1] && nums[idx] > nums[idx + 1])\n                    {\n                        a[idx] = 1;\n                        update(0, 0, n - 1, idx, 1);\n                    }\n                    else\n                    {\n                        a[idx] = 0;\n                        update(0, 0, n - 1, idx, 0);\n                    }\n                }\n                if (idx <= (n - 3))\n                {\n                    if (nums[idx + 1] > nums[idx] && nums[idx + 1] > nums[idx + 2])\n                    {\n                        a[idx + 1] = 1;\n                        update(0, 0, n - 1, idx + 1, 1);\n                    }\n                    else\n                    {\n                        a[idx + 1] = 0;\n                        update(0, 0, n - 1, idx +1, 0);\n                    }\n                }\n            }\n        }\n        return ans;\n    }\n};",
    "submit_ts": "1718508688",
    "subm_id": "1289688413"
}