{
    "username": "snah0902",
    "submission": "from sortedcontainers import SortedList\n\nclass Solution:\n    def shortestDistanceAfterQueries(self, n: int, queries: List[List[int]]) -> List[int]:\n        \n        def doOverlap(query1, query2):\n            x1, y1 = query1\n            x2, y2 = query2\n            return not (y1 <= x2 or y2 <= x1)\n        \n        currStarts = SortedList()\n        currDistance = n - 1\n        res = []\n        for i, currQuery in enumerate(queries):\n            start, end = currQuery\n            queryIndex = bisect.bisect_right(currStarts, (start, -1))\n            if queryIndex != 0:\n                prevQuery = queries[currStarts[queryIndex - 1][1]]\n                if doOverlap(prevQuery, currQuery):\n                    res.append(currDistance)\n                    continue\n            if queryIndex != len(currStarts):\n                nextQuery = queries[currStarts[queryIndex][1]]\n                if doOverlap(nextQuery, currQuery) and nextQuery[1] - nextQuery[0] >= currQuery[1] - currQuery[0]:\n                    res.append(currDistance)\n                    continue               \n            while queryIndex != len(currStarts) and doOverlap(queries[currStarts[queryIndex][1]], currQuery):\n                currStarts.remove(currStarts[queryIndex])\n                currDistance += nextQuery[1] - nextQuery[0] - 1\n            currStarts.add((start, i))\n            currDistance -= end - start - 1\n            res.append(currDistance)\n        return res\n                \n                ",
    "submit_ts": "1722743435",
    "subm_id": "1343791863"
}