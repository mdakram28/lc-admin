{
    "username": "kind-napierdf7",
    "submission": "typedef pair<int, int> PII;\nclass Solution {\npublic:\n    struct Node{\n        int val, idx;\n        bool operator<(const Node& t)const {\n            return val < t.val;\n        }\n    };\n    int minimumDistance(vector<vector<int>>& points) {\n        int n = points.size();\n        if(n==1) return 0;\n        int l = 0, r = 2e8;\n        vector<vector<Node>> p(4);\n        int i = 0;\n        for(auto t:points){\n            int x1 = t[0], y1 = t[1];\n            p[0].push_back({x1+y1, i});\n            p[1].push_back({x1-y1, i});\n            p[2].push_back({-x1+y1, i});\n            p[3].push_back({-x1-y1, i});\n            i++;\n        }\n        for(int i = 0; i < 4; i++){\n            sort(p[i].begin(), p[i].end());\n        }\n        function<bool(int)> check = [&](int x)->bool{\n            \n            for(int t = 0; t < n; t++){\n                int cnt = 0;\n                for(int i = 0; i < 4; i++){\n                    int l = 0, r = n-1;\n                    if(p[i][l].idx==t) l++;\n                    if(p[i][r].idx==t) r--;\n                    if(p[i][r].val-p[i][l].val>x){\n                        cnt++;\n                    }\n                }\n                if(cnt==0) return true;\n            }\n            return false;\n        };\n        while(l < r){\n            int mid = (l+r) >> 1;\n            if(check(mid)){\n                r = mid;\n            } else {\n                l = mid+1;\n            }\n        }\n        \n        return l;\n    }\n};"
}