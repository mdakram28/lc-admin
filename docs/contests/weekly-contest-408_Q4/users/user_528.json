{
    "username": "dhanushbommavaram",
    "submission": "class Solution {\npublic:\n    bool dfs(int start, int end,unordered_map<int,bool>& visited,unordered_map<int,vector<int>>& adj)\n    {\n        if (start == end)\n            return true;\n        visited[start] = 1;\n        for (auto x : adj[start]) {\n            if (!visited[x])\n                if (dfs(x, end,visited,adj))\n                    return true;\n        }\n        return false;\n    }\n \n    bool canReachCorner(int X, int Y, vector<vector<int>>& circles) \n    {\n        unordered_map<int,vector<int>> m;\n        for(int i=0;i<circles.size();i++)\n        {\n            for(int j=0;j<circles.size();j++)\n            {\n                double dis=sqrt(pow(circles[i][0]-circles[j][0],2)+pow(circles[i][1]-circles[j][1],2));\n                if(dis<=circles[i][2]+circles[j][2])\n                {\n                    m[i].push_back(j);\n                    m[j].push_back(i);\n                }\n            }\n        }\n        int j=0;\n        for(auto& i:circles)\n        {\n            double dis=abs(i[0]);\n            if(dis<=i[2])\n            {\n                m[-1].push_back(j);\n                m[j].push_back(-1);\n            }\n            dis=abs(i[1]-Y);\n            if(dis<=i[2])\n            {\n                m[-1].push_back(j);\n                m[j].push_back(-1);\n            }\n            dis=abs(i[1]);\n            if(dis<=i[2])\n            {\n                m[INT_MAX].push_back(j);\n                m[j].push_back(INT_MAX);\n            }\n            dis=abs(i[0]-X);\n            if(dis<=i[2])\n            {\n                m[INT_MAX].push_back(j);\n                m[j].push_back(INT_MAX);\n            }\n            j++;\n        }\n        unordered_map<int,bool> visited;\n        return !dfs(-1,INT_MAX,visited,m);\n\n        \n    }\n};",
    "submit_ts": "1722138057",
    "subm_id": "1335780970"
}