{
    "username": "groushan",
    "submission": "class Solution {\npublic:\n\n    struct TrieNode {\n        unordered_map<char, TrieNode*> child;\n        vector<pair<int, int>> wordlast; \n    };\n\n    class Trie {\n\n    public:\n        TrieNode* root;\n        Trie() { root = new TrieNode(); }\n\n        void insert(string& word, int index, int cost) {\n            TrieNode* node = root;\n            for (char it : word) {\n                if (!node->child.count(it))\n                    node->child[it] = new TrieNode();\n                node = node->child[it];\n            }\n            node->wordlast.push_back({index, cost});\n        }\n    };\n\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int n = target.size();\n\n        vector<int> dp(n + 1, INT_MAX);\n        dp[0] = 0;\n\n        Trie trie;\n        \n        for (int i = 0; i < words.size(); ++i) {\n            trie.insert(words[i], i, costs[i]);\n        }\n\n        for (int i = 0; i < n; ++i) {\n            if (dp[i] == INT_MAX) continue;\n\n            TrieNode* node = trie.root;\n            for (int j = i; j < n; ++j) {\n                if (!node->child.count(target[j])) break;\n                node = node->child[target[j]];\n                for (auto& p : node->wordlast) {\n                    int idx = p.first;\n                    int cst = p.second;\n                    int len = words[idx].size();\n                    if (i + len <= n) {\n                        dp[i + len] = min(dp[i + len], dp[i] + cst);\n                    }\n                }\n            }\n        }\n\n        return dp[n] == INT_MAX ? -1 : dp[n];\n    }\n};",
    "submit_ts": "1720323855",
    "subm_id": "1312385682"
}