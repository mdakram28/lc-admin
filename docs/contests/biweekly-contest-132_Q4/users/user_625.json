{
    "username": "satyam0774",
    "submission": "class Solution {\n    public int maximumLength(int[] nums, int k) {\n       int n = nums.length;\n        if (n == 0) return 0;\n\n        int[][] dp = new int[n][k + 1];\n        for (int i = 0; i < n; ++i) {\n            Arrays.fill(dp[i], 1);\n        }\n        \n        int ans = 1;\n        int[] vkk = new int[k + 1];\n        Arrays.fill(vkk, -1);\n        \n        Map<Integer, Integer>[] vmap= new HashMap[k + 1];\n        for (int i = 0; i < k + 1; ++i) {\n            vmap[i] = new HashMap<>();\n        }\n\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j <= k; j++) {\n                for (int l = 0; l < j; l++) {\n                    dp[i][j] = Math.max(dp[i][j], 1 + vkk[l]);\n                }\n                if (vmap[j].containsKey(nums[i])) {\n                    dp[i][j] = Math.max(dp[i][j], 1 + vmap[j].get(nums[i]));\n                }\n                ans = Math.max(ans, dp[i][j]);\n            }\n            for (int j = 0; j <= k; j++) {\n                vkk[j] = Math.max(vkk[j], dp[i][j]);\n                vmap[j].put(nums[i], Math.max(vmap[j].getOrDefault(nums[i], 0), dp[i][j]));\n            }\n        }\n        return ans;\n    }\n}",
    "submit_ts": 1717862392.0
}