{
    "username": "3R1C_",
    "submission": "class SegTree {\npublic:\n    int l, r;\n    int AND;\n    SegTree *lChild;\n    SegTree *rChild;\n\n    SegTree(int l, int r, vector<int>& nums) {\n        this->l = l;\n        this->r = r;\n        if (l == r) {\n            AND = nums[l];\n            lChild = nullptr;\n            rChild = nullptr;\n        } else {\n            int m = (l + r) / 2;\n            lChild = new SegTree(l, m, nums);\n            rChild = new SegTree(m + 1, r, nums);\n            AND = lChild->AND & rChild->AND;\n        }\n    }\n\n    int get(int left, int right) {\n        if (left > r || right < l) return -1;\n        if (left <= l && right >= r) return AND;\n        int leftAnd = lChild->get(left, right);\n        int rightAnd = rChild->get(left, right);\n        if (leftAnd == -1) return rightAnd;\n        if (rightAnd == -1) return leftAnd;\n        return leftAnd & rightAnd;\n    }\n};\n\nclass Solution {\npublic:\n    int minimumDifference(vector<int>& nums, int k) {\n        int res = INT_MAX;\n        int n = nums.size();\n        SegTree* st = new SegTree(0, n - 1, nums);\n\n        for (int i = 0; i < n; i++) {\n            int l = i, r = n - 1;\n            while (l <= r) {\n                int m = (l + r) / 2;\n                int bitAnd = st->get(i, m);\n                res = min(res, abs(k - bitAnd));\n                if (bitAnd <= k) r = m - 1;\n                else l = m + 1;\n            }\n        }\n        return res;\n    }\n};",
    "submit_ts": "1717297214",
    "subm_id": "1274734804"
}