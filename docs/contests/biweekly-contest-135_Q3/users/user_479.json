{
    "username": "tyghvh",
    "submission": "public class Solution {\n    public int MinChanges(int[] nums, int k) {\n        Dictionary<int, List<int>> m = new Dictionary<int, List<int>>();\n        List<int> v = new List<int>();\n        int n = nums.Length;\n        \n        for (int i = 0; i < n / 2; i++) {\n            int a = nums[i], b = nums[n - i - 1];\n            int diff = Math.Abs(a - b);\n            int X = Math.Max(Math.Max(a, b), Math.Max(k - a, k - b));\n            \n            if (!m.ContainsKey(diff)) {\n                m[diff] = new List<int>();\n            }\n            m[diff].Add(X);\n            v.Add(X);\n        }\n        \n        int ans = n;\n        v.Sort();\n        \n        foreach (var val in m) {\n            int diff = val.Key;\n            int T = LowerBound(v, diff);\n            T = T * 2 + (n / 2 - T);\n            \n            foreach (int X in val.Value) {\n                if (X < diff) {\n                    T -= 2;\n                } else {\n                    T -= 1;\n                }\n            }\n            \n            ans = Math.Min(ans, T);\n        }\n        \n        return ans;\n    }\n    \n    private int LowerBound(List<int> list, int value) {\n        int left = 0, right = list.Count;\n        \n        while (left < right) {\n            int mid = left + (right - left) / 2;\n            if (list[mid] < value) {\n                left = mid + 1;\n            } else {\n                right = mid;\n            }\n        }\n        \n        return left;\n    }\n}",
    "submit_ts": "1721488216",
    "subm_id": "1327415254"
}