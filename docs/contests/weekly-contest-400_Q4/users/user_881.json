{
    "username": "anirudh1444",
    "submission": "class Solution(object):\n    def minimumDifference(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        \"\"\"\n        def binSearch(start):\n            \n            low = start + 1\n            high = len(self.counters) - 1\n            \n            while high >= low:\n                \n                middle = (low + high) // 2\n                total = 0\n                first = self.counters[start]\n                last = self.counters[middle]\n                \n                for power in last.keys():\n                    if last[power] - first.get(power, 0) == middle - start:\n                        total += pow(2, power)\n                    \n                self.best = min(self.best, abs(k - total))\n                \n                if k == total:\n                    return \n                \n                elif k < total:\n                    low = middle + 1\n                \n                else:\n                    high = middle - 1\n                \n            return \n        \n        \"\"\"\n                    \n                    \n\n        adj = [nums[0]]\n        for i in range(1, len(nums)):\n            if nums[i] != adj[-1]:\n                adj.append(nums[i])\n        \n        counter = {}\n        self.counters = [{}]\n        self.best = float('inf')\n        \n        for num in adj:\n            \n            binary = bin(num)[2:][::-1]\n            \n            for i in range(len(binary)):\n                \n                if binary[i] == '1':\n                    counter[i] = counter.get(i, 0) + 1\n            \n            self.counters.append(counter.copy())\n        \n        mover = 1\n        \n        for start in range(len(self.counters)):\n            \n            if mover <= start:\n                mover = start + 1\n            \n            while mover < len(self.counters):\n            \n                first = self.counters[start]\n                last = self.counters[mover]\n                total = 0\n\n                for power in last.keys():\n                    if last[power] - first.get(power, 0) == mover - start:\n                        total += pow(2, power)\n\n                self.best = min(self.best, abs(k - total))\n                # print(start, mover, total)\n                \n                if total > k:\n                    mover += 1\n                elif total == k:\n                    return 0\n                else:\n                    mover -= 1\n                    break \n        \n        return self.best\n            \n            \n            \n                \n        \"\"\"\n        \n        best = float('inf')\n        for i in range(len(adj)):\n\n            curr = adj[i]\n            best = min(best, abs(k - curr))\n\n            for j in range(i + 1, len(adj)):\n                \n                curr = curr & adj[j]\n\n                if curr < k - best:\n                    break \n\n                best = min(best, abs(k - curr))\n        \n        return best\n        \n        \"\"\"",
    "submit_ts": 1717299918.0
}