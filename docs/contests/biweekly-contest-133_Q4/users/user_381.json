{
    "username": "snehaaa_16_",
    "submission": "class Solution {\nprivate:\n    static const int M = 1'000'000'007;\n    static const int K = 400;\n\npublic:\n    int numberOfPermutations(int n, vector<vector<int>>& r) {\n        unordered_map<int, int> rm;\n        for (const auto& req : r) {\n            rm[req[0] + 1] = req[1];\n        }\n        vector<vector<long>> dp(n + 1, vector<long>(K + 1, 0));\n        dp[0][0] = 1;\n        for (int l = 1; l <= n; ++l) {\n            for (int inv = 0; inv <= K; ++inv) {\n                for (int pos = 0; pos < l; ++pos) {\n                    int prevInv = inv - pos;\n                    if (prevInv >= 0) {\n                        dp[l][inv] = (dp[l][inv] + dp[l - 1][prevInv]) % M;\n                    }\n                }\n            }\n            if (rm.find(l) != rm.end()) {\n                int targetInv = rm[l];\n                for (int inv = 0; inv <= K; ++inv) {\n                    if (inv != targetInv) {\n                        dp[l][inv] = 0;\n                    }\n                }\n            }\n        }\n        long res = 0;\n        for (int inv = 0; inv <= K; ++inv) {\n            res = (res + dp[n][inv]) % M;\n        }\n        return res;\n    }\n};",
    "submit_ts": 1719070385.0
}