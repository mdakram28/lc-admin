{
    "username": "dhQ9olDGkC",
    "submission": "typedef long long int ll;\n\ntemplate <typename T>\nclass sumsegtree {\nprivate:\n    vector<T> seg;\n    ll n;\n    T merge(T a, T b) {\n        return a + b;\n    }\n    void build(vector<T> &a, ll tl, ll tr, ll v) {\n        if (tl == tr) {\n            seg[v] = a[tl];\n            return;\n        }\n        ll tm = (tl + tr) / 2;\n        build(a, tl, tm, 2 * v + 1);\n        build(a, tm + 1, tr, 2 * v + 2);\n        seg[v] = merge(seg[2 * v + 1], seg[2 * v + 2]);\n    }\n    void update(ll tl, ll tr, ll pos, T val, ll v) {\n        if (tl == tr) {\n            seg[v] = val;\n            return;\n        }\n        ll tm = (tl + tr) / 2;\n        if (pos <= tm)\n            update(tl, tm, pos, val, 2 * v + 1);\n        else\n            update(tm + 1, tr, pos, val, 2 * v + 2);\n        seg[v] = merge(seg[2 * v + 1], seg[2 * v + 2]);\n    }\n    T rangeval(ll tl, ll tr, ll l, ll r, ll v) {\n        if (tl == l && tr == r)\n            return seg[v];\n        ll tm = (tl + tr) / 2;\n        if (r <= tm)\n            return rangeval(tl, tm, l, r, 2 * v + 1);\n        else if (l > tm)\n            return rangeval(tm + 1, tr, l, r, 2 * v + 2);\n        return merge(rangeval(tl, tm, l, tm, 2 * v + 1), rangeval(tm + 1, tr, tm + 1, r, 2 * v + 2));\n    }\n\npublic:\n    sumsegtree(ll n) {\n        seg.resize(4 * n);\n        this->n = n;\n    }\n    sumsegtree(vector<T> a) {\n        this->n = (ll)a.size();\n        seg.resize(4 * n);\n        build(a, 0, n - 1, 0);\n    }\n    void update(ll pos, T val) { update(0, n - 1, pos, val, 0); }\n    T query(ll l, ll r) { return rangeval(0, n - 1, l, r, 0); }\n};\n\nclass Solution {\npublic:\n    vector<int> countOfPeaks(vector<int>& a, vector<vector<int>>& Q) {\n        int n = a.size();\n        vector<int> val(n);\n        vector<int> answer;\n        val[0] = val[n - 1] = 0;\n        for (int i = 1; i < n - 1; i++) {\n            if (a[i] > a[i - 1] and a[i] > a[i + 1])\n                val[i] = 1;\n        }\n        sumsegtree<int> st(val);\n        for (auto& q : Q) {\n            int t = q[0];\n            if (t == 1) {\n                int l = q[1], r = q[2];\n                int ans = st.query(l, r) - st.query(l, l) - st.query(r, r);\n                if (l == r)\n                    ans = 0;\n                answer.push_back(ans);\n            } else {\n                int i = q[1], v = q[2];\n                a[i] = v;\n                int check = 0;\n                if (i > 0 and i < n - 1) {\n                    if (a[i - 1] < a[i] and a[i] > a[i + 1])\n                        check = 1;\n                }\n                st.update(i, check);\n                if (i > 1) {\n                    check = 0;\n                    if (a[i - 2] < a[i - 1] and a[i] < a[i - 1])\n                        check = 1;\n                    st.update(i - 1, check);\n                }\n                if (i < n - 2) {\n                    check = 0;\n                    if (a[i] < a[i + 1] and a[i + 2] < a[i + 1])\n                        check = 1;\n                    st.update(i + 1, check);\n                }\n            }\n        }\n        return answer;\n    }\n};",
    "submit_ts": 1718506985.0
}