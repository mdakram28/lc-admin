{
    "username": "SR3mix",
    "submission": "import math\nclass Solution:\n    def waysToReachStair(self, k: int) -> int:\n        # ll ans = 0; \n        # if (k == 0) ans++;\n        # if (k == 1) ans++;\n        # for (int up = 1; up <= 34; up++) {\n        #     ll jumps = 0;\n        #     for (int j = 0; j < up; j++) {\n        #         jumps += (1LL << j);\n        #     }\n        #     ll lo = 1 + jumps - up - 1;\n        #     ll hi = 1 + jumps;\n        #     if (k >= lo && k <= hi) {\n        #         ll d = hi - k;\n        #         ll t = d + up;\n        #         ll get = math.comb_pure\n        #     }\n        # }\n        # return ans;\n        ans = 0\n        if k == 0:\n            ans += 1\n        if k == 1:\n            ans += 1\n        for up in range(1,35):\n            jumps = 0\n            for j in range(up):\n                jumps += (1 << j)\n            lo = 1 + jumps - up - 1\n            hi = 1 + jumps\n            if k >= lo and k <= hi:\n                d = hi - k\n                t = d + up\n                ans += math.comb(up+1,d)\n        return ans\n                ",
    "submit_ts": 1716086796.0
}