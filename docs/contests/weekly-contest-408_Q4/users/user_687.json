{
    "username": "Pseudoproton",
    "submission": "import java.util.*;\n\nclass Solution {\n    public boolean bfs(List<List<Integer>> graph, int start, int end1, int end2, int numNodes) {\n        Queue<Integer> q = new LinkedList<>();\n        boolean[] vis = new boolean[numNodes + 4];\n        q.add(start);\n        vis[start] = true;\n\n        while (!q.isEmpty()) {\n            int current = q.poll();\n            for (int nb : graph.get(current)) {\n                if (!vis[nb]) {\n                    q.add(nb);\n                    vis[nb] = true;\n                }\n            }\n        }\n        return vis[end1] || vis[end2];\n    }\n\n    public boolean canReachCorner(int width, int height, int[][] circles) {\n        int len = circles.length;\n        List<Map.Entry<Map.Entry<Integer, Integer>, Integer>> list = new ArrayList<>(len);\n        List<List<Integer>> graph = new ArrayList<>(len + 4);\n\n        for (int i = 0; i < len + 4; i++) {\n            graph.add(new ArrayList<>());\n        }\n\n        for (int[] circle : circles) {\n            list.add(new AbstractMap.SimpleEntry<>(new AbstractMap.SimpleEntry<>(circle[0], circle[1]), circle[2]));\n        }\n\n        for (int i = 0; i < len; i++) {\n            if (list.get(i).getKey().getKey() <= list.get(i).getValue()) {\n                graph.get(len).add(i);\n                graph.get(i).add(len);\n            }\n            if (width - list.get(i).getKey().getKey() <= list.get(i).getValue()) {\n                graph.get(len + 2).add(i);\n                graph.get(i).add(len + 2);\n            }\n            if (list.get(i).getKey().getValue() <= list.get(i).getValue()) {\n                graph.get(len + 1).add(i);\n                graph.get(i).add(len + 1);\n            }\n            if (height - list.get(i).getKey().getValue() <= list.get(i).getValue()) {\n                graph.get(len + 3).add(i);\n                graph.get(i).add(len + 3);\n            }\n        }\n\n        for (int i = 0; i < len; i++) {\n            for (int j = i + 1; j < len; j++) {\n                double dist = Math.sqrt(Math.pow(list.get(i).getKey().getKey() - list.get(j).getKey().getKey(), 2) +\n                                            Math.pow(list.get(i).getKey().getValue() - list.get(j).getKey().getValue(), 2));\n                if (list.get(i).getValue() + list.get(j).getValue() >= dist) {\n                    graph.get(i).add(j);\n                    graph.get(j).add(i);\n                }\n            }\n        }\n\n        return !(bfs(graph, len, len + 1, len + 2, len + 4) || bfs(graph, len + 3, len + 2, len + 1, len + 4));\n    }\n}\n",
    "submit_ts": "1722138337",
    "subm_id": "1335788165"
}