{
    "username": "mathtsai",
    "submission": "class Node{  \npublic:\n    Node* ch[26];\n    long long cost;\n    Node(){\n        for(int i=0; i<26; i++) ch[i] = nullptr;\n        cost = INT_MAX;\n    }\n};\n\nclass Trie{\npublic:\n    Node* root;\n    Trie(){\n        root = new Node();\n    }\n\n    void insert(string word, long long cost) {\n        Node* cur = root;\n        for(auto c: word)\n        {\n            if(!cur->ch[c-'a'])\n                cur->ch[c-'a'] = new Node();\n            cur = cur->ch[c-'a'];\n        }\n        cur->cost = min(cur->cost, cost);\n    }\n};\n\nclass Solution {\npublic:\n    long long dp[50001];\n    Trie T;\n    long long DP(int i, string &t)\n    {\n        if(i == t.size())\n            return 0;\n        \n        if(dp[i] != LONG_MAX) return dp[i];\n        if(!T.root->ch[t[i]-'a']) return INT_MAX;\n        Node *temp = T.root;\n        int j=i;\n        long long ans=1e12;\n        while(j<t.size() && temp->ch[t[j]-'a'])\n        {\n            temp = temp->ch[t[j]-'a'];\n            j++;\n            if(temp->cost != INT_MAX)\n                ans = min(ans, DP(j,t)+temp->cost);\n        }\n        return dp[i] = ans;\n    }\n    int minimumCost(string t, vector<string>& word, vector<int>& c) {\n        int n=word.size(), m=t.size();\n        for(int i=0; i<n; i++)\n            T.insert(word[i], c[i]);\n\n        for(int i=0; i<m; i++)\n            dp[i] = LONG_MAX;\n\n        long long ans = DP(0,t);\n        if(ans >= INT_MAX) return -1;\n        return ans;\n    }\n};",
    "submit_ts": "1720322598",
    "subm_id": "1312354134"
}