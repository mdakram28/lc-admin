{
    "username": "leetcodedegen",
    "submission": "class Solution {\n    public static void main(String[] args) {\n        var s = new Solution();\n//        int[][] arr = new int[][]{\n//                {1, 0, 0},\n//                {0, 1, 0},\n//                {0, 0, 1},\n//        };\n        int[][] arr = new int[][]{\n                {0, 1},\n                {0, 1},\n                {0, 0},\n        };\n//        int[][] arr = new int[][]{\n//                {1},\n//                {1}\n//        };\n        var res = s.minFlips(arr);\n        System.out.println(res);\n    }\n    public int minFlips(int[][] grid) {\n        int res = 0;\n        int rows = grid.length;\n        int cols = grid[0].length;\n\n        for (int row = 0; row < rows / 2; row++) {\n            for (int col = 0; col < cols / 2; col++) {\n                int colsOp = cols - col - 1;\n                int rowOpp = rows - row - 1;\n                int x = grid[row][col];\n                int y = grid[row][colsOp];\n                int z = grid[rowOpp][col];\n                int t = grid[rowOpp][colsOp];\n                int change = minChange(x, y, z, t);\n                res += change;\n            }\n        }\n\n        Pair c = new Pair(0, 0);\n        if (rows % 2 == 1) {\n            int[] tmp = new int[cols];\n            for (int i = 0; i < cols; i++) tmp[i] = grid[rows / 2][i];\n            Pair a = check(tmp);\n            c = new Pair(c.x + a.x, c. y + a.y);\n        }\n\n        if (cols % 2 == 1) {\n            int[] tmp = new int[rows];\n            for (int i = 0; i < rows; i++) tmp[i] = grid[i][cols / 2];\n            Pair a = check(tmp);\n            c = new Pair(c.x + a.x, c. y + a.y);\n        }\n\n       if (c.y % 2 == 0) {\n           // make all 0\n           res += c.x;\n       } else {\n           if (c.x >= 1) {\n               res += c.x;\n           } else {\n               res += 2;\n           }\n       }\n\n       if (rows % 2 == 1 && cols % 2 == 1 && grid[rows / 2][cols / 2] == 1) {\n           res++;\n       }\n\n\n\n        return res;\n    }\n\n    // number of diff pair\n    // and number of same ones\n    Pair check(int[] array) {\n        int res = 0;\n        int sum = 0;\n        for (int i =  0, j = array.length - 1; i < j; i++, j--) {\n            if (array[i] != array[j]) res++;\n            if (array[i] == array[j] && array[i] == 1) sum++;\n        }\n        return new Pair(res, sum);\n    }\n\n    int minChange(int... a) {\n        int sum = 0;\n        for (int tmp : a) sum += tmp;\n        return Math.min(a.length - sum, sum);\n    }\n\n    record Pair(int x, int y) {}\n}",
    "submit_ts": "1722699702",
    "subm_id": "1343219699"
}