{
    "username": "abhinav200146",
    "submission": "#include <string>\n#include <algorithm>\nusing namespace std;\n\nclass Solution {\npublic:\n\n    char palindrome_dp[100001][7];\n    char palindrome_dp_non_zero[100001][7];\n    int next_mod[100001][7];\n    int non_zero_next_mod[100001][7];\n\n    string largestPalindrome(int n, int k) {\n        if (k == 1 || k == 3 || k == 9) {\n            return string(n, '9');\n        }\n        \n        if (k == 2) {\n            if (n == 1) {\n                return \"8\";  \n            }\n            string result(n, '9');\n            result[0] = '8';\n            result[n - 1] = '8';\n            return result;\n        }\n        \n        if (k == 5) {\n            if (n == 1) {\n                return \"5\";  \n            }\n            string result(n, '9');\n            result[0] = '5';\n            result[n - 1] = '5';\n            return result;\n        }\n\n        if (k == 4) {\n            if (n <= 3) {\n                return string(n, '8');\n            }\n            string result(n, '9');\n            result[0] = '8';\n            result[1] = '8';\n            result[n - 2] = '8';\n            result[n - 1] = '8';\n            return result;\n        }\n\n        if (k == 8) {\n            if (n <= 5) {\n                return string(n, '8');\n            }\n            string result(n, '9');\n            result[0] = '8';\n            result[1] = '8';\n            result[2] = '8';\n            result[n - 3] = '8';\n            result[n - 2] = '8';\n            result[n - 1] = '8';\n            return result;\n        }\n\n        if (k == 6) {\n            if (n == 1) return \"6\";\n            if (n == 2) return \"66\";\n            if (n == 3) return \"888\";\n\n            string result(n, '9');\n            result[0] = '8';\n            result[n - 1] = '8';\n            if (n % 2 == 1) {\n                result[n / 2] = '8';\n            } else {\n                result[n / 2] = '7';\n                result[(n / 2) - 1] = '7';\n            }\n            return result;\n        }\n\n        if (k == 7) {\n            if (n == 1) return \"7\";\n\n            fill(&palindrome_dp[0][0], &palindrome_dp[0][0] + sizeof(palindrome_dp), 0);\n            fill(&palindrome_dp_non_zero[0][0], &palindrome_dp_non_zero[0][0] + sizeof(palindrome_dp_non_zero), 0);\n\n            for (int digit = 1; digit < 10; ++digit) {\n                palindrome_dp[1][digit % 7] = '0' + digit;\n                if (digit != 0) {\n                    palindrome_dp_non_zero[1][digit % 7] = '0' + digit;\n                }\n            }\n\n            int mod_base = 10 % 7;\n            for (int length = 0; length <= 100000 - 2; ++length) {\n                for (int current_mod = 0; current_mod < 7; ++current_mod) { \n                    if ((length == 0 && current_mod != 0) || (length > 0 && palindrome_dp[length][current_mod] == 0)) {\n                        continue;\n                    }\n                    for (int digit = 9; digit >= 0; --digit) {\n                        int new_mod = (mod_base * digit + digit + current_mod * 10) % 7;\n                        if (palindrome_dp[length + 2][new_mod] == 0 || palindrome_dp[length + 2][new_mod] < '0' + digit) {\n                            palindrome_dp[length + 2][new_mod] = '0' + digit;\n                            next_mod[length + 2][new_mod] = current_mod;\n                        }\n                        if (digit == 0) continue;\n                        if (palindrome_dp_non_zero[length + 2][new_mod] == 0 || palindrome_dp_non_zero[length + 2][new_mod] < '0' + digit) {\n                            palindrome_dp_non_zero[length + 2][new_mod] = '0' + digit;\n                            non_zero_next_mod[length + 2][new_mod] = current_mod;\n                        }\n                    }\n                }\n                mod_base = (mod_base * 10) % 7;\n            }\n\n            int remaining_length = n;\n            string front(1, palindrome_dp_non_zero[remaining_length][0]);\n            string back(1, palindrome_dp_non_zero[remaining_length][0]);\n            int current_mod = non_zero_next_mod[remaining_length][0];\n            remaining_length -= 2;\n\n            while (remaining_length > 0) {\n                front += palindrome_dp[remaining_length][current_mod];\n                if (remaining_length > 1) back += palindrome_dp[remaining_length][current_mod];\n                current_mod = next_mod[remaining_length][current_mod];\n                remaining_length -= 2;\n            }\n\n            reverse(back.begin(), back.end());\n            string final_result = front + back;\n            return final_result;\n        }\n\n        return \"\";\n    }\n};\n",
    "submit_ts": "1723952099",
    "subm_id": "1359787893"
}