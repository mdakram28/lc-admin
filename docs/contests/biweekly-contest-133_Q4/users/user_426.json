{
    "username": "zenman003",
    "submission": "#include <iostream>\n#include <vector>\n#include <unordered_map>\n\nusing namespace std;\n\nconst int MOD = 1'000'000'007;\nconst int MAX_INVERSIONS = 400;\n\nclass Solution {\npublic:\n    int numberOfPermutations(int n, vector<vector<int>>& requirements) {\n\n        unordered_map<int, int> reqm;\n        for (const auto& req : requirements) {\n            reqm[req[0] + 1] = req[1];\n        }\n\n        vector<vector<long>> perm(n + 1, vector<long>(MAX_INVERSIONS + 1, 0));\n        perm[0][0] = 1;\n\n\n        for (int length = 1; length <= n; length++) {\n            for (int inv = 0; inv <= MAX_INVERSIONS; inv++) {\n                for (int newPos = 0; newPos < length; newPos++) {\n                    int prevInv = inv - newPos;\n                    if (prevInv >= 0) {\n                        perm[length][inv] = (perm[length][inv] + perm[length - 1][prevInv]) % MOD;\n                    }\n                }\n            }\n\n\n            if (reqm.find(length) != reqm.end()) {\n                int targetInv = reqm[length];\n                for (int inv = 0; inv <= MAX_INVERSIONS; inv++) {\n                    if (inv != targetInv) {\n                        perm[length][inv] = 0;\n                    }\n                }\n            }\n        }\n\n        long result = 0;\n        for (const auto& count : perm[n]) {\n            result = (result + count) % MOD;\n        }\n\n\n\n        return static_cast<int>(result);\n    }\n};\n",
    "submit_ts": "1719070446",
    "subm_id": "1296823248"
}