{
    "username": "i_Sitanshu",
    "submission": "#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\nclass Solution {\npublic:\n    int minFlips(vector<vector<int>>& grid) {\n        int numRows = grid.size();\n        int numCols = grid[0].size();\n        \n        int totalFlips = 0;\n        \n        // Traverse through 2x2 sub-grids\n        int fh=numRows / 2;\n        int sf=numCols / 2;\n        for (int i = 0; i < fh; ++i) {\n            for (int j = 0; j < sf; ++j) {\n\n                vector<int> cellValues = {\n                    grid[i][j],\n                    grid[numRows - i - 1][j],\n                    grid[i][numCols - j - 1],\n                    grid[numRows - i - 1][numCols - j - 1]\n                };\n                \n                int onesCount = count(cellValues.begin(), cellValues.end(), 1);\n\n                if(onesCount<4-onesCount){\n                    totalFlips = totalFlips + onesCount;\n                }else{\n                    totalFlips = totalFlips + (4-onesCount);\n                }\n            }\n        }\n        \n        int middleAdjustments = 0;\n        int middleOnes = 0;\n        \n        // Handle the middle row if number of rows is odd\n        bool odd = (numRows % 2 != 0);\n        if (odd) {\n            for (int j = 0; j < numCols / 2; ++j) {\n                if (grid[numRows / 2][j] != grid[numRows / 2][numCols - j - 1]) {\n                    totalFlips += 1;\n                    middleAdjustments += 1;\n                } else {\n                    if (grid[numRows / 2][j] == 1) {\n                        middleOnes += 1;\n                    }\n                }\n            }\n        }\n        \n        // Handle the middle column if number of columns is odd\n        bool noteven = numCols % 2 != 0; \n        if (noteven) {\n            for (int i = 0; i < numRows / 2; ++i) {\n                if (grid[i][numCols / 2] != grid[numRows - i - 1][numCols / 2]) {\n                    totalFlips += 1;\n                    middleAdjustments += 1;\n                } else {\n                    if (grid[i][numCols / 2] == 1) {\n                        middleOnes += 1;\n                    }\n                }\n            }\n        }\n        \n        // Handle the central element if both number of rows and columns are odd\n        bool one = numRows % 2 != 0;\n        bool two = numCols % 2 != 0;\n        bool three = grid[numRows / 2][numCols / 2] == 1;\n\n        if (one && two && three) {\n            totalFlips = totalFlips + 1;\n        }\n        bool cond1=middleAdjustments == 0;\n        bool cond2 = middleOnes % 2 != 0;\n        if (cond1 && cond2) {\n            totalFlips = totalFlips + 2;\n        }\n        \n        return totalFlips;\n    }\n};\n",
    "submit_ts": "1722700092",
    "subm_id": "1343231482"
}