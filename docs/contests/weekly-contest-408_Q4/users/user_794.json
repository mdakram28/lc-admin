{
    "username": "jdevj",
    "submission": "class Solution {\n    int X,Y;\npublic:\n    void dfs(int idx,int &ends,vector<bool> &vis,vector<vector<int>> &Graph,vector<vector<int>>& circles){\n        if(circles[idx][0]+circles[idx][2]>=X)ends|=(1<<3);\n        if(circles[idx][0]-circles[idx][2]<=0)ends|=(1<<1);\n        if(circles[idx][1]-circles[idx][2]<=0)ends|=(1<<0);\n        if(circles[idx][1]+circles[idx][2]>=Y)ends|=(1<<2);\n        for(int e:Graph[idx]){\n            if(vis[e]){\n                vis[e]=false;\n                dfs(e,ends,vis,Graph,circles);\n            }\n        }\n    }\n\n    bool canReach(int a,int b,int r){\n        return sqrt(1ll*a*a + 1ll*b*b) <= r;\n    }\n\n    bool canReachCorner(int x, int y, vector<vector<int>>& circles) {\n        X=x,Y=y;\n        int n = circles.size();\n        vector<vector<int>> Graph(n);\n        for(int i=0;i<n;i++){\n            if(canReach(circles[i][0],circles[i][1],circles[i][2]))return false;\n            for(int j=0;j<n;j++){\n                int diffX = abs(circles[i][0] - circles[j][0]);\n                int diffY = abs(circles[i][1] - circles[j][1]);\n                int rad1 = circles[i][2],rad2 = circles[j][2];\n                if(canReach(diffX,diffY,rad1+rad2)){\n                    Graph[i].push_back(j);\n                }\n            }\n        }\n        vector<bool> vis(n,true);\n        for(int i=0;i<n;i++){\n            int ends=0;\n            vis[i]=false;\n            dfs(i,ends,vis,Graph,circles);\n            if((ends&(1<<0)) && (ends&(1<<1)))return false;\n            if((ends&(1<<3)) && (ends&(1<<1)))return false;\n            if((ends&(1<<3)) && (ends&(1<<2)))return false;\n            if((ends&(1<<0)) && (ends&(1<<2)))return false;\n        }\n        return true;\n    }\n};",
    "submit_ts": "1722137744",
    "subm_id": "1335772478"
}