{
    "username": "decoder2025",
    "submission": "class Solution {\n    private static final int MOD = 1_000_000_007;\n    private static final int MAX_INVERSIONS = 400;\n    public int numberOfPermutations(int n, int[][] requirements) {\n        Map<Integer, Integer> endIdxToInversionCnt = mapRequirements(requirements);\n        long[][] dp = initializeDP(n);\n        solve2(dp, n, endIdxToInversionCnt);\n        return calculateResult(dp, n);\n    }\n\n    private Map<Integer, Integer> mapRequirements(int[][] requirements) {\n        Map<Integer, Integer> endIdxToInversionCnt = new HashMap<>();\n        for (int[] req : requirements) {\n            endIdxToInversionCnt.put(req[0] + 1, req[1]);\n        }\n        return endIdxToInversionCnt;\n    }\n\n    private long[][] initializeDP(int n) {\n        long[][] dp = new long[n + 1][MAX_INVERSIONS + 1];\n        dp[0][0] = 1;\n        return dp;\n    }\n\n    private void solve2(long[][] dp, int n, Map<Integer, Integer> endIdxToInversionCnt) {\n        for (int length = 1; length <= n; length++) {\n            for (int currentInversions = 0; currentInversions <= MAX_INVERSIONS; currentInversions++) {\n                for (int newPosition = 0; newPosition < length; newPosition++) {\n                    int previousInversions = currentInversions - newPosition;\n                    if (previousInversions >= 0) {\n                        dp[length][currentInversions] = (dp[length][currentInversions] + dp[length - 1][previousInversions]) % MOD;\n                    }\n                }\n            }\n\n            if (endIdxToInversionCnt.containsKey(length)) {\n                int requiredInversions = endIdxToInversionCnt.get(length);\n                for (int currentInversions = 0; currentInversions <= MAX_INVERSIONS; currentInversions++) {\n                    if (currentInversions != requiredInversions) {\n                        dp[length][currentInversions] = 0;\n                    }\n                }\n            }\n        }\n    }\n\n    private int calculateResult(long[][] dp, int n) {\n        long result = 0;\n        for (int currentInversions = 0; currentInversions <= MAX_INVERSIONS; currentInversions++) {\n            result = (result + dp[n][currentInversions]) % MOD;\n        }\n        return (int) result;\n    }\n}",
    "submit_ts": 1719071086.0
}