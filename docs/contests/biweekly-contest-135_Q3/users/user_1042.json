{
    "username": "_sajid",
    "submission": "class Solution {\n    public int minChanges(int[] nums, int k) {\n        Map<Integer, Integer> count = new HashMap<>();\n        int to = (nums.length - 1) / 2;\n        for (int i = 0; i <= to; i++) {\n            int diff = Math.abs(nums[i] - nums[nums.length - i - 1]);\n            count.compute(diff, (key, val) -> val == null ? 1 : val + 1);\n        }\n        int pair[][] = new int[count.size()][]; // diff, count\n        int cur = 0;\n        for (Map.Entry<Integer, Integer> e : count.entrySet()) {\n            pair[cur++] = new int[]{e.getKey(), e.getValue()};\n        }\n\n        //max possible diff\n        int maxpos[] = new int[nums.length / 2];\n        cur = 0;\n        for (int i = 0; i <= to; i++) {\n            maxpos[cur] = k - Math.min(nums[i], nums[nums.length - i - 1]);\n            maxpos[cur] = Math.max(maxpos[cur], Math.max(nums[i], nums[nums.length - i - 1]));\n            cur++;\n        }\n        Arrays.sort(maxpos);\n\n        int result = nums.length;\n\n        for (int i = 0; i < pair.length; i++) {\n            int diff = pair[i][0], has = pair[i][1];\n            int need2 = need2(maxpos, diff);\n            int tmp = nums.length / 2 - has + need2;\n            result = Math.min(result, tmp);\n            // System.out.println(\"diff : \" + diff + \", has : \" + has + \", need2 : \" + need2 + \", tmp : \" + tmp);\n        }\n        \n        return result;\n    }\n    //return number of elements less than val\n    private int need2(int arr[], int val) {\n        int left = 0, right = arr.length - 1, result = -1;\n        while (left <= right) {\n            int mid = left + (right - left) / 2;\n            if (arr[mid] < val) {\n                result = mid;\n                left = mid + 1;\n            } else {\n                right = mid - 1;\n            }\n        }\n        return result + 1;\n    }\n}",
    "submit_ts": "1721488632",
    "subm_id": "1327428400"
}