{
    "username": "wonder-23f",
    "submission": "class Solution {\n     static class FenwickTree {\n        private int[] tree;\n        private int n;\n\n        public FenwickTree(int size) {\n            this.n = size;\n            this.tree = new int[size + 1];\n        }\n\n        public void update(int index, int delta) {\n            for (int i = index + 1; i <= n; i += i & -i) {\n                tree[i] += delta;\n            }\n        }\n\n        public int query(int index) {\n            int sum = 0;\n            for (int i = index + 1; i > 0; i -= i & -i) {\n                sum += tree[i];\n            }\n            return sum;\n        }\n\n        public int query(int left, int right) {\n            return query(right) - query(left - 1);\n        }\n    }\n    public List<Integer> countOfPeaks(int[] nums, int[][] queries) {\n List<Integer> results = new ArrayList<>();\n        int n = nums.length;\n        FenwickTree bit = new FenwickTree(n);\n        boolean[] isPeak = new boolean[n];\n\n        // \u521d\u59cb\u5316\u5cf0\u503c\u72b6\u6001\u548c\u6811\u72b6\u6570\u7ec4\n        for (int i = 1; i < n - 1; i++) {\n            if (isPeak(nums, i)) {\n                isPeak[i] = true;\n                bit.update(i, 1);\n            }\n        }\n\n        for (int[] query : queries) {\n            if (query[0] == 1) {\n                int li = query[1];\n                int ri = query[2];\n                int count = bit.query(li + 1, ri - 1);\n                if(ri-li <= 1) count = 0; \n                results.add(count);\n            } else if (query[0] == 2) {\n                int index = query[1];\n                int value = query[2];\n                nums[index] = value;\n                updatePeakStatus(nums, index, isPeak, bit);\n                updatePeakStatus(nums, index - 1, isPeak, bit);\n                updatePeakStatus(nums, index + 1, isPeak, bit);\n            }\n        }\n\n        return results;\n    }\n    private static void updatePeakStatus(int[] nums, int i, boolean[] isPeak, FenwickTree bit) {\n        if (i > 0 && i < nums.length - 1) {\n            boolean wasPeak = isPeak[i];\n            boolean nowPeak = isPeak(nums, i);\n            if (wasPeak != nowPeak) {\n                isPeak[i] = nowPeak;\n                bit.update(i, nowPeak ? 1 : -1);\n            }\n        }\n    }\n\n    private static boolean isPeak(int[] nums, int i) {\n        return i > 0 && i < nums.length - 1 && nums[i] > nums[i - 1] && nums[i] > nums[i + 1];\n    }\n\n}",
    "submit_ts": 1718508721.0
}