{
    "username": "ricardojack",
    "submission": "class Solution {\n    \n    class TrieNode {\n        Map<Character, TrieNode> map = new HashMap<>();\n        boolean word;\n        int cost;\n    }\n\n    class Item {\n        int cost;\n        int length;\n\n        Item(int cost, int length) {\n            this.cost = cost;\n            this.length = length;\n        }\n    }\n\n    class Trie {\n        TrieNode root = new TrieNode();\n\n        void insert(String word, int cost) {\n            TrieNode curr = root;\n            for (char c : word.toCharArray()) {\n                curr = curr.map.computeIfAbsent(c, k -> new TrieNode());\n            }\n            if (curr.word) {\n                curr.cost = Math.min(cost, curr.cost);\n            } else {\n                curr.word = true;\n                curr.cost = cost;\n            }\n        }\n\n        List<Item> query(String target, int index) {\n            TrieNode curr = root;\n            List<Item> list = new ArrayList<>();\n            int length = 0;\n            for (int i = index; i < target.length(); i++) {\n                char c = target.charAt(i);\n                curr = curr.map.get(c);\n                if (curr == null) break;\n                length++;\n                if (curr.word) {\n                    list.add(new Item(curr.cost, length));\n                }\n            }\n            return list;\n        }\n    }\n\n    class State {\n        int index;\n        int cost;\n\n        State(int index, int cost) {\n            this.index = index;\n            this.cost = cost;\n        }\n    }\n\n    public int minimumCost(String target, String[] words, int[] costs) {\n        int n = target.length();\n        Trie trie = new Trie();\n\n        for (int i = 0; i < words.length; i++) {\n            trie.insert(words[i], costs[i]);\n        }\n\n        int[] dp = new int[n + 1];\n        Arrays.fill(dp, Integer.MAX_VALUE);\n        dp[0] = 0;\n\n        PriorityQueue<State> pq = new PriorityQueue<>(Comparator.comparingInt(s -> s.cost));\n        pq.offer(new State(0, 0));\n\n        while (!pq.isEmpty()) {\n            State state = pq.poll();\n            int start = state.index;\n            int currentCost = state.cost;\n\n            if (currentCost > dp[start]) continue;\n\n            for (Item item : trie.query(target, start)) {\n                int end = start + item.length;\n                if (end <= n && dp[start] + item.cost < dp[end]) {\n                    dp[end] = dp[start] + item.cost;\n                    pq.offer(new State(end, dp[end]));\n                }\n            }\n        }\n\n        return dp[n] == Integer.MAX_VALUE ? -1 : dp[n];\n    }\n}",
    "submit_ts": "1720323510",
    "subm_id": "1312377368"
}