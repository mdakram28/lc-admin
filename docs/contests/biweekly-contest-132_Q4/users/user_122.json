{
    "username": "power1011",
    "submission": "class Solution {\npublic:\n    int maximumLength(vector<int>& nums, int k) {\n        int n = nums.size();\n        // dp[0..k][0..n-1]\n        // dp[i][j] = longest lenght possible if we chooes jth elements as the last element in the subsequence and the number of cool pair is i\n        // dp[i][j] = max(dp[i][k]) + 1 where nums[k] == nums[j]\n        // dp[i][j] = max(dp[i-1][k]) + 1 where nums[k] != nums[j]\n        // find dp[i-1][k_1] = max(dp[i-1][k])\n        // find dp[i-1][k_2] = max(dp[i-1][k]) where nums[k] is not nums[k_1]\n        // if nums[j] != nums[k_1] => dp[i-1][k_1]\n        // else => dp[i-1][k_2]\n        vector<vector<int>> dp(k+1, vector<int>(n));\n        int ans = 1;\n        for(int i=0;i<k+1;++i)\n        {\n            std::map<int, int> mp; // key nums[x] value max(dp[i][x])\n            int k_1 = -1;\n            int k_2 = -1;\n            for(int j=0;j<n;++j)\n            {\n                auto it = mp.find(nums[j]);\n                if(it == mp.end())\n                {\n                    dp[i][j] = 0 + 1;\n                }\n                else\n                {\n                    dp[i][j] = it->second + 1;\n                }\n                if(k_1 != -1 && nums[j] != nums[k_1])\n                {\n                    dp[i][j] = std::max(dp[i][j], dp[i-1][k_1] + 1);\n                }\n                if(k_2 != -1 && nums[j] != nums[k_2])\n                {\n                    dp[i][j] = std::max(dp[i][j], dp[i-1][k_2] + 1);\n                }\n                // dp[i][j] is completed\n                mp[nums[j]] = std::max(mp[nums[j]], dp[i][j]);\n                ans = std::max(ans, dp[i][j]);\n                if(i!=0)\n                {\n                    if(k_1 == -1)\n                    {\n                        k_1 = j;\n                    }\n                    else if(nums[j] == nums[k_1])\n                    {\n                        if(dp[i-1][k_1] < dp[i-1][j])\n                        {\n                            k_1 = j;\n                        }\n                    }\n                    else if(k_2 == -1)\n                    {\n                        k_2 = j;\n                    }\n                    else if(nums[j] == nums[k_2])\n                    {\n                        if(dp[i-1][k_2] < dp[i-1][j])\n                        {\n                            k_2 = j;\n                        }\n                        if(dp[i-1][k_1] < dp[i-1][k_2])\n                        {\n                            std::swap(k_1, k_2);\n                        }\n                    }\n                    else\n                    {\n                        if(dp[i-1][k_1] < dp[i-1][j])\n                        {\n                            k_2 = k_1;\n                            k_1 = j;\n                        }\n                        else if(dp[i-1][k_2] < dp[i-1][j])\n                        {\n                            k_2 = j;\n                        }\n                    }\n                }\n            }\n        }\n        return ans;\n    }\n};",
    "submit_ts": 1717860554.0
}