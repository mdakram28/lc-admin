{
    "username": "Toshiksharma",
    "submission": "class Solution {\npublic:\n    int MOD = 1e9 + 7;\n    \n    int numberOfPermutations(int n, vector<vector<int>>& requirements) {\n        vector<int> req(n, -1);\n        int max_inv = 0;\n        for (const auto& r : requirements) {\n            req[r[0]] = r[1];\n            max_inv = max(max_inv, r[1]);\n        }\n        max_inv = max(max_inv, n-1);  // Maximum possible inversions\n        \n        vector<vector<long long>> dp(n + 1, vector<long long>(max_inv + 1, 0));\n        dp[0][0] = 1;\n        \n        for (int i = 1; i <= n; ++i) {\n            for (int j = 0; j <= max_inv; ++j) {\n                if (req[i-1] != -1 && j != req[i-1]) continue;\n                \n                for (int k = 0; k <= min(j, i-1); ++k) {\n                    dp[i][j] = (dp[i][j] + dp[i-1][j-k]) % MOD;\n                }\n            }\n        }\n        \n        if (req[n-1] != -1) {\n            return dp[n][req[n-1]];\n        } else {\n            long long result = 0;\n            for (int j = 0; j <= max_inv; ++j) {\n                result = (result + dp[n][j]) % MOD;\n            }\n            return result;\n        }\n    }\n};",
    "submit_ts": 1719068639.0
}