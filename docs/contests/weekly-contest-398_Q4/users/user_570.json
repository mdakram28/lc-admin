{
    "username": "visionarymv",
    "submission": "class Solution {\npublic:\n    typedef long long ll;\n    vector<vector<vector<ll>>> dp = vector<vector<vector<ll>>>(31, vector<vector<ll>>(31, vector<ll>(2, -1)));\n\n    ll waysToArrangeXAndY(ll x, ll y, bool lastWasX) {\n        if(x < 0 || y < 0) return 0;\n        if(x == 0) return 1;\n        \n        if(dp[x][y][lastWasX] != -1) return dp[x][y][lastWasX];\n\n        int result = 0;\n        \n        if(lastWasX) {\n            result = waysToArrangeXAndY(x, y - 1, 0);\n        } else {\n            result = waysToArrangeXAndY(x - 1, y, 1) + waysToArrangeXAndY(x, y - 1, 0);\n        }\n\n        return dp[x][y][lastWasX] = result;\n    } \n    \n    ll calPos(ll x, ll y) {\n        ll pos = -x;\n        pos += pow(2, y) - 1;\n        return pos;\n    }\n    \n    int waysToReachStair(int k) {\n        ll result = 0;\n        for(ll x = 0; x < 31; x ++) {\n            for(ll y = 0; y < 31; y++) {\n                if(x - y <= 1 && calPos(x, y) == k - 1) {\n                    // cout << x << \" \" << y << endl;\n                    result += waysToArrangeXAndY(x, y, 0);\n                }\n            }\n        }\n        \n        return result;\n    }\n};",
    "submit_ts": 1716088960.0
}