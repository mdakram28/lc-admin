{
    "username": "Chandrachur",
    "submission": "class Solution {\n    void dfs(int current, vector<vector<int>>& edges, int parent, vector<int>& dist){\n        if(parent != -1)\n            dist[current] = dist[parent] + 1;\n        else\n            dist[current] = 0;\n        for(int neighbour : edges[current]){\n            if(neighbour != parent){\n                dfs(neighbour, edges, current, dist);\n            }\n        }\n    }\n    \n    vector<int> getDistanceFromDiameter(int n, vector<vector<int>> &edges) {\n        int x = 0;\n        int dia = 0;\n        vector<int> distX(n, 0);\n        dfs(x, edges, -1, distX);\n        int y = 0;\n        for(int i = 0; i < n; i++){\n            if(distX[i] > distX[y])\n                y = i;\n        }\n        vector<int> distY(n, 0);\n        dfs(y, edges, -1, distY);\n        int z = 0;\n        for(int i = 0; i < n; i++){\n            if(distY[i] > distY[z])\n                z = i;\n        }\n        vector<int> distZ(n, 0);\n        dfs(z, edges, -1, distZ);\n        \n        vector<int> dist(n, 0);\n        for(int i = 0; i < n; i++) {\n            dist[i] = max(distY[i], distZ[i]);\n        }\n        return dist;\n    }\n    \npublic:\n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n        int n = edges1.size() + 1, m = edges2.size() + 1;\n        vector<vector<int>> adj1(n), adj2(m);\n        for(auto &it : edges1) {\n            int u = it[0], v = it[1];\n            adj1[u].push_back(v);\n            adj1[v].push_back(u);\n        }\n        for(auto &it : edges2) {\n            int u = it[0], v = it[1];\n            adj2[u].push_back(v);\n            adj2[v].push_back(u);\n        }\n        vector<int> dist1 = getDistanceFromDiameter(n, adj1);\n        vector<int> dist2 = getDistanceFromDiameter(m, adj2);\n        int dia2 = 0;\n        for(int i = 0; i < m; i++) dia2 = max(dia2, dist2[i]);\n        int minlen = (dia2 + 1) / 2;\n        \n        int dia1 = 0;\n        for(int i = 0; i < n; i++) dia1 = max(dia1, dist1[i]);\n        \n        int res = max(dia1, dia2);\n        int x = 1e9;\n        \n        \n        for(int i = 0; i < n; i++) {\n            // cout << dist1[i] << endl;\n            x = min({x, 1 + dist1[i] + minlen});\n        }\n        return max(res, x);\n    }\n};",
    "submit_ts": "1719719530",
    "subm_id": "1304444200"
}