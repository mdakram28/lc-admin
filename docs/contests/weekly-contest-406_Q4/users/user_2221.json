{
    "username": "ycx02",
    "submission": "class Solution {\npublic:\n    long long minimumCost(int m, int n, vector<int>& horizontalCut, vector<int>& verticalCut) {\n        int horipart = 1, verpart = 1;\n        long long cost = 0;\n        priority_queue<int> hori; //3 1\n        priority_queue<int> ver; // 5\n        for(int i = 0; i < m - 1; ++i){\n            hori.push(horizontalCut[i]);\n        }\n        for(int j = 0; j < n - 1; ++j){\n            ver.push(verticalCut[j]);\n        }\n        while(!hori.empty() || !ver.empty()){\n            int h = -1, v = -1;\n            long long cur_cost;\n            if(!hori.empty()){\n                h = hori.top(); //3 - 3\n            }\n            if(!ver.empty()){\n                v = ver.top(); //5 - (-1)\n            }\n            if(h > v){ // 3 * 2 > \u8d1f\u6570\n                hori.pop();\n                cur_cost = h * verpart; //\n                horipart += 1;\n            }else if(h < v){\n                ver.pop();\n                cur_cost = v * horipart; //5\n                verpart += 1; // 2\n            }\n            else{\n                if(h * verpart > v * horipart){\n                    hori.pop();\n                    cur_cost = h * verpart;\n                    horipart += 1;\n                }else{\n                    ver.pop();\n                    cur_cost = v * horipart;\n                    verpart += 1;\n                }\n            }\n            cost += cur_cost;\n        }\n        return cost;\n    }\n};",
    "submit_ts": "1720926407",
    "subm_id": "1320285361"
}