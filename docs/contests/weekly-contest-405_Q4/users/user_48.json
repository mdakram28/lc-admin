{
    "username": "lickcock",
    "submission": "#include <bits/stdc++.h> \n\n#define DEBUG_ON\n#define TERRORIST\n\n#ifdef TERRORIST\nusing namespace std;\n#define int64_t wadwafesfesfes21321300242142104210321\nusing int64_t = long long;\nusing pii = pair<int,int>;\nusing pil = pair<int,int64_t>;\nusing pli = pair<int64_t,int>;\nusing pll = pair<int64_t,int64_t>;\n#define PI 3.14159265358979323846\n#define umap unordered_map\n#define uset unordered_set\n#define all(x) x.begin(), x.end()\n#define allr(x) x.rbegin(), x.rend()\n#define emp_back emplace_back\n#define bitcount(x) __builtin_popcount((x))\n#define mbin(val, cap) bitset<64>(val).to_string().substr(64 - cap)\n#ifdef DEBUG_ON\n    #define print(x) cout << \"[ \" << #x << \" ]: \" << x << \"\\n\";\n    #define e_ cout << \"\\n\";\n#else\n    #define print(x)\n    #define e_\n#endif\ntemplate<typename F, typename S> ostream& operator<<(ostream &cout, pair<F, S> const &p) { return cout << \"(\" << p.first << \", \" << p.second << \")\"; }\ntemplate<typename T> ostream& operator<<(ostream &cout, vector<T> const &v) {\n    cout << \"[\"; for(int i = 0; i < v.size(); i++) {if (i) cout << \", \"; cout << v[i];} return cout << \"]\";\n}\ntemplate <typename K, typename V> ostream& operator<<(ostream& cout, const map<K, V>& omp) {\n    for(auto& [k, v] : omp){ cout << \"(\" << k << \": \" << v << \")\"; if(&v != &omp.rbegin()->second) cout << \", \";} return cout;\n}\ntemplate<typename T> ostream& operator << (ostream& cout, const set<T>& ost) {\n    cout << \"{\";  for(auto& v : ost){ cout << v; if(v != *ost.rbegin()) cout << \", \"; } return cout << \"}\";\n}\ntemplate<typename T, typename Cmp = less<T>>\noptional<vector<T>> get_unique(vector<T>& who, bool in_place = true, Cmp compare = Cmp()){\n    if(in_place){ sort(all(who), compare); who.erase(unique(all(who)), who.end()); return nullopt;}\n    vector<T> ret = who; sort(all(ret), compare); ret.erase(unique(all(ret)), ret.end()); return ret;\n}\nmt19937_64 _GEN(chrono::high_resolution_clock::now().time_since_epoch().count());\ntemplate <typename T>\nT mrand(T begin, T end) {\n    if constexpr (is_integral<T>::value){ uniform_int_distribution<T> _UNI_DIST(begin, end); return _UNI_DIST(_GEN); } \n    else if constexpr (is_floating_point<T>::value) { uniform_real_distribution<T> _UNI_DIST(begin, end); return _UNI_DIST(_GEN); }\n}\nint fastIO = []{ ios_base::sync_with_stdio(false); cin.tie(NULL); return 0; }();\n//down, right, up, left, upleft, downright, upright, downleft, stay\nconstexpr int dx[9] = {0, 1, 0, -1, -1, 1, 1, -1, 0};\nconstexpr int dy[9] = {1, 0, -1, 0, -1, 1, -1, 1, 0};\n#endif\n\nclass Solution {\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        const int64_t INF = 1LL << 40;\n        struct Trie {\n            Trie* kids[26] = {nullptr};\n            int64_t pay = INF;\n        };\n        Trie* root = new Trie;\n\n        for(int i = 0; i < words.size(); i++){\n            string& s = words[i];\n            Trie* cur = root;\n            for(auto& c : s){\n                int x = c - 'a';\n                if(!cur->kids[x])\n                    cur->kids[x] = new Trie;\n                cur = cur->kids[x];\n            }\n\n            cur->pay = min(cur->pay, (int64_t)costs[i]);\n        }\n\n        const int n = target.size();\n        vector<int64_t> dp(n, -1);\n        auto dfs = [&](int at, auto&& dfs) -> int64_t {\n            if(at == n) return 0;\n            if(dp[at] != -1) return dp[at];\n\n            int64_t best = INF;\n            Trie* cur = root;\n            for(int i = at; i < n; i++){\n                int x = target[i] - 'a';\n                if(!cur->kids[x]) break;\n                cur = cur->kids[x];\n                if(cur->pay != INF)\n                    best = min(best, dfs(i + 1, dfs) + cur->pay);\n            }\n\n            return dp[at] = best;\n        };\n\n        int64_t best = dfs(0, dfs);\n        return (best != INF) ? best : -1;\n    }\n};\n\n// #define MAIN_ACTIVE\n#ifdef MAIN_ACTIVE\n\nvoid solve() {\n\n}\n\nint main() {\n    int test_case;\n    cin >> test_case;\n    while(test_case--)\n        solve();\n\n    return EXIT_SUCCESS;\n}\n#endif",
    "submit_ts": "1720321000",
    "subm_id": "1312310666"
}