{
    "username": "Tyaggs",
    "submission": "class Solution {\n    public int maximumLength(int[] nums, int k) {\n        int n = nums.length;\n        int[][] dp = new int[n][k + 1];\n        int maxLength = 1;\n        int[] maxSumAtK = new int[k + 1];\n        Map<Integer, Integer>[] lastIndexAtK = new HashMap[k + 1];\n        for (int i = 0; i <= k; i++) {\n            lastIndexAtK[i] = new HashMap<>();\n        }\n        for (int i = 0; i < nums.length; i++) {\n            Arrays.fill(dp[i], 1);\n            for (int sum = 0; sum <= k; sum++) {\n                for (int prevSum = 0; prevSum < sum; prevSum++) {\n                    dp[i][sum] = Math.max(dp[i][sum], 1 + maxSumAtK[prevSum]);\n                }\n                if (lastIndexAtK[sum].containsKey(nums[i])) {\n                    dp[i][sum] = Math.max(dp[i][sum], 1 + lastIndexAtK[sum].get(nums[i]));\n                }\n                maxLength = Math.max(maxLength, dp[i][sum]);\n            }\n            for (int sum = 0; sum <= k; sum++) {\n                maxSumAtK[sum] = Math.max(maxSumAtK[sum], dp[i][sum]);\n                lastIndexAtK[sum].put(nums[i], Math.max(lastIndexAtK[sum].getOrDefault(nums[i], 0), dp[i][sum]));\n            }\n        }\n        return maxLength;\n    }\n}",
    "submit_ts": 1717862353.0
}