{
    "username": "hicoder",
    "submission": "from collections import deque\nfrom typing import List\n\nclass Solution:\n    def minimumDiameterAfterMerge(self, edges1: List[List[int]], edges2: List[List[int]]) -> int:\n        def bfs(n, graph, start):\n            dist = [-1] * n\n            dist[start] = 0\n            q = deque([start])\n            farthest_node = start\n            max_dist = 0\n            \n            while q:\n                node = q.popleft()\n                for neighbor in graph[node]:\n                    if dist[neighbor] == -1:\n                        dist[neighbor] = dist[node] + 1\n                        q.append(neighbor)\n                        if dist[neighbor] > max_dist:\n                            max_dist = dist[neighbor]\n                            farthest_node = neighbor\n            \n            return farthest_node, dist, max_dist\n        \n        def find_tree_diameter_and_center(n, graph):\n            farthest_node, _, _ = bfs(n, graph, 0)\n            other_farthest_node, dist, _ = bfs(n, graph, farthest_node)\n            diameter = dist[other_farthest_node]\n            \n            path = []\n            current = other_farthest_node\n            while current != farthest_node:\n                path.append(current)\n                for neighbor in graph[current]:\n                    if dist[neighbor] == dist[current] - 1:\n                        current = neighbor\n                        break\n            path.append(farthest_node)\n            path.reverse()\n            \n            center = path[diameter // 2]\n            \n            return diameter, center, dist\n        \n        n = len(edges1) + 1\n        g1 = [[] for _ in range(n)]\n        for u, v in edges1:\n            g1[u].append(v)\n            g1[v].append(u)\n        \n        diameter1, center1, dist1 = find_tree_diameter_and_center(n, g1)\n        _, _, max_dist_from_center1 = bfs(n, g1, center1)\n        \n        m = len(edges2) + 1\n        g2 = [[] for _ in range(m)]\n        for u, v in edges2:\n            g2[u].append(v)\n            g2[v].append(u)\n        \n        diameter2, center2, dist2 = find_tree_diameter_and_center(m, g2)\n        _, _, max_dist_from_center2 = bfs(m, g2, center2)\n        \n        resulting_diameter = max(diameter1, diameter2, max_dist_from_center1 + max_dist_from_center2 + 1)\n        \n        return resulting_diameter\n\n\n",
    "submit_ts": "1719719285",
    "subm_id": "1304438235"
}