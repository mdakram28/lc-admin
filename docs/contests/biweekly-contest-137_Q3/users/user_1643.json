{
    "username": "madflash",
    "submission": "#include <bits/stdc++.h>\n\n#define FOR(i, l, r) for (int i = l; i < r; ++i)\n#define FORR(i, r, l) for (int i = r; i >= l; --i)\n#define FORI(n) FOR(i, 0, n)\n#define FORJ(n) FOR(j, 0, n)\n#define FORK(n) FOR(k, 0, n)\n#define loop(n) FOR(_, 0, n)\n#define all(x) x.begin(), x.end()\n#define sz(x) x.size()\n#define pb push_back\n#define yes(x) ((x) ? \"Yes\" : \"No\")\n#define endl '\\n'\nusing namespace std;\ntemplate <typename T>\nusing V = vector<T>;\ntemplate <typename T1, typename T2>\nusing hashmap = unordered_map<T1, T2>;\ntemplate <typename T>\nusing hashset = unordered_set<T>;\nusing ll = long long;\nconst int MOD = 1e9 + 7;\nconst int INF = numeric_limits<int>::max();\nconst ll INFLL = numeric_limits<ll>::max();\nvoid fast_io() {\n    ios_base::sync_with_stdio(false);\n    cin.tie(0);\n}\n\n// ~ basic numeric types\nusing u8 = uint8_t;\nusing u16 = uint16_t;\nusing u32 = uint32_t;\nusing u64 = uint64_t;\nusing uint = uint32_t;\nusing i8 = int8_t;\nusing i16 = int16_t;\nusing i32 = int32_t;\nusing i64 = int64_t;\nusing f32 = float;\nusing f64 = double;\n\ntemplate <typename T>\ninline bool GetBit(const T &n, int at) {\n    return (n >> at) & 1;\n}\n\ntemplate <typename T>\ninline void FlipBit(T &n, int at) {\n    n ^= (static_cast<T>(1) << at);\n}\n\n// ~ graph types\n\ntemplate <const u8 is_weighted = 0, const u8 is_undirected = 0>\nstruct graph_base;\n\nusing tree = graph_base<0, 1>;\n\ntemplate <const u8 is_undirected = 0>\nusing graphwt = graph_base<1, is_undirected>;\n\ntemplate <const u8 is_undirected = 0>\nusing graph = graph_base<0, is_undirected>;\n\ntemplate <const u8 is_undirected>\nstruct graph_base<0, is_undirected> {\n    int n;\n    V<V<int>> adj;\n    graph_base(int n)\n        : n(n), adj(n) {}\n    inline int size() const { return n; }\n    inline void ae(int u, int v) {\n        adj[u].pb(v);\n        if (is_undirected)\n            adj[v].pb(u);\n    }\n    inline const V<int> &operator[](int u) const { return adj[u]; }\n};\n\ntemplate <const u8 is_undirected>\nstruct graph_base<1, is_undirected> {\n    int n;\n    V<V<pair<int, ll>>> adj;\n    graph_base(int n)\n        : n(n),  adj(n) {}\n    inline int size() const { return n; }\n    inline void ae(int u, int v) { ae(u, v, 1); }\n    inline void ae(int u, int v, int w) {\n        adj[u].pb({v, w});\n        if (is_undirected)\n            adj[v].pb({u, w});\n    }\n    inline const V<pair<int, ll>> &operator[](int u) const { return adj[u]; }\n};\n\nvoid __print(int x) { cout << x; }\nvoid __print(long x) { cout << x; }\nvoid __print(long long x) { cout << x; }\nvoid __print(unsigned x) { cout << x; }\nvoid __print(unsigned long x) { cout << x; }\nvoid __print(unsigned long long x) { cout << x; }\nvoid __print(float x) { cout << x; }\nvoid __print(double x) { cout << x; }\nvoid __print(long double x) { cout << x; }\nvoid __print(char x) { cout << '\\'' << x << '\\''; }\nvoid __print(const char *x) { cout << '\\\"' << x << '\\\"'; }\nvoid __print(const string &x) { cout << '\\\"' << x << '\\\"'; }\nvoid __print(bool x) { cout << (x ? \"true\" : \"false\"); }\ntemplate <size_t N>\nvoid __print(const bitset<N> &x) {\n    cout << x;\n};\n \ntemplate <typename T>\nvoid __print(const T &x);\ntemplate <typename T, typename V>\nvoid __print(const pair<T, V> &x);\ntemplate <typename T>\nvoid __print(const T &x);\ntemplate <typename T, typename... V>\nvoid _print(T t, V... v);\n \ntemplate <typename T, typename V>\nvoid __print(const pair<T, V> &x) {\n    cout << '{';\n    __print(x.first);\n    cout << \", \";\n    __print(x.second);\n    cout << '}';\n}\ntemplate <typename T>\nvoid __print(const T &x) {\n    int f = 0;\n    cout << '{';\n    for (auto &i : x) cout << (f++ ? \", \" : \"\"), __print(i);\n    cout << \"}\";\n}\nvoid _print() { cout << \"]\\n\"; }\ntemplate <typename T, typename... V>\nvoid _print(T t, V... v) {\n    __print(t);\n    if (sizeof...(v))\n        cout << \", \";\n    _print(v...);\n}\n \n#define dbg(x...)                                                              \\\n    cout << __func__ << \":\" << __LINE__ - 9 << \" [\" << #x << \"] = [\";          \\\n    _print(x);                                                                 \\\n    cout << endl;\n\nV<V<pair<int, int>>> a(101, V<pair<int, int>>(3));\n\nclass Solution {\npublic:\n    long long maximumValueSum(vector<vector<int>>& board) {\n        ll ret = -INFLL;\n        int n = sz(board);\n        int m = sz(board[0]);\n        \n        FOR(j, 0, m) {\n            V<pair<int, int>> col;\n            FORI(n) {\n                col.pb({board[i][j], i});\n            }\n            sort(all(col));\n            reverse(all(col));\n            a[j][0] = col[0];\n            a[j][1] = col[1];\n            a[j][2] = col[2];\n        }\n        \n        \n        auto best = [&](V<pair<int, int>> &p, V<pair<int, int>> &q, V<pair<int, int>> &r) {\n            ll v = -INFLL;\n            FOR(i, 0, 3) {\n                FOR(j, 0, 3) {\n                    FOR(k, 0, 3) {\n                        if (p[i].second != q[j].second && q[j].second != r[k].second && p[i].second != r[k].second) {\n                            v = max(v, 1LL * p[i].first + q[j].first + r[k].first);       \n                        }\n                    }\n                }\n            }\n            return v;\n        };\n        \n        FOR(i, 0, m) {\n            FOR(j, 0, m) {\n                if (i == j) continue;\n                FOR(k, 0, m) {\n                    if (i != j && j != k && i != k) {                    \n                        ret = max(ret, best(a[i], a[j], a[k]));\n                    }\n                }\n            }\n        }\n        \n        return ret;\n    }\n};",
    "submit_ts": "1723909863",
    "subm_id": "1359208552"
}