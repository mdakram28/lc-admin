{
    "username": "BreadMuMu",
    "submission": "class Solution:\n    def waysToReachStair(self, k: int) -> int:\n        @lru_cache\n        def dfs(t, i, j):\n            if i > k+1: return 0\n            if i == k+1 and t == 1: return 0\n\n            res = 0\n            if i == k:\n                res += 1\n\n            res += dfs(2, i+pow(2, j), j+1)\n            if t == 2 and i >= 1:\n                res += dfs(1, i-1, j)\n            return res\n\n        answer = 0\n        closest, jump = self.findClosest(k)\n        return dfs(2, 1, 0)\n        # print(closest, jump)\n        # for j in range(jump+1):\n        #     answer += dfs(2, closest-j, jump)\n        #     if j:\n        #         answer += dfs(1, closest-j, jump)\n        # return answer\n\n    \n    def findClosest(self, k):\n        start = 1\n        jump = 0\n        while start < k:\n            start = start + pow(2, jump)\n            jump += 1\n\n        if jump:\n            start -= pow(2, jump-1)\n            jump -= 1\n        return start, jump",
    "submit_ts": "1716090030",
    "subm_id": "1261857447"
}