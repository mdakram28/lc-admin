{
    "username": "death_of_might",
    "submission": "\n\nclass SegmentTree {\npublic:\n    SegmentTree(const vector<int>& nums) : n(nums.size()), data(nums) {\n        tree.resize(4 * n);\n        build(0, 0, n - 1);\n    }\n\n    int query(int left, int right) {\n        if (left > right) return 0;\n        return query(0, 0, n - 1, left, right);\n    }\n\n    void update(int index, int value) {\n        data[index] = value;\n        // Update the current element and its neighbors\n        update(0, 0, n - 1, index);\n        if (index > 0) update(0, 0, n - 1, index - 1);\n        if (index < n - 1) update(0, 0, n - 1, index + 1);\n    }\n\nprivate:\n    int n;\n    vector<int> data;\n    vector<int> tree;\n\n    bool isPeak(int i) {\n        if (i <= 0 || i >= n - 1) return false;\n        return data[i] > data[i - 1] && data[i] > data[i + 1];\n    }\n\n    void build(int node, int start, int end) {\n        if (start == end) {\n            tree[node] = isPeak(start) ? 1 : 0;\n        } else {\n            int mid = (start + end) / 2;\n            build(2 * node + 1, start, mid);\n            build(2 * node + 2, mid + 1, end);\n            tree[node] = tree[2 * node + 1] + tree[2 * node + 2];\n        }\n    }\n\n    int query(int node, int start, int end, int left, int right) {\n        if (right < start || end < left) {\n            return 0;\n        }\n        if (left <= start && end <= right) {\n            return tree[node];\n        }\n        int mid = (start + end) / 2;\n        int p1 = query(2 * node + 1, start, mid, left, right);\n        int p2 = query(2 * node + 2, mid + 1, end, left, right);\n        return p1 + p2;\n    }\n\n    void update(int node, int start, int end, int idx) {\n        if (start == end) {\n            tree[node] = isPeak(start) ? 1 : 0;\n        } else {\n            int mid = (start + end) / 2;\n            if (start <= idx && idx <= mid) {\n                update(2 * node + 1, start, mid, idx);\n            } else {\n                update(2 * node + 2, mid + 1, end, idx);\n            }\n            tree[node] = tree[2 * node + 1] + tree[2 * node + 2];\n        }\n    }\n};\n\nclass Solution {\npublic:\n    vector<int> countOfPeaks(vector<int>& nums, vector<vector<int>>& queries) {\n        SegmentTree segTree(nums);\n        vector<int> result;\n\n        for (const auto& query : queries) {\n            int queryType = query[0];\n            if (queryType == 1) {\n                int left = query[1];\n                int right = query[2];\n                result.push_back(segTree.query(left + 1, right - 1));\n            } else if (queryType == 2) {\n                int index = query[1];\n                int value = query[2];\n                segTree.update(index, value);\n            }\n        }\n\n        return result;\n    }\n};\n",
    "submit_ts": "1718506878",
    "subm_id": "1289633893"
}