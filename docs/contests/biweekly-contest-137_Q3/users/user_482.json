{
    "username": "Nando",
    "submission": "class Solution:\n    def maximumValueSum(self, board: List[List[int]]) -> int:\n\n        def check(t):\n            l = len(t)\n            if l == 1:\n                return n_occ[(t[0][0], t[0][1])] < 2\n            if l == 2:\n                for c in seen:\n                    if c[:l] == t:\n                        return False\n                return True\n            return True\n\n        \n\n        hq = []\n        vals = []\n        cols, rows = len(board[0]), len(board)\n        for r in range(rows):\n            for c in range(cols):\n                heappush(hq, (-board[r][c], r, c))\n                vals.append((board[r][c], r, c))\n\n        three_max = sorted(vals)[-3:]\n\n        sol = -float(\"inf\")\n\n        seen = []\n        n_tested = defaultdict(int)\n        n_occ = defaultdict(int)\n        for _ in range(8):\n            res = 0\n            hq1 = hq.copy()\n            \n            rooks_rem = 3\n            cols_used = set()\n            rows_used = set()\n\n            cur = []\n            pos = True\n            while rooks_rem > 0:\n                if len(hq1) == 0:\n                    pos = False\n                    break\n                val, r, c = heappop(hq1)\n                if r not in rows_used and c not in cols_used and check(cur + [(r, c)]):\n                    \n                    res -= val\n                    rows_used.add(r)\n                    cols_used.add(c)\n                    rooks_rem -= 1\n                    cur.append((r, c))\n            seen.append(cur)\n            n_occ[cur[0]] += 1\n\n            #print(seen, res)\n            if pos:\n                sol = max(sol, res)\n\n\n        print(seen)\n\n        return sol\n        \n        \n        \"\"\"\n        res = 0\n        for val, r, c in three_max:\n            cols_used = {c}\n            rows_used = {r}\n            hq1 = hq.copy()\n            rooks_rem = 2\n            cur_res = val\n            while True:\n                neg_val, rr, cc = heappop(hq1)\n                if rr not in rows_used and cc not in cols_used:\n\n                    cur_res_inner = -neg_val\n\n\n        return 0\n\n\n        \n        rooks_rem = 3\n        res = 0\n        cols_used = set()\n        rows_used = set()\n\n        while rooks_rem > 0:\n            val, r, c = heappop(hq)\n            if r not in rows_used and c not in cols_used:\n                res -= val\n                rows_used.add(r)\n                cols_used.add(c)\n                rooks_rem -= 1\n\n        return res\n\n        \"\"\"",
    "submit_ts": "1723909866",
    "subm_id": "1359208673"
}