{
    "username": "WORTH_IT",
    "submission": "// import java.util.*;\n// import java.util.function.*;\n\n// public class Main {\n//     public static void main(String[] args) throws Exception {\n//         String[] w = {\"abdef\", \"abc\", \"d\", \"def\", \"ef\"};\n//         int[] c = {100, 1, 1, 10, 5};\n// //        String[] w = {\"wvgafw\", \"w\"};\n// //        int[] c = {1, 2};\n//         System.out.println(new Solution().minimumCost(\"abcdef\", w, c));\n//     }\n// }\n\nclass Solution {\n    final int INF = (int) 1e9 + 10;\n\n    public int minimumCost(String target, String[] words, int[] costs) {\n        int n = target.length(), m = words.length;\n\n        Trie trie = new Trie();\n        for (int i = 0; i < m; i++)\n            trie.insert(words[i], costs[i]);\n\n        int[] dp = new int[n];\n        Arrays.fill(dp, -1);\n        Function<Integer, Integer> solve = new Function<Integer, Integer>() {\n            @Override\n            public Integer apply(Integer i) {\n                if (i == n)\n                    return 0;\n\n                if (dp[i] != -1)\n                    return dp[i];\n\n                Trie.Node curr = trie.root;\n                int ans = INF;\n                for (int j = i; j < n; j++) {\n                    int c = target.charAt(j) - 'a';\n                    if (curr.children[c] == null)\n                        break;\n                    curr = curr.children[c];\n                    if (curr.cost != INF)\n                        ans = Math.min(ans, apply(j + 1) + curr.cost);\n                }\n                return dp[i] = ans;\n            }\n        };\n\n        int ans = solve.apply(0);\n        if (ans == INF)\n            return -1;\n        return ans;\n    }\n}\n\nclass Trie {\n    Node root;\n\n    public Trie() {\n        this.root = new Node();\n    }\n\n    void insert(String s, int cost) {\n        Node curr = root;\n        for (int i = 0; i < s.length(); i++) {\n            int c = s.charAt(i) - 'a';\n            if (curr.children[c] == null)\n                curr.children[c] = new Node();\n            curr = curr.children[c];\n        }\n        curr.cost = Math.min(curr.cost, cost);\n    }\n\n    static class Node {\n        int cost;\n        Node[] children;\n\n        public Node() {\n            this.cost = (int) 1e9 + 10;\n            this.children = new Node[26];\n        }\n    }\n}",
    "submit_ts": "1720323456",
    "subm_id": "1312376019"
}