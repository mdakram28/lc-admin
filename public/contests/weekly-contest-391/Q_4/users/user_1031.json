{
    "username": "RahulAhuja2901",
    "submission": "class Solution {\n    public int minimumDistance(int[][] point) {\n        int n = point.length;\n        Pair<Integer, Integer>[] A = new Pair[n];\n        for (int i = 0; i < n; i++) {\n            A[i] = new Pair<>(point[i][0], point[i][1]);\n        }\n        int[][] pre = new int[n][4];\n        int[][] suf = new int[n][4];\n        int minsum, maxsum, mindiff, maxdiff;\n        minsum = maxsum = A[n - 1].getKey() + A[n - 1].getValue();\n        mindiff = maxdiff = A[n - 1].getKey() - A[n - 1].getValue();\n        suf[n - 1][0] = maxsum;\n        suf[n - 1][1] = minsum;\n        suf[n - 1][2] = maxdiff;\n        suf[n - 1][3] = mindiff;\n        for (int i = n - 2; i >= 0; i--) {\n            int sum = A[i].getKey() + A[i].getValue();\n            int diff = A[i].getKey() - A[i].getValue();\n            if (sum < minsum)\n                minsum = sum;\n            else if (sum > maxsum)\n                maxsum = sum;\n            if (diff < mindiff)\n                mindiff = diff;\n            else if (diff > maxdiff)\n                maxdiff = diff;\n            suf[i][0] = maxsum;\n            suf[i][1] = minsum;\n            suf[i][2] = maxdiff;\n            suf[i][3] = mindiff;\n        }\n        minsum = maxsum = A[0].getKey() + A[0].getValue();\n        mindiff = maxdiff = A[0].getKey() - A[0].getValue();\n        pre[0][0] = maxsum;\n        pre[0][1] = minsum;\n        pre[0][2] = maxdiff;\n        pre[0][3] = mindiff;\n        for (int i = 1; i < n; i++) {\n            int sum = A[i].getKey() + A[i].getValue();\n            int diff = A[i].getKey() - A[i].getValue();\n            if (sum < minsum)\n                minsum = sum;\n            else if (sum > maxsum)\n                maxsum = sum;\n            if (diff < mindiff)\n                mindiff = diff;\n            else if (diff > maxdiff)\n                maxdiff = diff;\n            pre[i][0] = maxsum;\n            pre[i][1] = minsum;\n            pre[i][2] = maxdiff;\n            pre[i][3] = mindiff;\n        }\n        int ans = Integer.MAX_VALUE;\n        for (int i = 0; i < n; i++) {\n            if (i == (n-1)) {\n                int maximum = Math.max(pre[n - 2][0] - pre[n - 2][1], pre[n - 2][2] - pre[n - 2][3]);\n                ans = Math.min(ans, maximum);\n            } else if (i == 0) {\n                int maximum = Math.max(suf[1][0] - suf[1][1], suf[1][2] - suf[1][3]);\n                ans = Math.min(ans, maximum);\n            } else {\n                int mxs = Math.max(pre[i - 1][0], suf[i + 1][0]);\n                int mns = Math.min(pre[i - 1][1], suf[i + 1][1]);\n                int mxd = Math.max(pre[i - 1][2], suf[i + 1][2]);\n                int mnd = Math.min(pre[i - 1][3], suf[i + 1][3]);\n                ans = Math.min(ans, Math.max(mxs - mns, mxd - mnd));\n            }\n        }\n        return ans;\n    }\n}"
}