{
    "username": "bhupendra1404",
    "submission": "class Solution {\n    private int bfs(List<List<Integer>> graph, int start, int target1, int target2, int n) {\n        Queue<Integer> queue = new LinkedList<>();\n        boolean[] visited = new boolean[n + 4];\n        queue.offer(start);\n        visited[start] = true;\n\n        while (!queue.isEmpty()) {\n            int u = queue.poll();\n            for (int v : graph.get(u)) {\n                if (!visited[v]) {\n                    queue.offer(v);\n                    visited[v] = true;\n                }\n            }\n        }\n\n        return visited[target1] || visited[target2] ? 1 : 0;\n    }\n    public boolean canReachCorner(int X, int Y, int[][] circles) {\n        int nc = circles.length;\n        List<int[]> c = new ArrayList<>(nc);\n        List<List<Integer>> g = new ArrayList<>(nc + 4);\n\n        for (int i = 0; i < nc + 4; i++) {\n            g.add(new ArrayList<>());\n        }\n\n        for (int[] circle : circles) {\n            c.add(new int[]{circle[0], circle[1], circle[2]});\n        }\n\n        for (int i = 0; i < nc; i++) {\n            int cx = c.get(i)[0], cy = c.get(i)[1], r = c.get(i)[2];\n\n            if (cx <= r) {\n                g.get(nc).add(i);\n                g.get(i).add(nc);\n            }\n            if (X - cx <= r) {\n                g.get(nc + 2).add(i);\n                g.get(i).add(nc + 2);\n            }\n            if (cy <= r) {\n                g.get(nc + 1).add(i);\n                g.get(i).add(nc + 1);\n            }\n            if (Y - cy <= r) {\n                g.get(nc + 3).add(i);\n                g.get(i).add(nc + 3);\n            }\n\n            for (int j = i + 1; j < nc; j++) {\n                int cx2 = c.get(j)[0], cy2 = c.get(j)[1], r2 = c.get(j)[2];\n                double d = Math.sqrt(Math.pow(cx - cx2, 2) + Math.pow(cy - cy2, 2));\n                if (r + r2 >= d) {\n                    g.get(i).add(j);\n                    g.get(j).add(i);\n                }\n            }\n        }\n\n        return bfs(g, nc, nc + 1, nc + 2, nc + 4) == 0 && bfs(g, nc + 3, nc + 2, nc + 1, nc + 4) == 0;\n    }\n}",
    "submit_ts": "1722138464",
    "subm_id": "1335791432"
}