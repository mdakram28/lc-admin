{
    "username": "Ani_S",
    "submission": "class Solution {\n    public int minimumSum(int[][] grid) {\n        int n = grid.length;\n        int m = grid[0].length;\n        \n        int row[] = new int[m];\n        int col[] = new int[n];\n        \n        for(int i = 0; i < grid.length; i++) {\n            for(int j = 0; j < grid[0].length; j++) {\n                row[j] += grid[i][j];\n                col[i] += grid[i][j];\n            }\n        }\n        \n        int ans = Integer.MAX_VALUE;\n        \n        for(int i = 0; i < 3; i++) {\n            if(i == 0) {\n                for(int first = 1; first < n; first++) {\n                    for(int second = first + 1; second < n; second++) {\n                        ans = Math.min(ans, findArea(grid, 0, 0, first, m) + findArea(grid, first, 0, second, m) + findArea(grid, second, 0, n, m));\n                    }\n                }\n                \n                // System.out.println(\"Case 1 : \" + ans);\n            }\n            else if(i == 1) {\n                for(int r = 1; r < n; r++) {\n                    for(int c = 1; c < m; c++) {\n                        ans = Math.min(ans, findArea(grid, 0, 0, r, m) + findArea(grid, r, 0, n, c) + findArea(grid, r, c, n, m));\n                        ans = Math.min(ans, findArea(grid, 0, 0, n, c) + findArea(grid, 0, c, r, m) + findArea(grid, r, c, n, m));\n                        ans = Math.min(ans, findArea(grid, 0, 0, r, c) + findArea(grid, r, 0, n, c) + findArea(grid, 0, c, n, m));\n                        ans = Math.min(ans, findArea(grid, 0, 0, r, c) + findArea(grid, 0, c, r, m) + findArea(grid, r, 0, n, m));\n                    }\n                }\n                \n                // System.out.println(\"Case 2 : \" + ans);\n            } \n            else {\n                for(int first = 1; first < m; first++) {\n                    for(int second = first + 1; second < m; second++) {\n                        ans = Math.min(ans, findArea(grid, 0, 0, n, first) + findArea(grid, 0, first, n, second) + findArea(grid, 0, second, n, m));\n                    }\n                }\n                \n                // System.out.println(\"Case 3 : \" + ans);\n            }\n        }\n        \n        return ans;\n    }\n    \n    private int findArea(int grid[][], int rs, int cs, int re, int ce) {\n        int n = grid.length;\n        int m = grid[0].length;\n        \n        int row[] = new int[m];\n        int col[] = new int[n];\n        \n        for(int i = rs; i < re; i++) {\n            for(int j = cs; j < ce; j++) {\n                row[j] += grid[i][j];\n                col[i] += grid[i][j];\n            }\n        }\n        \n        int frow = -1;\n        int lrow = -1;\n        \n        for(int i = 0; i < m; i++) {\n            if(row[i] > 0)\n            {\n                if(frow == -1)\n                    frow = i;\n                lrow = i;\n            }\n        }\n        \n        int fcol = -1;\n        int lcol = -1;\n        \n        for(int i = 0; i < n; i++) {\n            if(col[i] > 0)\n            {\n                if(fcol == -1)\n                    fcol = i;\n                lcol = i;\n            }\n        }\n        \n        if(frow == -1 || lrow == -1 || fcol == -1 || lcol == -1)\n            return 0;\n        \n        return (lcol - fcol + 1) * (lrow - frow + 1);\n    }\n}",
    "submit_ts": 1719114897.0
}