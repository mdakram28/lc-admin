{
    "username": "Maximus8597",
    "submission": "class Solution {\npublic:\n    class SegmentTree {\n    public:\n        vector<int> tree;\n        int n;\n        SegmentTree(vector<int>& nums) {\n            n = nums.size();\n            tree.resize(4 * n);\n            build(nums, 0, 0, n - 1);\n        }\n\n        void build(vector<int>& nums, int ind, int l, int r) {\n            if(l == r) {\n                tree[ind] = nums[l];\n                return;\n            }\n            int mid = (l + r) >> 1;\n            int lInd = 2 * ind + 1, rInd = 2 * ind + 2;\n            build(nums, lInd, l, mid);\n            build(nums, rInd, mid + 1, r);\n            tree[ind] = tree[lInd] & tree[rInd];\n        }\n\n        int rangeAnd(int l, int r) {\n            return query(0, 0, n - 1, l, r);\n        }\n\n        int query(int node, int start, int end, int l, int r) {\n            if(r < start || end < l) return INT_MAX;\n            if(start >= l && end <= r) return tree[node];\n            int mid = (start + end) >> 1;\n            int lAnd = query(2 * node + 1, start, mid, l, r);\n            int rAnd = query(2 * node + 2, mid + 1, end, l, r);\n            return lAnd & rAnd;\n        }\n    };\n\n    int minimumDifference(vector<int>& nums, int k) {\n        int n = nums.size();\n        SegmentTree sTree(nums);\n        int ans = INT_MAX;\n        for(int i = 0; i < n; i ++) {\n            int l = i, r = n - 1;\n            while(l <= r) {\n                int mid = (l + r) >> 1;\n                if(sTree.rangeAnd(i, mid) >= k) l = mid + 1;\n                else r = mid - 1;\n            }\n            ans = min(ans, min(abs(sTree.rangeAnd(i, r) - k), abs(k - sTree.rangeAnd(i, l))));\n        }\n        return ans;\n    }\n};",
    "submit_ts": "1717300058",
    "subm_id": "1274832528"
}