{
    "username": "acyytm",
    "submission": "class Solution {\n    int fp1[2];\n    int fp2[2];\npublic:\n    int max_len(vector<vector<int>>& points) {\n        int minp = 1;\n        int maxp = 1e8;\n        int p[4][2] = {\n            {minp, minp},\n            {minp, maxp},\n            {maxp, minp},\n            {maxp, maxp}\n        };\n        int max_l[4] = {0};\n        int min_l[4];\n        memset(min_l, 0x3f, sizeof(min_l));\n        auto get_len = [&](int x1, int y1, int x2, int y2) {\n            return abs(x1 - x2) + abs(y1 - y2);\n        };\n        int pmx[4][2];\n        int pmi[4][2];\n        for(int i = 0; i < points.size(); i++) {\n            for(int j = 0; j < 4; j++) {\n                auto len = get_len(points[i][0], points[i][1], p[j][0], p[j][1]);      \n                if(len > max_l[j]) {\n                    max_l[j] = len;\n                    pmx[j][0] = points[i][0];\n                    pmx[j][1] = points[i][1];\n                }\n                if(len < min_l[j]) {\n                    min_l[j] = len;\n                    pmi[j][0] = points[i][0];\n                    pmi[j][1] = points[i][1];\n                }\n            }\n        }\n        int res = 0;\n        int p1[2];\n        int p2[2];\n        for(int i = 0; i < 4; i++) {\n            if(res < max_l[i] - min_l[i]) {\n                res = max_l[i] - min_l[i];\n                p1[0] = pmx[i][0];\n                p1[1] = pmx[i][1];\n                p2[0] = pmi[i][0];\n                p2[1] = pmi[i][1];\n            }\n        }\n        fp1[0] = p1[0];\n        fp2[0] = p2[0];\n        fp1[1] = p1[1];\n        fp2[1] = p2[1];\n        return res;\n    }\n    int minimumDistance(vector<vector<int>>& points) {\n        int len = max_len(points);\n        int x1 = fp1[0], y1 = fp1[1];\n        int x2 = fp2[0], y2 = fp2[1];\n        int k1 = 0, k2 = 0;\n        for(int i = 0; i < points.size(); i++) {\n            if(points[i][0] == x1 && points[i][1] == y1) {\n                k1 = i;\n                break;\n            } \n        }\n        auto t = points;\n        t.erase(t.begin() + k1);\n        int res1 = max_len(t);\n        for(int i = 0; i < points.size(); i++) {\n            if(points[i][0] == x2 && points[i][1] == y2) {\n                k2 = i;\n                break;\n            } \n        }\n        points.erase(points.begin() + k2);\n        int res2 = max_len(points);\n        return min(res1, res2);\n    }\n};"
}