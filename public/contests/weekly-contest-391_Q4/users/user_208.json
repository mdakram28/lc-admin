{
    "username": "dganguli1997",
    "submission": "class Solution {\n    public int minimumDistance(int[][] points) {\n        int n = points.length, i;\n        TreeMap<Integer, Integer> sumMap = new TreeMap<>(), diffMap = new TreeMap<>();\n        for(i = 0; i < n; i += 1) {\n            int sum = points[i][0] + points[i][1], diff = points[i][0] - points[i][1];\n            sumMap.put(sum, sumMap.getOrDefault(sum, 0) + 1);\n            diffMap.put(diff, diffMap.getOrDefault(diff, 0) + 1);\n        }\n        int result = Integer.MAX_VALUE;\n        for(i = 0; i < n; i += 1) {\n            int sum = points[i][0] + points[i][1], diff = points[i][0] - points[i][1];\n            sumMap.put(sum, sumMap.getOrDefault(sum, 0) - 1);\n            diffMap.put(diff, diffMap.getOrDefault(diff, 0) - 1);\n            if(sumMap.get(sum) == 0)\n                sumMap.remove(sum);\n            if(diffMap.get(diff) == 0)\n                diffMap.remove(diff);\n            result = Math.min(result, Math.max(sumMap.lastKey() - sumMap.firstKey(), diffMap.lastKey() - diffMap.firstKey()));\n            sumMap.put(sum, sumMap.getOrDefault(sum, 0) + 1);\n            diffMap.put(diff, diffMap.getOrDefault(diff, 0) + 1);\n        }\n        return result;\n    }\n}"
}