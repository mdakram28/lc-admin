{
    "username": "\u694a\u5b97\u8afa",
    "submission": "using i64 = long long;\n\nclass Solution {\npublic:\n    vector<long long> countKConstraintSubstrings(string s, int k, vector<vector<int>>& Q) {\n        const int n = s.size();\n        int zeros = 0, ones = 0;\n        map<int, int> f1, f2;\n        f1[0] = 0;\n        f2[0] = 0;\n        \n        vector<int> vec(n + 1);\n        for (int i = 0; i < n; ++i) {\n            int x = s[i] - '0';\n            zeros += x == 0;\n            ones += x;\n            vec[i + 1] = min(f1.lower_bound(zeros - k)->second, f2.lower_bound(ones - k)->second) + 1;\n            f1[zeros] = f1.count(zeros) ? f1[zeros] : i + 1;\n            f2[ones] = f2.count(ones) ? f2[ones] : i + 1;\n        }\n        \n        vector<i64> pre(n + 2);\n        for (int i = 0; i < n + 1; ++i) {\n            pre[i + 1] = pre[i] + (i - vec[i] + 1);\n        }\n        \n        vector<i64> ans(Q.size());\n        for (int i = 0; i < int(Q.size()); ++i) {\n            int l = Q[i][0];\n            int r = Q[i][1];\n            l++, r++;\n            \n            int L = lower_bound(vec.begin() + l, vec.begin() + r + 1, l) - vec.begin();\n            ans[i] += pre[r + 1] - pre[L];\n            ans[i] += 1LL * (l + L - 1) * (L - l) / 2 - 1LL * (L - l) * l + (L - l);\n        }\n        return ans;\n    }\n};",
    "submit_ts": "1723952740",
    "subm_id": "1359803532"
}