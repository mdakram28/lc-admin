{
    "username": "VILLANOVA_ECON",
    "submission": "class Solution:\n    def maximumValueSum(self, board1: List[List[int]]) -> int:\n        if len(board1) > len(board1[0]):\n            board1 = list([list(row) for row in zip(*board1)])\n        \n        res = []\n        board = []\n        for row in board1:\n            new_arr = sorted(list(enumerate(row)),key=lambda x:x[1])\n            temp_arr = []\n            for _ in range(3):\n                if new_arr:\n                    temp_arr.append(new_arr.pop())\n                    #res.append(temp_arr[-1])\n            board.append(list(temp_arr))\n        \n        res = []\n        for i in range(len(board1)):\n            for j in range(len(board1[i])):\n                res.append([board1[i][j],i,j])\n        \n        res.sort()\n                \n        \n        starting_points = []\n        \n        for _ in range(5):\n            if res:\n                starting_points.append(res.pop())\n            \n        \n        \n        @lru_cache(None)\n        def recur_fn(i,used,start_row):\n            if i >= len(board):\n                if len(used) == 3:\n                    return 0\n                else:\n                    return -math.inf\n            elif i == start_row:\n                return recur_fn(i+1,used,start_row)\n            elif len(used) == 3:\n                return 0\n            else:\n                res = -math.inf\n                res = max(res,recur_fn(i+1,used,start_row))\n                for j,y in board[i]:\n                    if j not in used:\n                        new_used = tuple(sorted(used  + (j,)))\n                        res = max(res,y + recur_fn(i+1,new_used,start_row))\n                return res\n        #print(starting_points)\n        res = -math.inf\n        for value,row,col in starting_points:\n            res = max(res,value + recur_fn(0,(col,),row))\n        # for i in range(len(board)):\n        #     for j in range(len(board[i])):\n        #         res = max(res,board[i][j][1] + recur_fn(0,(j,),i))\n        recur_fn.cache_clear()\n        return res",
    "submit_ts": "1723907085",
    "subm_id": "1359089134"
}