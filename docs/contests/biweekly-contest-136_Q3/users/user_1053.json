{
    "username": "goodatnames",
    "submission": "class Solution\n{\npublic:\n    int minFlips(vector<vector<int>> &grid)\n    {\n        int n = grid.size(), m = grid[0].size();\n        int cnt[5] = {0};\n        for (int i = 0; i < n / 2; i++)\n            for (int j = 0; j < m / 2; j++)\n            {\n                int topleft = grid[i][j], topright = grid[i][m - 1 - j], bottomleft = grid[n - 1 - i][j], bottomright = grid[n - 1 - i][m - 1 - j];\n                cnt[topleft + topright + bottomleft + bottomright]++;\n            }\n        if (n % 2 == 1 || m % 2 == 1)\n        {\n            int c = 0, ones = 0;\n            if (n % 2 == 1)\n            {\n                for (int j = 0; j < m / 2; j++)\n                {\n                    int left = grid[n / 2][j], right = grid[n / 2][m - 1 - j];\n                    if (left != right)\n                        c++;\n                    if (left == 1 && right == 1)\n                        ones++;\n                }\n            }\n            if (m % 2 == 1)\n            {\n                for (int i = 0; i < n / 2; i++)\n                {\n                    int top = grid[i][m / 2], bottom = grid[n - 1 - i][m / 2];\n                    if (top != bottom)\n                        c++;\n                    if (top == 1 && bottom == 1)\n                        ones++;\n                }\n            }\n            int mid = c;\n            if (n % 2 == m % 2)\n                mid += grid[n / 2][m / 2];\n            mid += cnt[1];\n            mid += cnt[2] * 2;\n            mid += cnt[3];\n            if (ones % 2 && c == 0)\n                return mid + 2;\n            return mid;\n        }\n        else\n        {\n            int mid = 0;\n            mid += cnt[1];\n            mid += cnt[2] * 2;\n            mid += cnt[3];\n            return mid;\n        }\n    }\n};",
    "submit_ts": "1722698076",
    "subm_id": "1343168869"
}