{
    "username": "sonal_tepu",
    "submission": "from sortedcontainers import SortedDict\nclass Solution:\n    # for x in intervals:\n        #     # interval starting just before start time of current interval\n        #     st = non_overlapping_intervals.bisect_right(x[0])\n        #     if st != 0:\n        #         # print(x, st)\n        #         stk = non_overlapping_intervals.keys()[(st-1)]\n        #         endt = non_overlapping_intervals[stk]\n\n        #         if endt > x[0]:\n        #             continue\n            \n        #     # interval starting just after start time of current interval\n        #     st = non_overlapping_intervals.bisect_right(x[0])\n        #     if st != len(non_overlapping_intervals):\n        #         stk = non_overlapping_intervals.keys()[(st)]\n\n        #         if stk < x[1]:\n        #             continue\n        #     non_overlapping_intervals[x[0]] = x[1]\n        # print(non_overlapping_intervals)\n        # return len(intervals) - len(non_overlapping_intervals)\n    def shortestDistanceAfterQueries(self, n: int, queries: List[List[int]]) -> List[int]:\n        ss = SortedDict()\n        ss_sum = 0\n        def addEdge(u,v):\n            nonlocal ss_sum\n            if u in ss and ss[u] > v:\n                return\n\n            st = ss.bisect_right(u)\n            if st != 0:\n                # print(x, st)\n                stk = ss.keys()[(st-1)]\n                endt = ss[stk]\n\n                if endt >= v:\n                    return\n            \n            # interval starting just after start time of current interval\n            while(True):\n                st = ss.bisect_left(u)\n                if st != len(ss):\n                    stk = ss.keys()[(st)]\n                    endt = ss[stk]\n                    if endt <= v:\n                        ss.pop(stk)\n                        ss_sum -= (endt - stk) \n                    else:\n                        break\n                else:\n                    break\n            ss[u] = v\n            ss_sum += (v-u)\n\n        ans = []\n        for u,v in queries:\n            addEdge(u,v)\n            # print(ss, ss_sum)\n            ans.append(n-1 - (ss_sum) + len(ss))            \n\n        return ans",
    "submit_ts": "1722742607",
    "subm_id": "1343772885"
}