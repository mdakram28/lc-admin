{
    "username": "birenamanta",
    "submission": "class Solution {\n    public long minimumCost(int m, int n, int[] horizontalCut, int[] verticalCut) {\n        Integer[] X = Arrays.stream(horizontalCut).boxed().toArray(Integer[]::new);\n        Integer[] Y = Arrays.stream(verticalCut).boxed().toArray(Integer[]::new);\n\n        // Sort the horizontal and vertical cut costs in reverse order\n        Arrays.sort(X, Collections.reverseOrder());\n        Arrays.sort(Y, Collections.reverseOrder());\n\n        long res = 0;\n\n        // Initialize current number of horizontal and vertical pieces as 1\n        int hzntl = 1, vert = 1;\n\n        // Indices for horizontal and vertical cuts\n        int i = 0, j = 0;\n        \n        // Loop until one or both cost arrays are processed\n        while (i < X.length && j < Y.length) {\n            if (X[i] > Y[j]) {\n                res += X[i] * vert;\n                hzntl++;\n                i++;\n            } else {\n                res += Y[j] * hzntl;\n                vert++;\n                j++;\n            }\n        }\n\n        // Process remaining horizontal cuts\n        while (i < X.length) {\n            res += X[i] * vert;\n            i++;\n        }\n\n        // Process remaining vertical cuts\n        while (j < Y.length) {\n            res += Y[j] * hzntl;\n            j++;\n        }\n\n        return res;   \n    }\n}",
    "submit_ts": "1720926795",
    "subm_id": "1320296554"
}