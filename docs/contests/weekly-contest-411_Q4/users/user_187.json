{
    "username": "pikapika",
    "submission": "from typing import List\n\n\nclass FenwickTree:\n    def __init__(self, n):\n        self.a = [0] * (n + 1)\n        self.n = n\n\n    def sum(self, i):\n        res = 0\n        while i > 0:\n            res += self.a[i]\n            i -= (i & -i)\n        return res\n\n    def update(self, i, x):\n        while i <= self.n:\n            self.a[i] += x\n            i += (i & -i)\n\n\nclass Solution:\n    def countKConstraintSubstrings(self, s: str, k: int, queries: List[List[int]]) -> List[int]:\n        n = len(s)\n        a = [int(c) for c in s]\n        left = [i for i in range(n)]\n        i = 0\n        c = [0, 0]\n        ft = FenwickTree(n)\n        for j in range(n):\n            c[a[j]] += 1\n            while c[0] > k and c[1] > k:\n                c[a[i]] -= 1\n                i += 1\n            left[j] = i\n        pre_left = [0] * (n + 1)\n        for i in range(n):\n            pre_left[i + 1] = pre_left[i] + left[i]\n        left2 = [i - left[i] + 1 for i in range(n)]\n        pre_left2 = [0] * (n + 1)\n        for i in range(n):\n            pre_left2[i + 1] = pre_left2[i] + left2[i]\n\n        def find_larger_left(l1, r1):\n            l, r = l1, r1 + 1\n            while l < r:\n                m = (l + r) // 2\n                if left[m] <= l1:\n                    l = m + 1\n                else:\n                    r = m\n            return r\n\n        ans = []\n        for l, r in queries:\n            m = find_larger_left(l, r)\n            count = 0\n            if m - 1 >= l:\n                count += (l + m - 1) * (m - l) // 2 - l * (m - l) + (m - l)\n            if m <= r:\n                count += pre_left2[r + 1] - pre_left2[m]\n            ans.append(count)\n        return ans\n",
    "submit_ts": "1723951446",
    "subm_id": "1359771719"
}