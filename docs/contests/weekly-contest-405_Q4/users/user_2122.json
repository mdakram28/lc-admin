{
    "username": "_codinggirl_9122",
    "submission": "#include <vector>\n#include <string>\n#include <unordered_map>\n#include <climits>\nusing namespace std;\n\nclass TrieNode {\npublic:\n    unordered_map<char, TrieNode*> children;\n    int cost;\n\n    TrieNode() {\n        cost = INT_MAX;\n    }\n};\n\nclass Trie {\npublic:\n    TrieNode* root;\n\n    Trie() {\n        root = new TrieNode();\n    }\n\n    void insert(string word, int cost) {\n        TrieNode* node = root;\n        for (char c : word) {\n            if (node->children.find(c) == node->children.end()) {\n                node->children[c] = new TrieNode();\n            }\n            node = node->children[c];\n        }\n        node->cost = min(node->cost, cost);\n    }\n};\n\nclass Solution {\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int n = target.length();\n        Trie trie;\n\n        // Insert all words into Trie with their respective costs\n        for (int i = 0; i < words.size(); ++i) {\n            trie.insert(words[i], costs[i]);\n        }\n\n        // Initialize dp array with INT_MAX\n        vector<int> dp(n + 1, INT_MAX);\n        dp[0] = 0;\n\n        // Process the target string to find the minimum cost\n        for (int i = 0; i < n; ++i) {\n            if (dp[i] == INT_MAX) continue;\n            TrieNode* node = trie.root;\n            for (int j = i; j < n; ++j) {\n                char c = target[j];\n                if (node->children.find(c) == node->children.end()) break;\n                node = node->children[c];\n                if (node->cost != INT_MAX) {\n                    dp[j + 1] = min(dp[j + 1], dp[i] + node->cost);\n                }\n            }\n        }\n\n        return dp[n] == INT_MAX ? -1 : dp[n];\n    }\n};",
    "submit_ts": "1720323253",
    "subm_id": "1312371070"
}