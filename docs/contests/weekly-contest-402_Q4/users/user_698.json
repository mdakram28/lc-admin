{
    "username": "rohinth076",
    "submission": "\nclass SegmentTree {\n    int[] val,arr;\n    int N,M,H;\n\n    public static final int I = 0;\n    public static final int max = Integer.MAX_VALUE;\n    public SegmentTree(int n){\n        N = n;\n        M = Integer.highestOneBit(Math.max(N-1,1)) << 2;\n        H = M >>> 1;\n\n        val = new int[M];\n        Arrays.fill(val,I);\n    }\n    public SegmentTree(int[] a){\n        this(a.length);\n        arr = a;\n        for(int i=1;i<N-1;i++)\n        if(a[i] > a[i-1] && a[i] > a[i+1]){\n            val[H+i] = 1;\n        }\n        for(int i=H-1;i>=1;i--){\n            propagate(i);\n        }\n    }\n\n    private int calc(int a,int b){\n        return a+b;\n    }\n\n    private void propagate(int i){\n        val[i] = calc(val[i*2] , val[i*2+1]);\n    }\n    public void update(int position,int value){\n        arr[position] = value;\n        for(int pos=Math.max(0,position-1);pos<=Math.min(N-1,position+1);pos++)\n            if(pos != 0 && pos != N-1){\n                 int oldvalue = val[pos + H];\n                 int newvalue = 0;\n                 if(arr[pos] > arr[pos-1] && arr[pos] > arr[pos+1]){\n                     newvalue = 1;\n                 }\n                if(oldvalue != newvalue){\n                    val[pos + H] = newvalue;\n                    update1(pos);\n                }\n            }\n    }\n    private void update1(int pos){\n        for(int i=(H+pos)>>>1;i >= 1; i >>>= 1){\n            propagate(i);\n        }\n    }\n    public int getValue(int left,int right){\n        return getValue(1,0,H-1,left,right);\n    }\n    private int getValue(int idx,int node_left,int node_right,int left,int right){\n        if(left <= node_left && node_right <= right){\n            return val[idx];\n        }\n        if(node_right < left || right < node_left){\n            return I;\n        }\n        int mid = (node_right + node_left) / 2;\n        return calc(getValue(idx*2,node_left,mid,left,right) ,\n                getValue(idx*2 + 1,mid + 1, node_right,left,right));\n    }\n}\nclass Solution {\n    public List<Integer> countOfPeaks(int[] nums, int[][] queries) {\n        List<Integer> ans = new ArrayList<>();\n        SegmentTree tree = new SegmentTree(nums);\n        for(int[] i:queries){\n            if(i[0] == 1){\n                int val = tree.getValue(i[1]+1,i[2]-1);\n                ans.add(val);\n            }else{\n                tree.update(i[1],i[2]);\n            }\n        }\n        return ans;\n    }\n}",
    "submit_ts": 1718507676.0
}