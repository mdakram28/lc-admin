{
    "username": "akshayandhare",
    "submission": "class Solution {\npublic:\n    int numberOfAlternatingGroups(vector<int>& cols, int size) {\n        int total = cols.size();\n        int groupCount = 0;\n\n        if (size == 1) {\n            // Every single tile is an alternating group by itself\n            return total;\n        }\n\n        int altLength = 1;\n        int idx = 1;\n        while (idx < total + size - 1) {\n            int curr = idx;\n            int prev = idx - 1;\n\n            // Handle circular indexing\n            if (curr >= total) {\n                curr -= total;\n            }\n            if (prev >= total) {\n                prev -= total;\n            }\n\n            if (cols[curr] != cols[prev]) {\n                ++altLength;\n            } else {\n                altLength = 1;\n            }\n\n            // Check if we have a valid alternating group of length size\n            if (altLength >= size) {\n                ++groupCount;\n            }\n\n            ++idx;\n        }\n\n        return groupCount;\n    }\n};\n",
    "submit_ts": "1720280392",
    "subm_id": "1311787670"
}