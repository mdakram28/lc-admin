{
    "username": "sheiscold",
    "submission": "class Solution {\nprivate:\n class TrieVertex {\npublic:\n    vector<TrieVertex*> children;\n    int value;\n    bool isEndOfWord;\n\n    TrieVertex() : children(26, nullptr), value(INT_MAX), isEndOfWord(false) {}\n};\n\nclass TrieTree {\npublic:\n    TrieVertex* root;\n\n    TrieTree() {\n        root = new TrieVertex();\n    }\n\n    void addWord(const string& word, int cost) {\n        TrieVertex* node = root;\n        for (char c : word) {\n            if (!node->children[c - 'a']) {\n                node->children[c - 'a'] = new TrieVertex();\n            }\n            node = node->children[c - 'a'];\n        }\n        node->value = min(cost, node->value);\n        node->isEndOfWord = true;\n    }\n\n    TrieVertex* getRoot() {\n        return root;\n    }\n};\n    \nvoid soluchan(string target, vector<string>& words, vector<int>& costs, TrieTree& trie, vector<int>& dp, int n){\n            dp[0] = 0;\n       \n    for (int i = 0; i < n; ++i) {\n            if (dp[i] == INT_MAX) continue;\n\n            TrieVertex* node = trie.getRoot();\n            for (int j = i; j < n; ++j) {\n                char c = target[j];\n                if (!node->children[c - 'a']) break;\n                node = node->children[c - 'a'];\n                if (node->isEndOfWord) {\n                    dp[j + 1] = min(dp[j + 1], dp[i] + node->value);\n                }\n            }\n        }\n\n}\n\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        TrieTree trie;\n        int n = target.size();\n        vector<int> dp(n + 1, INT_MAX);\n\n        for (int i = 0; i < words.size(); ++i) {\n            trie.addWord(words[i], costs[i]);\n        }\n        soluchan(target,words,costs,trie,dp,n);\n\n\n         if (dp[n] == INT_MAX ) return -1 ;\n         return  dp[n];\n    }\n\n    \n};",
    "submit_ts": "1720322541",
    "subm_id": "1312352670"
}