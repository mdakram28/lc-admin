{
    "username": "thedark_JS",
    "submission": "class Solution {\npublic:\n    \n    //int dp[105][20][2];\n    map<pair<int, pair<int, int> >, int> dp;\n    int calc(int stairNum, int powJ, int hasUsedSub){\n        if(stairNum < 0 || powJ < 0) return 0;\n        pair<int, pair<int, int> > pp = {stairNum, {powJ, hasUsedSub}};\n        if(dp.find(pp) != dp.end()) return dp[pp];\n        //if(dp[stairNum][powJ][hasUsedSub] != -1) return dp[stairNum][powJ][hasUsedSub];\n        \n        \n        int ans = 0;\n        \n        if(hasUsedSub == 0){\n            if(powJ > 0){\n                int lasStair = stairNum - (1 << (powJ - 1));\n                if(lasStair >= 0){\n                    ans += (\n                        calc(lasStair, powJ - 1, 0) +\n                        calc(lasStair, powJ - 1, 1)\n                    );\n                }\n            }\n        }\n        \n        \n        \n        // dp[stairNum][powJ][hasUsedSub] = 0;\n        // come from a jump;\n        \n        if(hasUsedSub == 1){\n            ans += calc(stairNum + 1, powJ, 0);\n        }\n        //cout<<\"okay for \"<<stairNum<<\"  \"<<powJ<<\"  \"<<hasUsedSub<<\". \"<<ans<<endl;\n        dp[pp] = ans;\n        return ans;\n        \n    }\n    \n    int getWays(int stairNum){\n        int ans = 0;\n        for(int j = 0 ; j < 32 ; j++){\n            for(int k = 0 ; k < 2 ; k++){\n                ans += calc(stairNum, j, k);\n            }\n        }\n        return ans;\n        \n    }\n    \n    int waysToReachStair(int k) {\n        // memset(dp, -1, sizeof(dp));\n        pair<int, pair<int, int> > pp = {1, {0, 0}};\n        dp[pp] = 1;\n        \n        return getWays(k);\n        // for(int i = 0 ; i < 70 ; i++){\n        //     cout<<\"okay for i \"<<i<<\"  \"<<getWays(i)<<endl;;\n        //     //getWays(i);\n        // }\n        // return 0;\n    }\n};",
    "submit_ts": 1716089331.0
}