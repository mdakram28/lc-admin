{
    "username": "vigneshravikumar30",
    "submission": "class Solution:\n    def minimumCost(self, target: str, words: List[str], costs: List[int]) -> int:\n        word_map={}\n        for w,c in zip(words,costs):\n            word_map[w]=min(word_map.get(w,float('inf')),c)\n        \n        words=list(word_map.items())\n\n\n        trie={}\n\n\n            \n        for i,word in enumerate(words):\n            temp=trie\n            for w in word[0]:\n                temp.setdefault(w,{})\n                temp=temp[w]\n            temp['#']=word[1]\n\n        # def check_trie(i,temp):\n        #     res=set()\n\n        #     if '#' in temp:\n        #         res.add(temp['#'])\n\n        #     if i==len(target):return res\n            \n        #     for c in temp:\n        #         if c==target[i]:\n        #             res|=check_trie(i+1,temp[c])\n        #     return res\n\n        # adj={}\n        dp=[float('inf')]*len(target)\n        for i in range(len(target)):\n            prev=dp[i-1] if i>0 else 0\n            if prev==float('inf'):continue\n            temp=trie\n\n            for j in range(i,len(target)):\n                if target[j] not in temp:break\n                temp=temp[target[j]]\n                if '#' in temp:\n                    dp[j]=min(dp[j],prev+temp['#'])\n\n        \n        return dp[-1] if dp[-1]!=float('inf') else -1",
    "submit_ts": "1720324053",
    "subm_id": "1312390470"
}