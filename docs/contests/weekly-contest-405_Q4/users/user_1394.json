{
    "username": "vikky4321",
    "submission": "class TrieNode {\npublic:\n    unordered_map<char, TrieNode*> children;\n    vector<pair<int, int>> word_ends; // Store (index, cost) pairs for word endings\n};\n\nclass Trie {\npublic:\n    TrieNode* root;\n\n    Trie() {\n        root = new TrieNode();\n    }\n\n    void insert(const string& word, int index, int cost) {\n        TrieNode* node = root;\n        for (char c : word) {\n            if (!node->children.count(c)) {\n                node->children[c] = new TrieNode();\n            }\n            node = node->children[c];\n        }\n        node->word_ends.push_back({index, cost});\n    }\n};\n\nclass Solution {\npublic:\n    vector<long long> dp; // Use long long to prevent overflow\n\n    long long compute_cost(int i, const string& target, Trie& trie, const vector<string>& words) {\n        if (i == target.size()) return 0;\n\n        if (dp[i] != -1) return dp[i];\n\n        TrieNode* node = trie.root;\n        long long ans = LLONG_MAX;\n\n        for (int j = i; j < target.size(); ++j) {\n            if (!node->children.count(target[j])) break;\n            node = node->children[target[j]];\n\n            for (const auto& p : node->word_ends) {\n                int word_len = words[p.first].size();\n                int cost = p.second;\n                long long next_cost = compute_cost(j + 1, target, trie, words);\n                if (next_cost != LLONG_MAX) {\n                    ans = min(ans, next_cost + cost);\n                }\n            }\n        }\n\n        return dp[i] = ans;\n    }\n\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int n = target.size();\n        dp.resize(n + 1, -1);\n\n        Trie trie;\n        for (int i = 0; i < words.size(); ++i) {\n            trie.insert(words[i], i, costs[i]);\n        }\n\n        long long result = compute_cost(0, target, trie, words);\n\n        return result >= LLONG_MAX ? -1 : result;\n    }\n};",
    "submit_ts": "1720323485",
    "subm_id": "1312376721"
}