{
    "username": "LQnVRuiNVr",
    "submission": "class Solution:\n    def numberOfPermutations(self, n: int, requirements: List[List[int]]) -> int:\n\n        MOD = 10**9 + 7\n        MAX_INV = 400\n        \n        # Create a dictionary to map end index to the required number of inversions\n        end_idx_to_inv = {req[0] + 1: req[1] for req in requirements}\n\n        # Initialize the DP table\n        dp = [[0] * (MAX_INV + 1) for _ in range(n + 1)]\n        \"\"\"\n        for length in range(1, n + 1):\n            for inv in range(MAX_INV + 1):\n                dp[length][inv] = 0\n                for pos in range(min(length, inv + 1)):\n                    dp[length][inv] = (dp[length][inv] + dp[length - 1][inv - pos]) % MOD\n                    \n                    for length in range(1, n + 1):\n            for inv in range(MAX_INV + 1):\n                dp[length][inv] = 0\n                for pos in range(min(length, inv + 1)):\n                    dp[length][inv] = (dp[length][inv] + dp[length - 1][inv - pos]) % MOD\n        \n        \"\"\"\n        dp[0][0] = 1\n\n        for length in range(1, n + 1):\n            for inv in range(MAX_INV + 1):\n                dp[length][inv] = 0\n                for pos in range(min(length, inv + 1)):\n                    dp[length][inv] = (dp[length][inv] + dp[length - 1][inv - pos]) % MOD\n        \n\n            if length in end_idx_to_inv:\n                req_inv = end_idx_to_inv[length]\n                for inv in range(MAX_INV + 1):\n                    if inv != req_inv:\n                        dp[length][inv] = 0\n\n        # Sum up the valid permutations for the full length n\n        \"\"\"\n        for length in range(1, n + 1):\n            for inv in range(MAX_INV + 1):\n                dp[length][inv] = 0\n                for pos in range(min(length, inv + 1)):\n                    dp[length][inv] = (dp[length][inv] + dp[length - 1][inv - pos]) % MOD\n                    \n                    for length in range(1, n + 1):\n            for inv in range(MAX_INV + 1):\n                dp[length][inv] = 0\n                for pos in range(min(length, inv + 1)):\n                    dp[length][inv] = (dp[length][inv] + dp[length - 1][inv - pos]) % MOD\n        \n        \"\"\"\n            \n        \"\"\"\n        for length in range(1, n + 1):\n            for inv in range(MAX_INV + 1):\n                dp[length][inv] = 0\n                for pos in range(min(length, inv + 1)):\n                    dp[length][inv] = (dp[length][inv] + dp[length - 1][inv - pos]) % MOD\n                    \n                    for length in range(1, n + 1):\n            for inv in range(MAX_INV + 1):\n                dp[length][inv] = 0\n                for pos in range(min(length, inv + 1)):\n                    dp[length][inv] = (dp[length][inv] + dp[length - 1][inv - pos]) % MOD\n        \n        \"\"\"\n        result = sum(dp[n]) % MOD\n\n        return result\n        ",
    "submit_ts": 1719070433.0
}