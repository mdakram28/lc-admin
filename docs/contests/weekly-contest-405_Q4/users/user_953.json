{
    "username": "onkar_somani",
    "submission": "class Solution {\npublic:\n    \n    class TrieNode {\npublic:\n    TrieNode *child[26];\n    bool isWord;\n    int cost = INT_MAX;\n    TrieNode() {\n        isWord = false;\n        for (auto &a : child) a = nullptr;\n    }\n};\nclass Trie {\n    \npublic:\n    TrieNode* root;\n    Trie() {\n        root = new TrieNode();\n    }\n    void insert(string s , int cost) {\n        TrieNode *p = root;\n        for (auto &a : s) {\n            int i = a - 'a';\n            if (!p->child[i]) p->child[i] = new TrieNode();\n            p = p->child[i];\n        }\n        p->isWord = true;\n        p->cost = min(p->cost ,cost)  ;\n    }\n    bool search(string key, bool prefix=false) {\n        TrieNode *p = root;\n        for (auto &a : key) {\n            int i = a - 'a';\n            if (!p->child[i]) return false;\n            p = p->child[i];\n        }\n        if (prefix==false) return p->isWord;\n        return true;\n    }\n    bool startsWith(string prefix) {\n        return search(prefix, true);\n    }\n};\n    \n\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int n = target.size();\n        vector<int> dp(n + 1 , INT_MAX);\n        TrieNode * root = new TrieNode();\n        dp[0] = 0;  // base case: cost to form empty string is 0\n\n        Trie trie;\n        for (int i = 0; i < words.size(); ++i) {\n            trie.insert(words[i], costs[i]);\n        }\n\n        for (int i = 0; i < n; ++i) {\n            if (dp[i] == INT_MAX) continue;  \n\n            TrieNode* node = trie.root;\n            for (int j = i; j < n; ++j) {\n                if (!node->child[target[j] - 'a']) break;\n                node = node->child[target[j] - 'a'];\n                if (node->cost != INT_MAX) {\n                    dp[j + 1] = min(dp[j + 1], dp[i] + node->cost);\n                }\n            }\n        }\n\n        return dp[n] == INT_MAX ? -1 : dp[n];\n        \n        \n    }\n};",
    "submit_ts": "1720323149",
    "subm_id": "1312368519"
}