{
    "username": "RiverLin",
    "submission": "\n\nstruct TrieNode {\n    bool is_word = false;\n    vector<TrieNode*> children;\n    int cost = 600000000;\n    TrieNode() {\n        children.resize(26, nullptr);\n    }\n};\n\nclass Solution {\npublic:\n    int INF = 600000000;\n    unordered_map<int, int> memo;\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        TrieNode* root = new TrieNode();\n        for (int i = 0; i < words.size(); i++) {\n            auto& word = words[i];\n            TrieNode* cur = root;\n            for (char& c : word) {\n                if (cur->children[c - 'a'] == nullptr) {\n                    cur->children[c - 'a'] = new TrieNode();\n                }\n                cur = cur->children[c - 'a'];\n            }\n            cur->is_word = true;\n            cur->cost = min(cur->cost, costs[i]);\n        }\n        int len = target.size();\n        // int res = fn(target, root, 0) ;\n        vector<int> dp(len, INF);\n\n        TrieNode* cur = root;\n        for (int idx = 0; idx < len; idx++) {\n            char& c = target[idx];\n            cur = cur->children[c - 'a'];\n            if (cur == nullptr) break;\n\n            if (cur->is_word) {\n                dp[idx] = cur->cost;\n            }\n        }\n        for (int idx = 0; idx < len; idx++) {\n            if (dp[idx] == INF) continue;\n            cur = root;\n            int i = idx + 1;\n            while (cur != nullptr && i < len) {\n                char& c = target[i];\n                cur = cur->children[c - 'a'];\n                if (cur == nullptr) break;\n                if (cur->is_word) {\n                    dp[i] = min(dp[i], dp[idx] + cur->cost);\n                }\n                i++;\n            }\n        }\n        return dp[len - 1] == INF ? -1 : dp[len - 1];\n    }\n};\n",
    "submit_ts": "1720323270",
    "subm_id": "1312371506"
}