{
    "username": "aksh--_it",
    "submission": "\n#define ll long long\n#define all(v) v.begin(),v.end()\n template <typename Node, typename Update>\n\nstruct SegTree\n{\n    vector<Node> tree;\n    vector<ll> arr; // type may change\n    int n;\n    int s;\n    SegTree(int a_len, vector<ll> &a)\n    { // change if type updated\n        arr = a;\n        n = a_len;\n        s = 1;\n        while (s < 2 * n)\n        {\n            s = s << 1;\n        }\n        tree.resize(s);\n        fill(all(tree), Node());\n        build(0, n - 1, 1);\n    }\n    void build(int start, int end, int index) // Never change this\n    {\n        if (start == end)\n        {\n            tree[index] = Node(arr[start]);\n            return;\n        }\n        int mid = (start + end) / 2;\n        build(start, mid, 2 * index);\n        build(mid + 1, end, 2 * index + 1);\n        tree[index].merge(tree[2 * index], tree[2 * index + 1]);\n    }\n    void update(int start, int end, int index, int query_index, Update &u) // Never Change this\n    {\n        if (start == end)\n        {\n            u.apply(tree[index]);\n            return;\n        }\n        int mid = (start + end) / 2;\n        if (mid >= query_index)\n            update(start, mid, 2 * index, query_index, u);\n        else\n            update(mid + 1, end, 2 * index + 1, query_index, u);\n        tree[index].merge(tree[2 * index], tree[2 * index + 1]);\n    }\n   \n    Node query(int start, int end, int index, int left, int right)\n    { // Never change this\n        if (start > right || end < left)\n            return Node();\n        if (start >= left && end <= right)\n            return tree[index];\n        int mid = (start + end) / 2;\n        Node l, r, ans;\n        l = query(start, mid, 2 * index, left, right);\n        r = query(mid + 1, end, 2 * index + 1, left, right);\n        ans.merge(l, r);\n        return ans;\n    }\n    void make_update(int index, ll val)\n    {                                    // pass in as many parameters as required\n        Update new_update = Update(val); // may change\n        update(0, n - 1, 1, index, new_update);\n    }\n    Node make_query(int left, int right)\n    {\n        return query(0, n - 1, 1, left, right);\n    }\n};\n\nstruct Node1\n{\n    ll val; // may change\n    Node1()\n    {            // Identity element\n        val = 0; // may change\n    }\n    Node1(ll p1)\n    {             // Actual Node\n        val = p1; // may change\n    }\n    void merge(Node1 &l, Node1 &r)\n    {                            // Merge two child nodes\n        val =l.val+r.val;// may change\n    }\n};\n\nstruct Update1\n{\n    ll val; // may change\n    Update1(ll p1)\n    {             // Actual Update\n        val = p1; // may change\n    }\n    void apply(Node1 &a)\n    {                 // apply update to given node\n        a.val = val; // may change\n    }\n};\n\nclass Solution {\npublic:\n   \n    vector<int> countOfPeaks(vector<int>& nums, vector<vector<int>>& queries) {\n        int n=nums.size();\n        vector<ll> peaks(n,0);\n        for(int i=1;i<n-1;i++)\n        {\n            if(nums[i]>nums[i-1] && nums[i]>nums[i+1])\n                peaks[i]=1;\n        }\n         SegTree<Node1, Update1> seg = SegTree<Node1, Update1>(n, peaks);\n        vector<int> ans;\n        for(auto i:queries)\n        {\n            \n            int type=i[0];\n            if(type==1)\n            {\n                ans.push_back(seg.make_query(i[1]+1,i[2]-1).val);\n            }\n            else{\n                nums[i[1]]=i[2];\n                int ind=i[1];\n                // cout<<ind<<endl;\n                for(int j=-1;j<=1;j++)\n                {\n                    int index=ind+j;\n                    // cout<<index<<\" \";\n                    if(index>0 && index<n-1)\n                    {\n                        // cout<<index<<endl;\n                        if(nums[index]>nums[index-1] && nums[index]>nums[index+1])\n                        {\n                            seg.make_update(index,1);\n                            // cout<<index<<endl;\n                        }\n                        else {seg.make_update(index,0);\n                              \n                             }\n                        \n                    }\n                }\n            }\n        }\n        return ans;\n    }\n    \n};",
    "submit_ts": 1718507833.0
}