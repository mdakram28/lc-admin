{
    "username": "Jian-Xu Chen",
    "submission": "class Solution:\n    def maximumValueSum(self, board: List[List[int]]) -> int:\n        m, n = len(board), len(board[0])\n\n        memo = []\n        for row in board:\n            unique_values = set(row)\n            tmp = sorted(unique_values, reverse=True)\n            top_3 = tmp[min(2, len(tmp)-1)]\n            row_candidates = []\n            for c, val in enumerate(row):\n                if val >= top_3:\n                    row_candidates.append(c)\n\n            memo.append(row_candidates)\n        \n\n        @cache\n        def dp(idx, first_col, second_col):\n            # print(idx, first_col, second_col)\n            if idx >= m:\n                return -math.inf\n\n            res = dp(idx+1, first_col, second_col)\n            for c in memo[idx]:\n                if c == first_col or c == second_col:\n                    continue\n                \n                val = board[idx][c]\n                # choose c\n                if first_col == -1:\n                    res = max(res, val+dp(idx+1, c, -1))\n                elif second_col == -1:\n                    res = max(res, val+dp(idx+1, first_col, c))\n                else:\n                    res = max(res, val)\n            return res\n        \n        return dp(0, -1, -1)",
    "submit_ts": "1723909153",
    "subm_id": "1359181603"
}