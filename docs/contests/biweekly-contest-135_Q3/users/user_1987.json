{
    "username": "adityagautam1911",
    "submission": "public class Solution {\n    public int minChanges(int[] nums, int k) {\n        Map<Integer, List<Integer>> map = new HashMap<>();\n        List<Integer> v = new ArrayList<>();\n        \n        for (int i = 0; i < nums.length / 2; i++) {\n            int a1 = nums[i];\n            int a2 = nums[nums.length - i - 1];\n            int diff = Math.abs(a1 - a2);\n            int X = Math.max(a1, Math.max(a2, Math.max(k - a1, k - a2)));\n            \n            if (!map.containsKey(diff)) {\n                map.put(diff, new ArrayList<>());\n            }\n            map.get(diff).add(X);\n            v.add(X);\n        }\n        \n        int ans = nums.length;\n        Collections.sort(v);\n        \n        for (Map.Entry<Integer, List<Integer>> entry : map.entrySet()) {\n            int diff = entry.getKey();\n            List<Integer> values = entry.getValue();\n            \n            int T = 0;\n            for (int i = 0; i < v.size(); i++) {\n                if (v.get(i) >= diff) {\n                    T = i;\n                    break;\n                }\n            }\n            T = T * 2 + (nums.length / 2 - T);\n\n            for (int X : values) {\n                if (X < diff) {\n                    T -= 2;\n                } else {\n                    T -= 1;\n                }\n            }\n            \n            ans = Math.min(ans, T);\n        }\n        \n        return ans;\n    }\n}\n",
    "submit_ts": "1721490021",
    "subm_id": "1327470759"
}