{
    "username": "som14159",
    "submission": "class Solution {\npublic:\n    void findDepth(vector<vector<int>> &G,int v,int par,vector<int> &depth){\n        for(auto i:G[v]){\n            if(par==i)\n                continue;\n            depth[i] = depth[v]+1;\n            findDepth(G,i,v,depth);\n        }\n    }\n    int findDiameter(vector<vector<int>>& edges){\n        vector<vector<int>> G(edges.size()+1);\n        for(auto i:edges){\n            G[i[0]].push_back(i[1]);\n             G[i[1]].push_back(i[0]);\n        }\n        vector<int> depth(edges.size()+1,0);\n        int max_node=0,max_d=0;\n        findDepth(G,0,-1,depth);\n        for(int i=0;i<depth.size();i++){\n            if(depth[i]>= max_d){\n                max_d = depth[i];\n                max_node = i;\n            }\n        }\n        vector<int> depth1(edges.size()+1,0);\n        max_d=0;\n        findDepth(G,max_node,-1,depth1);\n        for(auto i:depth1){\n            max_d = max(i,max_d);\n        }\n        return max_d;\n    }\n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n        int dia1 = findDiameter(edges1);\n        int dia2 = findDiameter(edges2);\n        int r1 = dia1/2 + dia1%2;\n        int r2 = dia2/2 + dia2%2;\n        // cout<<r1<<\" \"<<r2<<endl;\n        return max({dia1,dia2,r1+1+r2});\n    }\n};",
    "submit_ts": "1719719544",
    "subm_id": "1304444595"
}