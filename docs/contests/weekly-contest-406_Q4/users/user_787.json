{
    "username": "jai_shree_raam",
    "submission": "#define ll long long\nclass Solution {\npublic:\n    long long minimumCost(int m, int n, vector<int>& horizontalCut, vector<int>& verticalCut) {\n                priority_queue<ll> horizontalPQ(horizontalCut.begin(), horizontalCut.end());\n        priority_queue<ll> verticalPQ(verticalCut.begin(), verticalCut.end());\n\n        ll totalCost = 0;\n        ll horizontalPieces = 1;\n        ll verticalPieces = 1;\n\n        // While there are still cuts to be made\n        while (!horizontalPQ.empty() && !verticalPQ.empty()) {\n            if (horizontalPQ.top() >= verticalPQ.top()) {\n                // Make a horizontal cut\n                totalCost += horizontalPQ.top() * verticalPieces;\n                horizontalPQ.pop();\n                horizontalPieces++;\n            } else {\n                // Make a vertical cut\n                totalCost += verticalPQ.top() * horizontalPieces;\n                verticalPQ.pop();\n                verticalPieces++;\n            }\n        }\n\n        // If there are still horizontal cuts left\n        while (!horizontalPQ.empty()) {\n            totalCost += horizontalPQ.top() * verticalPieces;\n            horizontalPQ.pop();\n            horizontalPieces++;\n        }\n\n        // If there are still vertical cuts left\n        while (!verticalPQ.empty()) {\n            totalCost += verticalPQ.top() * horizontalPieces;\n            verticalPQ.pop();\n            verticalPieces++;\n        }\n\n        return totalCost;\n    }\n};",
    "submit_ts": "1720925540",
    "subm_id": "1320258121"
}