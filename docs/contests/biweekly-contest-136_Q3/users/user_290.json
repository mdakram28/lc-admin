{
    "username": "Ivan_len",
    "submission": "class Solution {\npublic:\n    int minFlips(vector<vector<int>>& grid) {\n        int n = grid.size();\n        int m = grid[0].size();\n        int ans = 1 << 20;\n        int dif = 0;\n        int ext = 0;\n        int ones = 0;\n        int tot = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                int one = grid[i][j] + grid[n - 1 - i][j] + grid[i][m - 1 - j] + grid[n - 1 - i][m - 1 - j];\n                dif += min(one, 4 - one);\n                if (((n & 1) && i == n / 2) || ((m & 1) && j == m / 2)) {\n                    tot++;\n                    ext += min(one, 4 - one);\n                    ones += grid[i][j];\n                }\n            }\n        }\n        dif /= 4;\n        ones %= 4;\n        ext /= 4;\n        // cout << dif << ' ' << ones << ' ' << ext << '\\n';\n        if (ext & 1) {\n            if ((ones - ext) % 2 == 0) return dif;\n            return dif + 1;\n        }\n        if (ext >= 2) {\n            if ((ones - ext) % 2 == 0) return dif;\n            return dif + 1;\n        }\n        if (ones == 0) return dif;\n        if (ones == 2) return dif + 2;\n        assert((n & 1) && (m & 1));\n        if (grid[n / 2][m / 2] == 0) {\n            if (ones == 3) return dif + 1;\n            else return dif + 3;\n        }\n        if (ones == 1) return dif + 1;\n        return dif + 3;\n\n        // if (ext & 1) return dif;\n        // if (ext >= 2) return dif;\n        // return dif + 1;\n    }\n};",
    "submit_ts": "1722699369",
    "subm_id": "1343209556"
}