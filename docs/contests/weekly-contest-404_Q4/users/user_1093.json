{
    "username": "c-signal",
    "submission": "/**\n * @param {number[][]} edges1\n * @param {number[][]} edges2\n * @return {number}\n */\nvar minimumDiameterAfterMerge = function(edges1, edges2) {\n    const ans1 = minDepth(edges1);\n    const ans2 = minDepth(edges2);\n    return Math.max(ans1.self, ans2.self, ans1.root + ans2.root + 1);\n};\n\nfunction minDepth(edges) {\n    // console.log('start');\n    let n = edges.length + 1;\n    let nodes = Array.from({ length: n }).map(() => new Set());\n    for (const [a, b] of edges) {\n        nodes[a].add(b);\n        nodes[b].add(a);\n    }\n    \n    let current = [];\n    nodes.forEach((node, i) => {\n        if (node.size === 1) {\n            current.push({ val: i, node });\n        }\n    });\n\n    let remain = n;\n    let ans = 0;\n    while (remain > 2) {\n        remain -= current.length;\n        let next = [];\n        // console.log(remain, current);\n        current.forEach(({ val, node }) => {\n            node.forEach(c => {\n                let cNode = nodes[c];\n                cNode.delete(val);\n                if (cNode.size === 1) {\n                    next.push({ val: c, node: cNode });\n                }\n            });\n        });\n        current = next;\n        ans += 1;\n    }\n\n    // console.log(ans, remain);\n    if (remain === 2) {\n        return { self: ans * 2 + 1, root: ans + 1 };\n    } else {\n        return { self: ans * 2, root: ans };\n    }\n}",
    "submit_ts": "1719719288",
    "subm_id": "1304438300"
}