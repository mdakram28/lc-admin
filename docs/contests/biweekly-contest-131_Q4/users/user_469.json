{
    "username": "tanuj_123",
    "submission": "class Solution {\npublic:\n   \nint getMid(int s, int e) \n{\n\treturn s + (e - s) / 2;\n}\n\n\nint MaxUtil(int* st, int ss, int se, int l, \n\t\t\tint r, int node)\n{\n\t\n\tif (l <= ss && r >= se)\n\t\treturn st[node];\n\n\t\n\tif (se < l || ss > r)\n\t\treturn -1;\n\n\t\n\tint mid = getMid(ss, se);\n\t\n\treturn max(MaxUtil(st, ss, mid, l, r, \n\t\t\t\t\t2 * node + 1),\n\t\t\tMaxUtil(st, mid + 1, se, l, \n\t\t\t\t\tr, 2 * node + 2));\n}\n\n\nvoid updateValue(int arr[], int* st, int ss, int se, \n\t\t\t\tint index, int value, int node)\n{\n\tif (index < ss || index > se) \n\t{\n\t\tcout << \"Invalid Input\" << endl;\n\t\treturn;\n\t}\n\t\n\tif (ss == se) \n\t{ \n\t\t\n\t\tarr[index] = value;\n\t\tst[node] = value;\n\t}\n\telse {\n\t\t\tint mid = getMid(ss, se);\n\t\t\t\n\t\t\tif (index >= ss && index <= mid)\n\t\t\t\tupdateValue(arr, st,\n\t\t\t\t\t\t\tss, mid, index, \n\t\t\t\t\t\t\tvalue, 2 * node + 1);\n\t\t\telse\n\t\t\t\tupdateValue(arr, \n\t\t\t\t\t\t\tst, mid + 1, se, \n\t\t\t\t\t\t\tindex,\n\t\t\t\t\t\t\tvalue, 2 * node + 2);\n\t\t\t\n\t\t\tst[node] = max(st[2 * node + 1], \n\t\t\t\t\tst[2 * node + 2]);\n\t}\n\treturn;\n}\n\n\nint getMax(int* st, int n, int l, int r)\n{\n\t// Check for erroneous input values\n\tif (l < 0 || r > n - 1 || l > r) \n\t{\n\t\t//printf(\"Invalid Input\");\n\t\treturn -1;\n\t}\n\n\treturn MaxUtil(st, 0, n - 1, l, r, 0);\n}\n\n\nint constructSTUtil(int arr[], int ss, int se, \n\t\t\t\t\tint* st, int si)\n{\n\t\n\tif (ss == se) \n\t{\n\t\tst[si] = arr[ss];\n\t\treturn arr[ss];\n\t}\n\n\t\n\tint mid = getMid(ss, se);\n\t\n\tst[si] = max(constructSTUtil(arr, ss, mid, st, \n\t\t\t\t\t\t\t\tsi * 2 + 1),\n\t\t\t\tconstructSTUtil(arr, mid + 1, se, \n\t\t\t\t\t\t\t\tst, si * 2 + 2));\n\t\n\treturn st[si];\n}\n\n\nint* constructST(int arr[], int n)\n{\n\t// Height of segment tree\n\tint x = (int)(ceil(log2(n)));\n\n\t// Maximum size of segment tree\n\tint max_size = 2 * (int)pow(2, x) - 1;\n\n\t// Allocate memory\n\tint* st = new int[max_size];\n\n\t// Fill the allocated memory st\n\tconstructSTUtil(arr, 0, n - 1, st, 0);\n\n\t// Return the constructed segment tree\n\treturn st;\n}\n\n\n\n    vector<bool> getResults(vector<vector<int>>& q) {\n       \n        int n = min(5*10000+1,3*(int)q.size()+1);\n         int arr[n];\n         for(int i=0;i<n;i++){\n             arr[i]=0;\n         }\n      \n        // Build segment tree from given array\n        int* st = constructST(arr, n);\n\n     \n        set<int> s;\n       // map<int,int> mp;\n        s.insert(0);\n     \n        vector<bool> ans;\n        for(int i=0;i<q.size();i++){\n            if(q[i][0]==1){\n                int x=q[i][1];\n                if(s.size()==0 || x<*s.begin()){\n                    updateValue(arr, st, 0, n - 1, x,x, 0);\n                   // mp[x]=x;\n                    s.insert(x);\n                }\n                else if(x>*s.rbegin()){\n                   \n                    updateValue(arr, st, 0, n - 1, x,x-*s.rbegin(), 0);\n                    //cout<<x-*s.rbegin()<<endl;\n                     s.insert(x);\n                   // mp[x]=x-*v.rbegin();\n                }\n                else{\n                    int ub=*s.upper_bound(x);\n                    int lb=*(--s.upper_bound(x));\n                    //cout<<lb<<\" \"<<ub<<endl;\n                    updateValue(arr, st, 0, n - 1, x,x-lb, 0);\n                    updateValue(arr, st, 0, n - 1, ub,ub-x, 0);     \n                    s.insert(x);\n                }\n                \n            }\n            else{\n                 //cout<<getMax(st, n, 0, q[i][1])<<endl;\n                if(s.size()==1 || q[i][1]<*(++s.begin())){\n                    if(q[i][1]>=q[i][2])\n                    ans.push_back(true);\n                    else{\n                        ans.push_back(false);\n                    }\n                }\n                else if( q[i][1]>*(s.rbegin())){\n                    if(q[i][1]-*(s.rbegin())>=q[i][2] || getMax(st, n, 0, q[i][1])>=q[i][2])\n                    ans.push_back(true);\n                    else{\n                        ans.push_back(false);\n                    }\n                }\n                else if(q[i][1]-*(--s.upper_bound(q[i][1]))>=q[i][2] ||getMax(st, n, 0, q[i][1])>=q[i][2]){\n                    ans.push_back(true);\n                }\n                else{\n                    ans.push_back(false);\n                }\n                \n            }\n        }\n        \n       return ans;\n    }\n};",
    "submit_ts": 1716652251.0
}