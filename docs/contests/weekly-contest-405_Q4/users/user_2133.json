{
    "username": "SinghSona",
    "submission": "class Solution {\n    struct TrieNode {\n    unordered_map<char, TrieNode*> children;\n    int cost;\n    TrieNode() : cost(INT_MAX) {}\n};\n    void insertWord(TrieNode* root, const string& word, int cost) {\n    TrieNode* node = root;\n    for (char c : word) {\n        if (node->children.find(c) == node->children.end()) {\n            node->children[c] = new TrieNode();\n        }\n        node = node->children[c];\n    }\n    node->cost = min(node->cost, cost);\n}\n\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n       int n = target.size();\n    vector<int> dp(n + 1, INT_MAX);\n    dp[0] = 0; // Base case: cost to form an empty string is 0\n\n    // Build the Trie with words and their minimum costs\n    TrieNode* root = new TrieNode();\n    for (int i = 0; i < words.size(); ++i) {\n        insertWord(root, words[i], costs[i]);\n    }\n\n    // Dynamic programming with Trie optimization\n    for (int i = 0; i < n; ++i) {\n        if (dp[i] == INT_MAX) continue; // If dp[i] is still INT_MAX, skip it\n\n        TrieNode* node = root;\n        for (int j = i; j < n; ++j) {\n            if (node->children.find(target[j]) == node->children.end()) {\n                break; // No further match in the Trie\n            }\n            node = node->children[target[j]];\n            if (node->cost != INT_MAX) {\n                dp[j + 1] = min(dp[j + 1], dp[i] + node->cost);\n            }\n        }\n    }\n\n    return dp[n] == INT_MAX ? -1 : dp[n];\n    }\n};",
    "submit_ts": "1720321394",
    "subm_id": "1312321721"
}