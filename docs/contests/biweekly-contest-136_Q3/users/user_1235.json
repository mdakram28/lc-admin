{
    "username": "SoluMilken",
    "submission": "class Solution:\n    def minFlips(self, grid: List[List[int]]) -> int:\n        n_rows, n_cols = len(grid), len(grid[0])\n        total_flips = 0\n        \n        # count square\n        for row in range(n_rows // 2):\n            for col in range(n_cols // 2):\n                total_flips += self.count_flips_on_square(row, col, grid)\n                \n        # print(total_flips)\n\n        # count middle row and col\n        n_ones, n_flips = 0, 0 \n        if n_rows % 2 == 1:\n            cur_flips, cur_ones = self.count_flips_on_row(n_rows//2, grid)\n            n_ones += cur_ones\n            n_flips += cur_flips        \n        if n_cols % 2 == 1:\n            cur_flips, cur_ones = self.count_flips_on_col(n_cols//2, grid)\n            n_ones += cur_ones\n            n_flips += cur_flips\n        # print(n_ones, n_flips)\n\n        if n_ones % 4 == 2:\n            if n_flips == 0:\n                n_flips += 2\n        \n        if (n_rows % 2 == 1) and (n_cols % 2 == 1) and (grid[n_rows//2][n_cols//2] == 1):       \n            n_flips += 1\n            \n        return total_flips + n_flips\n        \n\n    def count_flips_on_square(self, row: int, col: int, grid: List[List[int]]) -> int:\n        n_rows, n_cols = len(grid), len(grid[0])\n        n_ones = 0\n        for cur_row, cur_col in [(row, col), (row, n_cols-1-col), (n_rows-1-row, col), (n_rows-1-row, n_cols-1-col)]:\n            if grid[cur_row][cur_col] == 1:\n                n_ones += 1\n        if n_ones == 4 or n_ones == 0:\n            return 0\n        if n_ones == 3 or n_ones == 1:\n            return 1\n        return 2\n               \n    def count_flips_on_row(self, row: int, grid: List[List[int]]) -> int:\n        n_cols = len(grid[0])\n        n_flips, n_ones = 0, 0\n        for col in range(n_cols // 2):\n            if grid[row][col] != grid[row][n_cols-1-col]:\n                n_flips += 1\n            else:\n                if grid[row][col] == 1:\n                    n_ones += 2\n        return n_flips, n_ones\n        \n    def count_flips_on_col(self, col: int, grid: List[List[int]]) -> int:\n        n_rows = len(grid)\n        n_flips, n_ones = 0, 0\n        for row in range(n_rows // 2):\n            if grid[row][col] != grid[n_rows-1-row][col]:\n                n_flips += 1\n            else:\n                if grid[row][col] == 1:\n                    n_ones += 2\n        return n_flips, n_ones",
    "submit_ts": "1722699054",
    "subm_id": "1343200121"
}