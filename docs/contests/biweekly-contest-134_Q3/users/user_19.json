{
    "username": "admiring-matsumotomgs",
    "submission": "#include <bits/stdc++.h>\n\nusing namespace std;\n\n#define len(x) ((int)((x).size()))\n#define PQ priority_queue\n#define all(x) (x).begin(), (x).end()\n// #define endl '\\n'\n\nusing ll = long long;\nusing ld = long double;\n\nconst array<int, 8> dx{0, -1, 0, 1, 1, 1, -1, -1};\nconst array<int, 8> dy{1, 0, -1, 0, 1, -1, 1, -1};\n\nmt19937_64 mrand(random_device{}());\n\ntemplate<class Info>\nstruct SegmentTree {\n    int n;\n    vector<Info> info;\n    SegmentTree(int n) : n(n), info(4 * n) {}\n    template <typename T>\n    SegmentTree(vector<T> init) : SegmentTree(init.size()) {\n        auto build = [&](auto build, int id, int l, int r) -> void {\n            if (r == l) {\n                info[id] = init[l];\n                return;\n            }\n            int m = (l + r) >> 1;\n            build(build, id << 1, l, m);\n            build(build, id << 1 | 1, m + 1, r);\n            pull(id);\n        };\n        build(build, 1, 0, n - 1);\n    }\n    void pull(int id) {\n        info[id] = info[id << 1] + info[id << 1 | 1];\n    }\n    void modify(int id, int l, int r, int p, const Info &v) {\n        if (r == l) {\n            info[id] += v;\n            return;\n        }\n        int m = (l + r) >> 1;\n        if (p <= m) {\n            modify(id << 1, l, m, p, v);\n        } else {\n            modify(id << 1 | 1, m + 1, r, p, v);\n        }\n        pull(id);\n    }\n    void modify(int p, const Info &v) {\n        modify(1, 0, n - 1, p, v);\n    }\n    Info rangeQuery(int id, int l, int r, int ql, int qr) {\n        if (qr < l || r < ql) {\n            return Info();\n        }\n        if (ql <= l && r <= qr) {\n            return info[id];\n        }\n        int m = (l + r) >> 1;\n\n        return rangeQuery(id << 1, l, m, ql, qr) + rangeQuery(id << 1 | 1, m + 1, r, ql, qr);\n    }\n    Info rangeQuery(int ql, int qr) {\n        return rangeQuery(1, 0, n - 1, ql, qr);\n    }\n\n};\n\n//\u5b58\u653e\u8282\u70b9\u6570\u636e,\u6ce8\u610f\u521d\u59cb\u5316\nstruct Info {\n    int L = -1, R = -2;\n    bool ok = true;\n    Info() {\n\n    }\n    Info(int x) {\n        L = R = x;\n        ok = true;\n    }\n};\n// \u76f8\u5f53\u4e8e\u4e24\u4e2a\u533a\u95f4\u7684\u5408\u5e76\nInfo operator+(Info a, Info b) {\n    Info ans;\n    ans.L = a.L;\n    ans.R = b.R;\n    ans.ok = a.ok && b.ok && (a.R != b.L);\n    return ans;\n}\n// \u5355\u70b9\u4fee\u6539\u7684\u903b\u8f91\nInfo &operator+=(Info &a, Info b) {\n    a = b;\n    return a;\n}\nclass Solution {\npublic:\n    int numberOfAlternatingGroups(vector<int>& c, int k) {\n        c.insert(c.end(), all(c));\n        int N = len(c);\n        SegmentTree<Info> seg(len(c));\n        for (int i = 0; i < N; i++ ) {\n            seg.modify(i, Info(c[i]));\n        }\n        int ans = 0;\n        for (int i = 0; i < N/2; i++) {\n            if(seg.rangeQuery(i,i+k-1).ok){\n                ans++;\n            }\n        }\n        return ans;\n    }\n};",
    "submit_ts": "1720277030",
    "subm_id": "544553988"
}