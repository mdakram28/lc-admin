{
    "username": "Ethan-ZYF",
    "submission": "#include <bits/stdc++.h>\nusing namespace std;\nusing i64 = long long;\n\n#ifdef LOCAL\n#include \"algo/debug.h\"\n#else\n#define debug(...)\n#endif\nstruct Trie {\n    static constexpr int ALPHABET = 26;\n\n    struct Node {\n        std::array<Node*, ALPHABET> next;\n        bool is_end;\n        int cost = 1e9;\n        int cnt;\n\n        Node() : next(), is_end(false), cost(1e9), cnt(0) {}\n    };\n\n    Node* root;\n\n    Trie() : root(new Node()) {}\n\n    void add(const std::string& s, int c) {\n        Node* p = root;\n        for (auto x : s) {\n            if (p->next[x - 'a'] == nullptr) {\n                p->next[x - 'a'] = new Node();\n            }\n            p = p->next[x - 'a'];\n            p->cnt++;\n        }\n        p->cost = min(p->cost, c);\n        debug(s, p->cost);\n        p->is_end = true;\n    }\n\n    int count(const std::string& s) {\n        Node* p = root;\n        for (auto x : s) {\n            if (p->next[x - 'a'] == nullptr) {\n                return 0;\n            }\n            p = p->next[x - 'a'];\n        }\n        return p->cnt;\n    }\n\n    bool find(const std::string& s) {\n        Node* p = root;\n        for (auto x : s) {\n            if (p->next[x - 'a'] == nullptr) {\n                return false;\n            }\n            p = p->next[x - 'a'];\n        }\n        return p->is_end;\n    }\n};\n\nclass Solution {\n   public:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int n = target.size();\n        int m = words.size();\n        vector<i64> dp(n + 1, 1e9);\n        Trie t;\n        for (int i = 0; i < m; i++) {\n            t.add(words[i], costs[i]);\n        }\n        dp[n] = 0;\n        for (int i = n - 1; i >= 0; i--) {\n            auto ptr = t.root;\n            for (int j = i; j < n; j++) {\n                if (ptr->next[target[j] - 'a'] == nullptr) {\n                    break;\n                }\n                ptr = ptr->next[target[j] - 'a'];\n                if (ptr->is_end) {\n                    dp[i] = min(dp[i], dp[j + 1] + ptr->cost);\n                }\n            }\n        }\n        return dp[0] == 1e9 ? -1 : dp[0];\n    }\n};",
    "submit_ts": "1720321545",
    "subm_id": "1312325743"
}