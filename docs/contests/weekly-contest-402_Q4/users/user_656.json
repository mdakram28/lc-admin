{
    "username": "shibzzz",
    "submission": "class SegTree {\npublic:\n    SegTree(const vector<int>& arr) \n    {\n        n = arr.size();\n        data = arr;\n        tree.resize(4 * n);\n        build(0, 0, n - 1);\n    }\n\n    void update(int index, int value) \n    {\n        data[index] = value;\n        update(0, 0, n - 1, index);\n        if (index > 0) \n            update(0, 0, n - 1, index - 1);\n        if (index < n - 1) \n            update(0, 0, n - 1, index + 1);\n    }\n\n    int query(int l, int r) {\n        return query(0, 0, n - 1, l, r);\n    }\n\nprivate:\n    vector<int> data;\n    vector<int> tree;\n    int n;\n\n    bool check(int i) \n    {\n        if (i <= 0 or i >= n - 1) \n            return false;\n        \n        return data[i] > data[i - 1] && data[i] > data[i + 1];\n    }\n\n    void build(int node, int start, int end) \n    {\n        if (start == end) \n            tree[node] = check(start) ? 1 : 0;\n        else \n        {\n            int mid = (start + end) / 2;\n            build(2 * node + 1, start, mid);\n            build(2 * node + 2, mid + 1, end);\n            tree[node] = tree[2 * node + 1] + tree[2 * node + 2];\n        }\n    }\n\n    void update(int node, int start, int end, int idx) \n    {\n        if (start == end) \n            tree[node] = check(start) ? 1 : 0;\n        else \n        {\n            int mid = (start + end) / 2;\n            if (start <= idx && idx <= mid) \n                update(2 * node + 1, start, mid, idx);\n            else\n                update(2 * node + 2, mid + 1, end, idx);\n            \n            tree[node] = tree[2 * node + 1] + tree[2 * node + 2];\n        }\n    }\n\n    int query(int node, int start, int end, int l, int r) \n    {\n        if (r < start or end < l) \n            return 0;\n        \n        if (l <= start and end <= r) \n            return tree[node];\n        \n        int mid = (start + end) / 2;\n        int ls = query(2 * node + 1, start, mid, l, r);\n        int rs = query(2 * node + 2, mid + 1, end, l, r);\n        return ls + rs;\n    }\n};\n\nclass Solution {\npublic:\n    vector<int> countOfPeaks(vector<int>& arr, vector<vector<int>>& queries) {\n        SegTree st(arr);\n        vector<int>ans;\n        \n        for (auto it : queries)\n        {\n            int type = it[0], u = it[1], v = it[2];\n            if (type == 1)\n                ans.push_back(st.query(u + 1, v - 1));\n            else\n                st.update(u, v);\n        }\n        \n        return ans;\n    }\n};",
    "submit_ts": 1718508146.0
}