{
    "username": "Pranav Todkar",
    "submission": "class Solution {\npublic:\n    static long long getMaxSum(const std::vector<std::pair<long long, int>>& row1, \n                        const std::vector<std::pair<long long, int>>& row2, \n                        const std::vector<std::pair<long long, int>>& row3) {\n        long long maxSum = (long long)INT_MIN*5;\n        for (const auto& v1 : row1) {\n            for (const auto& v2 : row2) {\n                if (v2.second == v1.second) continue;\n                for (const auto& v3 : row3) {\n                    if (v3.second == v1.second || v3.second == v2.second) continue;\n                    maxSum = std::max(maxSum, v1.first + v2.first + v3.first);\n                }\n            }\n        }\n        return maxSum;\n    }\n    long long maximumValueSum(vector<vector<int>>& board) {\n        int m = board.size();\n        int n = board[0].size();\n        \n        if (m < 3 && n < 3) {\n            return 0;\n        }\n        \n        std::vector<std::vector<std::pair<long long, int>>> top3(m);\n        \n        // Pre-compute top 3 values for each row\n        for (int i = 0; i < m; ++i) {\n            std::priority_queue<std::pair<long long, int>> pq;\n            for (int j = 0; j < n; ++j) {\n                pq.push({board[i][j], j});\n            }\n            for (int k = 0; k < 3 && !pq.empty(); ++k) {\n                top3[i].push_back(pq.top());\n                pq.pop();\n            }\n        }\n        \n        long long maxSum = (long long)INT_MIN*5;\n        \n        // Try all combinations of 3 rows\n        for (int i = 0; i < m; ++i) {\n            for (int j = i + 1; j < m; ++j) {\n                for (int k = j + 1; k < m; ++k) {\n                    maxSum = std::max(maxSum, getMaxSum(top3[i], top3[j], top3[k]));\n                }\n            }\n        }\n        \n        return maxSum;\n    }\n};",
    "submit_ts": "1723910001",
    "subm_id": "1359213611"
}