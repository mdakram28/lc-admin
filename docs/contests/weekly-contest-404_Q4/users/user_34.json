{
    "username": "dummycoder2014",
    "submission": "class Solution {\n    public int minimumDiameterAfterMerge(int[][] edges1, int[][] edges2) {\n        int n = edges1.length + 1, m = edges2.length + 1;\n        Tree tree1 = new Tree(n, edges1);\n        Tree tree2 = new Tree(m, edges2);\n\n        int diameter1 = tree1.getDiameter();\n        int diameter2 = tree2.getDiameter();\n\n        int maxDist1 = tree1.getMaxDistToDiameterEnds();\n        int maxDist2 = tree2.getMaxDistToDiameterEnds();\n\n        return Math.max(diameter1, Math.max(diameter2, (maxDist1 + 1) / 2 + (maxDist2 + 1) / 2 + 1));\n    }\n}\n\npublic class Tree {\n    int n;\n    List<Integer>[] adj;\n\n    public Tree(int n, int[][] edges) {\n        this.n = n;\n        adj = new ArrayList[n];\n        for (int i = 0; i < n; i++) {\n            adj[i] = new ArrayList<>();\n        }\n        for (int[] edge : edges) {\n            adj[edge[0]].add(edge[1]);\n            adj[edge[1]].add(edge[0]);\n        }\n    }\n\n    private int[] bfs(int start) {\n        Queue<Integer> queue = new LinkedList<>();\n        boolean[] visited = new boolean[n];\n        int[] dist = new int[n];\n\n        queue.add(start);\n        visited[start] = true;\n        dist[start] = 0;\n\n        int farthestNode = start;\n        while (!queue.isEmpty()) {\n            int node = queue.poll();\n            for (int neighbor : adj[node]) {\n                if (!visited[neighbor]) {\n                    queue.add(neighbor);\n                    visited[neighbor] = true;\n                    dist[neighbor] = dist[node] + 1;\n                    if (dist[neighbor] > dist[farthestNode]) {\n                        farthestNode = neighbor;\n                    }\n                }\n            }\n        }\n\n        return new int[]{farthestNode, dist[farthestNode]};\n    }\n\n    public int getDiameter() {\n        int[] firstBFS = bfs(0);\n        int[] secondBFS = bfs(firstBFS[0]);\n        return secondBFS[1];\n    }\n\n    public int getMaxDistToDiameterEnds() {\n        int[] firstBFS = bfs(0);\n        int[] secondBFS = bfs(firstBFS[0]);\n        int[] thirdBFS = bfs(secondBFS[0]);\n\n        return thirdBFS[1];\n    }\n}",
    "submit_ts": "1719716496",
    "subm_id": "1304366155"
}