{
    "username": "kmc89",
    "submission": "vector<int> dp;\n\nstruct Trie {\n    Trie* subs[26];\n    int cost = -1;\n\n    void insert(string& str, int c, int idx = 0) {\n        if (idx == str.size()) {\n            if (cost < 0) cost = c;\n            else cost = min(cost, c);\n            return;\n        }\n        if (!subs[str[idx]-'a']) {\n            subs[str[idx]-'a'] = new Trie();\n        }\n        subs[str[idx]-'a']->insert(str, c, idx+1);\n    }\n\n    void search(string& str, int base, int idx) {\n        if (dp[base] >= 0 && cost >= 0) {\n            if (dp[idx] < 0) dp[idx] = dp[base] + cost;\n            else dp[idx] = min(dp[idx], dp[base] + cost);\n        }\n            \n        if (idx == str.size()) return;\n        if (!subs[str[idx]-'a']) return;\n        subs[str[idx]-'a']->search(str, base, idx+1);\n    }\n\n};\n\nclass Solution {\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int len = target.size();\n        // unordered_set<string> dict;\n        Trie trie;\n        for (int i = 0; i < words.size(); i++)\n            trie.insert(words[i], costs[i]);\n\n        dp = vector<int>(len+1, -1);\n        dp[0] = 0;\n\n        for (int i = 0; i < len; i++) {\n            trie.search(target, i, i);\n        }\n\n        return dp[len];\n    }\n};",
    "submit_ts": "1720323123",
    "subm_id": "1312367844"
}