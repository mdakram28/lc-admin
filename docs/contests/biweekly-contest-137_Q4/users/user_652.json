{
    "username": "apiboy",
    "submission": "class Solution {\n public:\n  const int INF = 0x3f3f3f3f;\n  long long maximumValueSum(vector<vector<int>>& board) {\n    int n = board.size();\n    int m = board[0].size();\n    vector<vector<array<int, 3>>> dp(m, vector<array<int, 3>>(3));\n    set<array<int,3>> s2;\n    set<array<int,3>> s1;\n    for (int j = 0; j < m; ++j) {\n      vector<array<int, 3>> vec(n);\n      for (int i = 0; i < n; ++i) {\n        vec[i] = {board[i][j], i, j};\n      }\n      sort(vec.begin(), vec.end());\n      for (int k = 0; k < 3; ++k) {\n        dp[j][k] = vec[n - k - 1];\n      }\n      if (j >= 1) {\n        s2.insert(dp[j].begin(), dp[j].end());\n      }\n      if (j == 0) {\n        s1.insert(dp[j].begin(), dp[j].end());\n      }\n    }    \n    long long ans = -4LL * INF;\n    for (int j = 1; j < m - 1; ++j) {\n      for (int k = 0; k < 3; ++k) {\n        s2.erase(s2.find(dp[j][k]));\n      }\n      while (s1.size() > 10) {\n        s1.erase(s1.begin());\n      }\n      \n      for(auto& p1 : s1) {\n        for (auto& p2 : dp[j]) {\n          if (p1[1] == p2[1] || p1[2] == p2[2]) {\n            continue;\n          }\n          int k = 0;\n          for (auto it = s2.rbegin(); it != s2.rend(); ++it) {\n            auto& p3 = *it;\n            if (p1[1] == p3[1] || p1[2] == p3[2] || p2[1] == p3[1] || p2[2] == p3[2]) {\n              continue;\n            }\n            auto t = 1LL * p1[0] + 1LL * p2[0] + 1LL*p3[0];\n            ans = max(ans, t);\n\n            ++k;\n            if (k > 3) {\n              break;\n            }\n          }\n        }\n      }\n      s1.insert(dp[j].begin(), dp[j].end());\n    }\n    return ans;\n    // [[-1000000000, -1000000000, -1000000000],[-1000000000, -1000000000, -1000000000],[-1000000000, -1000000000, -1000000000]]\n  }\n};",
    "submit_ts": "1723909413",
    "subm_id": "556336128"
}