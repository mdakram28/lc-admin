{
    "username": "man-ray",
    "submission": "class Solution {\n      static class DSU {\n        DSU(int n) {\n            init(n);\n        }\n\n        private int[] p, sz;\n        int[] l, r;\n\n        void init(int n) {\n            p = new int[n];\n            sz = new int[n];\n            l = new int[n];\n            r = new int[n];\n            for (int i = 0; i < n; i++) {\n                p[i] = i;\n                sz[i] = 1;\n                l[i] = r[i] = i;\n            }\n        }\n\n        //\u7528\u4e8e\u8fde\u63a5\u4e24\u4e2a\u8fde\u901a\u5206\u91cf\n        void union(int x, int y) {\n            x = find(x);\n            y = find(y);\n            if (x == y) return;\n            sz[x] += sz[y];\n            l[x] = Math.min(l[x], l[y]);\n            r[x] = Math.max(r[x], r[y]);\n            p[y] = x;\n        }\n\n        //\u7528\u4e8e\u67e5\u8be2\u67d0\u4e2a\u5143\u7d20\u6240\u5728\u8fde\u901a\u5206\u91cf\u7684\u6839\u8282\u70b9\n        int find(int x) {\n            while (p[x] != x) {\n                p[x] = p[p[x]];\n                x = p[x];\n            }\n            return x;\n        }\n\n        //\u67e5\u8be2\u4e24\u4e2a\u5143\u7d20\u662f\u5426\u5728\u540c\u4e00\u8fde\u901a\u5206\u91cf\u4e2d\n        boolean same(int x, int y) {\n            return find(x) == find(y);\n        }\n\n        //\u8fd4\u56de x \u6240\u5728\u8fde\u901a\u5206\u91cf\u7684\u5143\u7d20\u4e2a\u6570\n        int size(int x) {\n            return sz[find(x)];\n        }\n    }\n\n\n    static int[] shortestDistanceAfterQueries(int n, int[][] queries) {\n        int m = queries.length;\n        int[] ans = new int[m];\n        int curr = n - 1;\n        DSU dsu = new DSU(n);\n        for (int i = 0; i < m; i++) {\n            int l = queries[i][0] + 1, r = queries[i][1];\n            if (dsu.same(l, r)) {\n                ans[i] = ans[i - 1];\n                continue;\n            }\n            int x = l;\n             List<Integer> list = new ArrayList<>();\n            while (x < r) {\n                int p = dsu.find(x);\n                curr += dsu.r[p] - dsu.l[p];\n                x = dsu.r[p] + 1;\n                list.add(p);\n            }\n            int sz = list.size();\n            if (sz > 0) {\n                dsu.union(l, list.get(0));\n                dsu.union(r, list.get(0));\n            }\n            for (int j = 0; j < sz - 1; j++) {\n                int i1 = list.get(j), i2 = list.get(j + 1);\n                dsu.union(i1, i2);\n            }\n            curr -= r - l;\n            ans[i] = curr;\n\n        }\n\n       // for (int d : ans) System.out.print(d + \" \");\n        return ans;\n\n    }\n}",
    "submit_ts": "1722743267",
    "subm_id": "552349787"
}