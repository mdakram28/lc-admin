{
    "username": "shreeyanshkumar",
    "submission": "\nclass Solution {\npublic:\n    long long minimumCost(int m, int n, std::vector<int>& horizontalCut, std::vector<int>& verticalCut) {\n     sort(horizontalCut.begin(), horizontalCut.end(), std::greater<int>());\n     sort(verticalCut.begin(), verticalCut.end(), std::greater<int>());\n        \n        int horizontalSegments = 1, verticalSegments = 1;\n        long long totalCost = 0;\n        \n        int i = 0, j = 0;\n        \n        while (i < horizontalCut.size() && j < verticalCut.size()) {\n            if (horizontalCut[i] >= verticalCut[j]) {\n                totalCost += (long long)horizontalCut[i] * verticalSegments;\n                horizontalSegments++;\n                i++;\n            } else {\n                totalCost += (long long)verticalCut[j] * horizontalSegments;\n                verticalSegments++;\n                j++;\n            }\n        }\n        \n        while (i < horizontalCut.size()) {\n            totalCost += (long long)horizontalCut[i] * verticalSegments;\n            i++;\n        }\n        \n        while (j < verticalCut.size()) {\n            totalCost += (long long)verticalCut[j] * horizontalSegments;\n            j++;\n        }\n        \n        return totalCost;\n    }\n};\n",
    "submit_ts": "1720925618",
    "subm_id": "1320260692"
}