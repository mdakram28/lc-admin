{
    "username": "yi-meng-wei-ma-w7",
    "submission": "class SegmentTree:\n    def __init__(self, n):\n        self.n = n\n        self.tree = [0] * (4 * n)\n        self.nums = [0] * n\n    \n    def build(self, nums):\n        self.nums = nums\n        self._build(0, 0, self.n - 1)\n    \n    def _build(self, node, start, end):\n        if start == end:\n            self.tree[node] = 1 if self.is_peak(start) else 0\n        else:\n            mid = (start + end) // 2\n            left_child = 2 * node + 1\n            right_child = 2 * node + 2\n            self._build(left_child, start, mid)\n            self._build(right_child, mid + 1, end)\n            self.tree[node] = self.tree[left_child] + self.tree[right_child]\n    \n    def is_peak(self, i):\n        if i == 0 or i == self.n - 1:\n            return False\n        return self.nums[i] > self.nums[i - 1] and self.nums[i] > self.nums[i + 1]\n    \n    def update(self, idx, value):\n        self.nums[idx] = value\n        for i in range(max(1, idx-1), min(self.n-1, idx+2)):\n            self._update(0, 0, self.n - 1, i)\n    \n    def _update(self, node, start, end, idx):\n        if start == end:\n            self.tree[node] = 1 if self.is_peak(start) else 0\n        else:\n            mid = (start + end) // 2\n            left_child = 2 * node + 1\n            right_child = 2 * node + 2\n            if start <= idx <= mid:\n                self._update(left_child, start, mid, idx)\n            else:\n                self._update(right_child, mid + 1, end, idx)\n            self.tree[node] = self.tree[left_child] + self.tree[right_child]\n    \n    def query(self, l, r):\n        if l > r:\n            return 0\n        return self._query(0, 0, self.n - 1, l, r)\n    \n    def _query(self, node, start, end, l, r):\n        if r < start or end < l:\n            return 0\n        if l <= start and end <= r:\n            return self.tree[node]\n        mid = (start + end) // 2\n        left_child = 2 * node + 1\n        right_child = 2 * node + 2\n        left_query = self._query(left_child, start, mid, l, r)\n        right_query = self._query(right_child, mid + 1, end, l, r)\n        return left_query + right_query\n\nclass Solution:\n    def countOfPeaks(self, nums: List[int], queries: List[List[int]]) -> List[int]:\n        n = len(nums)\n        seg_tree = SegmentTree(n)\n        seg_tree.build(nums)\n        \n        result = []\n        for query in queries:\n            if query[0] == 1:\n                li, ri = query[1], query[2]\n                if li == ri or li + 1 == ri:\n                    result.append(0)\n                else:\n                    result.append(seg_tree.query(li + 1, ri - 1))\n            elif query[0] == 2:\n                indexi, vali = query[1], query[2]\n                seg_tree.update(indexi, vali)\n        \n        return result   ",
    "submit_ts": 1718507025.0
}