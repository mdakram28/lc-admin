{
    "username": "athamante",
    "submission": "class Solution:\n    def minimumCost(self, m: int, n: int, horizontalCut: List[int], verticalCut: List[int]) -> int:\n        # vert_costs = sorted([(i, verticalCut[i]) for i in range(n - 1)], key = lambda p: -p[1])\n        # horiz_costs = sorted([(i, horizontalCut[i]) for i in range(m - 1)], key = lambda p: -p[1])\n        verticalCut.sort()\n        horizontalCut.sort()\n        horiz_pieces = 1\n        vert_pieces = 1\n        total_cost = 0\n        while horiz_pieces < m or vert_pieces < n:\n            # if not vert_costs:\n            if not verticalCut:\n                # ind, cost = horiz_costs.pop(0)\n                cost = horizontalCut.pop(-1)\n                total_cost += cost * vert_pieces\n                horiz_pieces += 1\n            # elif not horiz_costs:\n            elif not horizontalCut:\n                # ind, cost = vert_costs.pop(0)\n                cost = verticalCut.pop(-1)\n                total_cost += cost * horiz_pieces\n                vert_pieces += 1\n            else:\n                if horizontalCut[-1] < verticalCut[-1]:\n                # if horiz_costs[0][1] < vert_costs[0][1]:\n                    cost = verticalCut.pop(-1)\n                    # ind, cost = vert_costs.pop(0)\n                    total_cost += cost * horiz_pieces\n                    vert_pieces += 1\n                else:\n                    cost = horizontalCut.pop(-1)\n                    # ind, cost = horiz_costs.pop(0)\n                    total_cost += cost * vert_pieces\n                    horiz_pieces += 1\n        return total_cost",
    "submit_ts": "1720926027",
    "subm_id": "1320273721"
}