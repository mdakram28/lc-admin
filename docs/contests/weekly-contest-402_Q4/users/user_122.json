{
    "username": "tungduong150105",
    "submission": "template <class Info, class Merge = std::plus<Info>>\nstruct SegmentTree {\n    int n;\n    Merge merge;\n    std::vector<Info> info;\n    SegmentTree(int _n) : merge(Merge()) {\n        init(_n);\n    }\n    void init(int _n) {\n        n = _n;\n        info.resize(4 << std::__lg(n), Info());\n    }\n    void push(int p) {\n        info[p] = merge(info[2 * p], info[2 * p + 1]);\n    }\n    void modify(int p, int l, int r, int x, Info v) {\n        if (r - l == 1) {\n            info[p] = v;\n            return;\n        }\n        int m = (l + r) / 2;\n        if (x < m) {\n            modify(2 * p, l, m, x, v);\n        } else {\n            modify(2 * p + 1, m, r, x, v);\n        }\n        push(p);\n    }\n    void modify(int x, Info v) {\n        modify(1, 0, n, x, v);\n    }\n    Info rangeQuery(int p, int l, int r, int x, int y) {\n        if (l >= y || r <= x) {\n            return Info();\n        }\n        if (x <= l && r <= y) {\n            return info[p];\n        }\n        int m = (l + r) / 2;\n        return merge(rangeQuery(2 * p, l, m, x, y), rangeQuery(2 * p + 1, m, r, x, y));\n    }\n    Info rangeQuery(int l, int r) {\n        return rangeQuery(1, 0, n, l, r);\n    }\n};\nconstexpr int inf = 1E9;\nstruct Info {\n    int val, l, ll, rr, r;\n    Info(int _val = 0, int _l = inf, int _ll = inf, int _rr = inf, int _r = inf) : val(_val), l(_l), ll(_ll), rr(_rr), r(_r) {}\n};\nstruct Merge {\n    Info operator()(const Info &lhs, const Info &rhs) const {\n        return Info(lhs.val + rhs.val + (lhs.r > lhs.rr && lhs.r > rhs.l) + (rhs.l > rhs.ll && rhs.l > lhs.r),\n                    lhs.l,\n                    lhs.ll == inf ? (rhs.rr == inf ? rhs.r : rhs.rr) : lhs.ll,\n                    rhs.rr == inf ? (lhs.ll == inf ? lhs.l : lhs.ll) : rhs.rr,\n                    rhs.r\n                   );\n    };\n};\nclass Solution {\npublic:\n    vector<int> countOfPeaks(vector<int>& a, vector<vector<int>>& q) {\n        int n = (int) a.size();\n        SegmentTree<Info, Merge> seg(n);\n        for (int i = 0; i < n; ++i) {\n            seg.modify(i, Info(0, a[i], inf, inf, a[i]));\n        }\n        std::vector<int> ans;\n        for (auto v : q) {\n            if (v[0] == 1) {\n                int l = v[1], r = v[2];\n                // ans.push_back(1);\n                ans.push_back(seg.rangeQuery(l, r + 1).val);\n            } else {\n                seg.modify(v[1], Info(0, v[2], inf, inf, v[2]));\n            }\n        }\n        return ans;\n    }\n};",
    "submit_ts": "1718506710",
    "subm_id": "1289628455"
}