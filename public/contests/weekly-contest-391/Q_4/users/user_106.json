{
    "username": "07dishwasherbob8",
    "submission": "class Solution {\n    \nint getdist(int a, int b, vector<vector<int>> &points) {\n    pair<int,int> bl = {points[a][0], points[a][1]};\n    pair<int,int> ur = {points[b][0], points[b][1]};\n    return abs(bl.first - ur.first) + abs(bl.second - ur.second);\n}\n    \npair<int,int> findmaxdist(vector<vector<int>> &points) {\n    pair<int,int> bl = {1e9,-1};\n    pair<int,int> ur = {-1e9,-1};\n    pair<int,int> ul = {-1e9,-1};\n    pair<int,int> br = {-1e9,-1};\n\n    for(int i = 0; i < points.size(); i++) {\n        int x = points[i][0];\n        int y = points[i][1];\n        if(x + y < bl.first) {\n            bl = {x + y, i};\n        }\n        if(y - x > ul.first) {\n            ul = {y - x, i};\n        }\n        if(x - y > br.first) {\n            br = {x - y, i};\n        }\n        if(x + y > ur.first) {\n            ur = {x + y, i};\n        }\n    }\n    int a = bl.second;\n    int b = ur.second;\n    int c = ul.second;\n    int d = br.second;\n    if(getdist(bl.second, ur.second, points) > getdist(ul.second, br.second, points)) {\n        return {bl.second, ur.second};\n    } else {\n        return {ul.second, br.second};\n    }\n}\n    \nint rem(vector<vector<int>> points, int i) {\n    points.erase(points.begin() + i);\n    pair<int,int> p = findmaxdist(points);\n    return getdist(p.first,p.second,points);\n}\n    \npublic:\n    int minimumDistance(vector<vector<int>>& points) {\n        pair<int,int> p = findmaxdist(points);\n        // cout << \"p : \" << p.first << \" \" << p.second << '\\n';\n        return min(rem(points, p.first), rem(points, p.second));\n    }\n};"
}