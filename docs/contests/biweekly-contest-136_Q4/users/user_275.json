{
    "username": "cm_komi",
    "submission": "class Solution {\npublic:\n    vector<int> timeTaken(vector<vector<int>>& edges) {\n        int n = edges.size() + 1;\n        vector< vector<int> > graph(n);\n        for( auto i : edges){\n            graph[i[0]].push_back(i[1]);\n            graph[i[1]].push_back(i[0]);\n        }\n        vector< multiset<int> > brr(n);\n        \n        \n\t    // lambda expression for dfs call\t\n        vector<int> dp(n);\n\t    function< void(int,int)> dfs1 = [&](int curr,int par) {\n            int time = 0;\n            \n            for( int i : graph[curr]){\n                if( i != par){\n                    dfs1(i , curr);\n                    brr[curr].insert( dp[i] + (i%2 == 0 ? 2 : 1));\n                    time = max( time , dp[i] + (i%2 == 0 ? 2 : 1) );\n                }\n            }\n            \n            dp[curr] = time ;\n\t    };\n        dfs1(0,-1);\n\n        vector<int> ans(n);\n        ans[0] = dp[0] ;\n        \n        function< void(int,int)> dfs2 = [&](int curr,int par) {\n            \n            brr[par].erase( brr[par].find( dp[curr] + (curr%2 == 0?2:1) ));\n            int par_side =  0;\n            \n            if( brr[par].size()){             \n                par_side = *brr[par].rbegin();\n            }\n            par_side += (par % 2 == 0?2:1);\n                \n            brr[par].insert( dp[curr] + (curr%2 == 0 ?2:1));\n            \n            brr[curr].insert(par_side);\n            ans[curr] = *brr[curr].rbegin(); \n            \n            for( int i : graph[curr]){\n                if( i != par){\n                    dfs2(i ,curr);\n                }\n            }\n        };\n        for( int i : graph[0]){\n            dfs2(i,0);\n        }\n        return ans;\n\n\n    }\n};",
    "submit_ts": "1722698249",
    "subm_id": "1343174528"
}