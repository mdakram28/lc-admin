{
    "username": "sankalps19",
    "submission": "class Solution:\n    def compute(self, arr, k):\n        b = ['0']*32\n        for i in range(32):\n            if arr[i] == k:\n                b[i] = '1'\n        return int(''.join(b), 2)\n    def minimumDifference(self, nums: List[int], target: int) -> int:\n        i, j = 0, 0\n        n = len(nums)\n        minDiff = 10**9\n        bits = [0]*32\n        while j<n:\n            num = '{:032b}'.format(nums[j])\n            for k in range(32):\n                if num[k] == '1':\n                    bits[k] += 1\n            currAnd = self.compute(bits, j-i+1)\n            while i<=j and currAnd < target:\n                minDiff = min(minDiff, target - currAnd)\n                num = '{:032b}'.format(nums[i])\n                for k in range(32):\n                    if num[k] == '1':\n                        bits[k] -= 1\n                i+=1\n                currAnd = self.compute(bits, j-i+1)\n            if currAnd==target:\n                return 0\n            if currAnd>target:\n                minDiff = min(minDiff, currAnd - target)\n                j+=1\n        return minDiff",
    "submit_ts": "1717299645",
    "subm_id": "1274819245"
}