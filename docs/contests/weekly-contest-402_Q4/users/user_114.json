{
    "username": "nameless-chessfoot",
    "submission": "class NumArray {\nprivate:\n    static const int df=0,n=100000;\n    int op(int a,int b){\n        return a+b;\n    }\n    int t[4*n]={};\n\n    void build(int l,int r,int idx,vector<int> &nums){\n        if(l==r){\n            t[idx]=nums[l-1];\n            return;\n        }\n\n        int m=l+(r-l)/2;\n        build(l,m,idx*2,nums);\n        build(m+1,r,idx*2+1,nums);\n        t[idx]=t[idx*2]+t[idx*2+1];\n    }\n    void mod(int idx,int f,int t,int l,int r,int val){\n        if(f>r||t<l) return;\n        if(l<=f&&t<=r){\n            (this->t)[idx]=val;\n            return;\n        }\n        int m=f+(t-f)/2;\n        (this->t)[idx]=df;\n        if(f<=m){\n            mod(idx*2,f,m,l,r,val);\n            (this->t)[idx]=op((this->t)[idx],(this->t)[idx*2]);\n        }\n        if(m+1<=t){\n            mod(idx*2+1,m+1,t,l,r,val);\n            (this->t)[idx]=op((this->t)[idx],(this->t)[idx*2+1]);\n        }\n    }\n    int get(int idx,int f,int t,int l,int r){\n        if(f>r||t<l) return 0;\n        if(l<=f&&t<=r){\n            return (this->t)[idx];\n        }\n        int m=f+(t-f)/2;\n        return op(get(idx*2,f,m,l,r),get(idx*2+1,m+1,t,l,r));\n    }\npublic:\n    int pn;\n    NumArray(vector<int>& nums) {\n        pn=nums.size();\n        if(1<=pn){\n            build(1,pn,1,nums);\n        }\n    }\n    \n    void update(int index, int val) {\n        mod(1,1,pn,index+1,index+1,val);\n    }\n    \n    int sumRange(int left, int right) {\n        return get(1,1,pn,left+1,right+1);\n    }\n};\n\nclass Solution {\npublic:\n    vector<int> countOfPeaks(vector<int>& nums, vector<vector<int>>& qrs) {\n        int n=nums.size();\n        vector<int> pk(n);\n        auto ip=[&](int i){\n            return i-1>=0&&i+1<n&&nums[i]>nums[i-1]&&nums[i]>nums[i+1];\n        };\n        for(int i=1;i+1<n;++i){\n            if(ip(i)){\n                pk[i]=1;\n            }\n        }\n        NumArray nr(pk);\n        vector<int> ans;\n        for(auto &qr:qrs){\n            if(qr[0]==1){\n                int l=qr[1], r=qr[2];\n                ans.push_back(nr.sumRange(l+1, r-1));\n            }\n            else{\n                int idx = qr[1], val = qr[2];\n                nums[idx]=val;\n                if(idx-1>=0){\n                    nr.update(idx-1, ip(idx-1));\n                }\n                nr.update(idx, ip(idx));\n                if(idx+1<n){\n                    nr.update(idx+1, ip(idx+1));\n                }\n            }\n        }\n        return ans;\n    }\n};",
    "submit_ts": 1718506669.0
}