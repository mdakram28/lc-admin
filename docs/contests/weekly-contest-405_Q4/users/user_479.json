{
    "username": "lit2019033",
    "submission": "struct TrieNode {\n    unordered_map<char, TrieNode*> children;\n    int cost;\n    TrieNode() : cost(INT_MAX) {}\n};\n\nclass Solution {\npublic:\n\n    void insert(TrieNode* root, const string& word, int cost) {\n        TrieNode* node = root;\n        for (char ch : word) {\n            if (!node->children.count(ch)) {\n                node->children[ch] = new TrieNode();\n            }\n            node = node->children[ch];\n        }\n        node->cost = min(node->cost, cost);\n    }\n    int minimumCost(string t, vector<string>& w, vector<int>& c) {\n        int n = t.size();\n        vector<int> dp(n + 1, INT_MAX);\n        dp[0] = 0;\n\n        TrieNode* root = new TrieNode();\n        for (int i = 0; i < w.size(); ++i) {\n            insert(root, w[i], c[i]);\n        }\n\n        for (int i = 0; i < n; ++i) {\n            if (dp[i] == INT_MAX) continue;\n\n            TrieNode* node = root;\n            for (int j = i; j < n; ++j) {\n                if (!node->children.count(t[j])) break;\n                node = node->children[t[j]];\n                if (node->cost != INT_MAX) {\n                    dp[j + 1] = min(dp[j + 1], dp[i] + node->cost);\n                }\n            }\n        }\n\n        return dp[n] == INT_MAX ? -1 : dp[n];\n    \n    }\n};",
    "submit_ts": "1720322546",
    "subm_id": "1312352803"
}