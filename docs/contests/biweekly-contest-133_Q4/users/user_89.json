{
    "username": "Numerator_429",
    "submission": "import java.util.Arrays;\n\nclass Solution {\n    private static final int MOD = 1000000007;\n\n    public int numberOfPermutations(int n, int[][] requirements) {\n        int[][] dp = new int[n + 1][n * (n - 1) / 2 + 1];\n        dp[0][0] = 1;\n\n        for (int i = 1; i <= n; i++) {\n            int[] prefixSums = new int[n * (n - 1) / 2 + 2];\n            for (int j = 0; j <= n * (n - 1) / 2; j++) {\n                prefixSums[j + 1] = (prefixSums[j] + dp[i - 1][j]) % MOD;\n            }\n            for (int j = 0; j <= n * (n - 1) / 2; j++) {\n                dp[i][j] = prefixSums[j + 1];\n                if (j >= i) {\n                    dp[i][j] = (dp[i][j] - prefixSums[j - i + 1] + MOD) % MOD;\n                }\n            }\n        }\n\n        int[] cnt = new int[n];\n        Arrays.fill(cnt, -1);\n        for (int[] req : requirements) {\n            cnt[req[0]] = req[1];\n        }\n\n        int[][] dp2 = new int[n + 1][n * (n - 1) / 2 + 1];\n        dp2[0][0] = 1;\n\n        for (int i = 1; i <= n; i++) {\n            int[] prefixSums2 = new int[n * (n - 1) / 2 + 2];\n            for (int j = 0; j <= n * (n - 1) / 2; j++) {\n                prefixSums2[j + 1] = (prefixSums2[j] + dp2[i - 1][j]) % MOD;\n            }\n            for (int j = 0; j <= n * (n - 1) / 2; j++) {\n                dp2[i][j] = prefixSums2[j + 1];\n                if (j >= i) {\n                    dp2[i][j] = (dp2[i][j] - prefixSums2[j - i + 1] + MOD) % MOD;\n                }\n                if (cnt[i - 1] != -1 && cnt[i - 1] != j) {\n                    dp2[i][j] = 0;\n                }\n            }\n        }\n\n        int ans = 0;\n        for (int j = 0; j <= n * (n - 1) / 2; j++) {\n            ans = (ans + dp2[n][j]) % MOD;\n        }\n\n        return ans;\n    }\n}\n",
    "submit_ts": "1719067902",
    "subm_id": "1296745234"
}