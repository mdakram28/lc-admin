{
    "username": "Kpaxtime",
    "submission": "public class Solution {\n    public long MaximumValueSum(int[][] board) {\n                //Sum up max row values\n        var maxRowValues = new long[board.Length];\n        for(int i = 0; i < board.Length; i++)\n        {\n            var max = Int64.MinValue;\n            for(int j = 0; j < board[0].Length; j++)\n            {\n                max = Math.Max(max, board[i][j]);\n            }\n            maxRowValues[i] = max;\n        }\n        //Sum up max col values\n        var maxColValues = new long[board[0].Length];\n        for(int i = 0; i < board[0].Length; i++)\n        {\n            var max = Int64.MinValue;\n            for(int j = 0; j < board.Length; j++)\n            {\n                max = Math.Max(max, board[j][i]);\n            }\n            maxColValues[i] = max;\n        }\n\n        //Add top six row values\n        var rowMaxes = new List<int>();\n        var colMaxes = new List<int>();\n        var index = 0;\n        var rowPQueue = new PriorityQueue<int, long>();\n        var colPQueue = new PriorityQueue<int, long>();\n        while(index < maxRowValues.Length)\n        {\n            rowPQueue.Enqueue(index, -maxRowValues[index]);\n            index++;\n        }\n        \n        index = 0;\n        while(index < maxColValues.Length)\n        {\n            colPQueue.Enqueue(index, -maxColValues[index]);\n            index++;\n        }\n\n        var count = 10;\n        \n\n        while(rowPQueue.Count > 0 && count > 0)\n        {\n            //Console.WriteLine($\"Adding {pQueue.Peek()}\");\n            rowMaxes.Add(rowPQueue.Dequeue());\n            count--;\n        }\n        count = 7;\n\n        while(colPQueue.Count > 0 && count > 0)\n        {\n            //Console.WriteLine($\"Adding {pQueue.Peek()}\");\n            colMaxes.Add(colPQueue.Dequeue());\n            count--;\n        }\n\n\n        \n        var usedColumns = new List<int>();\n        var usedRows = new List<int>();\n        var dict = new Dictionary<(int, string, string), long>();\n\n        return DP(0, board, usedColumns, usedRows, rowMaxes, colMaxes, dict);\n    }\n\n    public long DP(int rooksPlaced, int[][] board, List<int> claimedColumns, List<int> claimedRows, List<int> rowMaxes, List<int> colMaxes, Dictionary<(int, string, string), long> dict)\n    {\n        claimedColumns.Sort();\n        claimedRows.Sort();\n        var cols = String.Join(\",\", claimedColumns);\n        var rows = String.Join(\",\", claimedRows);\n        if(dict.ContainsKey((rooksPlaced, cols, rows)))\n        {\n            return dict[(rooksPlaced, cols, rows)];\n        }\n        else if(rooksPlaced == 3)\n        {\n            return 0;\n        }\n        else\n        {\n            long max = Int64.MinValue;\n            foreach(var row in rowMaxes)\n            {\n                foreach(var col in colMaxes)\n                {\n                    if(!claimedColumns.Contains(col) && !claimedRows.Contains(row))\n                    {\n                        claimedColumns.Add(col);\n                        claimedRows.Add(row);\n                        max = Math.Max(max, board[row][col] + DP(rooksPlaced + 1, board, claimedColumns, claimedRows, rowMaxes, colMaxes, dict));\n                        claimedColumns.Remove(col);\n                        claimedRows.Remove(row);\n                    }\n                }\n            }\n            //Console.WriteLine($\"rooksPlaced: {rooksPlaced} cols: {cols} rows: {rows} max: {max}\");\n            dict[(rooksPlaced, cols, rows)] = max;\n            return max;\n        }\n    }\n}",
    "submit_ts": "1723910200",
    "subm_id": "1359221098"
}