{
    "username": "Manjunath_123",
    "submission": "class Solution {\npublic:\n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n        int n = edges1.size() + 1 , m = edges2.size()+1;\n        vector<vector<int>> adjacent1(n) ,adjacent2(m);\n\n        for(auto i : edges1){\n            adjacent1[i[0]].push_back(i[1]);\n            adjacent1[i[1]].push_back(i[0]);\n        }    \n        for(auto i :edges2){\n            adjacent2[i[0]].push_back(i[1]);\n            adjacent2[i[1]].push_back(i[0]);\n        }\n\n        auto dfs = [](const vector<vector<int>>& adjacent,int start, int& farNode){\n            int n = adjacent.size();\n            vector<int> dist(n,-1);\n\n            function<void(int,int)>\n            dfsVisit = [&](int node,int d){\n                dist[node] = d;\n                if(d > dist[farNode]){\n                    farNode = node;\n                }\n                for(auto neigh : adjacent[node]){\n                    if(dist[neigh]==-1){\n                        dfsVisit(neigh,d+1);\n                    }\n                }\n            };\n            farNode = start;\n            dfsVisit(start,0);\n            return dist[farNode];\n        };\n\n        int farNode1 = 0;\n        dfs(adjacent1,0,farNode1);\n        int dia1 = dfs(adjacent1,farNode1,farNode1);\n\n        int farNode2 = 0;\n        dfs(adjacent2,0,farNode2);\n        int dia2 = dfs(adjacent2,farNode2,farNode2);\n        \n        int minD = max(dia1,dia2);\n\n        int half1 = (dia1+1)/2;\n        int half2 = (dia2+1)/2;\n        \n        minD = max(minD , half1+half2+1);\n\n        return minD;\n    }\n};",
    "submit_ts": "1719718713",
    "subm_id": "1304424199"
}