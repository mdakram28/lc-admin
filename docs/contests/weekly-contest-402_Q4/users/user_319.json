{
    "username": "hungt1",
    "submission": "struct FenwickTree {\n    vector<int> bit;\n    int n;\n\n    FenwickTree(int n) {\n        this->n = n;\n        bit.assign(n + 1, 0);\n    }\n\n    void update(int i, int val) {\n        for (; i <= n; i += i&-i) {\n            bit[i] += val;\n        }\n    }\n\n    int get(int i) {\n        int res = 0;\n        for (; i > 0; i -= i&-i) {\n            res += bit[i];\n        }\n        return res;\n    }\n};\nclass Solution {\npublic:\n    vector<int> countOfPeaks(vector<int>& nums, vector<vector<int>>& queries) {\n        int n = nums.size();\n        \n        auto get = [&](int i) -> int {\n            if (i <= 0 || i >= n - 1) {\n                return 0;\n            }\n\n            return nums[i] > nums[i - 1] && nums[i] > nums[i + 1];\n        };\n\n        FenwickTree ft(n);\n        for (int i = 0; i < n; i++) {\n            ft.update(i + 1, get(i));\n        }\n\n        vector<int> res;\n        for (auto& q: queries) {\n            if (q[0] == 1) {\n                int l = q[1] + 1;\n                int r = q[2];\n                res.push_back((l <= r) ? ft.get(r) - ft.get(l) : 0);\n            } else {\n                int x = q[1];\n                int y = q[2];\n                \n                vector<int> prev = {get(x - 1), get(x), get(x + 1)};\n                nums[x] = y;\n                vector<int> cur = {get(x - 1), get(x), get(x + 1)};\n                for (int i = -1; i <= 1; i++) {\n                    if (x + i >= 0 && x + i < n) {\n                        ft.update(x + i + 1, cur[i + 1] - prev[i + 1]);\n                    }\n                }\n            }\n        }     \n\n        return res;\n    }\n};",
    "submit_ts": 1718506352.0
}