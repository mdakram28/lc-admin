{
    "username": "Marmaduke",
    "submission": "class Solution {\npublic:\n    vector<int> locate(const string& needle, const string& haystack)\n    {\n        int m = needle.size();\n        int n = haystack.size();\n\n        vector<int> res;\n\n        vector<int> s;\n        s.reserve(m+n+2);\n        for(int i = 0; i < m; i++)\n        {\n            s.push_back((int)needle[i]);\n        }\n        s.push_back((int)(1e9+7));\n        for(int i = 0; i < n; i++)\n        {\n            s.push_back((int)haystack[i]);\n        }\n        vector<int> pi(s.size());\n        pi[0] = 0;\n        for(int i = 1; i < s.size(); i++)\n        {\n            int j = pi[i-1];\n            while(j > 0 && s[i] != s[j])\n            {\n                j = pi[j-1];\n            }\n            pi[i] = (s[i] == s[j]) ? j+1 : 0;\n        }\n\n        for(int i = m+1; i < s.size(); i++)\n        {\n            if(pi[i] == m)\n            {\n                int t = i - (2*m);\n                res.push_back(t);\n            }\n        }\n\n        return res;\n    }\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        map<string,int> master;\n        const int big = 1e9+7;\n        for(int i = 0; i < words.size(); i++)\n        {\n            master[words[i]] = big;\n        }\n        for(int i = 0; i < words.size(); i++)\n        {\n            master[words[i]] = min(master[words[i]], costs[i]);\n        }\n        words.clear();\n        costs.clear();\n        for(auto &p : master)\n        {\n            words.push_back(p.first);\n            costs.push_back(p.second);\n        }\n        \n        int n = words.size();\n        vector<vector<int>> pos(n);\n        for(int i = 0; i < n; i++)\n        {\n            pos[i] = locate(words[i], target);\n        }\n        \n        int m = target.length();\n        vector<vector<int>> E(m);\n        for(int i = 0; i < n; i++)\n        {\n            for(auto &u : pos[i])\n            {\n                E[u].push_back(i);\n            }\n        }\n        \n        \n        vector<int> dp(m+1, big);\n        dp[0] = 0;\n        typedef pair<int,int> pii;\n        priority_queue<pii, vector<pii>, std::greater<pii>> pq;\n        pq.push({0,0});\n        while(!pq.empty())\n        {\n            int x = pq.top().second;\n            int d = pq.top().first;\n            pq.pop();\n            if(d > dp[x])\n            {\n                continue;\n            }\n            if(x == m)\n            {\n                break;\n            }\n            for(auto &u : E[x])\n            {\n                int dd = d + costs[u];\n                int y = x + words[u].length();\n                if(dd < dp[y])\n                {\n                    dp[y] = dd;\n                    pq.push({dd,y});\n                }\n            }\n        }\n        if(dp[m]== big)\n        {\n            return -1;\n        }\n        return dp[m];\n        \n    }\n};",
    "submit_ts": "1720321501",
    "subm_id": "1312324535"
}