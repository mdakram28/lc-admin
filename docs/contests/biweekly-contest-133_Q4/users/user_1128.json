{
    "username": "Danger-29",
    "submission": "import java.util.Arrays;\n\nclass Solution {\n    private static final int MOD = 1000000007;\n\n    public int numberOfPermutations(int n, int[][] requirements) {\n        Arrays.sort(requirements, (a, b) -> Integer.compare(a[0], b[0]));\n        \n        int maxInversions = n * (n - 1) / 2;\n        int[][] dp = new int[n + 1][maxInversions + 1];\n        dp[0][0] = 1;\n\n        for (int length = 1; length <= n; length++) {\n            int[] prefixSums = new int[maxInversions + 1];\n            prefixSums[0] = dp[length - 1][0];\n            for (int k = 1; k <= maxInversions; k++) {\n                prefixSums[k] = (prefixSums[k - 1] + dp[length - 1][k]) % MOD;\n            }\n\n            for (int inversions = 0; inversions <= maxInversions; inversions++) {\n                if (inversions >= length) {\n                    dp[length][inversions] = (prefixSums[inversions] - prefixSums[inversions - length] + MOD) % MOD;\n                } else {\n                    dp[length][inversions] = prefixSums[inversions];\n                }\n            }\n\n            for (int[] req : requirements) {\n                int end = req[0];\n                int count = req[1];\n                if (end + 1 == length) {\n                    for (int inversions = 0; inversions <= maxInversions; inversions++) {\n                        if (inversions != count) {\n                            dp[length][inversions] = 0;\n                        }\n                    }\n                }\n            }\n        }\n\n        int result = 0;\n        for (int inversions = 0; inversions <= maxInversions; inversions++) {\n            result = (result + dp[n][inversions]) % MOD;\n        }\n\n        return result;\n    }\n\n}\n",
    "submit_ts": "1719071569",
    "subm_id": "1296849575"
}