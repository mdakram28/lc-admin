{
    "username": "dush1729",
    "submission": "#include \"bits/stdc++.h\"\nusing namespace std;\n#define ll long long\n\nconst int L = 20, N = 1 << L;\n\nint lg[N];\ntemplate <typename T, typename F = std::function<T(const T&, const T&)>> struct SPARSE {\n\tvector<T> st[L];\n\tF op;\n\n\tSPARSE(const vector<T> &a, F operation): op(operation) {\n\t\tint n = a.size();\n\t\tif(!lg[N - 1]) for(int i = 2; i < N; i++) lg[i] = lg[i >> 1] + 1;\n\t\tfor(int i = 0; i < L; i++) st[i].resize(n);\n\t\tfor(int i = 0; i < n; i++) st[0][i] = a[i];\n\t\tfor(int i = 1; i < L; i++)\n\t\t\tfor(int j = 0; j + (1 << i) <= n; j++)\n\t\t\t\tst[i][j] = op(st[i - 1][j], st[i - 1][j + (1 << (i - 1))]);\n\t}\n\n\t// O(1) query for idempotent functions like min, gcd, or\n\tT query(int i, int j) {\n\t\tint k = lg[j - i + 1];\n\t\treturn op(st[k][i], st[k][j - (1 << k) + 1]);\n\t}\n\n\t// O(logn) query for associative functions like add, xor\n\tT querys(int l, int r) {\n\t\tT s = -1;\n\t\tfor(int j = L - 1, flag = 0; j >= 0; j--) {\n\t\t\tif((1 << j) > r - l + 1) continue;\n\t\t\ts = (flag ? op(s, st[j][l]) : st[j][l]);\n\t\t\tl += 1 << j;\n\t\t\tflag = 1;\n\t\t}\n\t\treturn s;\n\t}\n};\n\nclass Solution {\npublic:\n\tlong long countSubarrays(vector<int>& a, int k) {\n\t\tauto st = SPARSE(a, [](const auto &p, const auto &q) {\n\t\t\treturn p & q;\n\t\t});\n\n\t\tll n = a.size(), ans = 0;\n\t\tfor(int i = 0, r1 = 0, r2 = 0; i < n; i++) {\n\t\t\twhile(r1 < n && st.query(i, r1) > k) r1++;\n\t\t\twhile(r2 < n && st.query(i, r2) >= k) r2++;\n\t\t\tans += r2 - r1;\n            //cout << i << \" \" << r1 << \" \" << r2 << endl;\n\t\t\tr1 = max(r1, i + 1), r2 = max(r2, i + 1);\n\t\t}\n\t\treturn ans;\n\t}\n};\n\n#ifdef DUSH1729\nint main(){cout << \"Compiled!\";}\n#endif",
    "submit_ts": "1720276915",
    "subm_id": "1311638922"
}