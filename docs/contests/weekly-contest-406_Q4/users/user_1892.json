{
    "username": "BADUnhinged",
    "submission": "class Solution:\n    def minimumCost(self, m: int, n: int, horizontalCut: List[int], verticalCut: List[int]) -> int:\n       # since you need to repeat a cut for each slice that exists\n        # and every cut needs to be performed to make it a 1x1 grid\n        # true_cost = cost * # of slices\n        # well # of slices increases over time as we cut our cake\n        # so it makes sense to perform the most costly operations first\n\n        row = 1\n        col = 1\n        horizontalCut.sort(reverse=True)\n        verticalCut.sort(reverse=True)\n        total = 0\n        i,j = 0,0\n        #print(horizontalCut,verticalCut)\n        while i < len(horizontalCut) and j < len(verticalCut):\n            #get largest of the two\n            if horizontalCut[i] > verticalCut[j]:\n                total += col * horizontalCut[i]\n                row = row + 1\n                i += 1\n            else:\n                total += row * verticalCut[j]\n                col = col + 1\n                j += 1\n            \n        \n        # could be left over\n        while i < len(horizontalCut):\n            total += col * horizontalCut[i]\n            i += 1\n        \n        while j < len(verticalCut):\n            total += row * verticalCut[j]\n            j += 1\n        \n        return total ",
    "submit_ts": "1720926214",
    "subm_id": "1320279361"
}