{
    "username": "chrehall68",
    "submission": "class Solution:\n    def minimumCost(self, target: str, words: List[str], costs: List[int]) -> int:\n        # first, find the minimum cost to create each substring of target?\n        \n        # take min to create each substring\n        word_costs = {}\n        for i in range(len(words)):\n            if words[i] in target:\n                if words[i] not in word_costs:\n                    word_costs[words[i]] = float('inf')\n                word_costs[words[i]] = min(\n                    word_costs[words[i]],\n                    costs[i]\n                )\n        \n        # then, construct words?\n        # initialization\n        substring_costs = [float('inf') for _ in range(len(target)+1)]\n        substring_costs[0] = 0  # costs 0 to make a 0 length string\n        for i in range(1, len(target)+1):  # i is length\n            for word in word_costs:\n                if len(word) <= i:\n                    # try taking it as a substring\n                    target_substr= target[i-len(word):i]\n                    if word == target_substr:\n                        # possible to make this\n                        substring_costs[i] = min(substring_costs[i], substring_costs[i-len(word)] + word_costs[word])\n        \n        if substring_costs[-1] == float('inf'):\n            return -1\n        return substring_costs[-1]",
    "submit_ts": "1720321992",
    "subm_id": "1312337797"
}